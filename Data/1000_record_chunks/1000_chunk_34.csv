record_number,buggy_code,fixed_code,code_similarity
33001,"private boolean getData(){
  boolean isAllDetailsFilled=true;
  if (etStaffId.getText().toString().length() > 0 && tvSelectDate.getText().toString().length() > 0 && etBranchId.getText().toString().length() > 0) {
    staffId=Integer.parseInt(etStaffId.getEditableText().toString());
    date=tvSelectDate.getText().toString();
    branchId=Integer.parseInt(etBranchId.getEditableText().toString());
  }
 else {
    isAllDetailsFilled=false;
    Toaster.show(findViewById(android.R.id.content),""String_Node_Str"");
  }
  return isAllDetailsFilled;
}","private boolean getData(){
  boolean isAllDetailsFilled=true;
  if (etStaffId.getText().toString().length() > 0 && tvSelectDate.getText().toString().length() > 0 && etBranchId.getText().toString().length() > 0) {
    date=tvSelectDate.getText().toString();
    isAllDetailsFilled=hasValidStaffAndBranchId();
  }
 else {
    isAllDetailsFilled=false;
    Toaster.show(findViewById(android.R.id.content),""String_Node_Str"");
  }
  return isAllDetailsFilled;
}",0.7377866400797607
33002,"/** 
 * Use this method to fetch and inflate client details in the fragment
 */
public void getClientDetails(){
  safeUIBlockingUtility.safelyBlockUI();
  ((MifosApplication)getActivity().getApplication()).api.clientService.getClient(clientId,new Callback<Client>(){
    @Override public void success(    final Client client,    Response response){
      if (client != null) {
        actionBar.setTitle(getString(R.string.client) + ""String_Node_Str"" + client.getLastname());
        tv_fullName.setText(client.getDisplayName());
        tv_accountNumber.setText(client.getAccountNo());
        tv_externalId.setText(client.getExternalId());
        try {
          List<Integer> dateObj=client.getActivationDate();
          SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
          Date date=simpleDateFormat.parse(DateHelper.getDateAsString(dateObj));
          Locale currentLocale=getResources().getConfiguration().locale;
          DateFormat df=DateFormat.getDateInstance(DateFormat.MEDIUM,currentLocale);
          String dateString=df.format(date);
          tv_activationDate.setText(dateString);
        }
 catch (        IndexOutOfBoundsException e) {
          Toast.makeText(getActivity(),getString(R.string.error_client_inactive),Toast.LENGTH_SHORT).show();
          tv_activationDate.setText(""String_Node_Str"");
        }
catch (        ParseException e) {
          e.printStackTrace();
        }
        tv_office.setText(client.getOfficeName());
        if (client.isImagePresent()) {
          imageLoadingAsyncTask=new ImageLoadingAsyncTask();
          imageLoadingAsyncTask.execute(client.getId());
        }
        iv_clientImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            PopupMenu menu=new PopupMenu(getActivity(),view);
            menu.getMenuInflater().inflate(R.menu.client_image_popup,menu.getMenu());
            menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.client_image_capture:
                  captureClientImage();
                break;
case R.id.client_image_remove:
              deleteClientImage();
            break;
default :
          Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      return true;
    }
  }
);
  menu.show();
}
}
);
safeUIBlockingUtility.safelyUnBlockUI();
inflateClientsAccounts();
}
}
@Override public void failure(RetrofitError retrofitError){
Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
safeUIBlockingUtility.safelyUnBlockUI();
}
}
);
}","/** 
 * Use this method to fetch and inflate client details in the fragment
 */
public void getClientDetails(){
  safeUIBlockingUtility.safelyBlockUI();
  ((MifosApplication)getActivity().getApplication()).api.clientService.getClient(clientId,new Callback<Client>(){
    @Override public void success(    final Client client,    Response response){
      if (client != null) {
        actionBar.setTitle(getString(R.string.client) + ""String_Node_Str"" + client.getLastname());
        tv_fullName.setText(client.getDisplayName());
        tv_accountNumber.setText(client.getAccountNo());
        tv_externalId.setText(client.getExternalId());
        try {
          List<Integer> dateObj=client.getActivationDate();
          SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""String_Node_Str"");
          Date date=simpleDateFormat.parse(DateHelper.getDateAsString(dateObj));
          Locale currentLocale=getResources().getConfiguration().locale;
          DateFormat df=DateFormat.getDateInstance(DateFormat.MEDIUM,currentLocale);
          String dateString=df.format(date);
          tv_activationDate.setText(dateString);
        }
 catch (        IndexOutOfBoundsException e) {
          Toast.makeText(getActivity(),getString(R.string.error_client_inactive),Toast.LENGTH_SHORT).show();
          tv_activationDate.setText(""String_Node_Str"");
        }
catch (        ParseException e) {
          e.printStackTrace();
        }
        tv_office.setText(client.getOfficeName());
        if (client.isImagePresent()) {
          imageLoadingAsyncTask=new ImageLoadingAsyncTask();
          imageLoadingAsyncTask.execute(client.getId());
        }
 else {
          iv_clientImage.setImageDrawable(getResources().getDrawable(R.drawable.ic_launcher));
          pb_imageProgressBar.setVisibility(View.GONE);
        }
        iv_clientImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            PopupMenu menu=new PopupMenu(getActivity(),view);
            menu.getMenuInflater().inflate(R.menu.client_image_popup,menu.getMenu());
            menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.client_image_capture:
                  captureClientImage();
                break;
case R.id.client_image_remove:
              deleteClientImage();
            break;
default :
          Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      return true;
    }
  }
);
  menu.show();
}
}
);
safeUIBlockingUtility.safelyUnBlockUI();
inflateClientsAccounts();
}
}
@Override public void failure(RetrofitError retrofitError){
Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
safeUIBlockingUtility.safelyUnBlockUI();
}
}
);
}",0.9696752198097972
33003,"@Override protected Void doInBackground(Integer... integers){
  Log.d(TAG,""String_Node_Str"");
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(Constants.applicationContext);
  String authToken=pref.getString(User.AUTHENTICATION_KEY,""String_Node_Str"");
  String mInstanceUrl=pref.getString(Constants.INSTANCE_URL_KEY,getString(R.string.default_instance_url));
  String url=Constants.PROTOCOL_HTTPS + mInstanceUrl + Constants.API_PATH+ ""String_Node_Str""+ ""String_Node_Str""+ integers[0]+ ""String_Node_Str"";
  try {
    HttpURLConnection httpURLConnection=(HttpURLConnection)(new URL(url)).openConnection();
    httpURLConnection.setRequestMethod(""String_Node_Str"");
    httpURLConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpURLConnection.setRequestProperty(((MifosApplication)getActivity().getApplication()).api.HEADER_AUTHORIZATION,authToken);
    httpURLConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpURLConnection.setDoInput(true);
    httpURLConnection.connect();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=httpURLConnection.getInputStream();
    bmp=BitmapFactory.decodeStream(inputStream);
    httpURLConnection.disconnect();
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
  }
catch (  IOException ioe) {
  }
  return null;
}","@Override protected Void doInBackground(Integer... integers){
  Log.d(TAG,""String_Node_Str"");
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(Constants.applicationContext);
  String authToken=pref.getString(User.AUTHENTICATION_KEY,""String_Node_Str"");
  String mInstanceUrl=pref.getString(Constants.INSTANCE_URL_KEY,getString(R.string.default_instance_url));
  String url=mInstanceUrl + ""String_Node_Str"" + ""String_Node_Str""+ integers[0]+ ""String_Node_Str"";
  try {
    HttpURLConnection httpURLConnection=(HttpURLConnection)(new URL(url)).openConnection();
    httpURLConnection.setRequestMethod(""String_Node_Str"");
    httpURLConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpURLConnection.setRequestProperty(((MifosApplication)getActivity().getApplication()).api.HEADER_AUTHORIZATION,authToken);
    httpURLConnection.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    httpURLConnection.setDoInput(true);
    httpURLConnection.connect();
    Log.i(""String_Node_Str"",""String_Node_Str"");
    InputStream inputStream=httpURLConnection.getInputStream();
    bmp=BitmapFactory.decodeStream(inputStream);
    httpURLConnection.disconnect();
    Log.i(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  MalformedURLException e) {
  }
catch (  IOException ioe) {
  }
  return null;
}",0.9698529411764706
33004,"private void updateMyInstanceUrl(){
  String textUnderConstruction;
  if (!et_port.getEditableText().toString().isEmpty()) {
    port=Integer.valueOf(et_port.getEditableText().toString().trim());
    textUnderConstruction=constructInstanceUrl(et_instanceURL.getEditableText().toString(),port);
  }
 else {
    textUnderConstruction=constructInstanceUrl(et_instanceURL.getEditableText().toString(),null);
  }
  tv_constructed_instance_url.setText(textUnderConstruction);
  if (!validateURL(textUnderConstruction)) {
    tv_constructed_instance_url.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    tv_constructed_instance_url.setTextColor(getResources().getColor(R.color.deposit_green));
  }
}","private void updateMyInstanceUrl(){
  String textUnderConstruction;
  if (!et_port.getEditableText().toString().isEmpty()) {
    port=Integer.valueOf(et_port.getEditableText().toString().trim());
    textUnderConstruction=constructInstanceUrl(et_instanceURL.getEditableText().toString(),port);
  }
 else {
    port=null;
    textUnderConstruction=constructInstanceUrl(et_instanceURL.getEditableText().toString(),null);
  }
  tv_constructed_instance_url.setText(textUnderConstruction);
  if (!validateURL(textUnderConstruction)) {
    tv_constructed_instance_url.setTextColor(getResources().getColor(R.color.red));
  }
 else {
    tv_constructed_instance_url.setTextColor(getResources().getColor(R.color.deposit_green));
  }
}",0.989547038327526
33005,"/** 
 * Stores the domain name in shared preferences if the login was successful, so that it can be referenced later or with multiple login/logouts user doesn't need to type in the domain name over and over again.
 * @param instanceURL
 */
public void saveLastAccessedInstanceDomainName(String instanceURL){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(Constants.INSTANCE_URL_KEY,instanceURL);
  editor.commit();
  editor.apply();
}","/** 
 * Stores the domain name in shared preferences if the login was successful, so that it can be referenced later or with multiple login/logouts user doesn't need to type in the domain name over and over again.
 * @param instanceDomain
 */
public void saveLastAccessedInstanceDomainName(String instanceDomain){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(Constants.INSTANCE_DOMAIN_KEY,instanceDomain);
  editor.apply();
}",0.9405405405405406
33006,"/** 
 * Stores the port in shared preferences if the login was successful, so that it can be referenced later or with multiple login/logouts user doesn't need to type in the domain name over and over again.
 * @param instancePort
 */
public void saveLastAccessedInstancePort(String instancePort){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(Constants.INSTANCE_PORT_KEY,instancePort);
  editor.commit();
  editor.apply();
}","/** 
 * Stores the port in shared preferences if the login was successful, so that it can be referenced later or with multiple login/logouts user doesn't need to type in the instance port over and over again.
 * @param instancePort
 */
public void saveLastAccessedInstancePort(String instancePort){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(Constants.INSTANCE_PORT_KEY,instancePort);
  editor.apply();
}",0.9520624303232998
33007,"@Override public void success(User user,Response response){
  ((MifosApplication)getApplication()).api=api;
  progressDialog.dismiss();
  Toast.makeText(context,getString(R.string.toast_welcome) + ""String_Node_Str"" + user.getUsername(),Toast.LENGTH_SHORT).show();
  saveLastAccessedInstanceDomainName(et_instanceURL.getEditableText().toString());
  if (!et_port.getEditableText().toString().trim().isEmpty()) {
    saveLastAccessedInstancePort(et_port.getEditableText().toString());
  }
  saveAuthenticationKey(""String_Node_Str"" + user.getBase64EncodedAuthenticationKey());
  Intent intent=new Intent(LoginActivity.this,DashboardFragmentActivity.class);
  startActivity(intent);
  finish();
}","@Override public void success(User user,Response response){
  ((MifosApplication)getApplication()).api=api;
  progressDialog.dismiss();
  Toast.makeText(context,getString(R.string.toast_welcome) + ""String_Node_Str"" + user.getUsername(),Toast.LENGTH_SHORT).show();
  saveLastAccessedInstanceUrl(instanceURL);
  saveLastAccessedInstanceDomainName(et_instanceURL.getEditableText().toString());
  if (!et_port.getEditableText().toString().trim().isEmpty()) {
    saveLastAccessedInstancePort(et_port.getEditableText().toString());
  }
  String lastAccessedTenantIdentifier=et_tenantIdentifier.getEditableText().toString().trim().isEmpty() || et_tenantIdentifier.getEditableText() == null ? ""String_Node_Str"" : et_tenantIdentifier.getEditableText().toString().trim();
  saveLastAccessedTenant(lastAccessedTenantIdentifier);
  saveAuthenticationKey(""String_Node_Str"" + user.getBase64EncodedAuthenticationKey());
  Intent intent=new Intent(LoginActivity.this,DashboardFragmentActivity.class);
  startActivity(intent);
  finish();
}",0.7902097902097902
33008,"/** 
 * After the user is authenticated the Base64 encoded auth token is saved in Shared Preferences so that user can be logged in when returning to the app even if the app is terminated from the background.
 * @param authenticationKey
 */
public void saveAuthenticationKey(String authenticationKey){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(User.AUTHENTICATION_KEY,authenticationKey);
  editor.commit();
  editor.apply();
}","/** 
 * After the user is authenticated the Base64 encoded auth token is saved in Shared Preferences so that user can be logged in when returning to the app even if the app is terminated from the background.
 * @param authenticationKey
 */
public void saveAuthenticationKey(String authenticationKey){
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.putString(User.AUTHENTICATION_KEY,authenticationKey);
  editor.apply();
}",0.9790055248618784
33009,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_splash);
  getSupportActionBar().hide();
  Crashlytics.start(this);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.container,new PlaceholderFragment()).commit();
  }
  context=SplashScreenActivity.this.getApplicationContext();
  Constants.applicationContext=getApplicationContext();
  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  authenticationToken=sharedPreferences.getString(User.AUTHENTICATION_KEY,""String_Node_Str"");
  if (authenticationToken.equals(""String_Node_Str"")) {
    startActivity(new Intent(SplashScreenActivity.this,LoginActivity.class));
  }
 else {
    startActivity(new Intent(SplashScreenActivity.this,DashboardFragmentActivity.class));
  }
  finish();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_splash);
  getSupportActionBar().hide();
  Crashlytics.start(this);
  if (savedInstanceState == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.container,new PlaceholderFragment()).commit();
  }
  context=SplashScreenActivity.this.getApplicationContext();
  Constants.applicationContext=getApplicationContext();
  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
  authenticationToken=sharedPreferences.getString(User.AUTHENTICATION_KEY,""String_Node_Str"");
  if (authenticationToken.equals(""String_Node_Str"")) {
    startActivity(new Intent(SplashScreenActivity.this,LoginActivity.class));
  }
 else {
    SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);
    String instanceURL=sharedPreferences.getString(Constants.INSTANCE_URL_KEY,null);
    String tenantIdentifier=sharedPreferences.getString(Constants.TENANT_IDENTIFIER_KEY,null);
    ((MifosApplication)getApplication()).api=new API(instanceURL,tenantIdentifier,false);
    startActivity(new Intent(SplashScreenActivity.this,DashboardFragmentActivity.class));
  }
  finish();
}",0.8292910447761194
33010,"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.menu_sync,menu);
  syncItem=menu.findItem(R.id.action_sync);
  if (centerId != -1) {
    List<MeetingCenter> center=Select.from(MeetingCenter.class).where(Condition.prop(""String_Node_Str"").eq(centerId)).list();
    if (center.get(0).getIsSynced() == 1)     syncItem.setEnabled(false);
  }
}","@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.menu_sync,menu);
  syncItem=menu.findItem(R.id.action_sync);
  if (centerId != -1) {
    List<MeetingCenter> center=new ArrayList<MeetingCenter>();
    center.addAll(Select.from(MeetingCenter.class).where(Condition.prop(""String_Node_Str"").eq(centerId)).list());
    if (center.size() > 0 && center.get(0).getIsSynced() == 1)     syncItem.setEnabled(false);
  }
}",0.923728813559322
33011,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_sync) {
    LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View syncProgress=inflater.inflate(R.layout.sync_progress,null);
    MenuItemCompat.setActionView(item,syncProgress);
    if (centerId != -1) {
      RepaymentTransactionSyncService syncService=new RepaymentTransactionSyncService(this,centerId);
      syncService.syncRepayments();
    }
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.action_sync) {
    LayoutInflater inflater=(LayoutInflater)getActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View syncProgress=inflater.inflate(R.layout.sync_progress,null);
    MenuItemCompat.setActionView(item,syncProgress);
    if (centerId != -1) {
      RepaymentTransactionSyncService syncService=new RepaymentTransactionSyncService(this,centerId);
      syncService.syncRepayments(getActivity());
    }
  }
  return super.onOptionsItemSelected(item);
}",0.9885057471264368
33012,"public void syncRepayments(){
  List<RepaymentTransaction> transactions=Select.from(RepaymentTransaction.class).list();
  Log.i(TAG,""String_Node_Str"" + transactions);
  List<MeetingCenter> centerList=Select.from(MeetingCenter.class).where(com.orm.query.Condition.prop(""String_Node_Str"").eq(centerId)).list();
  MeetingCenter center=centerList.get(0);
  if (transactions.size() > 0) {
    List<BulkRepaymentTransactions> repaymentTransactions=new ArrayList<BulkRepaymentTransactions>();
    for (    RepaymentTransaction transaction : transactions) {
      Loan loan=transaction.getLoan();
      if (loan.getAccountStatusId() == 300) {
        repaymentTransactions.add(new BulkRepaymentTransactions(loan.getLoanId(),transaction.getTransactionAmount()));
      }
    }
    BulkRepaymentTransactions[] repaymentTransactionArray=new BulkRepaymentTransactions[repaymentTransactions.size()];
    repaymentTransactions.toArray(repaymentTransactionArray);
    CollectionSheetPayload payload=new CollectionSheetPayload();
    payload.bulkRepaymentTransactions=repaymentTransactionArray;
    payload.setCalendarId(center.getCollectionMeetingCalendar().getCalendarId());
    payload.setTransactionDate(DateHelper.getPayloadDate());
    SaveCollectionSheetTask task=new SaveCollectionSheetTask();
    task.execute(payload);
  }
 else   syncFinishListener.onSyncFinish(""String_Node_Str"",false);
}","public void syncRepayments(Context context){
  List<RepaymentTransaction> transactions=Select.from(RepaymentTransaction.class).list();
  Log.i(TAG,""String_Node_Str"" + transactions);
  List<MeetingCenter> centerList=Select.from(MeetingCenter.class).where(com.orm.query.Condition.prop(""String_Node_Str"").eq(centerId)).list();
  MeetingCenter center=centerList.get(0);
  if (transactions.size() > 0) {
    List<BulkRepaymentTransactions> repaymentTransactions=new ArrayList<BulkRepaymentTransactions>();
    for (    RepaymentTransaction transaction : transactions) {
      Loan loan=transaction.getLoan();
      if (loan.getAccountStatusId() == 300) {
        repaymentTransactions.add(new BulkRepaymentTransactions(loan.getLoanId(),transaction.getTransactionAmount()));
      }
    }
    BulkRepaymentTransactions[] repaymentTransactionArray=new BulkRepaymentTransactions[repaymentTransactions.size()];
    repaymentTransactions.toArray(repaymentTransactionArray);
    CollectionSheetPayload payload=new CollectionSheetPayload();
    payload.bulkRepaymentTransactions=repaymentTransactionArray;
    payload.setCalendarId(center.getCollectionMeetingCalendar().getCalendarId());
    payload.setTransactionDate(DateHelper.getPayloadDate(context));
    SaveCollectionSheetTask task=new SaveCollectionSheetTask();
    task.execute(payload);
  }
 else   syncFinishListener.onSyncFinish(""String_Node_Str"",false);
}",0.9921146953405018
33013,"private Payload getPayload(Context context,MeetingCenter center){
  final Payload payload=new Payload();
  payload.setTransactionDate(DateHelper.getPayloadDate());
  payload.setCalendarId(center.getCollectionMeetingCalendar().getCalendarInstanceId());
  return payload;
}","private Payload getPayload(Context context,MeetingCenter center){
  final Payload payload=new Payload();
  payload.setTransactionDate(DateHelper.getPayloadDate(context));
  payload.setCalendarId(center.getCollectionMeetingCalendar().getCalendarInstanceId());
  return payload;
}",0.9872495446265938
33014,"@Override public void loadClientsOfGroup(List<Client> clientList){
  ClientListFragment clientListFragment=ClientListFragment.newInstance(clientList);
  FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
  fragmentTransaction.addToBackStack(FragmentConstants.FRAG_GROUP_LIST);
  fragmentTransaction.replace(R.id.center_container,clientListFragment);
  fragmentTransaction.commitAllowingStateLoss();
}","@Override public void loadClientsOfGroup(List<Client> clientList){
  ClientListFragment clientListFragment=ClientListFragment.newInstance(clientList,true);
  FragmentTransaction fragmentTransaction=getSupportFragmentManager().beginTransaction();
  fragmentTransaction.addToBackStack(FragmentConstants.FRAG_GROUP_LIST);
  fragmentTransaction.replace(R.id.center_container,clientListFragment);
  fragmentTransaction.commitAllowingStateLoss();
}",0.994311717861206
33015,"public void inflateClientList(){
  final ClientNameListAdapter clientNameListAdapter=new ClientNameListAdapter(context,clientList);
  lv_clients.setAdapter(clientNameListAdapter);
  lv_clients.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent clientActivityIntent=new Intent(getActivity(),ClientActivity.class);
      clientActivityIntent.putExtra(Constants.CLIENT_ID,clientList.get(i).getId());
      startActivity(clientActivityIntent);
    }
  }
);
  lv_clients.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView absListView,    int i){
    }
    @Override public void onScroll(    AbsListView absListView,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (firstVisibleItem + visibleItemCount >= totalItemCount) {
        offset+=limit + 1;
        swipeRefreshLayout.setRefreshing(true);
        API.clientService.listAllClients(offset,limit,new Callback<Page<Client>>(){
          @Override public void success(          Page<Client> clientPage,          Response response){
            clientList.addAll(clientPage.getPageItems());
            clientNameListAdapter.notifyDataSetChanged();
            index=lv_clients.getFirstVisiblePosition();
            View v=lv_clients.getChildAt(0);
            top=(v == null) ? 0 : v.getTop();
            lv_clients.setSelectionFromTop(index,top);
            swipeRefreshLayout.setRefreshing(false);
          }
          @Override public void failure(          RetrofitError retrofitError){
            swipeRefreshLayout.setRefreshing(false);
            if (getActivity() != null) {
              try {
                Log.i(""String_Node_Str"",""String_Node_Str"" + retrofitError.getResponse().getStatus());
                if (retrofitError.getResponse().getStatus() == HttpStatus.SC_UNAUTHORIZED) {
                  Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                  startActivity(new Intent(getActivity(),LogoutActivity.class));
                  getActivity().finish();
                }
 else {
                  Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                }
              }
 catch (              NullPointerException npe) {
                Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
              }
            }
          }
        }
);
      }
    }
  }
);
}","public void inflateClientList(){
  final ClientNameListAdapter clientNameListAdapter=new ClientNameListAdapter(context,clientList);
  lv_clients.setAdapter(clientNameListAdapter);
  lv_clients.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int i,    long l){
      Intent clientActivityIntent=new Intent(getActivity(),ClientActivity.class);
      clientActivityIntent.putExtra(Constants.CLIENT_ID,clientList.get(i).getId());
      startActivity(clientActivityIntent);
    }
  }
);
  if (isInfiniteScrollEnabled) {
    setInfiniteScrollListener(clientNameListAdapter);
  }
}",0.3769633507853403
33016,"public static ClientListFragment newInstance(List<Client> clientList){
  ClientListFragment clientListFragment=new ClientListFragment();
  clientListFragment.setClientList(clientList);
  return clientListFragment;
}","public static ClientListFragment newInstance(List<Client> clientList,boolean isParentFragmentAGroupFragment){
  ClientListFragment clientListFragment=new ClientListFragment();
  clientListFragment.setClientList(clientList);
  if (isParentFragmentAGroupFragment) {
    clientListFragment.setInfiniteScrollEnabled(false);
  }
  return clientListFragment;
}",0.671353251318102
33017,"@Override public void success(Page<Client> page,Response response){
  clientList=page.getPageItems();
  inflateClientList();
  swipeRefreshLayout.setRefreshing(false);
}","@Override public void success(Page<Client> clientPage,Response response){
  clientList.addAll(clientPage.getPageItems());
  clientNameListAdapter.notifyDataSetChanged();
  index=lv_clients.getFirstVisiblePosition();
  View v=lv_clients.getChildAt(0);
  top=(v == null) ? 0 : v.getTop();
  lv_clients.setSelectionFromTop(index,top);
  swipeRefreshLayout.setRefreshing(false);
}",0.5357798165137615
33018,"@Override public boolean onTouch(View v,MotionEvent event){
  final MFDatePicker mfDatePicker=new MFDatePicker();
  mfDatePicker.setOnDatePickListener(new MFDatePicker.OnDatePickListener(){
    @Override public void onDatePicked(    String date){
      setValue(date);
      mfDatePicker.dismiss();
    }
  }
);
  mfDatePicker.show(fragmentManager,MFDatePicker.TAG);
  return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
  if (MotionEvent.ACTION_UP == event.getAction()) {
    final MFDatePicker mfDatePicker=new MFDatePicker();
    mfDatePicker.setOnDatePickListener(new MFDatePicker.OnDatePickListener(){
      @Override public void onDatePicked(      String date){
        setValue(date);
        mfDatePicker.dismiss();
      }
    }
);
    mfDatePicker.show(fragmentManager,MFDatePicker.TAG);
  }
  return true;
}",0.8238095238095238
33019,"public void setIsDateField(Boolean isDateField,final FragmentManager fragmentManager){
  this.isDateField=isDateField;
  if (isDateField()) {
    input.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
        final MFDatePicker mfDatePicker=new MFDatePicker();
        mfDatePicker.setOnDatePickListener(new MFDatePicker.OnDatePickListener(){
          @Override public void onDatePicked(          String date){
            setValue(date);
            mfDatePicker.dismiss();
          }
        }
);
        mfDatePicker.show(fragmentManager,MFDatePicker.TAG);
        return true;
      }
    }
);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}","public void setIsDateField(Boolean isDateField,final FragmentManager fragmentManager){
  this.isDateField=isDateField;
  if (isDateField()) {
    input.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
        if (MotionEvent.ACTION_UP == event.getAction()) {
          final MFDatePicker mfDatePicker=new MFDatePicker();
          mfDatePicker.setOnDatePickListener(new MFDatePicker.OnDatePickListener(){
            @Override public void onDatePicked(            String date){
              setValue(date);
              mfDatePicker.dismiss();
            }
          }
);
          mfDatePicker.show(fragmentManager,MFDatePicker.TAG);
        }
        return true;
      }
    }
);
  }
 else {
    throw new RuntimeException(""String_Node_Str"");
  }
}",0.937738246505718
33020,"@Override public void afterTextChanged(Editable s){
  CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),Double.parseDouble(s.toString()));
}","@Override public void afterTextChanged(Editable s){
  try {
    CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),s.toString().equals(""String_Node_Str"") ? 0.00 : Double.parseDouble(s.toString()));
  }
 catch (  NumberFormatException e) {
    CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),0.00);
  }
}",0.6368715083798883
33021,"@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ReusableViewHolder reusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_sheet_loan,null);
    reusableViewHolder=new ReusableViewHolder(convertView);
    convertView.setTag(reusableViewHolder);
  }
 else {
    reusableViewHolder=(ReusableViewHolder)convertView.getTag();
  }
  Double transactionAmount=CollectionListAdapter.sRepaymentTransactions.get(loans.get(position).getLoanId());
  reusableViewHolder.tv_amountDue.setText(String.valueOf(loans.get(position).getTotalDue()));
  reusableViewHolder.tv_loanShortName.setText(loans.get(position).getProductShortName());
  reusableViewHolder.et_amountPaid.setText(String.valueOf(transactionAmount));
  reusableViewHolder.et_amountPaid.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),Double.parseDouble(s.toString()));
    }
  }
);
  return convertView;
}","@Override public View getView(final int position,View convertView,ViewGroup parent){
  final ReusableViewHolder reusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_sheet_loan,null);
    reusableViewHolder=new ReusableViewHolder(convertView);
    convertView.setTag(reusableViewHolder);
  }
 else {
    reusableViewHolder=(ReusableViewHolder)convertView.getTag();
  }
  Double transactionAmount=CollectionListAdapter.sRepaymentTransactions.get(loans.get(position).getLoanId());
  reusableViewHolder.tv_amountDue.setText(String.valueOf(loans.get(position).getTotalDue()));
  reusableViewHolder.tv_loanShortName.setText(loans.get(position).getProductShortName());
  reusableViewHolder.et_amountPaid.setText(String.valueOf(transactionAmount));
  reusableViewHolder.et_amountPaid.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      try {
        CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),s.toString().equals(""String_Node_Str"") ? 0.00 : Double.parseDouble(s.toString()));
      }
 catch (      NumberFormatException e) {
        CollectionListAdapter.sRepaymentTransactions.put(loans.get(position).getLoanId(),0.00);
      }
    }
  }
);
  return convertView;
}",0.9245878639074008
33022,"/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_CLIENTS_NAME);
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getString(R.string.documents));
  menu.add(Menu.NONE,MENU_ITEM_IDENTIFIERS,Menu.NONE,getString(R.string.identifiers));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(0).getSubMenu();
  if (dataTableSubMenu != null && clientDataTables != null && clientDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=clientDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}","/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_CLIENTS_NAME);
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getString(R.string.documents));
  menu.add(Menu.NONE,MENU_ITEM_IDENTIFIERS,Menu.NONE,getString(R.string.identifiers));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(1).getSubMenu();
  if (dataTableSubMenu != null && clientDataTables != null && clientDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=clientDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}",0.9993638676844784
33023,"/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_LOAN_NAME);
  menu.add(Menu.NONE,MENU_ITEM_LOAN_TRANSACTIONS,Menu.NONE,getResources().getString(R.string.transactions));
  menu.add(Menu.NONE,MENU_ITEM_REPAYMENT_SCHEDULE,Menu.NONE,getResources().getString(R.string.loan_repayment_schedule));
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getResources().getString(R.string.documents));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(0).getSubMenu();
  if (dataTableSubMenu != null && loanDataTables != null && loanDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=loanDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}","/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_LOAN_NAME);
  menu.add(Menu.NONE,MENU_ITEM_LOAN_TRANSACTIONS,Menu.NONE,getResources().getString(R.string.transactions));
  menu.add(Menu.NONE,MENU_ITEM_REPAYMENT_SCHEDULE,Menu.NONE,getResources().getString(R.string.loan_repayment_schedule));
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getResources().getString(R.string.documents));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(1).getSubMenu();
  if (dataTableSubMenu != null && loanDataTables != null && loanDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=loanDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}",0.999418942475305
33024,"/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_SAVINGS_ACCOUNTS_NAME);
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getResources().getString(R.string.documents));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(0).getSubMenu();
  if (dataTableSubMenu != null && savingsAccountDataTables != null && savingsAccountDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=savingsAccountDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}","/** 
 * Prepare the Screen's standard options menu to be displayed.  This is called right before the menu is shown, every time it is shown.  You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.  See  {@link android.app.Activity#onPrepareOptionsMenu(android.view.Menu) Activity.onPrepareOptionsMenu}for more information.
 * @param menu The options menu as last shown or first initialized byonCreateOptionsMenu().
 * @see #setHasOptionsMenu
 * @see #onCreateOptionsMenu
 */
@Override public void onPrepareOptionsMenu(Menu menu){
  menu.clear();
  menu.add(Menu.NONE,MENU_ITEM_SEARCH,Menu.NONE,getString(R.string.search)).setIcon(new IconDrawable(getActivity(),Iconify.IconValue.fa_search).colorRes(R.color.black).actionBarSize()).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
  menu.addSubMenu(Menu.NONE,MENU_ITEM_DATA_TABLES,Menu.NONE,Constants.DATA_TABLE_SAVINGS_ACCOUNTS_NAME);
  menu.add(Menu.NONE,MENU_ITEM_DOCUMENTS,Menu.NONE,getResources().getString(R.string.documents));
  int SUBMENU_ITEM_ID=0;
  SubMenu dataTableSubMenu=menu.getItem(1).getSubMenu();
  if (dataTableSubMenu != null && savingsAccountDataTables != null && savingsAccountDataTables.size() > 0) {
    Iterator<DataTable> dataTableIterator=savingsAccountDataTables.iterator();
    while (dataTableIterator.hasNext()) {
      dataTableSubMenu.add(Menu.NONE,SUBMENU_ITEM_ID,Menu.NONE,dataTableIterator.next().getRegisteredTableName());
      SUBMENU_ITEM_ID++;
    }
  }
  super.onPrepareOptionsMenu(menu);
}",0.9993476842791912
33025,"@Override public int getGroupCount(){
  return mifosGroups.size();
}","@Override public int getGroupCount(){
  return sMifosGroups.size();
}",0.978102189781022
33026,"@Override public Client getChild(int groupPosition,int childPosition){
  return mifosGroups.get(groupPosition).getClients().get(childPosition);
}","@Override public Client getChild(int groupPosition,int childPosition){
  return sMifosGroups.get(groupPosition).getClients().get(childPosition);
}",0.9896907216494846
33027,"@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  MifosGroupReusableViewHolder mifosGroupReusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_list_group,null);
    mifosGroupReusableViewHolder=new MifosGroupReusableViewHolder(convertView);
    convertView.setTag(mifosGroupReusableViewHolder);
  }
 else {
    mifosGroupReusableViewHolder=(MifosGroupReusableViewHolder)convertView.getTag();
  }
  mifosGroupReusableViewHolder.tv_groupName.setText(mifosGroups.get(groupPosition).getGroupName());
  mifosGroupReusableViewHolder.tv_groupTotal.setText(""String_Node_Str"");
  return convertView;
}","@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  MifosGroupReusableViewHolder mifosGroupReusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_list_group,null);
    mifosGroupReusableViewHolder=new MifosGroupReusableViewHolder(convertView);
    convertView.setTag(mifosGroupReusableViewHolder);
  }
 else {
    mifosGroupReusableViewHolder=(MifosGroupReusableViewHolder)convertView.getTag();
  }
  double groupTotalDue=0;
  for (  Client client : sMifosGroups.get(groupPosition).getClients()) {
    for (    Loan loan : client.getLoans()) {
      groupTotalDue+=sRepaymentTransactions.get(loan.getLoanId());
    }
  }
  mifosGroupReusableViewHolder.tv_groupName.setText(sMifosGroups.get(groupPosition).getGroupName());
  mifosGroupReusableViewHolder.tv_groupTotal.setText(String.valueOf(groupTotalDue));
  return convertView;
}",0.6972809667673716
33028,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  ClientReusableViewHolder clientReusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_list_group_client,null);
    clientReusableViewHolder=new ClientReusableViewHolder(convertView);
    convertView.setTag(clientReusableViewHolder);
  }
 else {
    clientReusableViewHolder=(ClientReusableViewHolder)convertView.getTag();
  }
  Client client=mifosGroups.get(groupPosition).getClients().get(childPosition);
  double totalDue=0;
  List<Loan> loans=client.getLoans();
  for (  Loan loan : loans) {
    totalDue+=loan.getTotalDue();
  }
  clientReusableViewHolder.tv_clientName.setText(client.getClientName());
  clientReusableViewHolder.et_amount.setText(String.valueOf(totalDue));
  return convertView;
}","@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  ClientReusableViewHolder clientReusableViewHolder;
  if (convertView == null) {
    convertView=layoutInflater.inflate(R.layout.row_collection_list_group_client,null);
    clientReusableViewHolder=new ClientReusableViewHolder(convertView);
    convertView.setTag(clientReusableViewHolder);
  }
 else {
    clientReusableViewHolder=(ClientReusableViewHolder)convertView.getTag();
  }
  Client client=sMifosGroups.get(groupPosition).getClients().get(childPosition);
  double totalDue=0;
  List<Loan> loans=client.getLoans();
  for (  Loan loan : loans) {
    totalDue+=loan.getTotalDue();
  }
  clientReusableViewHolder.tv_clientId.setText(String.valueOf(client.getClientId()));
  clientReusableViewHolder.tv_clientName.setText(client.getClientName());
  clientReusableViewHolder.tv_clientTotal.setText(String.valueOf(totalDue));
  CollectionSheetLoanAccountListAdapter collectionSheetLoanAccountListAdapter=new CollectionSheetLoanAccountListAdapter(context,loans,groupPosition,childPosition);
  clientReusableViewHolder.lv_loans.setAdapter(collectionSheetLoanAccountListAdapter);
  return convertView;
}",0.7673430863614913
33029,"public CollectionListAdapter(Context context,List<MifosGroup> mifosGroups){
  this.context=context;
  layoutInflater=LayoutInflater.from(this.context);
  this.mifosGroups=mifosGroups;
}","public CollectionListAdapter(Context context,List<MifosGroup> mifosGroups){
  this.context=context;
  layoutInflater=LayoutInflater.from(this.context);
  sMifosGroups=mifosGroups;
  for (  MifosGroup mifosGroup : sMifosGroups) {
    for (    Client client : mifosGroup.getClients()) {
      for (      Loan loan : client.getLoans()) {
        sRepaymentTransactions.put(loan.getLoanId(),loan.getTotalDue());
      }
    }
  }
}",0.5849673202614379
33030,"@Override public int getChildrenCount(int groupPosition){
  return mifosGroups.get(groupPosition).getClients().size();
}","@Override public int getChildrenCount(int groupPosition){
  return sMifosGroups.get(groupPosition).getClients().size();
}",0.9875518672199172
33031,"@Override public MifosGroup getGroup(int groupPosition){
  return mifosGroups.get(groupPosition);
}","@Override public MifosGroup getGroup(int groupPosition){
  return sMifosGroups.get(groupPosition);
}",0.984924623115578
33032,"/** 
 * Use this method to fetch and inflate all loan and savings accounts of the client and inflate them in the fragment
 */
public void inflateClientsAccounts(){
  safeUIBlockingUtility.safelyBlockUI();
  API.clientAccountsService.getAllAccountsOfClient(clientId,new Callback<ClientAccounts>(){
    @Override public void success(    final ClientAccounts clientAccounts,    Response response){
      if (!isAdded()) {
        return;
      }
      final String loanAccountsStringResource=getResources().getString(R.string.loanAccounts);
      final String savingsAccountsStringResource=getResources().getString(R.string.savingAccounts);
      final Iconify.IconValue listOpenIcon=Iconify.IconValue.fa_minus_circle;
      final Iconify.IconValue listClosedIcon=Iconify.IconValue.fa_plus_circle;
      tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
      tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
      Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
      if (clientAccounts.getLoanAccounts().size() > 0) {
        LoanAccountsListAdapter loanAccountsListAdapter=new LoanAccountsListAdapter(getActivity().getApplicationContext(),clientAccounts.getLoanAccounts());
        tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
        tv_toggle_loan_accounts.setText(loanAccountsStringResource);
        tv_count_loan_accounts.setText(String.valueOf(clientAccounts.getLoanAccounts().size()));
        tv_toggle_loan_accounts.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            if (!isLoanAccountsListOpen) {
              isLoanAccountsListOpen=true;
              tv_toggle_loan_accounts_icon.setText(listOpenIcon.formattedName());
              isSavingsAccountsListOpen=false;
              tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_savings.setVisibility(View.GONE);
              lv_accounts_loans.setVisibility(View.VISIBLE);
            }
 else {
              isLoanAccountsListOpen=false;
              tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_loans.setVisibility(View.GONE);
            }
            Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
          }
        }
);
        lv_accounts_loans.setAdapter(loanAccountsListAdapter);
        lv_accounts_loans.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            mListener.loadLoanAccountSummary(clientAccounts.getLoanAccounts().get(i).getId());
          }
        }
);
        lv_accounts_loans.setOnTouchListener(new View.OnTouchListener(){
          @Override public boolean onTouch(          View view,          MotionEvent motionEvent){
            view.getParent().requestDisallowInterceptTouchEvent(true);
            return false;
          }
        }
);
      }
      if (clientAccounts.getSavingsAccounts().size() > 0) {
        SavingsAccountsListAdapter savingsAccountsListAdapter=new SavingsAccountsListAdapter(getActivity().getApplicationContext(),clientAccounts.getSavingsAccounts());
        tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
        tv_toggle_savings_accounts.setText(savingsAccountsStringResource);
        tv_count_savings_accounts.setText(String.valueOf(clientAccounts.getSavingsAccounts().size()));
        tv_toggle_savings_accounts.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            if (!isSavingsAccountsListOpen) {
              isSavingsAccountsListOpen=true;
              tv_toggle_savings_accounts_icon.setText(listOpenIcon.formattedName());
              isLoanAccountsListOpen=false;
              tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_loans.setVisibility(View.GONE);
              lv_accounts_savings.setVisibility(View.VISIBLE);
            }
 else {
              isSavingsAccountsListOpen=false;
              tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_savings.setVisibility(View.GONE);
            }
            Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
          }
        }
);
        lv_accounts_savings.setAdapter(savingsAccountsListAdapter);
        lv_accounts_savings.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            mListener.loadSavingsAccountSummary(clientAccounts.getSavingsAccounts().get(i).getId());
          }
        }
);
        lv_accounts_savings.setOnTouchListener(new View.OnTouchListener(){
          @Override public boolean onTouch(          View view,          MotionEvent motionEvent){
            view.getParent().requestDisallowInterceptTouchEvent(true);
            return false;
          }
        }
);
      }
      safeUIBlockingUtility.safelyUnBlockUI();
      inflateDataTablesList();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","/** 
 * Use this method to fetch and inflate all loan and savings accounts of the client and inflate them in the fragment
 */
public void inflateClientsAccounts(){
  safeUIBlockingUtility.safelyBlockUI();
  API.clientAccountsService.getAllAccountsOfClient(clientId,new Callback<ClientAccounts>(){
    @Override public void success(    final ClientAccounts clientAccounts,    Response response){
      if (!isAdded()) {
        return;
      }
      final String loanAccountsStringResource=getResources().getString(R.string.loanAccounts);
      final String savingsAccountsStringResource=getResources().getString(R.string.savingAccounts);
      final Iconify.IconValue listOpenIcon=Iconify.IconValue.fa_minus_circle;
      final Iconify.IconValue listClosedIcon=Iconify.IconValue.fa_plus_circle;
      tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
      tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
      Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
      if (clientAccounts.getLoanAccounts().size() > 0) {
        LoanAccountsListAdapter loanAccountsListAdapter=new LoanAccountsListAdapter(getActivity().getApplicationContext(),clientAccounts.getLoanAccounts());
        tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
        tv_toggle_loan_accounts.setText(loanAccountsStringResource);
        tv_count_loan_accounts.setText(String.valueOf(clientAccounts.getLoanAccounts().size()));
        tv_toggle_loan_accounts.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            if (!isLoanAccountsListOpen) {
              isLoanAccountsListOpen=true;
              tv_toggle_loan_accounts_icon.setText(listOpenIcon.formattedName());
              isSavingsAccountsListOpen=false;
              tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_savings.setVisibility(View.GONE);
              lv_accounts_loans.setVisibility(View.VISIBLE);
            }
 else {
              isLoanAccountsListOpen=false;
              tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_loans.setVisibility(View.GONE);
            }
            Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
          }
        }
);
        lv_accounts_loans.setAdapter(loanAccountsListAdapter);
        lv_accounts_loans.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            mListener.loadLoanAccountSummary(clientAccounts.getLoanAccounts().get(i).getId());
          }
        }
);
        lv_accounts_loans.setOnTouchListener(new View.OnTouchListener(){
          @Override public boolean onTouch(          View view,          MotionEvent motionEvent){
            view.getParent().requestDisallowInterceptTouchEvent(true);
            return false;
          }
        }
);
      }
      if (clientAccounts.getSavingsAccounts().size() > 0) {
        SavingsAccountsListAdapter savingsAccountsListAdapter=new SavingsAccountsListAdapter(getActivity().getApplicationContext(),clientAccounts.getSavingsAccounts());
        tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
        tv_toggle_savings_accounts.setText(savingsAccountsStringResource);
        tv_count_savings_accounts.setText(String.valueOf(clientAccounts.getSavingsAccounts().size()));
        tv_toggle_savings_accounts.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            if (!isSavingsAccountsListOpen) {
              isSavingsAccountsListOpen=true;
              tv_toggle_savings_accounts_icon.setText(listOpenIcon.formattedName());
              isLoanAccountsListOpen=false;
              tv_toggle_loan_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_loans.setVisibility(View.GONE);
              lv_accounts_savings.setVisibility(View.VISIBLE);
            }
 else {
              isSavingsAccountsListOpen=false;
              tv_toggle_savings_accounts_icon.setText(listClosedIcon.formattedName());
              lv_accounts_savings.setVisibility(View.GONE);
            }
            Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
          }
        }
);
        lv_accounts_savings.setAdapter(savingsAccountsListAdapter);
        lv_accounts_savings.setOnItemClickListener(new AdapterView.OnItemClickListener(){
          @Override public void onItemClick(          AdapterView<?> adapterView,          View view,          int i,          long l){
            mListener.loadSavingsAccountSummary(clientAccounts.getSavingsAccounts().get(i).getId());
          }
        }
);
        lv_accounts_savings.setOnTouchListener(new View.OnTouchListener(){
          @Override public boolean onTouch(          View view,          MotionEvent motionEvent){
            view.getParent().requestDisallowInterceptTouchEvent(true);
            return false;
          }
        }
);
      }
      Iconify.addIcons(tv_toggle_loan_accounts_icon,tv_toggle_savings_accounts_icon);
      safeUIBlockingUtility.safelyUnBlockUI();
      inflateDataTablesList();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.9922759116220584
33033,"/** 
 * Use this method to fetch and inflate client details in the fragment
 */
public void getClientDetails(){
  safeUIBlockingUtility.safelyBlockUI();
  API.clientService.getClient(clientId,new Callback<Client>(){
    @Override public void success(    final Client client,    Response response){
      if (client != null) {
        actionBar.setTitle(""String_Node_Str"" + client.getLastname());
        tv_fullName.setText(client.getDisplayName());
        tv_accountNumber.setText(client.getAccountNo());
        tv_externalId.setText(client.getExternalId());
        tv_activationDate.setText(DateHelper.getDateAsString(client.getActivationDate()));
        tv_office.setText(client.getOfficeName());
        if (client.isImagePresent()) {
          imageLoadingAsyncTask=new ImageLoadingAsyncTask();
          imageLoadingAsyncTask.execute(client.getId());
        }
        iv_clientImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            PopupMenu menu=new PopupMenu(getActivity(),view);
            menu.getMenuInflater().inflate(R.menu.client_image_popup,menu.getMenu());
            menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.client_image_capture:
                  captureClientImage();
                break;
case R.id.client_image_remove:
              deleteClientImage();
            break;
default :
          Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      return true;
    }
  }
);
  menu.show();
}
}
);
safeUIBlockingUtility.safelyUnBlockUI();
inflateClientsAccounts();
}
}
@Override public void failure(RetrofitError retrofitError){
Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
safeUIBlockingUtility.safelyUnBlockUI();
}
}
);
}","/** 
 * Use this method to fetch and inflate client details in the fragment
 */
public void getClientDetails(){
  safeUIBlockingUtility.safelyBlockUI();
  API.clientService.getClient(clientId,new Callback<Client>(){
    @Override public void success(    final Client client,    Response response){
      if (client != null) {
        actionBar.setTitle(getString(R.string.client) + ""String_Node_Str"" + client.getLastname());
        tv_fullName.setText(client.getDisplayName());
        tv_accountNumber.setText(client.getAccountNo());
        tv_externalId.setText(client.getExternalId());
        try {
          tv_activationDate.setText(DateHelper.getDateAsString(client.getActivationDate()));
        }
 catch (        IndexOutOfBoundsException e) {
          Toast.makeText(getActivity(),getString(R.string.error_client_inactive),Toast.LENGTH_SHORT).show();
        }
 finally {
          tv_activationDate.setText(""String_Node_Str"");
        }
        tv_office.setText(client.getOfficeName());
        if (client.isImagePresent()) {
          imageLoadingAsyncTask=new ImageLoadingAsyncTask();
          imageLoadingAsyncTask.execute(client.getId());
        }
        iv_clientImage.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            PopupMenu menu=new PopupMenu(getActivity(),view);
            menu.getMenuInflater().inflate(R.menu.client_image_popup,menu.getMenu());
            menu.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
              @Override public boolean onMenuItemClick(              MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.client_image_capture:
                  captureClientImage();
                break;
case R.id.client_image_remove:
              deleteClientImage();
            break;
default :
          Log.e(""String_Node_Str"",""String_Node_Str"");
      }
      return true;
    }
  }
);
  menu.show();
}
}
);
safeUIBlockingUtility.safelyUnBlockUI();
inflateClientsAccounts();
}
}
@Override public void failure(RetrofitError retrofitError){
Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
safeUIBlockingUtility.safelyUnBlockUI();
}
}
);
}",0.3646944713870029
33034,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  return super.onOptionsItemSelected(item);
}",0.72
33035,"public void findClients(final String clientName){
  safeUIBlockingUtility=new SafeUIBlockingUtility(getActivity());
  safeUIBlockingUtility.safelyBlockUI();
  API.searchService.searchClientsByName(clientName,new Callback<List<SearchedEntity>>(){
    @Override public void success(    List<SearchedEntity> searchedEntities,    Response response){
      Iterator<SearchedEntity> iterator=searchedEntities.iterator();
      clientNames.clear();
      while (iterator.hasNext()) {
        SearchedEntity searchedEntity=iterator.next();
        clientNames.add(""String_Node_Str"" + searchedEntity.getEntityId() + ""String_Node_Str""+ searchedEntity.getEntityName());
        clientIds.add(searchedEntity.getEntityId());
      }
      String[] clientNamesArrayForAdapter=clientNames.toArray(new String[clientNames.size()]);
      ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,clientNamesArrayForAdapter);
      lv_searchResults.setAdapter(adapter);
      lv_searchResults.setOnItemClickListener(ClientSearchFragment.this);
      InputMethodManager inputMethodManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      inputMethodManager.hideSoftInputFromWindow(et_searchById.getWindowToken(),InputMethodManager.HIDE_IMPLICIT_ONLY);
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","public void findClients(final String clientName){
  safeUIBlockingUtility=new SafeUIBlockingUtility(getActivity());
  safeUIBlockingUtility.safelyBlockUI();
  API.searchService.searchClientsByName(clientName,new Callback<List<SearchedEntity>>(){
    @Override public void success(    List<SearchedEntity> searchedEntities,    Response response){
      Iterator<SearchedEntity> iterator=searchedEntities.iterator();
      clientNames.clear();
      while (iterator.hasNext()) {
        SearchedEntity searchedEntity=iterator.next();
        clientNames.add(""String_Node_Str"" + searchedEntity.getEntityId() + ""String_Node_Str""+ searchedEntity.getEntityName());
        clientIds.add(searchedEntity.getEntityId());
      }
      String[] clientNamesArrayForAdapter=clientNames.toArray(new String[clientNames.size()]);
      ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,clientNamesArrayForAdapter);
      lv_searchResults.setAdapter(adapter);
      lv_searchResults.setOnItemClickListener(ClientSearchFragment.this);
      hideKeyboard();
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.909942363112392
33036,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  inputMethodManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
}",0.6555183946488294
33037,"@Override public void success(List<SearchedEntity> searchedEntities,Response response){
  Iterator<SearchedEntity> iterator=searchedEntities.iterator();
  clientNames.clear();
  while (iterator.hasNext()) {
    SearchedEntity searchedEntity=iterator.next();
    clientNames.add(""String_Node_Str"" + searchedEntity.getEntityId() + ""String_Node_Str""+ searchedEntity.getEntityName());
    clientIds.add(searchedEntity.getEntityId());
  }
  String[] clientNamesArrayForAdapter=clientNames.toArray(new String[clientNames.size()]);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,clientNamesArrayForAdapter);
  lv_searchResults.setAdapter(adapter);
  lv_searchResults.setOnItemClickListener(ClientSearchFragment.this);
  InputMethodManager inputMethodManager=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
  inputMethodManager.hideSoftInputFromWindow(et_searchById.getWindowToken(),InputMethodManager.HIDE_IMPLICIT_ONLY);
  safeUIBlockingUtility.safelyUnBlockUI();
}","@Override public void success(List<SearchedEntity> searchedEntities,Response response){
  Iterator<SearchedEntity> iterator=searchedEntities.iterator();
  clientNames.clear();
  while (iterator.hasNext()) {
    SearchedEntity searchedEntity=iterator.next();
    clientNames.add(""String_Node_Str"" + searchedEntity.getEntityId() + ""String_Node_Str""+ searchedEntity.getEntityName());
    clientIds.add(searchedEntity.getEntityId());
  }
  String[] clientNamesArrayForAdapter=clientNames.toArray(new String[clientNames.size()]);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(getActivity(),android.R.layout.simple_list_item_1,clientNamesArrayForAdapter);
  lv_searchResults.setAdapter(adapter);
  lv_searchResults.setOnItemClickListener(ClientSearchFragment.this);
  hideKeyboard();
  safeUIBlockingUtility.safelyUnBlockUI();
}",0.8694267515923567
33038,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_settings) {
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  return super.onOptionsItemSelected(item);
}",0.72
33039,"/** 
 * Use this method to fetch all datatables for client and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.changeRestAdapterLogLevel(RestAdapter.LogLevel.NONE);
  API.dataTableService.getDatatablesOfClient(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_CLIENTS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          clientDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","/** 
 * Use this method to fetch all datatables for client and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.dataTableService.getDatatablesOfClient(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_CLIENTS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          clientDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.9548751007252216
33040,"@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_CLIENTS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      clientDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}","@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_CLIENTS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      clientDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}",0.9652677279305356
33041,"private void inflateLoanAccountSummary(){
  safeUIBlockingUtility.safelyBlockUI();
  actionBar.setTitle(getResources().getString(R.string.loanAccountSummary));
  bt_processLoanTransaction.setEnabled(false);
  API.loanService.getLoanById(loanAccountNumber,new Callback<Loan>(){
    @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void success(    Loan loan,    Response response){
      clientLoan=loan;
      tv_clientName.setText(loan.getClientName());
      tv_loan_product_short_name.setText(loan.getLoanProductName());
      tv_loanAccountNumber.setText(""String_Node_Str"" + loan.getAccountNo());
      tv_loan_total_due.setText(""String_Node_Str"" + loan.getSummary().getPrincipalDisbursed());
      tv_loan_account_status.setText(loan.getStatus().getValue());
      tv_in_arrears.setText(String.valueOf(loan.getSummary().getTotalOverdue()));
      tv_loan_officer.setText(loan.getLoanOfficerName());
      quickContactBadge.setImageToDefault();
      tv_principal.setText(String.valueOf(loan.getSummary().getPrincipalDisbursed()));
      tv_loan_principal_due.setText(String.valueOf(loan.getSummary().getPrincipalOutstanding()));
      tv_loan_principal_paid.setText(String.valueOf(loan.getSummary().getPrincipalPaid()));
      tv_interest.setText(String.valueOf(loan.getSummary().getInterestCharged()));
      tv_loan_interest_due.setText(String.valueOf(loan.getSummary().getInterestOutstanding()));
      tv_loan_interest_paid.setText(String.valueOf(loan.getSummary().getInterestPaid()));
      tv_fees.setText(String.valueOf(loan.getSummary().getFeeChargesCharged()));
      tv_loan_fees_due.setText(String.valueOf(loan.getSummary().getFeeChargesOutstanding()));
      tv_loan_fees_paid.setText(String.valueOf(loan.getSummary().getFeeChargesPaid()));
      tv_penalty.setText(String.valueOf(loan.getSummary().getPenaltyChargesCharged()));
      tv_loan_penalty_due.setText(String.valueOf(loan.getSummary().getPenaltyChargesOutstanding()));
      tv_loan_penalty_paid.setText(String.valueOf(loan.getSummary().getPenaltyChargesPaid()));
      tv_total.setText(String.valueOf(loan.getSummary().getTotalExpectedRepayment()));
      tv_total_due.setText(String.valueOf(loan.getSummary().getTotalOutstanding()));
      tv_total_paid.setText(String.valueOf(loan.getSummary().getTotalRepayment()));
      bt_processLoanTransaction.setEnabled(true);
      if (loan.getStatus().getActive()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=TRANSACTION_REPAYMENT;
      }
 else       if (loan.getStatus().getPendingApproval()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=ACTION_APPROVE_LOAN;
      }
 else       if (loan.getStatus().getWaitingForDisbursal()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=ACTION_DISBURSE_LOAN;
      }
 else       if (loan.getStatus().getClosedObligationsMet()) {
        bt_processLoanTransaction.setEnabled(false);
        bt_processLoanTransaction.setText(""String_Node_Str"");
      }
 else {
        bt_processLoanTransaction.setEnabled(false);
        bt_processLoanTransaction.setText(""String_Node_Str"");
      }
      safeUIBlockingUtility.safelyUnBlockUI();
      inflateDataTablesList();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","private void inflateLoanAccountSummary(){
  safeUIBlockingUtility.safelyBlockUI();
  actionBar.setTitle(getResources().getString(R.string.loanAccountSummary));
  bt_processLoanTransaction.setEnabled(false);
  API.loanService.getLoanById(loanAccountNumber,new Callback<Loan>(){
    @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void success(    Loan loan,    Response response){
      clientLoan=loan;
      tv_clientName.setText(loan.getClientName());
      tv_loan_product_short_name.setText(loan.getLoanProductName());
      tv_loanAccountNumber.setText(""String_Node_Str"" + loan.getAccountNo());
      tv_loan_total_due.setText(""String_Node_Str"" + loan.getSummary().getPrincipalDisbursed());
      tv_loan_account_status.setText(loan.getStatus().getValue());
      tv_in_arrears.setText(String.valueOf(loan.getSummary().getTotalOverdue()));
      tv_loan_officer.setText(loan.getLoanOfficerName());
      quickContactBadge.setImageToDefault();
      tv_principal.setText(String.valueOf(loan.getSummary().getPrincipalDisbursed()));
      tv_loan_principal_due.setText(String.valueOf(loan.getSummary().getPrincipalOutstanding()));
      tv_loan_principal_paid.setText(String.valueOf(loan.getSummary().getPrincipalPaid()));
      tv_interest.setText(String.valueOf(loan.getSummary().getInterestCharged()));
      tv_loan_interest_due.setText(String.valueOf(loan.getSummary().getInterestOutstanding()));
      tv_loan_interest_paid.setText(String.valueOf(loan.getSummary().getInterestPaid()));
      tv_fees.setText(String.valueOf(loan.getSummary().getFeeChargesCharged()));
      tv_loan_fees_due.setText(String.valueOf(loan.getSummary().getFeeChargesOutstanding()));
      tv_loan_fees_paid.setText(String.valueOf(loan.getSummary().getFeeChargesPaid()));
      tv_penalty.setText(String.valueOf(loan.getSummary().getPenaltyChargesCharged()));
      tv_loan_penalty_due.setText(String.valueOf(loan.getSummary().getPenaltyChargesOutstanding()));
      tv_loan_penalty_paid.setText(String.valueOf(loan.getSummary().getPenaltyChargesPaid()));
      tv_total.setText(String.valueOf(loan.getSummary().getTotalExpectedRepayment()));
      tv_total_due.setText(String.valueOf(loan.getSummary().getTotalOutstanding()));
      tv_total_paid.setText(String.valueOf(loan.getSummary().getTotalRepayment()));
      bt_processLoanTransaction.setEnabled(true);
      if (loan.getStatus().getActive()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=TRANSACTION_REPAYMENT;
      }
 else       if (loan.getStatus().getPendingApproval()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=ACTION_APPROVE_LOAN;
      }
 else       if (loan.getStatus().getWaitingForDisbursal()) {
        bt_processLoanTransaction.setText(""String_Node_Str"");
        processLoanTransactionAction=ACTION_DISBURSE_LOAN;
      }
 else       if (loan.getStatus().getClosedObligationsMet()) {
        bt_processLoanTransaction.setEnabled(false);
        bt_processLoanTransaction.setText(""String_Node_Str"");
      }
 else {
        bt_processLoanTransaction.setEnabled(false);
        bt_processLoanTransaction.setText(""String_Node_Str"");
      }
      safeUIBlockingUtility.safelyUnBlockUI();
      inflateDataTablesList();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(getTag(),retrofitError.getLocalizedMessage());
      Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.9916654894759148
33042,"@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_LOANS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      loanDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}","@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_LOANS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      loanDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}",0.965065502183406
33043,"/** 
 * Use this method to fetch all datatables for client and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.changeRestAdapterLogLevel(RestAdapter.LogLevel.NONE);
  API.dataTableService.getDatatablesOfLoan(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_LOANS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          loanDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","/** 
 * Use this method to fetch all datatables for client and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.dataTableService.getDatatablesOfLoan(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLE_LOANS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          loanDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.9546558704453442
33044,"/** 
 * Use this method to fetch all datatables for a savings account and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.changeRestAdapterLogLevel(RestAdapter.LogLevel.NONE);
  API.dataTableService.getDatatablesOfSavingsAccount(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        Log.i(""String_Node_Str"",""String_Node_Str"");
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLES_SAVINGS_ACCOUNTS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          savingsAccountDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}","/** 
 * Use this method to fetch all datatables for a savings account and inflate them as menu options
 */
public void inflateDataTablesList(){
  safeUIBlockingUtility.safelyBlockUI();
  API.dataTableService.getDatatablesOfSavingsAccount(new Callback<List<DataTable>>(){
    @Override public void success(    List<DataTable> dataTables,    Response response){
      if (dataTables != null) {
        ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLES_SAVINGS_ACCOUNTS;
        ClientActivity.shouldAddDataTables=Boolean.TRUE;
        ClientActivity.didMenuDataChange=Boolean.TRUE;
        Iterator<DataTable> dataTableIterator=dataTables.iterator();
        ClientActivity.dataTableMenuItems.clear();
        while (dataTableIterator.hasNext()) {
          DataTable dataTable=dataTableIterator.next();
          savingsAccountDataTables.add(dataTable);
          ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
        }
      }
      safeUIBlockingUtility.safelyUnBlockUI();
    }
    @Override public void failure(    RetrofitError retrofitError){
      Log.i(""String_Node_Str"",retrofitError.getLocalizedMessage());
      safeUIBlockingUtility.safelyUnBlockUI();
    }
  }
);
}",0.9561815336463224
33045,"@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLES_SAVINGS_ACCOUNTS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      savingsAccountDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}","@Override public void success(List<DataTable> dataTables,Response response){
  if (dataTables != null) {
    ClientActivity.idOfDataTableToBeShownInMenu=Constants.DATA_TABLES_SAVINGS_ACCOUNTS;
    ClientActivity.shouldAddDataTables=Boolean.TRUE;
    ClientActivity.didMenuDataChange=Boolean.TRUE;
    Iterator<DataTable> dataTableIterator=dataTables.iterator();
    ClientActivity.dataTableMenuItems.clear();
    while (dataTableIterator.hasNext()) {
      DataTable dataTable=dataTableIterator.next();
      savingsAccountDataTables.add(dataTable);
      ClientActivity.dataTableMenuItems.add(dataTable.getRegisteredTableName());
    }
  }
  safeUIBlockingUtility.safelyUnBlockUI();
}",0.9661495063469676
33046,"public void setInterestRatePerPeriod(Integer interestRatePerPeriod){
  this.interestRatePerPeriod=interestRatePerPeriod;
}","public void setInterestRatePerPeriod(Double interestRatePerPeriod){
  this.interestRatePerPeriod=interestRatePerPeriod;
}",0.9547325102880658
33047,"public void setAnnualInterestRate(Integer annualInterestRate){
  this.annualInterestRate=annualInterestRate;
}","public void setAnnualInterestRate(Double annualInterestRate){
  this.annualInterestRate=annualInterestRate;
}",0.9497716894977168
33048,"public Integer getPrincipal(){
  return principal;
}","public Double getPrincipal(){
  return principal;
}",0.8932038834951457
33049,"public Integer getInterestRatePerPeriod(){
  return interestRatePerPeriod;
}","public Double getInterestRatePerPeriod(){
  return interestRatePerPeriod;
}",0.9271523178807948
33050,"public Integer getApprovedPrincipal(){
  return approvedPrincipal;
}","public Double getApprovedPrincipal(){
  return approvedPrincipal;
}",0.9185185185185184
33051,"public void setApprovedPrincipal(Integer approvedPrincipal){
  this.approvedPrincipal=approvedPrincipal;
}","public void setApprovedPrincipal(Double approvedPrincipal){
  this.approvedPrincipal=approvedPrincipal;
}",0.9478672985781992
33052,"public void setFeeChargesAtDisbursementCharged(Integer feeChargesAtDisbursementCharged){
  this.feeChargesAtDisbursementCharged=feeChargesAtDisbursementCharged;
}","public void setFeeChargesAtDisbursementCharged(Double feeChargesAtDisbursementCharged){
  this.feeChargesAtDisbursementCharged=feeChargesAtDisbursementCharged;
}",0.9659442724458204
33053,"public Integer getFeeChargesAtDisbursementCharged(){
  return feeChargesAtDisbursementCharged;
}","public Double getFeeChargesAtDisbursementCharged(){
  return feeChargesAtDisbursementCharged;
}",0.9424083769633508
33054,"public void setPrincipal(Integer principal){
  this.principal=principal;
}","public void setPrincipal(Double principal){
  this.principal=principal;
}",0.9251700680272108
33055,"public Integer getAnnualInterestRate(){
  return annualInterestRate;
}","public Double getAnnualInterestRate(){
  return annualInterestRate;
}",0.920863309352518
33056,"public String getFormattedActivationDateAsString(){
  Calendar calender=Calendar.getInstance();
  calender.set(activationDate.get(0),activationDate.get(1),activationDate.get(2));
  DateFormat dateFormat=DateFormat.getDateInstance();
  return dateFormat.format(calender.getTime()).toString();
}","public String getFormattedActivationDateAsString(){
  Calendar calendar=Calendar.getInstance();
  calendar.set(activationDate.get(0),activationDate.get(1) - 1,activationDate.get(2));
  DateFormat dateFormat=DateFormat.getDateInstance();
  return dateFormat.format(calendar.getTime()).toString();
}",0.9830508474576272
33057,"public String getFormattedActivationDateAsString(){
  Calendar calender=Calendar.getInstance();
  calender.set(activationDate.get(0),activationDate.get(1),activationDate.get(2));
  DateFormat dateFormat=DateFormat.getDateInstance();
  return dateFormat.format(calender.getTime()).toString();
}","public String getFormattedActivationDateAsString(){
  Calendar calendar=Calendar.getInstance();
  calendar.set(activationDate.get(0),activationDate.get(1) - 1,activationDate.get(2));
  DateFormat dateFormat=DateFormat.getDateInstance();
  return dateFormat.format(calendar.getTime()).toString();
}",0.9830508474576272
33058,"@Override public View getView(int i,View view,ViewGroup viewGroup){
  ViewHolder viewHolder;
  if (view == null) {
    view=layoutInflater.inflate(R.layout.row_client_list_item,viewGroup,false);
    viewHolder=new ViewHolder(view);
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  final Client client=listClient.get(i);
  clientId=client.getClientId();
  Loan loan=Select.from(Loan.class).where(Condition.prop(""String_Node_Str"").eq(clientId)).first();
  if (loan != null && loan.productShortName.length() > 0) {
    viewHolder.tv_product_short_name.setText(loan.productShortName);
    viewHolder.tv_client_name.setText(client.getClientName());
    viewHolder.et_amt_paid.setText(String.valueOf(listPaidAmounts.get(clientId)));
    viewHolder.et_amt_paid.setTag(loan);
    viewHolder.et_amt_paid.setOnFocusChangeListener(editFocusChangeListener);
  }
  return view;
}","@Override public View getView(int i,View view,ViewGroup viewGroup){
  ViewHolder viewHolder;
  if (view == null) {
    view=layoutInflater.inflate(R.layout.row_client_list_item,viewGroup,false);
    viewHolder=new ViewHolder(view);
    view.setTag(viewHolder);
  }
 else {
    viewHolder=(ViewHolder)view.getTag();
  }
  final Client client=listClient.get(i);
  Loan loan=Select.from(Loan.class).where(Condition.prop(""String_Node_Str"").eq(client.getId())).first();
  if (loan != null && loan.productShortName.length() > 0) {
    viewHolder.tv_product_short_name.setText(loan.productShortName);
    viewHolder.tv_client_name.setText(client.getClientName());
    viewHolder.et_amt_paid.setText(String.valueOf(loan.totalDue));
    viewHolder.et_amt_paid.setTag(loan);
    viewHolder.et_amt_paid.setOnFocusChangeListener(editFocusChangeListener);
  }
  return view;
}",0.9553420011305822
33059,"@Override public void intercept(RequestFacade request){
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
}","@Override public void intercept(RequestFacade request){
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  request.addHeader(""String_Node_Str"",""String_Node_Str"");
  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(Constants.applicationContext);
  String authToken=pref.getString(User.AUTHENTICATION_KEY,""String_Node_Str"");
  if (authToken != null && !""String_Node_Str"".equals(authToken)) {
    request.addHeader(""String_Node_Str"",authToken);
  }
}",0.6196840826245443
33060,"public Notification getForegroundNotification(){
  notifBuilder.setContentText(""String_Node_Str"");
  return notifBuilder.build();
}","public Notification getForegroundNotification(){
  if (notif == null)   notif=notifBuilder.build();
  return notif;
}",0.6854838709677419
33061,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  boolean isBooting=false;
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent != null && intent.getExtras() != null) {
    if (intent.getExtras().containsKey(""String_Node_Str"")) {
      Object objBooting;
      objBooting=intent.getExtras().get(""String_Node_Str"");
      isBooting=(Boolean)objBooting;
    }
  }
  if (isBooting)   startServices();
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  boolean isBooting=false;
  if (intent != null && intent.getExtras() != null) {
    if (intent.getExtras().containsKey(""String_Node_Str"")) {
      Object objBooting;
      objBooting=intent.getExtras().get(""String_Node_Str"");
      isBooting=(Boolean)objBooting;
    }
  }
  if (isBooting)   startServices();
  return super.onStartCommand(intent,flags,startId);
}",0.9012345679012346
33062,"public void stopProcess(){
  DataOutputStream os;
  Timer tm;
  os=new DataOutputStream(nodeProcess.getOutputStream());
  try {
    os.writeChars(""String_Node_Str"");
    os.flush();
    nodeProcess.getOutputStream().close();
    isStopping=true;
    tm=new Timer(""String_Node_Str"",true);
    tm.schedule(new TimerTask(){
      @Override public void run(){
        Log.w(TAG,""String_Node_Str"");
        nodeProcess.destroy();
      }
    }
,5000);
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}","public void stopProcess(){
  tm.schedule(new TimerTask(){
    @Override public void run(){
      Log.w(TAG,""String_Node_Str"");
      nodeProcess.destroy();
    }
  }
,5000);
  try {
    OutputStream stdin=nodeProcess.getOutputStream();
    stdin.write(""String_Node_Str"".getBytes());
    stdin.flush();
    stdin.close();
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}",0.5634095634095634
33063,"public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
}","public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
  this.tm=new Timer(""String_Node_Str"",true);
}",0.9359886201991464
33064,"@Override protected InetAddress doInBackground(Void... params){
  try {
    NetworkInterface intf;
    InetAddress inetAddress;
    for (Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
      intf=en.nextElement();
      for (Enumeration<InetAddress> enumIpAddr=intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
        inetAddress=enumIpAddr.nextElement();
        if (inetAddress.isLoopbackAddress()) {
          Log.d(TAG,""String_Node_Str"" + inetAddress.toString() + ""String_Node_Str"");
          continue;
        }
        if (inetAddress instanceof Inet6Address) {
          Log.d(TAG,""String_Node_Str"" + inetAddress.toString() + ""String_Node_Str"");
          continue;
        }
        if (inetAddress instanceof Inet4Address) {
          Log.d(TAG,""String_Node_Str"" + inetAddress.toString() + ""String_Node_Str"");
          return inetAddress;
        }
      }
    }
  }
 catch (  SocketException ex) {
    Log.e(TAG,ex.toString());
  }
  return null;
}","@Override protected InetAddress doInBackground(Void... params){
  try {
    NetworkInterface intf;
    InetAddress inetAddress;
    InetAddress loopbackInetAddress=null;
    for (Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
      intf=en.nextElement();
      for (Enumeration<InetAddress> enumIpAddr=intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
        inetAddress=enumIpAddr.nextElement();
        if (inetAddress instanceof Inet6Address) {
          Log.d(TAG,""String_Node_Str"" + inetAddress.toString() + ""String_Node_Str"");
          continue;
        }
        if (inetAddress instanceof Inet4Address) {
          if (!inetAddress.isLoopbackAddress()) {
            Log.d(TAG,""String_Node_Str"" + inetAddress.toString() + ""String_Node_Str"");
            return inetAddress;
          }
          loopbackInetAddress=inetAddress;
        }
      }
    }
    return loopbackInetAddress;
  }
 catch (  SocketException ex) {
    Log.e(TAG,ex.toString());
  }
  return null;
}",0.7515738498789346
33065,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent.getExtras() != null && intent.getExtras().containsKey(""String_Node_Str"") && ((Boolean)intent.getExtras().get(""String_Node_Str"")))   startServices();
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  boolean isBooting=false;
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent != null && intent.getExtras() != null) {
    if (intent.getExtras().containsKey(""String_Node_Str"")) {
      Object objBooting;
      objBooting=intent.getExtras().get(""String_Node_Str"");
      isBooting=(Boolean)objBooting;
    }
  }
  if (isBooting)   startServices();
  return super.onStartCommand(intent,flags,startId);
}",0.7978260869565217
33066,"@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  SharedPreferences sharedPrefs;
  String msg;
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
switch (ev) {
case NODE_STOPPED:
case NODE_ERROR:
    nodeThread=null;
  if (sharedPrefs.getBoolean(""String_Node_Str"",false)) {
    msg=""String_Node_Str"";
  }
 else {
    msg=""String_Node_Str"";
  }
Toast.makeText(getApplicationContext(),msg,Toast.LENGTH_LONG).show();
}
}","@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  SharedPreferences sharedPrefs;
  String msg;
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
switch (ev) {
case NODE_STARTED:
    startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  break;
case NODE_STOPPED:
break;
case NODE_ERROR:
nodeThread=null;
if (sharedPrefs.getBoolean(""String_Node_Str"",false)) {
msg=""String_Node_Str"";
}
 else {
msg=""String_Node_Str"";
}
Toast.makeText(getApplicationContext(),msg,Toast.LENGTH_LONG).show();
}
}",0.8547641073080481
33067,"protected void prepareLayout(){
  final SharedPreferences sharedPrefs;
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  addPreferencesFromResource(R.xml.preferences);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.startServiceThreads();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.stopServiceThreads();
      findPreference(""String_Node_Str"").setSummary(""String_Node_Str"");
      findPreference(""String_Node_Str"").setEnabled(false);
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.stopServiceThreads();
      Runtime.getRuntime().exit(0);
      return true;
    }
  }
);
}","protected void prepareLayout(){
  addPreferencesFromResource(R.xml.preferences);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.startServiceThreads();
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.stopServiceThreads();
      findPreference(""String_Node_Str"").setSummary(""String_Node_Str"");
      findPreference(""String_Node_Str"").setEnabled(false);
      return true;
    }
  }
);
  findPreference(""String_Node_Str"").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      serviceBinder.stopServiceThreads();
      Runtime.getRuntime().exit(0);
      return true;
    }
  }
);
}",0.9507434944237918
33068,"public void stopProcess(){
  DataOutputStream os;
  Timer tm;
  os=new DataOutputStream(nodeProcess.getOutputStream());
  try {
    os.writeChars(""String_Node_Str"");
    os.flush();
    nodeProcess.getOutputStream().close();
    isStopping=true;
    tm=new Timer(""String_Node_Str"",true);
    tm.schedule(new TimerTask(){
      @Override public void run(){
        Log.w(TAG,""String_Node_Str"");
        nodeProcess.destroy();
      }
    }
,5000);
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}","public void stopProcess(){
  tm.schedule(new TimerTask(){
    @Override public void run(){
      Log.w(TAG,""String_Node_Str"");
      nodeProcess.destroy();
    }
  }
,5000);
  try {
    OutputStream stdin=nodeProcess.getOutputStream();
    stdin.write(""String_Node_Str"".getBytes());
    stdin.flush();
    stdin.close();
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}",0.5634095634095634
33069,"public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
}","public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
  this.tm=new Timer(""String_Node_Str"",true);
}",0.9359886201991464
33070,"public void stopProcess(){
  DataOutputStream os;
  Timer tm;
  os=new DataOutputStream(nodeProcess.getOutputStream());
  try {
    os.writeChars(""String_Node_Str"");
    os.flush();
    nodeProcess.getOutputStream().close();
    isStopping=true;
    tm=new Timer(""String_Node_Str"",true);
    tm.schedule(new TimerTask(){
      @Override public void run(){
        Log.w(TAG,""String_Node_Str"");
        nodeProcess.destroy();
      }
    }
,5000);
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}","public void stopProcess(){
  tm.schedule(new TimerTask(){
    @Override public void run(){
      Log.w(TAG,""String_Node_Str"");
      nodeProcess.destroy();
    }
  }
,5000);
  try {
    OutputStream stdin=nodeProcess.getOutputStream();
    stdin.write(""String_Node_Str"".getBytes());
    stdin.flush();
    stdin.close();
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}",0.5634095634095634
33071,"public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
}","public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
  this.tm=new Timer(""String_Node_Str"",true);
}",0.9359886201991464
33072,"public void stopProcess(){
  DataOutputStream os;
  Timer tm;
  os=new DataOutputStream(nodeProcess.getOutputStream());
  try {
    os.writeChars(""String_Node_Str"");
    os.flush();
    nodeProcess.getOutputStream().close();
    isStopping=true;
    tm=new Timer(""String_Node_Str"",true);
    tm.schedule(new TimerTask(){
      @Override public void run(){
        Log.w(TAG,""String_Node_Str"");
        nodeProcess.destroy();
      }
    }
,5000);
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}","public void stopProcess(){
  tm.schedule(new TimerTask(){
    @Override public void run(){
      Log.w(TAG,""String_Node_Str"");
      nodeProcess.destroy();
    }
  }
,5000);
  try {
    OutputStream stdin=nodeProcess.getOutputStream();
    stdin.write(""String_Node_Str"".getBytes());
    stdin.flush();
    stdin.close();
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}",0.5634095634095634
33073,"public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
}","public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
  this.tm=new Timer(""String_Node_Str"",true);
}",0.9359886201991464
33074,"public void stopProcess(){
  DataOutputStream os;
  Timer tm;
  os=new DataOutputStream(nodeProcess.getOutputStream());
  try {
    os.writeChars(""String_Node_Str"");
    os.flush();
    nodeProcess.getOutputStream().close();
    isStopping=true;
    tm=new Timer(""String_Node_Str"",true);
    tm.schedule(new TimerTask(){
      @Override public void run(){
        Log.w(TAG,""String_Node_Str"");
        nodeProcess.destroy();
      }
    }
,5000);
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}","public void stopProcess(){
  tm.schedule(new TimerTask(){
    @Override public void run(){
      Log.w(TAG,""String_Node_Str"");
      nodeProcess.destroy();
    }
  }
,5000);
  try {
    OutputStream stdin=nodeProcess.getOutputStream();
    stdin.write(""String_Node_Str"".getBytes());
    stdin.flush();
    stdin.close();
  }
 catch (  IOException e) {
    Log.w(TAG,""String_Node_Str"");
    nodeProcess.destroy();
  }
}",0.5634095634095634
33075,"public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
}","public NodeProcessThread(String dir,String execfile,String jsfile,Handler msgHandler,ProcessExplorerService service){
  this.dir=dir;
  this.msgHandler=msgHandler;
  this.service=service;
  this.exec=dir + ""String_Node_Str"" + execfile;
  this.js=dir + ""String_Node_Str"" + jsfile;
  this.nodeProcessBuilder=new ProcessBuilder();
  this.tm=new Timer(""String_Node_Str"",true);
}",0.9359886201991464
33076,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent.getExtras().containsKey(""String_Node_Str"") && ((Boolean)intent.getExtras().get(""String_Node_Str"")))   startServices();
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent.getExtras() != null && intent.getExtras().containsKey(""String_Node_Str"") && ((Boolean)intent.getExtras().get(""String_Node_Str"")))   startServices();
  return super.onStartCommand(intent,flags,startId);
}",0.9595687331536388
33077,"@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  Notification notif;
  String contentText=null;
  if (ev == NodeThreadEvent.NODE_STARTING)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STARTED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_ERROR || ev == NodeThreadEvent.NODE_STOPPED)   contentText=""String_Node_Str"";
 else   return;
  notifBuilder.setTicker(contentText);
  notifBuilder.setContentText(contentText);
  notifBuilder.setContentTitle(""String_Node_Str"");
  notif=notifBuilder.build();
  notifService.notify(SERVICE_NOTIFICATION_ID,notif);
}","@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  Notification notif;
  String contentText=null;
  if (ev == NodeThreadEvent.NODE_STARTING)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STARTED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STOPPED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_ERROR)   contentText=""String_Node_Str"";
 else   return;
  notifBuilder.setTicker(contentText);
  notifBuilder.setContentText(contentText);
  notifBuilder.setContentTitle(""String_Node_Str"");
  notif=notifBuilder.build();
  notifService.notify(SERVICE_NOTIFICATION_ID,notif);
}",0.9121771217712176
33078,"protected void startNodeProcess(){
  SharedPreferences sharedPrefs;
  if (nodeThread != null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  Log.i(TAG,""String_Node_Str"");
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  nodeThread=new NodeProcessThread(getFilesDir().toString(),""String_Node_Str"",""String_Node_Str"",new NodeProcessHandler(),this);
  nodeThread.setEnvironment(""String_Node_Str"",sharedPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  nodeThread.setUncaughtExceptionHandler(this);
  nodeThread.startProcess();
}","protected void startNodeProcess(){
  SharedPreferences sharedPrefs;
  if (nodeThread != null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  Log.i(TAG,""String_Node_Str"");
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  nodeThread=new NodeProcessThread(getFilesDir().toString(),""String_Node_Str"",""String_Node_Str"",new NodeProcessHandler(),this);
  addNodeThreadListener(this);
  nodeThread.setEnvironment(""String_Node_Str"",sharedPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  nodeThread.setUncaughtExceptionHandler(this);
  nodeThread.startProcess();
}",0.972972972972973
33079,"/** 
 * All the actions that are to be executed when the service stops or is stopped when the activity is started.
 */
protected void updateOnServiceStopped(){
  findPreference(""String_Node_Str"").setEnabled(false);
  findPreference(""String_Node_Str"").setEnabled(true);
}","/** 
 * All the actions that are to be executed when the service stops or is stopped when the activity is started.
 */
protected void updateOnServiceStopped(){
  findPreference(""String_Node_Str"").setEnabled(false);
  findPreference(""String_Node_Str"").setEnabled(true);
  findPreference(""String_Node_Str"").setEnabled(false);
}",0.907563025210084
33080,"@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  Notification notif;
  String contentText=null;
  if (ev == NodeThreadEvent.NODE_STARTING)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STARTED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_ERROR || ev == NodeThreadEvent.NODE_STOPPED)   contentText=""String_Node_Str"";
 else   return;
  notifBuilder.setTicker(contentText);
  notifBuilder.setContentText(contentText);
  notifBuilder.setContentTitle(""String_Node_Str"");
  notif=notifBuilder.build();
  notifService.notify(SERVICE_NOTIFICATION_ID,notif);
}","@Override public void ProcessExplorerServiceEvent(NodeThreadEvent ev,NodeThreadEventData evData){
  Notification notif;
  String contentText=null;
  if (ev == NodeThreadEvent.NODE_STARTING)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STARTED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_STOPPED)   contentText=""String_Node_Str"";
 else   if (ev == NodeThreadEvent.NODE_ERROR)   contentText=""String_Node_Str"";
 else   return;
  notifBuilder.setTicker(contentText);
  notifBuilder.setContentText(contentText);
  notifBuilder.setContentTitle(""String_Node_Str"");
  notif=notifBuilder.build();
  notifService.notify(SERVICE_NOTIFICATION_ID,notif);
}",0.9121771217712176
33081,"protected void startNodeProcess(){
  SharedPreferences sharedPrefs;
  if (nodeThread != null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  Log.i(TAG,""String_Node_Str"");
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  nodeThread=new NodeProcessThread(getFilesDir().toString(),""String_Node_Str"",""String_Node_Str"",new NodeProcessHandler(),this);
  nodeThread.setEnvironment(""String_Node_Str"",sharedPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  nodeThread.setUncaughtExceptionHandler(this);
  nodeThread.startProcess();
}","protected void startNodeProcess(){
  SharedPreferences sharedPrefs;
  if (nodeThread != null) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  Log.i(TAG,""String_Node_Str"");
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  nodeThread=new NodeProcessThread(getFilesDir().toString(),""String_Node_Str"",""String_Node_Str"",new NodeProcessHandler(),this);
  addNodeThreadListener(this);
  nodeThread.setEnvironment(""String_Node_Str"",sharedPrefs.getString(""String_Node_Str"",""String_Node_Str""));
  nodeThread.setUncaughtExceptionHandler(this);
  nodeThread.startProcess();
}",0.972972972972973
33082,"/** 
 * All the actions that are to be executed when the service stops or is stopped when the activity is started.
 */
protected void updateOnServiceStopped(){
  findPreference(""String_Node_Str"").setEnabled(false);
  findPreference(""String_Node_Str"").setEnabled(true);
}","/** 
 * All the actions that are to be executed when the service stops or is stopped when the activity is started.
 */
protected void updateOnServiceStopped(){
  findPreference(""String_Node_Str"").setEnabled(false);
  findPreference(""String_Node_Str"").setEnabled(true);
  findPreference(""String_Node_Str"").setEnabled(false);
}",0.907563025210084
33083,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent.getExtras().containsKey(""String_Node_Str"") && ((Boolean)intent.getExtras().get(""String_Node_Str"")))   startServices();
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  startForeground(notifMgr.getForegroundNotificationId(),notifMgr.getForegroundNotification());
  if (intent.getExtras() != null && intent.getExtras().containsKey(""String_Node_Str"") && ((Boolean)intent.getExtras().get(""String_Node_Str"")))   startServices();
  return super.onStartCommand(intent,flags,startId);
}",0.9595687331536388
33084,"/** 
 * Checks if the Bot is active and what it should do.
 * @param evt
 */
@SubscribeEvent public void onPlayerTick(ClientTickEvent evt){
  if (evt.phase != ClientTickEvent.Phase.START || getMinecraft().thePlayer == null) {
    return;
  }
  if (skipNextTick) {
    skipNextTick=false;
    return;
  }
  testUngrabMode();
  invalidateObjectMouseOver();
  resetAllInputs();
  invalidateChunkCache();
  if (ungrab.isPressed()) {
    doUngrab=true;
  }
  AIStrategy newStrat;
  if (dead || stop.isPressed() || stop.isKeyDown()) {
    deactivateCurrentStrategy();
    dead=false;
  }
 else   if ((newStrat=findNewStrategy()) != null) {
    deactivateCurrentStrategy();
    currentStrategy=newStrat;
    System.out.println(""String_Node_Str"" + newStrat);
    currentStrategy.setActive(true,this);
  }
  if (currentStrategy != null) {
    TickResult result=null;
    for (int i=0; i < 100; i++) {
      result=currentStrategy.gameTick(this);
      if (result != TickResult.TICK_AGAIN) {
        break;
      }
    }
    if (result == TickResult.ABORT || result == TickResult.NO_MORE_WORK) {
      dead=true;
    }
synchronized (strategyDescrMutex) {
      strategyDescr=currentStrategy.getDescription(this);
    }
  }
 else {
synchronized (strategyDescrMutex) {
      strategyDescr=""String_Node_Str"";
    }
  }
}","/** 
 * Checks if the Bot is active and what it should do.
 * @param evt
 */
@SubscribeEvent public void onPlayerTick(ClientTickEvent evt){
  if (evt.phase != ClientTickEvent.Phase.START || getMinecraft().thePlayer == null) {
    return;
  }
  if (skipNextTick) {
    skipNextTick=false;
    return;
  }
  testUngrabMode();
  invalidateObjectMouseOver();
  resetAllInputs();
  invalidateChunkCache();
  if (ungrab.isPressed()) {
    doUngrab=true;
  }
  AIStrategy newStrat;
  if (dead || stop.isPressed() || stop.isKeyDown()) {
    deactivateCurrentStrategy();
    dead=false;
  }
 else   if ((newStrat=findNewStrategy()) != null) {
    deactivateCurrentStrategy();
    currentStrategy=newStrat;
    System.out.println(""String_Node_Str"" + newStrat);
    currentStrategy.setActive(true,this);
  }
  if (currentStrategy != null) {
    TickResult result=null;
    for (int i=0; i < 100; i++) {
      result=currentStrategy.gameTick(this);
      if (result != TickResult.TICK_AGAIN) {
        break;
      }
    }
    if (result == TickResult.ABORT || result == TickResult.NO_MORE_WORK) {
      dead=true;
    }
synchronized (strategyDescrMutex) {
      strategyDescr=currentStrategy.getDescription(this);
    }
  }
 else {
synchronized (strategyDescrMutex) {
      strategyDescr=""String_Node_Str"";
    }
  }
  if (activeMapReader != null) {
    activeMapReader.tick(this);
  }
}",0.974282519567648
33085,"public boolean walkTowards(double x,double z,boolean jump,boolean face){
  final double dx=x - mc.thePlayer.posX;
  final double dz=z - mc.thePlayer.posZ;
  final double distTo=Math.sqrt(dx * dx + dz * dz);
  boolean arrived=distTo > MIN_DISTANCE_ERROR;
  if (arrived) {
    if (face) {
      face(x,mc.thePlayer.getEyeHeight() + mc.thePlayer.posY,z);
    }
    double speed=1;
    if (distTo < 4 * WALK_PER_STEP) {
      speed=Math.max(distTo / WALK_PER_STEP / 4,0.1);
    }
    final double yaw=mc.thePlayer.rotationYaw / 180 * Math.PI;
    final double lookX=-Math.sin(yaw);
    final double lookZ=Math.cos(yaw);
    final double dlength=Math.sqrt(dx * dx + dz * dz);
    final double same=(lookX * dx + lookZ * dz) / dlength;
    final double strafe=(lookZ * dx - lookX * dz) / dlength;
    final MovementInput movement=new MovementInput();
    movement.moveForward=(float)(speed * same);
    movement.moveStrafe=(float)(speed * strafe);
    movement.jump=jump;
    overrideMovement(movement);
    if (distTo < 0.5) {
      overrideSneak();
    }
    return false;
  }
 else {
    return true;
  }
}","public boolean walkTowards(double x,double z,boolean jump,boolean face){
  final double dx=x - mc.thePlayer.posX;
  final double dz=z - mc.thePlayer.posZ;
  final double distTo=Math.sqrt(dx * dx + dz * dz);
  boolean arrived=distTo > MIN_DISTANCE_ERROR;
  if (arrived) {
    if (face) {
      face(x,mc.thePlayer.getEyeHeight() + mc.thePlayer.posY,z,1,.1f);
    }
    double speed=1;
    if (distTo < 4 * WALK_PER_STEP) {
      speed=Math.max(distTo / WALK_PER_STEP / 4,0.1);
    }
    final double yaw=mc.thePlayer.rotationYaw / 180 * Math.PI;
    final double lookX=-Math.sin(yaw);
    final double lookZ=Math.cos(yaw);
    final double dlength=Math.sqrt(dx * dx + dz * dz);
    final double same=(lookX * dx + lookZ * dz) / dlength;
    final double strafe=(lookZ * dx - lookX * dz) / dlength;
    final MovementInput movement=new MovementInput();
    movement.moveForward=(float)(speed * same);
    movement.moveStrafe=(float)(speed * strafe);
    movement.jump=jump;
    overrideMovement(movement);
    if (distTo < 0.5 || mc.thePlayer.isSprinting() && distTo < 0.8) {
      overrideSneak();
    }
 else     if (distTo > 6) {
      overrideSprint();
    }
    return false;
  }
 else {
    return true;
  }
}",0.9378238341968912
33086,"/** 
 * Restore all inputs to the default minecraft inputs.
 */
protected void resetAllInputs(){
  if (resetMovementInput != null) {
    mc.thePlayer.movementInput=resetMovementInput;
    resetMovementInput=null;
  }
  attackKeyJustPressed=resetAttackKey != null;
  if (resetAttackKey != null) {
    mc.gameSettings.keyBindAttack=resetAttackKey;
    resetAttackKey=null;
  }
  useItemKeyJustPressed=resetUseItemKey != null;
  if (resetUseItemKey != null) {
    mc.gameSettings.keyBindUseItem=resetUseItemKey;
    resetUseItemKey=null;
  }
  sneakKeyJustPressed=resetSneakKey != null;
  if (resetSneakKey != null) {
    mc.gameSettings.keyBindSneak=resetSneakKey;
    resetSneakKey=null;
  }
}","/** 
 * Restore all inputs to the default minecraft inputs.
 */
protected void resetAllInputs(){
  if (resetMovementInput != null) {
    mc.thePlayer.movementInput=resetMovementInput;
    resetMovementInput=null;
  }
  attackKeyJustPressed=resetAttackKey != null;
  if (resetAttackKey != null) {
    mc.gameSettings.keyBindAttack=resetAttackKey;
    resetAttackKey=null;
  }
  useItemKeyJustPressed=resetUseItemKey != null;
  if (resetUseItemKey != null) {
    mc.gameSettings.keyBindUseItem=resetUseItemKey;
    resetUseItemKey=null;
  }
  sneakKeyJustPressed=resetSneakKey != null;
  if (resetSneakKey != null) {
    mc.gameSettings.keyBindSneak=resetSneakKey;
    resetSneakKey=null;
  }
  sprintKeyJustPressed=resetSprintKey != null;
  if (resetSprintKey != null) {
    mc.gameSettings.keyBindSprint=resetSprintKey;
    resetSprintKey=null;
  }
}",0.8975356679636836
33087,"/** 
 * Finds any Block of that type directly around the player.
 * @param blockType The block to search.
 * @return the position or <code>null</code> if it was not found.
 */
public BlockPos findBlock(Block blockType){
  final BlockPos current=getPlayerPosition();
  BlockPos pos=null;
  for (int x=current.getX() - 2; x <= current.getX() + 2; x++) {
    for (int z=current.getZ() - 2; z <= current.getZ() + 2; z++) {
      for (int y=current.getY() - 1; y <= current.getY() + 2; y++) {
        final Block block=getBlock(x,y,z);
        if (Block.isEqualTo(block,blockType)) {
          pos=new BlockPos(x,y,z);
        }
      }
    }
  }
  return pos;
}","/** 
 * Finds any Block of that type directly around the player.
 * @param blockType The block to search.
 * @return the position or <code>null</code> if it was not found.
 */
public BlockPos findBlock(Block blockType){
  List<BlockPos> pos=findBlocks(blockType,2);
  return pos.isEmpty() ? null : pos.get(0);
}",0.4917355371900826
33088,"/** 
 * Faces a block and destroys it if possible.
 * @param x
 * @param y
 * @param z
 */
public void faceAndDestroy(final BlockPos pos){
  if (!isFacingBlock(pos)) {
    faceBlock(pos);
  }
  if (isFacingBlock(pos)) {
    selectToolFor(pos);
    overrideAttack();
  }
}","/** 
 * Faces a block and destroys it if possible.
 * @param pos the Position of that block.
 */
public void faceAndDestroy(final BlockPos pos){
  if (!isFacingBlock(pos)) {
    faceBlock(pos);
  }
  if (isFacingBlock(pos)) {
    selectToolFor(pos);
    overrideAttack();
  }
}",0.2664233576642336
33089,"/** 
 * Faces an exact position in space.
 * @param x
 * @param y
 * @param z
 */
public void face(double x,double y,double z){
  final double d0=x - mc.thePlayer.posX;
  final double d1=z - mc.thePlayer.posZ;
  final double d2=y - mc.thePlayer.posY - mc.thePlayer.getEyeHeight();
  final double d3=d0 * d0 + d2 * d2 + d1 * d1;
  if (d3 >= 2.500000277905201E-7D) {
    final float rotationYaw=mc.thePlayer.rotationYaw;
    final float rotationPitch=mc.thePlayer.rotationPitch;
    final float yaw=(float)(Math.atan2(d1,d0) * 180.0D / Math.PI) - 90.0F;
    final float pitch=(float)-(Math.atan2(d2,Math.sqrt(d0 * d0 + d1 * d1)) * 180.0D / Math.PI);
    mc.thePlayer.setAngles((yaw - rotationYaw) / 0.15f,-(pitch - rotationPitch) / 0.15f);
    invalidateObjectMouseOver();
  }
}","private void face(double x,double y,double z,float yawInfluence,float pitchInfluence){
  final double d0=x - mc.thePlayer.posX;
  final double d1=z - mc.thePlayer.posZ;
  final double d2=y - mc.thePlayer.posY - mc.thePlayer.getEyeHeight();
  final double d3=d0 * d0 + d2 * d2 + d1 * d1;
  if (d3 >= 2.500000277905201E-7D) {
    final float rotationYaw=mc.thePlayer.rotationYaw;
    final float rotationPitch=mc.thePlayer.rotationPitch;
    final float yaw=(float)(Math.atan2(d1,d0) * 180.0D / Math.PI) - 90.0F;
    final float pitch=(float)-(Math.atan2(d2,Math.sqrt(d0 * d0 + d1 * d1)) * 180.0D / Math.PI);
    float rotations=fullRotations(yaw - rotationYaw);
    mc.thePlayer.setAngles(rotations / .15f + (yaw - rotationYaw - rotations) / 0.15f * yawInfluence,-(pitch - rotationPitch) / 0.15f * pitchInfluence);
    invalidateObjectMouseOver();
  }
}",0.8464373464373465
33090,"public static ArrayList<CommandDefinition> getDefinitions(Method m){
  ArrayList<CommandDefinition> list=new ArrayList<CommandDefinition>();
  final Class<?>[] types=m.getParameterTypes();
  final Annotation[][] parameterAnnotations=m.getParameterAnnotations();
  ArrayList<ParameterBuilder> builders=new ArrayList<ParameterBuilder>();
  ArrayList<ArgumentDefinition> arguments=new ArrayList<ArgumentDefinition>();
  ArrayList<Integer> parameterStarts=new ArrayList<Integer>();
  addParametersFromTo(list,m,types,parameterAnnotations,builders,arguments,parameterStarts,0);
  return list;
}","public static ArrayList<CommandDefinition> getDefinitions(Method m){
  ArrayList<CommandDefinition> list=new ArrayList<CommandDefinition>();
  final Class<?>[] types=m.getParameterTypes();
  final Annotation[][] parameterAnnotations=m.getParameterAnnotations();
  ArrayList<ParameterBuilder> builders=new ArrayList<ParameterBuilder>();
  ArrayList<ArgumentDefinition> arguments=new ArrayList<ArgumentDefinition>();
  ArrayList<Integer> parameterStarts=new ArrayList<Integer>();
  checkParameters(m,types,parameterAnnotations);
  addParametersFromTo(list,m,types,parameterAnnotations,builders,arguments,parameterStarts,0);
  return list;
}",0.9551752241238792
33091,"public AIStrategy evaluate(AIHelper helper,String[] args){
  final Object[] params=new Object[builders.size()];
  for (int parameter=0; parameter < builders.size(); parameter++) {
    final String[] argsPart=Arrays.copyOfRange(args,parameterStarts.get(parameter),parameterStarts.get(parameter + 1));
    params[parameter]=builders.get(parameter).getParameter(helper,argsPart);
  }
  try {
    final Object result=method.invoke(null,params);
    if (result instanceof AIStrategy) {
      return (AIStrategy)result;
    }
 else {
      return null;
    }
  }
 catch (  final IllegalAccessException e) {
    doThrow(e);
  }
catch (  final IllegalArgumentException e) {
    doThrow(e);
  }
catch (  final InvocationTargetException e) {
    final Throwable exception=e.getTargetException();
    doThrow(exception);
  }
  return null;
}","public AIStrategy evaluate(AIHelper helper,String[] args){
  final Object[] params=new Object[builders.size()];
  for (int parameter=0; parameter < builders.size(); parameter++) {
    final String[] argsPart=Arrays.copyOfRange(args,parameterStarts.get(parameter),parameterStarts.get(parameter + 1));
    params[parameter]=builders.get(parameter).getParameter(helper,argsPart);
  }
  try {
    final Object result=method.invoke(null,params);
    if (result instanceof AIStrategy) {
      return (AIStrategy)result;
    }
 else {
      return null;
    }
  }
 catch (  final IllegalAccessException e) {
    doThrow(e);
  }
catch (  final IllegalArgumentException e) {
    dumIAE(e,params);
    doThrow(e);
  }
catch (  final InvocationTargetException e) {
    final Throwable exception=e.getTargetException();
    doThrow(exception);
  }
  return null;
}",0.9869203329369798
33092,"private void checkCommandClass(Class<?> commandClass){
  if (!commandClass.isAnnotationPresent(AICommand.class)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
}","private void checkCommandClass(Class<?> commandClass){
  if (!commandClass.isAnnotationPresent(AICommand.class)) {
    throw new IllegalArgumentException(""String_Node_Str"" + commandClass.getName() + ""String_Node_Str"");
  }
}",0.8883374689826302
33093,"protected boolean searchSomethingAround(int cx,int cy,int cz){
  if (data.offsetX != cx - SIZE_X_Z / 2 || data.offsetY != cy - Y_LEVEL / 2 || data.offsetZ != cz - SIZE_X_Z / 2) {
    isRunning=false;
  }
  if (!isRunning) {
    System.out.println(""String_Node_Str"");
    field=new int[FIELD_SIZE];
    data.offsetX=cx - SIZE_X_Z / 2;
    data.offsetY=cy - Y_LEVEL / 2;
    data.offsetZ=cz - SIZE_X_Z / 2;
    pqClear();
    final int start=getIndexForBlock(cx,cy,cz);
    setDistance(start,1);
    pqAdd(start,1);
    final float startRating=rateDestination(start);
    if (startRating >= 0) {
      currentDest=new Dest(start,startRating);
    }
 else {
      currentDest=null;
    }
    isRunning=true;
  }
  startTime=System.currentTimeMillis();
  long iteration=0;
  while (!pqEmpty() && ((iteration++ & 0xff) != 0 || hasTimeLeft(startTime))) {
    final int currentNode=pqPoll();
    final int currentDistance=getDistance(currentNode);
    if (currentDest != null && currentDistance + 1 > currentDest.destDistanceRating) {
      pqClear();
      break;
    }
    final float rating=rateDestination(currentNode);
    if (rating >= 0) {
      final Dest newDest=new Dest(currentNode,rating);
      if (currentDest == null || newDest.compareTo(currentDest) < 0) {
        currentDest=newDest;
      }
    }
    final int[] neighbours=getNeighbours(currentNode);
    for (    final int n : neighbours) {
      if (n < 0) {
        continue;
      }
      if (isVisited(n)) {
        continue;
      }
      final int distance=distanceFor(currentNode,n) + currentDistance;
      if (!isInQueue(n)) {
        setDistance(n,distance);
        setMoveFrom(n,currentNode);
        setInQueue(n);
        pqAdd(n,distance);
      }
 else {
        int oldDistance=getDistance(n);
        if (distance < oldDistance) {
          setDistance(n,distance);
          setMoveFrom(n,currentNode);
          pqUpdate(n,oldDistance,distance);
        }
      }
    }
    setVisited(currentNode);
  }
  if (pqEmpty()) {
    if (currentDest != null) {
      planPathTo(currentDest.destNode,cx,cy,cz);
      terminated();
    }
 else {
      noPathFound();
      terminated();
    }
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str"");
    pqStats();
    return false;
  }
}","protected boolean searchSomethingAround(int cx,int cy,int cz){
  if (data.offsetX != cx - SIZE_X_Z / 2 || data.offsetY != cy - Y_LEVEL / 2 || data.offsetZ != cz - SIZE_X_Z / 2) {
    isRunning=false;
  }
  if (!isRunning) {
    System.out.println(""String_Node_Str"");
    field=new int[FIELD_SIZE];
    data.offsetX=cx - SIZE_X_Z / 2;
    data.offsetY=cy - Y_LEVEL / 2;
    data.offsetZ=cz - SIZE_X_Z / 2;
    pqClear();
    final int start=getIndexForBlock(cx,cy,cz);
    setDistance(start,1);
    pqAdd(start,1);
    final float startRating=rateDestination(start);
    if (startRating >= 0) {
      currentDest=new Dest(start,startRating);
    }
 else {
      currentDest=null;
    }
    isRunning=true;
  }
  startTime=System.currentTimeMillis();
  long iteration=0;
  while (!pqEmpty() && ((iteration++ & 0xff) != 0 || hasTimeLeft(startTime))) {
    final int currentNode=pqPoll();
    final int currentDistance=getDistance(currentNode);
    if (currentDest != null && currentDistance + 1 > currentDest.destDistanceRating) {
      pqClear();
      break;
    }
    final float rating=rateDestination(currentNode);
    if (rating >= 0) {
      final Dest newDest=new Dest(currentNode,rating);
      if (currentDest == null || newDest.compareTo(currentDest) < 0) {
        currentDest=newDest;
      }
    }
    final int[] neighbours=getNeighbours(currentNode);
    for (    final int n : neighbours) {
      if (n < 0) {
        continue;
      }
      final int distance=distanceFor(currentNode,n) + currentDistance;
      if (isVisited(n)) {
        if (distance < getDistance(n)) {
          System.out.println(""String_Node_Str"" + n);
        }
        continue;
      }
      if (!isInQueue(n)) {
        setDistance(n,distance);
        setMoveFrom(n,currentNode);
        setInQueue(n);
        pqAdd(n,distance);
      }
 else {
        int oldDistance=getDistance(n);
        if (distance < oldDistance) {
          setDistance(n,distance);
          setMoveFrom(n,currentNode);
          pqUpdate(n,oldDistance,distance);
        }
      }
    }
    setVisited(currentNode);
  }
  if (pqEmpty()) {
    if (currentDest != null) {
      planPathTo(currentDest.destNode,cx,cy,cz);
      terminated();
    }
 else {
      noPathFound();
      terminated();
    }
    return true;
  }
 else {
    System.out.println(""String_Node_Str"" + iteration + ""String_Node_Str"");
    pqStats();
    return false;
  }
}",0.9466327827191868
33094,"private void pqRemove(int n,int oldDistance){
  if (pqMinDistance >= 0 && oldDistance < pqMinDistance + FAST_DISTANCE_ACCESS) {
    int slot=pqSlotFor(oldDistance);
    int[] slotArray=pqByDistance[slot];
    int fill=pqByDistanceFill[slot];
    pqByDistanceFill[slot]=fill - 1;
    for (int i=0; i < fill - 1; i++) {
      if (slotArray[i] == n) {
        slotArray[i]=slotArray[fill - 1];
        break;
      }
    }
    if (fill == 1 && oldDistance == pqMinDistance) {
      pqFindNextMin();
    }
  }
 else {
    pq.remove(n);
  }
}","private void pqRemove(int n,int oldDistance){
  if (pqMinDistance >= 0 && oldDistance < pqMinDistance + FAST_DISTANCE_ACCESS) {
    int slot=pqSlotFor(oldDistance);
    int[] slotArray=pqByDistance[slot];
    int fill=pqByDistanceFill[slot];
    pqByDistanceFill[slot]=fill - 1;
    boolean found=false;
    for (int i=0; i < fill - 1; i++) {
      if (slotArray[i] == n) {
        slotArray[i]=slotArray[fill - 1];
        found=true;
        break;
      }
    }
    if (!found) {
      System.out.println(""String_Node_Str"" + n + ""String_Node_Str""+ oldDistance+ ""String_Node_Str"");
    }
    if (fill == 1 && oldDistance == pqMinDistance) {
      pqFindNextMin();
    }
  }
 else {
    pq.remove(n);
  }
}",0.8633440514469454
33095,"private void pqAdd(int node,int distance){
  if (getDistance(node) != distance) {
    throw new IllegalArgumentException(""String_Node_Str"" + distance + ""String_Node_Str""+ getDistance(node));
  }
  if (pqMinDistance < 0) {
    pqMinDistance=distance;
  }
  if (distance < pqMinDistance + FAST_DISTANCE_ACCESS) {
    int slot=pqSlotFor(distance);
    int[] slotArray=pqByDistance[slot];
    int fill=pqByDistanceFill[slot];
    pqByDistanceFill[slot]=fill + 1;
    if (slotArray.length <= fill + 1) {
      slotArray=Arrays.copyOf(slotArray,slotArray.length * 2);
      pqByDistance[slot]=slotArray;
    }
    slotArray[fill]=node;
  }
 else {
    pq.offer(node);
  }
}","private void pqAdd(int node,int distance){
  if (getDistance(node) != distance) {
    throw new IllegalArgumentException(""String_Node_Str"" + distance + ""String_Node_Str""+ getDistance(node));
  }
  if (pqMinDistance < 0) {
    pqMinDistance=distance;
  }
  while (distance < pqMinDistance) {
    pqMinDistance--;
    int slotToEmpty=pqSlotFor(pqMinDistance);
    for (int i=0; i < pqByDistanceFill[slotToEmpty]; i++) {
      pq.offer(pqByDistance[slotToEmpty][i]);
    }
    pqByDistanceFill[slotToEmpty]=0;
  }
  if (distance < pqMinDistance + FAST_DISTANCE_ACCESS) {
    int slot=pqSlotFor(distance);
    int[] slotArray=pqByDistance[slot];
    int fill=pqByDistanceFill[slot];
    pqByDistanceFill[slot]=fill + 1;
    if (slotArray.length <= fill + 1) {
      slotArray=Arrays.copyOf(slotArray,slotArray.length * 2);
      pqByDistance[slot]=slotArray;
    }
    slotArray[fill]=node;
  }
 else {
    pq.offer(node);
  }
}",0.8384663733500943
33096,"@AICommandInvocation() public static AIStrategy run2(AIHelper helper,@AICommandParameter(type=ParameterType.FIXED,fixedName=""String_Node_Str"",description=""String_Node_Str"") String nameArg,@AICommandParameter(type=ParameterType.POSITION,description=""String_Node_Str"",optional=true) Pos pos){
  setPos(helper,pos,true);
  return null;
}","@AICommandInvocation() public static AIStrategy run2(AIHelper helper,@AICommandParameter(type=ParameterType.FIXED,fixedName=""String_Node_Str"",description=""String_Node_Str"") String nameArg,@AICommandParameter(type=ParameterType.POSITION,description=""String_Node_Str"",optional=true) BlockPos pos){
  setPos(helper,pos,true);
  return null;
}",0.9925705794947994
33097,"public Pos add(int x,int y,int z){
  return new Pos(this.x + x,this.y + y,this.z + z);
}","public Pos add(Pos pos){
  return add(pos.x,pos.y,pos.z);
}",0.5986394557823129
33098,"@Override public void addTask(AITask task){
  tasks.add(task);
}","@Override public void addTask(AITask task){
  if (task == null) {
    throw new NullPointerException();
  }
  tasks.add(task);
}",0.6666666666666666
33099,"@SubscribeEvent public void onPlayerTick(ClientTickEvent evt){
  if (evt.phase != Phase.START || getMinecraft().thePlayer == null) {
    return;
  }
  invalidateObjectMouseOver();
  resetAllInputs();
  AIStrategy newStrat;
  if (dead || stop.isPressed() || stop.getIsKeyPressed()) {
    dead=false;
    currentStrategy=null;
    tasks.clear();
    System.out.println(""String_Node_Str"");
    resetTimeout();
  }
 else   if ((newStrat=findNewStrategy()) != null) {
    tasks.clear();
    currentStrategy=newStrat;
    System.out.println(""String_Node_Str"" + newStrat);
    resetTimeout();
  }
 else   if (desync) {
    tasks.clear();
  }
  desync=false;
  if (currentStrategy != null) {
synchronized (strategyDescrMutex) {
      strategyDescr=currentStrategy.getDescription();
    }
    final AITask overrideTask=currentStrategy.getOverrideTask(this);
    if (overrideTask != null) {
      tasks.clear();
      tasks.push(overrideTask);
    }
 else     if (tasks.isEmpty()) {
      currentStrategy.searchTasks(this);
      resetTimeout();
      System.out.println(""String_Node_Str"" + tasks.peekFirst());
    }
    if (tasks.isEmpty()) {
      dead=true;
    }
 else {
      final AITask task=tasks.get(0);
      if (task.isFinished(this)) {
        tasks.remove(0);
        resetTimeout();
        System.out.println(""String_Node_Str"" + tasks.peekFirst());
        if (tasks.peekFirst() != null) {
          timeout=tasks.peekFirst().getGameTickTimeout();
        }
      }
 else       if (timeout <= 0) {
        desync=true;
      }
 else {
        timeout--;
        try {
          task.runTick(this);
        }
 catch (        final Throwable t) {
          t.printStackTrace();
          AIChatController.addChatLine(""String_Node_Str"" + t.getMessage() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
synchronized (strategyDescrMutex) {
      strategyDescr=""String_Node_Str"";
    }
  }
}","/** 
 * Checks if the Bot is active and what it should do.
 * @param evt
 */
@SubscribeEvent public void onPlayerTick(ClientTickEvent evt){
  if (evt.phase != Phase.START || getMinecraft().thePlayer == null) {
    return;
  }
  invalidateObjectMouseOver();
  resetAllInputs();
  AIStrategy newStrat;
  if (dead || stop.isPressed() || stop.getIsKeyPressed()) {
    dead=false;
    currentStrategy=null;
    tasks.clear();
    System.out.println(""String_Node_Str"");
    resetTimeout();
  }
 else   if ((newStrat=findNewStrategy()) != null) {
    tasks.clear();
    currentStrategy=newStrat;
    System.out.println(""String_Node_Str"" + newStrat);
    resetTimeout();
  }
 else   if (desync) {
    tasks.clear();
  }
  desync=false;
  if (currentStrategy != null) {
synchronized (strategyDescrMutex) {
      strategyDescr=currentStrategy.getDescription();
    }
    final AITask overrideTask=currentStrategy.getOverrideTask(this);
    if (overrideTask != null) {
      tasks.clear();
      tasks.push(overrideTask);
    }
 else     if (tasks.isEmpty()) {
      currentStrategy.searchTasks(this);
      resetTimeout();
      System.out.println(""String_Node_Str"" + tasks.peekFirst());
    }
    if (tasks.isEmpty()) {
      dead=true;
    }
 else {
      final AITask task=tasks.get(0);
      if (task.isFinished(this)) {
        tasks.remove(0);
        resetTimeout();
        System.out.println(""String_Node_Str"" + tasks.peekFirst());
        if (tasks.peekFirst() != null) {
          timeout=tasks.peekFirst().getGameTickTimeout();
        }
      }
 else       if (timeout <= 0) {
        desync=true;
      }
 else {
        timeout--;
        try {
          task.runTick(this);
        }
 catch (        final Throwable t) {
          t.printStackTrace();
          AIChatController.addChatLine(""String_Node_Str"" + t.getMessage() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
synchronized (strategyDescrMutex) {
      strategyDescr=""String_Node_Str"";
    }
  }
}",0.9801290322580644
33100,"@SubscribeEvent public void drawMarkers(RenderWorldLastEvent event){
  final EntityLivingBase player=getMinecraft().renderViewEntity;
  if (player.getHeldItem() != null && player.getHeldItem().getItem() == Items.wooden_axe) {
    final double x=player.lastTickPosX + (player.posX - player.lastTickPosX) * event.partialTicks;
    final double y=player.lastTickPosY + (player.posY - player.lastTickPosY) * event.partialTicks;
    final double z=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * event.partialTicks;
    if (markerRenderer == null) {
      markerRenderer=new MarkerRenderer();
    }
    markerRenderer.render(x,y,z,pos1,pos2);
  }
}","/** 
 * Draws the position markers.
 * @param event
 */
@SubscribeEvent public void drawMarkers(RenderWorldLastEvent event){
  final EntityLivingBase player=getMinecraft().renderViewEntity;
  if (player.getHeldItem() != null && player.getHeldItem().getItem() == Items.wooden_axe) {
    final double x=player.lastTickPosX + (player.posX - player.lastTickPosX) * event.partialTicks;
    final double y=player.lastTickPosY + (player.posY - player.lastTickPosY) * event.partialTicks;
    final double z=player.lastTickPosZ + (player.posZ - player.lastTickPosZ) * event.partialTicks;
    if (markerRenderer == null) {
      markerRenderer=new MarkerRenderer();
    }
    markerRenderer.render(x,y,z,pos1,pos2);
  }
}",0.95900439238653
33101,"protected void attachTag(String imageId,String nameAndTag) throws MojoFailureException {
  try {
    getLog().info(String.format(""String_Node_Str"",imageId,nameAndTag));
    getDockerProvider().tagImage(imageId,nameAndTag);
  }
 catch (  DockerException e) {
    String message=String.format(""String_Node_Str"",imageId,nameAndTag);
    handleDockerException(message,e);
  }
}","protected void attachTag(String imageId,String nameAndTag) throws MojoFailureException {
  try {
    getLog().info(String.format(""String_Node_Str"",imageId,nameAndTag));
    getDockerProvider().tagImage(imageId,nameAndTag);
  }
 catch (  DockerException e) {
    String message=String.format(""String_Node_Str"",nameAndTag,imageId);
    handleDockerException(message,e);
  }
}",0.9785522788203752
33102,"/** 
 * Common method for re-throwing a   {@link DockerException} as a {@link MojoFailureException} with a more specificerror message. Extract into a common, template method in this base class to allow pre ""verify"" Mojos to handle errors differently.
 * @param message The message for the exception
 * @param e       The Docker Exception
 * @throws org.apache.maven.plugin.MojoFailureException to indicate Plugin failure
 */
protected void handleDockerException(String message,DockerException e) throws MojoFailureException {
  Optional<String> apiResponse=e.getApiResponse();
  if (apiResponse.isPresent()) {
    message+=""String_Node_Str"" + apiResponse.get();
  }
  throw new MojoFailureException(message,e);
}","/** 
 * Common method for re-throwing a   {@link DockerException} as a {@link MojoFailureException} with a more specificerror message. Extract into a common, template method in this base class to allow pre ""verify"" Mojos to handle errors differently.
 * @param message The message for the exception
 * @param e       The Docker Exception
 * @throws org.apache.maven.plugin.MojoFailureException to indicate Plugin failure
 */
protected void handleDockerException(final String message,DockerException e) throws MojoFailureException {
  Optional<String> apiResponse=e.getApiResponse();
  String exceptionMessage=apiResponse.isPresent() ? (message + ""String_Node_Str"" + apiResponse.get()) : message;
  throw new MojoFailureException(exceptionMessage,e);
}",0.8229665071770335
33103,"protected String getRegistryAuthHeaderValue(){
  if (credentials == null) {
    return REGISTRY_AUTH_NULL_VALUE;
  }
  return BaseEncoding.base64().encode(toJson(credentials).getBytes());
}","protected String getRegistryAuthHeaderValue(){
  if (credentials == null) {
    return REGISTRY_AUTH_NULL_VALUE;
  }
  return BaseEncoding.base64().encode(toJson(credentials).getBytes(Charset.forName(""String_Node_Str"")));
}",0.9174757281553398
33104,"public String getLogs(final String containerId){
  byte[] bytes=getServiceEndPoint().path(containerId).path(""String_Node_Str"").queryParam(""String_Node_Str"",1).queryParam(""String_Node_Str"",1).request(""String_Node_Str"").get(byte[].class);
  StringBuilder logs=new StringBuilder();
  ByteBuffer bb=ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);
  while (bb.hasRemaining()) {
    bb.position(bb.position() + 4);
    int frameLength=bb.getInt();
    byte[] frame=new byte[frameLength];
    bb.get(frame);
    logs.append(new String(frame));
  }
  return logs.toString();
}","public String getLogs(final String containerId){
  byte[] bytes=getServiceEndPoint().path(containerId).path(""String_Node_Str"").queryParam(""String_Node_Str"",1).queryParam(""String_Node_Str"",1).request(""String_Node_Str"").get(byte[].class);
  StringBuilder logs=new StringBuilder();
  ByteBuffer bb=ByteBuffer.wrap(bytes).order(ByteOrder.BIG_ENDIAN);
  while (bb.hasRemaining()) {
    bb.position(bb.position() + 4);
    int frameLength=bb.getInt();
    byte[] frame=new byte[frameLength];
    bb.get(frame);
    logs.append(new String(frame,Charset.forName(""String_Node_Str"")));
  }
  return logs.toString();
}",0.9703138252756572
33105,"protected Optional<URI> getDockerUriFromEnvironment(){
  String envDockerHost=System.getenv(RemoteDockerProvider.DOCKER_HOST_SYSTEM_ENV);
  try {
    return Optional.of(URI.create(envDockerHost));
  }
 catch (  NullPointerException|IllegalArgumentException ignored) {
    return Optional.absent();
  }
}","protected Optional<URI> getDockerUriFromEnvironment(){
  String envDockerHost=System.getenv(RemoteDockerProvider.DOCKER_HOST_SYSTEM_ENV);
  if (envDockerHost == null) {
    return Optional.absent();
  }
  try {
    URI uri=URI.create(envDockerHost);
    return Optional.of(uri);
  }
 catch (  IllegalArgumentException ignored) {
    return Optional.absent();
  }
}",0.5337331334332833
33106,"@Override public Optional<Integer> get(){
  Optional<String> port=Optional.fromNullable(System.getProperty(RemoteDockerProvider.DOCKER_PORT_PROPERTY));
  return port.isPresent() ? Optional.of(new Integer(port.get())) : Optional.<Integer>absent();
}","@Override public Optional<Integer> get(){
  Optional<String> port=Optional.fromNullable(System.getProperty(RemoteDockerProvider.DOCKER_PORT_PROPERTY));
  return port.isPresent() ? Optional.of(Integer.valueOf(port.get())) : Optional.<Integer>absent();
}",0.976
33107,"@Test public void testSuccessfulOAuth2LoginWithoutAuthorities() throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  startOAuth2ProviderMimic(""String_Node_Str"");
  startWebServer(TEST_OAUTH2_SUCCESS_URL,null);
  loginSuccessfullyExpectingAuthorizedUser(Void -> testComplete());
  await(1,TimeUnit.SECONDS);
}","@Test public void testSuccessfulOAuth2LoginWithoutAuthorities() throws Exception {
  LOG.info(""String_Node_Str"");
  LOG.debug(""String_Node_Str"");
  startOAuth2ProviderMimic(""String_Node_Str"");
  startWebServer(TEST_OAUTH2_SUCCESS_URL,null);
  loginSuccessfullyExpectingAuthorizedUser(Void -> testComplete());
  await(2,TimeUnit.SECONDS);
}",0.9970501474926252
33108,"@UiThread @AfterViews void oncreate(){
  if (!EventBus.getDefault().isRegistered(this))   EventBus.getDefault().register(this);
  context=(ActionBarActivity)getActivity();
  VaultHolder.getInstance().clear();
  if (mLinearView != null)   mLinearView.removeAllViews();
  context.getSupportActionBar().setTitle(R.string.App__name);
  java.io.File root=Storage.getRoot();
  if (!Util.canWrite(root)) {
    Util.alert(CustomApp.context,CustomApp.context.getString(R.string.Error__root_IOException),CustomApp.context.getString(R.string.Error__root_IOException_message),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialogInterface,      int i){
        mFinishListener.onNew(null,new SettingsFragment_());
      }
    }
,null);
    return;
  }
  adapter=new VaultsAdapter(context,null);
  ArrayList<File> files=Storage.getDirectories(root);
  for (int i=0; i < files.size(); i++) {
    adapter.add(files.get(i).getName());
    final View mView=adapter.getView(i,mLinearView);
    mLinearView.addView(mView,i);
    setClickListener(mView,i);
  }
  if (adapter.getCount() == 0) {
    nothing.setVisibility(View.VISIBLE);
    mLinearView.setVisibility(View.GONE);
  }
 else {
    nothing.setVisibility(View.GONE);
    mLinearView.setVisibility(View.VISIBLE);
  }
  showTutorial();
}","@UiThread @AfterViews void oncreate(){
  if (!EventBus.getDefault().isRegistered(this))   EventBus.getDefault().register(this);
  context=(ActionBarActivity)getActivity();
  VaultHolder.getInstance().clear();
  if (mLinearView != null)   mLinearView.removeAllViews();
  if (context.getSupportActionBar() != null)   context.getSupportActionBar().setTitle(R.string.App__name);
  java.io.File root=Storage.getRoot();
  if (!Util.canWrite(root)) {
    Util.alert(CustomApp.context,CustomApp.context.getString(R.string.Error__root_IOException),CustomApp.context.getString(R.string.Error__root_IOException_message),new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialogInterface,      int i){
        mFinishListener.onNew(null,new SettingsFragment_());
      }
    }
,null);
    return;
  }
  adapter=new VaultsAdapter(context,null);
  ArrayList<File> files=Storage.getDirectories(root);
  for (int i=0; i < files.size(); i++) {
    adapter.add(files.get(i).getName());
    final View mView=adapter.getView(i,mLinearView);
    mLinearView.addView(mView,i);
    setClickListener(mView,i);
  }
  if (adapter.getCount() == 0) {
    nothing.setVisibility(View.VISIBLE);
    mLinearView.setVisibility(View.GONE);
  }
 else {
    nothing.setVisibility(View.GONE);
    mLinearView.setVisibility(View.VISIBLE);
  }
  showTutorial();
}",0.9833024118738404
33109,"public String getTimestamp(){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  return df.format(Timestamp);
}","public String getTimestamp(){
  DateFormat df=new SimpleDateFormat(""String_Node_Str"");
  if (Timestamp == null)   return ""String_Node_Str"";
  return df.format(Timestamp);
}",0.8178694158075601
33110,"/** 
 * Bind the provided data to the view. This is the only method not required by base adapter.
 */
View bindData(View view,final int position){
  if (this.data.get(position) == null) {
    return view;
  }
  String vault=this.data.get(position);
  View viewElement=view.findViewById(R.id.name);
  TextView tv=(TextView)viewElement;
  tv.setText(vault);
  return view;
}","/** 
 * Bind the provided data to the view. This is the only method not required by base adapter.
 */
View bindData(View view,final int position){
  if (this.data.size() <= position)   return view;
  String vault=this.data.get(position);
  View viewElement=view.findViewById(R.id.name);
  TextView tv=(TextView)viewElement;
  tv.setText(vault);
  return view;
}",0.8949522510231923
33111,"@Override public void onEvent(int event,String path){
  if (path == null || !file.getName().equals(path)) {
    return;
  }
  if ((android.os.FileObserver.ACCESS & event) != 0) {
    Util.log(absolutePath + ""String_Node_Str"" + path+ ""String_Node_Str"");
    stopWatching();
    kill(file,0);
  }
}","@Override public void onEvent(int event,String path){
  if (path == null || !file.getName().equals(path)) {
    return;
  }
  if ((android.os.FileObserver.ACCESS & event) != 0) {
    Util.log(absolutePath + ""String_Node_Str"" + path+ ""String_Node_Str"");
    stopWatching();
    kill(file,10);
  }
}",0.9983136593591906
33112,"public Cipher decryptstream() throws Exception {
  try {
    Cipher c=Cipher.getInstance(mode);
    c.init(Cipher.DECRYPT_MODE,aesKey);
    return c;
  }
 catch (  Exception ex) {
    throw ex;
  }
}","public Cipher decryptstream() throws Exception {
  Cipher c=Cipher.getInstance(mode);
  c.init(Cipher.DECRYPT_MODE,aesKey);
  return c;
}",0.8154761904761905
33113,"public Cipher encryptstream() throws Exception {
  try {
    Cipher c=Cipher.getInstance(mode);
    c.init(Cipher.ENCRYPT_MODE,aesKey);
    return c;
  }
 catch (  Exception ex) {
    throw ex;
  }
}","public Cipher encryptstream() throws Exception {
  Cipher c=Cipher.getInstance(mode);
  c.init(Cipher.ENCRYPT_MODE,aesKey);
  return c;
}",0.8154761904761905
33114,"@Background void handleData(final Uri data){
  String filename=secret.addFile(this,data);
  Uri thumbnail=storage.saveThumbnail(this,data,filename);
  if (thumbnail != null) {
    secret.addFile(this,thumbnail);
    new java.io.File(thumbnail.getPath()).delete();
  }
  try {
    this.getContentResolver().delete(data,null,null);
  }
 catch (  Exception E) {
  }
 finally {
    new File(data.getPath()).delete();
  }
}","@Background void handleData(final Uri data){
  String filename=secret.addFile(this,data);
  Uri thumbnail=storage.saveThumbnail(this,data,filename);
  if (thumbnail != null) {
    secret.addFile(this,thumbnail);
    new java.io.File(thumbnail.getPath()).delete();
  }
  try {
    this.getContentResolver().delete(data,null,null);
  }
 catch (  Exception ignored) {
  }
 finally {
    new File(data.getPath()).delete();
  }
}",0.990498812351544
33115,"@Background void addFile(final Intent data){
  String filename=secret.addFile(context,data.getData());
  Uri thumbnail=storage.saveThumbnail(context,data.getData(),filename);
  if (thumbnail != null) {
    secret.addFile(context,thumbnail);
    new File(thumbnail.getPath()).delete();
  }
  Util.alert(context,getString(R.string.add_successful),getString(R.string.add_successful_message),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      try {
        context.getContentResolver().delete(data.getData(),null,null);
      }
 catch (      Exception E) {
      }
 finally {
        new File(data.getData().getPath()).delete();
      }
    }
  }
,Util.emptyClickListener);
  onCreate();
}","@Background void addFile(final Intent data){
  String filename=secret.addFile(context,data.getData());
  Uri thumbnail=storage.saveThumbnail(context,data.getData(),filename);
  if (thumbnail != null) {
    secret.addFile(context,thumbnail);
    new File(thumbnail.getPath()).delete();
  }
  Util.alert(context,getString(R.string.add_successful),getString(R.string.add_successful_message),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      try {
        context.getContentResolver().delete(data.getData(),null,null);
      }
 catch (      Exception ignored) {
      }
 finally {
        new File(data.getData().getPath()).delete();
      }
    }
  }
,Util.emptyClickListener);
  onCreate();
}",0.9947643979057592
33116,"@Background void addFile(final Intent data){
  String filename=secret.addFile(context,data.getData());
  Uri thumbnail=storage.saveThumbnail(context,data.getData(),filename);
  if (thumbnail != null) {
    secret.addFile(context,thumbnail);
    new File(thumbnail.getPath()).delete();
  }
  Util.alert(context,getString(R.string.add_successful),getString(R.string.add_successful_message),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      try {
        context.getContentResolver().delete(data.getData(),null,null);
      }
 catch (      Exception E) {
      }
 finally {
        new File(data.getData().getPath()).delete();
      }
    }
  }
,Util.emptyClickListener);
  onCreate();
}","@Background void addFile(final Intent data){
  String filename=secret.addFile(context,data.getData());
  Uri thumbnail=storage.saveThumbnail(context,data.getData(),filename);
  if (thumbnail != null) {
    secret.addFile(context,thumbnail);
    new File(thumbnail.getPath()).delete();
  }
  Util.alert(context,getString(R.string.add_successful),getString(R.string.add_successful_message),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      try {
        context.getContentResolver().delete(data.getData(),null,null);
      }
 catch (      Exception ignored) {
      }
 finally {
        new File(data.getData().getPath()).delete();
      }
    }
  }
,Util.emptyClickListener);
  onCreate();
}",0.9947643979057592
33117,"public void place(OrderId orderId,CustomerInformation customerInformation,List<OrderLine> orderLines,long totalAmount){
  assertHasNotBeenPlaced();
  assertMoreThanZeroOrderLines(orderLines);
  applyChange(new OrderPlacedEvent(orderId,nextVersion(),now(),customerInformation,orderLines,totalAmount));
}","public void place(OrderId orderId,CustomerInformation customerInformation,List<OrderLine> orderLines,long totalAmount){
  assertHasNotBeenPlaced();
  assertMoreThanZeroOrderLines(orderLines);
  applyChange(new OrderPlacedEvent(orderId,nextVersion(),now(),toCustomerInformation(customerInformation),toOrderLines(orderLines),totalAmount));
}",0.904836193447738
33118,"private static void importBooks(){
  try {
    TestHttpClient publisherClient=new TestHttpClient(SERVER_ADDRESS + ""String_Node_Str"").init();
    String contractsJson=Resources.toString(getResource(""String_Node_Str""),UTF_8);
    TypeReference<List<RegisterPublisherContractRequest>> listOfRegisterPublisherRequests=new TypeReference<List<RegisterPublisherContractRequest>>(){
    }
;
    List<RegisterPublisherContractRequest> publisherContractsRequests=deserialize(contractsJson,listOfRegisterPublisherRequests);
    for (    RegisterPublisherContractRequest request : publisherContractsRequests) {
      publisherClient.post(JsonSerializer.serialize(request));
    }
    System.out.println(""String_Node_Str"" + publisherContractsRequests.size() + ""String_Node_Str"");
    TestHttpClient bookClient=new TestHttpClient(SERVER_ADDRESS + ""String_Node_Str"").init();
    String booksJson=Resources.toString(getResource(""String_Node_Str""),UTF_8);
    TypeReference<List<BookDto>> listOfCreateBookRequests=new TypeReference<List<BookDto>>(){
    }
;
    List<BookDto> books=deserialize(booksJson,listOfCreateBookRequests);
    for (    BookDto book : books) {
      bookClient.post(JsonSerializer.serialize(book));
    }
    System.out.println(""String_Node_Str"" + publisherContractsRequests.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private static void importBooks(){
  try {
    TestHttpClient publisherClient=new TestHttpClient(SERVER_ADDRESS + ""String_Node_Str"").init();
    String contractsJson=Resources.toString(getResource(""String_Node_Str""),UTF_8);
    TypeReference<List<RegisterPublisherContractRequest>> listOfRegisterPublisherRequests=new TypeReference<List<RegisterPublisherContractRequest>>(){
    }
;
    List<RegisterPublisherContractRequest> publisherContractsRequests=deserialize(contractsJson,listOfRegisterPublisherRequests);
    for (    RegisterPublisherContractRequest request : publisherContractsRequests) {
      publisherClient.post(JsonSerializer.serialize(request));
    }
    System.out.println(""String_Node_Str"" + publisherContractsRequests.size() + ""String_Node_Str"");
    TestHttpClient bookClient=new TestHttpClient(SERVER_ADDRESS + ""String_Node_Str"").init();
    String booksJson=Resources.toString(getResource(""String_Node_Str""),UTF_8);
    TypeReference<List<BookDto>> listOfCreateBookRequests=new TypeReference<List<BookDto>>(){
    }
;
    List<BookDto> books=deserialize(booksJson,listOfCreateBookRequests);
    for (    BookDto book : books) {
      bookClient.post(JsonSerializer.serialize(book));
    }
    System.out.println(""String_Node_Str"" + books.size() + ""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9893343140860612
33119,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  setContentView(R.layout.main);
  _openCvCameraView=(JavaCameraView)findViewById(R.id.aav_activity_surface_view);
  _openCvCameraView.setCvCameraViewListener(this);
  _openCvCameraView.setMaxFrameSize(176,144);
  _mainController=new ActuatorController();
  _countOutOfFrame=0;
  PreferenceManager.setDefaultValues(this,R.xml.settings,false);
  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  trackingColor=Integer.parseInt(sharedPreferences.getString(getString(R.string.color_key),""String_Node_Str""));
  if (trackingColor == 0) {
    _lowerThreshold=new Scalar(60,100,30);
    _upperThreshold=new Scalar(130,255,255);
  }
 else   if (trackingColor == 1) {
    _lowerThreshold=new Scalar(150,100,90);
    _upperThreshold=new Scalar(255,255,290);
  }
 else   if (trackingColor == 1) {
    _lowerThreshold=new Scalar(1,100,100);
    _upperThreshold=new Scalar(30,255,255);
  }
  SensorManager sensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
  _sensorFusion=new SensorFusion(sensorManager);
  gestureDetector=new GestureDetector(this,new GestureDetector.SimpleOnGestureListener(){
    @Override public void onLongPress(    MotionEvent e){
      startActivityForResult(new Intent(getApplicationContext(),SettingsActivity.class),0);
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  setContentView(R.layout.main);
  PreferenceManager.setDefaultValues(this,R.xml.settings,false);
  sharedPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  trackingColor=Integer.parseInt(sharedPreferences.getString(getString(R.string.color_key),""String_Node_Str""));
  if (trackingColor == 0) {
    _lowerThreshold=new Scalar(60,100,30);
    _upperThreshold=new Scalar(130,255,255);
  }
 else   if (trackingColor == 1) {
    _lowerThreshold=new Scalar(160,90,90);
    _upperThreshold=new Scalar(255,255,255);
  }
 else   if (trackingColor == 2) {
    _lowerThreshold=new Scalar(0,90,90);
    _upperThreshold=new Scalar(100,255,255);
  }
  _openCvCameraView=(JavaCameraView)findViewById(R.id.aav_activity_surface_view);
  _openCvCameraView.setCvCameraViewListener(this);
  _openCvCameraView.setMaxFrameSize(176,144);
  _mainController=new ActuatorController();
  _countOutOfFrame=0;
  SensorManager sensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
  _sensorFusion=new SensorFusion(sensorManager);
  gestureDetector=new GestureDetector(this,new GestureDetector.SimpleOnGestureListener(){
    @Override public void onLongPress(    MotionEvent e){
      startActivityForResult(new Intent(getApplicationContext(),SettingsActivity.class),0);
    }
  }
);
}",0.5876494023904383
33120,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  trackingColor=Integer.parseInt(sharedPreferences.getString(getString(R.string.color_key),""String_Node_Str""));
switch (trackingColor) {
case 0:
    _lowerThreshold.set(new double[]{60,100,30,0});
  _upperThreshold.set(new double[]{130,255,255,0});
break;
case 1:
_lowerThreshold.set(new double[]{180,90,90,0});
_upperThreshold.set(new double[]{255,255,255,0});
break;
case 2:
_lowerThreshold.set(new double[]{1,100,100,0});
_upperThreshold.set(new double[]{30,255,255,0});
break;
default :
_lowerThreshold.set(new double[]{60,100,30,0});
_upperThreshold.set(new double[]{130,255,255,0});
break;
}
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  trackingColor=Integer.parseInt(sharedPreferences.getString(getString(R.string.color_key),""String_Node_Str""));
switch (trackingColor) {
case 0:
    _lowerThreshold.set(new double[]{60,100,30,0});
  _upperThreshold.set(new double[]{130,255,255,0});
break;
case 1:
_lowerThreshold.set(new double[]{160,90,90});
_upperThreshold.set(new double[]{255,255,255,0});
break;
case 2:
_lowerThreshold.set(new double[]{0,90,90,0});
_upperThreshold.set(new double[]{100,255,255,0});
break;
default :
_lowerThreshold.set(new double[]{60,100,30,0});
_upperThreshold.set(new double[]{130,255,255,0});
break;
}
}",0.9858012170385396
33121,"protected void writeComplexValue(final ServiceMetadata metadata,Property complexProperty,final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  final EdmComplexType resolvedType=resolveComplexType(metadata,type,complexProperty.getType());
  for (  final String propertyName : resolvedType.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty(metadata,(EdmProperty)resolvedType.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),xml10InvalidCharReplacement,writer);
    }
  }
}","protected void writeComplexValue(final ServiceMetadata metadata,final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  final String propertyName : type.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty(metadata,(EdmProperty)type.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),xml10InvalidCharReplacement,writer);
    }
  }
}",0.6240694789081885
33122,"private void writeComplexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  Object value : property.asCollection()) {
    writer.writeStartElement(METADATA,Constants.ELEM_ELEMENT,NS_METADATA);
    if (derivedComplexType(type,property.getType()) != null) {
      writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,property.getType());
    }
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(metadata,property,type,((ComplexValue)value).getValue(),selectedPaths,xml10InvalidCharReplacement,writer);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
writer.writeEndElement();
}
}","private void writeComplexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  Object value : property.asCollection()) {
    writer.writeStartElement(METADATA,Constants.ELEM_ELEMENT,NS_METADATA);
    if (derivedComplexType(type,property.getType()) != null) {
      writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,property.getType());
    }
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(metadata,type,((ComplexValue)value).getValue(),selectedPaths,xml10InvalidCharReplacement,writer);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
writer.writeEndElement();
}
}",0.9951482479784368
33123,"private void writePropertyValue(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  try {
    if (edmProperty.isPrimitive() || edmProperty.getType().getKind() == EdmTypeKind.ENUM || edmProperty.getType().getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,edmProperty.isPrimitive() ? ""String_Node_Str"" + edmProperty.getType().getName() + ""String_Node_Str"" : collectionType(edmProperty.getType()));
        writePrimitiveCollection((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),xml10InvalidCharReplacement,writer);
      }
 else {
        writePrimitive((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),xml10InvalidCharReplacement,writer);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,collectionType(edmProperty.getType()));
        writeComplexCollection(metadata,(EdmComplexType)edmProperty.getType(),property,selectedPaths,xml10InvalidCharReplacement,writer);
      }
 else {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,""String_Node_Str"" + complexType(metadata,(EdmComplexType)edmProperty.getType(),property.getType()));
        writeComplexValue(metadata,property,(EdmComplexType)edmProperty.getType(),property.asComplex().getValue(),selectedPaths,xml10InvalidCharReplacement,writer);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}","private void writePropertyValue(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final String xml10InvalidCharReplacement,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  try {
    if (edmProperty.isPrimitive() || edmProperty.getType().getKind() == EdmTypeKind.ENUM || edmProperty.getType().getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,edmProperty.isPrimitive() ? ""String_Node_Str"" + edmProperty.getType().getName() + ""String_Node_Str"" : collectionType(edmProperty.getType()));
        writePrimitiveCollection((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),xml10InvalidCharReplacement,writer);
      }
 else {
        writePrimitive((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),xml10InvalidCharReplacement,writer);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,collectionType(edmProperty.getType()));
        writeComplexCollection(metadata,(EdmComplexType)edmProperty.getType(),property,selectedPaths,xml10InvalidCharReplacement,writer);
      }
 else {
        writeComplex(metadata,edmProperty,property,selectedPaths,xml10InvalidCharReplacement,writer);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}",0.9311873104735248
33124,"@Test public void entitySetCompCollComp() throws SAXException, DataProvider.DataProviderException, SerializerException, IOException {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  long currentTimeMillis=System.currentTimeMillis();
  InputStream content=serializer.entityCollection(metadata,edmEntitySet.getEntityType(),entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).build()).id(""String_Node_Str"").build()).getContent();
  final String resultString=IOUtils.toString(content);
  final String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + UPDATED_FORMAT.format(new Date(currentTimeMillis)) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UPDATED_FORMAT.format(new Date(currentTimeMillis))+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  checkXMLEqual(expectedResult,resultString);
}","@Test public void entitySetCompCollComp() throws Exception {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  long currentTimeMillis=System.currentTimeMillis();
  InputStream content=serializer.entityCollection(metadata,edmEntitySet.getEntityType(),entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).build()).id(""String_Node_Str"").build()).getContent();
  final String resultString=IOUtils.toString(content);
  final String expectedResult=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + UPDATED_FORMAT.format(new Date(currentTimeMillis)) + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ UPDATED_FORMAT.format(new Date(currentTimeMillis))+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  checkXMLEqual(expectedResult,resultString);
}",0.9750729845048282
33125,"private ODataResponse createFailResponse(){
  ODataResponse odResponse=new ODataResponse();
  odResponse.setStatusCode(HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode());
  odResponse.setHeader(HttpHeader.CONTENT_TYPE,ContentType.TEXT_PLAIN.toContentTypeString());
  InputStream content=new ByteArrayInputStream(""String_Node_Str"".getBytes());
  odResponse.setContent(content);
  return odResponse;
}","private ODataResponse createFailResponse(){
  ODataResponse odResponse=new ODataResponse();
  odResponse.setStatusCode(HttpStatusCode.INTERNAL_SERVER_ERROR.getStatusCode());
  odResponse.setHeader(HttpHeader.CONTENT_TYPE,ContentType.TEXT_PLAIN.toContentTypeString());
  InputStream content=new ByteArrayInputStream(""String_Node_Str"".getBytes(DEFAULT_ENCODING));
  odResponse.setContent(content);
  return odResponse;
}",0.9804878048780488
33126,"private List<BatchRequestPart> parse(final InputStream in,final String boundary,final BatchRequestTransformator transformator) throws BatchDeserializerException {
  try {
    return parseBatch(in,boundary,transformator);
  }
 catch (  IOException e) {
    throw new ODataRuntimeException(e);
  }
 finally {
    try {
      in.close();
    }
 catch (    IOException e) {
      throw new ODataRuntimeException(e);
    }
  }
}","private List<BatchRequestPart> parse(final InputStream in,final String boundary,final BatchRequestTransformator transformator) throws BatchDeserializerException {
  try {
    return parseBatch(in,boundary,transformator);
  }
 catch (  IOException e) {
    throw new ODataRuntimeException(e);
  }
}",0.825
33127,"@Override public Header clone(){
  final Header newInstance=new Header(lineNumber);
  for (  final Map.Entry<String,HeaderField> entries : headers.entrySet()) {
    newInstance.headers.put(entries.getKey(),entries.getValue().clone());
  }
  return newInstance;
}","@Override public Header clone() throws CloneNotSupportedException {
  Header clone=(Header)super.clone();
  clone.lineNumber=lineNumber;
  clone.headers=new HashMap<String,HeaderField>();
  for (  final Map.Entry<String,HeaderField> entries : headers.entrySet()) {
    clone.headers.put(entries.getKey(),entries.getValue().clone());
  }
  return clone;
}",0.6753246753246753
33128,"@Override public HeaderField clone(){
  List<String> newValues=new ArrayList<String>(values.size());
  newValues.addAll(values);
  return new HeaderField(fieldName,newValues,lineNumber);
}","@Override public HeaderField clone() throws CloneNotSupportedException {
  HeaderField clone=(HeaderField)super.clone();
  clone.values=new ArrayList<String>(values.size());
  clone.values.addAll(values);
  return clone;
}",0.2731707317073171
33129,"public byte[] getContent(){
  return content;
}","private byte[] getContent(){
  return content;
}",0.9052631578947368
33130,"public int getLength(){
  return content.length;
}","private int getLength(){
  return content.length;
}",0.9108910891089108
33131,"@Test public void deepCopy(){
  Header header=new Header(1);
  header.addHeader(HttpHeader.CONTENT_TYPE,ContentType.MULTIPART_MIXED + ""String_Node_Str"",1);
  Header copy=header.clone();
  assertEquals(header.getHeaders(HttpHeader.CONTENT_TYPE),copy.getHeaders(HttpHeader.CONTENT_TYPE));
  assertEquals(header.getHeader(HttpHeader.CONTENT_TYPE),copy.getHeader(HttpHeader.CONTENT_TYPE));
  assertEquals(header.getHeaderField(HttpHeader.CONTENT_TYPE),copy.getHeaderField(HttpHeader.CONTENT_TYPE));
  assertTrue(header.getHeaders(HttpHeader.CONTENT_TYPE) != copy.getHeaders(HttpHeader.CONTENT_TYPE));
  assertTrue(header.getHeaderField(HttpHeader.CONTENT_TYPE) != copy.getHeaderField(HttpHeader.CONTENT_TYPE));
}","@Test public void deepCopy() throws Exception {
  Header header=new Header(1);
  header.addHeader(HttpHeader.CONTENT_TYPE,ContentType.MULTIPART_MIXED + ""String_Node_Str"",1);
  Header copy=header.clone();
  assertEquals(header.getHeaders(HttpHeader.CONTENT_TYPE),copy.getHeaders(HttpHeader.CONTENT_TYPE));
  assertEquals(header.getHeader(HttpHeader.CONTENT_TYPE),copy.getHeader(HttpHeader.CONTENT_TYPE));
  assertEquals(header.getHeaderField(HttpHeader.CONTENT_TYPE),copy.getHeaderField(HttpHeader.CONTENT_TYPE));
  assertTrue(header.getHeaders(HttpHeader.CONTENT_TYPE) != copy.getHeaders(HttpHeader.CONTENT_TYPE));
  assertTrue(header.getHeaderField(HttpHeader.CONTENT_TYPE) != copy.getHeaderField(HttpHeader.CONTENT_TYPE));
}",0.98744769874477
33132,"@Test public void applicationExceptionInProcessorMessage() throws Exception {
  final String ODATA_ERRORCODE=""String_Node_Str"";
  final String ORIGINAL_MESSAGE=""String_Node_Str"";
  final String LOCALIZED_MESSAGE=""String_Node_Str"";
  MetadataProcessor processor=mock(MetadataProcessor.class);
  ODataApplicationException oDataApplicationException=new ODataApplicationException(ORIGINAL_MESSAGE,425,Locale.ENGLISH,ODATA_ERRORCODE){
    @Override public String getLocalizedMessage(){
      return LOCALIZED_MESSAGE;
    }
  }
;
  doThrow(oDataApplicationException).when(processor).readMetadata(any(ODataRequest.class),any(ODataResponse.class),any(UriInfo.class),any(ContentType.class));
  final ODataResponse response=dispatch(HttpMethod.GET,""String_Node_Str"",processor);
  InputStream contentStream=response.getContent();
  String responseContent=IOUtils.toString(contentStream,Charset.forName(""String_Node_Str""));
  boolean isMessage=responseContent.contains(LOCALIZED_MESSAGE) && responseContent.contains(ODATA_ERRORCODE);
  assertEquals(true,isMessage);
  assertEquals(ORIGINAL_MESSAGE,oDataApplicationException.getMessage());
}","@Test public void applicationExceptionInProcessorMessage() throws Exception {
  final String ODATA_ERRORCODE=""String_Node_Str"";
  final String ORIGINAL_MESSAGE=""String_Node_Str"";
  final String LOCALIZED_MESSAGE=""String_Node_Str"";
  MetadataProcessor processor=mock(MetadataProcessor.class);
  ODataApplicationException oDataApplicationException=new ODataApplicationException(ORIGINAL_MESSAGE,425,Locale.ENGLISH,ODATA_ERRORCODE){
    private static final long serialVersionUID=1L;
    @Override public String getLocalizedMessage(){
      return LOCALIZED_MESSAGE;
    }
  }
;
  doThrow(oDataApplicationException).when(processor).readMetadata(any(ODataRequest.class),any(ODataResponse.class),any(UriInfo.class),any(ContentType.class));
  final ODataResponse response=dispatch(HttpMethod.GET,""String_Node_Str"",processor);
  InputStream contentStream=response.getContent();
  String responseContent=IOUtils.toString(contentStream,Charset.forName(""String_Node_Str""));
  boolean isMessage=responseContent.contains(LOCALIZED_MESSAGE) && responseContent.contains(ODATA_ERRORCODE);
  assertEquals(true,isMessage);
  assertEquals(ORIGINAL_MESSAGE,oDataApplicationException.getMessage());
}",0.9779125162407968
33133,"public StreamContentForJson(EntityIterator iterator,EdmEntityType entityType,ODataJsonSerializer jsonSerializer,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  super(iterator,entityType,jsonSerializer,metadata,options);
  this.jsonSerializer=jsonSerializer;
}","public StreamContentForJson(EntityIterator iterator,EdmEntityType entityType,ODataJsonSerializer jsonSerializer,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  super(iterator,entityType,metadata,options);
  this.jsonSerializer=jsonSerializer;
}",0.9726775956284152
33134,"public StreamContent(EntityIterator iterator,EdmEntityType entityType,ODataSerializer serializer,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  this.iterator=iterator;
  this.entityType=entityType;
  this.serializer=serializer;
  this.metadata=metadata;
  this.options=options;
}","public StreamContent(EntityIterator iterator,EdmEntityType entityType,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  this.iterator=iterator;
  this.entityType=entityType;
  this.metadata=metadata;
  this.options=options;
}",0.8961748633879781
33135,"public StreamContentForXml(EntityIterator iterator,EdmEntityType entityType,ODataXmlSerializer xmlSerializer,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  super(iterator,entityType,xmlSerializer,metadata,options);
  this.xmlSerializer=xmlSerializer;
}","public StreamContentForXml(EntityIterator iterator,EdmEntityType entityType,ODataXmlSerializer xmlSerializer,ServiceMetadata metadata,EntityCollectionSerializerOptions options){
  super(iterator,entityType,metadata,options);
  this.xmlSerializer=xmlSerializer;
}",0.9739776951672864
33136,"protected void writeEntity(EntityIterator entity,OutputStream outputStream) throws SerializerException {
  try {
    xmlSerializer.entityCollectionIntoStream(metadata,entityType,entity,options,outputStream);
    outputStream.flush();
  }
 catch (  final IOException e) {
    throw new ODataRuntimeException(""String_Node_Str"");
  }
}","protected void writeEntity(EntityIterator entity,OutputStream outputStream) throws SerializerException {
  try {
    xmlSerializer.entityCollectionIntoStream(metadata,entityType,entity,options,outputStream);
    outputStream.flush();
  }
 catch (  final IOException e) {
    throw new ODataRuntimeException(""String_Node_Str"",e);
  }
}",0.996996996996997
33137,"private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new ObjectMapper().getFactory().createGenerator(outputStream);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
  finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        throw e;
      }
    }
  }
}","private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new ObjectMapper().getFactory().createGenerator(outputStream);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
  finally {
    if (outputStream != null) {
      outputStream.close();
    }
  }
}",0.9476394849785408
33138,"private void appendRuntimeNode(final RuntimeNode node,final String draw,final boolean isLast,final Writer writer) throws IOException {
  if (node.className != null) {
    writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(draw).append(isLast ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(node.className).append(""String_Node_Str"").append(""String_Node_Str"").append(node.methodName).append(""String_Node_Str"").append(""String_Node_Str"");
    long time=node.timeStopped == 0 ? 0 : (node.timeStopped - node.timeStarted) / 1000;
    writer.append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : Long.toString(time) + ""String_Node_Str"").append(""String_Node_Str"");
  }
  if (!node.children.isEmpty()) {
    writer.append(""String_Node_Str"");
    for (    final RuntimeNode childNode : node.children) {
      appendRuntimeNode(childNode,node.className == null ? draw : draw + (isLast ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",node.children.indexOf(childNode) == node.children.size() - 1,writer);
    }
    writer.append(""String_Node_Str"");
  }
  if (node.className != null) {
    writer.append(""String_Node_Str"");
  }
}","private void appendRuntimeNode(final RuntimeNode node,final String draw,final boolean isLast,final Writer writer) throws IOException {
  if (node.className != null) {
    writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(draw).append(isLast ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"").append(node.className).append(""String_Node_Str"").append(""String_Node_Str"").append(node.methodName).append(""String_Node_Str"").append(""String_Node_Str"");
    long time=node.timeStopped == 0 ? 0 : (node.timeStopped - node.timeStarted) / TO_MILLIS_DIVISOR;
    writer.append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : ""String_Node_Str"").append(""String_Node_Str"").append(time == 0 ? ""String_Node_Str"" : Long.toString(time) + ""String_Node_Str"").append(""String_Node_Str"");
  }
  if (!node.children.isEmpty()) {
    writer.append(""String_Node_Str"");
    for (    final RuntimeNode childNode : node.children) {
      appendRuntimeNode(childNode,node.className == null ? draw : draw + (isLast ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"",node.children.indexOf(childNode) == node.children.size() - 1,writer);
    }
    writer.append(""String_Node_Str"");
  }
  if (node.className != null) {
    writer.append(""String_Node_Str"");
  }
}",0.992529348986126
33139,"private void appendJsonNode(final JsonGenerator gen,final RuntimeNode node) throws IOException {
  gen.writeStartObject();
  gen.writeStringField(""String_Node_Str"",node.className);
  gen.writeStringField(""String_Node_Str"",node.methodName);
  if (node.timeStopped == 0) {
    gen.writeNullField(""String_Node_Str"");
  }
 else {
    gen.writeStringField(""String_Node_Str"",Long.toString((node.timeStopped - node.timeStarted) / 1000));
    gen.writeStringField(""String_Node_Str"",""String_Node_Str"");
  }
  if (!node.children.isEmpty()) {
    gen.writeFieldName(""String_Node_Str"");
    appendJsonChildren(gen,node);
  }
  gen.writeEndObject();
}","private void appendJsonNode(final JsonGenerator gen,final RuntimeNode node) throws IOException {
  gen.writeStartObject();
  gen.writeStringField(""String_Node_Str"",node.className);
  gen.writeStringField(""String_Node_Str"",node.methodName);
  if (node.timeStopped == 0) {
    gen.writeNullField(""String_Node_Str"");
  }
 else {
    gen.writeStringField(""String_Node_Str"",Long.toString((node.timeStopped - node.timeStarted) / TO_MILLIS_DIVISOR));
    gen.writeStringField(""String_Node_Str"",""String_Node_Str"");
  }
  if (!node.children.isEmpty()) {
    gen.writeFieldName(""String_Node_Str"");
    appendJsonChildren(gen,node);
  }
  gen.writeEndObject();
}",0.9837083010085338
33140,"@Override public byte[] binary(final InputStream content) throws DeserializerException {
  ByteArrayOutputStream result=new ByteArrayOutputStream();
  byte[] buffer=new byte[128];
  int count;
  try {
    while ((count=content.read(buffer)) > -1) {
      result.write(buffer,0,count);
    }
    result.flush();
  }
 catch (  final IOException e) {
    throw new DeserializerException(""String_Node_Str"",e,DeserializerException.MessageKeys.IO_EXCEPTION);
  }
  return result.toByteArray();
}","@Override public byte[] binary(final InputStream content) throws DeserializerException {
  ByteArrayOutputStream result=new ByteArrayOutputStream();
  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];
  int count;
  try {
    while ((count=content.read(buffer)) > -1) {
      result.write(buffer,0,count);
    }
    result.flush();
  }
 catch (  final IOException e) {
    throw new DeserializerException(""String_Node_Str"",e,DeserializerException.MessageKeys.IO_EXCEPTION);
  }
  return result.toByteArray();
}",0.977867203219316
33141,"String readLine() throws IOException {
  if (limit == EOF) {
    return null;
  }
  ByteBuffer innerBuffer=ByteBuffer.allocate(BUFFER_SIZE);
  boolean foundLineEnd=false;
  while (!foundLineEnd) {
    if (limit == offset) {
      if (fillBuffer() == EOF) {
        foundLineEnd=true;
      }
    }
    if (!foundLineEnd) {
      byte currentChar=buffer[offset++];
      if (!innerBuffer.hasRemaining()) {
        innerBuffer.flip();
        ByteBuffer tmp=ByteBuffer.allocate(innerBuffer.limit() * 2);
        tmp.put(innerBuffer);
        innerBuffer=tmp;
      }
      innerBuffer.put(currentChar);
      if (currentChar == LF) {
        foundLineEnd=true;
      }
 else       if (currentChar == CR) {
        foundLineEnd=true;
        if (limit == offset) {
          fillBuffer();
        }
        if (limit != EOF && buffer[offset] == LF) {
          innerBuffer.put(LF);
          offset++;
        }
      }
    }
  }
  if (innerBuffer.position() == 0) {
    return null;
  }
 else {
    String currentLine;
    if (readState.isReadBody()) {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),getCurrentCharset());
    }
 else {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),CS_ISO_8859_1);
    }
    updateCurrentCharset(currentLine);
    return currentLine;
  }
}","String readLine() throws IOException {
  if (limit == EOF) {
    return null;
  }
  ByteBuffer innerBuffer=ByteBuffer.allocate(BUFFER_SIZE);
  boolean foundLineEnd=false;
  while (!foundLineEnd) {
    if (limit == offset && fillBuffer() == EOF) {
      foundLineEnd=true;
    }
    if (!foundLineEnd) {
      byte currentChar=buffer[offset++];
      if (!innerBuffer.hasRemaining()) {
        innerBuffer.flip();
        ByteBuffer tmp=ByteBuffer.allocate(innerBuffer.limit() * 2);
        tmp.put(innerBuffer);
        innerBuffer=tmp;
      }
      innerBuffer.put(currentChar);
      if (currentChar == LF) {
        foundLineEnd=true;
      }
 else       if (currentChar == CR) {
        foundLineEnd=true;
        if (limit == offset) {
          fillBuffer();
        }
        if (limit != EOF && buffer[offset] == LF) {
          innerBuffer.put(LF);
          offset++;
        }
      }
    }
  }
  if (innerBuffer.position() == 0) {
    return null;
  }
 else {
    String currentLine;
    if (readState.isReadBody()) {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),getCurrentCharset());
    }
 else {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),CS_ISO_8859_1);
    }
    updateCurrentCharset(currentLine);
    return currentLine;
  }
}",0.9893536121673004
33142,"protected Object invokeSelfMethod(final Method method,final Object[] args) throws Throwable {
  try {
    return getClass().getMethod(method.getName(),method.getParameterTypes()).invoke(this,args);
  }
 catch (  UndeclaredThrowableException e) {
    throw e.getCause();
  }
}","protected Object invokeSelfMethod(final Method method,final Object[] args) throws Throwable {
  try {
    return getClass().getMethod(method.getName(),method.getParameterTypes()).invoke(this,args);
  }
 catch (  UndeclaredThrowableException e) {
    throw e.getCause();
  }
catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}",0.8757961783439491
33143,"protected Object retrieveNavigationProperty(final NavigationProperty property,final Method getter){
  final Class<?> type=getter.getReturnType();
  final Class<?> collItemType;
  if (EntityCollection.class.isAssignableFrom(type)) {
    collItemType=ClassUtils.extractTypeArg(type,EntityCollection.class,ComplexCollection.class);
  }
 else {
    collItemType=type;
  }
  final Object navPropValue;
  URI targetEntitySetURI=CoreUtils.getTargetEntitySetURI(getClient(),property);
  final ClientLink link=((ClientLinked)internal).getNavigationLink(property.name());
  if (link instanceof ClientInlineEntity) {
    navPropValue=ProxyUtils.getEntityProxy(service,((ClientInlineEntity)link).getEntity(),targetEntitySetURI,type,null,false);
  }
 else   if (link instanceof ClientInlineEntitySet) {
    navPropValue=ProxyUtils.getEntityCollectionProxy(service,collItemType,type,targetEntitySetURI,((ClientInlineEntitySet)link).getEntitySet(),targetEntitySetURI,false);
  }
 else {
    final URI targetURI=URIUtils.getURI(getEntityHandler().getEntityURI(),property.name());
    if (EntityCollection.class.isAssignableFrom(type)) {
      navPropValue=ProxyUtils.getEntityCollectionProxy(service,collItemType,type,targetEntitySetURI,null,targetURI,true);
    }
 else     if (AbstractEntitySet.class.isAssignableFrom(type)) {
      navPropValue=ProxyUtils.getEntitySetProxy(service,type,targetURI);
    }
 else {
      final EntityUUID uuid=new EntityUUID(targetEntitySetURI,collItemType,null);
      LOG.debug(""String_Node_Str"",collItemType.getSimpleName(),null);
      EntityInvocationHandler handler=getContext().entityContext().getEntity(uuid);
      if (handler == null) {
        final ClientEntity entity=getClient().getObjectFactory().newEntity(new FullQualifiedName(collItemType.getAnnotation(Namespace.class).value(),ClassUtils.getEntityTypeName(collItemType)));
        handler=EntityInvocationHandler.getInstance(entity,URIUtils.getURI(this.uri.build(),property.name()),targetEntitySetURI,collItemType,service);
      }
 else       if (getContext().entityContext().getStatus(handler) == AttachedEntityStatus.DELETED) {
        LOG.debug(""String_Node_Str"",collItemType.getSimpleName(),uuid);
        handler=null;
      }
      navPropValue=handler == null ? null : Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{collItemType},handler);
    }
  }
  return navPropValue;
}","protected Object retrieveNavigationProperty(final NavigationProperty property,final Method getter){
  final Class<?> type=getter.getReturnType();
  final Class<?> collItemType;
  if (EntityCollection.class.isAssignableFrom(type)) {
    collItemType=ClassUtils.extractTypeArg(type,EntityCollection.class,ComplexCollection.class);
  }
 else {
    collItemType=type;
  }
  final Object navPropValue;
  URI targetEntitySetURI=CoreUtils.getTargetEntitySetURI(getClient(),property);
  final ClientLink link=((ClientLinked)internal).getNavigationLink(property.name());
  if (link instanceof ClientInlineEntity) {
    navPropValue=ProxyUtils.getEntityProxy(service,((ClientInlineEntity)link).getEntity(),targetEntitySetURI,type,null,false);
  }
 else   if (link instanceof ClientInlineEntitySet) {
    if (AbstractEntitySet.class.isAssignableFrom(type)) {
      navPropValue=ProxyUtils.getEntitySetProxy(service,type,((ClientInlineEntitySet)link).getEntitySet(),targetEntitySetURI,false);
    }
 else {
      navPropValue=ProxyUtils.getEntityCollectionProxy(service,collItemType,type,targetEntitySetURI,((ClientInlineEntitySet)link).getEntitySet(),targetEntitySetURI,false);
    }
  }
 else {
    final URI targetURI=URIUtils.getURI(getEntityHandler().getEntityURI(),property.name());
    if (EntityCollection.class.isAssignableFrom(type)) {
      navPropValue=ProxyUtils.getEntityCollectionProxy(service,collItemType,type,targetEntitySetURI,null,targetURI,true);
    }
 else     if (AbstractEntitySet.class.isAssignableFrom(type)) {
      navPropValue=ProxyUtils.getEntitySetProxy(service,type,targetURI);
    }
 else {
      final EntityUUID uuid=new EntityUUID(targetEntitySetURI,collItemType,null);
      LOG.debug(""String_Node_Str"",collItemType.getSimpleName(),null);
      EntityInvocationHandler handler=getContext().entityContext().getEntity(uuid);
      if (handler == null) {
        final ClientEntity entity=getClient().getObjectFactory().newEntity(new FullQualifiedName(collItemType.getAnnotation(Namespace.class).value(),ClassUtils.getEntityTypeName(collItemType)));
        handler=EntityInvocationHandler.getInstance(entity,URIUtils.getURI(this.uri.build(),property.name()),targetEntitySetURI,collItemType,service);
      }
 else       if (getContext().entityContext().getStatus(handler) == AttachedEntityStatus.DELETED) {
        LOG.debug(""String_Node_Str"",collItemType.getSimpleName(),uuid);
        handler=null;
      }
      navPropValue=handler == null ? null : Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{collItemType},handler);
    }
  }
  return navPropValue;
}",0.957628804455938
33144,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static Object getEntityCollectionProxy(final AbstractService<?> service,final Class<?> typeRef,final Class<?> typeCollectionRef,final URI targetEntitySetURI,final ClientEntitySet entitySet,final URI uri,final boolean checkInTheContext){
  final List<Object> items=new ArrayList<Object>();
  if (entitySet != null) {
    for (    ClientEntity entityFromSet : entitySet.getEntities()) {
      items.add(getEntityProxy(service,entityFromSet,uri,typeRef,null,checkInTheContext));
    }
  }
  return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{typeCollectionRef},new EntityCollectionInvocationHandler(service,items,typeCollectionRef,targetEntitySetURI,uri == null ? null : service.getClient().newURIBuilder(uri.toASCIIString())));
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static Object getEntityCollectionProxy(final AbstractService<?> service,final Class<?> typeRef,final Class<?> typeCollectionRef,final URI targetEntitySetURI,final ClientEntitySet entitySet,final URI uri,final boolean checkInTheContext){
  final List<Object> items=extractItems(service,typeRef,entitySet,uri,checkInTheContext);
  return Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),new Class<?>[]{typeCollectionRef},new EntityCollectionInvocationHandler(service,items,typeCollectionRef,targetEntitySetURI,uri == null ? null : service.getClient().newURIBuilder(uri.toASCIIString())));
}",0.8518272425249169
33145,"@Test public void readMetadataWithAnnotations(){
  EdmMetadataRequest request=getClient().getRetrieveRequestFactory().getMetadataRequest(SERVICE_URI);
  assertNotNull(request);
  setCookieHeader(request);
  ODataRetrieveResponse<Edm> response=request.execute();
  saveCookieHeader(response);
  assertEquals(HttpStatusCode.OK.getStatusCode(),response.getStatusCode());
  Edm edm=response.getBody();
  assertNotNull(edm);
  EdmEntitySet entitySet=edm.getEntityContainer().getEntitySet(""String_Node_Str"");
  List<EdmAnnotation> annotations=entitySet.getAnnotations();
  assertNotNull(annotations);
  assertTrue(annotations.size() > 1);
  EdmAnnotation annotation=entitySet.getAnnotation(edm.getTerm(new FullQualifiedName(""String_Node_Str"",""String_Node_Str"")),null);
  assertNotNull(annotation);
}","@Test public void readMetadataWithAnnotations(){
  EdmMetadataRequest request=getClient().getRetrieveRequestFactory().getMetadataRequest(SERVICE_URI);
  assertNotNull(request);
  setCookieHeader(request);
  ODataRetrieveResponse<Edm> response=request.execute();
  saveCookieHeader(response);
  assertEquals(HttpStatusCode.OK.getStatusCode(),response.getStatusCode());
  Edm edm=response.getBody();
  assertNotNull(edm);
  EdmEntitySet entitySet=edm.getEntityContainer().getEntitySet(""String_Node_Str"");
  List<EdmAnnotation> annotations=entitySet.getAnnotations();
  assertNotNull(annotations);
  assertTrue(annotations.size() > 1);
  EdmAnnotation annotation=entitySet.getAnnotation(edm.getTerm(new FullQualifiedName(""String_Node_Str"",""String_Node_Str"")),null);
  assertNotNull(annotation);
  EdmActionImport actionImport=edm.getEntityContainer().getActionImport(""String_Node_Str"");
  annotations=actionImport.getAnnotations();
  assertNotNull(annotations);
  assertTrue(annotations.size() > 1);
  annotation=entitySet.getAnnotation(edm.getTerm(new FullQualifiedName(""String_Node_Str"",""String_Node_Str"")),null);
  assertNotNull(annotation);
}",0.8192148760330579
33146,"private void appendActionImports(final XMLStreamWriter writer,final List<EdmActionImport> actionImports) throws XMLStreamException {
  for (  EdmActionImport actionImport : actionImports) {
    writer.writeStartElement(XML_ACTION_IMPORT);
    writer.writeAttribute(XML_NAME,actionImport.getName());
    writer.writeAttribute(XML_ACTION,getAliasedFullQualifiedName(actionImport.getUnboundAction(),false));
    writer.writeEndElement();
    appendAnnotations(writer,actionImport);
  }
}","private void appendActionImports(final XMLStreamWriter writer,final List<EdmActionImport> actionImports) throws XMLStreamException {
  for (  EdmActionImport actionImport : actionImports) {
    writer.writeStartElement(XML_ACTION_IMPORT);
    writer.writeAttribute(XML_NAME,actionImport.getName());
    writer.writeAttribute(XML_ACTION,getAliasedFullQualifiedName(actionImport.getUnboundAction(),false));
    appendAnnotations(writer,actionImport);
    writer.writeEndElement();
  }
}",0.8760330578512396
33147,"public CsdlActionImport getActionImport(final FullQualifiedName entityContainer,final String name) throws ODataException {
  if (entityContainer.equals(nameContainer)) {
    if (name.equals(AIRT_STRING)) {
      return new CsdlActionImport().setName(AIRT_STRING).setAction(ActionProvider.nameUARTString);
    }
 else     if (name.equals(AIRT_COLL_STRING_TWO_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_STRING_TWO_PARAM).setAction(ActionProvider.nameUARTCollStringTwoParam);
    }
 else     if (name.equals(AIRTCT_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTCT_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTCTTwoPrimParam);
    }
 else     if (name.equals(AIRT_COLL_CT_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_CT_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTCollCTTwoPrimParam);
    }
 else     if (name.equals(AIRTET_TWO_KEY_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTET_TWO_KEY_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTETTwoKeyTwoPrimParam);
    }
 else     if (name.equals(AIRT_COLL_ET_KEY_NAV_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_ET_KEY_NAV_PARAM).setAction(ActionProvider.nameUARTCollETKeyNavParam);
    }
 else     if (name.equals(AIRTES_ALL_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTES_ALL_PRIM_PARAM).setEntitySet(""String_Node_Str"").setAction(ActionProvider.nameUARTETAllPrimParam);
    }
 else     if (name.equals(AIRT_COLL_ES_ALL_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_ES_ALL_PRIM_PARAM).setEntitySet(""String_Node_Str"").setAction(ActionProvider.nameUARTCollETAllPrimParam);
    }
 else     if (name.equals(AIRT)) {
      return new CsdlActionImport().setName(AIRT).setAction(ActionProvider.nameUART);
    }
 else     if (name.equals(AIRT_PARAM)) {
      return new CsdlActionImport().setName(AIRT_PARAM).setAction(ActionProvider.nameUARTParam);
    }
 else     if (name.equals(AIRT_TWO_PARAM)) {
      return new CsdlActionImport().setName(AIRT_TWO_PARAM).setAction(ActionProvider.nameUARTTwoParam);
    }
 else     if (name.equals(AIRT_BYTE_NINE_PARAM)) {
      return new CsdlActionImport().setName(AIRT_BYTE_NINE_PARAM).setAction(ActionProvider.nameUARTByteNineParam);
    }
  }
  return null;
}","public CsdlActionImport getActionImport(final FullQualifiedName entityContainer,final String name) throws ODataException {
  if (entityContainer.equals(nameContainer)) {
    if (name.equals(AIRT_STRING)) {
      return new CsdlActionImport().setName(AIRT_STRING).setAction(ActionProvider.nameUARTString).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String,""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(AIRT_COLL_STRING_TWO_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_STRING_TWO_PARAM).setAction(ActionProvider.nameUARTCollStringTwoParam);
    }
 else     if (name.equals(AIRTCT_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTCT_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTCTTwoPrimParam);
    }
 else     if (name.equals(AIRT_COLL_CT_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_CT_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTCollCTTwoPrimParam);
    }
 else     if (name.equals(AIRTET_TWO_KEY_TWO_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTET_TWO_KEY_TWO_PRIM_PARAM).setAction(ActionProvider.nameUARTETTwoKeyTwoPrimParam);
    }
 else     if (name.equals(AIRT_COLL_ET_KEY_NAV_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_ET_KEY_NAV_PARAM).setAction(ActionProvider.nameUARTCollETKeyNavParam);
    }
 else     if (name.equals(AIRTES_ALL_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRTES_ALL_PRIM_PARAM).setEntitySet(""String_Node_Str"").setAction(ActionProvider.nameUARTETAllPrimParam);
    }
 else     if (name.equals(AIRT_COLL_ES_ALL_PRIM_PARAM)) {
      return new CsdlActionImport().setName(AIRT_COLL_ES_ALL_PRIM_PARAM).setEntitySet(""String_Node_Str"").setAction(ActionProvider.nameUARTCollETAllPrimParam);
    }
 else     if (name.equals(AIRT)) {
      return new CsdlActionImport().setName(AIRT).setAction(ActionProvider.nameUART);
    }
 else     if (name.equals(AIRT_PARAM)) {
      return new CsdlActionImport().setName(AIRT_PARAM).setAction(ActionProvider.nameUARTParam);
    }
 else     if (name.equals(AIRT_TWO_PARAM)) {
      return new CsdlActionImport().setName(AIRT_TWO_PARAM).setAction(ActionProvider.nameUARTTwoParam);
    }
 else     if (name.equals(AIRT_BYTE_NINE_PARAM)) {
      return new CsdlActionImport().setName(AIRT_BYTE_NINE_PARAM).setAction(ActionProvider.nameUARTByteNineParam);
    }
  }
  return null;
}",0.9219971927010226
33148,"private void initSchemas(){
  loadAliasToNamespaceInfo();
  Map<String,EdmSchema> localSchemas=createSchemas();
  schemas=Collections.synchronizedMap(localSchemas);
  if (schemas == null) {
    schemas=Collections.emptyMap();
  }
  schemaList=Collections.unmodifiableList(new ArrayList<EdmSchema>(schemas.values()));
}","private void initSchemas(){
  loadAliasToNamespaceInfo();
  Map<String,EdmSchema> localSchemas=createSchemas();
  schemas=Collections.synchronizedMap(localSchemas);
  schemaList=Collections.unmodifiableList(new ArrayList<EdmSchema>(schemas.values()));
}",0.851138353765324
33149,"/** 
 * Set the callback which is used in case of an exception during write of the content.
 * @param ODataContentWriteErrorCallback the callback
 * @return the builder
 */
public Builder writeContentErrorCallback(ODataContentWriteErrorCallback ODataContentWriteErrorCallback){
  options.ODataContentWriteErrorCallback=ODataContentWriteErrorCallback;
  return this;
}","/** 
 * Set the callback which is used in case of an exception during write of the content.
 * @param ODataContentWriteErrorCallback the callback
 * @return the builder
 */
public Builder writeContentErrorCallback(ODataContentWriteErrorCallback ODataContentWriteErrorCallback){
  options.odataContentWriteErrorCallback=ODataContentWriteErrorCallback;
  return this;
}",0.994550408719346
33150,"/** 
 * Gets the callback which is used in case of an exception during write of the content (in case the content will be written/streamed in the future)
 * @return callback which is used in case of an exception duringwrite of the content
 */
public ODataContentWriteErrorCallback getODataContentWriteErrorCallback(){
  return ODataContentWriteErrorCallback;
}","/** 
 * Gets the callback which is used in case of an exception during write of the content (in case the content will be written/streamed in the future)
 * @return callback which is used in case of an exception duringwrite of the content
 */
public ODataContentWriteErrorCallback getODataContentWriteErrorCallback(){
  return odataContentWriteErrorCallback;
}",0.9944289693593314
33151,"private ContentType getSupportedContentType(final String contentTypeHeader,final RepresentationType representationType,final boolean mustNotBeNull) throws ODataHandlerException, ContentNegotiatorException {
  if (contentTypeHeader == null) {
    if (mustNotBeNull) {
      throw new ODataHandlerException(contentTypeHeader,ODataHandlerException.MessageKeys.MISSING_CONTENT_TYPE);
    }
    return null;
  }
  ContentType contentType;
  try {
    contentType=ContentType.create(contentTypeHeader);
  }
 catch (  final IllegalArgumentException e) {
    throw new ODataHandlerException(""String_Node_Str"",e,ODataHandlerException.MessageKeys.INVALID_CONTENT_TYPE,contentTypeHeader);
  }
  ContentNegotiator.checkSupport(contentType,handler.getCustomContentTypeSupport(),representationType);
  return contentType;
}","private ContentType getSupportedContentType(final String contentTypeHeader,final RepresentationType representationType,final boolean mustNotBeNull) throws ODataHandlerException, ContentNegotiatorException {
  if (contentTypeHeader == null) {
    if (mustNotBeNull) {
      throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.MISSING_CONTENT_TYPE);
    }
    return null;
  }
  ContentType contentType;
  try {
    contentType=ContentType.create(contentTypeHeader);
  }
 catch (  final IllegalArgumentException e) {
    throw new ODataHandlerException(""String_Node_Str"",e,ODataHandlerException.MessageKeys.INVALID_CONTENT_TYPE,contentTypeHeader);
  }
  ContentNegotiator.checkSupport(contentType,handler.getCustomContentTypeSupport(),representationType);
  return contentType;
}",0.9789864029666254
33152,"/** 
 * Extract format option from either <code>uriInfo</code> (if not <code>NULL</code>) or query from <code>request</code> (if not <code>NULL</code>). If both options are <code>NULL</code>, <code>NULL</code> is returned.
 * @param request request which is checked
 * @param uriInfo uriInfo which is checked
 * @return the evaluated format option or <code>NULL</code>.
 */
private FormatOption getFormatOption(final ODataRequest request,final UriInfo uriInfo){
  if (uriInfo == null) {
    String query=request.getRawQueryPath();
    if (query == null) {
      return null;
    }
    final String formatOption=SystemQueryOptionKind.FORMAT.toString();
    int index=query.indexOf(formatOption);
    int endIndex=query.indexOf(""String_Node_Str"",index);
    if (endIndex == -1) {
      endIndex=query.length();
    }
    final String format=query.substring(index + formatOption.length(),endIndex);
    return new FormatOptionImpl().setFormat(format);
  }
  return uriInfo.getFormatOption();
}","/** 
 * Extract format option from either <code>uriInfo</code> (if not <code>NULL</code>) or query from <code>request</code> (if not <code>NULL</code>). If both options are <code>NULL</code>, <code>NULL</code> is returned.
 * @param request request which is checked
 * @param uriInfo uriInfo which is checked
 * @return the evaluated format option or <code>NULL</code>.
 */
private FormatOption getFormatOption(final ODataRequest request,final UriInfo uriInfo){
  if (uriInfo == null) {
    String query=request.getRawQueryPath();
    if (query == null) {
      return null;
    }
    final String formatOption=SystemQueryOptionKind.FORMAT.toString();
    int index=query.indexOf(formatOption);
    int endIndex=query.indexOf('&',index);
    if (endIndex == -1) {
      endIndex=query.length();
    }
    final String format=query.substring(index + formatOption.length(),endIndex);
    return new FormatOptionImpl().setFormat(format);
  }
  return uriInfo.getFormatOption();
}",0.989827060020346
33153,"protected static void appendJsonTable(final JsonGenerator gen,final Map<String,String> entries) throws IOException {
  if (entries == null || entries.isEmpty()) {
    gen.writeNull();
  }
 else {
    gen.writeStartObject();
    for (    final String name : entries.keySet()) {
      gen.writeFieldName(name);
      if (entries.get(name) == null) {
        gen.writeNull();
      }
 else {
        gen.writeString(entries.get(name));
      }
    }
    gen.writeEndObject();
  }
}","protected static void appendJsonTable(final JsonGenerator gen,final Map<String,String> entries) throws IOException {
  if (entries == null || entries.isEmpty()) {
    gen.writeNull();
  }
 else {
    gen.writeStartObject();
    for (    final Map.Entry<String,String> entry : entries.entrySet()) {
      gen.writeFieldName(entry.getKey());
      if (entry.getValue() == null) {
        gen.writeNull();
      }
 else {
        gen.writeString(entry.getValue());
      }
    }
    gen.writeEndObject();
  }
}",0.8873096446700508
33154,"@Override public ODataResponse createDebugResponse(final DebugInformation debugInfo){
  try {
    final List<DebugTab> parts=createParts(debugInfo);
    ODataResponse response=new ODataResponse();
    String contentTypeString;
    InputStream body;
switch (requestedFormat) {
case DOWNLOAD:
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + new Date().toString().replace(' ','_').replace(':','.') + ""String_Node_Str"");
case HTML:
    String title=debugInfo.getRequest() == null ? ""String_Node_Str"" : ""String_Node_Str"" + debugInfo.getRequest().getRawODataPath();
  body=wrapInHtml(parts,title);
contentTypeString=ContentType.TEXT_HTML.toContentTypeString();
break;
case JSON:
default :
body=wrapInJson(parts);
contentTypeString=ContentType.APPLICATION_JSON.toContentTypeString();
break;
}
response.setStatusCode(HttpStatusCode.OK.getStatusCode());
response.setHeader(HttpHeader.CONTENT_TYPE,contentTypeString);
response.setContent(body);
return response;
}
 catch (IOException e) {
throw new ODataRuntimeException(e);
}
}","@Override public ODataResponse createDebugResponse(final DebugInformation debugInfo){
  try {
    final List<DebugTab> parts=createParts(debugInfo);
    ODataResponse response=new ODataResponse();
    final String contentTypeString;
    final InputStream body;
    if (requestedFormat == DebugFormat.DOWNLOAD || requestedFormat == DebugFormat.HTML) {
      String title=debugInfo.getRequest() == null ? ""String_Node_Str"" : ""String_Node_Str"" + debugInfo.getRequest().getRawODataPath();
      body=wrapInHtml(parts,title);
      contentTypeString=ContentType.TEXT_HTML.toContentTypeString();
    }
 else {
      body=wrapInJson(parts);
      contentTypeString=ContentType.APPLICATION_JSON.toContentTypeString();
    }
    if (requestedFormat == DebugFormat.DOWNLOAD) {
      response.setHeader(""String_Node_Str"",""String_Node_Str"" + new Date().toString().replace(' ','_').replace(':','.') + ""String_Node_Str"");
    }
    response.setStatusCode(HttpStatusCode.OK.getStatusCode());
    response.setHeader(HttpHeader.CONTENT_TYPE,contentTypeString);
    response.setContent(body);
    return response;
  }
 catch (  IOException e) {
    throw new ODataRuntimeException(e);
  }
}",0.5841269841269842
33155,"protected static void appendHtmlTable(final Writer writer,final Map<String,String> entries) throws IOException {
  writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (entries != null && !entries.isEmpty()) {
    for (    final String name : entries.keySet()) {
      writer.append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(""String_Node_Str"").append(escapeHtml(entries.get(name))).append(""String_Node_Str"");
    }
  }
  writer.append(""String_Node_Str"");
}","protected static void appendHtmlTable(final Writer writer,final Map<String,String> entries) throws IOException {
  writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  if (entries != null && !entries.isEmpty()) {
    for (    final Map.Entry<String,String> entry : entries.entrySet()) {
      writer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(""String_Node_Str"").append(escapeHtml(entry.getValue())).append(""String_Node_Str"");
    }
  }
  writer.append(""String_Node_Str"");
}",0.5733082706766918
33156,"private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  IOException cachedException=null;
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new ObjectMapper().getFactory().createGenerator(outputStream);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
  finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
}","private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new ObjectMapper().getFactory().createGenerator(outputStream);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
  finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        throw e;
      }
    }
  }
}",0.0879811468970934
33157,"private String getSelectString(final SelectItem selectItem){
  String selectedProperty=""String_Node_Str"";
  if (selectItem.isStar()) {
    if (selectItem.getAllOperationsInSchemaNameSpace() == null) {
      selectedProperty=""String_Node_Str"";
    }
 else {
      selectedProperty=selectItem.getAllOperationsInSchemaNameSpace().getFullQualifiedNameAsString() + ""String_Node_Str"";
    }
  }
 else {
    boolean first=true;
    for (    UriResource resourcePart : selectItem.getResourcePath().getUriResourceParts()) {
      if (!first) {
        selectedProperty+='/';
      }
      selectedProperty+=resourcePart.toString();
      first=false;
    }
  }
  return selectedProperty;
}","private String getSelectString(final SelectItem selectItem){
  if (selectItem.isStar()) {
    if (selectItem.getAllOperationsInSchemaNameSpace() == null) {
      return ""String_Node_Str"";
    }
 else {
      return selectItem.getAllOperationsInSchemaNameSpace().getFullQualifiedNameAsString() + ""String_Node_Str"";
    }
  }
 else {
    final StringBuilder tmp=new StringBuilder();
    for (    UriResource resourcePart : selectItem.getResourcePath().getUriResourceParts()) {
      if (tmp.length() > 0) {
        tmp.append('/');
      }
      tmp.append(resourcePart.toString());
    }
    return tmp.toString();
  }
}",0.2555812163202463
33158,"public Body(final ODataResponse response){
  content=getBody(response);
}","Body(final ODataResponse response){
  content=getBody(response);
}",0.9496402877697842
33159,"private QueryOption parseOption(final String optionName,final String optionValue) throws UriParserException, UriValidationException {
  if (optionName.startsWith(DOLLAR)) {
    final SystemQueryOptionKind kind=SystemQueryOptionKind.get(optionName);
    if (kind == null) {
      throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.UNKNOWN_SYSTEM_QUERY_OPTION,optionName);
    }
    SystemQueryOption systemOption=null;
switch (kind) {
case SEARCH:
      systemOption=new SearchParser().parse(optionValue);
    break;
case FILTER:
  systemOption=new FilterOptionImpl();
break;
case COUNT:
if (optionValue.equals(""String_Node_Str"") || optionValue.equals(""String_Node_Str"")) {
systemOption=new CountOptionImpl().setValue(Boolean.parseBoolean(optionValue));
}
 else {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
break;
case ORDERBY:
systemOption=new OrderByOptionImpl();
break;
case SKIP:
systemOption=new SkipOptionImpl().setValue(ParserHelper.parseNonNegativeInteger(optionName,optionValue,true));
break;
case SKIPTOKEN:
if (optionValue.isEmpty()) {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
systemOption=new SkipTokenOptionImpl().setValue(optionValue);
break;
case TOP:
systemOption=new TopOptionImpl().setValue(ParserHelper.parseNonNegativeInteger(optionName,optionValue,true));
break;
case EXPAND:
systemOption=new ExpandOptionImpl();
break;
case SELECT:
systemOption=new SelectOptionImpl();
break;
case FORMAT:
if (optionValue.equalsIgnoreCase(JSON) || optionValue.equalsIgnoreCase(XML) || optionValue.equalsIgnoreCase(ATOM)|| isFormatSyntaxValid(optionValue)) {
systemOption=new FormatOptionImpl().setFormat(optionValue);
}
 else {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION_FORMAT,optionValue);
}
break;
case ID:
if (optionValue.isEmpty()) {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
systemOption=new IdOptionImpl().setValue(optionValue);
break;
case LEVELS:
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYSTEM_QUERY_OPTION_LEVELS_NOT_ALLOWED_HERE);
}
((SystemQueryOptionImpl)systemOption).setText(optionValue);
return systemOption;
}
 else if (optionName.startsWith(AT)) {
return new AliasQueryOptionImpl().setName(optionName).setText(NULL.equals(optionValue) ? null : optionValue);
}
 else {
return null;
}
}","private QueryOption parseOption(final String optionName,final String optionValue) throws UriParserException, UriValidationException {
  if (optionName.startsWith(DOLLAR)) {
    final SystemQueryOptionKind kind=SystemQueryOptionKind.get(optionName);
    if (kind == null) {
      throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.UNKNOWN_SYSTEM_QUERY_OPTION,optionName);
    }
    final SystemQueryOptionImpl systemOption;
switch (kind) {
case SEARCH:
      SearchOption searchOption=new SearchParser().parse(optionValue);
    SearchOptionImpl tmp=new SearchOptionImpl();
  tmp.setSearchExpression(searchOption.getSearchExpression());
systemOption=tmp;
break;
case FILTER:
systemOption=new FilterOptionImpl();
break;
case COUNT:
if (optionValue.equals(""String_Node_Str"") || optionValue.equals(""String_Node_Str"")) {
systemOption=new CountOptionImpl().setValue(Boolean.parseBoolean(optionValue));
}
 else {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
break;
case ORDERBY:
systemOption=new OrderByOptionImpl();
break;
case SKIP:
systemOption=new SkipOptionImpl().setValue(ParserHelper.parseNonNegativeInteger(optionName,optionValue,true));
break;
case SKIPTOKEN:
if (optionValue.isEmpty()) {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
systemOption=new SkipTokenOptionImpl().setValue(optionValue);
break;
case TOP:
systemOption=new TopOptionImpl().setValue(ParserHelper.parseNonNegativeInteger(optionName,optionValue,true));
break;
case EXPAND:
systemOption=new ExpandOptionImpl();
break;
case SELECT:
systemOption=new SelectOptionImpl();
break;
case FORMAT:
if (optionValue.equalsIgnoreCase(JSON) || optionValue.equalsIgnoreCase(XML) || optionValue.equalsIgnoreCase(ATOM)|| isFormatSyntaxValid(optionValue)) {
systemOption=new FormatOptionImpl().setFormat(optionValue);
}
 else {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION_FORMAT,optionValue);
}
break;
case ID:
if (optionValue.isEmpty()) {
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,optionName,optionValue);
}
systemOption=new IdOptionImpl().setValue(optionValue);
break;
case LEVELS:
throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYSTEM_QUERY_OPTION_LEVELS_NOT_ALLOWED_HERE);
default :
throw new UriParserSyntaxException(""String_Node_Str"" + kind + ""String_Node_Str"",UriParserSyntaxException.MessageKeys.UNKNOWN_SYSTEM_QUERY_OPTION,optionName);
}
systemOption.setText(optionValue);
return systemOption;
}
 else if (optionName.startsWith(AT)) {
return new AliasQueryOptionImpl().setName(optionName).setText(NULL.equals(optionValue) ? null : optionValue);
}
 else {
return null;
}
}",0.9279831785526548
33160,"private static UriParameter simpleKey(UriTokenizer tokenizer,final EdmKeyPropertyRef edmKeyPropertyRef,final Edm edm,final EdmType referringType,final Map<String,AliasQueryOption> aliases) throws UriParserException, UriValidationException {
  final EdmProperty edmProperty=edmKeyPropertyRef == null ? null : edmKeyPropertyRef.getProperty();
  if (nextPrimitiveTypeValue(tokenizer,edmProperty == null ? null : (EdmPrimitiveType)edmProperty.getType(),edmProperty == null ? false : edmProperty.isNullable())) {
    final String literalValue=tokenizer.getText();
    ParserHelper.requireNext(tokenizer,TokenKind.CLOSE);
    return createUriParameter(edmProperty,edmKeyPropertyRef.getName(),literalValue,edm,referringType,aliases);
  }
 else {
    throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,edmKeyPropertyRef.getName());
  }
}","private static UriParameter simpleKey(UriTokenizer tokenizer,final EdmKeyPropertyRef edmKeyPropertyRef,final Edm edm,final EdmType referringType,final Map<String,AliasQueryOption> aliases) throws UriParserException, UriValidationException {
  final EdmProperty edmProperty=edmKeyPropertyRef == null ? null : edmKeyPropertyRef.getProperty();
  final EdmPrimitiveType primitiveType=edmProperty == null ? null : (EdmPrimitiveType)edmProperty.getType();
  final boolean nullable=edmProperty != null && edmProperty.isNullable();
  if (nextPrimitiveTypeValue(tokenizer,primitiveType,nullable)) {
    final String literalValue=tokenizer.getText();
    ParserHelper.requireNext(tokenizer,TokenKind.CLOSE);
    return createUriParameter(edmProperty,edmKeyPropertyRef.getName(),literalValue,edm,referringType,aliases);
  }
 else {
    String keyPropertyRefName=edmKeyPropertyRef == null ? ""String_Node_Str"" : edmKeyPropertyRef.getName();
    throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,keyPropertyRefName);
  }
}",0.7918367346938775
33161,"protected static List<UriParameter> parseFunctionParameters(UriTokenizer tokenizer,final Edm edm,final EdmType referringType,final boolean withComplex,final Map<String,AliasQueryOption> aliases) throws UriParserException, UriValidationException {
  List<UriParameter> parameters=new ArrayList<UriParameter>();
  ParserHelper.requireNext(tokenizer,TokenKind.OPEN);
  if (tokenizer.next(TokenKind.CLOSE)) {
    return parameters;
  }
  do {
    ParserHelper.requireNext(tokenizer,TokenKind.ODataIdentifier);
    final String name=tokenizer.getText();
    if (parameters.contains(name)) {
      throw new UriParserSemanticException(""String_Node_Str"" + name,UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,name);
    }
    ParserHelper.requireNext(tokenizer,TokenKind.EQ);
    if (tokenizer.next(TokenKind.COMMA) || tokenizer.next(TokenKind.CLOSE) || tokenizer.next(TokenKind.EOF)) {
      throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYNTAX);
    }
    UriParameterImpl parameter=new UriParameterImpl().setName(name);
    if (tokenizer.next(TokenKind.ParameterAliasName)) {
      final String aliasName=tokenizer.getText();
      parameter.setAlias(aliasName).setExpression(aliases.containsKey(aliasName) ? aliases.get(aliasName).getValue() : null);
    }
 else     if (tokenizer.next(TokenKind.jsonArrayOrObject)) {
      if (withComplex) {
        parameter.setText(tokenizer.getText());
      }
 else {
        throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.COMPLEX_PARAMETER_IN_RESOURCE_PATH,tokenizer.getText());
      }
    }
 else     if (withComplex) {
      final Expression expression=new ExpressionParser(edm,odata).parse(tokenizer,referringType,null,aliases);
      parameter.setText(expression instanceof Literal ? ""String_Node_Str"".equals(((Literal)expression).getText()) ? null : ((Literal)expression).getText() : null).setExpression(expression instanceof Literal ? null : expression);
    }
 else     if (nextPrimitiveValue(tokenizer) == null) {
      throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,""String_Node_Str"");
    }
 else {
      final String literalValue=tokenizer.getText();
      parameter.setText(""String_Node_Str"".equals(literalValue) ? null : literalValue);
    }
    parameters.add(parameter);
  }
 while (tokenizer.next(TokenKind.COMMA));
  ParserHelper.requireNext(tokenizer,TokenKind.CLOSE);
  return parameters;
}","protected static List<UriParameter> parseFunctionParameters(UriTokenizer tokenizer,final Edm edm,final EdmType referringType,final boolean withComplex,final Map<String,AliasQueryOption> aliases) throws UriParserException, UriValidationException {
  List<UriParameter> parameters=new ArrayList<UriParameter>();
  Set<String> parameterNames=new HashSet<String>();
  ParserHelper.requireNext(tokenizer,TokenKind.OPEN);
  if (tokenizer.next(TokenKind.CLOSE)) {
    return parameters;
  }
  do {
    ParserHelper.requireNext(tokenizer,TokenKind.ODataIdentifier);
    final String name=tokenizer.getText();
    if (parameterNames.contains(name)) {
      throw new UriParserSemanticException(""String_Node_Str"" + name,UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,name);
    }
    parameterNames.add(name);
    ParserHelper.requireNext(tokenizer,TokenKind.EQ);
    if (tokenizer.next(TokenKind.COMMA) || tokenizer.next(TokenKind.CLOSE) || tokenizer.next(TokenKind.EOF)) {
      throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYNTAX);
    }
    UriParameterImpl parameter=new UriParameterImpl().setName(name);
    if (tokenizer.next(TokenKind.ParameterAliasName)) {
      final String aliasName=tokenizer.getText();
      parameter.setAlias(aliasName).setExpression(aliases.containsKey(aliasName) ? aliases.get(aliasName).getValue() : null);
    }
 else     if (tokenizer.next(TokenKind.jsonArrayOrObject)) {
      if (withComplex) {
        parameter.setText(tokenizer.getText());
      }
 else {
        throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.COMPLEX_PARAMETER_IN_RESOURCE_PATH,tokenizer.getText());
      }
    }
 else     if (withComplex) {
      final Expression expression=new ExpressionParser(edm,odata).parse(tokenizer,referringType,null,aliases);
      parameter.setText(expression instanceof Literal ? ""String_Node_Str"".equals(((Literal)expression).getText()) ? null : ((Literal)expression).getText() : null).setExpression(expression instanceof Literal ? null : expression);
    }
 else     if (nextPrimitiveValue(tokenizer) == null) {
      throw new UriParserSemanticException(""String_Node_Str"",UriParserSemanticException.MessageKeys.INVALID_KEY_VALUE,""String_Node_Str"");
    }
 else {
      final String literalValue=tokenizer.getText();
      parameter.setText(""String_Node_Str"".equals(literalValue) ? null : literalValue);
    }
    parameters.add(parameter);
  }
 while (tokenizer.next(TokenKind.COMMA));
  ParserHelper.requireNext(tokenizer,TokenKind.CLOSE);
  return parameters;
}",0.9831702544031312
33162,"@Override public String toString(){
  return type == null ? null : type.getFullQualifiedName().getFullQualifiedNameAsString() + getValues();
}","@Override public String toString(){
  return type == null ? ""String_Node_Str"" : type.getFullQualifiedName().getFullQualifiedNameAsString() + getValues();
}",0.936026936026936
33163,"@Override public String toString(){
  return type == null ? null : type.getFullQualifiedName().getFullQualifiedNameAsString();
}","@Override public String toString(){
  return type == null ? ""String_Node_Str"" : type.getFullQualifiedName().getFullQualifiedNameAsString();
}",0.929368029739777
33164,"@Override public SerializerResult complexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writeComplexCollection(type,property,null,json);
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(IO_EXCEPTION_TEXT,e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}","@Override public SerializerResult complexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writeComplexCollection(metadata,type,property,null,json);
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(IO_EXCEPTION_TEXT,e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9961685823754788
33165,"protected void writeProperty(final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeFieldName(edmProperty.getName());
  if (property == null || property.isNull()) {
    if (edmProperty.isNullable() == Boolean.FALSE) {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.MISSING_PROPERTY,edmProperty.getName());
    }
 else {
      if (edmProperty.isCollection()) {
        json.writeStartArray();
        json.writeEndArray();
      }
 else {
        json.writeNull();
      }
    }
  }
 else {
    writePropertyValue(edmProperty,property,selectedPaths,json);
  }
}","protected void writeProperty(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeFieldName(edmProperty.getName());
  if (property == null || property.isNull()) {
    if (edmProperty.isNullable() == Boolean.FALSE) {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.MISSING_PROPERTY,edmProperty.getName());
    }
 else {
      if (edmProperty.isCollection()) {
        json.writeStartArray();
        json.writeEndArray();
      }
 else {
        json.writeNull();
      }
    }
  }
 else {
    writePropertyValue(metadata,edmProperty,property,selectedPaths,json);
  }
}",0.9728260869565216
33166,"protected void writeEntity(final ServiceMetadata metadata,final EdmEntityType entityType,final Entity entity,final ContextURL contextURL,final ExpandOption expand,final SelectOption select,final boolean onlyReference,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartObject();
  if (!isODataMetadataNone) {
    if (contextURL != null) {
      writeContextURL(contextURL,json);
      writeMetadataETag(metadata,json);
    }
    if (entity.getETag() != null) {
      json.writeStringField(Constants.JSON_ETAG,entity.getETag());
    }
    if (entityType.hasStream()) {
      if (entity.getMediaETag() != null) {
        json.writeStringField(Constants.JSON_MEDIA_ETAG,entity.getMediaETag());
      }
      if (entity.getMediaContentType() != null) {
        json.writeStringField(Constants.JSON_MEDIA_CONTENT_TYPE,entity.getMediaContentType());
      }
      if (entity.getMediaContentSource() != null) {
        json.writeStringField(Constants.JSON_MEDIA_READ_LINK,entity.getMediaContentSource().toString());
      }
      if (entity.getMediaEditLinks() != null && !entity.getMediaEditLinks().isEmpty()) {
        json.writeStringField(Constants.JSON_MEDIA_EDIT_LINK,entity.getMediaEditLinks().get(0).getHref());
      }
    }
  }
  if (onlyReference) {
    json.writeStringField(Constants.JSON_ID,entity.getId().toASCIIString());
  }
 else {
    final EdmEntityType resolvedType=resolveEntityType(metadata,entityType,entity.getType());
    if (!isODataMetadataNone && !resolvedType.equals(entityType)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + entity.getType());
    }
    writeProperties(resolvedType,entity.getProperties(),select,json);
    writeNavigationProperties(metadata,resolvedType,entity,expand,json);
    json.writeEndObject();
  }
}","protected void writeEntity(final ServiceMetadata metadata,final EdmEntityType entityType,final Entity entity,final ContextURL contextURL,final ExpandOption expand,final SelectOption select,final boolean onlyReference,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartObject();
  if (!isODataMetadataNone) {
    if (contextURL != null) {
      writeContextURL(contextURL,json);
      writeMetadataETag(metadata,json);
    }
    if (entity.getETag() != null) {
      json.writeStringField(Constants.JSON_ETAG,entity.getETag());
    }
    if (entityType.hasStream()) {
      if (entity.getMediaETag() != null) {
        json.writeStringField(Constants.JSON_MEDIA_ETAG,entity.getMediaETag());
      }
      if (entity.getMediaContentType() != null) {
        json.writeStringField(Constants.JSON_MEDIA_CONTENT_TYPE,entity.getMediaContentType());
      }
      if (entity.getMediaContentSource() != null) {
        json.writeStringField(Constants.JSON_MEDIA_READ_LINK,entity.getMediaContentSource().toString());
      }
      if (entity.getMediaEditLinks() != null && !entity.getMediaEditLinks().isEmpty()) {
        json.writeStringField(Constants.JSON_MEDIA_EDIT_LINK,entity.getMediaEditLinks().get(0).getHref());
      }
    }
  }
  if (onlyReference) {
    json.writeStringField(Constants.JSON_ID,entity.getId().toASCIIString());
  }
 else {
    final EdmEntityType resolvedType=resolveEntityType(metadata,entityType,entity.getType());
    if (!isODataMetadataNone && !resolvedType.equals(entityType)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + entity.getType());
    }
    writeProperties(metadata,resolvedType,entity.getProperties(),select,json);
    writeNavigationProperties(metadata,resolvedType,entity,expand,json);
    json.writeEndObject();
  }
}",0.9975144987572494
33167,"@Override public SerializerResult complex(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    final EdmComplexType resolvedType=resolveComplexType(metadata,type,property.getType());
    if (!isODataMetadataNone && !resolvedType.equals(type)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + property.getType());
    }
    final List<Property> values=property.isNull() ? Collections.<Property>emptyList() : property.asComplex().getValue();
    writeProperties(type,values,options == null ? null : options.getSelect(),json);
    if (!property.isNull() && property.isComplex()) {
      writeNavigationProperties(metadata,type,property.asComplex(),options == null ? null : options.getExpand(),json);
    }
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(IO_EXCEPTION_TEXT,e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}","@Override public SerializerResult complex(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    final EdmComplexType resolvedType=resolveComplexType(metadata,type,property.getType());
    if (!isODataMetadataNone && !resolvedType.equals(type)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + property.getType());
    }
    final List<Property> values=property.isNull() ? Collections.<Property>emptyList() : property.asComplex().getValue();
    writeProperties(metadata,type,values,options == null ? null : options.getSelect(),json);
    if (!property.isNull() && property.isComplex()) {
      writeNavigationProperties(metadata,type,property.asComplex(),options == null ? null : options.getExpand(),json);
    }
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(IO_EXCEPTION_TEXT,e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9973568281938326
33168,"protected void writeComplexValue(final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartObject();
  for (  final String propertyName : type.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty((EdmProperty)type.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),json);
    }
  }
  json.writeEndObject();
}","protected void writeComplexValue(final ServiceMetadata metadata,final Property complexProperty,final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartObject();
  final EdmComplexType resolvedType=resolveComplexType(metadata,type,complexProperty.getType());
  if (!isODataMetadataNone && !resolvedType.equals(type)) {
    json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + complexProperty.getType());
  }
  for (  final String propertyName : resolvedType.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty(metadata,(EdmProperty)resolvedType.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),json);
    }
  }
  json.writeEndObject();
}",0.7494033412887828
33169,"private void writeComplexCollection(final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartArray();
  for (  Object value : property.asCollection()) {
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(type,((ComplexValue)value).getValue(),selectedPaths,json);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
}
json.writeEndArray();
}","private void writeComplexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  json.writeStartArray();
  for (  Object value : property.asCollection()) {
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(metadata,property,type,((ComplexValue)value).getValue(),selectedPaths,json);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
}
json.writeEndArray();
}",0.9600651996740016
33170,"protected void writeProperties(final EdmStructuredType type,final List<Property> properties,final SelectOption select,final JsonGenerator json) throws IOException, SerializerException {
  final boolean all=ExpandSelectHelper.isAll(select);
  final Set<String> selected=all ? new HashSet<String>() : ExpandSelectHelper.getSelectedPropertyNames(select.getSelectItems());
  for (  final String propertyName : type.getPropertyNames()) {
    if (all || selected.contains(propertyName)) {
      final EdmProperty edmProperty=type.getStructuralProperty(propertyName);
      final Property property=findProperty(propertyName,properties);
      final Set<List<String>> selectedPaths=all || edmProperty.isPrimitive() ? null : ExpandSelectHelper.getSelectedPaths(select.getSelectItems(),propertyName);
      writeProperty(edmProperty,property,selectedPaths,json);
    }
  }
}","protected void writeProperties(final ServiceMetadata metadata,final EdmStructuredType type,final List<Property> properties,final SelectOption select,final JsonGenerator json) throws IOException, SerializerException {
  final boolean all=ExpandSelectHelper.isAll(select);
  final Set<String> selected=all ? new HashSet<String>() : ExpandSelectHelper.getSelectedPropertyNames(select.getSelectItems());
  for (  final String propertyName : type.getPropertyNames()) {
    if (all || selected.contains(propertyName)) {
      final EdmProperty edmProperty=type.getStructuralProperty(propertyName);
      final Property property=findProperty(propertyName,properties);
      final Set<List<String>> selectedPaths=all || edmProperty.isPrimitive() ? null : ExpandSelectHelper.getSelectedPaths(select.getSelectItems(),propertyName);
      writeProperty(metadata,edmProperty,property,selectedPaths,json);
    }
  }
}",0.9773755656108596
33171,"private void writePropertyValue(final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  final EdmType type=edmProperty.getType();
  try {
    if (edmProperty.isPrimitive() || type.getKind() == EdmTypeKind.ENUM || type.getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writePrimitiveCollection((EdmPrimitiveType)type,property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),json);
      }
 else {
        writePrimitive((EdmPrimitiveType)type,property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),json);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writeComplexCollection((EdmComplexType)type,property,selectedPaths,json);
      }
 else {
        writeComplexValue((EdmComplexType)type,property.asComplex().getValue(),selectedPaths,json);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}","private void writePropertyValue(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final JsonGenerator json) throws IOException, SerializerException {
  final EdmType type=edmProperty.getType();
  try {
    if (edmProperty.isPrimitive() || type.getKind() == EdmTypeKind.ENUM || type.getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writePrimitiveCollection((EdmPrimitiveType)type,property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),json);
      }
 else {
        writePrimitive((EdmPrimitiveType)type,property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),json);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writeComplexCollection(metadata,(EdmComplexType)type,property,selectedPaths,json);
      }
 else {
        writeComplexValue(metadata,property,(EdmComplexType)type,property.asComplex().getValue(),selectedPaths,json);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}",0.9807436918990704
33172,"protected void writeComplexValue(final ServiceMetadata metadata,final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  final String propertyName : type.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty(metadata,(EdmProperty)type.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),writer);
    }
  }
}","protected void writeComplexValue(final ServiceMetadata metadata,Property complexProperty,final EdmComplexType type,final List<Property> properties,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  final EdmComplexType resolvedType=resolveComplexType(metadata,type,complexProperty.getType());
  for (  final String propertyName : resolvedType.getPropertyNames()) {
    final Property property=findProperty(propertyName,properties);
    if (selectedPaths == null || ExpandSelectHelper.isSelected(selectedPaths,propertyName)) {
      writeProperty(metadata,(EdmProperty)resolvedType.getProperty(propertyName),property,selectedPaths == null ? null : ExpandSelectHelper.getReducedSelectedPaths(selectedPaths,propertyName),writer);
    }
  }
}",0.8534599728629579
33173,"private void writeComplexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  Object value : property.asCollection()) {
    writer.writeStartElement(METADATA,Constants.ELEM_ELEMENT,NS_METADATA);
    if (derivedComplexType(type,property.getType()) != null) {
      writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,property.getType());
    }
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(metadata,type,((ComplexValue)value).getValue(),selectedPaths,writer);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
writer.writeEndElement();
}
}","private void writeComplexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  for (  Object value : property.asCollection()) {
    writer.writeStartElement(METADATA,Constants.ELEM_ELEMENT,NS_METADATA);
    if (derivedComplexType(type,property.getType()) != null) {
      writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,property.getType());
    }
switch (property.getValueType()) {
case COLLECTION_COMPLEX:
      writeComplexValue(metadata,property,type,((ComplexValue)value).getValue(),selectedPaths,writer);
    break;
default :
  throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,property.getName());
}
writer.writeEndElement();
}
}",0.9947582993593476
33174,"private String derivedComplexType(final EdmComplexType baseType,final String definedType) throws SerializerException {
  String derived=baseType.getFullQualifiedName().getFullQualifiedNameAsString();
  if (derived.equals(definedType)) {
    return null;
  }
  return definedType;
}","private String derivedComplexType(final EdmComplexType baseType,final String definedType) throws SerializerException {
  String base=baseType.getFullQualifiedName().getFullQualifiedNameAsString();
  if (base.equals(definedType)) {
    return null;
  }
  return definedType;
}",0.960431654676259
33175,"private void writePropertyValue(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  try {
    if (edmProperty.isPrimitive() || edmProperty.getType().getKind() == EdmTypeKind.ENUM || edmProperty.getType().getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,edmProperty.isPrimitive() ? ""String_Node_Str"" + edmProperty.getType().getName() + ""String_Node_Str"" : collectionType(edmProperty.getType()));
        writePrimitiveCollection((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),writer);
      }
 else {
        writePrimitive((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),writer);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,collectionType(edmProperty.getType()));
        writeComplexCollection(metadata,(EdmComplexType)edmProperty.getType(),property,selectedPaths,writer);
      }
 else {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,""String_Node_Str"" + complexType(metadata,(EdmComplexType)edmProperty.getType(),property.getType()));
        writeComplexValue(metadata,(EdmComplexType)edmProperty.getType(),property.asComplex().getValue(),selectedPaths,writer);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}","private void writePropertyValue(final ServiceMetadata metadata,final EdmProperty edmProperty,final Property property,final Set<List<String>> selectedPaths,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  try {
    if (edmProperty.isPrimitive() || edmProperty.getType().getKind() == EdmTypeKind.ENUM || edmProperty.getType().getKind() == EdmTypeKind.DEFINITION) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,edmProperty.isPrimitive() ? ""String_Node_Str"" + edmProperty.getType().getName() + ""String_Node_Str"" : collectionType(edmProperty.getType()));
        writePrimitiveCollection((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),writer);
      }
 else {
        writePrimitive((EdmPrimitiveType)edmProperty.getType(),property,edmProperty.isNullable(),edmProperty.getMaxLength(),edmProperty.getPrecision(),edmProperty.getScale(),edmProperty.isUnicode(),writer);
      }
    }
 else     if (property.isComplex()) {
      if (edmProperty.isCollection()) {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,collectionType(edmProperty.getType()));
        writeComplexCollection(metadata,(EdmComplexType)edmProperty.getType(),property,selectedPaths,writer);
      }
 else {
        writer.writeAttribute(METADATA,NS_METADATA,Constants.ATTR_TYPE,""String_Node_Str"" + complexType(metadata,(EdmComplexType)edmProperty.getType(),property.getType()));
        writeComplexValue(metadata,property,(EdmComplexType)edmProperty.getType(),property.asComplex().getValue(),selectedPaths,writer);
      }
    }
 else {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.UNSUPPORTED_PROPERTY_TYPE,edmProperty.getName());
    }
  }
 catch (  final EdmPrimitiveTypeException e) {
    throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,edmProperty.getName(),property.getValue().toString());
  }
}",0.9978607083432376
33176,"private EntityCollection createESCompComp(final Edm edm,final OData odata){
  EntityCollection entityCollection=new EntityCollection();
  Entity entity=new Entity();
  entity.addProperty(createPrimitive(""String_Node_Str"",(short)1));
  entity.addProperty(createComplex(""String_Node_Str"",createComplex(""String_Node_Str"",createPrimitive(""String_Node_Str"",(short)123),createPrimitive(""String_Node_Str"",""String_Node_Str""))));
  entityCollection.getEntities().add(entity);
  entity=new Entity();
  entity.addProperty(createPrimitive(""String_Node_Str"",(short)2));
  entity.addProperty(createComplex(""String_Node_Str"",createComplex(""String_Node_Str"",createPrimitive(""String_Node_Str"",(short)987),createPrimitive(""String_Node_Str"",""String_Node_Str""))));
  entityCollection.getEntities().add(entity);
  setEntityType(entityCollection,edm.getEntityType(EntityTypeProvider.nameETCompComp));
  createEntityId(edm,odata,""String_Node_Str"",entityCollection);
  return entityCollection;
}","private EntityCollection createESCompComp(final Edm edm,final OData odata){
  EntityCollection entityCollection=new EntityCollection();
  Entity entity=new Entity();
  entity.addProperty(createPrimitive(""String_Node_Str"",(short)1));
  entity.addProperty(createComplex(""String_Node_Str"",createComplex(""String_Node_Str"",createPrimitive(""String_Node_Str"",(short)123),createPrimitive(""String_Node_Str"",""String_Node_Str""))));
  entityCollection.getEntities().add(entity);
  entity=new Entity();
  entity.addProperty(createPrimitive(""String_Node_Str"",(short)2));
  entity.addProperty(createComplex(""String_Node_Str"",ComplexTypeProvider.nameCTCompCompExtended.getFullQualifiedNameAsString(),createComplex(""String_Node_Str"",createPrimitive(""String_Node_Str"",(short)987),createPrimitive(""String_Node_Str"",""String_Node_Str"")),createPrimitive(""String_Node_Str"",getDateTime(2012,12,3,0,0,0))));
  entityCollection.getEntities().add(entity);
  setEntityType(entityCollection,edm.getEntityType(EntityTypeProvider.nameETCompComp));
  createEntityId(edm,odata,""String_Node_Str"",entityCollection);
  return entityCollection;
}",0.9336538461538462
33177,"protected static Property createComplex(final String name,final Property... properties){
  ComplexValue complexValue=new ComplexValue();
  for (  final Property property : properties) {
    complexValue.getValue().add(property);
  }
  return new Property(null,name,ValueType.COMPLEX,complexValue);
}","protected static Property createComplex(final String name,final String type,final Property... properties){
  ComplexValue complexValue=new ComplexValue();
  for (  final Property property : properties) {
    complexValue.getValue().add(property);
  }
  return new Property(type,name,ValueType.COMPLEX,complexValue);
}",0.9577922077922078
33178,"public CsdlComplexType getComplexType(final FullQualifiedName complexTypeName) throws ODataException {
  if (complexTypeName.equals(nameCTPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16));
  }
 else   if (complexTypeName.equals(nameCTAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyBinary,PropertyProvider.propertyBoolean,PropertyProvider.propertyByte,PropertyProvider.propertyDate,PropertyProvider.propertyDateTimeOffset_Precision,PropertyProvider.propertyDecimal_Scale_Precision,PropertyProvider.propertySingle,PropertyProvider.propertyDouble,PropertyProvider.propertyDuration,PropertyProvider.propertyGuid,PropertyProvider.propertyInt16,PropertyProvider.propertyInt32,PropertyProvider.propertyInt64,PropertyProvider.propertySByte,PropertyProvider.propertyTimeOfDay_Precision));
  }
 else   if (complexTypeName.equals(nameCTCollAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyString,PropertyProvider.collPropertyBoolean,PropertyProvider.collPropertyByte,PropertyProvider.collPropertySByte,PropertyProvider.collPropertyInt16,PropertyProvider.collPropertyInt32,PropertyProvider.collPropertyInt64,PropertyProvider.collPropertySingle,PropertyProvider.collPropertyDouble,PropertyProvider.collPropertyDecimal,PropertyProvider.collPropertyBinary,PropertyProvider.collPropertyDate,PropertyProvider.collPropertyDateTimeOffset,PropertyProvider.collPropertyDuration,PropertyProvider.collPropertyGuid,PropertyProvider.collPropertyTimeOfDay));
  }
 else   if (complexTypeName.equals(nameCTTwoPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16_NotNullable,PropertyProvider.propertyString_NotNullable));
  }
 else   if (complexTypeName.equals(nameCTCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyCompNav_CTNavFiveProp));
  }
 else   if (complexTypeName.equals(nameCTMixPrimCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.collPropertyString,PropertyProvider.propertyComp_CTTwoPrim,PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTTwoPrim).setProperties(Arrays.asList(new CsdlProperty().setName(""String_Node_Str"").setType(PropertyProvider.nameString)));
  }
 else   if (complexTypeName.equals(nameCTTwoBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBase);
  }
 else   if (complexTypeName.equals(nameCTCompComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTCompCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTPrimComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.propertyComp_CTAllPrim));
  }
 else   if (complexTypeName.equals(nameCTNavFiveProp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16)).setNavigationProperties((Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia),new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setCollection(true))));
  }
 else   if (complexTypeName.equals(nameCTNavCont)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(new ArrayList<CsdlProperty>()).setNavigationProperties(Arrays.asList(PropertyProvider.navPropertyETKeyNavOne_CT_ETeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_CT_ETKeyNav,PropertyProvider.navPropertyETTwoKeyNavOne_CT_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_CT_ETTwoKeyNav));
  }
 else   if (complexTypeName.equals(nameCTBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTPrimComp).setNavigationProperties(Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.navPropertyETKeyNavOne_ETKeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_ETKeyNav));
  }
 else   if (complexTypeName.equals(nameCTTwoBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBasePrimCompNav);
  }
 else   if (complexTypeName.equals(nameCTMixEnumDef)) {
    return new CsdlComplexType().setName(nameCTMixEnumDef.getName()).setProperties(Arrays.asList(PropertyProvider.propertyEnumString_ENString,PropertyProvider.collPropertyEnumString_ENString,PropertyProvider.propertyTypeDefinition_TDString,PropertyProvider.collPropertyTypeDefinition_TDString));
  }
  return null;
}","public CsdlComplexType getComplexType(final FullQualifiedName complexTypeName) throws ODataException {
  if (complexTypeName.equals(nameCTPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16));
  }
 else   if (complexTypeName.equals(nameCTAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyBinary,PropertyProvider.propertyBoolean,PropertyProvider.propertyByte,PropertyProvider.propertyDate,PropertyProvider.propertyDateTimeOffset_Precision,PropertyProvider.propertyDecimal_Scale_Precision,PropertyProvider.propertySingle,PropertyProvider.propertyDouble,PropertyProvider.propertyDuration,PropertyProvider.propertyGuid,PropertyProvider.propertyInt16,PropertyProvider.propertyInt32,PropertyProvider.propertyInt64,PropertyProvider.propertySByte,PropertyProvider.propertyTimeOfDay_Precision));
  }
 else   if (complexTypeName.equals(nameCTCollAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyString,PropertyProvider.collPropertyBoolean,PropertyProvider.collPropertyByte,PropertyProvider.collPropertySByte,PropertyProvider.collPropertyInt16,PropertyProvider.collPropertyInt32,PropertyProvider.collPropertyInt64,PropertyProvider.collPropertySingle,PropertyProvider.collPropertyDouble,PropertyProvider.collPropertyDecimal,PropertyProvider.collPropertyBinary,PropertyProvider.collPropertyDate,PropertyProvider.collPropertyDateTimeOffset,PropertyProvider.collPropertyDuration,PropertyProvider.collPropertyGuid,PropertyProvider.collPropertyTimeOfDay));
  }
 else   if (complexTypeName.equals(nameCTTwoPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16_NotNullable,PropertyProvider.propertyString_NotNullable));
  }
 else   if (complexTypeName.equals(nameCTCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyCompNav_CTNavFiveProp));
  }
 else   if (complexTypeName.equals(nameCTMixPrimCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.collPropertyString,PropertyProvider.propertyComp_CTTwoPrim,PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTTwoPrim).setProperties(Arrays.asList(new CsdlProperty().setName(""String_Node_Str"").setType(PropertyProvider.nameString)));
  }
 else   if (complexTypeName.equals(nameCTTwoBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBase);
  }
 else   if (complexTypeName.equals(nameCTCompComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTCompCompExtended)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTCompComp).setProperties(Arrays.asList(PropertyProvider.propertyDate));
  }
 else   if (complexTypeName.equals(nameCTCompCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTPrimComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.propertyComp_CTAllPrim));
  }
 else   if (complexTypeName.equals(nameCTNavFiveProp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16)).setNavigationProperties((Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia),new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setCollection(true))));
  }
 else   if (complexTypeName.equals(nameCTNavCont)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(new ArrayList<CsdlProperty>()).setNavigationProperties(Arrays.asList(PropertyProvider.navPropertyETKeyNavOne_CT_ETeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_CT_ETKeyNav,PropertyProvider.navPropertyETTwoKeyNavOne_CT_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_CT_ETTwoKeyNav));
  }
 else   if (complexTypeName.equals(nameCTBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTPrimComp).setNavigationProperties(Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.navPropertyETKeyNavOne_ETKeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_ETKeyNav));
  }
 else   if (complexTypeName.equals(nameCTTwoBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBasePrimCompNav);
  }
 else   if (complexTypeName.equals(nameCTMixEnumDef)) {
    return new CsdlComplexType().setName(nameCTMixEnumDef.getName()).setProperties(Arrays.asList(PropertyProvider.propertyEnumString_ENString,PropertyProvider.collPropertyEnumString_ENString,PropertyProvider.propertyTypeDefinition_TDString,PropertyProvider.collPropertyTypeDefinition_TDString));
  }
  return null;
}",0.9808531480986732
33179,"@Test public void selectComplex() throws Exception {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EdmEntityType entityType=edmEntitySet.getEntityType();
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  final SelectOption select=ExpandSelectMock.mockSelectOption(Collections.singletonList(ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  InputStream result=serializer.entityCollection(metadata,entityType,entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).selectList(helper.buildContextURLSelectList(entityType,null,select)).build()).select(select).build()).getContent();
  final String resultString=IOUtils.toString(result);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",resultString);
}","@Test public void selectComplex() throws Exception {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EdmEntityType entityType=edmEntitySet.getEntityType();
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  final SelectOption select=ExpandSelectMock.mockSelectOption(Collections.singletonList(ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  InputStream result=serializer.entityCollection(metadata,entityType,entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).selectList(helper.buildContextURLSelectList(entityType,null,select)).build()).select(select).build()).getContent();
  final String resultString=IOUtils.toString(result);
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",resultString);
}",0.9900886802295252
33180,"@Test public void selectComplexTwice() throws Exception {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EdmEntityType entityType=edmEntitySet.getEntityType();
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  final SelectOption select=ExpandSelectMock.mockSelectOption(Arrays.asList(ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"")));
  final String resultString=IOUtils.toString(serializer.entityCollection(metadata,entityType,entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).selectList(helper.buildContextURLSelectList(entityType,null,select)).build()).select(select).build()).getContent());
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",resultString);
}","@Test public void selectComplexTwice() throws Exception {
  final EdmEntitySet edmEntitySet=entityContainer.getEntitySet(""String_Node_Str"");
  final EdmEntityType entityType=edmEntitySet.getEntityType();
  final EntityCollection entitySet=data.readAll(edmEntitySet);
  final SelectOption select=ExpandSelectMock.mockSelectOption(Arrays.asList(ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),ExpandSelectMock.mockSelectItem(edmEntitySet,""String_Node_Str"",""String_Node_Str"")));
  final String resultString=IOUtils.toString(serializer.entityCollection(metadata,entityType,entitySet,EntityCollectionSerializerOptions.with().contextURL(ContextURL.with().entitySet(edmEntitySet).selectList(helper.buildContextURLSelectList(entityType,null,select)).build()).select(select).build()).getContent());
  Assert.assertEquals(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",resultString);
}",0.9905425584868094
33181,"void read(XMLEventReader reader,StartElement element,T t,String... names) throws XMLStreamException {
  while (reader.hasNext()) {
    XMLEvent event=reader.peek();
    if (!parseAnnotations) {
      event=skipAnnotations(reader,event);
    }
    if (!event.isStartElement() && !event.isEndElement()) {
      reader.nextEvent();
      continue;
    }
    boolean hit=false;
    for (    String name : names) {
      if (event.isStartElement()) {
        element=event.asStartElement();
        if (element.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          build(reader,element,t,name);
          hit=true;
          break;
        }
      }
      if (event.isEndElement()) {
        EndElement e=event.asEndElement();
        if (e.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          hit=true;
          break;
        }
      }
    }
    if (!hit) {
      break;
    }
  }
}","void read(XMLEventReader reader,StartElement element,T t,String... names) throws XMLStreamException {
  while (reader.hasNext()) {
    XMLEvent event=reader.peek();
    if (!parseAnnotations) {
      XMLEvent eventBefore=event;
      event=skipAnnotations(reader,event);
      if (eventBefore != event) {
        continue;
      }
    }
    if (!event.isStartElement() && !event.isEndElement()) {
      reader.nextEvent();
      continue;
    }
    boolean hit=false;
    for (    String name : names) {
      if (event.isStartElement()) {
        element=event.asStartElement();
        if (element.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          build(reader,element,t,name);
          hit=true;
          break;
        }
      }
      if (event.isEndElement()) {
        EndElement e=event.asEndElement();
        if (e.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          hit=true;
          break;
        }
      }
    }
    if (!hit) {
      break;
    }
  }
}",0.9521384928716904
33182,"@Test public void allParameterKinds(){
  Map<String,ClientValue> parameters=new HashMap<String,ClientValue>();
  parameters.put(""String_Node_Str"",getFactory().newEnumValue(""String_Node_Str"",""String_Node_Str""));
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().build());
  ODataInvokeRequest<ClientProperty> request=getClient().getInvokeRequestFactory().getFunctionInvokeRequest(getClient().newURIBuilder(TecSvcConst.BASE_URI).appendOperationCallSegment(""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").build(),ClientProperty.class,parameters);
  setCookieHeader(request);
  final ODataInvokeResponse<ClientProperty> response=request.execute();
  saveCookieHeader(response);
  assertEquals(HttpStatusCode.OK.getStatusCode(),response.getStatusCode());
  assertShortOrInt(6,response.getBody().getPrimitiveValue().toValue());
}","@Test public void allParameterKinds(){
  Map<String,ClientValue> parameters=new HashMap<String,ClientValue>();
  parameters.put(""String_Node_Str"",getFactory().newEnumValue(""String_Node_Str"",""String_Node_Str""));
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().buildString(""String_Node_Str""));
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  parameters.put(""String_Node_Str"",getFactory().newPrimitiveValueBuilder().setValue(new ParameterAlias(""String_Node_Str"")).build());
  ODataInvokeRequest<ClientProperty> request=getClient().getInvokeRequestFactory().getFunctionInvokeRequest(getClient().newURIBuilder(TecSvcConst.BASE_URI).appendOperationCallSegment(""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").addParameterAlias(""String_Node_Str"",""String_Node_Str"").build(),ClientProperty.class,parameters);
  setCookieHeader(request);
  ODataInvokeResponse<ClientProperty> response=request.execute();
  saveCookieHeader(response);
  assertEquals(HttpStatusCode.OK.getStatusCode(),response.getStatusCode());
  assertShortOrInt(9,response.getBody().getPrimitiveValue().toValue());
  for (  final String name : parameters.keySet()) {
    parameters.put(name,getFactory().newPrimitiveValueBuilder().build());
  }
  request=getClient().getInvokeRequestFactory().getFunctionInvokeRequest(getClient().newURIBuilder(TecSvcConst.BASE_URI).appendOperationCallSegment(""String_Node_Str"").build(),ClientProperty.class,parameters);
  setCookieHeader(request);
  response=request.execute();
  saveCookieHeader(response);
  assertEquals(HttpStatusCode.OK.getStatusCode(),response.getStatusCode());
  assertShortOrInt(0,response.getBody().getPrimitiveValue().toValue());
}",0.8451385833699956
33183,"/** 
 * @param name of the parameter
 */
public void setName(final String name){
  this.name=name;
}","/** 
 * Sets the name of the parameter.
 * @param name of the parameter
 */
public void setName(final String name){
  this.name=name;
}",0.851063829787234
33184,"/** 
 * @return name of the parameter
 */
public String getName(){
  return name;
}","/** 
 * Gets the name of the parameter.
 * @return name of the parameter
 */
public String getName(){
  return name;
}",0.8258706467661692
33185,"/** 
 * Get the value in its entity representation or null if it is not based on an entity ValueType
 * @return entity representation or null if it is not based on an entity ValueType
 */
public Entity asEntity(){
  if (isCollection()) {
    return null;
  }
  return isEntity() ? (Entity)getValue() : null;
}","/** 
 * Gets the value in its entity representation or null if it is not based on an entity value type.
 * @return entity representation or null if it is not based on an entity value type
 */
public Entity asEntity(){
  return isEntity() && !isCollection() ? (Entity)getValue() : null;
}",0.348993288590604
33186,"/** 
 * Check if Valuable contains a ENTITY or COLLECTION_ENTITY ValueType
 * @return true if ValueType is a ENTITY or COLLECTION_ENTITY, otherwise false
 */
public boolean isEntity(){
  if (isCollection()) {
    return getValueType().getBaseType() == ValueType.ENTITY;
  }
  return getValueType() == ValueType.ENTITY;
}","/** 
 * Checks whether this parameter value is of the value type ENTITY or COLLECTION_ENTITY.
 * @return true if the value type is ENTITY or COLLECTION_ENTITY, otherwise false
 */
public boolean isEntity(){
  return getValueType() == ValueType.ENTITY || getValueType() == ValueType.COLLECTION_ENTITY;
}",0.4662379421221865
33187,"/** 
 * Get the value in its geospatial representation or null if it is not based on a geospatial ValueType
 * @return geospatial representation or null if it is not based on a geospatial ValueType
 */
public Geospatial asGeospatial(){
  if (isCollection()) {
    return null;
  }
  return isGeospatial() ? (Geospatial)value : null;
}","/** 
 * Get the value in its geospatial representation or null if it is not based on a geospatial ValueType
 * @return geospatial representation or null if it is not based on a geospatial ValueType
 */
public Geospatial asGeospatial(){
  return isGeospatial() && !isCollection() ? (Geospatial)value : null;
}",0.8473520249221184
33188,"/** 
 * Get the value in its enum representation or null if it is not based on a enum ValueType
 * @return enum representation or null if it is not based on a enum ValueType
 */
public Object asEnum(){
  if (isCollection()) {
    return null;
  }
  return isEnum() ? value : null;
}","/** 
 * Get the value in its enum representation or null if it is not based on a enum ValueType
 * @return enum representation or null if it is not based on a enum ValueType
 */
public Object asEnum(){
  return isEnum() && !isCollection() ? value : null;
}",0.8401486988847584
33189,"/** 
 * Check if Valuable contains a ENUM or COLLECTION_ENUM ValueType
 * @return true if ValueType is a ENUM or COLLECTION_ENUM, otherwise false
 */
public boolean isEnum(){
  if (isCollection()) {
    return valueType.getBaseType() == ValueType.ENUM;
  }
  return valueType == ValueType.ENUM;
}","/** 
 * Check if Valuable contains a ENUM or COLLECTION_ENUM ValueType
 * @return true if ValueType is a ENUM or COLLECTION_ENUM, otherwise false
 */
public boolean isEnum(){
  return valueType == ValueType.ENUM || valueType == ValueType.COLLECTION_ENUM;
}",0.7789855072463768
33190,"/** 
 * Get the value in its complex representation or null if it is not based on a complex ValueType
 * @return primitive complex or null if it is not based on a complex ValueType
 */
public ComplexValue asComplex(){
  if (isCollection()) {
    return null;
  }
  return isComplex() ? (ComplexValue)value : null;
}","/** 
 * Get the value in its complex representation or null if it is not based on a complex ValueType
 * @return primitive complex or null if it is not based on a complex ValueType
 */
public ComplexValue asComplex(){
  return isComplex() && !isCollection() ? (ComplexValue)value : null;
}",0.7549668874172185
33191,"/** 
 * Check if Valuable contains a GEOSPATIAL or COLLECTION_GEOSPATIAL ValueType
 * @return true if ValueType is a GEOSPATIAL or COLLECTION_GEOSPATIAL, otherwise false
 */
public boolean isGeospatial(){
  if (isCollection()) {
    return valueType.getBaseType() == ValueType.GEOSPATIAL;
  }
  return valueType == ValueType.GEOSPATIAL;
}","/** 
 * Check if Valuable contains a GEOSPATIAL or COLLECTION_GEOSPATIAL ValueType
 * @return true if ValueType is a GEOSPATIAL or COLLECTION_GEOSPATIAL, otherwise false
 */
public boolean isGeospatial(){
  return valueType == ValueType.GEOSPATIAL || valueType == ValueType.COLLECTION_GEOSPATIAL;
}",0.789308176100629
33192,"/** 
 * Get the value in its primitive representation or null if it is not based on a primitive ValueType
 * @return primitive representation or null if it is not based on a primitive ValueType
 */
public Object asPrimitive(){
  if (isCollection()) {
    return null;
  }
  return isPrimitive() ? value : null;
}","/** 
 * Get the value in its primitive representation or null if it is not based on a primitive ValueType
 * @return primitive representation or null if it is not based on a primitive ValueType
 */
public Object asPrimitive(){
  return isPrimitive() && !isCollection() ? value : null;
}",0.8394648829431438
33193,"/** 
 * Check if Valuable contains a PRIMITIVE or COLLECTION_PRIMITIVE ValueType
 * @return true if ValueType is a PRIMITIVE or COLLECTION_PRIMITIVE, otherwise false
 */
public boolean isPrimitive(){
  if (isCollection()) {
    return valueType.getBaseType() == ValueType.PRIMITIVE;
  }
  return valueType == ValueType.PRIMITIVE;
}","/** 
 * Check if Valuable contains a PRIMITIVE or COLLECTION_PRIMITIVE ValueType
 * @return true if ValueType is a PRIMITIVE or COLLECTION_PRIMITIVE, otherwise false
 */
public boolean isPrimitive(){
  return valueType == ValueType.PRIMITIVE || valueType == ValueType.COLLECTION_PRIMITIVE;
}",0.7877813504823151
33194,"/** 
 * Check if Valuable contains a COMPLEX or COLLECTION_COMPLEX ValueType
 * @return true if ValueType is a COMPLEX or COLLECTION_COMPLEX, otherwise false
 */
public boolean isComplex(){
  if (isCollection()) {
    return valueType.getBaseType() == ValueType.COMPLEX;
  }
  return valueType == ValueType.COMPLEX;
}","/** 
 * Check if Valuable contains a COMPLEX or COLLECTION_COMPLEX ValueType
 * @return true if ValueType is a COMPLEX or COLLECTION_COMPLEX, otherwise false
 */
public boolean isComplex(){
  return valueType == ValueType.COMPLEX || valueType == ValueType.COLLECTION_COMPLEX;
}",0.7845117845117845
33195,"/** 
 * pct-encoded-unescaped = ""%"" ( ""0"" / ""1"" / ""3"" / ""4"" / ""6"" / ""7"" / ""8"" / ""9"" / A-to-F ) HEXDIG / ""%"" ""2"" ( ""0"" / ""1"" / ""3"" / ""4"" / ""5"" / ""6"" / ""7"" / ""8"" / ""9"" / A-to-F ) / ""%"" ""5"" ( DIGIT / ""A"" / ""B"" / ""D"" / ""E"" / ""F"" ) HEXDIG = DIGIT / A-to-F
 * @param character which is checked
 * @return true if character is allowed
 */
private static boolean isPctEncodedUnescaped(char character){
  String hex=Integer.toHexString((int)character);
  char aschar[]=hex.toCharArray();
  if (aschar[0] == '%') {
    if (aschar[1] == '2') {
      return aschar[2] != '2' && isHexDigit(aschar[2]);
    }
 else     if (aschar[1] == '5') {
      return aschar[2] != 'C' && isHexDigit(aschar[2]);
    }
 else     if (isHexDigit(aschar[1])) {
      return isHexDigit(aschar[2]);
    }
  }
  return false;
}","/** 
 * pct-encoded-unescaped = ""%"" ( ""0"" / ""1"" / ""3"" / ""4"" / ""6"" / ""7"" / ""8"" / ""9"" / A-to-F ) HEXDIG / ""%"" ""2"" ( ""0"" / ""1"" / ""3"" / ""4"" / ""5"" / ""6"" / ""7"" / ""8"" / ""9"" / A-to-F ) / ""%"" ""5"" ( DIGIT / ""A"" / ""B"" / ""D"" / ""E"" / ""F"" ) HEXDIG = DIGIT / A-to-F
 * @param character which is checked
 * @return true if character is allowed
 */
private static boolean isPctEncodedUnescaped(char character){
  String hex=Integer.toHexString(character);
  char aschar[]=hex.toCharArray();
  if (aschar[0] == '%') {
    if (aschar[1] == '2') {
      return aschar[2] != '2' && isHexDigit(aschar[2]);
    }
 else     if (aschar[1] == '5') {
      return aschar[2] != 'C' && isHexDigit(aschar[2]);
    }
 else     if (isHexDigit(aschar[1])) {
      return isHexDigit(aschar[2]);
    }
  }
  return false;
}",0.9968374446552816
33196,"@SuppressWarnings(""String_Node_Str"") protected static Property primitiveComplexFunction(final String name,final Map<String,Parameter> parameters,final Map<String,EntityCollection> data) throws DataProviderException {
  if (name.equals(""String_Node_Str"")) {
    return DataCreator.createPrimitive(name,(short)12345);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createPrimitive(name,""String_Node_Str"");
  }
 else   if (name.equals(""String_Node_Str"")) {
    return data.get(""String_Node_Str"").getEntities().get(0).getProperty(""String_Node_Str"");
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplex(name,DataCreator.createPrimitive(""String_Node_Str"",(short)16),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplex(name,DataCreator.createPrimitive(""String_Node_Str"",getParameterInt16(parameters)),DataCreator.createPrimitive(""String_Node_Str"",getParameterString(parameters)));
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplexCollection(name,Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",(short)16),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",17),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",18),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (name.equals(""String_Node_Str"")) {
    final String parameterString=getParameterString(parameters);
    if (parameterString == null) {
      return DataCreator.createPrimitive(name,null);
    }
 else {
      final Short parameterInt16=getParameterInt16(parameters);
      final StringBuilder builder=new StringBuilder();
      for (short i=parameterInt16; i > 0; i--) {
        if (builder.length() != 0) {
          builder.append(',');
        }
        builder.append('""').append(parameterString).append('""');
      }
      return DataCreator.createPrimitive(name,builder.toString());
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    final Short parameterInt16=getParameterInt16(parameters);
    final String parameterString=getParameterString(parameters);
    if (parameterString == null) {
      return DataCreator.createComplexCollection(name,Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",1),DataCreator.createPrimitive(""String_Node_Str"",name + ""String_Node_Str"" + parameterInt16)),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",2),DataCreator.createPrimitive(""String_Node_Str"",name + ""String_Node_Str"")));
    }
 else {
      List<ComplexValue> complexValues=new ArrayList<ComplexValue>();
      short counter=1;
      for (short i=parameterInt16; 0 < i; i--) {
        ComplexValue complexValue=new ComplexValue();
        complexValue.getValue().add(new Property(null,""String_Node_Str"",ValueType.PRIMITIVE,counter++));
        complexValue.getValue().add(new Property(null,""String_Node_Str"",ValueType.PRIMITIVE,name + ""String_Node_Str"" + parameterString));
        complexValues.add(complexValue);
      }
      return new Property(null,name,ValueType.COLLECTION_COMPLEX,complexValues);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    short count=0;
    for (    final Parameter parameter : parameters.values()) {
      if (!(parameter.isNull() || !parameter.isCollection() && (parameter.isComplex() && parameter.asComplex().getValue().isEmpty() || parameter.isEntity() && ((Entity)parameter.getValue()).getProperties().isEmpty()) || parameter.isCollection() && (parameter.isEntity() && ((EntityCollection)parameter.getValue()).getEntities().isEmpty() || parameter.asCollection().isEmpty()))) {
        count++;
      }
    }
    return DataCreator.createPrimitive(null,count);
  }
 else {
    throw new DataProviderException(""String_Node_Str"" + name + ""String_Node_Str"",HttpStatusCode.NOT_IMPLEMENTED);
  }
}","@SuppressWarnings(""String_Node_Str"") protected static Property primitiveComplexFunction(final String name,final Map<String,Parameter> parameters,final Map<String,EntityCollection> data) throws DataProviderException {
  if (name.equals(""String_Node_Str"")) {
    return DataCreator.createPrimitive(name,(short)12345);
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createPrimitive(name,""String_Node_Str"");
  }
 else   if (name.equals(""String_Node_Str"")) {
    return data.get(""String_Node_Str"").getEntities().get(0).getProperty(""String_Node_Str"");
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplex(name,DataCreator.createPrimitive(""String_Node_Str"",(short)16),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplex(name,DataCreator.createPrimitive(""String_Node_Str"",getParameterInt16(parameters)),DataCreator.createPrimitive(""String_Node_Str"",getParameterString(parameters)));
  }
 else   if (name.equals(""String_Node_Str"")) {
    return DataCreator.createComplexCollection(name,Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",(short)16),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",17),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",18),DataCreator.createPrimitive(""String_Node_Str"",""String_Node_Str"")));
  }
 else   if (name.equals(""String_Node_Str"")) {
    final String parameterString=getParameterString(parameters);
    if (parameterString == null) {
      return DataCreator.createPrimitive(name,null);
    }
 else {
      final Short parameterInt16=getParameterInt16(parameters);
      final StringBuilder builder=new StringBuilder();
      for (short i=parameterInt16; i > 0; i--) {
        if (builder.length() != 0) {
          builder.append(',');
        }
        builder.append('""').append(parameterString).append('""');
      }
      return DataCreator.createPrimitive(name,builder.toString());
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    final Short parameterInt16=getParameterInt16(parameters);
    final String parameterString=getParameterString(parameters);
    if (parameterString == null) {
      return DataCreator.createComplexCollection(name,Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",1),DataCreator.createPrimitive(""String_Node_Str"",name + ""String_Node_Str"" + parameterInt16)),Arrays.asList(DataCreator.createPrimitive(""String_Node_Str"",2),DataCreator.createPrimitive(""String_Node_Str"",name + ""String_Node_Str"")));
    }
 else {
      List<ComplexValue> complexValues=new ArrayList<ComplexValue>();
      short counter=1;
      for (short i=parameterInt16; 0 < i; i--) {
        ComplexValue complexValue=new ComplexValue();
        complexValue.getValue().add(new Property(null,""String_Node_Str"",ValueType.PRIMITIVE,counter++));
        complexValue.getValue().add(new Property(null,""String_Node_Str"",ValueType.PRIMITIVE,name + ""String_Node_Str"" + parameterString));
        complexValues.add(complexValue);
      }
      return new Property(null,name,ValueType.COLLECTION_COMPLEX,complexValues);
    }
  }
 else   if (name.equals(""String_Node_Str"")) {
    short count=0;
    for (    final Parameter parameter : parameters.values()) {
      if (!(parameter.isNull() || !parameter.isCollection() && (parameter.isComplex() && parameter.asComplex().getValue().isEmpty() || parameter.isEntity() && ((Entity)parameter.getValue()).getProperties().isEmpty()) || parameter.isCollection() && (parameter.isEntity() && ((EntityCollection)parameter.getValue()).getEntities().isEmpty() || !parameter.isEntity() && parameter.asCollection().isEmpty()))) {
        count++;
      }
    }
    return DataCreator.createPrimitive(null,count);
  }
 else {
    throw new DataProviderException(""String_Node_Str"" + name + ""String_Node_Str"",HttpStatusCode.NOT_IMPLEMENTED);
  }
}",0.996900954506012
33197,"public CsdlComplexType getComplexType(final FullQualifiedName complexTypeName) throws ODataException {
  if (complexTypeName.equals(nameCTPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16));
  }
 else   if (complexTypeName.equals(nameCTAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyBinary,PropertyProvider.propertyBoolean,PropertyProvider.propertyByte,PropertyProvider.propertyDate,PropertyProvider.propertyDateTimeOffset_Precision,PropertyProvider.propertyDecimal_Scale_Precision,PropertyProvider.propertySingle,PropertyProvider.propertyDouble,PropertyProvider.propertyDuration,PropertyProvider.propertyGuid,PropertyProvider.propertyInt16,PropertyProvider.propertyInt32,PropertyProvider.propertyInt64,PropertyProvider.propertySByte,PropertyProvider.propertyTimeOfDay_Precision));
  }
 else   if (complexTypeName.equals(nameCTCollAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyString,PropertyProvider.collPropertyBoolean,PropertyProvider.collPropertyByte,PropertyProvider.collPropertySByte,PropertyProvider.collPropertyInt16,PropertyProvider.collPropertyInt32,PropertyProvider.collPropertyInt64,PropertyProvider.collPropertySingle,PropertyProvider.collPropertyDouble,PropertyProvider.collPropertyDecimal,PropertyProvider.collPropertyBinary,PropertyProvider.collPropertyDate,PropertyProvider.collPropertyDateTimeOffset,PropertyProvider.collPropertyDuration,PropertyProvider.collPropertyGuid,PropertyProvider.collPropertyTimeOfDay));
  }
 else   if (complexTypeName.equals(nameCTTwoPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16_NotNullable,PropertyProvider.propertyString_NotNullable));
  }
 else   if (complexTypeName.equals(nameCTCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyCompNav_CTNavFiveProp));
  }
 else   if (complexTypeName.equals(nameCTMixPrimCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.collPropertyString,PropertyProvider.propertyComp_CTTwoPrim,PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTTwoPrim).setProperties(Arrays.asList(new CsdlProperty().setName(""String_Node_Str"").setType(new FullQualifiedName(""String_Node_Str"",""String_Node_Str""))));
  }
 else   if (complexTypeName.equals(nameCTTwoBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBase);
  }
 else   if (complexTypeName.equals(nameCTCompComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTCompCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTPrimComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.propertyComp_CTAllPrim));
  }
 else   if (complexTypeName.equals(nameCTNavFiveProp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16)).setNavigationProperties((Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia),new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setCollection(true))));
  }
 else   if (complexTypeName.equals(nameCTNavCont)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(new ArrayList<CsdlProperty>()).setNavigationProperties(Arrays.asList(PropertyProvider.navPropertyETKeyNavOne_CT_ETeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_CT_ETKeyNav,PropertyProvider.navPropertyETTwoKeyNavOne_CT_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_CT_ETTwoKeyNav));
  }
 else   if (complexTypeName.equals(nameCTBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTPrimComp).setNavigationProperties(Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.navPropertyETKeyNavOne_ETKeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_ETKeyNav));
  }
 else   if (complexTypeName.equals(nameCTTwoBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBasePrimCompNav);
  }
 else   if (complexTypeName.equals(nameCTMixEnumDef)) {
    return new CsdlComplexType().setName(nameCTMixEnumDef.getName()).setProperties(Arrays.asList(PropertyProvider.propertyEnumString_ENString,PropertyProvider.collPropertyEnumString_ENString,PropertyProvider.propertyTypeDefinition_TDString,PropertyProvider.collPropertyTypeDefinition_TDString));
  }
  return null;
}","public CsdlComplexType getComplexType(final FullQualifiedName complexTypeName) throws ODataException {
  if (complexTypeName.equals(nameCTPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16));
  }
 else   if (complexTypeName.equals(nameCTAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyBinary,PropertyProvider.propertyBoolean,PropertyProvider.propertyByte,PropertyProvider.propertyDate,PropertyProvider.propertyDateTimeOffset_Precision,PropertyProvider.propertyDecimal_Scale_Precision,PropertyProvider.propertySingle,PropertyProvider.propertyDouble,PropertyProvider.propertyDuration,PropertyProvider.propertyGuid,PropertyProvider.propertyInt16,PropertyProvider.propertyInt32,PropertyProvider.propertyInt64,PropertyProvider.propertySByte,PropertyProvider.propertyTimeOfDay_Precision));
  }
 else   if (complexTypeName.equals(nameCTCollAllPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyString,PropertyProvider.collPropertyBoolean,PropertyProvider.collPropertyByte,PropertyProvider.collPropertySByte,PropertyProvider.collPropertyInt16,PropertyProvider.collPropertyInt32,PropertyProvider.collPropertyInt64,PropertyProvider.collPropertySingle,PropertyProvider.collPropertyDouble,PropertyProvider.collPropertyDecimal,PropertyProvider.collPropertyBinary,PropertyProvider.collPropertyDate,PropertyProvider.collPropertyDateTimeOffset,PropertyProvider.collPropertyDuration,PropertyProvider.collPropertyGuid,PropertyProvider.collPropertyTimeOfDay));
  }
 else   if (complexTypeName.equals(nameCTTwoPrim)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16_NotNullable,PropertyProvider.propertyString_NotNullable));
  }
 else   if (complexTypeName.equals(nameCTCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyString,PropertyProvider.propertyCompNav_CTNavFiveProp));
  }
 else   if (complexTypeName.equals(nameCTMixPrimCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.collPropertyString,PropertyProvider.propertyComp_CTTwoPrim,PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTTwoPrim).setProperties(Arrays.asList(new CsdlProperty().setName(""String_Node_Str"").setType(PropertyProvider.nameString)));
  }
 else   if (complexTypeName.equals(nameCTTwoBase)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBase);
  }
 else   if (complexTypeName.equals(nameCTCompComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTCompCollComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.collPropertyComp_CTTwoPrim));
  }
 else   if (complexTypeName.equals(nameCTPrimComp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16,PropertyProvider.propertyComp_CTAllPrim));
  }
 else   if (complexTypeName.equals(nameCTNavFiveProp)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(Arrays.asList(PropertyProvider.propertyInt16)).setNavigationProperties((Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia),new CsdlNavigationProperty().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setCollection(true))));
  }
 else   if (complexTypeName.equals(nameCTNavCont)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setProperties(new ArrayList<CsdlProperty>()).setNavigationProperties(Arrays.asList(PropertyProvider.navPropertyETKeyNavOne_CT_ETeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_CT_ETKeyNav,PropertyProvider.navPropertyETTwoKeyNavOne_CT_ETTwoKeyNav,PropertyProvider.collectionNavPropertyETTwoKeyNavMany_CT_ETTwoKeyNav));
  }
 else   if (complexTypeName.equals(nameCTBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTPrimComp).setNavigationProperties(Arrays.asList(PropertyProvider.collectionNavPropertyETTwoKeyNavMany_ETTwoKeyNav_WithPartnerERKeyNavOne,PropertyProvider.collectionNavPropertyETTwoKeyNavOne_ETTwoKeyNav,PropertyProvider.navPropertyETKeyNavOne_ETKeyNav,PropertyProvider.collectionNavPropertyETKeyNavMany_ETKeyNav));
  }
 else   if (complexTypeName.equals(nameCTTwoBasePrimCompNav)) {
    return new CsdlComplexType().setName(""String_Node_Str"").setBaseType(nameCTBasePrimCompNav);
  }
 else   if (complexTypeName.equals(nameCTMixEnumDef)) {
    return new CsdlComplexType().setName(nameCTMixEnumDef.getName()).setProperties(Arrays.asList(PropertyProvider.propertyEnumString_ENString,PropertyProvider.collPropertyEnumString_ENString,PropertyProvider.propertyTypeDefinition_TDString,PropertyProvider.collPropertyTypeDefinition_TDString));
  }
  return null;
}",0.9933906745133544
33198,"public CsdlEntitySet getEntitySet(final FullQualifiedName entityContainer,final String name) throws ODataException {
  if (entityContainer == nameContainer) {
    if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllPrim).setTitle(""String_Node_Str"").setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String,""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCollAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoPrim).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMixPrimCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBase).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBase).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBaseTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBaseTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllKey).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompCollAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setIncludeInServiceDocument(true).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyTwoKeyComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setIncludeInServiceDocument(false).setType(EntityTypeProvider.nameETAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETServerSidePaging).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllNullable).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyNavCont).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyNavCont).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBaseTwoKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBaseTwoKeyNav).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompMixPrimCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETFourKeyAlias).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMixEnumDefCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
  }
  return null;
}","public CsdlEntitySet getEntitySet(final FullQualifiedName entityContainer,final String name) throws ODataException {
  if (entityContainer == nameContainer) {
    if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllPrim).setTitle(""String_Node_Str"").setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String,""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCollAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(TermProvider.TERM_DESCRIPTION.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoPrim).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMixPrimCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBase).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBase).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBaseTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBaseTwoKeyTwoPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllKey).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompCollAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMedia).setIncludeInServiceDocument(true).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyTwoKeyComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setIncludeInServiceDocument(false).setType(EntityTypeProvider.nameETAllPrim).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETServerSidePaging).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETAllNullable).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETKeyNavCont).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoKeyNavCont).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""),new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETBaseTwoKeyNav).setNavigationPropertyBindings(Arrays.asList(new CsdlNavigationPropertyBinding().setPath(""String_Node_Str"").setTarget(""String_Node_Str""))).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETTwoBaseTwoKeyNav).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETCompMixPrimCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETFourKeyAlias).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
 else     if (name.equals(""String_Node_Str"")) {
      return new CsdlEntitySet().setName(""String_Node_Str"").setType(EntityTypeProvider.nameETMixEnumDefCollComp).setAnnotations(Arrays.asList(new CsdlAnnotation().setTerm(""String_Node_Str"").setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.String).setValue(""String_Node_Str"" + ""String_Node_Str"")),new CsdlAnnotation().setTerm(TermProvider.TERM_DATA.getFullQualifiedNameAsString()).setExpression(new CsdlConstantExpression(CsdlConstantExpression.ConstantExpressionType.Bool,""String_Node_Str""))));
    }
  }
  return null;
}",0.9981663610601766
33199,"@Override public List<CsdlAliasInfo> getAliasInfos() throws ODataException {
  return Arrays.asList(new CsdlAliasInfo().setAlias(""String_Node_Str"").setNamespace(nameSpace),new CsdlAliasInfo().setAlias(""String_Node_Str"").setNamespace(CORE_VOCABULARY_NAMESPACE));
}","@Override public List<CsdlAliasInfo> getAliasInfos() throws ODataException {
  return Arrays.asList(new CsdlAliasInfo().setAlias(SchemaProvider.NAMESPACE_ALIAS).setNamespace(SchemaProvider.NAMESPACE),new CsdlAliasInfo().setAlias(""String_Node_Str"").setNamespace(TermProvider.CORE_VOCABULARY_NAMESPACE));
}",0.673721340388007
33200,"public SchemaProvider(final EdmTechProvider prov){
  this.prov=prov;
}","public SchemaProvider(final CsdlEdmProvider prov){
  this.prov=prov;
}",0.9428571428571428
33201,"public List<CsdlSchema> getSchemas() throws ODataException {
  CsdlSchema schema=new CsdlSchema();
  schema.setNamespace(NAMESPACE);
  schema.setAlias(""String_Node_Str"");
  schema.setEnumTypes(Collections.singletonList(prov.getEnumType(EnumTypeProvider.nameENString)));
  schema.setTypeDefinitions(Collections.singletonList(prov.getTypeDefinition(TypeDefinitionProvider.nameTDString)));
  List<CsdlEntityType> entityTypes=new ArrayList<CsdlEntityType>();
  schema.setEntityTypes(entityTypes);
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCollAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMixPrimCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyTwoPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMixEnumDefCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETBase));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoBase));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllKey));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompCollAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMedia));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETFourKeyAlias));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETServerSidePaging));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllNullable));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETBaseTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoBaseTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyNavCont));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyNavCont));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompMixPrimCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyPrimNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAbstract));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAbstractBase));
  List<CsdlComplexType> complexTypes=new ArrayList<CsdlComplexType>();
  schema.setComplexTypes(complexTypes);
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTAllPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCollAllPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTMixPrimCollComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTMixEnumDef));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTBase));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoBase));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompCollComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTPrimComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTNavFiveProp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTBasePrimCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoBasePrimCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTNavCont));
  List<CsdlAction> actions=new ArrayList<CsdlAction>();
  schema.setActions(actions);
  actions.addAll(prov.getActions(ActionProvider.nameBAETTwoKeyNavRTETTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAESAllPrimRTETAllPrim));
  actions.addAll(prov.getActions(ActionProvider.nameBAESTwoKeyNavRTESTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAESTwoKeyNavRTESKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETBaseTwoKeyNavRTETBaseTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETTwoBaseTwoKeyNavRTETBaseTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETAllPrimRT));
  actions.addAll(prov.getActions(ActionProvider.nameBAESAllPrimRT));
  actions.addAll(prov.getActions(ActionProvider.nameUARTString));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollStringTwoParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCTTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollCTTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTETTwoKeyTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollETKeyNavParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTETAllPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollETAllPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUART));
  actions.addAll(prov.getActions(ActionProvider.nameUARTParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTTwoParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTByteNineParam));
  List<CsdlFunction> functions=new ArrayList<CsdlFunction>();
  schema.setFunctions(functions);
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTInt16));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNavParamCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTStringTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollStringTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTAllPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTTwoPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollCTTwoPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETMedia));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETMedia));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTCollETMixPrimCollCompTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETAllPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETMixPrimCollCompTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTCollCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETKeyNavContParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTByteNineParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCStringRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESBaseTwoKeyNavRTESBaseTwoKey));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFNESAllPrimRTCTAllPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCSINavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTESBaseTwoKey));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCollStringRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTESBaseTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCollCTPrimCompRTESAllPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETKeyNavRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFESTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTStringParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTETKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTESTwoKeyNav));
  schema.setEntityContainer(prov.getEntityContainer());
  return Collections.singletonList(schema);
}","public List<CsdlSchema> getSchemas() throws ODataException {
  CsdlSchema schema=new CsdlSchema();
  schema.setNamespace(NAMESPACE);
  schema.setAlias(NAMESPACE_ALIAS);
  schema.setEnumTypes(Collections.singletonList(prov.getEnumType(EnumTypeProvider.nameENString)));
  schema.setTypeDefinitions(Collections.singletonList(prov.getTypeDefinition(TypeDefinitionProvider.nameTDString)));
  List<CsdlEntityType> entityTypes=new ArrayList<CsdlEntityType>();
  schema.setEntityTypes(entityTypes);
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCollAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMixPrimCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyTwoPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMixEnumDefCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETBase));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoBase));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllKey));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompCollAllPrim));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETMedia));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETFourKeyAlias));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETServerSidePaging));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAllNullable));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETBaseTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoBaseTwoKeyNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyNavCont));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETTwoKeyNavCont));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETCompMixPrimCollComp));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETKeyPrimNav));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAbstract));
  entityTypes.add(prov.getEntityType(EntityTypeProvider.nameETAbstractBase));
  List<CsdlComplexType> complexTypes=new ArrayList<CsdlComplexType>();
  schema.setComplexTypes(complexTypes);
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTAllPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCollAllPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoPrim));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTMixPrimCollComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTMixEnumDef));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTBase));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoBase));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompCollComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTPrimComp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTNavFiveProp));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTBasePrimCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTTwoBasePrimCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTCompNav));
  complexTypes.add(prov.getComplexType(ComplexTypeProvider.nameCTNavCont));
  List<CsdlAction> actions=new ArrayList<CsdlAction>();
  schema.setActions(actions);
  actions.addAll(prov.getActions(ActionProvider.nameBAETTwoKeyNavRTETTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAESAllPrimRTETAllPrim));
  actions.addAll(prov.getActions(ActionProvider.nameBAESTwoKeyNavRTESTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAESTwoKeyNavRTESKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETBaseTwoKeyNavRTETBaseTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETTwoBaseTwoKeyNavRTETBaseTwoKeyNav));
  actions.addAll(prov.getActions(ActionProvider.nameBAETAllPrimRT));
  actions.addAll(prov.getActions(ActionProvider.nameBAESAllPrimRT));
  actions.addAll(prov.getActions(ActionProvider.nameUARTString));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollStringTwoParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCTTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollCTTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTETTwoKeyTwoPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollETKeyNavParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTETAllPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTCollETAllPrimParam));
  actions.addAll(prov.getActions(ActionProvider.nameUART));
  actions.addAll(prov.getActions(ActionProvider.nameUARTParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTTwoParam));
  actions.addAll(prov.getActions(ActionProvider.nameUARTByteNineParam));
  List<CsdlFunction> functions=new ArrayList<CsdlFunction>();
  schema.setFunctions(functions);
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTInt16));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETTwoKeyNavParamCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTStringTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollStringTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTAllPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTTwoPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollCTTwoPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETMedia));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETMedia));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTCollETMixPrimCollCompTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTETAllPrimTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETMixPrimCollCompTwoParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTCollCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFCRTCollETKeyNavContParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameUFNRTByteNineParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCStringRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESBaseTwoKeyNavRTESBaseTwoKey));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFNESAllPrimRTCTAllPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollString));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCSINavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETBaseTwoKeyNavRTESBaseTwoKey));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCollStringRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTESBaseTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCollCTPrimCompRTESAllPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETKeyNavRTETKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFESTwoKeyNavRTESTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTETTwoKeyNav));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCETTwoKeyNavRTCTTwoPrim));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTCollCTNavFiveProp));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESTwoKeyNavRTStringParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTETKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCCTPrimCompRTETTwoKeyNavParam));
  functions.addAll(prov.getFunctions(FunctionProvider.nameBFCESKeyNavRTESTwoKeyNav));
  schema.setEntityContainer(prov.getEntityContainer());
  return Collections.singletonList(schema);
}",0.9987249901922324
33202,"public State finish(){
  this.finished=true;
  return this;
}","public State finish(Token token){
  this.token=token;
  return finish();
}",0.7407407407407407
33203,"public SearchExpressionState(){
  super(null);
}","public SearchExpressionState(String initLiteral){
  super(null,initLiteral);
}",0.7619047619047619
33204,"@Override public State nextChar(char c){
  if (isWhitespace(c)) {
    return allowed(c);
  }
 else   if (c == CHAR_O) {
    return new OrState(c);
  }
 else   if (c == CHAR_A) {
    return new AndState(c);
  }
 else {
    finish();
    return new SearchExpressionState().init(c);
  }
}","@Override public State nextChar(char c){
  if (!noneRws && isWhitespace(c)) {
    return allowed(c);
  }
 else   if (c == CHAR_O) {
    noneRws=true;
    return allowed(c);
  }
 else   if (literal.length() == 1 && c == CHAR_R) {
    return allowed(c);
  }
 else   if (literal.length() == 2 && isWhitespace(c)) {
    finish(Token.OR);
    return new BeforeSearchExpressionRwsState();
  }
 else   if (c == CHAR_A) {
    noneRws=true;
    return allowed(c);
  }
 else   if (literal.length() == 1 && c == CHAR_N) {
    return allowed(c);
  }
 else   if (literal.length() == 2 && c == CHAR_D) {
    return allowed(c);
  }
 else   if (literal.length() == 3 && isWhitespace(c)) {
    finish(Token.AND);
    return new BeforeSearchExpressionRwsState();
  }
 else   if (noneRws) {
    finish(Token.AND);
    return new SearchWordState(this);
  }
 else {
    finish(Token.AND);
    return new SearchExpressionState(literal.toString()).init(c);
  }
}",0.2581699346405229
33205,"@Test public void parseSpecial() throws Exception {
  SearchTokenizer tokenizer=new SearchTokenizer();
  List<SearchQueryToken> result;
  Iterator<SearchQueryToken> it;
  result=tokenizer.tokenize(""String_Node_Str"");
  log(result.toString());
  it=result.iterator();
  Assert.assertEquals(NOT,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  Assert.assertEquals(AND,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  result=tokenizer.tokenize(""String_Node_Str"");
  log(result.toString());
  it=result.iterator();
  Assert.assertEquals(WORD,it.next().getToken());
  Assert.assertEquals(AND,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,AND,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,OR,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,OR,WORD).validate();
}","@Test public void parseSpecial() throws Exception {
  SearchTokenizer tokenizer=new SearchTokenizer();
  List<SearchQueryToken> result;
  Iterator<SearchQueryToken> it;
  result=tokenizer.tokenize(""String_Node_Str"");
  log(result.toString());
  it=result.iterator();
  Assert.assertEquals(NOT,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  Assert.assertEquals(AND,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  result=tokenizer.tokenize(""String_Node_Str"");
  log(result.toString());
  it=result.iterator();
  Assert.assertEquals(WORD,it.next().getToken());
  Assert.assertEquals(AND,it.next().getToken());
  Assert.assertEquals(WORD,it.next().getToken());
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,AND,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,AND,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,AND,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,OR,WORD).validate();
  SearchValidator.init(""String_Node_Str"").addExpected(WORD,OR,WORD).validate();
}",0.9178743961352656
33206,"private Object getRawValueFromClient(EdmProperty edmProperty) throws DeserializerException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);
  byte[] buffer=new byte[1024];
  int read=0;
  do {
    try {
      read=IOUtils.read(getODataRequest().getBody(),buffer,0,1024);
      bos.write(buffer,0,read);
      if (read < 1024) {
        break;
      }
    }
 catch (    IOException e) {
      new DeserializerException(""String_Node_Str"",SerializerException.MessageKeys.IO_EXCEPTION);
    }
  }
 while (true);
  return bos.toByteArray();
}","private Object getRawValueFromClient(EdmProperty edmProperty) throws DeserializerException {
  ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);
  byte[] buffer=new byte[1024];
  int read=0;
  do {
    try {
      read=IOUtils.read(getODataRequest().getBody(),buffer,0,1024);
      bos.write(buffer,0,read);
      if (read < 1024) {
        break;
      }
    }
 catch (    IOException e) {
      throw new DeserializerException(""String_Node_Str"",SerializerException.MessageKeys.IO_EXCEPTION);
    }
  }
 while (true);
  return bos.toByteArray();
}",0.9945848375451264
33207,"public static String buildLocation(String baseURL,Entity entity,String enitySetName,EdmEntityType type){
  String location=baseURL + ""String_Node_Str"" + enitySetName+ ""String_Node_Str"";
  int i=0;
  boolean usename=type.getKeyPredicateNames().size() > 1;
  for (  String key : type.getKeyPredicateNames()) {
    if (i > 0) {
      location+=""String_Node_Str"";
    }
    i++;
    if (usename) {
      location+=(key + ""String_Node_Str"");
    }
    if (entity.getProperty(key).getType().equals(""String_Node_Str"")) {
      location=location + ""String_Node_Str"" + entity.getProperty(key).getValue().toString()+ ""String_Node_Str"";
    }
 else {
      location=location + entity.getProperty(key).getValue().toString();
    }
  }
  location+=""String_Node_Str"";
  return location;
}","public static String buildLocation(String baseURL,Entity entity,String enitySetName,EdmEntityType type){
  StringBuilder location=new StringBuilder();
  location.append(baseURL).append(""String_Node_Str"").append(enitySetName).append(""String_Node_Str"");
  int i=0;
  boolean usename=type.getKeyPredicateNames().size() > 1;
  for (  String key : type.getKeyPredicateNames()) {
    if (i > 0) {
      location.append(""String_Node_Str"");
    }
    i++;
    if (usename) {
      location.append(key).append(""String_Node_Str"");
    }
    if (entity.getProperty(key).getType().equals(""String_Node_Str"")) {
      location.append(""String_Node_Str"").append(entity.getProperty(key).getValue().toString()).append(""String_Node_Str"");
    }
 else {
      location.append(entity.getProperty(key).getValue().toString());
    }
  }
  location.append(""String_Node_Str"");
  return location.toString();
}",0.7326493663246831
33208,"private void collection(final Valuable valuable,final XMLEventReader reader,final StartElement start,final EdmProperty edmProperty) throws XMLStreamException, EdmPrimitiveTypeException, DeserializerException {
  List<Object> values=new ArrayList<Object>();
  EdmType edmType=edmProperty.getType();
  boolean foundEndProperty=false;
  while (reader.hasNext() && !foundEndProperty) {
    final XMLEvent event=reader.nextEvent();
    if (event.isStartElement()) {
      if (edmType instanceof SingletonPrimitiveType) {
        values.add(primitive(reader,event.asStartElement(),edmProperty));
      }
 else       if (edmType instanceof EdmComplexType) {
        values.add(complex(reader,event.asStartElement(),(EdmComplexType)edmType));
      }
 else       if (edmType instanceof EdmEnumType) {
        values.add(readEnum(reader,event.asStartElement()));
      }
 else {
      }
    }
    if (event.isEndElement() && start.getName().equals(event.asEndElement().getName())) {
      foundEndProperty=true;
    }
  }
  valuable.setValue(getValueType(edmType,true),values);
}","private void collection(final Valuable valuable,final XMLEventReader reader,final StartElement start,final EdmProperty edmProperty) throws XMLStreamException, EdmPrimitiveTypeException, DeserializerException {
  List<Object> values=new ArrayList<Object>();
  EdmType edmType=edmProperty.getType();
  boolean foundEndProperty=false;
  while (reader.hasNext() && !foundEndProperty) {
    final XMLEvent event=reader.nextEvent();
    if (event.isStartElement()) {
      if (edmType instanceof SingletonPrimitiveType) {
        values.add(primitive(reader,event.asStartElement(),edmProperty));
      }
 else       if (edmType instanceof EdmComplexType) {
        values.add(complex(reader,event.asStartElement(),(EdmComplexType)edmType));
      }
 else       if (edmType instanceof EdmEnumType) {
        values.add(readEnum(reader,event.asStartElement()));
      }
    }
    if (event.isEndElement() && start.getName().equals(event.asEndElement().getName())) {
      foundEndProperty=true;
    }
  }
  valuable.setValue(getValueType(edmType,true),values);
}",0.992467043314501
33209,"private void valuable(final Valuable valuable,final XMLEventReader reader,final StartElement start,EdmProperty edmProperty) throws XMLStreamException, EdmPrimitiveTypeException, DeserializerException {
  final Attribute nullAttr=start.getAttributeByName(nullQName);
  if (nullAttr != null) {
    boolean foundEndProperty=false;
    while (reader.hasNext() && !foundEndProperty) {
      final XMLEvent event=reader.nextEvent();
      if (event.isEndElement() && start.getName().equals(event.asEndElement().getName())) {
        foundEndProperty=true;
      }
    }
    valuable.setValue(getValueType(edmProperty.getType(),false),null);
    return;
  }
  EdmType edmType=edmProperty.getType();
  if (edmProperty.isCollection()) {
    collection(valuable,reader,start,edmProperty);
    valuable.setType(""String_Node_Str"" + edmType.getFullQualifiedName().getFullQualifiedNameAsString() + ""String_Node_Str"");
  }
 else   if (edmType instanceof SingletonPrimitiveType) {
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
    valuable.setValue(ValueType.PRIMITIVE,primitive(reader,start,edmProperty));
  }
 else   if (edmType instanceof EdmComplexType) {
    valuable.setValue(ValueType.COMPLEX,complex(reader,start,(EdmComplexType)edmType));
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
  }
 else   if (edmType instanceof EdmEnumType) {
    valuable.setValue(ValueType.ENUM,readEnum(reader,start));
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
  }
 else {
  }
}","private void valuable(final Valuable valuable,final XMLEventReader reader,final StartElement start,EdmProperty edmProperty) throws XMLStreamException, EdmPrimitiveTypeException, DeserializerException {
  final Attribute nullAttr=start.getAttributeByName(nullQName);
  if (nullAttr != null) {
    boolean foundEndProperty=false;
    while (reader.hasNext() && !foundEndProperty) {
      final XMLEvent event=reader.nextEvent();
      if (event.isEndElement() && start.getName().equals(event.asEndElement().getName())) {
        foundEndProperty=true;
      }
    }
    valuable.setValue(getValueType(edmProperty.getType(),false),null);
    return;
  }
  EdmType edmType=edmProperty.getType();
  if (edmProperty.isCollection()) {
    collection(valuable,reader,start,edmProperty);
    valuable.setType(""String_Node_Str"" + edmType.getFullQualifiedName().getFullQualifiedNameAsString() + ""String_Node_Str"");
  }
 else   if (edmType instanceof SingletonPrimitiveType) {
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
    valuable.setValue(ValueType.PRIMITIVE,primitive(reader,start,edmProperty));
  }
 else   if (edmType instanceof EdmComplexType) {
    valuable.setValue(ValueType.COMPLEX,complex(reader,start,(EdmComplexType)edmType));
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
  }
 else   if (edmType instanceof EdmEnumType) {
    valuable.setValue(ValueType.ENUM,readEnum(reader,start));
    valuable.setType(edmType.getFullQualifiedName().getFullQualifiedNameAsString());
  }
}",0.99616368286445
33210,"protected void writePrimitiveValue(final EdmPrimitiveType type,final Object primitiveValue,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode,final XMLStreamWriter writer) throws EdmPrimitiveTypeException, XMLStreamException {
  final String value=type.valueToString(primitiveValue,isNullable,maxLength,precision,scale,isUnicode);
  if (value == null) {
    writer.writeAttribute(DATA,NS_DATA,""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Boolean)) {
    writer.writeCharacters(value);
  }
 else   if (type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Byte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Decimal) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Double) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int16) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int32) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int64) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.SByte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Single)) {
    writer.writeCharacters(value);
  }
 else {
    writer.writeCharacters(value);
  }
}","protected void writePrimitiveValue(final EdmPrimitiveType type,final Object primitiveValue,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode,final XMLStreamWriter writer) throws EdmPrimitiveTypeException, XMLStreamException {
  final String value=type.valueToString(primitiveValue,isNullable,maxLength,precision,scale,isUnicode);
  if (value == null) {
    writer.writeAttribute(DATA,NS_DATA,""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Byte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Boolean) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Decimal) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Double) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int16) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int32) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int64) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.SByte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Single)) {
    writer.writeCharacters(value);
  }
 else {
    writer.writeCharacters(value);
  }
}",0.9697433933358868
33211,"protected void writeExpandedNavigationProperty(final ServiceMetadata metadata,final EdmNavigationProperty property,final Link navigationLink,final ExpandOption innerExpand,final SelectOption innerSelect,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  if (property.isCollection()) {
    if (navigationLink == null || navigationLink.getInlineEntitySet() == null) {
    }
 else {
      writer.writeStartElement(ATOM,""String_Node_Str"",NS_ATOM);
      writeEntitySet(metadata,property.getType(),navigationLink.getInlineEntitySet(),innerExpand,innerSelect,writer);
      writer.writeEndElement();
    }
  }
 else {
    if (navigationLink == null || navigationLink.getInlineEntity() == null) {
    }
 else {
      writeEntity(metadata,property.getType(),navigationLink.getInlineEntity(),null,innerExpand,innerSelect,writer,false);
    }
  }
}","protected void writeExpandedNavigationProperty(final ServiceMetadata metadata,final EdmNavigationProperty property,final Link navigationLink,final ExpandOption innerExpand,final SelectOption innerSelect,final XMLStreamWriter writer) throws XMLStreamException, SerializerException {
  if (property.isCollection()) {
    if (navigationLink != null && navigationLink.getInlineEntitySet() != null) {
      writer.writeStartElement(ATOM,""String_Node_Str"",NS_ATOM);
      writeEntitySet(metadata,property.getType(),navigationLink.getInlineEntitySet(),innerExpand,innerSelect,writer);
      writer.writeEndElement();
    }
  }
 else {
    if (navigationLink != null && navigationLink.getInlineEntity() != null) {
      writeEntity(metadata,property.getType(),navigationLink.getInlineEntity(),null,innerExpand,innerSelect,writer,false);
    }
  }
}",0.97423887587822
33212,"public Writer(final byte[] src,final OutputStream os){
  this.os=os;
  this.src=src;
}","public Writer(final byte[] src,final OutputStream os){
  this.os=os;
  this.src=Arrays.copyOf(src,src.length);
}",0.8686868686868687
33213,"public static HttpEntity buildInputStreamEntity(final ODataClient client,final InputStream input){
  AbstractHttpEntity entity;
  boolean useChunked=client.getConfiguration().isUseChuncked();
  if (shouldUseRepeatableHttpBodyEntry(client) || !useChunked) {
    byte[] bytes=new byte[0];
    try {
      bytes=IOUtils.toByteArray(input);
      IOUtils.closeQuietly(input);
    }
 catch (    IOException e) {
      LOG.error(""String_Node_Str"",e);
    }
    entity=new ByteArrayEntity(bytes);
  }
 else {
    entity=new InputStreamEntity(input,-1);
  }
  if (!useChunked && entity.getContentLength() < 0) {
    LOG.error(""String_Node_Str"");
    useChunked=true;
  }
  entity.setChunked(useChunked);
  return entity;
}","public static HttpEntity buildInputStreamEntity(final ODataClient client,final InputStream input){
  AbstractHttpEntity entity;
  boolean useChunked=client.getConfiguration().isUseChuncked();
  if (shouldUseRepeatableHttpBodyEntry(client) || !useChunked) {
    byte[] bytes=new byte[0];
    try {
      bytes=IOUtils.toByteArray(input);
      IOUtils.closeQuietly(input);
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
    entity=new ByteArrayEntity(bytes);
  }
 else {
    entity=new InputStreamEntity(input,-1);
  }
  if (!useChunked && entity.getContentLength() < 0) {
    useChunked=true;
  }
  entity.setChunked(useChunked);
  return entity;
}",0.8618001417434443
33214,"private static String escape(final Object obj,final boolean singleQuoteEscape){
  String value;
  try {
    if (obj == null) {
      value=Constants.ATTR_NULL;
    }
 else     if (obj instanceof Collection) {
      final StringBuilder buffer=new StringBuilder(""String_Node_Str"");
      for (@SuppressWarnings(""String_Node_Str"") final Iterator<Object> itor=((Collection<Object>)obj).iterator(); itor.hasNext(); ) {
        buffer.append(escape(itor.next(),false));
        if (itor.hasNext()) {
          buffer.append(',');
        }
      }
      buffer.append(']');
      value=buffer.toString();
    }
 else     if (obj instanceof Map) {
      final StringBuilder buffer=new StringBuilder(""String_Node_Str"");
      for (@SuppressWarnings(""String_Node_Str"") final Iterator<Map.Entry<String,Object>> itor=((Map<String,Object>)obj).entrySet().iterator(); itor.hasNext(); ) {
        final Map.Entry<String,Object> entry=itor.next();
        buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
        buffer.append(':').append(escape(entry.getValue(),false));
        if (itor.hasNext()) {
          buffer.append(',');
        }
      }
      buffer.append('}');
      value=buffer.toString();
    }
 else {
      value=(obj instanceof ParameterAlias) ? ""String_Node_Str"" + ((ParameterAlias)obj).getAlias() : (obj instanceof Boolean) ? BooleanUtils.toStringTrueFalse((Boolean)obj) : (obj instanceof UUID) ? obj.toString() : (obj instanceof byte[]) ? EdmBinary.getInstance().toUriLiteral(Hex.encodeHexString((byte[])obj)) : (obj instanceof Timestamp) ? timestamp((Timestamp)obj) : (obj instanceof Calendar) ? calendar((Calendar)obj) : (obj instanceof Duration) ? duration((Duration)obj) : (obj instanceof BigDecimal) ? EdmDecimal.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Double) ? EdmDouble.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Float) ? EdmSingle.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Long) ? EdmInt64.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Geospatial) ? URLEncoder.encode(EdmPrimitiveTypeFactory.getInstance(((Geospatial)obj).getEdmPrimitiveTypeKind()).valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null),Constants.UTF8) : (obj instanceof String) ? quoteString((String)obj,singleQuoteEscape) : obj.toString();
    }
  }
 catch (  Exception e) {
    LOG.warn(""String_Node_Str"",obj,e);
    if (obj == null) {
      value=""String_Node_Str"";
    }
 else {
      value=obj.toString();
    }
  }
  return value;
}","private static String escape(final Object obj,final boolean singleQuoteEscape){
  String value;
  try {
    if (obj == null) {
      value=Constants.ATTR_NULL;
    }
 else     if (obj instanceof Collection) {
      final StringBuilder buffer=new StringBuilder(""String_Node_Str"");
      for (@SuppressWarnings(""String_Node_Str"") final Iterator<Object> itor=((Collection<Object>)obj).iterator(); itor.hasNext(); ) {
        buffer.append(escape(itor.next(),false));
        if (itor.hasNext()) {
          buffer.append(',');
        }
      }
      buffer.append(']');
      value=buffer.toString();
    }
 else     if (obj instanceof Map) {
      final StringBuilder buffer=new StringBuilder(""String_Node_Str"");
      for (@SuppressWarnings(""String_Node_Str"") final Iterator<Map.Entry<String,Object>> itor=((Map<String,Object>)obj).entrySet().iterator(); itor.hasNext(); ) {
        final Map.Entry<String,Object> entry=itor.next();
        buffer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"");
        buffer.append(':').append(escape(entry.getValue(),false));
        if (itor.hasNext()) {
          buffer.append(',');
        }
      }
      buffer.append('}');
      value=buffer.toString();
    }
 else {
      value=(obj instanceof ParameterAlias) ? ""String_Node_Str"" + ((ParameterAlias)obj).getAlias() : (obj instanceof Boolean) ? BooleanUtils.toStringTrueFalse((Boolean)obj) : (obj instanceof UUID) ? obj.toString() : (obj instanceof byte[]) ? EdmBinary.getInstance().toUriLiteral(Hex.encodeHexString((byte[])obj)) : (obj instanceof Timestamp) ? timestamp((Timestamp)obj) : (obj instanceof Calendar) ? calendar((Calendar)obj) : (obj instanceof Duration) ? duration((Duration)obj) : (obj instanceof BigDecimal) ? EdmDecimal.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Double) ? EdmDouble.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Float) ? EdmSingle.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Long) ? EdmInt64.getInstance().valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null) : (obj instanceof Geospatial) ? URLEncoder.encode(EdmPrimitiveTypeFactory.getInstance(((Geospatial)obj).getEdmPrimitiveTypeKind()).valueToString(obj,null,null,Constants.DEFAULT_PRECISION,Constants.DEFAULT_SCALE,null),Constants.UTF8) : (obj instanceof String) ? quoteString((String)obj,singleQuoteEscape) : obj.toString();
    }
  }
 catch (  Exception e) {
    value=obj.toString();
  }
  return value;
}",0.9683440073193048
33215,"private void readParameter(StartElement element,CsdlOperation operation){
  CsdlParameter parameter=new CsdlParameter();
  parameter.setName(attr(element,""String_Node_Str""));
  parameter.setType(readType(element));
  parameter.setCollection(isCollectionType(element));
  parameter.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    parameter.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    parameter.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    parameter.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
  }
  operation.getParameters().add(parameter);
}","private void readParameter(StartElement element,CsdlOperation operation){
  CsdlParameter parameter=new CsdlParameter();
  parameter.setName(attr(element,""String_Node_Str""));
  parameter.setType(readType(element));
  parameter.setCollection(isCollectionType(element));
  parameter.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    parameter.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    parameter.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    parameter.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
    parameter.setSrid(SRID.valueOf(srid));
  }
  operation.getParameters().add(parameter);
}",0.9759103641456582
33216,"public CsdlEdmProvider buildEdmProvider(Reader csdl) throws XMLStreamException {
  XMLInputFactory xmlInputFactory=XMLInputFactory.newInstance();
  XMLEventReader reader=xmlInputFactory.createXMLEventReader(csdl);
  SchemaBasedEdmProvider provider=new SchemaBasedEdmProvider();
  new ElementReader<SchemaBasedEdmProvider>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    SchemaBasedEdmProvider provider,    String name) throws XMLStreamException {
      String version=attr(element,""String_Node_Str"");
      if (version.equals(""String_Node_Str"")) {
        readDataServicesAndReference(reader,element,provider);
      }
    }
  }
.read(reader,null,provider,""String_Node_Str"");
  return provider;
}","public CsdlEdmProvider buildEdmProvider(Reader csdl) throws XMLStreamException {
  XMLInputFactory xmlInputFactory=XMLInputFactory.newInstance();
  XMLEventReader reader=xmlInputFactory.createXMLEventReader(csdl);
  SchemaBasedEdmProvider provider=new SchemaBasedEdmProvider();
  new ElementReader<SchemaBasedEdmProvider>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    SchemaBasedEdmProvider provider,    String name) throws XMLStreamException {
      String version=attr(element,""String_Node_Str"");
      if (""String_Node_Str"".equals(version)) {
        readDataServicesAndReference(reader,element,provider);
      }
    }
  }
.read(reader,null,provider,""String_Node_Str"");
  return provider;
}",0.9794801641586868
33217,"private CsdlProperty readProperty(StartElement element){
  CsdlProperty property=new CsdlProperty();
  property.setName(attr(element,""String_Node_Str""));
  property.setType(readType(element));
  property.setCollection(isCollectionType(element));
  property.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"") == null ? ""String_Node_Str"" : attr(element,""String_Node_Str"")));
  property.setUnicode(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    property.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    property.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    property.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
  }
  String defaultValue=attr(element,""String_Node_Str"");
  if (defaultValue != null) {
    property.setDefaultValue(defaultValue);
  }
  return property;
}","private CsdlProperty readProperty(StartElement element){
  CsdlProperty property=new CsdlProperty();
  property.setName(attr(element,""String_Node_Str""));
  property.setType(readType(element));
  property.setCollection(isCollectionType(element));
  property.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"") == null ? ""String_Node_Str"" : attr(element,""String_Node_Str"")));
  property.setUnicode(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    property.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    property.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    property.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
    property.setSrid(SRID.valueOf(srid));
  }
  String defaultValue=attr(element,""String_Node_Str"");
  if (defaultValue != null) {
    property.setDefaultValue(defaultValue);
  }
  return property;
}",0.981132075471698
33218,"private void readEntityContainer(XMLEventReader reader,StartElement element,CsdlSchema schema) throws XMLStreamException {
  final CsdlEntityContainer container=new CsdlEntityContainer();
  container.setName(attr(element,""String_Node_Str""));
  if (attr(element,""String_Node_Str"") != null) {
    container.setExtendsContainer(attr(element,""String_Node_Str""));
  }
  container.setActionImports(new ArrayList<CsdlActionImport>());
  container.setFunctionImports(new ArrayList<CsdlFunctionImport>());
  container.setEntitySets(new ArrayList<CsdlEntitySet>());
  container.setSingletons(new ArrayList<CsdlSingleton>());
  new ElementReader<CsdlSchema>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    CsdlSchema schema,    String name) throws XMLStreamException {
      if (name.equals(""String_Node_Str"")) {
        readEntitySet(reader,element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readSingleton(reader,element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readActionImport(element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readFunctionImport(element,container);
      }
    }
    private void readFunctionImport(    StartElement element,    CsdlEntityContainer container){
      CsdlFunctionImport functionImport=new CsdlFunctionImport();
      functionImport.setName(attr(element,""String_Node_Str""));
      functionImport.setFunction(new FullQualifiedName(attr(element,""String_Node_Str"")));
      functionImport.setIncludeInServiceDocument(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
      String entitySet=attr(element,""String_Node_Str"");
      if (entitySet != null) {
        functionImport.setEntitySet(entitySet);
      }
      container.getFunctionImports().add(functionImport);
    }
    private void readActionImport(    StartElement element,    CsdlEntityContainer container){
      CsdlActionImport actionImport=new CsdlActionImport();
      actionImport.setName(attr(element,""String_Node_Str""));
      actionImport.setAction(new FullQualifiedName(attr(element,""String_Node_Str"")));
      String entitySet=attr(element,""String_Node_Str"");
      if (entitySet != null) {
        actionImport.setEntitySet(entitySet);
      }
      container.getActionImports().add(actionImport);
    }
    private void readSingleton(    XMLEventReader reader,    StartElement element,    CsdlEntityContainer container) throws XMLStreamException {
      CsdlSingleton singleton=new CsdlSingleton();
      singleton.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      singleton.setName(attr(element,""String_Node_Str""));
      singleton.setType(new FullQualifiedName(attr(element,""String_Node_Str"")));
      singleton.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      readNavigationPropertyBindings(reader,element,singleton.getNavigationPropertyBindings());
      container.getSingletons().add(singleton);
    }
    private void readEntitySet(    XMLEventReader reader,    StartElement element,    CsdlEntityContainer container) throws XMLStreamException {
      CsdlEntitySet entitySet=new CsdlEntitySet();
      entitySet.setName(attr(element,""String_Node_Str""));
      entitySet.setType(new FullQualifiedName(attr(element,""String_Node_Str"")));
      entitySet.setIncludeInServiceDocument(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
      entitySet.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      readNavigationPropertyBindings(reader,element,entitySet.getNavigationPropertyBindings());
      container.getEntitySets().add(entitySet);
    }
    private void readNavigationPropertyBindings(    XMLEventReader reader,    StartElement element,    List<CsdlNavigationPropertyBinding> bindings) throws XMLStreamException {
      new ElementReader<List<CsdlNavigationPropertyBinding>>(){
        @Override void build(        XMLEventReader reader,        StartElement element,        List<CsdlNavigationPropertyBinding> bindings,        String name) throws XMLStreamException {
          CsdlNavigationPropertyBinding binding=new CsdlNavigationPropertyBinding();
          binding.setPath(attr(element,""String_Node_Str""));
          binding.setTarget(attr(element,""String_Node_Str""));
          bindings.add(binding);
        }
      }
.read(reader,element,bindings,""String_Node_Str"");
      ;
    }
  }
.read(reader,element,schema,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  schema.setEntityContainer(container);
}","private void readEntityContainer(XMLEventReader reader,StartElement element,CsdlSchema schema) throws XMLStreamException {
  final CsdlEntityContainer container=new CsdlEntityContainer();
  container.setName(attr(element,""String_Node_Str""));
  if (attr(element,""String_Node_Str"") != null) {
    container.setExtendsContainer(attr(element,""String_Node_Str""));
  }
  container.setActionImports(new ArrayList<CsdlActionImport>());
  container.setFunctionImports(new ArrayList<CsdlFunctionImport>());
  container.setEntitySets(new ArrayList<CsdlEntitySet>());
  container.setSingletons(new ArrayList<CsdlSingleton>());
  new ElementReader<CsdlSchema>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    CsdlSchema schema,    String name) throws XMLStreamException {
      if (name.equals(""String_Node_Str"")) {
        readEntitySet(reader,element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readSingleton(reader,element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readActionImport(element,container);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readFunctionImport(element,container);
      }
    }
    private void readFunctionImport(    StartElement element,    CsdlEntityContainer container){
      CsdlFunctionImport functionImport=new CsdlFunctionImport();
      functionImport.setName(attr(element,""String_Node_Str""));
      functionImport.setFunction(new FullQualifiedName(attr(element,""String_Node_Str"")));
      functionImport.setIncludeInServiceDocument(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
      String entitySet=attr(element,""String_Node_Str"");
      if (entitySet != null) {
        functionImport.setEntitySet(entitySet);
      }
      container.getFunctionImports().add(functionImport);
    }
    private void readActionImport(    StartElement element,    CsdlEntityContainer container){
      CsdlActionImport actionImport=new CsdlActionImport();
      actionImport.setName(attr(element,""String_Node_Str""));
      actionImport.setAction(new FullQualifiedName(attr(element,""String_Node_Str"")));
      String entitySet=attr(element,""String_Node_Str"");
      if (entitySet != null) {
        actionImport.setEntitySet(entitySet);
      }
      container.getActionImports().add(actionImport);
    }
    private void readSingleton(    XMLEventReader reader,    StartElement element,    CsdlEntityContainer container) throws XMLStreamException {
      CsdlSingleton singleton=new CsdlSingleton();
      singleton.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      singleton.setName(attr(element,""String_Node_Str""));
      singleton.setType(new FullQualifiedName(attr(element,""String_Node_Str"")));
      singleton.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      readNavigationPropertyBindings(reader,element,singleton.getNavigationPropertyBindings());
      container.getSingletons().add(singleton);
    }
    private void readEntitySet(    XMLEventReader reader,    StartElement element,    CsdlEntityContainer container) throws XMLStreamException {
      CsdlEntitySet entitySet=new CsdlEntitySet();
      entitySet.setName(attr(element,""String_Node_Str""));
      entitySet.setType(new FullQualifiedName(attr(element,""String_Node_Str"")));
      entitySet.setIncludeInServiceDocument(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
      entitySet.setNavigationPropertyBindings(new ArrayList<CsdlNavigationPropertyBinding>());
      readNavigationPropertyBindings(reader,element,entitySet.getNavigationPropertyBindings());
      container.getEntitySets().add(entitySet);
    }
    private void readNavigationPropertyBindings(    XMLEventReader reader,    StartElement element,    List<CsdlNavigationPropertyBinding> bindings) throws XMLStreamException {
      new ElementReader<List<CsdlNavigationPropertyBinding>>(){
        @Override void build(        XMLEventReader reader,        StartElement element,        List<CsdlNavigationPropertyBinding> bindings,        String name) throws XMLStreamException {
          CsdlNavigationPropertyBinding binding=new CsdlNavigationPropertyBinding();
          binding.setPath(attr(element,""String_Node_Str""));
          binding.setTarget(attr(element,""String_Node_Str""));
          bindings.add(binding);
        }
      }
.read(reader,element,bindings,""String_Node_Str"");
    }
  }
.read(reader,element,schema,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  schema.setEntityContainer(container);
}",0.9678050902762672
33219,"private CsdlTypeDefinition readTypeDefinition(StartElement element){
  CsdlTypeDefinition td=new CsdlTypeDefinition();
  td.setName(attr(element,""String_Node_Str""));
  td.setUnderlyingType(new FullQualifiedName(attr(element,""String_Node_Str"")));
  td.setUnicode(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    td.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    td.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    td.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
  }
  return td;
}","private CsdlTypeDefinition readTypeDefinition(StartElement element){
  CsdlTypeDefinition td=new CsdlTypeDefinition();
  td.setName(attr(element,""String_Node_Str""));
  td.setUnderlyingType(new FullQualifiedName(attr(element,""String_Node_Str"")));
  td.setUnicode(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    td.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    td.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    td.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
    td.setSrid(SRID.valueOf(srid));
  }
  return td;
}",0.977667493796526
33220,"private void readReturnType(StartElement element,CsdlOperation operation){
  CsdlReturnType returnType=new CsdlReturnType();
  returnType.setType(readType(element));
  returnType.setCollection(isCollectionType(element));
  returnType.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    returnType.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    returnType.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    returnType.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
  }
  operation.setReturnType(returnType);
}","private void readReturnType(StartElement element,CsdlOperation operation){
  CsdlReturnType returnType=new CsdlReturnType();
  returnType.setType(readType(element));
  returnType.setCollection(isCollectionType(element));
  returnType.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    returnType.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    returnType.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    returnType.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
    returnType.setSrid(SRID.valueOf(srid));
  }
  operation.setReturnType(returnType);
}",0.9739336492890996
33221,"private void readNavigationPropertyBindings(XMLEventReader reader,StartElement element,List<CsdlNavigationPropertyBinding> bindings) throws XMLStreamException {
  new ElementReader<List<CsdlNavigationPropertyBinding>>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    List<CsdlNavigationPropertyBinding> bindings,    String name) throws XMLStreamException {
      CsdlNavigationPropertyBinding binding=new CsdlNavigationPropertyBinding();
      binding.setPath(attr(element,""String_Node_Str""));
      binding.setTarget(attr(element,""String_Node_Str""));
      bindings.add(binding);
    }
  }
.read(reader,element,bindings,""String_Node_Str"");
  ;
}","private void readNavigationPropertyBindings(XMLEventReader reader,StartElement element,List<CsdlNavigationPropertyBinding> bindings) throws XMLStreamException {
  new ElementReader<List<CsdlNavigationPropertyBinding>>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    List<CsdlNavigationPropertyBinding> bindings,    String name) throws XMLStreamException {
      CsdlNavigationPropertyBinding binding=new CsdlNavigationPropertyBinding();
      binding.setPath(attr(element,""String_Node_Str""));
      binding.setTarget(attr(element,""String_Node_Str""));
      bindings.add(binding);
    }
  }
.read(reader,element,bindings,""String_Node_Str"");
}",0.9970501474926252
33222,"void read(XMLEventReader reader,StartElement element,T t,String... names) throws XMLStreamException {
  while (reader.hasNext()) {
    XMLEvent event=reader.peek();
    event=skipAnnotations(reader,event);
    if (!event.isStartElement() && !event.isEndElement()) {
      reader.nextEvent();
      continue;
    }
    boolean hit=false;
    for (int i=0; i < names.length; i++) {
      if (event.isStartElement()) {
        element=event.asStartElement();
        if (element.getName().getLocalPart().equals(names[i])) {
          reader.nextEvent();
          build(reader,element,t,names[i]);
          hit=true;
        }
      }
      if (event.isEndElement()) {
        EndElement e=event.asEndElement();
        if (e.getName().getLocalPart().equals(names[i])) {
          reader.nextEvent();
          hit=true;
        }
      }
    }
    if (!hit) {
      break;
    }
  }
}","void read(XMLEventReader reader,StartElement element,T t,String... names) throws XMLStreamException {
  while (reader.hasNext()) {
    XMLEvent event=reader.peek();
    event=skipAnnotations(reader,event);
    if (!event.isStartElement() && !event.isEndElement()) {
      reader.nextEvent();
      continue;
    }
    boolean hit=false;
    for (    String name : names) {
      if (event.isStartElement()) {
        element=event.asStartElement();
        if (element.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          build(reader,element,t,name);
          hit=true;
        }
      }
      if (event.isEndElement()) {
        EndElement e=event.asEndElement();
        if (e.getName().getLocalPart().equals(name)) {
          reader.nextEvent();
          hit=true;
        }
      }
    }
    if (!hit) {
      break;
    }
  }
}",0.96508299942759
33223,"private CsdlTerm readTerm(StartElement element){
  CsdlTerm term=new CsdlTerm();
  term.setName(attr(element,""String_Node_Str""));
  term.setType(attr(element,""String_Node_Str""));
  if (attr(element,""String_Node_Str"") != null) {
    term.setBaseTerm(attr(element,""String_Node_Str""));
  }
  if (attr(element,""String_Node_Str"") != null) {
    term.setDefaultValue(attr(element,""String_Node_Str""));
  }
  if (attr(element,""String_Node_Str"") != null) {
    term.setAppliesTo(Arrays.asList(attr(element,""String_Node_Str"")));
  }
  term.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    term.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    term.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    term.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
  }
  return term;
}","private CsdlTerm readTerm(StartElement element){
  CsdlTerm term=new CsdlTerm();
  term.setName(attr(element,""String_Node_Str""));
  term.setType(attr(element,""String_Node_Str""));
  if (attr(element,""String_Node_Str"") != null) {
    term.setBaseTerm(attr(element,""String_Node_Str""));
  }
  if (attr(element,""String_Node_Str"") != null) {
    term.setDefaultValue(attr(element,""String_Node_Str""));
  }
  if (attr(element,""String_Node_Str"") != null) {
    term.setAppliesTo(Collections.singletonList(attr(element,""String_Node_Str"")));
  }
  term.setNullable(Boolean.parseBoolean(attr(element,""String_Node_Str"")));
  String maxLength=attr(element,""String_Node_Str"");
  if (maxLength != null) {
    term.setMaxLength(Integer.parseInt(maxLength));
  }
  String precision=attr(element,""String_Node_Str"");
  if (precision != null) {
    term.setPrecision(Integer.parseInt(precision));
  }
  String scale=attr(element,""String_Node_Str"");
  if (scale != null) {
    term.setScale(Integer.parseInt(scale));
  }
  String srid=attr(element,""String_Node_Str"");
  if (srid != null) {
    term.setSrid(SRID.valueOf(srid));
  }
  return term;
}",0.9691189827429608
33224,"private boolean isCollectionType(StartElement element){
  String type=attr(element,""String_Node_Str"");
  if (type.startsWith(""String_Node_Str"") && type.endsWith(""String_Node_Str"")) {
    return true;
  }
  return false;
}","private boolean isCollectionType(StartElement element){
  String type=attr(element,""String_Node_Str"");
  if (type != null && type.startsWith(""String_Node_Str"") && type.endsWith(""String_Node_Str"")) {
    return true;
  }
  return false;
}",0.965065502183406
33225,"private FullQualifiedName readType(StartElement element){
  String type=attr(element,""String_Node_Str"");
  if (type.startsWith(""String_Node_Str"") && type.endsWith(""String_Node_Str"")) {
    return new FullQualifiedName(type.substring(11,type.length() - 1));
  }
  return new FullQualifiedName(type);
}","private FullQualifiedName readType(StartElement element){
  String type=attr(element,""String_Node_Str"");
  if (type != null && type.startsWith(""String_Node_Str"") && type.endsWith(""String_Node_Str"")) {
    return new FullQualifiedName(type.substring(11,type.length() - 1));
  }
  return new FullQualifiedName(type);
}",0.974025974025974
33226,"private void readSchemaContents(XMLEventReader reader,CsdlSchema schema) throws XMLStreamException {
  new ElementReader<CsdlSchema>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    CsdlSchema schema,    String name) throws XMLStreamException {
      if (name.equals(""String_Node_Str"")) {
        readAction(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
      }
 else       if (name.equals(""String_Node_Str"")) {
      }
 else       if (name.equals(""String_Node_Str"")) {
        readComplexType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEntityContainer(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEntityType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEnumType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readFunction(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        schema.getTerms().add(readTerm(element));
      }
 else       if (name.equals(""String_Node_Str"")) {
        schema.getTypeDefinitions().add(readTypeDefinition(element));
      }
    }
  }
.read(reader,null,schema,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}","private void readSchemaContents(XMLEventReader reader,CsdlSchema schema) throws XMLStreamException {
  new ElementReader<CsdlSchema>(){
    @Override void build(    XMLEventReader reader,    StartElement element,    CsdlSchema schema,    String name) throws XMLStreamException {
      if (name.equals(""String_Node_Str"")) {
        readAction(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readComplexType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEntityContainer(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEntityType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readEnumType(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        readFunction(reader,element,schema);
      }
 else       if (name.equals(""String_Node_Str"")) {
        schema.getTerms().add(readTerm(element));
      }
 else       if (name.equals(""String_Node_Str"")) {
        schema.getTypeDefinitions().add(readTypeDefinition(element));
      }
    }
  }
.read(reader,null,schema,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
}",0.9589525831564047
33227,"protected void writePrimitiveValue(final EdmPrimitiveType type,final Object primitiveValue,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode,final XMLStreamWriter writer) throws EdmPrimitiveTypeException, XMLStreamException {
  final String value=type.valueToString(primitiveValue,isNullable,maxLength,precision,scale,isUnicode);
  if (value == null) {
    writer.writeAttribute(DATA,NS_DATA,""String_Node_Str"",""String_Node_Str"");
  }
 else   if (type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Byte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Boolean) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Decimal) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Double) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int16) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int32) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int64) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.SByte) || type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Single)) {
    writer.writeCharacters(value);
  }
 else {
    writer.writeCharacters(value);
  }
}","protected void writePrimitiveValue(final EdmPrimitiveType type,final Object primitiveValue,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode,final XMLStreamWriter writer) throws EdmPrimitiveTypeException, XMLStreamException {
  final String value=type.valueToString(primitiveValue,isNullable,maxLength,precision,scale,isUnicode);
  if (value == null) {
    writer.writeAttribute(DATA,NS_DATA,""String_Node_Str"",""String_Node_Str"");
  }
 else {
    writer.writeCharacters(value);
  }
}",0.6003280481137233
33228,"@Override public Object invoke(Object o,Method method,Object[] objects) throws Throwable {
  if (Processor.class.isAssignableFrom(method.getDeclaringClass())) {
    invokeMethod=method;
    invokeParameters=objects;
  }
 else {
    throw new ODataRuntimeException(""String_Node_Str"" + method.getDeclaringClass() + ""String_Node_Str"");
  }
  return null;
}","@Override public Object invoke(Object o,Method method,Object[] objects) throws Throwable {
  if (Processor.class.isAssignableFrom(method.getDeclaringClass())) {
    invokeMethod=method;
    invokeParameters=Arrays.copyOf(objects,objects.length);
  }
 else {
    throw new ODataRuntimeException(""String_Node_Str"" + method.getDeclaringClass() + ""String_Node_Str"");
  }
  return null;
}",0.9402173913043478
33229,"/** 
 * parameters: primitive-type name, value 
 */
@Override public String getKey(){
  return name();
}","/** 
 * parameter: encoding-name 
 */
@Override public String getKey(){
  return name();
}",0.8556701030927835
33230,"private void handleResourceDispatching(final ODataRequest request,final ODataResponse response) throws ODataApplicationException, ODataLibraryException {
  final int lastPathSegmentIndex=uriInfo.getUriResourceParts().size() - 1;
  final UriResource lastPathSegment=uriInfo.getUriResourceParts().get(lastPathSegmentIndex);
switch (lastPathSegment.getKind()) {
case action:
    checkMethod(request.getMethod(),HttpMethod.POST);
  handleActionDispatching(request,response,(UriResourceAction)lastPathSegment);
break;
case function:
checkMethod(request.getMethod(),HttpMethod.GET);
handleFunctionDispatching(request,response,(UriResourceFunction)lastPathSegment);
break;
case entitySet:
case navigationProperty:
handleEntityDispatching(request,response,((UriResourcePartTyped)lastPathSegment).isCollection(),isMedia(lastPathSegment));
break;
case count:
checkMethod(request.getMethod(),HttpMethod.GET);
handleCountDispatching(request,response,lastPathSegmentIndex);
break;
case primitiveProperty:
handlePrimitiveDispatching(request,response,((UriResourceProperty)lastPathSegment).isCollection());
break;
case complexProperty:
handleComplexDispatching(request,response,((UriResourceProperty)lastPathSegment).isCollection());
break;
case value:
handleValueDispatching(request,response,lastPathSegmentIndex);
break;
case ref:
handleReferenceDispatching(request,response,lastPathSegmentIndex);
break;
default :
throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}","private void handleResourceDispatching(final ODataRequest request,final ODataResponse response) throws ODataApplicationException, ODataLibraryException {
  final int lastPathSegmentIndex=uriInfo.getUriResourceParts().size() - 1;
  final UriResource lastPathSegment=uriInfo.getUriResourceParts().get(lastPathSegmentIndex);
switch (lastPathSegment.getKind()) {
case action:
    checkMethod(request.getMethod(),HttpMethod.POST);
  handleActionDispatching(request,response,(UriResourceAction)lastPathSegment);
break;
case function:
checkMethod(request.getMethod(),HttpMethod.GET);
handleFunctionDispatching(request,response,(UriResourceFunction)lastPathSegment);
break;
case entitySet:
case navigationProperty:
handleEntityDispatching(request,response,((UriResourcePartTyped)lastPathSegment).isCollection(),isMedia(lastPathSegment));
break;
case count:
checkMethod(request.getMethod(),HttpMethod.GET);
handleCountDispatching(request,response,lastPathSegmentIndex);
break;
case primitiveProperty:
handlePrimitiveDispatching(request,response,((UriResourceProperty)lastPathSegment).isCollection());
break;
case complexProperty:
handleComplexDispatching(request,response,((UriResourceProperty)lastPathSegment).isCollection());
break;
case value:
handleValueDispatching(request,response,lastPathSegmentIndex);
break;
case ref:
handleReferenceDispatching(request,response,lastPathSegmentIndex);
break;
default :
throw new ODataHandlerException(NOT_IMPLEMENTED_MESSAGE,ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}",0.9888451443569554
33231,"private void handleFunctionDispatching(final ODataRequest request,final ODataResponse response,final UriResourceFunction uriResourceFunction) throws ODataApplicationException, ODataLibraryException {
  EdmFunction function=uriResourceFunction.getFunction();
  if (function == null) {
    function=uriResourceFunction.getFunctionImport().getUnboundFunctions().get(0);
  }
  final EdmReturnType returnType=function.getReturnType();
switch (returnType.getType().getKind()) {
case ENTITY:
    handleEntityDispatching(request,response,returnType.isCollection() && uriResourceFunction.getKeyPredicates().isEmpty(),false);
  break;
case PRIMITIVE:
handlePrimitiveDispatching(request,response,returnType.isCollection());
break;
case COMPLEX:
handleComplexDispatching(request,response,returnType.isCollection());
break;
default :
throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}","private void handleFunctionDispatching(final ODataRequest request,final ODataResponse response,final UriResourceFunction uriResourceFunction) throws ODataApplicationException, ODataLibraryException {
  EdmFunction function=uriResourceFunction.getFunction();
  if (function == null) {
    function=uriResourceFunction.getFunctionImport().getUnboundFunctions().get(0);
  }
  final EdmReturnType returnType=function.getReturnType();
switch (returnType.getType().getKind()) {
case ENTITY:
    handleEntityDispatching(request,response,returnType.isCollection() && uriResourceFunction.getKeyPredicates().isEmpty(),false);
  break;
case PRIMITIVE:
handlePrimitiveDispatching(request,response,returnType.isCollection());
break;
case COMPLEX:
handleComplexDispatching(request,response,returnType.isCollection());
break;
default :
throw new ODataHandlerException(NOT_IMPLEMENTED_MESSAGE,ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}",0.980911983032874
33232,"public void dispatch(ODataRequest request,ODataResponse response) throws ODataApplicationException, ODataLibraryException {
switch (uriInfo.getKind()) {
case metadata:
    checkMethod(method,HttpMethod.GET);
  final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.METADATA);
handler.selectProcessor(MetadataProcessor.class).readMetadata(request,response,uriInfo,requestedContentType);
break;
case service:
checkMethod(method,HttpMethod.GET);
if (""String_Node_Str"".equals(request.getRawODataPath())) {
handler.selectProcessor(RedirectProcessor.class).redirect(request,response);
}
 else {
final ContentType serviceContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.SERVICE);
handler.selectProcessor(ServiceDocumentProcessor.class).readServiceDocument(request,response,uriInfo,serviceContentType);
}
break;
case resource:
handleResourceDispatching(request,response);
break;
case batch:
checkMethod(method,HttpMethod.POST);
new BatchHandler(handler,handler.selectProcessor(BatchProcessor.class)).process(request,response,true);
break;
default :
throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}","public void dispatch(ODataRequest request,ODataResponse response) throws ODataApplicationException, ODataLibraryException {
switch (uriInfo.getKind()) {
case metadata:
    checkMethod(request.getMethod(),HttpMethod.GET);
  final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.METADATA);
handler.selectProcessor(MetadataProcessor.class).readMetadata(request,response,uriInfo,requestedContentType);
break;
case service:
checkMethod(request.getMethod(),HttpMethod.GET);
if (""String_Node_Str"".equals(request.getRawODataPath())) {
handler.selectProcessor(RedirectProcessor.class).redirect(request,response);
}
 else {
final ContentType serviceContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.SERVICE);
handler.selectProcessor(ServiceDocumentProcessor.class).readServiceDocument(request,response,uriInfo,serviceContentType);
}
break;
case resource:
handleResourceDispatching(request,response);
break;
case batch:
checkMethod(request.getMethod(),HttpMethod.POST);
new BatchHandler(handler,handler.selectProcessor(BatchProcessor.class)).process(request,response,true);
break;
default :
throw new ODataHandlerException(NOT_IMPLEMENTED_MESSAGE,ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}",0.9600575746671464
33233,"private void handleReferenceDispatching(final ODataRequest request,final ODataResponse response,final int lastPathSegmentIndex) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final boolean isCollection=((UriResourcePartTyped)uriInfo.getUriResourceParts().get(lastPathSegmentIndex - 1)).isCollection();
  if (isCollection && method == HttpMethod.GET) {
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.COLLECTION_REFERENCE);
    handler.selectProcessor(ReferenceCollectionProcessor.class).readReferenceCollection(request,response,uriInfo,responseFormat);
  }
 else   if (isCollection && method == HttpMethod.POST) {
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).createReference(request,response,uriInfo,requestFormat);
  }
 else   if (!isCollection && method == HttpMethod.GET) {
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).readReference(request,response,uriInfo,responseFormat);
  }
 else   if (!isCollection && (method == HttpMethod.PUT || method == HttpMethod.PATCH)) {
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).updateReference(request,response,uriInfo,requestFormat);
  }
 else   if (method == HttpMethod.DELETE) {
    handler.selectProcessor(ReferenceProcessor.class).deleteReference(request,response,uriInfo);
  }
 else {
    throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
  }
}","private void handleReferenceDispatching(final ODataRequest request,final ODataResponse response,final int lastPathSegmentIndex) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod httpMethod=request.getMethod();
  final boolean isCollection=((UriResourcePartTyped)uriInfo.getUriResourceParts().get(lastPathSegmentIndex - 1)).isCollection();
  if (isCollection && httpMethod == HttpMethod.GET) {
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.COLLECTION_REFERENCE);
    handler.selectProcessor(ReferenceCollectionProcessor.class).readReferenceCollection(request,response,uriInfo,responseFormat);
  }
 else   if (isCollection && httpMethod == HttpMethod.POST) {
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).createReference(request,response,uriInfo,requestFormat);
  }
 else   if (!isCollection && httpMethod == HttpMethod.GET) {
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).readReference(request,response,uriInfo,responseFormat);
  }
 else   if (!isCollection && (httpMethod == HttpMethod.PUT || httpMethod == HttpMethod.PATCH)) {
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,RepresentationType.REFERENCE);
    handler.selectProcessor(ReferenceProcessor.class).updateReference(request,response,uriInfo,requestFormat);
  }
 else   if (httpMethod == HttpMethod.DELETE) {
    handler.selectProcessor(ReferenceProcessor.class).deleteReference(request,response,uriInfo);
  }
 else {
    throw new ODataHandlerException(getMethodNotAllowedStringMessage(httpMethod),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,httpMethod.toString());
  }
}",0.9710144927536232
33234,"private void handleEntityDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection,final boolean isMedia) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  if (isCollection) {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.COLLECTION_ENTITY);
      handler.selectProcessor(EntityCollectionProcessor.class).readEntityCollection(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.POST) {
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      if (isMedia) {
        handler.selectProcessor(MediaEntityProcessor.class).createMediaEntity(request,response,uriInfo,requestFormat,responseFormat);
      }
 else {
        checkContentTypeSupport(requestFormat,RepresentationType.ENTITY);
        handler.selectProcessor(EntityProcessor.class).createEntity(request,response,uriInfo,requestFormat,responseFormat);
      }
    }
 else {
      throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
 else {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(EntityProcessor.class).readEntity(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
      validatePreconditions(request,false);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      checkContentTypeSupport(requestFormat,RepresentationType.ENTITY);
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(EntityProcessor.class).updateEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE) {
      validatePreconditions(request,false);
      handler.selectProcessor(isMedia ? MediaEntityProcessor.class : EntityProcessor.class).deleteEntity(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
}","private void handleEntityDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection,final boolean isMedia) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  if (isCollection) {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.COLLECTION_ENTITY);
      handler.selectProcessor(EntityCollectionProcessor.class).readEntityCollection(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.POST) {
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      if (isMedia) {
        handler.selectProcessor(MediaEntityProcessor.class).createMediaEntity(request,response,uriInfo,requestFormat,responseFormat);
      }
 else {
        checkContentTypeSupport(requestFormat,RepresentationType.ENTITY);
        handler.selectProcessor(EntityProcessor.class).createEntity(request,response,uriInfo,requestFormat,responseFormat);
      }
    }
 else {
      throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
 else {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(EntityProcessor.class).readEntity(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
      validatePreconditions(request,false);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      checkContentTypeSupport(requestFormat,RepresentationType.ENTITY);
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(EntityProcessor.class).updateEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE) {
      validatePreconditions(request,false);
      handler.selectProcessor(isMedia ? MediaEntityProcessor.class : EntityProcessor.class).deleteEntity(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
}",0.9742070407807598
33235,"private void checkMethod(final HttpMethod requestMethod,final HttpMethod allowedMethod) throws ODataHandlerException {
  if (requestMethod != allowedMethod) {
    throw new ODataHandlerException(""String_Node_Str"" + requestMethod + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,requestMethod.toString());
  }
}","private void checkMethod(final HttpMethod requestMethod,final HttpMethod allowedMethod) throws ODataHandlerException {
  if (requestMethod != allowedMethod) {
    throw new ODataHandlerException(getMethodNotAllowedStringMessage(requestMethod),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,requestMethod.toString());
  }
}",0.9077380952380952
33236,"private void handleComplexDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final RepresentationType complexRepresentationType=isCollection ? RepresentationType.COLLECTION_COMPLEX : RepresentationType.COMPLEX;
  if (method == HttpMethod.GET) {
    final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),complexRepresentationType);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).readComplexCollection(request,response,uriInfo,requestedContentType);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).readComplex(request,response,uriInfo,requestedContentType);
    }
  }
 else   if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
    validatePreconditions(request,false);
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,complexRepresentationType);
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),complexRepresentationType);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).updateComplexCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).updateComplex(request,response,uriInfo,requestFormat,responseFormat);
    }
  }
 else   if (method == HttpMethod.DELETE) {
    validatePreconditions(request,false);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).deleteComplexCollection(request,response,uriInfo);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).deleteComplex(request,response,uriInfo);
    }
  }
 else {
    throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
  }
}","private void handleComplexDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final RepresentationType complexRepresentationType=isCollection ? RepresentationType.COLLECTION_COMPLEX : RepresentationType.COMPLEX;
  if (method == HttpMethod.GET) {
    final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),complexRepresentationType);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).readComplexCollection(request,response,uriInfo,requestedContentType);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).readComplex(request,response,uriInfo,requestedContentType);
    }
  }
 else   if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
    validatePreconditions(request,false);
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,complexRepresentationType);
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),complexRepresentationType);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).updateComplexCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).updateComplex(request,response,uriInfo,requestFormat,responseFormat);
    }
  }
 else   if (method == HttpMethod.DELETE) {
    validatePreconditions(request,false);
    if (isCollection) {
      handler.selectProcessor(ComplexCollectionProcessor.class).deleteComplexCollection(request,response,uriInfo);
    }
 else {
      handler.selectProcessor(ComplexProcessor.class).deleteComplex(request,response,uriInfo);
    }
  }
 else {
    throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
  }
}",0.9833487511563368
33237,"private void handleValueDispatching(final ODataRequest request,final ODataResponse response,final int lastPathSegmentIndex) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final UriResource resource=uriInfo.getUriResourceParts().get(lastPathSegmentIndex - 1);
  if (resource instanceof UriResourceProperty || resource instanceof UriResourceFunction && ((UriResourceFunction)resource).getType().getKind() == EdmTypeKind.PRIMITIVE) {
    final EdmType type=resource instanceof UriResourceProperty ? ((UriResourceProperty)resource).getType() : ((UriResourceFunction)resource).getType();
    final RepresentationType valueRepresentationType=type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Binary) ? RepresentationType.BINARY : RepresentationType.VALUE;
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),valueRepresentationType);
      handler.selectProcessor(PrimitiveValueProcessor.class).readPrimitiveValue(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT && resource instanceof UriResourceProperty) {
      validatePreconditions(request,false);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      checkContentTypeSupport(requestFormat,valueRepresentationType);
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),valueRepresentationType);
      handler.selectProcessor(PrimitiveValueProcessor.class).updatePrimitiveValue(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE && resource instanceof UriResourceProperty) {
      validatePreconditions(request,false);
      handler.selectProcessor(PrimitiveValueProcessor.class).deletePrimitiveValue(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
 else {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.MEDIA);
      handler.selectProcessor(MediaEntityProcessor.class).readMediaEntity(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT && resource instanceof UriResourceEntitySet) {
      validatePreconditions(request,true);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(MediaEntityProcessor.class).updateMediaEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE && resource instanceof UriResourceEntitySet) {
      validatePreconditions(request,true);
      handler.selectProcessor(MediaEntityProcessor.class).deleteMediaEntity(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
}","private void handleValueDispatching(final ODataRequest request,final ODataResponse response,final int lastPathSegmentIndex) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final UriResource resource=uriInfo.getUriResourceParts().get(lastPathSegmentIndex - 1);
  if (resource instanceof UriResourceProperty || resource instanceof UriResourceFunction && ((UriResourceFunction)resource).getType().getKind() == EdmTypeKind.PRIMITIVE) {
    final EdmType type=resource instanceof UriResourceProperty ? ((UriResourceProperty)resource).getType() : ((UriResourceFunction)resource).getType();
    final RepresentationType valueRepresentationType=type == EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Binary) ? RepresentationType.BINARY : RepresentationType.VALUE;
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),valueRepresentationType);
      handler.selectProcessor(PrimitiveValueProcessor.class).readPrimitiveValue(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT && resource instanceof UriResourceProperty) {
      validatePreconditions(request,false);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      checkContentTypeSupport(requestFormat,valueRepresentationType);
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),valueRepresentationType);
      handler.selectProcessor(PrimitiveValueProcessor.class).updatePrimitiveValue(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE && resource instanceof UriResourceProperty) {
      validatePreconditions(request,false);
      handler.selectProcessor(PrimitiveValueProcessor.class).deletePrimitiveValue(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
 else {
    if (method == HttpMethod.GET) {
      final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.MEDIA);
      handler.selectProcessor(MediaEntityProcessor.class).readMediaEntity(request,response,uriInfo,requestedContentType);
    }
 else     if (method == HttpMethod.PUT && resource instanceof UriResourceEntitySet) {
      validatePreconditions(request,true);
      final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
      final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),RepresentationType.ENTITY);
      handler.selectProcessor(MediaEntityProcessor.class).updateMediaEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
 else     if (method == HttpMethod.DELETE && resource instanceof UriResourceEntitySet) {
      validatePreconditions(request,true);
      handler.selectProcessor(MediaEntityProcessor.class).deleteMediaEntity(request,response,uriInfo);
    }
 else {
      throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
    }
  }
}",0.9791137454134914
33238,"private void handlePrimitiveDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final RepresentationType representationType=isCollection ? RepresentationType.COLLECTION_PRIMITIVE : RepresentationType.PRIMITIVE;
  if (method == HttpMethod.GET) {
    final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),representationType);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).readPrimitiveCollection(request,response,uriInfo,requestedContentType);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).readPrimitive(request,response,uriInfo,requestedContentType);
    }
  }
 else   if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
    validatePreconditions(request,false);
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,representationType);
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),representationType);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).updatePrimitiveCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).updatePrimitive(request,response,uriInfo,requestFormat,responseFormat);
    }
  }
 else   if (method == HttpMethod.DELETE) {
    validatePreconditions(request,false);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).deletePrimitiveCollection(request,response,uriInfo);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).deletePrimitive(request,response,uriInfo);
    }
  }
 else {
    throw new ODataHandlerException(""String_Node_Str"" + method + ""String_Node_Str"",ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
  }
}","private void handlePrimitiveDispatching(final ODataRequest request,final ODataResponse response,final boolean isCollection) throws ODataApplicationException, ODataLibraryException {
  final HttpMethod method=request.getMethod();
  final RepresentationType representationType=isCollection ? RepresentationType.COLLECTION_PRIMITIVE : RepresentationType.PRIMITIVE;
  if (method == HttpMethod.GET) {
    final ContentType requestedContentType=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),representationType);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).readPrimitiveCollection(request,response,uriInfo,requestedContentType);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).readPrimitive(request,response,uriInfo,requestedContentType);
    }
  }
 else   if (method == HttpMethod.PUT || method == HttpMethod.PATCH) {
    validatePreconditions(request,false);
    final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
    checkContentTypeSupport(requestFormat,representationType);
    final ContentType responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),representationType);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).updatePrimitiveCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).updatePrimitive(request,response,uriInfo,requestFormat,responseFormat);
    }
  }
 else   if (method == HttpMethod.DELETE) {
    validatePreconditions(request,false);
    if (isCollection) {
      handler.selectProcessor(PrimitiveCollectionProcessor.class).deletePrimitiveCollection(request,response,uriInfo);
    }
 else {
      handler.selectProcessor(PrimitiveProcessor.class).deletePrimitive(request,response,uriInfo);
    }
  }
 else {
    throw new ODataHandlerException(getMethodNotAllowedStringMessage(method),ODataHandlerException.MessageKeys.HTTP_METHOD_NOT_ALLOWED,method.toString());
  }
}",0.9833641404805916
33239,"private void handleActionDispatching(final ODataRequest request,final ODataResponse response,final UriResourceAction uriResourceAction) throws ODataApplicationException, ODataLibraryException {
  final EdmAction action=uriResourceAction.getAction();
  if (action.isBound()) {
    validatePreconditions(request,false);
  }
  final EdmReturnType returnType=action.getReturnType();
  final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
  checkContentTypeSupport(requestFormat,RepresentationType.ACTION_PARAMETERS);
  if (returnType == null) {
    handler.selectProcessor(ActionVoidProcessor.class).processActionVoid(request,response,uriInfo,requestFormat);
  }
 else {
    final boolean isCollection=returnType.isCollection();
    ContentType responseFormat;
switch (returnType.getType().getKind()) {
case ENTITY:
      responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_ENTITY : RepresentationType.ENTITY);
    if (isCollection) {
      handler.selectProcessor(ActionEntityCollectionProcessor.class).processActionEntityCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(ActionEntityProcessor.class).processActionEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
  break;
case PRIMITIVE:
responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_PRIMITIVE : RepresentationType.PRIMITIVE);
if (isCollection) {
handler.selectProcessor(ActionPrimitiveCollectionProcessor.class).processActionPrimitiveCollection(request,response,uriInfo,requestFormat,responseFormat);
}
 else {
handler.selectProcessor(ActionPrimitiveProcessor.class).processActionPrimitive(request,response,uriInfo,requestFormat,responseFormat);
}
break;
case COMPLEX:
responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_COMPLEX : RepresentationType.COMPLEX);
if (isCollection) {
handler.selectProcessor(ActionComplexCollectionProcessor.class).processActionComplexCollection(request,response,uriInfo,requestFormat,responseFormat);
}
 else {
handler.selectProcessor(ActionComplexProcessor.class).processActionComplex(request,response,uriInfo,requestFormat,responseFormat);
}
break;
default :
throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}
}","private void handleActionDispatching(final ODataRequest request,final ODataResponse response,final UriResourceAction uriResourceAction) throws ODataApplicationException, ODataLibraryException {
  final EdmAction action=uriResourceAction.getAction();
  if (action.isBound()) {
    validatePreconditions(request,false);
  }
  final EdmReturnType returnType=action.getReturnType();
  final ContentType requestFormat=ContentType.parse(request.getHeader(HttpHeader.CONTENT_TYPE));
  checkContentTypeSupport(requestFormat,RepresentationType.ACTION_PARAMETERS);
  if (returnType == null) {
    handler.selectProcessor(ActionVoidProcessor.class).processActionVoid(request,response,uriInfo,requestFormat);
  }
 else {
    final boolean isCollection=returnType.isCollection();
    ContentType responseFormat;
switch (returnType.getType().getKind()) {
case ENTITY:
      responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_ENTITY : RepresentationType.ENTITY);
    if (isCollection) {
      handler.selectProcessor(ActionEntityCollectionProcessor.class).processActionEntityCollection(request,response,uriInfo,requestFormat,responseFormat);
    }
 else {
      handler.selectProcessor(ActionEntityProcessor.class).processActionEntity(request,response,uriInfo,requestFormat,responseFormat);
    }
  break;
case PRIMITIVE:
responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_PRIMITIVE : RepresentationType.PRIMITIVE);
if (isCollection) {
handler.selectProcessor(ActionPrimitiveCollectionProcessor.class).processActionPrimitiveCollection(request,response,uriInfo,requestFormat,responseFormat);
}
 else {
handler.selectProcessor(ActionPrimitiveProcessor.class).processActionPrimitive(request,response,uriInfo,requestFormat,responseFormat);
}
break;
case COMPLEX:
responseFormat=ContentNegotiator.doContentNegotiation(uriInfo.getFormatOption(),request,handler.getCustomContentTypeSupport(),isCollection ? RepresentationType.COLLECTION_COMPLEX : RepresentationType.COMPLEX);
if (isCollection) {
handler.selectProcessor(ActionComplexCollectionProcessor.class).processActionComplexCollection(request,response,uriInfo,requestFormat,responseFormat);
}
 else {
handler.selectProcessor(ActionComplexProcessor.class).processActionComplex(request,response,uriInfo,requestFormat,responseFormat);
}
break;
default :
throw new ODataHandlerException(NOT_IMPLEMENTED_MESSAGE,ODataHandlerException.MessageKeys.FUNCTIONALITY_NOT_IMPLEMENTED);
}
}
}",0.9932049830124576
33240,"public ODataDispatcher(HttpMethod method,UriInfo uriInfo,ODataHandler handler){
  this.method=method;
  this.uriInfo=uriInfo;
  this.handler=handler;
}","public ODataDispatcher(UriInfo uriInfo,ODataHandler handler){
  this.uriInfo=uriInfo;
  this.handler=handler;
}",0.8473282442748091
33241,"private void validateODataVersion(final ODataRequest request) throws ODataHandlerException {
  final String maxVersion=request.getHeader(HttpHeader.ODATA_MAX_VERSION);
  if (maxVersion != null) {
    if (ODataServiceVersion.isBiggerThan(ODataServiceVersion.V40.toString(),maxVersion)) {
      throw new ODataHandlerException(""String_Node_Str"" + maxVersion,ODataHandlerException.MessageKeys.ODATA_VERSION_NOT_SUPPORTED,maxVersion);
    }
  }
}","private void validateODataVersion(final ODataRequest request) throws ODataHandlerException {
  final String maxVersion=request.getHeader(HttpHeader.ODATA_MAX_VERSION);
  if (maxVersion != null && ODataServiceVersion.isBiggerThan(ODataServiceVersion.V40.toString(),maxVersion)) {
    throw new ODataHandlerException(""String_Node_Str"" + maxVersion,ODataHandlerException.MessageKeys.ODATA_VERSION_NOT_SUPPORTED,maxVersion);
  }
}",0.7903225806451613
33242,"private void processInternal(final ODataRequest request,final ODataResponse response) throws ODataApplicationException, ODataLibraryException {
  response.setHeader(HttpHeader.ODATA_VERSION,ODataServiceVersion.V40.toString());
  validateODataVersion(request);
  int measurementUriParser=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  uriInfo=new Parser().parseUri(request.getRawODataPath(),request.getRawQueryPath(),null,serviceMetadata.getEdm());
  debugger.stopRuntimeMeasurement(measurementUriParser);
  int measurementUriValidator=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  final HttpMethod method=request.getMethod();
  new UriValidator().validate(uriInfo,method);
  debugger.stopRuntimeMeasurement(measurementUriValidator);
  int measurementDispatcher=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  new ODataDispatcher(method,uriInfo,this).dispatch(request,response);
  debugger.stopRuntimeMeasurement(measurementDispatcher);
}","private void processInternal(final ODataRequest request,final ODataResponse response) throws ODataApplicationException, ODataLibraryException {
  response.setHeader(HttpHeader.ODATA_VERSION,ODataServiceVersion.V40.toString());
  validateODataVersion(request);
  int measurementUriParser=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  uriInfo=new Parser().parseUri(request.getRawODataPath(),request.getRawQueryPath(),null,serviceMetadata.getEdm());
  debugger.stopRuntimeMeasurement(measurementUriParser);
  int measurementUriValidator=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  final HttpMethod method=request.getMethod();
  new UriValidator().validate(uriInfo,method);
  debugger.stopRuntimeMeasurement(measurementUriValidator);
  int measurementDispatcher=debugger.startRuntimeMeasurement(""String_Node_Str"",""String_Node_Str"");
  new ODataDispatcher(uriInfo,this).dispatch(request,response);
  debugger.stopRuntimeMeasurement(measurementDispatcher);
}",0.9965397923875432
33243,"public ODataHandlerException(final String developmentMessage,final MessageKey messageKey,final String... parameters){
  super(developmentMessage,messageKey,parameters);
}","public ODataHandlerException(final String developmentMessage,final Throwable cause,final MessageKey messageKey,final String... parameters){
  super(developmentMessage,cause,messageKey,parameters);
}",0.9239130434782608
33244,"static HttpMethod extractMethod(final HttpServletRequest httpRequest) throws ODataLibraryException {
  try {
    HttpMethod httpRequestMethod=HttpMethod.valueOf(httpRequest.getMethod());
    if (httpRequestMethod == HttpMethod.POST) {
      String xHttpMethod=httpRequest.getHeader(HttpHeader.X_HTTP_METHOD);
      String xHttpMethodOverride=httpRequest.getHeader(HttpHeader.X_HTTP_METHOD_OVERRIDE);
      if (xHttpMethod == null && xHttpMethodOverride == null) {
        return httpRequestMethod;
      }
 else       if (xHttpMethod == null) {
        return HttpMethod.valueOf(xHttpMethodOverride);
      }
 else       if (xHttpMethodOverride == null) {
        return HttpMethod.valueOf(xHttpMethod);
      }
 else {
        if (!xHttpMethod.equalsIgnoreCase(xHttpMethodOverride)) {
          throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.AMBIGUOUS_XHTTP_METHOD,xHttpMethod,xHttpMethodOverride);
        }
        return HttpMethod.valueOf(xHttpMethod);
      }
    }
 else {
      return httpRequestMethod;
    }
  }
 catch (  IllegalArgumentException e) {
    throw new ODataHandlerException(""String_Node_Str"" + httpRequest.getMethod(),ODataHandlerException.MessageKeys.INVALID_HTTP_METHOD,httpRequest.getMethod());
  }
}","static HttpMethod extractMethod(final HttpServletRequest httpRequest) throws ODataLibraryException {
  try {
    HttpMethod httpRequestMethod=HttpMethod.valueOf(httpRequest.getMethod());
    if (httpRequestMethod == HttpMethod.POST) {
      String xHttpMethod=httpRequest.getHeader(HttpHeader.X_HTTP_METHOD);
      String xHttpMethodOverride=httpRequest.getHeader(HttpHeader.X_HTTP_METHOD_OVERRIDE);
      if (xHttpMethod == null && xHttpMethodOverride == null) {
        return httpRequestMethod;
      }
 else       if (xHttpMethod == null) {
        return HttpMethod.valueOf(xHttpMethodOverride);
      }
 else       if (xHttpMethodOverride == null) {
        return HttpMethod.valueOf(xHttpMethod);
      }
 else {
        if (!xHttpMethod.equalsIgnoreCase(xHttpMethodOverride)) {
          throw new ODataHandlerException(""String_Node_Str"",ODataHandlerException.MessageKeys.AMBIGUOUS_XHTTP_METHOD,xHttpMethod,xHttpMethodOverride);
        }
        return HttpMethod.valueOf(xHttpMethod);
      }
    }
 else {
      return httpRequestMethod;
    }
  }
 catch (  IllegalArgumentException e) {
    throw new ODataHandlerException(""String_Node_Str"" + httpRequest.getMethod(),e,ODataHandlerException.MessageKeys.INVALID_HTTP_METHOD,httpRequest.getMethod());
  }
}",0.999209486166008
33245,"protected static void appendHtmlTable(final Writer writer,final Map<String,String> entries) throws IOException {
  writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  for (  final String name : entries.keySet()) {
    final String value=entries.get(name);
    writer.append(""String_Node_Str"").append(name).append(""String_Node_Str"").append(""String_Node_Str"");
    if (value != null) {
      writer.append(escapeHtml(value));
    }
 else {
      writer.append(""String_Node_Str"");
    }
    writer.append(""String_Node_Str"");
  }
  writer.append(""String_Node_Str"");
}","protected static void appendHtmlTable(final Writer writer,final Map<String,String> entries) throws IOException {
  writer.append(""String_Node_Str"").append(""String_Node_Str"").append(""String_Node_Str"");
  for (  final Entry<String,String> entry : entries.entrySet()) {
    writer.append(""String_Node_Str"").append(entry.getKey()).append(""String_Node_Str"").append(""String_Node_Str"");
    if (entry.getValue() != null) {
      writer.append(escapeHtml(entry.getValue()));
    }
 else {
      writer.append(""String_Node_Str"");
    }
    writer.append(""String_Node_Str"");
  }
  writer.append(""String_Node_Str"");
}",0.7236514522821577
33246,"private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  IOException cachedException=null;
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new JsonFactory().createGenerator(outputStream,JsonEncoding.UTF8);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
}","private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  IOException cachedException=null;
  OutputStream outputStream=null;
  try {
    CircleStreamBuffer csb=new CircleStreamBuffer();
    outputStream=csb.getOutputStream();
    JsonGenerator gen=new JsonFactory().createGenerator(outputStream,JsonEncoding.UTF8);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    outputStream.close();
    return csb.getInputStream();
  }
  finally {
    if (outputStream != null) {
      try {
        outputStream.close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
}",0.8672760511882999
33247,"private List<DebugTab> createParts(DebugInformation debugInfo){
  List<DebugTab> parts=new ArrayList<DebugTab>();
  parts.add(new DebugTabRequest(debugInfo.getRequest()));
  parts.add(new DebugTabResponse(debugInfo.getApplicationResponse(),debugInfo.getRequest().getRawBaseUri()));
  Map<String,String> serverEnvironmentVaribles=debugInfo.getServerEnvironmentVaribles();
  if (serverEnvironmentVaribles != null && !serverEnvironmentVaribles.isEmpty()) {
    parts.add(new DebugTabServer(serverEnvironmentVaribles));
  }
  if (debugInfo.getUriInfo() != null) {
    parts.add(new DebugTabUri(debugInfo.getUriInfo()));
  }
  List<RuntimeMeasurement> runtimeInformation=debugInfo.getRuntimeInformation();
  if (runtimeInformation != null && !runtimeInformation.isEmpty()) {
    parts.add(new DebugTabRuntime(runtimeInformation));
  }
  if (debugInfo.getException() != null) {
    parts.add(new DebugTabException(debugInfo.getException()));
  }
  return parts;
}","private List<DebugTab> createParts(DebugInformation debugInfo){
  List<DebugTab> parts=new ArrayList<DebugTab>();
  parts.add(new DebugTabRequest(debugInfo.getRequest()));
  parts.add(new DebugTabResponse(debugInfo.getApplicationResponse(),debugInfo.getRequest().getRawBaseUri()));
  Map<String,String> serverEnvironmentVaribles=debugInfo.getServerEnvironmentVaribles();
  if (serverEnvironmentVaribles != null && !serverEnvironmentVaribles.isEmpty()) {
    parts.add(new DebugTabServer(serverEnvironmentVaribles));
  }
  if (debugInfo.getUriInfo() != null) {
    parts.add(new DebugTabUri(debugInfo.getUriInfo()));
  }
  List<RuntimeMeasurement> runtimeInformation=debugInfo.getRuntimeInformation();
  if (runtimeInformation != null && !runtimeInformation.isEmpty()) {
    parts.add(new DebugTabRuntime(runtimeInformation));
  }
  if (debugInfo.getException() != null) {
    parts.add(new DebugTabStacktrace(debugInfo.getException()));
  }
  return parts;
}",0.9754569190600524
33248,"/** 
 * Gets the name of this debug information part, useful as title.
 * @return the name
 */
public String getName();","/** 
 * Gets the name of this debug information part, useful as title.
 * @return the name
 */
String getName();",0.9696969696969696
33249,"/** 
 * Appends the content of this debug information part to the given writer.
 * @param writer a {@link Writer}
 */
public void appendHtml(Writer writer) throws IOException ;","/** 
 * Appends the content of this debug information part to the given writer.
 * @param writer a {@link Writer}
 */
void appendHtml(Writer writer) throws IOException ;",0.9797101449275364
33250,"/** 
 * Appends the content of this debug information part to the given JSON stream writer.
 * @param jsonGenerator a JSON generator
 */
public void appendJson(JsonGenerator jsonGenerator) throws IOException ;","/** 
 * Appends the content of this debug information part to the given JSON stream writer.
 * @param jsonGenerator a JSON generator
 */
void appendJson(JsonGenerator jsonGenerator) throws IOException ;",0.9829683698296836
33251,"private String getContentString(){
  try {
    String contentString;
switch (responseContent) {
case IMAGE:
      contentString=Base64.encodeBase64String(IOUtils.toString(response.getContent()).getBytes());
    break;
case JSON:
case XML:
case TEXT:
default :
  contentString=IOUtils.toString(response.getContent(),""String_Node_Str"");
break;
}
return contentString;
}
 catch (IOException e) {
return ""String_Node_Str"";
}
}","private String getContentString(){
  try {
    String contentString;
switch (responseContent) {
case IMAGE:
      contentString=Base64.encodeBase64String(IOUtils.toString(response.getContent()).getBytes(""String_Node_Str""));
    break;
case JSON:
case XML:
case TEXT:
default :
  contentString=IOUtils.toString(response.getContent(),""String_Node_Str"");
break;
}
return contentString;
}
 catch (IOException e) {
return ""String_Node_Str"";
}
}",0.9802555168408827
33252,"public DebugTabRequest(ODataRequest request){
  if (request != null) {
    method=request.getMethod() == null ? ""String_Node_Str"" : request.getMethod().toString();
    uri=request.getRawRequestUri() == null ? ""String_Node_Str"" : request.getRawRequestUri();
    protocol=request.getProtocol() == null ? ""String_Node_Str"" : request.getProtocol();
    headers=request.getAllHeaders();
  }
 else {
    method=""String_Node_Str"";
    uri=""String_Node_Str"";
    protocol=""String_Node_Str"";
    headers=Collections.emptyMap();
  }
}","public DebugTabRequest(ODataRequest request){
  if (request != null) {
    method=request.getMethod() == null ? UNKOWN_MSG : request.getMethod().toString();
    uri=request.getRawRequestUri() == null ? UNKOWN_MSG : request.getRawRequestUri();
    protocol=request.getProtocol() == null ? UNKOWN_MSG : request.getProtocol();
    headers=request.getAllHeaders();
  }
 else {
    method=UNKOWN_MSG;
    uri=UNKOWN_MSG;
    protocol=UNKOWN_MSG;
    headers=Collections.emptyMap();
  }
}",0.8190854870775348
33253,"/** 
 * <p>Determines whether this accept type matches a given content type.</p> <p>A match is defined as fulfilling all of the following conditions: <ul> <li>the type must be '*' or equal to the content-type's type,</li> <li>the subtype must be '*' or equal to the content-type's subtype,</li> <li>all parameters must have the same value as in the content-type's parameter map.</li> </ul></p>
 * @param contentType
 * @return whether this accept type matches the given content type
 */
public boolean matches(final ContentType contentType){
  if (type.equals(TypeUtil.MEDIA_TYPE_WILDCARD)) {
    return true;
  }
  if (!type.equalsIgnoreCase(contentType.getType())) {
    return false;
  }
  if (subtype.equals(TypeUtil.MEDIA_TYPE_WILDCARD)) {
    return true;
  }
  if (!subtype.equalsIgnoreCase(contentType.getSubtype())) {
    return false;
  }
  Map<String,String> compareParameters=contentType.getParameters();
  for (  final String key : parameters.keySet()) {
    if (compareParameters.containsKey(key) || TypeUtil.PARAMETER_Q.equalsIgnoreCase(key)) {
      if (!parameters.get(key).equalsIgnoreCase(compareParameters.get(key)) && !TypeUtil.PARAMETER_Q.equalsIgnoreCase(key)) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}","/** 
 * <p>Determines whether this accept type matches a given content type.</p> <p>A match is defined as fulfilling all of the following conditions: <ul> <li>the type must be '*' or equal to the content-type's type,</li> <li>the subtype must be '*' or equal to the content-type's subtype,</li> <li>all parameters must have the same value as in the content-type's parameter map.</li> </ul></p>
 * @param contentType content type against which is matched
 * @return whether this accept type matches the given content type
 */
public boolean matches(final ContentType contentType){
  if (type.equals(TypeUtil.MEDIA_TYPE_WILDCARD)) {
    return true;
  }
  if (!type.equalsIgnoreCase(contentType.getType())) {
    return false;
  }
  if (subtype.equals(TypeUtil.MEDIA_TYPE_WILDCARD)) {
    return true;
  }
  if (!subtype.equalsIgnoreCase(contentType.getSubtype())) {
    return false;
  }
  Map<String,String> compareParameters=contentType.getParameters();
  for (  final Map.Entry<String,String> entry : parameters.entrySet()) {
    if (compareParameters.containsKey(entry.getKey()) || TypeUtil.PARAMETER_Q.equalsIgnoreCase(entry.getKey())) {
      String compare=compareParameters.get(entry.getKey());
      if (!entry.getValue().equalsIgnoreCase(compare) && !TypeUtil.PARAMETER_Q.equalsIgnoreCase(entry.getKey())) {
        return false;
      }
    }
 else {
      return false;
    }
  }
  return true;
}",0.913156913902348
33254,"@Override public String toString(){
  StringBuilder result=new StringBuilder();
  result.append(type).append('/').append(subtype);
  for (  final String key : parameters.keySet()) {
    result.append(';').append(key).append('=').append(parameters.get(key));
  }
  return result.toString();
}","@Override public String toString(){
  StringBuilder result=new StringBuilder();
  result.append(type).append('/').append(subtype);
  for (  final Map.Entry<String,String> entry : parameters.entrySet()) {
    result.append(';').append(entry.getKey()).append('=').append(entry.getValue());
  }
  return result.toString();
}",0.8464052287581699
33255,"/** 
 * Gets   {@link ContentType} as string as defined in<a href=""http://www.ietf.org/rfc/rfc7231.txt"">RFC 7231</a>, chapter 3.1.1.1: Media Type.
 * @return string representation of {@link ContentType} object
 */
public String toContentTypeString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(type).append(TypeUtil.TYPE_SUBTYPE_SEPARATOR).append(subtype);
  for (  String key : parameters.keySet()) {
    sb.append(TypeUtil.PARAMETER_SEPARATOR).append(key).append(TypeUtil.PARAMETER_KEY_VALUE_SEPARATOR).append(parameters.get(key));
  }
  return sb.toString();
}","/** 
 * Gets   {@link ContentType} as string as defined in<a href=""http://www.ietf.org/rfc/rfc7231.txt"">RFC 7231</a>, chapter 3.1.1.1: Media Type.
 * @return string representation of {@link ContentType} object
 */
public String toContentTypeString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(type).append(TypeUtil.TYPE_SUBTYPE_SEPARATOR).append(subtype);
  for (  Entry<String,String> entry : parameters.entrySet()) {
    sb.append(TypeUtil.PARAMETER_SEPARATOR).append(entry.getKey()).append(TypeUtil.PARAMETER_KEY_VALUE_SEPARATOR).append(entry.getValue());
  }
  return sb.toString();
}",0.9238578680203046
33256,"@Override public int hashCode(){
  String hash=functionName.toString();
  if (bindingParameterTypeName != null) {
    hash=hash + bindingParameterTypeName.toString();
  }
 else {
    hash=hash + ""String_Node_Str"";
  }
  if (isBindingParameterCollection != null) {
    hash=hash + isBindingParameterCollection.toString();
  }
 else {
    hash=hash + ""String_Node_Str"";
  }
  if (!parameterNames.isEmpty()) {
    for (    String name : parameterNames) {
      hash=hash + name;
    }
  }
 else {
    hash=hash + ""String_Node_Str"";
  }
  return hash.hashCode();
}","@Override public int hashCode(){
  int result=functionName != null ? functionName.hashCode() : 0;
  result=31 * result + (bindingParameterTypeName != null ? bindingParameterTypeName.hashCode() : 0);
  result=31 * result + (isBindingParameterCollection != null ? isBindingParameterCollection.hashCode() : 0);
  result=31 * result + parameterNames.hashCode();
  return result;
}",0.3846153846153846
33257,"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if ((obj == null) || !(obj instanceof FunctionMapKey)) {
    return false;
  }
  final FunctionMapKey other=(FunctionMapKey)obj;
  if (functionName.equals(other.functionName) && (bindingParameterTypeName == null && other.bindingParameterTypeName == null) || (bindingParameterTypeName != null && bindingParameterTypeName.equals(other.bindingParameterTypeName)) && (isBindingParameterCollection == null && other.isBindingParameterCollection == null) || (isBindingParameterCollection != null && isBindingParameterCollection.equals(other.isBindingParameterCollection))) {
    if (parameterNames == null && other.parameterNames == null) {
      return true;
    }
 else     if (parameterNames.size() == other.parameterNames.size()) {
      for (      String name : parameterNames) {
        if (!other.parameterNames.contains(name)) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}","@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if ((obj == null) || !(obj instanceof FunctionMapKey)) {
    return false;
  }
  final FunctionMapKey other=(FunctionMapKey)obj;
  if (functionName.equals(other.functionName) && (bindingParameterTypeName == null && other.bindingParameterTypeName == null) || (bindingParameterTypeName != null && bindingParameterTypeName.equals(other.bindingParameterTypeName)) && (isBindingParameterCollection == null && other.isBindingParameterCollection == null) || (isBindingParameterCollection != null && isBindingParameterCollection.equals(other.isBindingParameterCollection))) {
    if (parameterNames.size() == other.parameterNames.size()) {
      for (      String name : parameterNames) {
        if (!other.parameterNames.contains(name)) {
          return false;
        }
      }
      return true;
    }
  }
  return false;
}",0.7724209434940383
33258,"/** 
 * Returns a string representation that can be used as value of a Preference-Applied HTTP response header. 
 */
public String toValueString(){
  StringBuilder result=new StringBuilder();
  for (  final String name : applied.keySet()) {
    if (result.length() > 0) {
      result.append(',').append(' ');
    }
    result.append(name);
    if (applied.get(name) != null) {
      final boolean safe=ODataPreferenceNames.ALLOW_ENTITY_REFERENCES.toString().equals(name) || ODataPreferenceNames.CALLBACK.toString().equals(name) || ODataPreferenceNames.CONTINUE_ON_ERROR.toString().equals(name)|| ODataPreferenceNames.MAX_PAGE_SIZE.toString().equals(name)|| ODataPreferenceNames.TRACK_CHANGES.toString().equals(name)|| ODataPreferenceNames.RETURN.toString().equals(name)|| ODataPreferenceNames.RESPOND_ASYNC.toString().equals(name)|| ODataPreferenceNames.WAIT.toString().equals(name);
      result.append('=').append(safe ? ""String_Node_Str"" : '""').append(applied.get(name).replaceAll(""String_Node_Str"",""String_Node_Str"")).append(safe ? ""String_Node_Str"" : '""');
    }
  }
  return result.toString();
}","/** 
 * Returns a string representation that can be used as value of a Preference-Applied HTTP response header. 
 */
public String toValueString(){
  StringBuilder result=new StringBuilder();
  for (  final Map.Entry<String,String> entry : applied.entrySet()) {
    if (result.length() > 0) {
      result.append(',').append(' ');
    }
    final String key=entry.getKey();
    result.append(key);
    if (entry.getValue() != null) {
      final boolean safe=ODataPreferenceNames.ALLOW_ENTITY_REFERENCES.toString().equals(key) || ODataPreferenceNames.CALLBACK.toString().equals(key) || ODataPreferenceNames.CONTINUE_ON_ERROR.toString().equals(key)|| ODataPreferenceNames.MAX_PAGE_SIZE.toString().equals(key)|| ODataPreferenceNames.TRACK_CHANGES.toString().equals(key)|| ODataPreferenceNames.RETURN.toString().equals(key)|| ODataPreferenceNames.RESPOND_ASYNC.toString().equals(key)|| ODataPreferenceNames.WAIT.toString().equals(key);
      result.append('=').append(safe ? ""String_Node_Str"" : '""').append(entry.getValue().replaceAll(""String_Node_Str"",""String_Node_Str"")).append(safe ? ""String_Node_Str"" : '""');
    }
  }
  return result.toString();
}",0.8662816525988449
33259,"private String removeSlash(final String rawODataPath,final boolean first){
  final int indexOfSlash=rawODataPath.indexOf(""String_Node_Str"");
  if (first) {
    return (indexOfSlash == 0) ? rawODataPath.substring(1) : rawODataPath;
  }
 else {
    return (indexOfSlash != -1) ? rawODataPath.substring(0,indexOfSlash) : rawODataPath;
  }
}","private String removeSlash(final String rawODataPath,final boolean first){
  final int indexOfSlash=rawODataPath.indexOf('/');
  if (first) {
    return (indexOfSlash == 0) ? rawODataPath.substring(1) : rawODataPath;
  }
 else {
    return (indexOfSlash != -1) ? rawODataPath.substring(0,indexOfSlash) : rawODataPath;
  }
}",0.9696969696969696
33260,"private void updateCurrentCharset(String currentLine){
  if (currentLine != null) {
    if (currentLine.startsWith(HttpHeader.CONTENT_TYPE)) {
      currentLine=currentLine.substring(13,currentLine.length() - 2).trim();
      ContentType ct=ContentType.parse(currentLine);
      if (ct != null) {
        String charsetString=ct.getParameter(ContentType.PARAMETER_CHARSET);
        if (charsetString != null) {
          currentCharset=Charset.forName(charsetString);
        }
 else {
          currentCharset=DEFAULT_CHARSET;
        }
        String boundary=ct.getParameter(BOUNDARY);
        if (boundary != null) {
          currentBoundary=DOUBLE_DASH + boundary;
        }
      }
    }
 else     if (CRLF.equals(currentLine)) {
      readState.foundLinebreak();
    }
 else     if (isBoundary(currentLine)) {
      readState.foundBoundary();
    }
  }
}","private void updateCurrentCharset(String currentLine){
  if (currentLine != null) {
    if (currentLine.startsWith(HttpHeader.CONTENT_TYPE)) {
      String clValue=currentLine.substring(13,currentLine.length() - 2).trim();
      ContentType ct=ContentType.parse(clValue);
      if (ct != null) {
        String charsetString=ct.getParameter(ContentType.PARAMETER_CHARSET);
        if (charsetString != null) {
          currentCharset=Charset.forName(charsetString);
        }
 else {
          currentCharset=DEFAULT_CHARSET;
        }
        String boundary=ct.getParameter(BOUNDARY);
        if (boundary != null) {
          currentBoundary=DOUBLE_DASH + boundary;
        }
      }
    }
 else     if (CRLF.equals(currentLine)) {
      readState.foundLinebreak();
    }
 else     if (isBoundary(currentLine)) {
      readState.foundBoundary();
    }
  }
}",0.9785258270458502
33261,"String readLine() throws IOException {
  if (limit == EOF) {
    return null;
  }
  ByteBuffer buffer=ByteBuffer.allocate(BUFFER_SIZE);
  boolean foundLineEnd=false;
  while (!foundLineEnd) {
    if (limit == offset) {
      if (fillBuffer() == EOF) {
        foundLineEnd=true;
      }
    }
    if (!foundLineEnd) {
      byte currentChar=this.buffer[offset++];
      if (!buffer.hasRemaining()) {
        buffer.flip();
        ByteBuffer tmp=ByteBuffer.allocate(buffer.limit() * 2);
        tmp.put(buffer);
        buffer=tmp;
      }
      buffer.put(currentChar);
      if (currentChar == LF) {
        foundLineEnd=true;
      }
 else       if (currentChar == CR) {
        foundLineEnd=true;
        if (limit == offset) {
          fillBuffer();
        }
        if (limit != EOF && this.buffer[offset] == LF) {
          buffer.put(LF);
          offset++;
        }
      }
    }
  }
  if (buffer.position() == 0) {
    return null;
  }
 else {
    String currentLine;
    if (readState.isReadBody()) {
      currentLine=new String(buffer.array(),0,buffer.position(),getCurrentCharset());
    }
 else {
      currentLine=new String(buffer.array(),0,buffer.position(),CS_ISO_8859_1);
    }
    updateCurrentCharset(currentLine);
    return currentLine;
  }
}","String readLine() throws IOException {
  if (limit == EOF) {
    return null;
  }
  ByteBuffer innerBuffer=ByteBuffer.allocate(BUFFER_SIZE);
  boolean foundLineEnd=false;
  while (!foundLineEnd) {
    if (limit == offset) {
      if (fillBuffer() == EOF) {
        foundLineEnd=true;
      }
    }
    if (!foundLineEnd) {
      byte currentChar=this.buffer[offset++];
      if (!innerBuffer.hasRemaining()) {
        innerBuffer.flip();
        ByteBuffer tmp=ByteBuffer.allocate(innerBuffer.limit() * 2);
        tmp.put(innerBuffer);
        innerBuffer=tmp;
      }
      innerBuffer.put(currentChar);
      if (currentChar == LF) {
        foundLineEnd=true;
      }
 else       if (currentChar == CR) {
        foundLineEnd=true;
        if (limit == offset) {
          fillBuffer();
        }
        if (limit != EOF && this.buffer[offset] == LF) {
          innerBuffer.put(LF);
          offset++;
        }
      }
    }
  }
  if (innerBuffer.position() == 0) {
    return null;
  }
 else {
    String currentLine;
    if (readState.isReadBody()) {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),getCurrentCharset());
    }
 else {
      currentLine=new String(innerBuffer.array(),0,innerBuffer.position(),CS_ISO_8859_1);
    }
    updateCurrentCharset(currentLine);
    return currentLine;
  }
}",0.9527831094049904
33262,"static List<String> splitSkipEmpty(final String input,final char c){
  if (input.isEmpty() || input.length() == 1 && input.charAt(0) == c) {
    return Collections.emptyList();
  }
  List<String> list=new LinkedList<String>();
  int start=0;
  int end;
  while ((end=input.indexOf(c,start)) >= 0) {
    if (start != end) {
      list.add(input.substring(start,end));
    }
    start=end + 1;
  }
  if (input.charAt(input.length() - 1) != c) {
    list.add(input.substring(start));
  }
  return list;
}","/** 
 * Split the input string at given character and drop all empty elements.
 * @param input string to split
 * @param c character at which to split
 * @return list of elements (can be empty)
 */
static List<String> splitSkipEmpty(final String input,final char c){
  if (input.isEmpty() || input.length() == 1 && input.charAt(0) == c) {
    return Collections.emptyList();
  }
  List<String> list=new LinkedList<String>();
  int start=0;
  int end;
  while ((end=input.indexOf(c,start)) >= 0) {
    if (start != end) {
      list.add(input.substring(start,end));
    }
    start=end + 1;
  }
  if (input.charAt(input.length() - 1) != c) {
    list.add(input.substring(start));
  }
  return list;
}",0.835
33263,"@Test public void testSplit(){
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/'));
  assertTrue(UriDecoder.split(""String_Node_Str"",'/',true).isEmpty());
  assertTrue(UriDecoder.split(""String_Node_Str"",'/',true).isEmpty());
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/',true));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/',true));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/',true));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/',true));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.split(""String_Node_Str"",'/',true));
  assertTrue(UriDecoder.splitSkipEmpty(""String_Node_Str"",'/').isEmpty());
  assertTrue(UriDecoder.splitSkipEmpty(""String_Node_Str"",'/').isEmpty());
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
}","@Test public void testSplit(){
  assertTrue(UriDecoder.splitSkipEmpty(""String_Node_Str"",'/').isEmpty());
  assertTrue(UriDecoder.splitSkipEmpty(""String_Node_Str"",'/').isEmpty());
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
  assertEquals(Arrays.asList(""String_Node_Str"",""String_Node_Str""),UriDecoder.splitSkipEmpty(""String_Node_Str"",'/'));
}",0.5058697972251868
33264,"public static InputStream convertLineListToInputStream(final List<Line> list,final int length){
  final String message=trimLineListToLength(list,length);
  return new ByteArrayInputStream(message.getBytes());
}","public static InputStream convertLineListToInputStream(final List<Line> list,final Charset charset,final int length){
  final String message=trimLineListToLength(list,length);
  return new ByteArrayInputStream(message.getBytes(charset));
}",0.935412026726058
33265,"private InputStream getBodyStream(final BatchQueryOperation operation,final HttpRequestStatusLine statusLine) throws BatchDeserializerException {
  if (statusLine.getMethod().equals(HttpMethod.GET)) {
    return new ByteArrayInputStream(new byte[0]);
  }
 else {
    int contentLength=BatchTransformatorCommon.getContentLength(operation.getHeaders());
    if (contentLength == -1) {
      return BatchParserCommon.convertLineListToInputStream(operation.getBody());
    }
 else {
      return BatchParserCommon.convertLineListToInputStream(operation.getBody(),contentLength);
    }
  }
}","private InputStream getBodyStream(final BatchQueryOperation operation,final HttpRequestStatusLine statusLine,final Charset charset) throws BatchDeserializerException {
  if (statusLine.getMethod().equals(HttpMethod.GET)) {
    return new ByteArrayInputStream(new byte[0]);
  }
 else {
    int contentLength=BatchTransformatorCommon.getContentLength(operation.getHeaders());
    if (contentLength == -1) {
      return BatchParserCommon.convertLineListToInputStream(operation.getBody(),charset);
    }
 else {
      return BatchParserCommon.convertLineListToInputStream(operation.getBody(),charset,contentLength);
    }
  }
}",0.968595041322314
33266,"private ODataRequest createRequest(final BatchQueryOperation operation,final String baseUri,final boolean isChangeSet) throws BatchDeserializerException {
  final HttpRequestStatusLine statusLine=new HttpRequestStatusLine(operation.getHttpStatusLine(),baseUri,rawServiceResolutionUri);
  statusLine.validateHttpMethod(isChangeSet);
  validateBody(statusLine,operation);
  InputStream bodyStrean=getBodyStream(operation,statusLine);
  validateForbiddenHeader(operation);
  final ODataRequest request=new ODataRequest();
  request.setBody(bodyStrean);
  request.setMethod(statusLine.getMethod());
  request.setRawBaseUri(statusLine.getRawBaseUri());
  request.setRawODataPath(statusLine.getRawODataPath());
  request.setRawQueryPath(statusLine.getRawQueryPath());
  request.setRawRequestUri(statusLine.getRawRequestUri());
  request.setRawServiceResolutionUri(statusLine.getRawServiceResolutionUri());
  for (  final HeaderField field : operation.getHeaders()) {
    request.addHeader(field.getFieldName(),field.getValues());
  }
  return request;
}","private ODataRequest createRequest(final BatchQueryOperation operation,final String baseUri,final boolean isChangeSet) throws BatchDeserializerException {
  final HttpRequestStatusLine statusLine=new HttpRequestStatusLine(operation.getHttpStatusLine(),baseUri,rawServiceResolutionUri);
  statusLine.validateHttpMethod(isChangeSet);
  validateBody(statusLine,operation);
  Charset charset=getCharset(operation);
  InputStream bodyStrean=getBodyStream(operation,statusLine,charset);
  validateForbiddenHeader(operation);
  final ODataRequest request=new ODataRequest();
  request.setBody(bodyStrean);
  request.setMethod(statusLine.getMethod());
  request.setRawBaseUri(statusLine.getRawBaseUri());
  request.setRawODataPath(statusLine.getRawODataPath());
  request.setRawQueryPath(statusLine.getRawQueryPath());
  request.setRawRequestUri(statusLine.getRawRequestUri());
  request.setRawServiceResolutionUri(statusLine.getRawServiceResolutionUri());
  for (  final HeaderField field : operation.getHeaders()) {
    request.addHeader(field.getFieldName(),field.getValues());
  }
  return request;
}",0.9771348576761548
33267,"public String toString(){
  return new String(buffer.array(),0,buffer.position());
}","public String toString(){
  return new String(buffer.array(),0,buffer.position(),CHARSET_ISO_8859_1);
}",0.8983957219251337
33268,"public static URI create(final ContextURL contextURL){
  StringBuilder result=new StringBuilder();
  if (contextURL.getServiceRoot() != null) {
    result.append(contextURL.getServiceRoot());
  }
 else   if (contextURL.getODataPath() != null) {
    String oDataPath=contextURL.getODataPath();
    char[] chars=oDataPath.toCharArray();
    for (int i=1; i < chars.length - 1; i++) {
      if (chars[i] == '/' && chars[i - 1] != '/') {
        result.append(""String_Node_Str"");
      }
    }
  }
  result.append(Constants.METADATA);
  if (contextURL.getEntitySetOrSingletonOrType() != null) {
    result.append('#');
    if (contextURL.isCollection()) {
      result.append(""String_Node_Str"").append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType())).append(""String_Node_Str"");
    }
 else {
      result.append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType()));
    }
  }
  if (contextURL.getDerivedEntity() != null) {
    if (contextURL.getEntitySetOrSingletonOrType() == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    result.append('/').append(Encoder.encode(contextURL.getDerivedEntity()));
  }
  if (contextURL.getKeyPath() != null) {
    result.append('(').append(contextURL.getKeyPath()).append(')');
  }
  if (contextURL.getNavOrPropertyPath() != null) {
    result.append('/').append(contextURL.getNavOrPropertyPath());
  }
  if (contextURL.getSelectList() != null) {
    result.append('(').append(contextURL.getSelectList()).append(')');
  }
  if (contextURL.isReference()) {
    if (contextURL.getEntitySetOrSingletonOrType() != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (contextURL.isCollection()) {
      result.append('#');
      result.append(""String_Node_Str"").append(ContextURL.Suffix.REFERENCE.getRepresentation()).append(""String_Node_Str"");
    }
 else {
      result.append('#').append(ContextURL.Suffix.REFERENCE.getRepresentation());
    }
  }
 else   if (contextURL.getSuffix() != null) {
    if (contextURL.getEntitySetOrSingletonOrType() == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    result.append('/').append(contextURL.getSuffix().getRepresentation());
  }
  return URI.create(result.toString());
}","public static URI create(final ContextURL contextURL){
  StringBuilder result=new StringBuilder();
  if (contextURL.getServiceRoot() != null) {
    result.append(contextURL.getServiceRoot());
  }
 else   if (contextURL.getODataPath() != null) {
    String oDataPath=contextURL.getODataPath();
    char[] chars=oDataPath.toCharArray();
    for (int i=1; i < chars.length - 1; i++) {
      if (chars[i] == '/' && chars[i - 1] != '/') {
        result.append(""String_Node_Str"");
      }
    }
  }
  result.append(Constants.METADATA);
  if (contextURL.getEntitySetOrSingletonOrType() != null) {
    result.append('#');
    if (contextURL.isCollection()) {
      result.append(""String_Node_Str"").append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType())).append(""String_Node_Str"");
    }
 else {
      result.append(Encoder.encode(contextURL.getEntitySetOrSingletonOrType()));
    }
  }
  if (contextURL.getDerivedEntity() != null) {
    if (contextURL.getEntitySetOrSingletonOrType() == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    result.append('/').append(Encoder.encode(contextURL.getDerivedEntity()));
  }
  if (contextURL.getKeyPath() != null) {
    result.append('(').append(contextURL.getKeyPath()).append(')');
  }
  if (contextURL.getNavOrPropertyPath() != null) {
    result.append('/').append(contextURL.getNavOrPropertyPath());
  }
  if (contextURL.getSelectList() != null) {
    result.append('(').append(contextURL.getSelectList()).append(')');
  }
  if (contextURL.isReference()) {
    if (contextURL.getEntitySetOrSingletonOrType() != null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    if (contextURL.isCollection()) {
      result.append('#').append(""String_Node_Str"").append(ContextURL.Suffix.REFERENCE.getRepresentation()).append(""String_Node_Str"");
    }
 else {
      result.append('#').append(ContextURL.Suffix.REFERENCE.getRepresentation());
    }
  }
 else   if (contextURL.getSuffix() != null) {
    if (contextURL.getEntitySetOrSingletonOrType() == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    result.append('/').append(contextURL.getSuffix().getRepresentation());
  }
  return URI.create(result.toString());
}",0.9968791796700848
33269,"/** 
 * Adds system query option.
 * @param systemOption the option to be added
 * @return this object for method chaining
 * @throws ODataRuntimeException if an unsupported option is providedor an option of this kind has been added before
 */
public UriInfoImpl setSystemQueryOption(final SystemQueryOption systemOption){
  final SystemQueryOptionKind kind=systemOption.getKind();
switch (kind) {
case EXPAND:
case FILTER:
case FORMAT:
case ID:
case COUNT:
case ORDERBY:
case SEARCH:
case SELECT:
case SKIP:
case SKIPTOKEN:
case TOP:
case LEVELS:
    if (systemQueryOptions.containsKey(kind)) {
      throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
    }
 else {
      systemQueryOptions.put(kind,systemOption);
    }
  break;
default :
throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
}
return this;
}","/** 
 * Adds system query option.
 * @param systemOption the option to be added
 * @return this object for method chaining
 * @throws ODataRuntimeException if an unsupported option is providedor an option of this kind has been added before
 */
public UriInfoImpl setSystemQueryOption(final SystemQueryOption systemOption){
  final SystemQueryOptionKind kind=systemOption.getKind();
  if (systemQueryOptions.containsKey(kind)) {
    throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
  }
switch (kind) {
case EXPAND:
case FILTER:
case FORMAT:
case ID:
case COUNT:
case ORDERBY:
case SEARCH:
case SELECT:
case SKIP:
case SKIPTOKEN:
case TOP:
case LEVELS:
    systemQueryOptions.put(kind,systemOption);
  break;
default :
throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
}
return this;
}",0.7479387514723204
33270,"private static <T>T loadClass(Class<T> typeOfClass,String className,Class<?>[] ctorParameterClasses,Object[] ctorParameters){
  try {
    Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);
    if (ctorParameters == null || ctorParameterClasses == null) {
      return typeOfClass.cast(clazz.newInstance());
    }
    Constructor<?> ctor=clazz.getConstructor(ctorParameterClasses);
    return typeOfClass.cast(ctor.newInstance(ctorParameters));
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(""String_Node_Str"" + className + ""String_Node_Str"",e);
  }
}","private static <T>T loadClass(Class<T> typeOfClass,String className,Class<?>[] ctorParameterClasses,Object[] ctorParameters){
  try {
    Class<?> clazz=Thread.currentThread().getContextClassLoader().loadClass(className);
    if (ctorParameters == null || ctorParameterClasses == null) {
      return typeOfClass.cast(clazz.newInstance());
    }
    Constructor<?> ctor=clazz.getConstructor(ctorParameterClasses);
    return typeOfClass.cast(ctor.newInstance(ctorParameters));
  }
 catch (  ClassNotFoundException e) {
    throw wrapException(className,e);
  }
catch (  InstantiationException e) {
    throw wrapException(className,e);
  }
catch (  IllegalAccessException e) {
    throw wrapException(className,e);
  }
catch (  NoSuchMethodException e) {
    throw wrapException(className,e);
  }
catch (  InvocationTargetException e) {
    throw wrapException(className,e);
  }
}",0.5994987468671679
33271,"/** 
 * Gets an invoke request instance for the action bound to given URI (with parameters).
 * @param < RES > OData domain object result
 * @param bindingParameterURI binding parameter URI
 * @param actionName operation to be invoked
 * @param bindingParameterTypeName binding parameter type full qualified name
 * @param isBindingParameterCollection whether binding parameter is collection
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getBoundActionInvokeRequest(URI bindingParameterURI,FullQualifiedName actionName,FullQualifiedName bindingParameterTypeName,Boolean isBindingParameterCollection,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the action bound to given URI (with parameters).
 * @param < T > OData domain object result
 * @param bindingParameterURI binding parameter URI
 * @param actionName operation to be invoked
 * @param bindingParameterTypeName binding parameter type full qualified name
 * @param isBindingParameterCollection whether binding parameter is collection
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getBoundActionInvokeRequest(URI bindingParameterURI,FullQualifiedName actionName,FullQualifiedName bindingParameterTypeName,Boolean isBindingParameterCollection,Map<String,ClientValue> parameters);",0.9921156373193168
33272,"/** 
 * Gets an invoke request instance for the function import with the given name and matching parameter names.
 * @param < RES > OData domain object result, derived from return type defined in the function import
 * @param functionImportName operation to be invoked
 * @param parameters parameters to pass to operation import invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getFunctionImportInvokeRequest(String functionImportName,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the function import with the given name and matching parameter names.
 * @param < T > OData domain object result, derived from return type defined in the function import
 * @param functionImportName operation to be invoked
 * @param parameters parameters to pass to operation import invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getFunctionImportInvokeRequest(String functionImportName,Map<String,ClientValue> parameters);",0.988929889298893
33273,"/** 
 * Gets an invoke request instance for the action import with the given name.
 * @param < RES > OData domain object result, derived from return type defined in the action import
 * @param actionImportName operation to be invoked
 * @param parameters parameters to pass to operation import invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getActionImportInvokeRequest(String actionImportName,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the action import with the given name.
 * @param < T > OData domain object result, derived from return type defined in the action import
 * @param actionImportName operation to be invoked
 * @param parameters parameters to pass to operation import invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getActionImportInvokeRequest(String actionImportName,Map<String,ClientValue> parameters);",0.9880715705765408
33274,"/** 
 * Gets an invoke request instance for the function bound to given URI (with parameters).
 * @param < RES > OData domain object result
 * @param bindingParameterURI binding parameter URI
 * @param functionName operation to be invoked
 * @param bindingParameterTypeName binding parameter type full qualified name
 * @param isBindingParameterCollection whether binding parameter is collection
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getBoundFunctionInvokeRequest(URI bindingParameterURI,FullQualifiedName functionName,FullQualifiedName bindingParameterTypeName,Boolean isBindingParameterCollection,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the function bound to given URI (with parameters).
 * @param < T > OData domain object result
 * @param bindingParameterURI binding parameter URI
 * @param functionName operation to be invoked
 * @param bindingParameterTypeName binding parameter type full qualified name
 * @param isBindingParameterCollection whether binding parameter is collection
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getBoundFunctionInvokeRequest(URI bindingParameterURI,FullQualifiedName functionName,FullQualifiedName bindingParameterTypeName,Boolean isBindingParameterCollection,Map<String,ClientValue> parameters);",0.9921976592977894
33275,"/** 
 * Gets an invoke request instance for the function bound to given URI (with parameters).
 * @param < RES > OData domain object result
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getFunctionInvokeRequest(URI uri,Class<RES> resultRef,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the function bound to given URI (with parameters).
 * @param < T > OData domain object result
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getFunctionInvokeRequest(URI uri,Class<T> resultRef,Map<String,ClientValue> parameters);",0.9832285115303984
33276,"/** 
 * Gets an invoke request instance for the action bound to given URI (with parameters).
 * @param < RES > OData domain object result
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to action invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getActionInvokeRequest(URI uri,Class<RES> resultRef,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the action bound to given URI (with parameters).
 * @param < T > OData domain object result
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to action invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getActionInvokeRequest(URI uri,Class<T> resultRef,Map<String,ClientValue> parameters);",0.9830148619957536
33277,"/** 
 * Gets an invoke request instance for the operation bound to given URI. <br/> This method is mainly meant for internal usage, but defined for generic calls from proxy; normally, one of other methods should be used instead.
 * @param < RES > OData domain object result
 * @param method HTTP invocation method
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<RES extends ClientInvokeResult>ODataInvokeRequest<RES> getInvokeRequest(HttpMethod method,URI uri,Class<RES> resultRef,Map<String,ClientValue> parameters);","/** 
 * Gets an invoke request instance for the operation bound to given URI. <br/> This method is mainly meant for internal usage, but defined for generic calls from proxy; normally, one of other methods should be used instead.
 * @param < T > OData domain object result
 * @param method HTTP invocation method
 * @param uri invocation URI
 * @param resultRef reference Class for result
 * @param parameters parameters to pass to function invocation
 * @return new {@link ODataInvokeRequest} instance.
 */
<T extends ClientInvokeResult>ODataInvokeRequest<T> getInvokeRequest(HttpMethod method,URI uri,Class<T> resultRef,Map<String,ClientValue> parameters);",0.9878971255673222
33278,"/** 
 * Adds a value to the collection.
 * @param value value to be added.
 */
ClientCollectionValue<OV> add(ClientValue value);","/** 
 * Adds a value to the collection.
 * @param value value to be added.
 */
ClientCollectionValue<T> add(ClientValue value);",0.9882352941176472
33279,"@SuppressWarnings(""String_Node_Str"") @Override public boolean hasNext(){
  if (available && cached == null) {
    if (contentType.isCompatible(ContentType.APPLICATION_ATOM_SVC) || contentType.isCompatible(ContentType.APPLICATION_ATOM_XML)) {
      cached=nextAtomEntityFromEntitySet(stream,osEntitySet,namespaces);
    }
 else {
      cached=nextJSONEntityFromEntitySet(stream,osEntitySet);
    }
    if (cached == null) {
      available=false;
      try {
        entitySet=(ES)odataClient.getReader().readEntitySet(new ByteArrayInputStream(osEntitySet.toByteArray()),contentType);
      }
 catch (      final ODataDeserializerException e) {
        available=false;
      }
      close();
    }
  }
  return available;
}","@SuppressWarnings(""String_Node_Str"") @Override public boolean hasNext(){
  if (available && cached == null) {
    if (contentType.isCompatible(ContentType.APPLICATION_ATOM_SVC) || contentType.isCompatible(ContentType.APPLICATION_ATOM_XML)) {
      cached=nextAtomEntityFromEntitySet(stream,osEntitySet,namespaces);
    }
 else {
      cached=nextJSONEntityFromEntitySet(stream,osEntitySet);
    }
    if (cached == null) {
      available=false;
      try {
        entitySet=(T)odataClient.getReader().readEntitySet(new ByteArrayInputStream(osEntitySet.toByteArray()),contentType);
      }
 catch (      final ODataDeserializerException e) {
        available=false;
      }
      close();
    }
  }
  return available;
}",0.997923875432526
33280,"/** 
 * Casts to collection value.
 * @param < OV > The actual ODataValue interface.
 * @return collection value.
 */
<OV extends ClientValue>ClientCollectionValue<OV> asCollection();","/** 
 * Casts to collection value.
 * @param < T > The actual ODataValue interface.
 * @return collection value.
 */
<T extends ClientValue>ClientCollectionValue<T> asCollection();",0.975206611570248
33281,"protected void closeCircleStreamBufferOutput(CircleStreamBuffer buffer,SerializerException cachedException) throws SerializerException {
  if (buffer != null && buffer.getOutputStream() != null) {
    try {
      buffer.getOutputStream().close();
    }
 catch (    IOException e) {
      if (cachedException != null) {
        throw cachedException;
      }
 else {
        throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
      }
    }
  }
}","protected void closeCircleStreamBufferOutput(OutputStream outputStream,SerializerException cachedException) throws SerializerException {
  if (outputStream != null) {
    try {
      outputStream.close();
    }
 catch (    IOException e) {
      if (cachedException != null) {
        throw cachedException;
      }
 else {
        throw new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
      }
    }
  }
}",0.6908315565031983
33282,"@Override public SerializerResult primitive(final ServiceMetadata metadata,final EdmPrimitiveType type,final Property property,final PrimitiveSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    if (property.isNull()) {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.NULL_INPUT);
    }
 else {
      json.writeFieldName(Constants.VALUE);
      writePrimitive(type,property,options == null ? null : options.isNullable(),options == null ? null : options.getMaxLength(),options == null ? null : options.getPrecision(),options == null ? null : options.getScale(),options == null ? null : options.isUnicode(),json);
    }
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
catch (  final EdmPrimitiveTypeException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,property.getName(),property.getValue().toString());
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult primitive(final ServiceMetadata metadata,final EdmPrimitiveType type,final Property property,final PrimitiveSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    if (property.isNull()) {
      throw new SerializerException(""String_Node_Str"",SerializerException.MessageKeys.NULL_INPUT);
    }
 else {
      json.writeFieldName(Constants.VALUE);
      writePrimitive(type,property,options == null ? null : options.isNullable(),options == null ? null : options.getMaxLength(),options == null ? null : options.getPrecision(),options == null ? null : options.getScale(),options == null ? null : options.isUnicode(),json);
    }
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
catch (  final EdmPrimitiveTypeException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.WRONG_PROPERTY_VALUE,property.getName(),property.getValue().toString());
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9426136363636364
33283,"@Override public SerializerResult serviceDocument(final ServiceMetadata metadata,final String serviceRoot) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    new ServiceDocumentJsonSerializer(metadata,serviceRoot,isODataMetadataNone).writeServiceDocument(json);
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult serviceDocument(final ServiceMetadata metadata,final String serviceRoot) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    new ServiceDocumentJsonSerializer(metadata,serviceRoot,isODataMetadataNone).writeServiceDocument(json);
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.7511574074074074
33284,"@Override public SerializerResult error(final ODataServerError error) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    new ODataErrorSerializer().writeErrorDocument(json,error);
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult error(final ODataServerError error) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    new ODataErrorSerializer().writeErrorDocument(json,error);
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.7250639386189258
33285,"@Override public SerializerResult primitiveCollection(final ServiceMetadata metadata,final EdmPrimitiveType type,final Property property,final PrimitiveSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writePrimitiveCollection(type,property,options == null ? null : options.isNullable(),options == null ? null : options.getMaxLength(),options == null ? null : options.getPrecision(),options == null ? null : options.getScale(),options == null ? null : options.isUnicode(),json);
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult primitiveCollection(final ServiceMetadata metadata,final EdmPrimitiveType type,final Property property,final PrimitiveSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writePrimitiveCollection(type,property,options == null ? null : options.isNullable(),options == null ? null : options.getMaxLength(),options == null ? null : options.getPrecision(),options == null ? null : options.getScale(),options == null ? null : options.isUnicode(),json);
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.926917510853835
33286,"@Override public SerializerResult reference(final ServiceMetadata metadata,final EdmEntitySet edmEntitySet,final Entity entity,final ReferenceSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    final UriHelper uriHelper=new UriHelperImpl();
    final JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    json.writeStringField(Constants.JSON_ID,uriHelper.buildCanonicalURL(edmEntitySet,entity));
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult reference(final ServiceMetadata metadata,final EdmEntitySet edmEntitySet,final Entity entity,final ReferenceSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    final UriHelper uriHelper=new UriHelperImpl();
    outputStream=buffer.getOutputStream();
    final JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    json.writeStringField(Constants.JSON_ID,uriHelper.buildCanonicalURL(edmEntitySet,entity));
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9131556319862424
33287,"@Override public SerializerResult entityCollection(final ServiceMetadata metadata,final EdmEntityType entityType,final EntityCollection entitySet,final EntityCollectionSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    if (options != null && options.getCount() != null && options.getCount().getValue()) {
      writeCount(entitySet,json);
    }
    json.writeFieldName(Constants.VALUE);
    if (options == null) {
      writeEntitySet(metadata,entityType,entitySet,null,null,false,json);
    }
 else {
      writeEntitySet(metadata,entityType,entitySet,options.getExpand(),options.getSelect(),options.onlyReferences(),json);
    }
    writeNextLink(entitySet,json);
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult entityCollection(final ServiceMetadata metadata,final EdmEntityType entityType,final EntityCollection entitySet,final EntityCollectionSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    if (options != null && options.getCount() != null && options.getCount().getValue()) {
      writeCount(entitySet,json);
    }
    json.writeFieldName(Constants.VALUE);
    if (options == null) {
      writeEntitySet(metadata,entityType,entitySet,null,null,false,json);
    }
 else {
      writeEntitySet(metadata,entityType,entitySet,options.getExpand(),options.getSelect(),options.onlyReferences(),json);
    }
    writeNextLink(entitySet,json);
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.8652434956637759
33288,"@Override public SerializerResult complexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writeComplexCollection(type,property,null,json);
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult complexCollection(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    json.writeFieldName(Constants.VALUE);
    writeComplexCollection(type,property,null,json);
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.912020905923345
33289,"@Override public SerializerResult complex(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    final EdmComplexType resolvedType=resolveComplexType(metadata,type,property.getType());
    if (!isODataMetadataNone && !resolvedType.equals(type)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + property.getType());
    }
    final List<Property> values=property.isNull() ? Collections.<Property>emptyList() : property.asComplex().getValue();
    writeProperties(type,values,options == null ? null : options.getSelect(),json);
    if (!property.isNull() && property.isComplex()) {
      writeNavigationProperties(metadata,type,property.asComplex(),options == null ? null : options.getExpand(),json);
    }
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult complex(final ServiceMetadata metadata,final EdmComplexType type,final Property property,final ComplexSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    writeMetadataETag(metadata,json);
    final EdmComplexType resolvedType=resolveComplexType(metadata,type,property.getType());
    if (!isODataMetadataNone && !resolvedType.equals(type)) {
      json.writeStringField(Constants.JSON_TYPE,""String_Node_Str"" + property.getType());
    }
    final List<Property> values=property.isNull() ? Collections.<Property>emptyList() : property.asComplex().getValue();
    writeProperties(type,values,options == null ? null : options.getSelect(),json);
    if (!property.isNull() && property.isComplex()) {
      writeNavigationProperties(metadata,type,property.asComplex(),options == null ? null : options.getExpand(),json);
    }
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9397374701670644
33290,"@Override public SerializerResult referenceCollection(final ServiceMetadata metadata,final EdmEntitySet edmEntitySet,final EntityCollection entityCollection,final ReferenceCollectionSerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    final UriHelper uriHelper=new UriHelperImpl();
    final JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    json.writeStartObject();
    writeContextURL(contextURL,json);
    if (options != null && options.getCount() != null && options.getCount().getValue()) {
      writeCount(entityCollection,json);
    }
    json.writeArrayFieldStart(Constants.VALUE);
    for (    final Entity entity : entityCollection.getEntities()) {
      json.writeStartObject();
      json.writeStringField(Constants.JSON_ID,uriHelper.buildCanonicalURL(edmEntitySet,entity));
      json.writeEndObject();
    }
    json.writeEndArray();
    writeNextLink(entityCollection,json);
    json.writeEndObject();
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult referenceCollection(final ServiceMetadata metadata,final EdmEntitySet edmEntitySet,final EntityCollection entityCollection,final ReferenceCollectionSerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    final UriHelper uriHelper=new UriHelperImpl();
    outputStream=buffer.getOutputStream();
    final JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    json.writeStartObject();
    writeContextURL(contextURL,json);
    if (options != null && options.getCount() != null && options.getCount().getValue()) {
      writeCount(entityCollection,json);
    }
    json.writeArrayFieldStart(Constants.VALUE);
    for (    final Entity entity : entityCollection.getEntities()) {
      json.writeStartObject();
      json.writeStringField(Constants.JSON_ID,uriHelper.buildCanonicalURL(edmEntitySet,entity));
      json.writeEndObject();
    }
    json.writeEndArray();
    writeNextLink(entityCollection,json);
    json.writeEndObject();
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9472693032015066
33291,"@Override public SerializerResult entity(final ServiceMetadata metadata,final EdmEntityType entityType,final Entity entity,final EntitySerializerOptions options) throws SerializerException {
  CircleStreamBuffer buffer=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    buffer=new CircleStreamBuffer();
    JsonGenerator json=new JsonFactory().createGenerator(buffer.getOutputStream());
    writeEntity(metadata,entityType,entity,contextURL,options == null ? null : options.getExpand(),options == null ? null : options.getSelect(),options == null ? false : options.onlyReferences(),json);
    json.close();
    buffer.getOutputStream().close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(buffer,cachedException);
  }
}","@Override public SerializerResult entity(final ServiceMetadata metadata,final EdmEntityType entityType,final Entity entity,final EntitySerializerOptions options) throws SerializerException {
  OutputStream outputStream=null;
  SerializerException cachedException=null;
  try {
    final ContextURL contextURL=checkContextURL(options == null ? null : options.getContextURL());
    CircleStreamBuffer buffer=new CircleStreamBuffer();
    outputStream=buffer.getOutputStream();
    JsonGenerator json=new JsonFactory().createGenerator(outputStream);
    writeEntity(metadata,entityType,entity,contextURL,options == null ? null : options.getExpand(),options == null ? null : options.getSelect(),options == null ? false : options.onlyReferences(),json);
    json.close();
    outputStream.close();
    return SerializerResultImpl.with().content(buffer.getInputStream()).build();
  }
 catch (  final IOException e) {
    cachedException=new SerializerException(""String_Node_Str"",e,SerializerException.MessageKeys.IO_EXCEPTION);
    throw cachedException;
  }
 finally {
    closeCircleStreamBufferOutput(outputStream,cachedException);
  }
}",0.9091726618705036
33292,"private void validateContentType(final ODataRequest request) throws BatchDeserializerException {
  BatchParserCommon.getContentType(request.getHeader(HttpHeader.CONTENT_TYPE),ContentType.MULTIPART_MIXED,0);
}","private void validateContentType(final ODataRequest request) throws BatchDeserializerException {
  BatchParserCommon.parseContentType(request.getHeader(HttpHeader.CONTENT_TYPE),ContentType.MULTIPART_MIXED,0);
}",0.9808612440191388
33293,"private boolean isContentTypeMultiPartMixed(final String contentType){
  try {
    BatchParserCommon.getContentType(contentType,ContentType.MULTIPART_MIXED,0);
    return true;
  }
 catch (  final BatchDeserializerException e) {
    return false;
  }
}","private boolean isContentTypeMultiPartMixed(final String contentType){
  try {
    BatchParserCommon.parseContentType(contentType,ContentType.MULTIPART_MIXED,0);
    return true;
  }
 catch (  final BatchDeserializerException e) {
    return false;
  }
}",0.984189723320158
33294,"public static String getBoundary(final String contentType,final int line) throws BatchDeserializerException {
  final ContentType type=getContentType(contentType,ContentType.MULTIPART_MIXED,line);
  final Map<String,String> parameters=type.getParameters();
  for (  final Map.Entry<String,String> entries : parameters.entrySet()) {
    if (BOUNDARY.equalsIgnoreCase(entries.getKey())) {
      final String boundary=entries.getValue().trim();
      if (boundary.matches(PATTERN_BOUNDARY)) {
        return trimQuotes(boundary);
      }
 else {
        throw new BatchDeserializerException(""String_Node_Str"",BatchDeserializerException.MessageKeys.INVALID_BOUNDARY,Integer.toString(line));
      }
    }
  }
  throw new BatchDeserializerException(""String_Node_Str"",BatchDeserializerException.MessageKeys.MISSING_BOUNDARY_DELIMITER,Integer.toString(line));
}","public static String getBoundary(final String contentType,final int line) throws BatchDeserializerException {
  final ContentType type=parseContentType(contentType,ContentType.MULTIPART_MIXED,line);
  final Map<String,String> parameters=type.getParameters();
  for (  final Map.Entry<String,String> entries : parameters.entrySet()) {
    if (BOUNDARY.equalsIgnoreCase(entries.getKey())) {
      final String boundary=entries.getValue().trim();
      if (boundary.matches(PATTERN_BOUNDARY)) {
        return trimQuotes(boundary);
      }
 else {
        throw new BatchDeserializerException(""String_Node_Str"",BatchDeserializerException.MessageKeys.INVALID_BOUNDARY,Integer.toString(line));
      }
    }
  }
  throw new BatchDeserializerException(""String_Node_Str"",BatchDeserializerException.MessageKeys.MISSING_BOUNDARY_DELIMITER,Integer.toString(line));
}",0.9953216374269006
33295,"public static void validateContentType(final Header headers,final ContentType expected) throws BatchDeserializerException {
  final List<String> contentTypes=headers.getHeaders(HttpHeader.CONTENT_TYPE);
  if (contentTypes.isEmpty()) {
    throw new BatchDeserializerException(""String_Node_Str"",MessageKeys.MISSING_CONTENT_TYPE,Integer.toString(headers.getLineNumber()));
  }
  if (BatchParserCommon.getContentType(contentTypes.get(0),expected,headers.getLineNumber()) == null) {
    throw new BatchDeserializerException(""String_Node_Str"",MessageKeys.INVALID_CONTENT_TYPE,expected.toContentTypeString());
  }
}","public static void validateContentType(final Header headers,final ContentType expected) throws BatchDeserializerException {
  final List<String> contentTypes=headers.getHeaders(HttpHeader.CONTENT_TYPE);
  if (contentTypes.isEmpty()) {
    throw new BatchDeserializerException(""String_Node_Str"",MessageKeys.MISSING_CONTENT_TYPE,Integer.toString(headers.getLineNumber()));
  }
  BatchParserCommon.parseContentType(contentTypes.get(0),expected,headers.getLineNumber());
}",0.8597957288765088
33296,"public UriInfoImpl setQueryOptions(final List<QueryOptionImpl> list){
  for (  QueryOptionImpl item : list) {
    if (item instanceof SystemQueryOptionImpl) {
      setSystemQueryOption((SystemQueryOptionImpl)item);
    }
 else     if (item instanceof CustomQueryOptionImpl) {
      addCustomQueryOption(item);
    }
  }
  return this;
}","public UriInfoImpl setQueryOptions(final List<QueryOptionImpl> list){
  for (  QueryOptionImpl item : list) {
    if (item instanceof SystemQueryOptionImpl) {
      setSystemQueryOption((SystemQueryOptionImpl)item);
    }
 else     if (item instanceof CustomQueryOptionImpl) {
      addCustomQueryOption((CustomQueryOptionImpl)item);
    }
  }
  return this;
}",0.9670014347202296
33297,"public void addCustomQueryOption(final QueryOptionImpl item){
  customQueryOptions.add((CustomQueryOptionImpl)item);
  if (item.getName().startsWith(""String_Node_Str"")) {
    aliasToValue.put(item.getName(),item.getText());
  }
}","public void addCustomQueryOption(final CustomQueryOptionImpl item){
  customQueryOptions.add(item);
  if (item.getName().startsWith(""String_Node_Str"")) {
    aliasToValue.put(item.getName(),item.getText());
  }
}",0.9342403628117912
33298,"public void showTokens(final String input,final List<? extends Token> list){
  boolean first=true;
  System.out.println(""String_Node_Str"" + input);
  String nL=""String_Node_Str"";
  String out=""String_Node_Str"" + nL;
  for (  Token token : list) {
    if (!first) {
      out+=""String_Node_Str"";
      first=false;
    }
    int index=token.getType();
    if (index != -1) {
      out+=""String_Node_Str"" + token.getText() + ""String_Node_Str""+ ""String_Node_Str""+ UriLexer.tokenNames[index]+ nL;
    }
 else {
      out+=""String_Node_Str"" + token.getText() + ""String_Node_Str""+ ""String_Node_Str""+ index+ nL;
    }
  }
  out+=']';
  System.out.println(""String_Node_Str"" + out);
  return;
}","public void showTokens(final String input,final List<? extends Token> list){
  boolean first=true;
  System.out.println(""String_Node_Str"" + input);
  String nL=""String_Node_Str"";
  StringBuilder out=new StringBuilder(""String_Node_Str"").append(nL);
  for (  Token token : list) {
    if (!first) {
      out.append(""String_Node_Str"");
      first=false;
    }
    int index=token.getType();
    out.append(""String_Node_Str"").append(token.getText()).append(""String_Node_Str"").append(""String_Node_Str"");
    if (index != -1) {
      out.append(UriLexer.tokenNames[index]);
    }
 else {
      out.append(index);
    }
    out.append(nL);
  }
  out.append(']');
  System.out.println(""String_Node_Str"" + out.toString());
}",0.6119828815977175
33299,"public static List<String> split(final String input,final char c){
  List<String> list=new LinkedList<String>();
  int start=0;
  int end=-1;
  while ((end=input.indexOf(c,start)) >= 0) {
    list.add(input.substring(start,end));
    start=end + 1;
  }
  list.add(input.substring(start));
  return list;
}","static List<String> split(final String input,final char c,boolean skipEmpty){
  if (skipEmpty && (input.isEmpty() || input.length() == 1 && input.charAt(0) == c)) {
    return Collections.emptyList();
  }
  List<String> list=new LinkedList<String>();
  int start=0;
  int end;
  while ((end=input.indexOf(c,start)) >= 0) {
    if (skipEmpty) {
      if (start != end) {
        list.add(input.substring(start,end));
      }
    }
 else {
      list.add(input.substring(start,end));
    }
    start=end + 1;
  }
  if (skipEmpty) {
    if (input.charAt(input.length() - 1) != c) {
      list.add(input.substring(start));
    }
  }
 else {
    list.add(input.substring(start));
  }
  return list;
}",0.558
33300,"private static List<RawUri.QueryOption> splitOptions(final String queryOptionString){
  if (queryOptionString == null) {
    return Collections.<RawUri.QueryOption>emptyList();
  }
  List<RawUri.QueryOption> queryOptionList=new ArrayList<RawUri.QueryOption>();
  for (  String option : split(queryOptionString,'&')) {
    if (option.length() != 0) {
      final List<String> pair=splitFirst(option,'=');
      queryOptionList.add(new RawUri.QueryOption(pair.get(0),pair.get(1)));
    }
  }
  return queryOptionList;
}","private static List<RawUri.QueryOption> splitOptions(final String queryOptionString){
  if (queryOptionString == null) {
    return Collections.emptyList();
  }
  List<RawUri.QueryOption> queryOptionList=new ArrayList<RawUri.QueryOption>();
  for (  String option : splitSkipEmpty(queryOptionString,'&')) {
    final List<String> pair=splitFirst(option,'=');
    queryOptionList.add(new RawUri.QueryOption(pair.get(0),pair.get(1)));
  }
  return queryOptionList;
}",0.7787971457696228
33301,"private static List<String> splitPath(final String path,final int skipSegments){
  List<String> list=split(path,'/');
  while (list.remove(""String_Node_Str"")) {
  }
  return skipSegments > 0 ? list.subList(skipSegments,list.size()) : list;
}","private static List<String> splitPath(final String path,final int skipSegments){
  List<String> list=splitSkipEmpty(path,'/');
  return skipSegments > 0 ? list.subList(skipSegments,list.size()) : list;
}",0.8738738738738738
33302,"public UriResourceTypedImpl readResourcePathSegment(final PathSegmentContext ctx){
  final boolean checkFirst=context.contextUriInfo.getLastResourcePart() == null || context.contextUriInfo.getLastResourcePart() instanceof UriResourceRootImpl;
  String odi=ctx.vODI.getText();
  boolean searchInContainer=true;
  if (checkFirst && ctx.vNS == null && !context.contextTypes.empty()) {
    TypeInformation source=context.contextTypes.peek();
    if (source.type instanceof EdmStructuredType) {
      EdmStructuredType str=(EdmStructuredType)source.type;
      EdmElement property=str.getProperty(odi);
      if (property != null) {
        searchInContainer=false;
      }
    }
  }
  if (searchInContainer) {
    EdmEntitySet edmEntitySet=edmEntityContainer.getEntitySet(odi);
    if (edmEntitySet != null) {
      UriResourceEntitySetImpl uriResource=new UriResourceEntitySetImpl().setEntitSet(edmEntitySet);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmSingleton edmSingleton=edmEntityContainer.getSingleton(odi);
    if (edmSingleton != null) {
      UriResourceSingletonImpl uriResource=new UriResourceSingletonImpl().setSingleton(edmSingleton);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmActionImport edmActionImport=edmEntityContainer.getActionImport(odi);
    if (edmActionImport != null) {
      UriResourceActionImpl uriResource=new UriResourceActionImpl().setActionImport(edmActionImport);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmFunctionImport edmFunctionImport=edmEntityContainer.getFunctionImport(odi);
    if (edmFunctionImport != null) {
      if (ctx.vlNVO.isEmpty()) {
        throw wrap(new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYNTAX));
      }
      context.contextReadingFunctionParameters=true;
      @SuppressWarnings(""String_Node_Str"") List<UriParameterImpl> parameters=(List<UriParameterImpl>)ctx.vlNVO.get(0).accept(this);
      context.contextReadingFunctionParameters=false;
      ctx.vlNVO.remove(0);
      UriResourceFunctionImpl uriResource=new UriResourceFunctionImpl().setFunctionImport(edmFunctionImport,parameters);
      List<String> names=new ArrayList<String>();
      for (      UriParameterImpl item : parameters) {
        names.add(item.getName());
      }
      EdmFunction function=edmFunctionImport.getUnboundFunction(names);
      if (function == null) {
        String tmp=""String_Node_Str"";
        for (        String name : names) {
          tmp+=(tmp.length() != 0 ? ""String_Node_Str"" : ""String_Node_Str"") + name;
        }
        throw wrap(new UriParserSemanticException(""String_Node_Str"" + edmFunctionImport.getName() + ""String_Node_Str""+ tmp+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.FUNCTION_NOT_FOUND,edmFunctionImport.getName(),tmp));
      }
      uriResource.setFunction(edmFunctionImport.getUnboundFunction(names));
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
  }
  final TypeInformation source;
  final UriResource lastResourcePart=context.contextUriInfo.getLastResourcePart();
  if (lastResourcePart == null) {
    if (context.contextTypes.empty()) {
      if (checkFirst && ctx.vNS == null) {
        throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_NOT_FOUND,odi));
      }
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_ONLY_FOR_TYPED_PARTS,odi));
    }
    source=context.contextTypes.peek();
  }
 else {
    source=getTypeInformation(lastResourcePart);
    if (source.type == null) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_ONLY_FOR_TYPED_PARTS,odi));
    }
  }
  if (ctx.vNS == null) {
    UriContext.LambdaVariables lVar=getLambdaVar(odi);
    if (lVar != null) {
      UriResourceLambdaVarImpl lambdaResource=new UriResourceLambdaVarImpl();
      lambdaResource.setVariableText(lVar.name);
      lambdaResource.setType(lVar.type);
      lambdaResource.setCollection(lVar.isCollection);
      context.contextUriInfo.addResourcePart(lambdaResource);
      return null;
    }
    if (!(source.type instanceof EdmStructuredType)) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_MUST_BE_PRECEDED_BY_STRUCTURAL_TYPE,odi));
    }
    if ((ctx.depth() <= 2 || lastResourcePart instanceof UriResourceTypedImpl || lastResourcePart instanceof UriResourceNavigationPropertyImpl) && source.isCollection) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PROPERTY_AFTER_COLLECTION,odi));
    }
    EdmStructuredType structType=(EdmStructuredType)source.type;
    EdmElement property=structType.getProperty(odi);
    if (property == null) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str""+ structType.getFullQualifiedName().getFullQualifiedNameAsString()+ ""String_Node_Str"",ctx.depth() > 2 ? UriParserSemanticException.MessageKeys.EXPRESSION_PROPERTY_NOT_IN_TYPE : UriParserSemanticException.MessageKeys.PROPERTY_NOT_IN_TYPE,structType.getFullQualifiedName().getFullQualifiedNameAsString(),odi));
    }
    if (property instanceof EdmProperty) {
      if (((EdmProperty)property).isPrimitive()) {
        UriResourcePrimitivePropertyImpl simpleResource=new UriResourcePrimitivePropertyImpl().setProperty((EdmProperty)property);
        context.contextUriInfo.addResourcePart(simpleResource);
        return null;
      }
 else {
        UriResourceComplexPropertyImpl complexResource=new UriResourceComplexPropertyImpl().setProperty((EdmProperty)property);
        context.contextUriInfo.addResourcePart(complexResource);
        return null;
      }
    }
 else     if (property instanceof EdmNavigationProperty) {
      UriResourceNavigationPropertyImpl navigationResource=new UriResourceNavigationPropertyImpl().setNavigationProperty((EdmNavigationProperty)property);
      context.contextUriInfo.addResourcePart(navigationResource);
      return null;
    }
 else {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + property + ""String_Node_Str"",UriParserSemanticException.MessageKeys.UNKNOWN_PROPERTY_TYPE,property.getName()));
    }
  }
 else {
    FullQualifiedName fullFilterName=getFullNameFromContext(ctx.vNS,odi);
    if (source.type instanceof EdmEntityType) {
      EdmEntityType filterEntityType=edm.getEntityType(fullFilterName);
      if (filterEntityType != null) {
        if (!(filterEntityType.compatibleTo(source.type))) {
          throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullFilterName.toString(),UriParserSemanticException.MessageKeys.INCOMPATIBLE_TYPE_FILTER,fullFilterName.toString()));
        }
        if (lastResourcePart == null) {
          UriResourceStartingTypeFilterImpl uriResource=new UriResourceStartingTypeFilterImpl().setType(filterEntityType).setCollection(source.isCollection);
          if (source.isCollection) {
            uriResource.setCollectionTypeFilter(filterEntityType);
          }
 else {
            uriResource.setEntryTypeFilter(filterEntityType);
          }
          context.contextUriInfo.addResourcePart(uriResource);
          return null;
        }
 else {
          if (lastResourcePart instanceof UriResourceWithKeysImpl) {
            UriResourceWithKeysImpl lastPartWithKeys=(UriResourceWithKeysImpl)lastResourcePart;
            if (!lastPartWithKeys.isCollection()) {
              if (lastPartWithKeys.getTypeFilterOnEntry() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnEntry())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnEntry()),getName(filterEntityType)));
              }
              lastPartWithKeys.setEntryTypeFilter(filterEntityType);
              return null;
            }
 else {
              if (lastPartWithKeys.getTypeFilterOnCollection() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnCollection())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnCollection()),getName(filterEntityType)));
              }
              lastPartWithKeys.setCollectionTypeFilter(filterEntityType);
              return null;
            }
          }
 else           if (lastResourcePart instanceof UriResourceTypedImpl) {
            UriResourceTypedImpl lastPartTyped=(UriResourceTypedImpl)lastResourcePart;
            if (lastPartTyped.getTypeFilter() != null) {
              throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartTyped.getTypeFilter())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartTyped.getTypeFilter()),getName(filterEntityType)));
            }
            lastPartTyped.setTypeFilter(filterEntityType);
            return null;
          }
 else {
            throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PREVIOUS_PART_NOT_TYPED,getName(filterEntityType)));
          }
        }
      }
    }
 else     if (source.type instanceof EdmComplexType) {
      EdmComplexType filterComplexType=edm.getComplexType(fullFilterName);
      if (filterComplexType != null) {
        if (!(filterComplexType.compatibleTo(source.type))) {
          throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(source.type) + ""String_Node_Str""+ getName(filterComplexType)+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.INCOMPATIBLE_TYPE_FILTER,getName(source.type)));
        }
        if (lastResourcePart == null) {
          UriResourceStartingTypeFilterImpl uriResource=new UriResourceStartingTypeFilterImpl().setType(filterComplexType).setCollection(source.isCollection);
          if (source.isCollection) {
            uriResource.setCollectionTypeFilter(filterComplexType);
          }
 else {
            uriResource.setEntryTypeFilter(filterComplexType);
          }
          context.contextUriInfo.addResourcePart(uriResource);
          return null;
        }
 else {
          if (lastResourcePart instanceof UriResourceWithKeysImpl) {
            UriResourceWithKeysImpl lastPartWithKeys=(UriResourceWithKeysImpl)lastResourcePart;
            if (!lastPartWithKeys.isCollection()) {
              if (lastPartWithKeys.getTypeFilterOnEntry() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnEntry())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnEntry()),getName(filterComplexType)));
              }
              lastPartWithKeys.setEntryTypeFilter(filterComplexType);
              return null;
            }
 else {
              if (lastPartWithKeys.getTypeFilterOnCollection() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnCollection())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnCollection()),getName(filterComplexType)));
              }
              lastPartWithKeys.setCollectionTypeFilter(filterComplexType);
              return null;
            }
          }
 else           if (lastResourcePart instanceof UriResourceTypedImpl) {
            UriResourceTypedImpl lastPartTyped=(UriResourceTypedImpl)lastResourcePart;
            if (lastPartTyped.getTypeFilter() != null) {
              throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartTyped.getTypeFilter())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartTyped.getTypeFilter()),getName(filterComplexType)));
            }
            lastPartTyped.setTypeFilter(filterComplexType);
            return null;
          }
 else {
            throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PREVIOUS_PART_NOT_TYPED,getName(filterComplexType)));
          }
        }
      }
    }
    FullQualifiedName fullBindingTypeName=new FullQualifiedName(source.type.getNamespace(),source.type.getName());
    EdmAction action=edm.getBoundAction(fullFilterName,fullBindingTypeName,source.isCollection);
    if (action != null) {
      UriResourceActionImpl pathInfoAction=new UriResourceActionImpl();
      pathInfoAction.setAction(action);
      context.contextUriInfo.addResourcePart(pathInfoAction);
      return null;
    }
    if (ctx.vlNVO.size() == 0) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullBindingTypeName.toString() + ""String_Node_Str"",UriParserSemanticException.MessageKeys.FUNCTION_PARAMETERS_EXPECTED,fullBindingTypeName.toString()));
    }
    context.contextReadingFunctionParameters=true;
    @SuppressWarnings(""String_Node_Str"") List<UriParameterImpl> parameters=(List<UriParameterImpl>)ctx.vlNVO.get(0).accept(this);
    context.contextReadingFunctionParameters=false;
    List<String> names=new ArrayList<String>();
    for (    UriParameterImpl item : parameters) {
      names.add(item.getName());
    }
    EdmFunction function=edm.getBoundFunction(fullFilterName,fullBindingTypeName,source.isCollection,names);
    if (function != null) {
      UriResourceFunctionImpl pathInfoFunction=new UriResourceFunctionImpl().setFunction(function).setParameters(parameters);
      context.contextUriInfo.addResourcePart(pathInfoFunction);
      ctx.vlNVO.remove(0);
      return null;
    }
    function=edm.getUnboundFunction(fullFilterName,names);
    if (function != null) {
      UriResourceFunctionImpl pathInfoFunction=new UriResourceFunctionImpl().setFunction(function).setParameters(parameters);
      context.contextUriInfo.addResourcePart(pathInfoFunction);
      ctx.vlNVO.remove(0);
      return null;
    }
    throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullFilterName.toString(),UriParserSemanticException.MessageKeys.UNKNOWN_PART,fullFilterName.toString()));
  }
}","public UriResourceTypedImpl readResourcePathSegment(final PathSegmentContext ctx){
  final boolean checkFirst=context.contextUriInfo.getLastResourcePart() == null || context.contextUriInfo.getLastResourcePart() instanceof UriResourceRootImpl;
  String odi=ctx.vODI.getText();
  boolean searchInContainer=true;
  if (checkFirst && ctx.vNS == null && !context.contextTypes.empty()) {
    TypeInformation source=context.contextTypes.peek();
    if (source.type instanceof EdmStructuredType) {
      EdmStructuredType str=(EdmStructuredType)source.type;
      EdmElement property=str.getProperty(odi);
      if (property != null) {
        searchInContainer=false;
      }
    }
  }
  if (searchInContainer) {
    EdmEntitySet edmEntitySet=edmEntityContainer.getEntitySet(odi);
    if (edmEntitySet != null) {
      UriResourceEntitySetImpl uriResource=new UriResourceEntitySetImpl().setEntitSet(edmEntitySet);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmSingleton edmSingleton=edmEntityContainer.getSingleton(odi);
    if (edmSingleton != null) {
      UriResourceSingletonImpl uriResource=new UriResourceSingletonImpl().setSingleton(edmSingleton);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmActionImport edmActionImport=edmEntityContainer.getActionImport(odi);
    if (edmActionImport != null) {
      UriResourceActionImpl uriResource=new UriResourceActionImpl().setActionImport(edmActionImport);
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
    EdmFunctionImport edmFunctionImport=edmEntityContainer.getFunctionImport(odi);
    if (edmFunctionImport != null) {
      if (ctx.vlNVO.isEmpty()) {
        throw wrap(new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYNTAX));
      }
      context.contextReadingFunctionParameters=true;
      @SuppressWarnings(""String_Node_Str"") List<UriParameterImpl> parameters=(List<UriParameterImpl>)ctx.vlNVO.get(0).accept(this);
      context.contextReadingFunctionParameters=false;
      ctx.vlNVO.remove(0);
      UriResourceFunctionImpl uriResource=new UriResourceFunctionImpl().setFunctionImport(edmFunctionImport,parameters);
      List<String> names=new ArrayList<String>();
      for (      UriParameterImpl item : parameters) {
        names.add(item.getName());
      }
      EdmFunction function=edmFunctionImport.getUnboundFunction(names);
      if (function == null) {
        StringBuilder tmp=new StringBuilder();
        for (        String name : names) {
          tmp.append((tmp.length() != 0 ? ""String_Node_Str"" : ""String_Node_Str"")).append(name);
        }
        throw wrap(new UriParserSemanticException(""String_Node_Str"" + edmFunctionImport.getName() + ""String_Node_Str""+ tmp.toString()+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.FUNCTION_NOT_FOUND,edmFunctionImport.getName(),tmp.toString()));
      }
      uriResource.setFunction(edmFunctionImport.getUnboundFunction(names));
      context.contextUriInfo.addResourcePart(uriResource);
      return null;
    }
  }
  final TypeInformation source;
  final UriResource lastResourcePart=context.contextUriInfo.getLastResourcePart();
  if (lastResourcePart == null) {
    if (context.contextTypes.empty()) {
      if (checkFirst && ctx.vNS == null) {
        throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_NOT_FOUND,odi));
      }
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_ONLY_FOR_TYPED_PARTS,odi));
    }
    source=context.contextTypes.peek();
  }
 else {
    source=getTypeInformation(lastResourcePart);
    if (source.type == null) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_ONLY_FOR_TYPED_PARTS,odi));
    }
  }
  if (ctx.vNS == null) {
    UriContext.LambdaVariables lVar=getLambdaVar(odi);
    if (lVar != null) {
      UriResourceLambdaVarImpl lambdaResource=new UriResourceLambdaVarImpl();
      lambdaResource.setVariableText(lVar.name);
      lambdaResource.setType(lVar.type);
      lambdaResource.setCollection(lVar.isCollection);
      context.contextUriInfo.addResourcePart(lambdaResource);
      return null;
    }
    if (!(source.type instanceof EdmStructuredType)) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.RESOURCE_PART_MUST_BE_PRECEDED_BY_STRUCTURAL_TYPE,odi));
    }
    if ((ctx.depth() <= 2 || lastResourcePart instanceof UriResourceTypedImpl || lastResourcePart instanceof UriResourceNavigationPropertyImpl) && source.isCollection) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PROPERTY_AFTER_COLLECTION,odi));
    }
    EdmStructuredType structType=(EdmStructuredType)source.type;
    EdmElement property=structType.getProperty(odi);
    if (property == null) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + odi + ""String_Node_Str""+ structType.getFullQualifiedName().getFullQualifiedNameAsString()+ ""String_Node_Str"",ctx.depth() > 2 ? UriParserSemanticException.MessageKeys.EXPRESSION_PROPERTY_NOT_IN_TYPE : UriParserSemanticException.MessageKeys.PROPERTY_NOT_IN_TYPE,structType.getFullQualifiedName().getFullQualifiedNameAsString(),odi));
    }
    if (property instanceof EdmProperty) {
      if (((EdmProperty)property).isPrimitive()) {
        UriResourcePrimitivePropertyImpl simpleResource=new UriResourcePrimitivePropertyImpl().setProperty((EdmProperty)property);
        context.contextUriInfo.addResourcePart(simpleResource);
        return null;
      }
 else {
        UriResourceComplexPropertyImpl complexResource=new UriResourceComplexPropertyImpl().setProperty((EdmProperty)property);
        context.contextUriInfo.addResourcePart(complexResource);
        return null;
      }
    }
 else     if (property instanceof EdmNavigationProperty) {
      UriResourceNavigationPropertyImpl navigationResource=new UriResourceNavigationPropertyImpl().setNavigationProperty((EdmNavigationProperty)property);
      context.contextUriInfo.addResourcePart(navigationResource);
      return null;
    }
 else {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + property + ""String_Node_Str"",UriParserSemanticException.MessageKeys.UNKNOWN_PROPERTY_TYPE,property.getName()));
    }
  }
 else {
    FullQualifiedName fullFilterName=getFullNameFromContext(ctx.vNS,odi);
    if (source.type instanceof EdmEntityType) {
      EdmEntityType filterEntityType=edm.getEntityType(fullFilterName);
      if (filterEntityType != null) {
        if (!(filterEntityType.compatibleTo(source.type))) {
          throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullFilterName.toString(),UriParserSemanticException.MessageKeys.INCOMPATIBLE_TYPE_FILTER,fullFilterName.toString()));
        }
        if (lastResourcePart == null) {
          UriResourceStartingTypeFilterImpl uriResource=new UriResourceStartingTypeFilterImpl().setType(filterEntityType).setCollection(source.isCollection);
          if (source.isCollection) {
            uriResource.setCollectionTypeFilter(filterEntityType);
          }
 else {
            uriResource.setEntryTypeFilter(filterEntityType);
          }
          context.contextUriInfo.addResourcePart(uriResource);
          return null;
        }
 else {
          if (lastResourcePart instanceof UriResourceWithKeysImpl) {
            UriResourceWithKeysImpl lastPartWithKeys=(UriResourceWithKeysImpl)lastResourcePart;
            if (!lastPartWithKeys.isCollection()) {
              if (lastPartWithKeys.getTypeFilterOnEntry() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnEntry())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnEntry()),getName(filterEntityType)));
              }
              lastPartWithKeys.setEntryTypeFilter(filterEntityType);
              return null;
            }
 else {
              if (lastPartWithKeys.getTypeFilterOnCollection() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnCollection())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnCollection()),getName(filterEntityType)));
              }
              lastPartWithKeys.setCollectionTypeFilter(filterEntityType);
              return null;
            }
          }
 else           if (lastResourcePart instanceof UriResourceTypedImpl) {
            UriResourceTypedImpl lastPartTyped=(UriResourceTypedImpl)lastResourcePart;
            if (lastPartTyped.getTypeFilter() != null) {
              throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str""+ getName(lastPartTyped.getTypeFilter())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartTyped.getTypeFilter()),getName(filterEntityType)));
            }
            lastPartTyped.setTypeFilter(filterEntityType);
            return null;
          }
 else {
            throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterEntityType) + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PREVIOUS_PART_NOT_TYPED,getName(filterEntityType)));
          }
        }
      }
    }
 else     if (source.type instanceof EdmComplexType) {
      EdmComplexType filterComplexType=edm.getComplexType(fullFilterName);
      if (filterComplexType != null) {
        if (!(filterComplexType.compatibleTo(source.type))) {
          throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(source.type) + ""String_Node_Str""+ getName(filterComplexType)+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.INCOMPATIBLE_TYPE_FILTER,getName(source.type)));
        }
        if (lastResourcePart == null) {
          UriResourceStartingTypeFilterImpl uriResource=new UriResourceStartingTypeFilterImpl().setType(filterComplexType).setCollection(source.isCollection);
          if (source.isCollection) {
            uriResource.setCollectionTypeFilter(filterComplexType);
          }
 else {
            uriResource.setEntryTypeFilter(filterComplexType);
          }
          context.contextUriInfo.addResourcePart(uriResource);
          return null;
        }
 else {
          if (lastResourcePart instanceof UriResourceWithKeysImpl) {
            UriResourceWithKeysImpl lastPartWithKeys=(UriResourceWithKeysImpl)lastResourcePart;
            if (!lastPartWithKeys.isCollection()) {
              if (lastPartWithKeys.getTypeFilterOnEntry() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnEntry())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnEntry()),getName(filterComplexType)));
              }
              lastPartWithKeys.setEntryTypeFilter(filterComplexType);
              return null;
            }
 else {
              if (lastPartWithKeys.getTypeFilterOnCollection() != null) {
                throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartWithKeys.getTypeFilterOnCollection())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartWithKeys.getTypeFilterOnCollection()),getName(filterComplexType)));
              }
              lastPartWithKeys.setCollectionTypeFilter(filterComplexType);
              return null;
            }
          }
 else           if (lastResourcePart instanceof UriResourceTypedImpl) {
            UriResourceTypedImpl lastPartTyped=(UriResourceTypedImpl)lastResourcePart;
            if (lastPartTyped.getTypeFilter() != null) {
              throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str""+ getName(lastPartTyped.getTypeFilter())+ ""String_Node_Str"",UriParserSemanticException.MessageKeys.TYPE_FILTER_NOT_CHAINABLE,getName(lastPartTyped.getTypeFilter()),getName(filterComplexType)));
            }
            lastPartTyped.setTypeFilter(filterComplexType);
            return null;
          }
 else {
            throw wrap(new UriParserSemanticException(""String_Node_Str"" + getName(filterComplexType) + ""String_Node_Str"",UriParserSemanticException.MessageKeys.PREVIOUS_PART_NOT_TYPED,getName(filterComplexType)));
          }
        }
      }
    }
    FullQualifiedName fullBindingTypeName=new FullQualifiedName(source.type.getNamespace(),source.type.getName());
    EdmAction action=edm.getBoundAction(fullFilterName,fullBindingTypeName,source.isCollection);
    if (action != null) {
      UriResourceActionImpl pathInfoAction=new UriResourceActionImpl();
      pathInfoAction.setAction(action);
      context.contextUriInfo.addResourcePart(pathInfoAction);
      return null;
    }
    if (ctx.vlNVO.size() == 0) {
      throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullBindingTypeName.toString() + ""String_Node_Str"",UriParserSemanticException.MessageKeys.FUNCTION_PARAMETERS_EXPECTED,fullBindingTypeName.toString()));
    }
    context.contextReadingFunctionParameters=true;
    @SuppressWarnings(""String_Node_Str"") List<UriParameterImpl> parameters=(List<UriParameterImpl>)ctx.vlNVO.get(0).accept(this);
    context.contextReadingFunctionParameters=false;
    List<String> names=new ArrayList<String>();
    for (    UriParameterImpl item : parameters) {
      names.add(item.getName());
    }
    EdmFunction function=edm.getBoundFunction(fullFilterName,fullBindingTypeName,source.isCollection,names);
    if (function != null) {
      UriResourceFunctionImpl pathInfoFunction=new UriResourceFunctionImpl().setFunction(function).setParameters(parameters);
      context.contextUriInfo.addResourcePart(pathInfoFunction);
      ctx.vlNVO.remove(0);
      return null;
    }
    function=edm.getUnboundFunction(fullFilterName,names);
    if (function != null) {
      UriResourceFunctionImpl pathInfoFunction=new UriResourceFunctionImpl().setFunction(function).setParameters(parameters);
      context.contextUriInfo.addResourcePart(pathInfoFunction);
      ctx.vlNVO.remove(0);
      return null;
    }
    throw wrap(new UriParserSemanticException(""String_Node_Str"" + fullFilterName.toString(),UriParserSemanticException.MessageKeys.UNKNOWN_PART,fullFilterName.toString()));
  }
}",0.99679658302189
33303,"public ExpandItemImpl setSystemQueryOption(final SystemQueryOptionImpl sysItem){
  if (sysItem.getKind() == SystemQueryOptionKind.EXPAND) {
    expandOption=(ExpandOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.FILTER) {
    filterOption=(FilterOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.COUNT) {
    inlineCountOption=(CountOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.ORDERBY) {
    orderByOption=(OrderByOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.SEARCH) {
    searchOption=(SearchOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.SELECT) {
    selectOption=(SelectOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.SKIP) {
    skipOption=(SkipOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.TOP) {
    topOption=(TopOptionImpl)sysItem;
  }
 else   if (sysItem.getKind() == SystemQueryOptionKind.LEVELS) {
    levelsExpandOption=(LevelsExpandOption)sysItem;
  }
  return this;
}","public ExpandItemImpl setSystemQueryOption(final SystemQueryOptionImpl sysItem){
  if (sysItem instanceof ExpandOptionImpl) {
    expandOption=(ExpandOptionImpl)sysItem;
  }
 else   if (sysItem instanceof FilterOptionImpl) {
    filterOption=(FilterOptionImpl)sysItem;
  }
 else   if (sysItem instanceof CountOptionImpl) {
    inlineCountOption=(CountOptionImpl)sysItem;
  }
 else   if (sysItem instanceof OrderByOptionImpl) {
    orderByOption=(OrderByOptionImpl)sysItem;
  }
 else   if (sysItem instanceof SearchOptionImpl) {
    searchOption=(SearchOptionImpl)sysItem;
  }
 else   if (sysItem instanceof SelectOptionImpl) {
    selectOption=(SelectOptionImpl)sysItem;
  }
 else   if (sysItem instanceof SkipOptionImpl) {
    skipOption=(SkipOptionImpl)sysItem;
  }
 else   if (sysItem instanceof TopOptionImpl) {
    topOption=(TopOptionImpl)sysItem;
  }
 else   if (sysItem instanceof LevelsExpandOption) {
    levelsExpandOption=(LevelsExpandOption)sysItem;
  }
  return this;
}",0.3492822966507177
33304,"private void validatePropertyOperations(final UriInfo uriInfo,final HttpMethod method) throws UriValidationException {
  final List<UriResource> parts=uriInfo.getUriResourceParts();
  final UriResource last=parts.size() > 0 ? parts.get(parts.size() - 1) : null;
  final UriResource previous=parts.size() > 1 ? parts.get(parts.size() - 2) : null;
  if (last != null && (last.getKind() == UriResourceKind.primitiveProperty || last.getKind() == UriResourceKind.complexProperty || last.getKind() == UriResourceKind.value && previous.getKind() == UriResourceKind.primitiveProperty)) {
    final EdmProperty property=((UriResourceProperty)(last.getKind() == UriResourceKind.value ? previous : last)).getProperty();
    if (method == HttpMethod.PATCH && property.isCollection()) {
      throw new UriValidationException(""String_Node_Str"",UriValidationException.MessageKeys.UNSUPPORTED_HTTP_METHOD,method.toString());
    }
    if (method == HttpMethod.DELETE && !property.isNullable()) {
      throw new UriValidationException(""String_Node_Str"",UriValidationException.MessageKeys.UNSUPPORTED_HTTP_METHOD,method.toString());
    }
  }
}","private void validatePropertyOperations(final UriInfo uriInfo,final HttpMethod method) throws UriValidationException {
  final List<UriResource> parts=uriInfo.getUriResourceParts();
  final UriResource last=parts.size() > 0 ? parts.get(parts.size() - 1) : null;
  final UriResource previous=parts.size() > 1 ? parts.get(parts.size() - 2) : null;
  if (last != null && (last.getKind() == UriResourceKind.primitiveProperty || last.getKind() == UriResourceKind.complexProperty || (last.getKind() == UriResourceKind.value && previous != null && previous.getKind() == UriResourceKind.primitiveProperty))) {
    final EdmProperty property=((UriResourceProperty)(last.getKind() == UriResourceKind.value ? previous : last)).getProperty();
    if (method == HttpMethod.PATCH && property.isCollection()) {
      throw new UriValidationException(""String_Node_Str"",UriValidationException.MessageKeys.UNSUPPORTED_HTTP_METHOD,method.toString());
    }
    if (method == HttpMethod.DELETE && !property.isNullable()) {
      throw new UriValidationException(""String_Node_Str"",UriValidationException.MessageKeys.UNSUPPORTED_HTTP_METHOD,method.toString());
    }
  }
}",0.990342405618964
33305,"private void validateNoQueryOptionsForHttpMethod(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
  if (!uriInfo.getSystemQueryOptions().isEmpty()) {
    String options=""String_Node_Str"";
    for (    SystemQueryOption option : uriInfo.getSystemQueryOptions()) {
      options=options + option.getName() + ""String_Node_Str"";
    }
    throw new UriValidationException(""String_Node_Str"" + options + ""String_Node_Str""+ httpMethod,UriValidationException.MessageKeys.SYSTEM_QUERY_OPTION_NOT_ALLOWED_FOR_HTTP_METHOD,options,httpMethod.toString());
  }
}","private void validateNoQueryOptionsForHttpMethod(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
  if (!uriInfo.getSystemQueryOptions().isEmpty()) {
    StringBuilder options=new StringBuilder();
    for (    SystemQueryOption option : uriInfo.getSystemQueryOptions()) {
      options.append(option.getName()).append(""String_Node_Str"");
    }
    throw new UriValidationException(""String_Node_Str"" + options.toString() + ""String_Node_Str""+ httpMethod,UriValidationException.MessageKeys.SYSTEM_QUERY_OPTION_NOT_ALLOWED_FOR_HTTP_METHOD,options.toString(),httpMethod.toString());
  }
}",0.9190992493744788
33306,"private boolean isAction(final UriInfo uriInfo){
  List<UriResource> uriResourceParts=uriInfo.getUriResourceParts();
  if (!uriResourceParts.isEmpty()) {
    return UriResourceKind.action == uriResourceParts.get(uriResourceParts.size() - 1).getKind();
  }
  return false;
}","private boolean isAction(final UriInfo uriInfo){
  List<UriResource> uriResourceParts=uriInfo.getUriResourceParts();
  if (uriResourceParts.isEmpty()) {
    return false;
  }
  return UriResourceKind.action == uriResourceParts.get(uriResourceParts.size() - 1).getKind();
}",0.9247706422018348
33307,"@Override protected Map<String,EdmSchema> createSchemas(){
  try {
    final Map<String,EdmSchema> providerSchemas=new LinkedHashMap<String,EdmSchema>();
    for (    CsdlSchema schema : provider.getSchemas()) {
      providerSchemas.put(schema.getNamespace(),new EdmSchemaImpl(this,provider,schema));
    }
    return providerSchemas;
  }
 catch (  ODataException e) {
    throw new EdmException(e);
  }
}","@Override protected Map<String,EdmSchema> createSchemas(){
  try {
    final Map<String,EdmSchema> providerSchemas=new LinkedHashMap<String,EdmSchema>();
    List<CsdlSchema> localSchemas=provider.getSchemas();
    if (localSchemas != null) {
      for (      CsdlSchema schema : localSchemas) {
        providerSchemas.put(schema.getNamespace(),new EdmSchemaImpl(this,provider,schema));
      }
    }
    return providerSchemas;
  }
 catch (  ODataException e) {
    throw new EdmException(e);
  }
}",0.8543046357615894
33308,"private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  CircleStreamBuffer csb=new CircleStreamBuffer();
  JsonGenerator gen=new JsonFactory().createGenerator(csb.getOutputStream(),JsonEncoding.UTF8);
  gen.writeStartObject();
  DebugTab requestInfo=parts.get(0);
  gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
  requestInfo.appendJson(gen);
  DebugTab responseInfo=parts.get(1);
  gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
  responseInfo.appendJson(gen);
  gen.writeFieldName(""String_Node_Str"");
  gen.writeStartObject();
  gen.writeStringField(""String_Node_Str"",getVersion());
  for (  DebugTab part : parts.subList(2,parts.size())) {
    gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
    part.appendJson(gen);
  }
  gen.writeEndObject();
  gen.writeEndObject();
  gen.close();
  csb.closeWrite();
  return csb.getInputStream();
}","private InputStream wrapInJson(final List<DebugTab> parts) throws IOException {
  CircleStreamBuffer csb=new CircleStreamBuffer();
  IOException cachedException=null;
  try {
    JsonGenerator gen=new JsonFactory().createGenerator(csb.getOutputStream(),JsonEncoding.UTF8);
    gen.writeStartObject();
    DebugTab requestInfo=parts.get(0);
    gen.writeFieldName(requestInfo.getName().toLowerCase(Locale.ROOT));
    requestInfo.appendJson(gen);
    DebugTab responseInfo=parts.get(1);
    gen.writeFieldName(responseInfo.getName().toLowerCase(Locale.ROOT));
    responseInfo.appendJson(gen);
    gen.writeFieldName(""String_Node_Str"");
    gen.writeStartObject();
    gen.writeStringField(""String_Node_Str"",getVersion());
    for (    DebugTab part : parts.subList(2,parts.size())) {
      gen.writeFieldName(part.getName().toLowerCase(Locale.ROOT));
      part.appendJson(gen);
    }
    gen.writeEndObject();
    gen.writeEndObject();
    gen.close();
    csb.getOutputStream().close();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (csb != null && csb.getOutputStream() != null) {
      try {
        csb.getOutputStream().close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
  return csb.getInputStream();
}",0.7483588621444202
33309,"private void appendSelectItemJson(JsonGenerator gen,SelectItem selectItem) throws IOException {
  String selectedProperty=""String_Node_Str"";
  if (selectItem.isStar()) {
    if (selectItem.getAllOperationsInSchemaNameSpace() == null) {
      selectedProperty=""String_Node_Str"";
    }
 else {
      selectedProperty=selectItem.getAllOperationsInSchemaNameSpace().getFullQualifiedNameAsString() + ""String_Node_Str"";
    }
  }
 else {
    boolean first=true;
    for (    UriResource resourcePart : selectItem.getResourcePath().getUriResourceParts()) {
      if (!first) {
        selectedProperty=selectedProperty + ""String_Node_Str"";
      }
      selectedProperty=resourcePart.toString();
    }
  }
  gen.writeString(selectedProperty);
}","private void appendSelectItemJson(JsonGenerator gen,SelectItem selectItem) throws IOException {
  String selectedProperty=""String_Node_Str"";
  if (selectItem.isStar()) {
    if (selectItem.getAllOperationsInSchemaNameSpace() == null) {
      selectedProperty=""String_Node_Str"";
    }
 else {
      selectedProperty=selectItem.getAllOperationsInSchemaNameSpace().getFullQualifiedNameAsString() + ""String_Node_Str"";
    }
  }
 else {
    boolean first=true;
    for (    UriResource resourcePart : selectItem.getResourcePath().getUriResourceParts()) {
      if (!first) {
        selectedProperty=selectedProperty + ""String_Node_Str"";
      }
      selectedProperty=resourcePart.toString();
      first=false;
    }
  }
  gen.writeString(selectedProperty);
}",0.987273945077026
33310,"private String getJsonString() throws IOException {
  CircleStreamBuffer csb=new CircleStreamBuffer();
  JsonGenerator gen=new JsonFactory().createGenerator(csb.getOutputStream(),JsonEncoding.UTF8).setPrettyPrinter(new DefaultPrettyPrinter());
  appendJson(gen);
  gen.close();
  csb.closeWrite();
  return IOUtils.toString(csb.getInputStream());
}","private String getJsonString() throws IOException {
  CircleStreamBuffer csb=new CircleStreamBuffer();
  IOException cachedException=null;
  try {
    JsonGenerator json=new JsonFactory().createGenerator(csb.getOutputStream(),JsonEncoding.UTF8).setPrettyPrinter(new DefaultPrettyPrinter());
    appendJson(json);
    json.close();
    csb.getOutputStream().close();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (csb != null && csb.getOutputStream() != null) {
      try {
        csb.getOutputStream().close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
  try {
    String jsonString=IOUtils.toString(csb.getInputStream());
    csb.getInputStream().close();
    return jsonString;
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (csb != null && csb.getInputStream() != null) {
      try {
        csb.getInputStream().close();
      }
 catch (      IOException e) {
        if (cachedException != null) {
          throw cachedException;
        }
 else {
          throw e;
        }
      }
    }
  }
}",0.39501312335958
33311,"private void validateForHttpMethod(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
  RowIndexForHttpMethod row=rowIndexForHttpMethod(httpMethod);
  for (  SystemQueryOption option : uriInfo.getSystemQueryOptions()) {
    ColumnIndex col=colIndex(option.getKind());
    if (!decisionMatrixForHttpMethod[row.getIndex()][col.getIndex()]) {
      throw new UriValidationException(""String_Node_Str"" + option.getName() + ""String_Node_Str""+ httpMethod,UriValidationException.MessageKeys.SYSTEM_QUERY_OPTION_NOT_ALLOWED_FOR_HTTP_METHOD,option.getName(),httpMethod.toString());
    }
  }
}","private void validateForHttpMethod(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
switch (httpMethod) {
case POST:
    if (!isAction(uriInfo)) {
      validateNoQueryOptionsForHttpMethod(uriInfo,httpMethod);
    }
  break;
case DELETE:
if (!isReferences(uriInfo)) {
  validateNoQueryOptionsForHttpMethod(uriInfo,httpMethod);
}
 else {
  for (  SystemQueryOption option : uriInfo.getSystemQueryOptions()) {
    if (SystemQueryOptionKind.ID != option.getKind()) {
      throw new UriValidationException(""String_Node_Str"" + option.getName() + ""String_Node_Str""+ httpMethod,UriValidationException.MessageKeys.SYSTEM_QUERY_OPTION_NOT_ALLOWED_FOR_HTTP_METHOD,option.getName(),httpMethod.toString());
    }
  }
}
break;
case PUT:
case PATCH:
validateNoQueryOptionsForHttpMethod(uriInfo,httpMethod);
break;
default :
throw new UriValidationException(""String_Node_Str"" + httpMethod,UriValidationException.MessageKeys.UNSUPPORTED_HTTP_METHOD,httpMethod.toString());
}
}",0.6086956521739131
33312,"public void validate(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
  validateForHttpMethod(uriInfo,httpMethod);
  validateQueryOptions(uriInfo);
  validateKeyPredicates(uriInfo);
  validatePropertyOperations(uriInfo,httpMethod);
}","public void validate(final UriInfo uriInfo,final HttpMethod httpMethod) throws UriValidationException {
  if (HttpMethod.GET != httpMethod) {
    validateForHttpMethod(uriInfo,httpMethod);
  }
  validateQueryOptions(uriInfo);
  validateKeyPredicates(uriInfo);
  validatePropertyOperations(uriInfo,httpMethod);
}",0.9238754325259516
33313,"/** 
 * Add references (relationships) to Entity.
 * @param request
 * @param entityETag - entity etag to match before add operation, ""*"" allows all.
 * @param idReferences - references to add
 * @param response - return always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void addReference(DataRequest request,String entityETag,List<URI> idReferences,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;","/** 
 * Add references (relationships) to Entity. This is always on collection valued navigation property
 * @param request
 * @param entityETag - entity etag to match before add operation, ""*"" allows all.
 * @param referenceId - references to add
 * @param response - return always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void addReference(DataRequest request,String entityETag,URI referenceId,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;",0.923529411764706
33314,"/** 
 * Update references (relationships) in an Entity
 * @param request
 * @param entityETag
 * @param referenceId
 * @param response - always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void updateReference(DataRequest request,String entityETag,URI referenceId,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;","/** 
 * Update references (relationships) in an Entity; This is always against single valued navigation property
 * @param request
 * @param entityETag
 * @param referenceId
 * @param response - always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void updateReference(DataRequest request,String entityETag,URI referenceId,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;",0.9320843091334896
33315,"/** 
 * Delete references (relationships) in an Entity
 * @param request
 * @param deleteId
 * @param entityETag
 * @param response - always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void deleteReference(DataRequest request,URI deleteId,String entityETag,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;","/** 
 * Delete references (relationships) in an Entity
 * @param request
 * @param deleteId; for collection valued navigation this will be non-null value; for single valuednavigation property, this will be null.
 * @param entityETag
 * @param response - always should be 204
 * @throws ODataTranslatedException
 * @throws ODataApplicationException
 */
void deleteReference(DataRequest request,URI deleteId,String entityETag,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException ;",0.8672566371681416
33316,"@Override public void addReference(DataRequest request,String entityETag,List<URI> idReferences,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException {
  selectProcessor(ReferenceProcessor.class).createReference(request.getODataRequest(),response.getODataResponse(),request.getUriInfo(),request.getResponseContentType());
}","@Override public void addReference(DataRequest request,String entityETag,URI referenceId,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException {
  selectProcessor(ReferenceProcessor.class).createReference(request.getODataRequest(),response.getODataResponse(),request.getUriInfo(),request.getResponseContentType());
}",0.9560283687943264
33317,"@Test public void testWriteReferenceCollection() throws Exception {
  String payload=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final ServiceHandler handler=Mockito.mock(ServiceHandler.class);
  helpTest(handler,""String_Node_Str"",""String_Node_Str"",payload,new TestResult(){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void validate() throws Exception {
      ArgumentCaptor<DataRequest> arg1=ArgumentCaptor.forClass(DataRequest.class);
      ArgumentCaptor<String> arg2=ArgumentCaptor.forClass(String.class);
      ArgumentCaptor<List> arg3=ArgumentCaptor.forClass(List.class);
      ArgumentCaptor<NoContentResponse> arg4=ArgumentCaptor.forClass(NoContentResponse.class);
      Mockito.verify(handler).addReference(arg1.capture(),arg2.capture(),arg3.capture(),arg4.capture());
      DataRequest request=arg1.getValue();
      assertEquals(""String_Node_Str"",request.getResponseContentType().toContentTypeString());
    }
  }
);
}","@Test public void testWriteReferenceCollection() throws Exception {
  String payload=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  final ServiceHandler handler=Mockito.mock(ServiceHandler.class);
  helpTest(handler,""String_Node_Str"",""String_Node_Str"",payload,new TestResult(){
    @SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) @Override public void validate() throws Exception {
      ArgumentCaptor<DataRequest> arg1=ArgumentCaptor.forClass(DataRequest.class);
      ArgumentCaptor<String> arg2=ArgumentCaptor.forClass(String.class);
      ArgumentCaptor<URI> arg3=ArgumentCaptor.forClass(URI.class);
      ArgumentCaptor<NoContentResponse> arg4=ArgumentCaptor.forClass(NoContentResponse.class);
      Mockito.verify(handler).addReference(arg1.capture(),arg2.capture(),arg3.capture(),arg4.capture());
      DataRequest request=arg1.getValue();
      assertEquals(""String_Node_Str"",request.getResponseContentType().toContentTypeString());
    }
  }
);
}",0.9928571428571428
33318,"@Override public void addReference(DataRequest request,String entityETag,List<URI> references,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException {
  final EntityDetails details=process(request);
  try {
    for (    URI reference : references) {
      DataRequest bindingRequest=request.parseLink(reference);
      Entity linkEntity=this.dataModel.getEntity(bindingRequest.getEntitySet().getName(),bindingRequest.getKeyPredicates());
      this.dataModel.addNavigationLink(details.navigationProperty,details.entity,linkEntity);
    }
  }
 catch (  URISyntaxException e) {
    throw new ODataApplicationException(e.getMessage(),500,Locale.getDefault(),e);
  }
  response.writeNoContent();
}","@Override public void addReference(DataRequest request,String entityETag,URI referenceId,NoContentResponse response) throws ODataTranslatedException, ODataApplicationException {
  final EntityDetails details=process(request);
  try {
    DataRequest bindingRequest=request.parseLink(referenceId);
    Entity linkEntity=this.dataModel.getEntity(bindingRequest.getEntitySet().getName(),bindingRequest.getKeyPredicates());
    this.dataModel.addNavigationLink(details.navigationProperty,details.entity,linkEntity);
  }
 catch (  URISyntaxException e) {
    throw new ODataApplicationException(e.getMessage(),500,Locale.getDefault(),e);
  }
  response.writeNoContent();
}",0.5962643678160919
33319,"@Test public void testAddCollectionReferences() throws Exception {
  HttpResponse response=httpGET(baseURL + ""String_Node_Str"",200);
  JsonNode node=getJSONNode(response);
  assertTrue(node.get(""String_Node_Str"").isArray());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(0).get(""String_Node_Str"").asText());
  assertNull(((ArrayNode)node.get(""String_Node_Str"")).get(1));
  String payload=""String_Node_Str"" + ""String_Node_Str"" + baseURL + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  HttpPost postRequest=new HttpPost(baseURL + ""String_Node_Str"");
  postRequest.setEntity(new StringEntity(payload,ContentType.APPLICATION_JSON));
  response=httpSend(postRequest,204);
  response=httpGET(baseURL + ""String_Node_Str"",200);
  node=getJSONNode(response);
  assertTrue(node.get(""String_Node_Str"").isArray());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(0).get(""String_Node_Str"").asText());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(1).get(""String_Node_Str"").asText());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(2).get(""String_Node_Str"").asText());
}","@Test public void testAddCollectionReferences() throws Exception {
  HttpResponse response=httpGET(baseURL + ""String_Node_Str"",200);
  JsonNode node=getJSONNode(response);
  assertTrue(node.get(""String_Node_Str"").isArray());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(0).get(""String_Node_Str"").asText());
  assertNull(((ArrayNode)node.get(""String_Node_Str"")).get(1));
  String payload=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"";
  HttpPost postRequest=new HttpPost(baseURL + ""String_Node_Str"");
  postRequest.setEntity(new StringEntity(payload,ContentType.APPLICATION_JSON));
  response=httpSend(postRequest,204);
  response=httpGET(baseURL + ""String_Node_Str"",200);
  node=getJSONNode(response);
  assertTrue(node.get(""String_Node_Str"").isArray());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(0).get(""String_Node_Str"").asText());
  assertEquals(""String_Node_Str"",((ArrayNode)node.get(""String_Node_Str"")).get(1).get(""String_Node_Str"").asText());
}",0.9035933391761612
33320,"public UriInfoImpl setSystemQueryOption(final SystemQueryOptionImpl systemOption){
  if (systemOption.getKind() == SystemQueryOptionKind.EXPAND) {
    systemQueryOptions.put(SystemQueryOptionKind.EXPAND,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.FILTER) {
    systemQueryOptions.put(SystemQueryOptionKind.FILTER,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.FORMAT) {
    systemQueryOptions.put(SystemQueryOptionKind.FORMAT,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.ID) {
    systemQueryOptions.put(SystemQueryOptionKind.ID,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.COUNT) {
    systemQueryOptions.put(SystemQueryOptionKind.COUNT,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.ORDERBY) {
    systemQueryOptions.put(SystemQueryOptionKind.ORDERBY,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.SEARCH) {
    systemQueryOptions.put(SystemQueryOptionKind.SEARCH,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.SELECT) {
    systemQueryOptions.put(SystemQueryOptionKind.SELECT,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.SKIP) {
    systemQueryOptions.put(SystemQueryOptionKind.SKIP,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.SKIPTOKEN) {
    systemQueryOptions.put(SystemQueryOptionKind.SKIPTOKEN,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.TOP) {
    systemQueryOptions.put(SystemQueryOptionKind.TOP,systemOption);
  }
 else   if (systemOption.getKind() == SystemQueryOptionKind.LEVELS) {
    systemQueryOptions.put(SystemQueryOptionKind.LEVELS,systemOption);
  }
 else {
    throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
  }
  return this;
}","/** 
 * Adds system query option.
 * @param systemOption the option to be added
 * @return this object for method chaining
 * @throws ODataRuntimeException if an unsupported option is providedor an option of this kind has been added before
 */
public UriInfoImpl setSystemQueryOption(final SystemQueryOption systemOption){
  final SystemQueryOptionKind kind=systemOption.getKind();
switch (kind) {
case EXPAND:
case FILTER:
case FORMAT:
case ID:
case COUNT:
case ORDERBY:
case SEARCH:
case SELECT:
case SKIP:
case SKIPTOKEN:
case TOP:
case LEVELS:
    if (systemQueryOptions.containsKey(kind)) {
      throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
    }
 else {
      systemQueryOptions.put(kind,systemOption);
    }
  break;
default :
throw new ODataRuntimeException(""String_Node_Str"" + systemOption.getName());
}
return this;
}",0.1723143475126171
33321,"public UriInfo parseUri(final String input,final Edm edm) throws UriParserException {
  boolean readQueryParameter=false;
  boolean readFragment=false;
  UriContext context=new UriContext();
  UriParseTreeVisitor uriParseTreeVisitor=new UriParseTreeVisitor(edm,context);
  try {
    RawUri uri=UriDecoder.decodeUri(input,0);
    String firstSegment=""String_Node_Str"";
    if (uri.pathSegmentListDecoded.size() > 0) {
      firstSegment=uri.pathSegmentListDecoded.get(0);
    }
    if (firstSegment.length() == 0) {
      readQueryParameter=true;
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.service);
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      BatchEOFContext ctxBatchEOF=(BatchEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.Batch);
      uriParseTreeVisitor.visitBatchEOF(ctxBatchEOF);
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      MetadataEOFContext ctxMetadataEOF=(MetadataEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.Metadata);
      uriParseTreeVisitor.visitMetadataEOF(ctxMetadataEOF);
      readQueryParameter=true;
      readFragment=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.entityId);
      if (uri.pathSegmentListDecoded.size() > 1) {
        EntityEOFContext ctxEntityEOF=(EntityEOFContext)parseRule(uri.pathSegmentListDecoded.get(1),ParserEntryRules.Entity);
        uriParseTreeVisitor.visitEntityEOF(ctxEntityEOF);
      }
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      AllEOFContext ctxResourcePathEOF=(AllEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.All);
      uriParseTreeVisitor.visitAllEOF(ctxResourcePathEOF);
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      CrossjoinEOFContext ctxResourcePathEOF=(CrossjoinEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.CrossJoin);
      uriParseTreeVisitor.visitCrossjoinEOF(ctxResourcePathEOF);
      readQueryParameter=true;
    }
 else {
      List<PathSegmentEOFContext> ctxPathSegments=new ArrayList<PathSegmentEOFContext>();
      for (      String pathSegment : uri.pathSegmentListDecoded) {
        PathSegmentEOFContext ctxPathSegment=(PathSegmentEOFContext)parseRule(pathSegment,ParserEntryRules.PathSegment);
        ctxPathSegments.add(ctxPathSegment);
      }
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.resource);
      for (      PathSegmentEOFContext ctxPathSegment : ctxPathSegments) {
        uriParseTreeVisitor.visitPathSegmentEOF(ctxPathSegment);
      }
      UriResource lastSegment=context.contextUriInfo.getLastResourcePart();
      if (lastSegment instanceof UriResourcePartTyped) {
        UriResourcePartTyped typed=(UriResourcePartTyped)lastSegment;
        UriParseTreeVisitor.TypeInformation myType=uriParseTreeVisitor.getTypeInformation(typed);
        UriParseTreeVisitor.TypeInformation typeInfo=uriParseTreeVisitor.new TypeInformation(myType.type,typed.isCollection());
        context.contextTypes.push(typeInfo);
      }
      readQueryParameter=true;
    }
    if (readQueryParameter) {
      for (      RawUri.QueryOption option : uri.queryOptionListDecoded) {
        if (!option.name.startsWith(""String_Node_Str"")) {
          CustomQueryOptionImpl customOption=new CustomQueryOptionImpl();
          customOption.setName(option.name);
          customOption.setText(option.value);
          context.contextUriInfo.addCustomQueryOption(customOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.FILTER.toString())) {
          FilterExpressionEOFContext ctxFilterExpression=(FilterExpressionEOFContext)parseRule(option.value,ParserEntryRules.FilterExpression);
          FilterOptionImpl filterOption=(FilterOptionImpl)uriParseTreeVisitor.visitFilterExpressionEOF(ctxFilterExpression);
          context.contextUriInfo.setSystemQueryOption(filterOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.FORMAT.toString())) {
          FormatOptionImpl formatOption=new FormatOptionImpl();
          formatOption.setName(option.name);
          formatOption.setText(option.value);
          if (option.value.equalsIgnoreCase(ODataFormat.JSON.name()) || option.value.equalsIgnoreCase(ODataFormat.XML.name()) || option.value.equalsIgnoreCase(ODataFormat.ATOM.name())|| isFormatSyntaxValid(option)) {
            formatOption.setFormat(option.value);
          }
 else {
            throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION_FORMAT,option.value);
          }
          context.contextUriInfo.setSystemQueryOption(formatOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.EXPAND.toString())) {
          ExpandItemsEOFContext ctxExpandItems=(ExpandItemsEOFContext)parseRule(option.value,ParserEntryRules.ExpandItems);
          ExpandOptionImpl expandOption=(ExpandOptionImpl)uriParseTreeVisitor.visitExpandItemsEOF(ctxExpandItems);
          context.contextUriInfo.setSystemQueryOption(expandOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.ID.toString())) {
          IdOptionImpl idOption=new IdOptionImpl();
          idOption.setName(option.name);
          idOption.setText(option.value);
          idOption.setValue(option.value);
          context.contextUriInfo.setSystemQueryOption(idOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.LEVELS.toString())) {
          throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYSTEM_QUERY_OPTION_LEVELS_NOT_ALLOWED_HERE);
        }
 else         if (option.name.equals(SystemQueryOptionKind.ORDERBY.toString())) {
          OrderByEOFContext ctxOrderByExpression=(OrderByEOFContext)parseRule(option.value,ParserEntryRules.Orderby);
          OrderByOptionImpl orderByOption=(OrderByOptionImpl)uriParseTreeVisitor.visitOrderByEOF(ctxOrderByExpression);
          context.contextUriInfo.setSystemQueryOption(orderByOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.SEARCH.toString())) {
          throw new RuntimeException(""String_Node_Str"");
        }
 else         if (option.name.equals(SystemQueryOptionKind.SELECT.toString())) {
          SelectEOFContext ctxSelectEOF=(SelectEOFContext)parseRule(option.value,ParserEntryRules.Select);
          SelectOptionImpl selectOption=(SelectOptionImpl)uriParseTreeVisitor.visitSelectEOF(ctxSelectEOF);
          context.contextUriInfo.setSystemQueryOption(selectOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.SKIP.toString())) {
          SkipOptionImpl skipOption=new SkipOptionImpl();
          skipOption.setName(option.name);
          skipOption.setText(option.value);
          try {
            skipOption.setValue(Integer.parseInt(option.value));
          }
 catch (          final NumberFormatException e) {
            throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
          }
          context.contextUriInfo.setSystemQueryOption(skipOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.SKIPTOKEN.toString())) {
          SkipTokenOptionImpl skipTokenOption=new SkipTokenOptionImpl();
          skipTokenOption.setName(option.name);
          skipTokenOption.setText(option.value);
          skipTokenOption.setValue(option.value);
          context.contextUriInfo.setSystemQueryOption(skipTokenOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.TOP.toString())) {
          TopOptionImpl topOption=new TopOptionImpl();
          topOption.setName(option.name);
          topOption.setText(option.value);
          try {
            topOption.setValue(Integer.parseInt(option.value));
          }
 catch (          final NumberFormatException e) {
            throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
          }
          context.contextUriInfo.setSystemQueryOption(topOption);
        }
 else         if (option.name.equals(SystemQueryOptionKind.COUNT.toString())) {
          CountOptionImpl inlineCountOption=new CountOptionImpl();
          inlineCountOption.setName(option.name);
          inlineCountOption.setText(option.value);
          if (option.value.equals(""String_Node_Str"") || option.value.equals(""String_Node_Str"")) {
            inlineCountOption.setValue(Boolean.parseBoolean(option.value));
          }
 else {
            throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
          }
          context.contextUriInfo.setSystemQueryOption(inlineCountOption);
        }
 else {
          throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.UNKNOWN_SYSTEM_QUERY_OPTION,option.name);
        }
      }
    }
    if (readFragment) {
      context.contextUriInfo.setFragment(uri.fragment);
    }
    return context.contextUriInfo;
  }
 catch (  ParseCancellationException e) {
    throw e.getCause() instanceof UriParserException ? (UriParserException)e.getCause() : new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.SYNTAX);
  }
}","public UriInfo parseUri(final String input,final Edm edm) throws UriParserException {
  boolean readQueryParameter=false;
  boolean readFragment=false;
  UriContext context=new UriContext();
  UriParseTreeVisitor uriParseTreeVisitor=new UriParseTreeVisitor(edm,context);
  try {
    RawUri uri=UriDecoder.decodeUri(input,0);
    String firstSegment=""String_Node_Str"";
    if (uri.pathSegmentListDecoded.size() > 0) {
      firstSegment=uri.pathSegmentListDecoded.get(0);
    }
    if (firstSegment.length() == 0) {
      readQueryParameter=true;
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.service);
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      BatchEOFContext ctxBatchEOF=(BatchEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.Batch);
      uriParseTreeVisitor.visitBatchEOF(ctxBatchEOF);
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      MetadataEOFContext ctxMetadataEOF=(MetadataEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.Metadata);
      uriParseTreeVisitor.visitMetadataEOF(ctxMetadataEOF);
      readQueryParameter=true;
      readFragment=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.entityId);
      if (uri.pathSegmentListDecoded.size() > 1) {
        EntityEOFContext ctxEntityEOF=(EntityEOFContext)parseRule(uri.pathSegmentListDecoded.get(1),ParserEntryRules.Entity);
        uriParseTreeVisitor.visitEntityEOF(ctxEntityEOF);
      }
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      AllEOFContext ctxResourcePathEOF=(AllEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.All);
      uriParseTreeVisitor.visitAllEOF(ctxResourcePathEOF);
      readQueryParameter=true;
    }
 else     if (firstSegment.startsWith(""String_Node_Str"")) {
      CrossjoinEOFContext ctxResourcePathEOF=(CrossjoinEOFContext)parseRule(uri.pathSegmentListDecoded.get(0),ParserEntryRules.CrossJoin);
      uriParseTreeVisitor.visitCrossjoinEOF(ctxResourcePathEOF);
      readQueryParameter=true;
    }
 else {
      List<PathSegmentEOFContext> ctxPathSegments=new ArrayList<PathSegmentEOFContext>();
      for (      String pathSegment : uri.pathSegmentListDecoded) {
        PathSegmentEOFContext ctxPathSegment=(PathSegmentEOFContext)parseRule(pathSegment,ParserEntryRules.PathSegment);
        ctxPathSegments.add(ctxPathSegment);
      }
      context.contextUriInfo=new UriInfoImpl().setKind(UriInfoKind.resource);
      for (      PathSegmentEOFContext ctxPathSegment : ctxPathSegments) {
        uriParseTreeVisitor.visitPathSegmentEOF(ctxPathSegment);
      }
      UriResource lastSegment=context.contextUriInfo.getLastResourcePart();
      if (lastSegment instanceof UriResourcePartTyped) {
        UriResourcePartTyped typed=(UriResourcePartTyped)lastSegment;
        UriParseTreeVisitor.TypeInformation myType=uriParseTreeVisitor.getTypeInformation(typed);
        UriParseTreeVisitor.TypeInformation typeInfo=uriParseTreeVisitor.new TypeInformation(myType.type,typed.isCollection());
        context.contextTypes.push(typeInfo);
      }
      readQueryParameter=true;
    }
    if (readQueryParameter) {
      for (      RawUri.QueryOption option : uri.queryOptionListDecoded) {
        if (option.name.startsWith(""String_Node_Str"")) {
          SystemQueryOption systemOption=null;
          if (option.name.equals(SystemQueryOptionKind.FILTER.toString())) {
            FilterExpressionEOFContext ctxFilterExpression=(FilterExpressionEOFContext)parseRule(option.value,ParserEntryRules.FilterExpression);
            FilterOptionImpl filterOption=(FilterOptionImpl)uriParseTreeVisitor.visitFilterExpressionEOF(ctxFilterExpression);
            systemOption=filterOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.FORMAT.toString())) {
            FormatOptionImpl formatOption=new FormatOptionImpl();
            formatOption.setName(option.name);
            formatOption.setText(option.value);
            if (option.value.equalsIgnoreCase(ODataFormat.JSON.name()) || option.value.equalsIgnoreCase(ODataFormat.XML.name()) || option.value.equalsIgnoreCase(ODataFormat.ATOM.name())|| isFormatSyntaxValid(option)) {
              formatOption.setFormat(option.value);
            }
 else {
              throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION_FORMAT,option.value);
            }
            systemOption=formatOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.EXPAND.toString())) {
            ExpandItemsEOFContext ctxExpandItems=(ExpandItemsEOFContext)parseRule(option.value,ParserEntryRules.ExpandItems);
            ExpandOptionImpl expandOption=(ExpandOptionImpl)uriParseTreeVisitor.visitExpandItemsEOF(ctxExpandItems);
            systemOption=expandOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.ID.toString())) {
            IdOptionImpl idOption=new IdOptionImpl();
            idOption.setName(option.name);
            idOption.setText(option.value);
            idOption.setValue(option.value);
            systemOption=idOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.LEVELS.toString())) {
            throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.SYSTEM_QUERY_OPTION_LEVELS_NOT_ALLOWED_HERE);
          }
 else           if (option.name.equals(SystemQueryOptionKind.ORDERBY.toString())) {
            OrderByEOFContext ctxOrderByExpression=(OrderByEOFContext)parseRule(option.value,ParserEntryRules.Orderby);
            OrderByOptionImpl orderByOption=(OrderByOptionImpl)uriParseTreeVisitor.visitOrderByEOF(ctxOrderByExpression);
            systemOption=orderByOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.SEARCH.toString())) {
            throw new RuntimeException(""String_Node_Str"");
          }
 else           if (option.name.equals(SystemQueryOptionKind.SELECT.toString())) {
            SelectEOFContext ctxSelectEOF=(SelectEOFContext)parseRule(option.value,ParserEntryRules.Select);
            SelectOptionImpl selectOption=(SelectOptionImpl)uriParseTreeVisitor.visitSelectEOF(ctxSelectEOF);
            systemOption=selectOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.SKIP.toString())) {
            SkipOptionImpl skipOption=new SkipOptionImpl();
            skipOption.setName(option.name);
            skipOption.setText(option.value);
            try {
              skipOption.setValue(Integer.parseInt(option.value));
            }
 catch (            final NumberFormatException e) {
              throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
            }
            systemOption=skipOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.SKIPTOKEN.toString())) {
            SkipTokenOptionImpl skipTokenOption=new SkipTokenOptionImpl();
            skipTokenOption.setName(option.name);
            skipTokenOption.setText(option.value);
            skipTokenOption.setValue(option.value);
            systemOption=skipTokenOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.TOP.toString())) {
            TopOptionImpl topOption=new TopOptionImpl();
            topOption.setName(option.name);
            topOption.setText(option.value);
            try {
              topOption.setValue(Integer.parseInt(option.value));
            }
 catch (            final NumberFormatException e) {
              throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
            }
            systemOption=topOption;
          }
 else           if (option.name.equals(SystemQueryOptionKind.COUNT.toString())) {
            CountOptionImpl inlineCountOption=new CountOptionImpl();
            inlineCountOption.setName(option.name);
            inlineCountOption.setText(option.value);
            if (option.value.equals(""String_Node_Str"") || option.value.equals(""String_Node_Str"")) {
              inlineCountOption.setValue(Boolean.parseBoolean(option.value));
            }
 else {
              throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.WRONG_VALUE_FOR_SYSTEM_QUERY_OPTION,option.name,option.value);
            }
            systemOption=inlineCountOption;
          }
 else {
            throw new UriParserSyntaxException(""String_Node_Str"",UriParserSyntaxException.MessageKeys.UNKNOWN_SYSTEM_QUERY_OPTION,option.name);
          }
          try {
            context.contextUriInfo.setSystemQueryOption(systemOption);
          }
 catch (          final ODataRuntimeException e) {
            throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.DOUBLE_SYSTEM_QUERY_OPTION,option.name);
          }
        }
 else {
          CustomQueryOptionImpl customOption=new CustomQueryOptionImpl();
          customOption.setName(option.name);
          customOption.setText(option.value);
          context.contextUriInfo.addCustomQueryOption(customOption);
        }
      }
    }
    if (readFragment) {
      context.contextUriInfo.setFragment(uri.fragment);
    }
    return context.contextUriInfo;
  }
 catch (  ParseCancellationException e) {
    throw e.getCause() instanceof UriParserException ? (UriParserException)e.getCause() : new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.SYNTAX);
  }
}",0.8702954580367659
33322,"public static RawUri decodeUri(final String uri,final int scipSegments){
  RawUri rawUri=new RawUri();
  Matcher m=uriPattern.matcher(uri);
  if (m.matches()) {
    rawUri.scheme=m.group(2);
    rawUri.authority=m.group(4);
    rawUri.path=m.group(5);
    rawUri.queryOptionString=m.group(7);
    rawUri.fragment=m.group(9);
  }
  splittPath(rawUri,scipSegments);
  splittOptions(rawUri);
  decode(rawUri);
  return rawUri;
}","public static RawUri decodeUri(final String uri,final int skipSegments) throws UriParserSyntaxException {
  RawUri rawUri=new RawUri();
  Matcher m=uriPattern.matcher(uri);
  if (m.matches()) {
    rawUri.scheme=m.group(2);
    rawUri.authority=m.group(4);
    rawUri.path=m.group(5);
    rawUri.queryOptionString=m.group(7);
    rawUri.fragment=m.group(9);
  }
  splitPath(rawUri,skipSegments);
  splitOptions(rawUri);
  decode(rawUri);
  return rawUri;
}",0.9557321225879682
33323,"public static String decode(final String encoded){
  return Decoder.decode(encoded);
}","public static String decode(final String encoded) throws UriParserSyntaxException {
  try {
    return Decoder.decode(encoded);
  }
 catch (  final IllegalArgumentException e) {
    throw new UriParserSyntaxException(""String_Node_Str"",e,UriParserSyntaxException.MessageKeys.SYNTAX);
  }
}",0.4598930481283422
33324,"private RawUri runRawParser(final String uri,final int scipSegments) throws UriParserSyntaxException {
  return UriDecoder.decodeUri(uri,scipSegments);
}","private RawUri runRawParser(final String uri,final int skipSegments) throws UriParserSyntaxException {
  return UriDecoder.decodeUri(uri,skipSegments);
}",0.9869281045751634
33325,"public TestServerBuilder addWebApp() throws IOException {
  if (server != null) {
    return this;
  }
  File webAppProjectDir=getFileForDirProperty(PROJECT_WEB_APP_DIR);
  File webAppDir=new File(baseDir,webAppProjectDir.getName());
  FileUtils.deleteDirectory(webAppDir);
  if (!webAppDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"" + webAppDir.getAbsolutePath() + ""String_Node_Str"");
  }
  FileUtils.copyDirectory(webAppProjectDir,webAppDir);
  File libDir=new File(webAppDir,""String_Node_Str"");
  File classesDir=new File(webAppDir,""String_Node_Str"");
  String[] libsToExtract=libDir.list(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.toLowerCase(Locale.ENGLISH).contains(""String_Node_Str"") && name.toLowerCase(Locale.ENGLISH).endsWith(""String_Node_Str"");
    }
  }
);
  for (  String lib : libsToExtract) {
    File libFile=new File(libDir,lib);
    extract(libFile,classesDir);
    FileUtils.forceDelete(libFile);
  }
  String contextPath=""String_Node_Str"";
  Context context=tomcat.addWebapp(tomcat.getHost(),contextPath,webAppDir.getAbsolutePath());
  LOG.info(""String_Node_Str"",webAppDir.getName(),contextPath);
  WebappLoader solrLoader=new WebappLoader(Thread.currentThread().getContextClassLoader());
  context.setLoader(solrLoader);
  return this;
}","public TestServerBuilder addWebApp() throws IOException {
  if (server != null) {
    return this;
  }
  File webAppProjectDir=getFileForDirProperty(PROJECT_WEB_APP_DIR);
  File webAppDir=new File(baseDir,webAppProjectDir.getName());
  FileUtils.deleteDirectory(webAppDir);
  if (!webAppDir.mkdirs()) {
    throw new RuntimeException(""String_Node_Str"" + webAppDir.getAbsolutePath() + ""String_Node_Str"");
  }
  FileUtils.copyDirectory(webAppProjectDir,webAppDir);
  String contextPath=""String_Node_Str"";
  Context context=tomcat.addWebapp(tomcat.getHost(),contextPath,webAppDir.getAbsolutePath());
  context.setLoader(new WebappLoader(Thread.currentThread().getContextClassLoader()));
  LOG.info(""String_Node_Str"",webAppDir.getName(),contextPath);
  return this;
}",0.6428911079410367
33326,"public static ContextURL getInstance(final URI contextURL){
  final ContextURL instance=new ContextURL();
  instance.uri=contextURL;
  String contextURLasString=instance.uri.toASCIIString();
  instance.entity=contextURLasString.endsWith(""String_Node_Str"") || contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY).replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.delta=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaDeletedEntity=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaLink=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaDeletedLink=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.serviceRoot=URI.create(StringUtils.substringBefore(contextURLasString,Constants.METADATA));
  final String rest=StringUtils.substringAfter(contextURLasString,Constants.METADATA + ""String_Node_Str"");
  String firstToken;
  if (rest.startsWith(""String_Node_Str"")) {
    firstToken=rest.substring(0,rest.indexOf(')') + 1);
    instance.entitySetOrSingletonOrType=firstToken;
  }
 else {
    final int openParIdx=rest.indexOf('(');
    if (openParIdx == -1) {
      firstToken=StringUtils.substringBefore(rest,""String_Node_Str"");
      instance.entitySetOrSingletonOrType=firstToken;
    }
 else {
      firstToken=StringUtils.substringBeforeLast(rest,""String_Node_Str"") + ""String_Node_Str"";
      instance.entitySetOrSingletonOrType=firstToken.substring(0,openParIdx);
      final int commaIdx=firstToken.indexOf(',');
      if (commaIdx != -1) {
        instance.selectList=firstToken.substring(openParIdx + 1,firstToken.length() - 1);
      }
    }
  }
  final int slashIdx=instance.entitySetOrSingletonOrType.indexOf('/');
  if (slashIdx != -1) {
    final String clone=instance.entitySetOrSingletonOrType;
    instance.entitySetOrSingletonOrType=clone.substring(0,slashIdx);
    instance.derivedEntity=clone.substring(slashIdx + 1);
  }
  if (!firstToken.equals(rest)) {
    final String[] pathElems=StringUtils.substringAfter(rest,""String_Node_Str"").split(""String_Node_Str"");
    if (pathElems.length > 0) {
      if (pathElems[0].indexOf('.') == -1) {
        instance.navOrPropertyPath=pathElems[0];
      }
 else {
        instance.derivedEntity=pathElems[0];
      }
      if (pathElems.length > 1) {
        instance.navOrPropertyPath=pathElems[1];
      }
    }
  }
  return instance;
}","public static ContextURL getInstance(final URI contextURL){
  final ContextURL instance=new ContextURL();
  instance.uri=contextURL;
  String contextURLasString=instance.uri.toASCIIString();
  instance.entity=contextURLasString.endsWith(""String_Node_Str"") || contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY).replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.delta=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaDeletedEntity=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaLink=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.deltaDeletedLink=contextURLasString.endsWith(""String_Node_Str"");
  contextURLasString=contextURLasString.replace(""String_Node_Str"",StringUtils.EMPTY);
  instance.serviceRoot=URI.create(StringUtils.substringBefore(contextURLasString,Constants.METADATA));
  final String rest=StringUtils.substringAfter(contextURLasString,Constants.METADATA + ""String_Node_Str"");
  String firstToken;
  if (rest.startsWith(""String_Node_Str"")) {
    firstToken=rest.substring(0,rest.indexOf(')') + 1);
    instance.entitySetOrSingletonOrType=firstToken;
  }
 else {
    final int openParIdx=rest.indexOf('(');
    if (openParIdx == -1) {
      firstToken=StringUtils.substringBefore(rest,""String_Node_Str"");
      instance.entitySetOrSingletonOrType=firstToken;
    }
 else {
      firstToken=StringUtils.substringBeforeLast(rest,""String_Node_Str"") + ""String_Node_Str"";
      instance.entitySetOrSingletonOrType=firstToken.substring(0,openParIdx);
      final int commaIdx=firstToken.indexOf(',');
      if (commaIdx != -1) {
        instance.selectList=firstToken.substring(openParIdx + 1,firstToken.length() - 1);
      }
    }
  }
  final int slashIdx=instance.entitySetOrSingletonOrType.indexOf('/');
  if (slashIdx != -1) {
    final String clone=instance.entitySetOrSingletonOrType;
    instance.entitySetOrSingletonOrType=clone.substring(0,slashIdx);
    instance.derivedEntity=clone.substring(slashIdx + 1);
  }
  if (!firstToken.equals(rest)) {
    final String[] pathElems=StringUtils.substringAfter(rest,""String_Node_Str"").split(""String_Node_Str"");
    if (pathElems.length > 0 && pathElems[0].length() > 0) {
      if (pathElems[0].indexOf('.') == -1) {
        instance.navOrPropertyPath=pathElems[0];
      }
 else {
        instance.derivedEntity=pathElems[0];
      }
      if (pathElems.length > 1) {
        instance.navOrPropertyPath=pathElems[1];
      }
    }
  }
  return instance;
}",0.9639720379996416
33327,"@Test public void delta(){
  ContextURL contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDelta());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaDeletedLink());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaLink());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaDeletedEntity());
}","@Test public void delta(){
  ContextURL contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDelta());
  assertNull(contextURL.getSelectList());
  assertNull(contextURL.getNavOrPropertyPath());
  assertFalse(contextURL.isEntity());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaDeletedLink());
  assertNull(contextURL.getSelectList());
  assertNull(contextURL.getNavOrPropertyPath());
  assertFalse(contextURL.isEntity());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaLink());
  assertNull(contextURL.getSelectList());
  assertNull(contextURL.getNavOrPropertyPath());
  assertFalse(contextURL.isEntity());
  contextURL=ContextURL.getInstance(URI.create(""String_Node_Str""));
  assertTrue(contextURL.isDeltaDeletedEntity());
  assertNull(contextURL.getSelectList());
  assertNull(contextURL.getNavOrPropertyPath());
  assertFalse(contextURL.isEntity());
}",0.6518218623481782
33328,"@Test public void testServiceDocumentDefault() throws Exception {
  ODataRequest request=new ODataRequest();
  request.setMethod(HttpMethod.GET);
  request.setRawBaseUri(""String_Node_Str"");
  request.setRawODataPath(""String_Node_Str"");
  ODataResponse response=handler.process(request);
  assertNotNull(response);
  assertEquals(200,response.getStatusCode());
  assertEquals(HttpContentType.APPLICATION_JSON,response.getHeaders().get(HttpHeader.CONTENT_TYPE));
  assertNotNull(response.getContent());
  String doc=IOUtils.toString(response.getContent());
  assertTrue(doc.contains(""String_Node_Str""));
  assertTrue(doc.contains(""String_Node_Str""));
}","@Test public void testServiceDocumentDefault() throws Exception {
  ODataRequest request=new ODataRequest();
  request.setMethod(HttpMethod.GET);
  request.setRawBaseUri(""String_Node_Str"");
  request.setRawODataPath(""String_Node_Str"");
  ODataResponse response=handler.process(request);
  assertNotNull(response);
  assertEquals(200,response.getStatusCode());
  String ct=response.getHeaders().get(HttpHeader.CONTENT_TYPE);
  assertTrue(ct.contains(""String_Node_Str""));
  assertTrue(ct.contains(""String_Node_Str""));
  assertNotNull(response.getContent());
  String doc=IOUtils.toString(response.getContent());
  assertTrue(doc.contains(""String_Node_Str""));
  assertTrue(doc.contains(""String_Node_Str""));
}",0.8915129151291513
33329,"private Entity createETCollAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  Calendar date2=createCalendarInstance();
  date2.set(2014,Calendar.JULY,2,13,30,0);
  date2.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int16,ValueType.COLLECTION_PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_String,ValueType.COLLECTION_PRIMITIVE,""String_Node_Str"",""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Boolean,ValueType.COLLECTION_PRIMITIVE,Boolean.TRUE,Boolean.FALSE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Byte,ValueType.COLLECTION_PRIMITIVE,Byte.valueOf(""String_Node_Str""),Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_SByte,ValueType.COLLECTION_PRIMITIVE,Short.valueOf(""String_Node_Str""),Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int32,ValueType.COLLECTION_PRIMITIVE,Integer.MAX_VALUE,Integer.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int64,ValueType.COLLECTION_PRIMITIVE,Long.MAX_VALUE,Long.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Single,ValueType.COLLECTION_PRIMITIVE,47.11,11.47));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Double,ValueType.COLLECTION_PRIMITIVE,4.711,711.4));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Decimal,ValueType.COLLECTION_PRIMITIVE,4711.1174,1174.4711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Binary,ValueType.COLLECTION_PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01},""String_Node_Str"".getBytes()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Date,ValueType.COLLECTION_PRIMITIVE,date,date2));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_DateTimeOffset,ValueType.COLLECTION_PRIMITIVE,date.getTime(),date2.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Duration,ValueType.COLLECTION_PRIMITIVE,date.getTimeInMillis(),date2.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Guid,ValueType.COLLECTION_PRIMITIVE,UUID.fromString(""String_Node_Str""),UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_TimeOfDay,ValueType.COLLECTION_PRIMITIVE,date,date2));
  return entity;
}","private Entity createETCollAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  Calendar date2=createCalendarInstance();
  date2.set(2014,Calendar.JULY,2,13,30,0);
  date2.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int16,ValueType.COLLECTION_PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_String,ValueType.COLLECTION_PRIMITIVE,""String_Node_Str"",""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Boolean,ValueType.COLLECTION_PRIMITIVE,Boolean.TRUE,Boolean.FALSE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Byte,ValueType.COLLECTION_PRIMITIVE,Byte.valueOf(""String_Node_Str""),Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_SByte,ValueType.COLLECTION_PRIMITIVE,Short.valueOf(""String_Node_Str""),Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int32,ValueType.COLLECTION_PRIMITIVE,Integer.MAX_VALUE,Integer.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int64,ValueType.COLLECTION_PRIMITIVE,Long.MAX_VALUE,Long.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Single,ValueType.COLLECTION_PRIMITIVE,47.11,11.47));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Double,ValueType.COLLECTION_PRIMITIVE,4.711,711.4));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Decimal,ValueType.COLLECTION_PRIMITIVE,4711.1174,1174.4711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Binary,ValueType.COLLECTION_PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01},""String_Node_Str"".getBytes()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Date,ValueType.COLLECTION_PRIMITIVE,date,date2));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_DateTimeOffset,ValueType.COLLECTION_PRIMITIVE,date,date2));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Duration,ValueType.COLLECTION_PRIMITIVE,date.getTimeInMillis(),date2.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Guid,ValueType.COLLECTION_PRIMITIVE,UUID.fromString(""String_Node_Str""),UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_TimeOfDay,ValueType.COLLECTION_PRIMITIVE,date,date2));
  return entity;
}",0.99667994687915
33330,"private Calendar createCalendarInstance(){
  return Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""),Locale.ENGLISH);
}","private Calendar createCalendarInstance(){
  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone(""String_Node_Str""),Locale.ENGLISH);
  cal.set(Calendar.ZONE_OFFSET,0);
  return cal;
}",0.7949526813880127
33331,"private Entity createETAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.String,ValueType.PRIMITIVE,""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Boolean,ValueType.PRIMITIVE,Boolean.TRUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Byte,ValueType.PRIMITIVE,Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.SByte,ValueType.PRIMITIVE,Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int32,ValueType.PRIMITIVE,Integer.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int64,ValueType.PRIMITIVE,Long.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Single,ValueType.PRIMITIVE,47.11));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Double,ValueType.PRIMITIVE,4.711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Decimal,ValueType.PRIMITIVE,4711.1174));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Binary,ValueType.PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01}));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Date,ValueType.PRIMITIVE,date));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.DateTimeOffset,ValueType.PRIMITIVE,date.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Duration,ValueType.PRIMITIVE,date.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Guid,ValueType.PRIMITIVE,UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.TimeOfDay,ValueType.PRIMITIVE,date));
  return entity;
}","private Entity createETAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.String,ValueType.PRIMITIVE,""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Boolean,ValueType.PRIMITIVE,Boolean.TRUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Byte,ValueType.PRIMITIVE,Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.SByte,ValueType.PRIMITIVE,Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int32,ValueType.PRIMITIVE,Integer.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int64,ValueType.PRIMITIVE,Long.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Single,ValueType.PRIMITIVE,47.11));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Double,ValueType.PRIMITIVE,4.711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Decimal,ValueType.PRIMITIVE,4711.1174));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Binary,ValueType.PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01}));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Date,ValueType.PRIMITIVE,date));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.DateTimeOffset,ValueType.PRIMITIVE,date));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Duration,ValueType.PRIMITIVE,date.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Guid,ValueType.PRIMITIVE,UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.TimeOfDay,ValueType.PRIMITIVE,date));
  return entity;
}",0.997688395746648
33332,"private Entity createETCollAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=Calendar.getInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  Calendar date2=Calendar.getInstance();
  date2.set(2014,Calendar.JULY,2,13,30,0);
  date2.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int16,ValueType.COLLECTION_PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_String,ValueType.COLLECTION_PRIMITIVE,""String_Node_Str"",""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Boolean,ValueType.COLLECTION_PRIMITIVE,Boolean.TRUE,Boolean.FALSE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Byte,ValueType.COLLECTION_PRIMITIVE,Byte.valueOf(""String_Node_Str""),Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_SByte,ValueType.COLLECTION_PRIMITIVE,Short.valueOf(""String_Node_Str""),Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int32,ValueType.COLLECTION_PRIMITIVE,Integer.MAX_VALUE,Integer.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int64,ValueType.COLLECTION_PRIMITIVE,Long.MAX_VALUE,Long.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Single,ValueType.COLLECTION_PRIMITIVE,47.11,11.47));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Double,ValueType.COLLECTION_PRIMITIVE,4.711,711.4));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Decimal,ValueType.COLLECTION_PRIMITIVE,4711.1174,1174.4711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Binary,ValueType.COLLECTION_PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01},""String_Node_Str"".getBytes()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Date,ValueType.COLLECTION_PRIMITIVE,date,date2));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_DateTimeOffset,ValueType.COLLECTION_PRIMITIVE,date.getTime(),date2.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Duration,ValueType.COLLECTION_PRIMITIVE,date.getTimeInMillis(),date2.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Guid,ValueType.COLLECTION_PRIMITIVE,UUID.fromString(""String_Node_Str""),UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_TimeOfDay,ValueType.COLLECTION_PRIMITIVE,date,date2));
  return entity;
}","private Entity createETCollAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  Calendar date2=createCalendarInstance();
  date2.set(2014,Calendar.JULY,2,13,30,0);
  date2.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int16,ValueType.COLLECTION_PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_String,ValueType.COLLECTION_PRIMITIVE,""String_Node_Str"",""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Boolean,ValueType.COLLECTION_PRIMITIVE,Boolean.TRUE,Boolean.FALSE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Byte,ValueType.COLLECTION_PRIMITIVE,Byte.valueOf(""String_Node_Str""),Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_SByte,ValueType.COLLECTION_PRIMITIVE,Short.valueOf(""String_Node_Str""),Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int32,ValueType.COLLECTION_PRIMITIVE,Integer.MAX_VALUE,Integer.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Int64,ValueType.COLLECTION_PRIMITIVE,Long.MAX_VALUE,Long.MIN_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Single,ValueType.COLLECTION_PRIMITIVE,47.11,11.47));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Double,ValueType.COLLECTION_PRIMITIVE,4.711,711.4));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Decimal,ValueType.COLLECTION_PRIMITIVE,4711.1174,1174.4711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Binary,ValueType.COLLECTION_PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01},""String_Node_Str"".getBytes()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Date,ValueType.COLLECTION_PRIMITIVE,date,date2));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_DateTimeOffset,ValueType.COLLECTION_PRIMITIVE,date.getTime(),date2.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Duration,ValueType.COLLECTION_PRIMITIVE,date.getTimeInMillis(),date2.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_Guid,ValueType.COLLECTION_PRIMITIVE,UUID.fromString(""String_Node_Str""),UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Collection_TimeOfDay,ValueType.COLLECTION_PRIMITIVE,date,date2));
  return entity;
}",0.9913907284768212
33333,"private Entity createETAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=Calendar.getInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.String,ValueType.PRIMITIVE,""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Boolean,ValueType.PRIMITIVE,Boolean.TRUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Byte,ValueType.PRIMITIVE,Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.SByte,ValueType.PRIMITIVE,Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int32,ValueType.PRIMITIVE,Integer.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int64,ValueType.PRIMITIVE,Long.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Single,ValueType.PRIMITIVE,47.11));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Double,ValueType.PRIMITIVE,4.711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Decimal,ValueType.PRIMITIVE,4711.1174));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Binary,ValueType.PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01}));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Date,ValueType.PRIMITIVE,date));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.DateTimeOffset,ValueType.PRIMITIVE,date.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Duration,ValueType.PRIMITIVE,date.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Guid,ValueType.PRIMITIVE,UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.TimeOfDay,ValueType.PRIMITIVE,date));
  return entity;
}","private Entity createETAllPrim(int id){
  Entity entity=new EntityImpl();
  Calendar date=createCalendarInstance();
  date.set(2014,Calendar.MARCH,19,10,12,0);
  date.set(Calendar.MILLISECOND,0);
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int16,ValueType.PRIMITIVE,id));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.String,ValueType.PRIMITIVE,""String_Node_Str""));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Boolean,ValueType.PRIMITIVE,Boolean.TRUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Byte,ValueType.PRIMITIVE,Byte.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.SByte,ValueType.PRIMITIVE,Short.valueOf(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int32,ValueType.PRIMITIVE,Integer.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Int64,ValueType.PRIMITIVE,Long.MAX_VALUE));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Single,ValueType.PRIMITIVE,47.11));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Double,ValueType.PRIMITIVE,4.711));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Decimal,ValueType.PRIMITIVE,4711.1174));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Binary,ValueType.PRIMITIVE,new byte[]{0x04,0x07,0x01,0x01}));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Date,ValueType.PRIMITIVE,date));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.DateTimeOffset,ValueType.PRIMITIVE,date.getTime()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Duration,ValueType.PRIMITIVE,date.getTimeInMillis()));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.Guid,ValueType.PRIMITIVE,UUID.fromString(""String_Node_Str"")));
  entity.addProperty(createProperty(""String_Node_Str"",TecSvcSimpleProperty.TimeOfDay,ValueType.PRIMITIVE,date));
  return entity;
}",0.997692662667282
33334,"@Override public String toString(){
  StringBuilder result=new StringBuilder();
  result.append(type).append('/').append(subtype);
  for (  final String key : parameters.keySet()) {
    result.append(';').append(key).append('=').append(parameters.get(key));
  }
  if (quality < 1F) {
    result.append(';').append(TypeUtil.PARAMETER_Q).append('=').append(quality);
  }
  return result.toString();
}","@Override public String toString(){
  StringBuilder result=new StringBuilder();
  result.append(type).append('/').append(subtype);
  for (  final String key : parameters.keySet()) {
    result.append(';').append(key).append('=').append(parameters.get(key));
  }
  return result.toString();
}",0.7692307692307693
33335,"private TreeMap<String,String> createParameterMap(){
  return new TreeMap<String,String>(new Comparator<String>(){
    @Override public int compare(    final String o1,    final String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
);
}","private static TreeMap<String,String> createParameterMap(){
  return new TreeMap<String,String>(new Comparator<String>(){
    @Override public int compare(    final String o1,    final String o2){
      return o1.compareToIgnoreCase(o2);
    }
  }
);
}",0.9859154929577464
33336,"@Override protected <T>String internalValueToString(final T value,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode) throws EdmPrimitiveTypeException {
  Date date=null;
  Integer fractionalSecs=null;
  if (value instanceof Calendar) {
    final Calendar calendar=(Calendar)value;
    date=calendar.getTime();
    fractionalSecs=calendar.get(Calendar.MILLISECOND);
  }
  if (value instanceof Timestamp) {
    final Timestamp timestamp=(Timestamp)value;
    date=new Date(timestamp.getTime());
    fractionalSecs=timestamp.getNanos();
  }
  final StringBuilder result=new StringBuilder().append(DATE_FORMAT.get().format(date));
  try {
    if (value instanceof Timestamp) {
      EdmDateTimeOffset.appendFractionalSeconds(result,fractionalSecs,precision);
    }
 else {
      EdmDateTimeOffset.appendMilliseconds(result,fractionalSecs,precision);
    }
  }
 catch (  final IllegalArgumentException e) {
    throw new EdmPrimitiveTypeException(""String_Node_Str"",e);
  }
  return result.toString();
}","@Override protected <T>String internalValueToString(final T value,final Boolean isNullable,final Integer maxLength,final Integer precision,final Integer scale,final Boolean isUnicode) throws EdmPrimitiveTypeException {
  if (value instanceof Calendar) {
    final Calendar calendar=(Calendar)value;
    Date date=calendar.getTime();
    Integer fractionalSecs=calendar.get(Calendar.MILLISECOND);
    final StringBuilder result=new StringBuilder().append(DATE_FORMAT.get().format(date));
    EdmDateTimeOffset.appendMilliseconds(result,fractionalSecs,precision);
    return result.toString();
  }
 else   if (value instanceof Timestamp) {
    final Timestamp timestamp=(Timestamp)value;
    Date date=new Date(timestamp.getTime());
    Integer fractionalSecs=timestamp.getNanos();
    final StringBuilder result=new StringBuilder().append(DATE_FORMAT.get().format(date));
    EdmDateTimeOffset.appendFractionalSeconds(result,fractionalSecs,precision);
    return result.toString();
  }
 else {
    throw new EdmPrimitiveTypeException(""String_Node_Str"");
  }
}",0.3967954759660697
33337,"public static Object getKey(final Edm metadata,final Class<?> entityTypeRef,final CommonODataEntity entity){
  final Object res;
  if (entity.getProperties().isEmpty()) {
    res=null;
  }
 else {
    final Class<?> keyRef=ClassUtils.getCompoundKeyRef(entityTypeRef);
    if (keyRef == null) {
      final CommonODataProperty property=entity.getProperty(firstValidEntityKey(entityTypeRef));
      res=property == null || !property.hasPrimitiveValue() ? null : property.getPrimitiveValue().toValue();
    }
 else {
      try {
        res=keyRef.newInstance();
        populate(metadata,res,CompoundKeyElement.class,entity.getProperties().iterator());
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",keyRef.getSimpleName(),e);
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  return res;
}","public static Object getKey(final Edm metadata,final Class<?> entityTypeRef,final CommonODataEntity entity){
  Object res=null;
  if (!entity.getProperties().isEmpty()) {
    final Class<?> keyRef=ClassUtils.getCompoundKeyRef(entityTypeRef);
    if (keyRef == null) {
      final CommonODataProperty property=entity.getProperty(firstValidEntityKey(entityTypeRef));
      if (property != null && property.hasPrimitiveValue()) {
        res=primitiveValueToObject(property.getPrimitiveValue());
      }
    }
 else {
      try {
        res=keyRef.newInstance();
        populate(metadata,res,CompoundKeyElement.class,entity.getProperties().iterator());
      }
 catch (      Exception e) {
        LOG.error(""String_Node_Str"",keyRef.getSimpleName(),e);
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
  return res;
}",0.8648967551622418
33338,"@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static Object getValueFromProperty(final Edm metadata,final CommonODataProperty property,final Type type) throws InstantiationException, IllegalAccessException {
  final Object value;
  if (property == null || property.hasNullValue()) {
    value=null;
  }
 else   if (property.hasCollectionValue()) {
    value=new ArrayList();
    final ParameterizedType collType=(ParameterizedType)type;
    final Class<?> collItemClass=(Class<?>)collType.getActualTypeArguments()[0];
    final Iterator<ODataValue> collPropItor=property.getValue().asCollection().iterator();
    while (collPropItor.hasNext()) {
      final ODataValue odataValue=collPropItor.next();
      if (odataValue.isPrimitive()) {
        ((Collection)value).add(odataValue.asPrimitive().toValue());
      }
      if (odataValue.isComplex()) {
        final Object collItem=collItemClass.newInstance();
        populate(metadata,collItem,Property.class,odataValue.asComplex().iterator());
        ((Collection)value).add(collItem);
      }
    }
  }
 else   if (property.hasPrimitiveValue()) {
    value=property.getPrimitiveValue().toValue();
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + property);
  }
  return value;
}","@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static Object getValueFromProperty(final Edm metadata,final CommonODataProperty property,final Type type) throws InstantiationException, IllegalAccessException {
  final Object value;
  if (property == null || property.hasNullValue()) {
    value=null;
  }
 else   if (property.hasCollectionValue()) {
    value=new ArrayList();
    final ParameterizedType collType=(ParameterizedType)type;
    final Class<?> collItemClass=(Class<?>)collType.getActualTypeArguments()[0];
    final Iterator<ODataValue> collPropItor=property.getValue().asCollection().iterator();
    while (collPropItor.hasNext()) {
      final ODataValue odataValue=collPropItor.next();
      if (odataValue.isPrimitive()) {
        ((Collection)value).add(primitiveValueToObject(odataValue.asPrimitive()));
      }
      if (odataValue.isComplex()) {
        final Object collItem=collItemClass.newInstance();
        populate(metadata,collItem,Property.class,odataValue.asComplex().iterator());
        ((Collection)value).add(collItem);
      }
    }
  }
 else   if (property.hasPrimitiveValue()) {
    value=primitiveValueToObject(property.getPrimitiveValue());
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + property);
  }
  return value;
}",0.9145299145299144
33339,"@SuppressWarnings({""String_Node_Str""}) public static void populate(final Edm metadata,final Object bean,final Class<?> reference,final Class<? extends Annotation> getterAnn,final Iterator<? extends CommonODataProperty> propItor){
  if (bean != null) {
    while (propItor.hasNext()) {
      final CommonODataProperty property=propItor.next();
      final Method getter=ClassUtils.findGetterByAnnotatedName(reference,getterAnn,property.getName());
      if (getter == null) {
        LOG.warn(""String_Node_Str"",property.getName(),bean.getClass().getName());
      }
 else {
        try {
          if (property.hasNullValue()) {
            setPropertyValue(bean,getter,null);
          }
          if (property.hasPrimitiveValue()) {
            setPropertyValue(bean,getter,property.getPrimitiveValue().toValue());
          }
          if (property.hasComplexValue()) {
            final Object complex=getter.getReturnType().newInstance();
            populate(metadata,complex,Property.class,property.getValue().asComplex().iterator());
            setPropertyValue(bean,getter,complex);
          }
          if (property.hasCollectionValue()) {
            final ParameterizedType collType=(ParameterizedType)getter.getGenericReturnType();
            final Class<?> collItemClass=(Class<?>)collType.getActualTypeArguments()[0];
            Collection<Object> collection=(Collection<Object>)getter.invoke(bean);
            if (collection == null) {
              collection=new ArrayList<Object>();
              setPropertyValue(bean,getter,collection);
            }
            final Iterator<ODataValue> collPropItor=property.getValue().asCollection().iterator();
            while (collPropItor.hasNext()) {
              final ODataValue value=collPropItor.next();
              if (value.isPrimitive()) {
                collection.add(value.asPrimitive().toValue());
              }
              if (value.isComplex()) {
                final Object collItem=collItemClass.newInstance();
                populate(metadata,collItem,Property.class,value.asComplex().iterator());
                collection.add(collItem);
              }
            }
          }
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",getter,bean,e);
        }
      }
    }
  }
}","@SuppressWarnings({""String_Node_Str""}) public static void populate(final Edm metadata,final Object bean,final Class<?> reference,final Class<? extends Annotation> getterAnn,final Iterator<? extends CommonODataProperty> propItor){
  if (bean != null) {
    while (propItor.hasNext()) {
      final CommonODataProperty property=propItor.next();
      final Method getter=ClassUtils.findGetterByAnnotatedName(reference,getterAnn,property.getName());
      if (getter == null) {
        LOG.warn(""String_Node_Str"",property.getName(),bean.getClass().getName());
      }
 else {
        try {
          if (property.hasNullValue()) {
            setPropertyValue(bean,getter,null);
          }
          if (property.hasPrimitiveValue()) {
            setPropertyValue(bean,getter,primitiveValueToObject(property.getPrimitiveValue()));
          }
          if (property.hasComplexValue()) {
            final Object complex=getter.getReturnType().newInstance();
            populate(metadata,complex,Property.class,property.getValue().asComplex().iterator());
            setPropertyValue(bean,getter,complex);
          }
          if (property.hasCollectionValue()) {
            final ParameterizedType collType=(ParameterizedType)getter.getGenericReturnType();
            final Class<?> collItemClass=(Class<?>)collType.getActualTypeArguments()[0];
            Collection<Object> collection=(Collection<Object>)getter.invoke(bean);
            if (collection == null) {
              collection=new ArrayList<Object>();
              setPropertyValue(bean,getter,collection);
            }
            final Iterator<ODataValue> collPropItor=property.getValue().asCollection().iterator();
            while (collPropItor.hasNext()) {
              final ODataValue value=collPropItor.next();
              if (value.isPrimitive()) {
                collection.add(primitiveValueToObject(value.asPrimitive()));
              }
              if (value.isComplex()) {
                final Object collItem=collItemClass.newInstance();
                populate(metadata,collItem,Property.class,value.asComplex().iterator());
                collection.add(collItem);
              }
            }
          }
        }
 catch (        Exception e) {
          LOG.error(""String_Node_Str"",getter,bean,e);
        }
      }
    }
  }
}",0.9455723542116632
33340,"public String getJavaType(final String typeExpression,final boolean forceCollection){
  final StringBuilder res=new StringBuilder();
  final EdmTypeInfo edmType=getEdmTypeInfo(typeExpression);
  if ((forceCollection || edmType.isCollection()) && !edmType.isEntityType()) {
    res.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(typeExpression)) {
    res.append(InputStream.class.getName());
  }
 else   if (edmType.isPrimitiveType()) {
    final Class<?> clazz=EdmPrimitiveTypeFactory.getInstance(edmType.getPrimitiveTypeKind()).getDefaultType();
    res.append((clazz.isAssignableFrom(Calendar.class) ? Timestamp.class : clazz).getSimpleName());
  }
 else   if (edmType.isComplexType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getComplexType().getName()));
  }
 else   if (edmType.isEntityType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getEntityType().getName()));
  }
 else   if (edmType.isEnumType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getEnumType().getName()));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + typeExpression + ""String_Node_Str"");
  }
  if (forceCollection || edmType.isCollection()) {
    if (edmType.isEntityType()) {
      res.append(""String_Node_Str"");
    }
 else {
      res.append(""String_Node_Str"");
    }
  }
  return res.toString();
}","public String getJavaType(final String typeExpression,final boolean forceCollection){
  final StringBuilder res=new StringBuilder();
  final EdmTypeInfo edmType=getEdmTypeInfo(typeExpression);
  if ((forceCollection || edmType.isCollection()) && !edmType.isEntityType()) {
    res.append(""String_Node_Str"");
  }
  if (""String_Node_Str"".equals(typeExpression)) {
    res.append(InputStream.class.getName());
  }
 else   if (edmType.isPrimitiveType()) {
    final Class<?> clazz=EdmPrimitiveTypeFactory.getInstance(edmType.getPrimitiveTypeKind()).getDefaultType();
    res.append(clazz.getSimpleName());
  }
 else   if (edmType.isComplexType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getComplexType().getName()));
  }
 else   if (edmType.isEntityType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getEntityType().getName()));
  }
 else   if (edmType.isEnumType()) {
    res.append(basePackage).append('.').append(edmType.getFullQualifiedName().getNamespace().toLowerCase()).append('.').append(TYPE_SUB_PKG).append('.').append(capitalize(edmType.getEnumType().getName()));
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + typeExpression + ""String_Node_Str"");
  }
  if (forceCollection || edmType.isCollection()) {
    if (edmType.isEntityType()) {
      res.append(""String_Node_Str"");
    }
 else {
      res.append(""String_Node_Str"");
    }
  }
  return res.toString();
}",0.9820746400235086
33341,"@Override public EdmFunction createBoundFunction(final FullQualifiedName functionName,final FullQualifiedName bindingParameterTypeName,final Boolean isBindingParameterCollection,final List<String> parameterNames){
  try {
    List<Function> functions=functionsMap.get(functionName);
    if (functions == null) {
      functions=provider.getFunctions(functionName);
      if (functions != null) {
        functionsMap.put(functionName,functions);
      }
 else {
        return null;
      }
    }
    EdmFunctionImpl functionImpl=null;
    for (    Function function : functions) {
      if (function.isBound() == true) {
        List<Parameter> parameters=function.getParameters();
        if (parameters == null || parameters.size() == 0) {
          throw new EdmException(""String_Node_Str"" + functionName);
        }
        Parameter bindingParameter=parameters.get(0);
        if (bindingParameterTypeName.equals(bindingParameter.getType()) && isBindingParameterCollection.booleanValue() == bindingParameter.isCollection()) {
          if (parameterNames.size() == parameters.size()) {
            List<String> functionParameterNames=new ArrayList<String>();
            for (            Parameter parameter : parameters) {
              functionParameterNames.add(parameter.getName());
            }
            if (parameterNames.containsAll(functionParameterNames)) {
              functionImpl=new EdmFunctionImpl(this,functionName,function);
              break;
            }
          }
        }
      }
    }
    return functionImpl;
  }
 catch (  ODataException e) {
    throw new EdmException(e);
  }
}","@Override public EdmFunction createBoundFunction(final FullQualifiedName functionName,final FullQualifiedName bindingParameterTypeName,final Boolean isBindingParameterCollection,final List<String> parameterNames){
  try {
    List<Function> functions=functionsMap.get(functionName);
    if (functions == null) {
      functions=provider.getFunctions(functionName);
      if (functions != null) {
        functionsMap.put(functionName,functions);
      }
 else {
        return null;
      }
    }
    EdmFunctionImpl functionImpl=null;
    for (    Function function : functions) {
      if (function.isBound() == true) {
        List<Parameter> providerParameters=function.getParameters();
        if (providerParameters == null || providerParameters.size() == 0) {
          throw new EdmException(""String_Node_Str"" + functionName);
        }
        Parameter bindingParameter=providerParameters.get(0);
        if (bindingParameterTypeName.equals(bindingParameter.getType()) && isBindingParameterCollection.booleanValue() == bindingParameter.isCollection()) {
          if (parameterNames.size() == providerParameters.size() - 1) {
            List<String> providerParameterNames=new ArrayList<String>();
            for (int i=1; i < providerParameters.size(); i++) {
              providerParameterNames.add(providerParameters.get(i).getName());
            }
            if (parameterNames.containsAll(providerParameterNames)) {
              functionImpl=new EdmFunctionImpl(this,functionName,function);
              break;
            }
          }
        }
      }
    }
    return functionImpl;
  }
 catch (  ODataException e) {
    throw new EdmException(e);
  }
}",0.9238701850166818
33342,"@Test public void runBfuncBnEsRtEs(){
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isParameter(0,""String_Node_Str"",""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isParameter(0,""String_Node_Str"",""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav).n().isCount();
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isKeyPredicate(0,""String_Node_Str"",""String_Node_Str"").isKeyPredicate(1,""String_Node_Str"",""String_Node_Str"");
}","@Test public void runBfuncBnEsRtEs(){
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isParameter(0,""String_Node_Str"",""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav);
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isType(EdmTechProvider.nameETTwoKeyNav).n().isCount();
  testUri.run(""String_Node_Str"").isKind(UriInfoKind.resource).goPath().first().isEntitySet(""String_Node_Str"").n().isFunction(""String_Node_Str"").isKeyPredicate(0,""String_Node_Str"",""String_Node_Str"").isKeyPredicate(1,""String_Node_Str"",""String_Node_Str"");
}",0.902880658436214
33343,"@Test public void testBoundFunction_Overloading(){
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETTwoKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
}","@Test public void testBoundFunction_Overloading(){
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETTwoKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETTwoKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
  testPath.run(""String_Node_Str"").at(0).isUriPathInfoKind(UriResourceKind.entitySet).isType(EdmTechProvider.nameETTwoKeyNav).isCollection(true).at(1).isUriPathInfoKind(UriResourceKind.function).isType(EdmTechProvider.nameETTwoKeyNav);
}",0.9960212201591512
33344,"public FunctionMapKey(final FullQualifiedName functionName,final FullQualifiedName bindingParameterTypeName,final Boolean isBindingParameterCollection,final List<String> bindingParameterNames){
  this.functionName=functionName;
  this.bindingParameterTypeName=bindingParameterTypeName;
  this.isBindingParameterCollection=isBindingParameterCollection;
  parameterNames=bindingParameterNames;
}","public FunctionMapKey(final FullQualifiedName functionName,final FullQualifiedName bindingParameterTypeName,final Boolean isBindingParameterCollection,final List<String> bindingParameterNames){
  this.functionName=functionName;
  this.bindingParameterTypeName=bindingParameterTypeName;
  this.isBindingParameterCollection=isBindingParameterCollection;
  parameterNames=bindingParameterNames;
  if (parameterNames != null) {
    Collections.sort(parameterNames);
  }
}",0.913953488372093
33345,"@Test public void testHashCodePositive(){
  FunctionMapKey key=new FunctionMapKey(fqn,null,null,null);
  FunctionMapKey someKey=new FunctionMapKey(fqn,null,null,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,null,true,null);
  someKey=new FunctionMapKey(fqn,null,true,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,true,null);
  someKey=new FunctionMapKey(fqn,fqnType,true,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,false,null);
  someKey=new FunctionMapKey(fqn,fqnType,false,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,false,new ArrayList<String>());
  someKey=new FunctionMapKey(fqn,fqnType,false,new ArrayList<String>());
  assertEquals(key.hashCode(),someKey.hashCode());
  List<String> keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  List<String> someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,fqnType,false,keyList);
  someKey=new FunctionMapKey(fqn,fqnType,false,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,null,null,new ArrayList<String>());
  someKey=new FunctionMapKey(fqn,null,null,new ArrayList<String>());
  assertEquals(key.hashCode(),someKey.hashCode());
  keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,null,null,keyList);
  someKey=new FunctionMapKey(fqn,null,null,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
}","@Test public void testHashCodePositive(){
  FunctionMapKey key=new FunctionMapKey(fqn,null,null,null);
  FunctionMapKey someKey=new FunctionMapKey(fqn,null,null,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,null,true,null);
  someKey=new FunctionMapKey(fqn,null,true,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,true,null);
  someKey=new FunctionMapKey(fqn,fqnType,true,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,false,null);
  someKey=new FunctionMapKey(fqn,fqnType,false,null);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,fqnType,false,new ArrayList<String>());
  someKey=new FunctionMapKey(fqn,fqnType,false,new ArrayList<String>());
  assertEquals(key.hashCode(),someKey.hashCode());
  List<String> keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  List<String> someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,fqnType,false,keyList);
  someKey=new FunctionMapKey(fqn,fqnType,false,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
  key=new FunctionMapKey(fqn,null,null,new ArrayList<String>());
  someKey=new FunctionMapKey(fqn,null,null,new ArrayList<String>());
  assertEquals(key.hashCode(),someKey.hashCode());
  keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,null,null,keyList);
  someKey=new FunctionMapKey(fqn,null,null,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
  keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  keyList.add(""String_Node_Str"");
  someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,null,null,keyList);
  someKey=new FunctionMapKey(fqn,null,null,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
  keyList=new ArrayList<String>();
  keyList.add(""String_Node_Str"");
  keyList.add(""String_Node_Str"");
  someKeyList=new ArrayList<String>();
  someKeyList.add(""String_Node_Str"");
  someKeyList.add(""String_Node_Str"");
  key=new FunctionMapKey(fqn,null,null,keyList);
  someKey=new FunctionMapKey(fqn,null,null,someKeyList);
  assertEquals(key.hashCode(),someKey.hashCode());
}",0.8186653771760155
33346,"@Override public String getRequestUrl(String baseUri,boolean includeServletPath){
  return baseUri == null ? delegate.getRequestURL().toString() : (baseUri + delegate.getPathInfo());
}","@Override public String getRequestUrl(String baseUri,boolean includeServletPath){
  final String servletPath=includeServletPath ? delegate.getServletPath() : ""String_Node_Str"";
  final String pathInfo=delegate.getPathInfo() == null ? ""String_Node_Str"" : delegate.getPathInfo();
  return baseUri == null ? delegate.getRequestURL().toString() : (baseUri + servletPath + pathInfo);
}",0.599290780141844
33347,"@Override public String getRequestUrl(String baseUri,boolean includeServletPath){
  return filterContext.getCompleteRequestPath().replace(requestSpec.getBaseUri(),baseUri);
}","@Override public String getRequestUrl(String baseUri,boolean includeServletPath){
  if (StringUtils.isBlank(baseUri)) {
    return filterContext.getCompleteRequestPath();
  }
  return filterContext.getCompleteRequestPath().replace(requestSpec.getBaseUri(),baseUri);
}",0.7573696145124716
33348,"@Override public byte[] getContent(){
  return requestSpec.getBody();
}","@Override public byte[] getContent(){
  String body=requestSpec.getBody();
  return body == null ? null : body.getBytes();
}",0.6871794871794872
33349,"@Before public void before(){
  RestAssured.baseURI=baseUrl();
  api=RamlLoaders.fromClasspath(RestAssuredTest.class).load(""String_Node_Str"").assumingBaseUri(""String_Node_Str"");
  restAssured=api.createRestAssured();
}","@Before public void before(){
  RestAssured.baseURI=baseUrlWithPort();
  api=RamlLoaders.fromClasspath(RestAssuredTest.class).load(""String_Node_Str"").assumingBaseUri(""String_Node_Str"");
  restAssured=api.createRestAssured();
}",0.981981981981982
33350,"@Test public void testServletOk() throws IOException {
  restAssured.given().get(""String_Node_Str"").andReturn();
  assertTrue(restAssured.getLastReport().isEmpty());
}","@Test public void testServletOk() throws IOException {
  restAssured.given().get(""String_Node_Str"").andReturn();
  assertTrue(restAssured.getLastReport().toString(),restAssured.getLastReport().isEmpty());
}",0.8954423592493298
33351,"@Test public void includeServletPathNoPathInfo() throws Exception {
  final HttpPost post=new HttpPost(url(""String_Node_Str""));
  execute(post,new MessageTester(){
    @Override public void test(    HttpServletRequest servletRequest,    HttpServletResponse servletResponse,    RamlRequest ramlRequest,    RamlResponse ramlResponse) throws IOException {
      assertEquals(baseUrl() + ""String_Node_Str"",ramlRequest.getRequestUrl(null,true));
      assertEquals(""String_Node_Str"",ramlRequest.getRequestUrl(""String_Node_Str"",true));
    }
  }
);
}","@Test public void includeServletPathNoPathInfo() throws Exception {
  final HttpPost post=new HttpPost(url(""String_Node_Str""));
  execute(post,new MessageTester(){
    @Override public void test(    HttpServletRequest servletRequest,    HttpServletResponse servletResponse,    RamlRequest ramlRequest,    RamlResponse ramlResponse) throws IOException {
      assertEquals(baseUrlWithPort() + ""String_Node_Str"",ramlRequest.getRequestUrl(null,true));
      assertEquals(""String_Node_Str"",ramlRequest.getRequestUrl(""String_Node_Str"",true));
    }
  }
);
}",0.9927007299270072
33352,"@Test public void includeServletPathWithPathInfo() throws Exception {
  final HttpPost post=new HttpPost(url(""String_Node_Str""));
  execute(post,new MessageTester(){
    @Override public void test(    HttpServletRequest servletRequest,    HttpServletResponse servletResponse,    RamlRequest ramlRequest,    RamlResponse ramlResponse) throws IOException {
      assertEquals(baseUrl() + ""String_Node_Str"",ramlRequest.getRequestUrl(null,true));
      assertEquals(""String_Node_Str"",ramlRequest.getRequestUrl(""String_Node_Str"",true));
    }
  }
);
}","@Test public void includeServletPathWithPathInfo() throws Exception {
  final HttpPost post=new HttpPost(url(""String_Node_Str""));
  execute(post,new MessageTester(){
    @Override public void test(    HttpServletRequest servletRequest,    HttpServletResponse servletResponse,    RamlRequest ramlRequest,    RamlResponse ramlResponse) throws IOException {
      assertEquals(baseUrlWithPort() + ""String_Node_Str"",ramlRequest.getRequestUrl(null,true));
      assertEquals(""String_Node_Str"",ramlRequest.getRequestUrl(""String_Node_Str"",true));
    }
  }
);
}",0.9927272727272728
33353,"protected String baseUrl(){
  return ""String_Node_Str"" + port();
}","protected String baseUrl(){
  return ""String_Node_Str"";
}",0.926829268292683
33354,"protected String url(String path){
  return baseUrl() + ""String_Node_Str"" + path;
}","protected String url(String path){
  return baseUrlWithPort() + ""String_Node_Str"" + path;
}",0.9540229885057472
33355,"/** 
 * 替换XML文件中attribute的value值
 * @param tarDoc		目标document
 * @param targetList		目标替换文字,模糊替换,即只要匹配list集合里中其中一个就会被抽取替换
 * @param replacement	替换成的内容
 * @return 是否有替换操作
 */
@SuppressWarnings(""String_Node_Str"") public static boolean replaceAttrValue(Document tarDoc,List<String> targetList,String replacement){
  boolean hasReplace=false;
  List<Element> tarElements=tarDoc.getRootElement().elements();
  for (  Element element : tarElements) {
    List<Attribute> attrs=element.attributes();
    for (    Attribute attr : attrs) {
      String attrValue=attr.getValue();
      int index=targetList.indexOf(attrValue);
      if (index != -1) {
        attr.setValue(replacement);
        hasReplace=true;
      }
    }
  }
  return hasReplace;
}","/** 
 * 替换XML文件中attribute的value值
 * @param tarDoc		目标document
 * @param targetList		目标替换文字,模糊替换,即只要匹配list集合里中其中一个就会被抽取替换
 * @param replacement	替换成的内容
 * @return 是否有替换操作
 */
@SuppressWarnings(""String_Node_Str"") public static boolean replaceAttrValue(Document tarDoc,List<String> targetList,String replacement){
  boolean hasReplace=false;
  List<Element> tarElements=XmlUtil.getAllElements(tarDoc);
  for (  Element element : tarElements) {
    List<Attribute> attrs=element.attributes();
    for (    Attribute attr : attrs) {
      String attrValue=attr.getValue();
      int index=targetList.indexOf(attrValue);
      if (index != -1) {
        attr.setValue(replacement);
        hasReplace=true;
      }
    }
  }
  return hasReplace;
}",0.9663072776280324
33356,"private void launchTv(){
  finish();
}","private void launchTv(){
  if (!CheckTV.isATV(this) && Preferences.getFirstRun(this)) {
    Preferences.setFirstRun(this);
    launchNavigation();
  }
  finish();
}",0.3762376237623762
33357,"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  startActivity(new Intent(this,NavigationActivity.class));
  finish();
}","@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setUpActivity();
  finish();
}",0.8553846153846154
33358,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  launchIntro();
  setUpInjections();
  setUpSettingsMenu();
  setUpAuthenticationListener();
  setUpContentRefreshing();
  setUpServers(savedInstanceState);
  setServerTitleClicked(false);
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  setUpInjections();
  setUpSettingsMenu();
  setUpAuthenticationListener();
  setUpContentRefreshing();
  setUpServers(savedInstanceState);
  setServerTitleClicked(false);
}",0.4369747899159664
33359,"private void finishDownloading(){
  DownloadManager.Query downloadQuery=new DownloadManager.Query().setFilterById(downloadId);
  Cursor downloadInformation=getDownloadManager(context).query(downloadQuery);
  downloadInformation.moveToFirst();
  int downloadStatus=downloadInformation.getInt(downloadInformation.getColumnIndex(DownloadManager.COLUMN_STATUS));
  if (downloadStatus == DownloadManager.STATUS_SUCCESSFUL) {
    String downloadUri=downloadInformation.getString(downloadInformation.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI));
    if (downloadUri.substring(0,7).matches(""String_Node_Str"")) {
      downloadUri=downloadUri.substring(7);
    }
    File file=new File(downloadUri);
    Uri contentUri=FileProvider.getUriForFile(context,""String_Node_Str"",file);
    BusProvider.getBus().post(new FileDownloadedEvent(contentUri));
  }
 else {
    BusProvider.getBus().post(new FileDownloadFailedEvent());
  }
  downloadInformation.close();
}","private void finishDownloading(){
  DownloadManager.Query downloadQuery=new DownloadManager.Query().setFilterById(downloadId);
  Cursor downloadInformation=getDownloadManager(context).query(downloadQuery);
  downloadInformation.moveToFirst();
  int downloadStatus=downloadInformation.getInt(downloadInformation.getColumnIndex(DownloadManager.COLUMN_STATUS));
  if (downloadStatus == DownloadManager.STATUS_SUCCESSFUL) {
    String downloadUri=downloadInformation.getString(downloadInformation.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI));
    if (downloadUri.substring(0,7).matches(""String_Node_Str"")) {
      downloadUri=downloadUri.substring(7);
    }
    try {
      URI uri=new URI(downloadUri);
      downloadUri=uri.getPath();
    }
 catch (    URISyntaxException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + downloadUri);
    }
    File file=new File(downloadUri);
    Uri contentUri=FileProvider.getUriForFile(context,""String_Node_Str"",file);
    BusProvider.getBus().post(new FileDownloadedEvent(contentUri));
  }
 else {
    BusProvider.getBus().post(new FileDownloadFailedEvent());
  }
  downloadInformation.close();
}",0.9089175011921792
33360,"public boolean isConnected(Server server){
  return (this.server != null) && (this.server.getSession().equals(server.getSession()));
}","public boolean isConnected(Server server){
  return (this.server != null) && (this.serverRoute != null) && (this.server.getSession().equals(server.getSession()));
}",0.8993288590604027
33361,"@Override public void onFailure(Call<ServerRoute> call,Throwable t){
  BusProvider.getBus().post(new ServerConnectionFailedEvent());
}","@Override public void onFailure(Call<ServerRoute> call,Throwable t){
  BusProvider.getBus().post(new ServerRouteLoadFailedEvent(t.getMessage()));
}",0.9039145907473308
33362,"@Override public void onGuidedActionClicked(GuidedAction action){
  if (getSelectedActionPosition() <= 3) {
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_auto))) {
      Preferences.setPrefAuto(preference,mContext);
    }
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_remote))) {
      Preferences.setPrefRemote(preference,mContext);
    }
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_local))) {
      Preferences.setPrefLocal(preference,mContext);
    }
  }
 else {
    if (initialSelected.matches(Preferences.getServerConnection(preference,mContext)))     getActivity().finish();
 else     startActivity(new Intent(getActivity(),NavigationActivity.class));
  }
}","@Override public void onGuidedActionClicked(GuidedAction action){
  if (getSelectedActionPosition() <= 3) {
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_auto))) {
      Preferences.setPrefAuto(preference,mContext);
    }
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_remote))) {
      Preferences.setPrefRemote(preference,mContext);
    }
    if (OPTION_NAMES.get(getSelectedActionPosition() - 1).matches(getString(R.string.preference_entry_server_connection_local))) {
      Preferences.setPrefLocal(preference,mContext);
    }
    keepCheck();
  }
}",0.8607435412728418
33363,"@Override public void onCreateActions(@NonNull List<GuidedAction> actions,Bundle savedInstanceState){
  setTitle(actions);
  populateNames();
  populateDesc();
  String selected=getServerConnectionStatus();
  initialSelected=selected;
  markSelected(selected);
  setCheckedActionButtons(actions);
  setBackButton(actions);
}","@Override public void onCreateActions(@NonNull List<GuidedAction> actions,Bundle savedInstanceState){
  setTitle(actions);
  populateNames();
  populateDesc();
  String selected=getServerConnectionStatus();
  initialSelected=selected;
  markSelected(selected);
  setCheckedActionButtons(actions);
}",0.9581993569131833
33364,"@Subscribe public void onFilesLoaded(ServerFilesLoadedEvent event){
  List<ServerFile> serverFiles=sortFiles(event.getServerFiles());
  ListRow listRow=null;
  ArrayObjectAdapter gridRowAdapter=new ArrayObjectAdapter(new MainTVPresenter(getActivity(),serverClient,serverFiles));
  if (serverFiles.size() != 0) {
    String shareName=serverFiles.get(0).getParentShare().getName();
    for (int i=0; i < serverFiles.size(); i++) {
      gridRowAdapter.add(serverFiles.get(i));
    }
    for (int i=0; i < serverShareList.size(); i++) {
      if (shareName.matches(serverShareList.get(i).getName())) {
        HeaderItem headerItem=new HeaderItem(shareName);
        listRow=new ListRow(headerItem,gridRowAdapter);
        mRowsAdapter.add(listRow);
        serverShareList.remove(i);
        break;
      }
    }
  }
  if (listRow != null) {
    int index1=mRowsAdapter.indexOf(listRow);
    int index2=mRowsAdapter.indexOf(settingsRow);
    mRowsAdapter.replace(index1,settingsRow);
    mRowsAdapter.replace(index2,listRow);
  }
  setAdapter(mRowsAdapter);
}","@Subscribe public void onFilesLoaded(ServerFilesLoadedEvent event){
  List<ServerFile> serverFiles=sortFiles(event.getServerFiles());
  ListRow listRow=null;
  ArrayObjectAdapter gridRowAdapter=new ArrayObjectAdapter(new MainTVPresenter(getActivity(),serverClient,serverFiles));
  if (serverFiles.size() != 0) {
    String shareName=serverFiles.get(0).getParentShare().getName();
    for (int i=0; i < serverFiles.size(); i++) {
      gridRowAdapter.add(serverFiles.get(i));
    }
    for (int i=0; i < serverShareList.size(); i++) {
      if (shareName.matches(serverShareList.get(i).getName())) {
        HeaderItem headerItem=new HeaderItem(shareName);
        listRow=new ListRow(headerItem,gridRowAdapter);
        mRowsAdapter.add(listRow);
        serverShareList.remove(i);
        break;
      }
    }
  }
  if (listRow != null) {
    int index1=mRowsAdapter.indexOf(listRow);
    int index2=mRowsAdapter.indexOf(settingsRow);
    mRowsAdapter.replace(index1,settingsRow);
    mRowsAdapter.replace(index2,listRow);
  }
  sortHeaders();
  setAdapter(mRowsAdapter);
}",0.992022524636321
33365,"@Override public void onGuidedActionClicked(GuidedAction action){
  if (getSelectedActionPosition() <= mServerArrayList.size()) {
    String server=mServerArrayList.get(getSelectedActionPosition() - 1).getName();
    Preferences.setServertoPref(server,mContext,mSharedPref);
  }
 else {
    startActivity(new Intent(mContext,NavigationActivity.class));
  }
}","@Override public void onGuidedActionClicked(GuidedAction action){
  if (getSelectedActionPosition() <= mServerArrayList.size()) {
    String server=mServerArrayList.get(getSelectedActionPosition() - 1).getName();
    if (indexSelected == (getSelectedActionPosition() - 1))     getActivity().finish();
 else {
      Preferences.setServertoPref(server,mContext,mSharedPref);
      startActivity(new Intent(mContext,NavigationActivity.class));
    }
  }
}",0.8592592592592593
33366,"@Override public void onCreateActions(@NonNull List<GuidedAction> actions,Bundle savedInstanceState){
  super.onCreateActions(actions,savedInstanceState);
  mSharedPref=Preferences.getPreference(mContext);
  mServerArrayList=getActivity().getIntent().getParcelableArrayListExtra(getString(R.string.intent_servers));
  setTitle(actions);
  populateData();
  String serverName=Preferences.getServerFromPref(mContext,mSharedPref);
  if (serverName == null) {
    setDefaultChecked();
  }
 else {
    int indexSelected=0;
    for (int i=0; i < mServerArrayList.size(); i++) {
      if (serverName.matches(mServerArrayList.get(i).getName())) {
        indexSelected=i;
        break;
      }
    }
    setFalseChecked();
    OPTION_CHECKED.set(indexSelected,true);
  }
  setCheckedActionButtons(actions);
  setBackButton(actions);
}","@Override public void onCreateActions(@NonNull List<GuidedAction> actions,Bundle savedInstanceState){
  super.onCreateActions(actions,savedInstanceState);
  mSharedPref=Preferences.getPreference(mContext);
  mServerArrayList=getActivity().getIntent().getParcelableArrayListExtra(getString(R.string.intent_servers));
  setTitle(actions);
  populateData();
  String serverName=Preferences.getServerFromPref(mContext,mSharedPref);
  if (serverName == null) {
    setDefaultChecked();
  }
 else {
    for (int i=0; i < mServerArrayList.size(); i++) {
      if (serverName.matches(mServerArrayList.get(i).getName())) {
        indexSelected=i;
        break;
      }
    }
    setFalseChecked();
    OPTION_CHECKED.set(indexSelected,true);
  }
  setCheckedActionButtons(actions);
}",0.9681846537741734
33367,"private void tearDownAudioPlayback(){
  audioPlayer.reset();
}","private void tearDownAudioPlayback(){
  if (isAudioPlaying())   pauseAudio();
  audioPlayer.reset();
}",0.7560975609756098
33368,"public void pauseAudio(){
  audioPlayer.pause();
  setMediaPlaybackState(PlaybackStateCompat.STATE_PAUSED);
  setUpAudioPlayerNotification(audioMetadataFormatter,audioAlbumArt);
}","public void pauseAudio(){
  mediaSession.setActive(false);
  audioPlayer.pause();
  setMediaPlaybackState(PlaybackStateCompat.STATE_PAUSED);
}",0.6791277258566978
33369,"@Subscribe public void onAudioMetadataRetrieved(AudioMetadataRetrievedEvent event){
  this.audioMetadataFormatter=new AudioMetadataFormatter(event.getAudioTitle(),event.getAudioArtist(),event.getAudioAlbum());
  this.audioAlbumArt=event.getAudioAlbumArt();
  setUpAudioPlayerRemote(audioMetadataFormatter,audioAlbumArt);
  setUpAudioPlayerNotification(audioMetadataFormatter,audioAlbumArt);
}","@Subscribe public void onAudioMetadataRetrieved(AudioMetadataRetrievedEvent event){
  this.audioMetadataFormatter=new AudioMetadataFormatter(event.getAudioTitle(),event.getAudioArtist(),event.getAudioAlbum());
  this.audioAlbumArt=event.getAudioAlbumArt();
  setUpAudioPlayerRemote(audioMetadataFormatter,audioAlbumArt);
  mMediaNotificationManager.startNotification();
}",0.8885976408912188
33370,"private void setUpAudioPlayerRemote(AudioMetadataFormatter audioMetadataFormatter,Bitmap audioAlbumArt){
  mediaSession.setMetadata(new MediaMetadataCompat.Builder().putString(MediaMetadataCompat.METADATA_KEY_TITLE,audioMetadataFormatter.getAudioTitle(audioFile)).putString(MediaMetadataCompat.METADATA_KEY_ALBUM,audioMetadataFormatter.getAudioSubtitle(audioShare)).putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART,getAudioPlayerRemoteArtwork(audioAlbumArt)).build());
}","private void setUpAudioPlayerRemote(AudioMetadataFormatter audioMetadataFormatter,Bitmap audioAlbumArt){
  mediaSession.setMetadata(new MediaMetadataCompat.Builder().putString(MediaMetadataCompat.METADATA_KEY_TITLE,audioMetadataFormatter.getAudioTitle(audioFile)).putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_SUBTITLE,audioMetadataFormatter.getAudioSubtitle(audioShare)).putString(MediaMetadataCompat.METADATA_KEY_ALBUM,audioMetadataFormatter.getAudioSubtitle(audioShare)).putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART,getAudioPlayerRemoteArtwork(audioAlbumArt)).build());
}",0.8934967012252591
33371,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  MediaButtonReceiver.handleIntent(mediaSession,intent);
  handleIntent(intent);
  return super.onStartCommand(intent,flags,startId);
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  MediaButtonReceiver.handleIntent(mediaSession,intent);
  return super.onStartCommand(intent,flags,startId);
}",0.9390862944162436
33372,"private void setMediaPlaybackState(int state){
  PlaybackStateCompat.Builder playbackStateBuilder=new PlaybackStateCompat.Builder();
  if (state == PlaybackStateCompat.STATE_PLAYING) {
    playbackStateBuilder.setActions(PlaybackStateCompat.ACTION_PLAY_PAUSE | PlaybackStateCompat.ACTION_PAUSE);
  }
 else {
    playbackStateBuilder.setActions(PlaybackStateCompat.ACTION_PLAY_PAUSE | PlaybackStateCompat.ACTION_PLAY);
  }
  playbackStateBuilder.setState(state,PlaybackStateCompat.PLAYBACK_POSITION_UNKNOWN,0);
  mediaSession.setPlaybackState(playbackStateBuilder.build());
}","private void setMediaPlaybackState(int state){
  PlaybackStateCompat.Builder playbackStateBuilder=new PlaybackStateCompat.Builder();
  playbackStateBuilder.setActions(getAvailableActions());
  playbackStateBuilder.setState(state,audioPlayer.getCurrentPosition(),1.0f,SystemClock.elapsedRealtime());
  mediaSession.setPlaybackState(playbackStateBuilder.build());
}",0.3052294557097118
33373,"public void playAudio(){
  audioPlayer.start();
  setMediaPlaybackState(PlaybackStateCompat.STATE_PLAYING);
  setUpAudioPlayerNotification(audioMetadataFormatter,audioAlbumArt);
}","public void playAudio(){
  mediaSession.setActive(true);
  audioPlayer.start();
  setMediaPlaybackState(PlaybackStateCompat.STATE_PLAYING);
}",0.68125
33374,"private void tearDownAudioPlayerNotification(){
  stopForeground(true);
}","private void tearDownAudioPlayerNotification(){
  mMediaNotificationManager.stopNotification();
}",0.7294117647058823
33375,"private void setUpWebResourceContent(Bundle state){
  if (!isWebResourceStateValid(state)) {
    getWebView().loadUrl(getWebResourceUri().toString());
  }
}","private void setUpWebResourceContent(Bundle state){
  if (!isWebResourceStateValid(state)) {
    getWebView().getSettings().setLoadWithOverviewMode(true);
    getWebView().getSettings().setUseWideViewPort(true);
    getWebView().getSettings().setBuiltInZoomControls(true);
    getWebView().loadUrl(getWebResourceUri().toString());
  }
}",0.6178861788617886
33376,"private void tearDownActivity(){
  getActivity().finish();
  Intent myIntent=new Intent(getActivity().getApplicationContext(),AuthenticationActivity.class);
  myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  startActivity(myIntent);
}","private void tearDownActivity(){
  Toast.makeText(getActivity(),R.string.message_logout,Toast.LENGTH_SHORT).show();
  Intent myIntent=new Intent(getActivity().getApplicationContext(),NavigationActivity.class);
  myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  startActivity(myIntent);
  getActivity().finish();
}",0.785829307568438
33377,"private void setUpImageListener(){
  getImagePager().setOnPageChangeListener(this);
}","private void setUpImageListener(){
  getImagePager().addOnPageChangeListener(this);
}",0.9647058823529412
33378,"private ImageView getImageView(){
  return (ImageView)getView().findViewById(R.id.image);
}","private TouchImageView getImageView(){
  return (TouchImageView)getView().findViewById(R.id.image);
}",0.9479166666666666
33379,"float getFixDragTrans(float delta,float viewSize,float contentSize){
  if (contentSize <= viewSize) {
    return 0;
  }
  return delta;
}","float getFixDragTrans(float delta,float viewSize,float contentSize){
  if (contentSize <= viewSize) {
    return 0f;
  }
  return delta;
}",0.9963636363636365
33380,"private void sharedConstructing(Context context){
  super.setClickable(true);
  this.context=context;
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  matrix=new Matrix();
  m=new float[9];
  setImageMatrix(matrix);
  setScaleType(AppCompatImageView.ScaleType.MATRIX);
  setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      mScaleDetector.onTouchEvent(event);
      PointF curr=new PointF(event.getX(),event.getY());
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        onSingleClick(curr);
      thisTouchTime=System.currentTimeMillis();
    if (thisTouchTime - previousTouchTime <= DOUBLE_CLICK_INTERVAL) {
      onDoubleClick(curr);
    }
  previousTouchTime=thisTouchTime;
break;
case MotionEvent.ACTION_MOVE:
if (mode == State.DRAG) {
float deltaX=curr.x - last.x;
float deltaY=curr.y - last.y;
float fixTransX=getFixDragTrans(deltaX,viewWidth,origWidth * saveScale);
float fixTransY=getFixDragTrans(deltaY,viewHeight,origHeight * saveScale);
matrix.postTranslate(fixTransX,fixTransY);
fixTrans();
last.set(curr.x,curr.y);
}
break;
case MotionEvent.ACTION_UP:
mode=State.NONE;
int xDiff=(int)Math.abs(curr.x - start.x);
int yDiff=(int)Math.abs(curr.y - start.y);
if (xDiff < CLICK && yDiff < CLICK) performClick();
break;
case MotionEvent.ACTION_POINTER_UP:
mode=State.NONE;
break;
}
setImageMatrix(matrix);
invalidate();
return true;
}
}
);
}","private void sharedConstructing(Context context){
  super.setClickable(true);
  this.context=context;
  mScaleDetector=new ScaleGestureDetector(context,new ScaleListener());
  matrix=new Matrix();
  m=new float[9];
  setImageMatrix(matrix);
  setScaleType(AppCompatImageView.ScaleType.MATRIX);
  setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      mScaleDetector.onTouchEvent(event);
      PointF curr=new PointF(event.getX(),event.getY());
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
        onSingleClick(curr);
      thisTouchTime=System.currentTimeMillis();
    if (thisTouchTime - previousTouchTime <= DOUBLE_CLICK_INTERVAL) {
      onDoubleClick(curr);
    }
  previousTouchTime=thisTouchTime;
break;
case MotionEvent.ACTION_MOVE:
if (mode == State.DRAG) {
float deltaX=curr.x - last.x;
float deltaY=curr.y - last.y;
if (deltaX != 0f || deltaY != 0f) {
  float fixTransX=getFixDragTrans(deltaX,viewWidth,origWidth * saveScale);
  float fixTransY=getFixDragTrans(deltaY,viewHeight,origHeight * saveScale);
  if (saveScale > 1f) {
    matrix.getValues(m);
    float absTransX=Math.abs(m[Matrix.MTRANS_X]);
    float transXMax=(origWidth * (saveScale - 1f));
    if ((transXMax - absTransX < 0.5f && fixTransX < 0f) || (absTransX < 0.5f && fixTransX > 0f))     getParent().requestDisallowInterceptTouchEvent(false);
 else     getParent().requestDisallowInterceptTouchEvent(true);
  }
  matrix.postTranslate(fixTransX,fixTransY);
  fixTrans();
  last.set(curr.x,curr.y);
}
}
break;
case MotionEvent.ACTION_UP:
mode=State.NONE;
int xDiff=(int)Math.abs(curr.x - start.x);
int yDiff=(int)Math.abs(curr.y - start.y);
if (xDiff < CLICK && yDiff < CLICK) performClick();
break;
case MotionEvent.ACTION_POINTER_UP:
mode=State.NONE;
break;
}
setImageMatrix(matrix);
invalidate();
return true;
}
}
);
}",0.8659485338120886
33381,"@Override public boolean onTouch(View v,MotionEvent event){
  mScaleDetector.onTouchEvent(event);
  PointF curr=new PointF(event.getX(),event.getY());
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    onSingleClick(curr);
  thisTouchTime=System.currentTimeMillis();
if (thisTouchTime - previousTouchTime <= DOUBLE_CLICK_INTERVAL) {
  onDoubleClick(curr);
}
previousTouchTime=thisTouchTime;
break;
case MotionEvent.ACTION_MOVE:
if (mode == State.DRAG) {
float deltaX=curr.x - last.x;
float deltaY=curr.y - last.y;
float fixTransX=getFixDragTrans(deltaX,viewWidth,origWidth * saveScale);
float fixTransY=getFixDragTrans(deltaY,viewHeight,origHeight * saveScale);
matrix.postTranslate(fixTransX,fixTransY);
fixTrans();
last.set(curr.x,curr.y);
}
break;
case MotionEvent.ACTION_UP:
mode=State.NONE;
int xDiff=(int)Math.abs(curr.x - start.x);
int yDiff=(int)Math.abs(curr.y - start.y);
if (xDiff < CLICK && yDiff < CLICK) performClick();
break;
case MotionEvent.ACTION_POINTER_UP:
mode=State.NONE;
break;
}
setImageMatrix(matrix);
invalidate();
return true;
}","@Override public boolean onTouch(View v,MotionEvent event){
  mScaleDetector.onTouchEvent(event);
  PointF curr=new PointF(event.getX(),event.getY());
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    onSingleClick(curr);
  thisTouchTime=System.currentTimeMillis();
if (thisTouchTime - previousTouchTime <= DOUBLE_CLICK_INTERVAL) {
  onDoubleClick(curr);
}
previousTouchTime=thisTouchTime;
break;
case MotionEvent.ACTION_MOVE:
if (mode == State.DRAG) {
float deltaX=curr.x - last.x;
float deltaY=curr.y - last.y;
if (deltaX != 0f || deltaY != 0f) {
float fixTransX=getFixDragTrans(deltaX,viewWidth,origWidth * saveScale);
float fixTransY=getFixDragTrans(deltaY,viewHeight,origHeight * saveScale);
if (saveScale > 1f) {
matrix.getValues(m);
float absTransX=Math.abs(m[Matrix.MTRANS_X]);
float transXMax=(origWidth * (saveScale - 1f));
if ((transXMax - absTransX < 0.5f && fixTransX < 0f) || (absTransX < 0.5f && fixTransX > 0f)) getParent().requestDisallowInterceptTouchEvent(false);
 else getParent().requestDisallowInterceptTouchEvent(true);
}
matrix.postTranslate(fixTransX,fixTransY);
fixTrans();
last.set(curr.x,curr.y);
}
}
break;
case MotionEvent.ACTION_UP:
mode=State.NONE;
int xDiff=(int)Math.abs(curr.x - start.x);
int yDiff=(int)Math.abs(curr.y - start.y);
if (xDiff < CLICK && yDiff < CLICK) performClick();
break;
case MotionEvent.ACTION_POINTER_UP:
mode=State.NONE;
break;
}
setImageMatrix(matrix);
invalidate();
return true;
}",0.8468253968253968
33382,"@Override public void onSystemUiVisibilityChange(int visibility){
  if (areSystemControlsVisible(visibility)) {
    showControls();
  }
}","@Override public void onSystemUiVisibilityChange(int visibility){
  Toast.makeText(this,""String_Node_Str"" + visibility,Toast.LENGTH_SHORT).show();
  if (areSystemControlsVisible(visibility) && !isFinishing()) {
    showControls();
  }
}",0.7345844504021448
33383,"private void hideSystemControls(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    getActivityView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LOW_PROFILE| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
  }
 else {
    getActivityView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
  }
}","@SuppressLint(""String_Node_Str"") private void hideSystemControls(){
  getActivityView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_LOW_PROFILE| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
}",0.7218225419664268
33384,"@Override protected void onStart(){
  super.onStart();
  setUpVideoService();
  setUpVideoServiceBind();
}","@Override protected void onStart(){
  super.onStart();
  setUpVideoServiceBind();
}",0.8783068783068783
33385,"@Override protected void onStop(){
  super.onStop();
  getSurfaceFrame().removeOnLayoutChangeListener(this);
  getMediaPlayer().stop();
  getMediaPlayer().getVLCVout().detachViews();
  tearDownVideoServiceBind();
}","@Override protected void onStop(){
  super.onStop();
  getSurfaceFrame().removeOnLayoutChangeListener(this);
  getMediaPlayer().getVLCVout().detachViews();
  tearDownVideoServiceBind();
}",0.9326683291770572
33386,"@Override public boolean isPlaying(){
  return videoService.isVideoPlaying();
}","@Override public boolean isPlaying(){
  return getMediaPlayer().isPlaying();
}",0.8280254777070064
33387,"@Override protected void onResume(){
  super.onResume();
  showControlsForced();
}","@Override protected void onResume(){
  super.onResume();
}",0.8285714285714286
33388,"@Override public void onPause(){
  super.onPause();
  showControls();
  tearDownVideoControlsHandler();
  if (!isChangingConfigurations()) {
    pause();
  }
  if (isFinishing()) {
    tearDownVideoPlayback();
  }
}","@Override public void onPause(){
  super.onPause();
  tearDownVideoControlsHandler();
  if (!isChangingConfigurations()) {
    pause();
  }
  if (isFinishing()) {
    tearDownVideoPlayback();
  }
}",0.9563106796116504
33389,"private void setUpVideoPlayback(){
  if (videoService.isVideoStarted()) {
    showVideo();
    showControls();
  }
 else {
    videoService.startVideo(getVideoShare(),getVideoFile());
    addLayoutChangeListener();
  }
}","private void setUpVideoPlayback(){
  if (videoService.isVideoStarted()) {
    showVideo();
    showControlsDelayed();
  }
 else {
    videoService.startVideo(getVideoShare(),getVideoFile());
    addLayoutChangeListener();
  }
}",0.9843400447427292
33390,"private void showSystemControls(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    getActivityView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
  }
}","@SuppressLint(""String_Node_Str"") private void showSystemControls(){
  getActivityView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
}",0.7928286852589641
33391,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_server_file_video);
  setUpInjections();
  setUpHomeNavigation();
  setUpVideo();
  setUpSystemControls();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_server_file_video);
  setUpInjections();
  setUpHomeNavigation();
  setUpVideo();
  setUpSystemControls();
  setUpVideoService();
}",0.9548133595284872
33392,"@Override public void onEvent(MediaPlayer.Event event){
switch (event.type) {
case MediaPlayer.Event.MediaChanged:
    showVideo();
  showControls();
break;
case MediaPlayer.Event.EndReached:
finish();
break;
default :
break;
}
}","@Override public void onEvent(MediaPlayer.Event event){
switch (event.type) {
case MediaPlayer.Event.MediaChanged:
    showVideo();
  break;
case MediaPlayer.Event.Playing:
showControlsForced();
break;
case MediaPlayer.Event.Paused:
showControlsForced();
break;
case MediaPlayer.Event.EndReached:
finish();
break;
case MediaPlayer.Event.Buffering:
break;
case MediaPlayer.Event.EncounteredError:
break;
}
}",0.7023622047244095
33393,"private void tearDownActivity(){
  getActivity().finish();
  Intent myIntent=new Intent(getActivity().getApplicationContext(),AuthenticationActivity.class);
  startActivity(myIntent);
}","private void tearDownActivity(){
  getActivity().finish();
  Intent myIntent=new Intent(getActivity().getApplicationContext(),AuthenticationActivity.class);
  myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
  startActivity(myIntent);
}",0.8114035087719298
33394,"@Override public void onPause(){
  super.onPause();
  if (!isChangingConfigurations()) {
    pause();
  }
  if (isFinishing()) {
    tearDownVideoPlayback();
  }
}","@Override public void onPause(){
  super.onPause();
  videoControls.hide();
  if (!isChangingConfigurations()) {
    pause();
  }
  if (isFinishing()) {
    tearDownVideoPlayback();
  }
}",0.9314285714285714
33395,"public void init(){
  mVisible=true;
  delayedHide(autoHideDelayMillis);
  if (onClickToggleEnabled) {
    mContentView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        toggle();
      }
    }
);
  }
  if (mControlsView != null) {
    mControlsView.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        if (autoHide) {
          delayedHide(autoHideDelayMillis);
        }
        return false;
      }
    }
);
  }
}","public void init(){
  mVisible=true;
  delayedHide(autoHideDelayMillis);
  if (onClickToggleEnabled) {
    mContentView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        toggle();
      }
    }
);
  }
  if (mControlsView != null) {
    mControlsView.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View view,      MotionEvent motionEvent){
        if (autoHide) {
          delayedHide();
        }
        return false;
      }
    }
);
  }
}",0.9828982898289828
33396,"public void toggle(){
  if (mVisible) {
    hide();
  }
 else {
    show();
  }
}","public void toggle(){
  if (mVisible) {
    hide();
  }
 else {
    show();
    delayedHide();
  }
}",0.8950276243093923
33397,"@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (autoHide) {
    delayedHide(autoHideDelayMillis);
  }
  return false;
}","@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (autoHide) {
    delayedHide();
  }
  return false;
}",0.9304029304029304
33398,"public void toggle(){
  if (isVisible) {
    hideAnimated();
  }
 else {
    showAnimated();
  }
}","public void toggle(){
  if (isVisible) {
    hideAnimated();
  }
 else {
    showAnimated();
    hideControlsDelayed();
  }
}",0.8789237668161435
33399,"private void bindView(ServerFile file,View view){
  ImageView fileIconView=(ImageView)view.findViewById(R.id.icon);
  TextView fileTextView=(TextView)view.findViewById(R.id.text);
  fileTextView.setText(getFileName(file));
  if (Mimes.match(file.getMime()) == Mimes.Type.IMAGE) {
    setUpImageIcon(file,fileIconView);
  }
 else {
    fileIconView.setImageResource(getFileIcon(file));
  }
}","private void bindView(ServerFile file,View view){
  ImageView fileIconView=(ImageView)view.findViewById(R.id.icon);
  TextView fileTextView=(TextView)view.findViewById(R.id.text);
  TextView fileSize=(TextView)view.findViewById(R.id.file_size);
  TextView fileLastModified=(TextView)view.findViewById(R.id.last_modified);
  LinearLayout moreInfo=(LinearLayout)view.findViewById(R.id.more_info);
  fileTextView.setText(getFileName(file));
  long size=getFileSize(file);
  if (file.getMime().equals(""String_Node_Str"")) {
    moreInfo.setVisibility(View.GONE);
  }
 else {
    moreInfo.setVisibility(View.VISIBLE);
    fileSize.setText(Formatter.formatFileSize(context,size));
    Date d=getLastModified(file);
    SimpleDateFormat dt=new SimpleDateFormat(""String_Node_Str"");
    fileLastModified.setText(dt.format(d));
  }
  if (Mimes.match(file.getMime()) == Mimes.Type.IMAGE) {
    setUpImageIcon(file,fileIconView);
  }
 else {
    fileIconView.setImageResource(getFileIcon(file));
  }
}",0.5660377358490566
33400,"public ServerFilesAdapter(Context context,ServerClient serverClient){
  this.serverClient=serverClient;
  this.layoutInflater=LayoutInflater.from(context);
  this.files=Collections.emptyList();
}","public ServerFilesAdapter(Context context,ServerClient serverClient){
  this.serverClient=serverClient;
  this.layoutInflater=LayoutInflater.from(context);
  this.context=context;
  this.files=Collections.emptyList();
}",0.9420289855072465
33401,"private ServerFile(Parcel parcel){
  this.parentFile=parcel.readParcelable(ServerFile.class.getClassLoader());
  this.name=parcel.readString();
  this.mime=parcel.readString();
  this.modificationTime=new Date(parcel.readLong());
}","private ServerFile(Parcel parcel){
  this.parentFile=parcel.readParcelable(ServerFile.class.getClassLoader());
  this.name=parcel.readString();
  this.mime=parcel.readString();
  this.modificationTime=new Date(parcel.readLong());
  this.size=parcel.readLong();
}",0.9371196754563894
33402,"@Override public void writeToParcel(Parcel parcel,int flags){
  parcel.writeParcelable(parentFile,flags);
  parcel.writeString(name);
  parcel.writeString(mime);
  parcel.writeLong(modificationTime.getTime());
}","@Override public void writeToParcel(Parcel parcel,int flags){
  parcel.writeParcelable(parentFile,flags);
  parcel.writeString(name);
  parcel.writeString(mime);
  parcel.writeLong(modificationTime.getTime());
  parcel.writeLong(size);
}",0.9419642857142856
33403,"@Subscribe public void onAppsLoadFailed(ServerAppsLoadedEvent event){
  showAppsError();
}","@Subscribe public void onAppsLoadFailed(ServerAppsLoadFailedEvent event){
  showAppsError();
}",0.9782608695652174
33404,"private void setUpSharesContent(){
  if (serverClient.isConnected()) {
    serverClient.getShares();
  }
 else {
    showSharesError();
  }
}","private void setUpSharesContent(){
  if (serverClient.isConnected()) {
    serverClient.getShares();
  }
}",0.8582995951417004
33405,"@Override public Bundle addAccount(AccountAuthenticatorResponse response,String accountType,String authTokenType,String[] requiredFeatures,Bundle options) throws NetworkErrorException {
  if (getAccounts().isEmpty()) {
    Intent accountIntent=new Intent(context,AuthenticationActivity.class);
    accountIntent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,response);
    Bundle accountBundle=new Bundle();
    accountBundle.putParcelable(AccountManager.KEY_INTENT,accountIntent);
    return accountBundle;
  }
 else {
    Bundle accountBundle=new Bundle();
    accountBundle.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_CANCELED);
    accountBundle.putString(AccountManager.KEY_ERROR_MESSAGE,""String_Node_Str"");
    return accountBundle;
  }
}","@Override public Bundle addAccount(AccountAuthenticatorResponse response,String accountType,String authTokenType,String[] requiredFeatures,Bundle options) throws NetworkErrorException {
  Bundle accountBundle=new Bundle();
  if (getAccounts().isEmpty()) {
    Intent accountIntent=new Intent(context,AuthenticationActivity.class);
    accountIntent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE,response);
    accountBundle.putParcelable(AccountManager.KEY_INTENT,accountIntent);
  }
 else {
    accountBundle.putInt(AccountManager.KEY_ERROR_CODE,AccountManager.ERROR_CODE_CANCELED);
    accountBundle.putString(AccountManager.KEY_ERROR_MESSAGE,""String_Node_Str"");
  }
  return accountBundle;
}",0.9008766014834796
33406,"private Fragment buildSettingsFragment(){
  return new SettingsFragment();
}","private Fragment buildSettingsFragment(){
  return Fragments.Builder.buildSettingsFragment();
}",0.8654970760233918
33407,"private <T extends Preference>T getPreference(int settingId){
  return (T)findPreference(getString(settingId));
}","@SuppressWarnings(""String_Node_Str"") private <T extends Preference>T getPreference(int settingId){
  return (T)findPreference(getString(settingId));
}",0.8593155893536122
33408,"@Override public String getAuthTokenLabel(String s){
  return null;
}","@Override public String getAuthTokenLabel(String authTokenType){
  return null;
}",0.9066666666666666
33409,"private void setUpAudioPlayback(){
  try {
    audioPlayer.setDataSource(this,getAudioUri());
    audioPlayer.setOnPreparedListener(this);
    audioPlayer.prepareAsync();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","private void setUpAudioPlayback(){
  try {
    audioPlayer.setDataSource(this,getAudioUri());
    audioPlayer.prepareAsync();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.89749430523918
33410,"private void setUpAudioPlayer(){
  audioPlayer=new MediaPlayer();
  audioPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
  audioPlayer.setWakeMode(this,PowerManager.PARTIAL_WAKE_LOCK);
  audioPlayer.setOnCompletionListener(this);
  audioPlayer.setOnErrorListener(this);
}","private void setUpAudioPlayer(){
  audioPlayer=new MediaPlayer();
  audioPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
  audioPlayer.setWakeMode(this,PowerManager.PARTIAL_WAKE_LOCK);
  audioPlayer.setOnPreparedListener(this);
  audioPlayer.setOnCompletionListener(this);
  audioPlayer.setOnErrorListener(this);
}",0.9279731993299832
33411,"@Override public void onDestroy(){
  super.onDestroy();
  tearDownVideoEvents();
  tearDownVideoPlayer();
}","@Override public void onDestroy(){
  super.onDestroy();
  tearDownVideoEvents();
  tearDownVideoPlayback();
}",0.9722222222222222
33412,"@Override protected BusEvent doInBackground(Void... parameters){
  MediaMetadataRetriever audioMetadataRetriever=new MediaMetadataRetriever();
  audioMetadataRetriever.setDataSource(audioUri.toString(),new HashMap<String,String>());
  String audioTitle=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
  String audioArtist=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
  String audioAlbum=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
  Bitmap audioAlbumArt=extractAlbumArt(audioMetadataRetriever);
  audioMetadataRetriever.release();
  return new AudioMetadataRetrievedEvent(audioTitle,audioArtist,audioAlbum,audioAlbumArt);
}","@Override protected BusEvent doInBackground(Void... parameters){
  MediaMetadataRetriever audioMetadataRetriever=new MediaMetadataRetriever();
  try {
    audioMetadataRetriever.setDataSource(audioUri.toString(),new HashMap<String,String>());
    String audioTitle=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_TITLE);
    String audioArtist=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ARTIST);
    String audioAlbum=audioMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_ALBUM);
    Bitmap audioAlbumArt=extractAlbumArt(audioMetadataRetriever);
    return new AudioMetadataRetrievedEvent(audioTitle,audioArtist,audioAlbum,audioAlbumArt);
  }
 catch (  RuntimeException e) {
    return new AudioMetadataRetrievedEvent(null,null,null,null);
  }
 finally {
    audioMetadataRetriever.release();
  }
}",0.8698884758364313
33413,"private void setUpNavigation(Bundle state){
  if (isNavigationDrawerAvailable()) {
    setUpNavigationDrawer();
  }
  setUpNavigationFragment();
  if (isNavigationDrawerAvailable() && isNavigationDrawerRequired(state)) {
    showNavigationDrawer();
  }
}","private void setUpNavigation(Bundle state){
  if (isNavigationDrawerAvailable()) {
    setUpNavigationDrawer();
  }
  setUpNavigationTitle(state);
  setUpNavigationFragment();
  if (isNavigationDrawerAvailable() && isNavigationDrawerRequired(state)) {
    showNavigationDrawer();
  }
}",0.9424860853432282
33414,"@Override public void onDrawerClosed(View drawer){
  navigationDrawerToggle.onDrawerClosed(drawer);
  setUpMenu();
}","@Override public void onDrawerClosed(View drawer){
  navigationDrawerToggle.onDrawerClosed(drawer);
  setUpTitle();
}",0.9699570815450644
33415,"@Subscribe public void onSharesSelected(SharesSelectedEvent event){
  setUpTitle(""String_Node_Str"");
  setUpShares();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}","@Subscribe public void onSharesSelected(SharesSelectedEvent event){
  this.navigationTitle=""String_Node_Str"";
  setUpTitle();
  setUpShares();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}",0.854320987654321
33416,"@Subscribe public void onAppsSelected(AppsSelectedEvent event){
  setUpTitle(""String_Node_Str"");
  setUpApps();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}","@Subscribe public void onAppsSelected(AppsSelectedEvent event){
  this.navigationTitle=""String_Node_Str"";
  setUpTitle();
  setUpApps();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}",0.900763358778626
33417,"@Override public void onDrawerOpened(View drawer){
  navigationDrawerToggle.onDrawerOpened(drawer);
  setUpTitle(getString(R.string.application_name));
  setUpMenu();
}","@Override public void onDrawerOpened(View drawer){
  navigationDrawerToggle.onDrawerOpened(drawer);
  setUpTitle(getString(R.string.application_name));
}",0.9532710280373832
33418,"private void setUpTitle(String title){
  getActionBar().setTitle(title);
}","private void setUpTitle(){
  setUpTitle(navigationTitle);
}",0.706766917293233
33419,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  tearDownNavigationDrawerState(outState);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  tearDownNavigationState(outState);
}",0.9790209790209792
33420,"@Override public void onDrawerClosed(View drawer){
  navigationDrawerToggle.onDrawerClosed(drawer);
  setUpTitle(""String_Node_Str"");
  setUpMenu();
}","@Override public void onDrawerClosed(View drawer){
  navigationDrawerToggle.onDrawerClosed(drawer);
  setUpMenu();
}",0.8754716981132076
33421,"@Subscribe public void onSharesSelected(SharesSelectedEvent event){
  setUpShares();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}","@Subscribe public void onSharesSelected(SharesSelectedEvent event){
  setUpTitle(""String_Node_Str"");
  setUpShares();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}",0.904899135446686
33422,"@Subscribe public void onAppsSelected(AppsSelectedEvent event){
  setUpApps();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}","@Subscribe public void onAppsSelected(AppsSelectedEvent event){
  setUpTitle(""String_Node_Str"");
  setUpApps();
  if (isNavigationDrawerAvailable()) {
    hideNavigationDrawer();
  }
}",0.9014925373134328
33423,"private void setUpSharesContent(){
  serverClient.getShares();
}","private void setUpSharesContent(){
  if (serverClient.isConnected()) {
    serverClient.getShares();
  }
 else {
    showSharesError();
  }
}",0.624390243902439
33424,"private void setUpServerConnection(){
switch (getServerConnection()) {
case AUTO:
    serverClient.connectAuto();
  break;
case LOCAL:
serverClient.connectLocal();
break;
case REMOTE:
serverClient.connectRemote();
break;
default :
break;
}
}","private void setUpServerConnection(){
  if (!serverClient.isConnected()) {
    return;
  }
switch (getServerConnection()) {
case AUTO:
    serverClient.connectAuto();
  break;
case LOCAL:
serverClient.connectLocal();
break;
case REMOTE:
serverClient.connectRemote();
break;
default :
break;
}
}",0.9009345794392524
33425,"private void setUpServerConnection(){
  if (isConnectionLocal()) {
    serverClient.connectLocal();
  }
 else {
    serverClient.connectRemote();
  }
  setUpSharesContent();
}","private void setUpServerConnection(){
  if (!isConnectionAvailable() || isConnectionLocal()) {
    serverClient.connectLocal();
  }
 else {
    serverClient.connectRemote();
  }
  setUpSharesContent();
}",0.925925925925926
33426,"private void setUpServerConnectionIndicator(){
  getActivity().getActionBar().setBackgroundDrawable(getServerConnectionIndicator());
}","private void setUpServerConnectionIndicator(){
  if (isConnectionAvailable()) {
    getActivity().getActionBar().setBackgroundDrawable(getServerConnectionIndicator());
  }
}",0.8729641693811075
33427,"private void setUpSettingsSummary(){
  Preference applicationVersion=getSetting(R.string.preference_key_application_version);
  applicationVersion.setSummary(getApplicationVersionSummary());
  ListPreference serverConnection=getSetting(R.string.preference_key_server_connection);
  serverConnection.setSummary(String.format(""String_Node_Str"",serverConnection.getEntry()));
}","private void setUpSettingsSummary(){
  Preference applicationVersion=getPreference(R.string.preference_key_application_version);
  ListPreference serverConnection=getPreference(R.string.preference_key_server_connection);
  applicationVersion.setSummary(getApplicationVersionSummary());
  serverConnection.setSummary(getServerConnection());
}",0.5762237762237762
33428,"private void setUpSettingsListeners(){
  Preference accountSignOut=getSetting(R.string.preference_key_account_sign_out);
  Preference applicationFeedback=getSetting(R.string.preference_key_application_feedback);
  Preference applicationRating=getSetting(R.string.preference_key_application_rating);
  accountSignOut.setOnPreferenceClickListener(this);
  applicationFeedback.setOnPreferenceClickListener(this);
  applicationRating.setOnPreferenceClickListener(this);
}","private void setUpSettingsListeners(){
  Preference accountSignOut=getPreference(R.string.preference_key_account_sign_out);
  Preference applicationFeedback=getPreference(R.string.preference_key_application_feedback);
  Preference applicationRating=getPreference(R.string.preference_key_application_rating);
  accountSignOut.setOnPreferenceClickListener(this);
  applicationFeedback.setOnPreferenceClickListener(this);
  applicationRating.setOnPreferenceClickListener(this);
}",0.9459172852598092
33429,"private boolean isServerConnectionLocal(){
  ListPreference serverConnection=getSetting(R.string.preference_key_server_connection);
  return serverConnection.getValue().equals(getString(R.string.preference_key_server_connection_local));
}","private boolean isServerConnectionLocal(){
  ListPreference serverConnection=getPreference(R.string.preference_key_server_connection);
  return serverConnection.getValue().equals(getString(R.string.preference_key_server_connection_local));
}",0.964509394572025
33430,"@Override public boolean onOptionsItemSelected(MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.menu_sort:
    setUpFilesContentSortIcon(menuItem);
  setUpFilesContentSortSwitched();
return true;
default :
return super.onOptionsItemSelected(menuItem);
}
}","@Override public boolean onOptionsItemSelected(MenuItem menuItem){
switch (menuItem.getItemId()) {
case R.id.menu_sort:
    setUpFilesContentSortSwitched();
  setUpFilesContentSortIcon(menuItem);
return true;
default :
return super.onOptionsItemSelected(menuItem);
}
}",0.917910447761194
33431,"/** 
 * Creates new bitmap for the position specified
 * @param position position
 * @return Bitmap created
 */
protected abstract Bitmap createBitmap(int position);","/** 
 * Creates new bitmap for the position specified.
 * @param position position
 * @return Bitmap created
 */
protected abstract Bitmap createBitmap(int position);",0.9969788519637462
33432,"@Override public void report(HealthStatusScope scope,HealthStatusItemConsumer resultConsumer){
  Map<String,Object> params=new HashMap<>();
  params.put(""String_Node_Str"",myWebHookTeamCityRestApiZipPluginFixer.getFoundApiZipFilesContainingJaxbJars().size() + myWebHookTeamCityRestApiZipPluginFixer.getFoundUnpackedApiZipFilesContainingJaxbJars().size());
  params.put(""String_Node_Str"",stripTrailingSlash(mySBuildServer.getRootUrl()) + ""String_Node_Str"" + WebHookRestApiAdminPage.TC_WEB_HOOK_REST_API_ADMIN_ID);
  final HealthStatusItem item=new HealthStatusItem(""String_Node_Str"",myCategory,params);
  resultConsumer.consumeGlobal(item);
}","@Override public void report(HealthStatusScope scope,HealthStatusItemConsumer resultConsumer){
  Map<String,Object> params=new HashMap<>();
  params.put(""String_Node_Str"",myWebHookTeamCityRestApiZipPluginFixer.getFoundApiZipFilesContainingJaxbJars().size());
  params.put(""String_Node_Str"",stripTrailingSlash(mySBuildServer.getRootUrl()) + ""String_Node_Str"" + WebHookRestApiAdminPage.TC_WEB_HOOK_REST_API_ADMIN_ID);
  final HealthStatusItem item=new HealthStatusItem(""String_Node_Str"",myCategory,params);
  resultConsumer.consumeGlobal(item);
}",0.918918918918919
33433,"protected boolean deleteFilesFromRestApiZipFile(File restApiZip,String[] filenames) throws IOException {
  Map<String,String> zip_properties=new HashMap<>();
  zip_properties.put(""String_Node_Str"",""String_Node_Str"");
  URI zip_disk=null;
  try {
    Path path=Paths.get(restApiZip.getAbsolutePath());
    zip_disk=new URI(""String_Node_Str"",path.toUri().toString().replace(""String_Node_Str"",""String_Node_Str""),null);
  }
 catch (  URISyntaxException e) {
  }
  boolean fileDeletedInZip=false;
  try (FileSystem zipfs=FileSystems.newFileSystem(zip_disk,zip_properties)){
    for (    String filename : filenames) {
      Path pathInZipfile=zipfs.getPath(filename);
      if (Files.exists(pathInZipfile)) {
        Files.delete(pathInZipfile);
        fileDeletedInZip=true;
      }
    }
  }
   return fileDeletedInZip;
}","protected boolean deleteFilesFromRestApiZipFile(File restApiZip,String[] filenames,JarReport jarReport) throws IOException {
  Map<String,String> zip_properties=new HashMap<>();
  zip_properties.put(""String_Node_Str"",""String_Node_Str"");
  URI zip_disk=null;
  try {
    Path path=Paths.get(restApiZip.getAbsolutePath());
    zip_disk=new URI(""String_Node_Str"",path.toUri().toString().replace(""String_Node_Str"",""String_Node_Str""),null);
  }
 catch (  URISyntaxException e) {
  }
  boolean fileDeletedInZip=false;
  try (FileSystem zipfs=FileSystems.newFileSystem(zip_disk,zip_properties)){
    for (    String filename : filenames) {
      Path pathInZipfile=zipfs.getPath(filename);
      if (Files.exists(pathInZipfile)) {
        Files.delete(pathInZipfile);
        fileDeletedInZip=true;
        jarReport.setJarAsRemovedFromZip(filename,true);
      }
    }
  }
   return fileDeletedInZip;
}",0.9551020408163264
33434,"protected boolean doesRestApiZipFileContainJaxJars(File restApiZip,String[] filenames) throws IOException {
  Map<String,String> zip_properties=new HashMap<>();
  zip_properties.put(""String_Node_Str"",""String_Node_Str"");
  URI zip_disk=null;
  try {
    Path path=Paths.get(restApiZip.getAbsolutePath());
    zip_disk=new URI(""String_Node_Str"",path.toUri().toString(),null);
  }
 catch (  URISyntaxException e) {
  }
  boolean fileFoundInZip=false;
  try (FileSystem zipfs=FileSystems.newFileSystem(zip_disk,zip_properties)){
    for (    String filename : filenames) {
      Path pathInZipfile=zipfs.getPath(filename);
      if (Files.exists(pathInZipfile)) {
        fileFoundInZip=true;
      }
    }
  }
 catch (  IllegalArgumentException e) {
    Loggers.SERVER.error(""String_Node_Str"" + e.getMessage());
    Loggers.SERVER.debug(e);
  }
  return fileFoundInZip;
}","protected boolean doesRestApiZipFileContainJaxJars(File restApiZip,String[] filenames,JarReport jarReport) throws IOException {
  Map<String,String> zip_properties=new HashMap<>();
  zip_properties.put(""String_Node_Str"",""String_Node_Str"");
  URI zip_disk=null;
  try {
    Path path=Paths.get(restApiZip.getAbsolutePath());
    zip_disk=new URI(""String_Node_Str"",path.toUri().toString(),null);
  }
 catch (  URISyntaxException e) {
  }
  boolean fileFoundInZip=false;
  try (FileSystem zipfs=FileSystems.newFileSystem(zip_disk,zip_properties)){
    for (    String filename : filenames) {
      Path pathInZipfile=zipfs.getPath(filename);
      if (Files.exists(pathInZipfile)) {
        fileFoundInZip=true;
        jarReport.setJarFoundInZipFile(filename,true);
      }
 else {
        jarReport.setJarFoundInZipFile(filename,false);
      }
    }
  }
 catch (  IllegalArgumentException e) {
    Loggers.SERVER.error(""String_Node_Str"" + e.getMessage());
    Loggers.SERVER.debug(e);
  }
  return fileFoundInZip;
}",0.9219330855018588
33435,"public boolean foundApiZipFilesContainingJaxbJars(){
  return foundApiZipFilesContainingJaxbJars.size() > 0 || foundUnpackedApiZipFilesContainingJaxbJars.size() > 0;
}","public boolean foundApiZipFilesContainingJaxbJars(){
  for (  JarReport jarReport : jarReports.values()) {
    if (jarReport.isjarFileFound()) {
      return true;
    }
  }
  return false;
}",0.3798882681564245
33436,"protected boolean doFilesExistInPluginsUnpackedDir(String pluginsDir,String[] filenames) throws IOException {
  File restPluginUnpackedDir=new File(pluginsDir + unpackedLocation);
  boolean fileExists=false;
  if (restPluginUnpackedDir.exists() && restPluginUnpackedDir.isDirectory()) {
    for (    String filename : filenames) {
      File jaxbjar=new File(restPluginUnpackedDir + File.separator + filename.replace(""String_Node_Str"",File.separator));
      if (jaxbjar.exists()) {
        fileExists=true;
      }
    }
  }
 else {
    Loggers.SERVER.debug(""String_Node_Str"" + restPluginUnpackedDir);
  }
  return fileExists;
}","protected boolean doFilesExistInPluginsUnpackedDir(String pluginsDir,String[] filenames,JarReport jarReport) throws IOException {
  File restPluginUnpackedDir=new File(pluginsDir + unpackedLocation);
  boolean fileExists=false;
  if (restPluginUnpackedDir.exists() && restPluginUnpackedDir.isDirectory()) {
    for (    String filename : filenames) {
      File jaxbjar=new File(restPluginUnpackedDir + File.separator + filename.replace(""String_Node_Str"",File.separator));
      if (jaxbjar.exists()) {
        fileExists=true;
        jarReport.setJarFoundInUnpackedLocation(filename,true);
      }
 else {
        jarReport.setJarFoundInUnpackedLocation(filename,false);
      }
    }
  }
 else {
    Loggers.SERVER.debug(""String_Node_Str"" + restPluginUnpackedDir);
  }
  return fileExists;
}",0.8840477863668307
33437,"public synchronized void findRestApiZipPlugins(){
  Loggers.SERVER.debug(""String_Node_Str"");
  File possibleLocation=findTeamCityBaseLocation();
  this.foundApiZipFiles=new ArrayList<>();
  this.foundApiZipFilesContainingJaxbJars=new ArrayList<>();
  this.foundApiZipFilesNotContainingJaxbJars=new ArrayList<>();
  this.foundUnpackedApiZipFilesContainingJaxbJars=new ArrayList<>();
  this.foundUnpackedApiZipFilesNotContainingJaxbJars=new ArrayList<>();
  if (possibleLocation != null) {
    Loggers.SERVER.debug(""String_Node_Str"" + possibleLocation.getAbsolutePath());
    try {
      foundApiZipFiles.addAll(findRestApiZipFileInTomcatDir(possibleLocation,""String_Node_Str""));
      for (      Path p : foundApiZipFiles) {
        if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames)) {
          Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
          foundApiZipFilesContainingJaxbJars.add(p);
        }
 else {
          Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
          foundApiZipFilesNotContainingJaxbJars.add(p);
        }
        String restApiUnpackedDir=p.toFile().getParent() + unpackedLocation;
        Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
        if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames)) {
          Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
          foundUnpackedApiZipFilesContainingJaxbJars.add(p);
        }
 else {
          Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
          foundUnpackedApiZipFilesNotContainingJaxbJars.add(p);
        }
      }
    }
 catch (    IOException e) {
      Loggers.SERVER.warnAndDebugDetails(""String_Node_Str"",e);
    }
  }
 else {
    Loggers.SERVER.warn(""String_Node_Str"");
  }
}","public synchronized void findRestApiZipPlugins(){
  Loggers.SERVER.debug(""String_Node_Str"");
  File possibleLocation=findTeamCityBaseLocation();
  this.foundApiZipFiles=new ArrayList<>();
  if (possibleLocation != null) {
    Loggers.SERVER.debug(""String_Node_Str"" + possibleLocation.getAbsolutePath());
    try {
      foundApiZipFiles.addAll(findRestApiZipFileInTomcatDir(possibleLocation,""String_Node_Str""));
      for (      Path p : foundApiZipFiles) {
        String restApiUnpackedDir=p.toFile().getParent() + unpackedLocation;
        if (!jarReports.containsKey(p)) {
          jarReports.put(p,new JarReport(p,restApiUnpackedDir,filenames));
        }
        if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames,jarReports.get(p))) {
          Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
        }
 else {
          Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
        }
        Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
        if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames,jarReports.get(p))) {
          Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
        }
 else {
          Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
        }
      }
    }
 catch (    IOException e) {
      Loggers.SERVER.warnAndDebugDetails(""String_Node_Str"",e);
    }
  }
 else {
    Loggers.SERVER.warn(""String_Node_Str"");
  }
}",0.6545678252845278
33438,"protected boolean deleteFilesFromPluginsUnpackedDir(String pluginsDir,String[] filenames) throws IOException {
  File restPluginUnpackedDir=new File(pluginsDir + unpackedLocation);
  boolean fileDeletedFromDir=false;
  if (restPluginUnpackedDir.exists() && restPluginUnpackedDir.isDirectory()) {
    for (    String filename : filenames) {
      Path jaxbjar=new File(restPluginUnpackedDir + File.separator + filename.replace(""String_Node_Str"",File.separator)).toPath();
      if (Files.exists(jaxbjar)) {
        Files.delete(jaxbjar);
        if (Files.notExists(jaxbjar)) {
          fileDeletedFromDir=true;
        }
      }
    }
  }
  return fileDeletedFromDir;
}","protected boolean deleteFilesFromPluginsUnpackedDir(String pluginsDir,String[] filenames,JarReport jarReport) throws IOException {
  File restPluginUnpackedDir=new File(jarReport.getApiZipFileUnpackedLocation());
  boolean fileDeletedFromDir=false;
  if (restPluginUnpackedDir.exists() && restPluginUnpackedDir.isDirectory()) {
    for (    String filename : filenames) {
      Path jaxbjar=new File(restPluginUnpackedDir + File.separator + filename.replace(""String_Node_Str"",File.separator)).toPath();
      if (Files.exists(jaxbjar)) {
        try {
          Files.delete(jaxbjar);
          if (Files.notExists(jaxbjar)) {
            fileDeletedFromDir=true;
            jarReport.setJarAsRemovedFromUnpackedLocation(filename,true);
          }
        }
 catch (        IOException e) {
          jarReport.setUnpackedLocationFailureMessage(filename,e.getMessage());
          Loggers.SERVER.warnAndDebugDetails(""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
  }
  return fileDeletedFromDir;
}",0.7786350148367952
33439,"public synchronized void fixRestApiZipPlugin(Path p) throws RestApiFixFailureExeception {
  try {
    if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames)) {
      Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
      deleteFilesFromRestApiZipFile(p.toFile(),filenames);
      if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames)) {
        Loggers.SERVER.warn(""String_Node_Str"" + p.toFile().getAbsolutePath());
      }
 else {
        Loggers.SERVER.info(""String_Node_Str"" + p.toFile().getAbsolutePath());
        Loggers.SERVER.info(""String_Node_Str"");
        this.haveFilesBeenCleanedSinceBoot=true;
      }
    }
 else {
      Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
    }
    String restApiUnpackedDir=p.toFile().getParent() + unpackedLocation;
    Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
    if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames)) {
      Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
      deleteFilesFromPluginsUnpackedDir(p.toFile().getParent(),filenames);
      if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames)) {
        Loggers.SERVER.warn(""String_Node_Str"" + restApiUnpackedDir);
      }
 else {
        Loggers.SERVER.info(""String_Node_Str"" + restApiUnpackedDir);
        Loggers.SERVER.info(""String_Node_Str"");
        this.haveFilesBeenCleanedSinceBoot=true;
      }
    }
 else {
      Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
    }
  }
 catch (  IOException e) {
    Loggers.SERVER.warnAndDebugDetails(""String_Node_Str"",e);
    throw new RestApiFixFailureExeception(e);
  }
}","public synchronized JarReport fixRestApiZipPlugin(Path p){
  try {
    if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames,jarReports.get(p))) {
      Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
      deleteFilesFromRestApiZipFile(p.toFile(),filenames,jarReports.get(p));
      if (doesRestApiZipFileContainJaxJars(p.toFile(),filenames,jarReports.get(p))) {
        Loggers.SERVER.warn(""String_Node_Str"" + p.toFile().getAbsolutePath());
      }
 else {
        Loggers.SERVER.info(""String_Node_Str"" + p.toFile().getAbsolutePath());
        Loggers.SERVER.info(""String_Node_Str"");
        this.haveFilesBeenCleanedSinceBoot=true;
      }
    }
 else {
      Loggers.SERVER.debug(""String_Node_Str"" + p.toFile().getAbsolutePath());
    }
    String restApiUnpackedDir=p.toFile().getParent() + unpackedLocation;
    Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
    if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames,jarReports.get(p))) {
      Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
      deleteFilesFromPluginsUnpackedDir(p.toFile().getParent(),filenames,jarReports.get(p));
      if (doFilesExistInPluginsUnpackedDir(p.toFile().getParent(),filenames,jarReports.get(p))) {
        Loggers.SERVER.warn(""String_Node_Str"" + restApiUnpackedDir);
      }
 else {
        Loggers.SERVER.info(""String_Node_Str"" + restApiUnpackedDir);
        Loggers.SERVER.info(""String_Node_Str"");
        this.haveFilesBeenCleanedSinceBoot=true;
      }
    }
 else {
      Loggers.SERVER.debug(""String_Node_Str"" + restApiUnpackedDir);
    }
  }
 catch (  IOException e) {
    Loggers.SERVER.warnAndDebugDetails(""String_Node_Str"",e);
  }
  return jarReports.get(p);
}",0.932864262679566
33440,"public static ProjectWebHooksBean build(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookPayloadTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.externalProjectId=TeamCityIdResolver.getExternalProjectId(project);
  bean.webHookProjectSettings=projSettings;
  bean.webHookList=new LinkedHashMap<>();
  WebHookConfig newBlankConfig=new WebHookConfig(""String_Node_Str"",true,new BuildState().setAllEnabled(),null,null,false,false,enabledBuildTypes,null);
  newBlankConfig.setUniqueKey(""String_Node_Str"");
  addWebHookConfigHolder(bean,projectBuildTypes,newBlankConfig,registeredPayloads,templateList);
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}","public static ProjectWebHooksBean build(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookPayloadTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean(projSettings,project);
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  WebHookConfig newBlankConfig=new WebHookConfig(""String_Node_Str"",true,new BuildState().setAllEnabled(),null,null,false,false,enabledBuildTypes,null);
  newBlankConfig.setUniqueKey(""String_Node_Str"");
  addWebHookConfigHolder(bean,projectBuildTypes,newBlankConfig,registeredPayloads,templateList);
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}",0.8832391713747646
33441,"public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookPayloadTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.externalProjectId=TeamCityIdResolver.getExternalProjectId(project);
  bean.webHookProjectSettings=projSettings;
  bean.webHookList=new LinkedHashMap<>();
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}","public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookPayloadTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean(projSettings,project);
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}",0.6054333764553687
33442,"/** 
 * WebHooksConfig constructor. Unchecked version. Use with caution!! This constructor does not check if the payloadFormat is valid. It will still allow you to add the format, but the webhook might not fire at runtime if the payloadFormat configured is not available.
 * @param url
 * @param enabled
 * @param stateMask
 * @param payloadFormat (unvalidated)
 * @param webHookAuthConfig 
 */
public WebHookConfig(String url,Boolean enabled,BuildState states,String payloadFormat,String payloadTemplate,boolean buildTypeAllEnabled,boolean buildTypeSubProjects,Set<String> enabledBuildTypes,WebHookAuthConfig webHookAuthConfig){
  int Min=1000000, Max=1000000000;
  Integer Rand=Min + (int)(Math.random() * ((Max - Min) + 1));
  this.uniqueKey=""String_Node_Str"" + Rand.toString();
  this.extraParameters=new TreeMap<>();
  this.templates=new TreeMap<>();
  this.setUrl(url);
  this.setEnabled(enabled);
  this.setBuildStates(states);
  this.setPayloadFormat(payloadFormat);
  this.setPayloadTemplate(payloadTemplate);
  this.subProjectsEnabled=buildTypeSubProjects;
  this.allBuildTypesEnabled=buildTypeAllEnabled;
  if (!this.allBuildTypesEnabled) {
    this.enabledBuildTypesSet=enabledBuildTypes;
  }
  if (webHookAuthConfig != null) {
    this.authType=webHookAuthConfig.type;
    this.authPreemptive=webHookAuthConfig.preemptive;
    this.authEnabled=true;
    this.authParameters.putAll(webHookAuthConfig.parameters);
  }
}","/** 
 * WebHooksConfig constructor. Unchecked version. Use with caution!! This constructor does not check if the payloadFormat is valid. It will still allow you to add the format, but the webhook might not fire at runtime if the payloadFormat configured is not available.
 * @param url
 * @param enabled
 * @param stateMask
 * @param payloadFormat (unvalidated)
 * @param webHookAuthConfig 
 */
public WebHookConfig(String url,Boolean enabled,BuildState states,String payloadFormat,String payloadTemplate,boolean buildTypeAllEnabled,boolean buildTypeSubProjects,Set<String> enabledBuildTypes,WebHookAuthConfig webHookAuthConfig){
  int Min=1000000, Max=1000000000;
  Integer Rand=Min + (int)(Math.random() * ((Max - Min) + 1));
  this.uniqueKey=""String_Node_Str"" + Rand.toString();
  this.extraParameters=new TreeMap<>();
  this.templates=new TreeMap<>();
  this.filters=new ArrayList<>();
  this.setUrl(url);
  this.setEnabled(enabled);
  this.setBuildStates(states);
  this.setPayloadFormat(payloadFormat);
  this.setPayloadTemplate(payloadTemplate);
  this.subProjectsEnabled=buildTypeSubProjects;
  this.allBuildTypesEnabled=buildTypeAllEnabled;
  if (!this.allBuildTypesEnabled) {
    this.enabledBuildTypesSet=enabledBuildTypes;
  }
  if (webHookAuthConfig != null) {
    this.authType=webHookAuthConfig.type;
    this.authPreemptive=webHookAuthConfig.preemptive;
    this.authEnabled=true;
    this.authParameters.putAll(webHookAuthConfig.parameters);
  }
}",0.9882515549412578
33443,"public Element getAsElement(){
  Element el=new Element(""String_Node_Str"");
  el.setAttribute(""String_Node_Str"",this.getUrl());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.enabled));
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadFormat).toLowerCase());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadTemplate));
  Element statesEl=new Element(""String_Node_Str"");
  for (  BuildStateEnum state : states.getStateSet()) {
    Element e=new Element(""String_Node_Str"");
    e.setAttribute(""String_Node_Str"",state.getShortName());
    e.setAttribute(""String_Node_Str"",Boolean.toString(states.enabled(state)));
    statesEl.addContent(e);
  }
  el.addContent(statesEl);
  Element buildsEl=new Element(""String_Node_Str"");
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForAllBuildsInProject()));
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForSubProjects()));
  if (this.enabledBuildTypesSet.size() > 0) {
    for (    String i : enabledBuildTypesSet) {
      Element e=new Element(""String_Node_Str"");
      e.setAttribute(""String_Node_Str"",i);
      buildsEl.addContent(e);
    }
  }
  el.addContent(buildsEl);
  if (this.filters.size() > 0) {
    Element filtersEl=new Element(""String_Node_Str"");
    for (    WebHookFilterConfig f : this.filters) {
      filtersEl.addContent(f.getAsElement());
    }
    el.addContent(filtersEl);
  }
  if (this.extraParameters.size() > 0) {
    Element paramsEl=new Element(""String_Node_Str"");
    for (    String i : this.extraParameters.keySet()) {
      paramsEl.addContent(this.getKeyAndValueAsElement(this.extraParameters,i,""String_Node_Str""));
    }
    el.addContent(paramsEl);
  }
  if (this.templates.size() > 0) {
    Element templatesEl=new Element(""String_Node_Str"");
    for (    CustomMessageTemplate t : this.templates.values()) {
      templatesEl.addContent(t.getAsElement());
    }
    el.addContent(templatesEl);
  }
  if (this.authType != ""String_Node_Str"") {
    Element authEl=new Element(""String_Node_Str"");
    authEl.setAttribute(""String_Node_Str"",this.authEnabled.toString());
    authEl.setAttribute(""String_Node_Str"",this.authType);
    authEl.setAttribute(""String_Node_Str"",this.authPreemptive.toString());
    if (this.authParameters.size() > 0) {
      Element paramsEl=new Element(""String_Node_Str"");
      for (      String i : this.authParameters.keySet()) {
        paramsEl.addContent(this.getKeyAndValueAsElement(this.authParameters,i,""String_Node_Str""));
      }
      authEl.addContent(paramsEl);
    }
    el.addContent(authEl);
  }
  return el;
}","public Element getAsElement(){
  Element el=new Element(""String_Node_Str"");
  el.setAttribute(""String_Node_Str"",this.getUrl());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.enabled));
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadFormat).toLowerCase());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadTemplate));
  Element statesEl=new Element(""String_Node_Str"");
  for (  BuildStateEnum state : states.getStateSet()) {
    Element e=new Element(""String_Node_Str"");
    e.setAttribute(""String_Node_Str"",state.getShortName());
    e.setAttribute(""String_Node_Str"",Boolean.toString(states.enabled(state)));
    statesEl.addContent(e);
  }
  el.addContent(statesEl);
  Element buildsEl=new Element(""String_Node_Str"");
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForAllBuildsInProject()));
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForSubProjects()));
  if (this.enabledBuildTypesSet.size() > 0) {
    for (    String i : enabledBuildTypesSet) {
      Element e=new Element(""String_Node_Str"");
      e.setAttribute(""String_Node_Str"",i);
      buildsEl.addContent(e);
    }
  }
  el.addContent(buildsEl);
  if (this.filters != null && this.filters.size() > 0) {
    Element filtersEl=new Element(""String_Node_Str"");
    for (    WebHookFilterConfig f : this.filters) {
      filtersEl.addContent(f.getAsElement());
    }
    el.addContent(filtersEl);
  }
  if (this.extraParameters.size() > 0) {
    Element paramsEl=new Element(""String_Node_Str"");
    for (    String i : this.extraParameters.keySet()) {
      paramsEl.addContent(this.getKeyAndValueAsElement(this.extraParameters,i,""String_Node_Str""));
    }
    el.addContent(paramsEl);
  }
  if (this.templates.size() > 0) {
    Element templatesEl=new Element(""String_Node_Str"");
    for (    CustomMessageTemplate t : this.templates.values()) {
      templatesEl.addContent(t.getAsElement());
    }
    el.addContent(templatesEl);
  }
  if (this.authType != ""String_Node_Str"") {
    Element authEl=new Element(""String_Node_Str"");
    authEl.setAttribute(""String_Node_Str"",this.authEnabled.toString());
    authEl.setAttribute(""String_Node_Str"",this.authType);
    authEl.setAttribute(""String_Node_Str"",this.authPreemptive.toString());
    if (this.authParameters.size() > 0) {
      Element paramsEl=new Element(""String_Node_Str"");
      for (      String i : this.authParameters.keySet()) {
        paramsEl.addContent(this.getKeyAndValueAsElement(this.authParameters,i,""String_Node_Str""));
      }
      authEl.addContent(paramsEl);
    }
    el.addContent(authEl);
  }
  return el;
}",0.995418098510882
33444,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  params.put(""String_Node_Str"",Boolean.toString(this.myServer.getServerMajorVersion() < 7));
  params.put(""String_Node_Str"",myServer.getServerRootPath());
  params.put(""String_Node_Str"",myPluginDescriptor.getPluginVersion());
  if (myMainSettings.getInfoUrl() != null && myMainSettings.getInfoUrl().length() > 0) {
    params.put(""String_Node_Str"",""String_Node_Str"" + myMainSettings.getInfoUrl() + ""String_Node_Str""+ myMainSettings.getInfoText()+ ""String_Node_Str"");
    if (myMainSettings.getWebhookShowFurtherReading()) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (myMainSettings.getWebhookShowFurtherReading()) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
      SUser myUser=SessionUser.getUser(request);
      params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
      String message=projSettings.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",project.getBuildTypes());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
      Loggers.SERVER.debug(myMainSettings.getInfoText() + myMainSettings.getInfoUrl() + myMainSettings.getProxyListasString());
      params.put(""String_Node_Str"",projSettings.getWebHooksCount());
      params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
      if (projSettings.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBean.buildWithoutNew(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)));
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        SUser myUser=SessionUser.getUser(request);
        params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
        List<WebHookConfig> configs=projSettings.getBuildWebHooksAsList(sBuildType);
        params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
        params.put(""String_Node_Str"",configs);
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",project.getProjectId());
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",sBuildType.getName());
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalBuildId(sBuildType));
        params.put(""String_Node_Str"",project.getBuildTypes());
        params.put(""String_Node_Str"",configs.size() == 0);
        params.put(""String_Node_Str"",configs.size() != 0);
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getBuildHistory(sBuildType),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  params.put(""String_Node_Str"",Boolean.toString(this.myServer.getServerMajorVersion() < 7));
  params.put(""String_Node_Str"",myServer.getServerRootPath());
  params.put(""String_Node_Str"",myPluginDescriptor.getPluginVersion());
  if (myMainSettings.getInfoUrl() != null && myMainSettings.getInfoUrl().length() > 0) {
    params.put(""String_Node_Str"",""String_Node_Str"" + myMainSettings.getInfoUrl() + ""String_Node_Str""+ myMainSettings.getInfoText()+ ""String_Node_Str"");
    if (myMainSettings.getWebhookShowFurtherReading()) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (myMainSettings.getWebhookShowFurtherReading()) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
      SUser myUser=SessionUser.getUser(request);
      params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
      String message=projSettings.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",project.getBuildTypes());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
      Loggers.SERVER.debug(myMainSettings.getInfoText() + myMainSettings.getInfoUrl() + myMainSettings.getProxyListasString());
      params.put(""String_Node_Str"",projSettings.getWebHooksCount());
      params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
      if (projSettings.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBean.buildWithoutNew(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)));
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        SUser myUser=SessionUser.getUser(request);
        params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
        ProjectWebHooksBean bean=ProjectWebHooksBean.buildWithoutNew(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project));
        params.put(""String_Node_Str"",bean);
        params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",project.getProjectId());
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",sBuildType.getName());
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalBuildId(sBuildType));
        params.put(""String_Node_Str"",project.getBuildTypes());
        params.put(""String_Node_Str"",bean.getWebHookList().size() == 0);
        params.put(""String_Node_Str"",bean.getWebHookList().size() != 0);
        params.put(""String_Node_Str"",ProjectWebHooksBeanGsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getBuildHistory(sBuildType),RegisteredWebhookAuthenticationTypesBean.build(myAuthenticatorProvider))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9619421635130312
33445,"public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.webHookList=new LinkedHashMap<String,WebhookConfigAndBuildTypeListHolder>();
  for (  WebHookConfig config : projSettings.getWebHooksAsList()) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}","public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<String>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.webHookList=new LinkedHashMap<String,WebhookConfigAndBuildTypeListHolder>();
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}",0.8994490358126722
33446,"/** 
 * WebHooksConfig constructor. Unchecked version. Use with caution!! This constructor does not check if the payloadFormat is valid. It will still allow you to add the format, but the webhook might not fire at runtime if the payloadFormat configured is not available.
 * @param url
 * @param enabled
 * @param stateMask
 * @param payloadFormat (unvalidated)
 */
public WebHookConfig(String url,Boolean enabled,BuildState states,String payloadFormat,String payloadTemplate,boolean buildTypeAllEnabled,boolean buildTypeSubProjects,Set<String> enabledBuildTypes){
  int Min=1000000, Max=1000000000;
  Integer Rand=Min + (int)(Math.random() * ((Max - Min) + 1));
  this.uniqueKey=Rand.toString();
  this.extraParameters=new TreeMap<>();
  this.templates=new TreeMap<>();
  this.setUrl(url);
  this.setEnabled(enabled);
  this.setBuildStates(states);
  this.setPayloadFormat(payloadFormat);
  this.setPayloadTemplate(payloadTemplate);
  this.subProjectsEnabled=buildTypeSubProjects;
  this.allBuildTypesEnabled=buildTypeAllEnabled;
  if (!this.allBuildTypesEnabled) {
    this.enabledBuildTypesSet=enabledBuildTypes;
  }
}","/** 
 * WebHooksConfig constructor. Unchecked version. Use with caution!! This constructor does not check if the payloadFormat is valid. It will still allow you to add the format, but the webhook might not fire at runtime if the payloadFormat configured is not available.
 * @param url
 * @param enabled
 * @param stateMask
 * @param payloadFormat (unvalidated)
 */
public WebHookConfig(String url,Boolean enabled,BuildState states,String payloadFormat,String payloadTemplate,boolean buildTypeAllEnabled,boolean buildTypeSubProjects,Set<String> enabledBuildTypes){
  int Min=1000000, Max=1000000000;
  Integer Rand=Min + (int)(Math.random() * ((Max - Min) + 1));
  this.uniqueKey=Rand.toString();
  this.extraParameters=new TreeMap<>();
  this.templates=new TreeMap<>();
  this.filters=new ArrayList<>();
  this.setUrl(url);
  this.setEnabled(enabled);
  this.setBuildStates(states);
  this.setPayloadFormat(payloadFormat);
  this.setPayloadTemplate(payloadTemplate);
  this.subProjectsEnabled=buildTypeSubProjects;
  this.allBuildTypesEnabled=buildTypeAllEnabled;
  if (!this.allBuildTypesEnabled) {
    this.enabledBuildTypesSet=enabledBuildTypes;
  }
}",0.98506151142355
33447,"public Element getAsElement(){
  Element el=new Element(""String_Node_Str"");
  el.setAttribute(""String_Node_Str"",this.getUrl());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.enabled));
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadFormat).toLowerCase());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadTemplate));
  Element statesEl=new Element(""String_Node_Str"");
  for (  BuildStateEnum state : states.getStateSet()) {
    Element e=new Element(""String_Node_Str"");
    e.setAttribute(""String_Node_Str"",state.getShortName());
    e.setAttribute(""String_Node_Str"",Boolean.toString(states.enabled(state)));
    statesEl.addContent(e);
  }
  el.addContent(statesEl);
  Element buildsEl=new Element(""String_Node_Str"");
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForAllBuildsInProject()));
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForSubProjects()));
  if (this.enabledBuildTypesSet.size() > 0) {
    for (    String i : enabledBuildTypesSet) {
      Element e=new Element(""String_Node_Str"");
      e.setAttribute(""String_Node_Str"",i);
      buildsEl.addContent(e);
    }
  }
  el.addContent(buildsEl);
  if (this.filters.size() > 0) {
    Element filtersEl=new Element(""String_Node_Str"");
    for (    WebHookFilterConfig f : this.filters) {
      filtersEl.addContent(f.getAsElement());
    }
    el.addContent(filtersEl);
  }
  if (this.extraParameters.size() > 0) {
    Element paramsEl=new Element(""String_Node_Str"");
    for (    String i : this.extraParameters.keySet()) {
      paramsEl.addContent(this.getKeyAndValueAsElement(this.extraParameters,i,""String_Node_Str""));
    }
    el.addContent(paramsEl);
  }
  if (this.templates.size() > 0) {
    Element templatesEl=new Element(""String_Node_Str"");
    for (    CustomMessageTemplate t : this.templates.values()) {
      templatesEl.addContent(t.getAsElement());
    }
    el.addContent(templatesEl);
  }
  if (this.authType != ""String_Node_Str"") {
    Element authEl=new Element(""String_Node_Str"");
    authEl.setAttribute(""String_Node_Str"",this.authEnabled.toString());
    authEl.setAttribute(""String_Node_Str"",this.authType);
    authEl.setAttribute(""String_Node_Str"",this.authPreemptive.toString());
    if (this.authParameters.size() > 0) {
      Element paramsEl=new Element(""String_Node_Str"");
      for (      String i : this.authParameters.keySet()) {
        paramsEl.addContent(this.getKeyAndValueAsElement(this.authParameters,i,""String_Node_Str""));
      }
      authEl.addContent(paramsEl);
    }
    el.addContent(authEl);
  }
  return el;
}","public Element getAsElement(){
  Element el=new Element(""String_Node_Str"");
  el.setAttribute(""String_Node_Str"",this.getUrl());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.enabled));
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadFormat).toLowerCase());
  el.setAttribute(""String_Node_Str"",String.valueOf(this.payloadTemplate));
  Element statesEl=new Element(""String_Node_Str"");
  for (  BuildStateEnum state : states.getStateSet()) {
    Element e=new Element(""String_Node_Str"");
    e.setAttribute(""String_Node_Str"",state.getShortName());
    e.setAttribute(""String_Node_Str"",Boolean.toString(states.enabled(state)));
    statesEl.addContent(e);
  }
  el.addContent(statesEl);
  Element buildsEl=new Element(""String_Node_Str"");
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForAllBuildsInProject()));
  buildsEl.setAttribute(""String_Node_Str"",Boolean.toString(isEnabledForSubProjects()));
  if (this.enabledBuildTypesSet.size() > 0) {
    for (    String i : enabledBuildTypesSet) {
      Element e=new Element(""String_Node_Str"");
      e.setAttribute(""String_Node_Str"",i);
      buildsEl.addContent(e);
    }
  }
  el.addContent(buildsEl);
  if (this.filters != null && this.filters.size() > 0) {
    Element filtersEl=new Element(""String_Node_Str"");
    for (    WebHookFilterConfig f : this.filters) {
      filtersEl.addContent(f.getAsElement());
    }
    el.addContent(filtersEl);
  }
  if (this.extraParameters.size() > 0) {
    Element paramsEl=new Element(""String_Node_Str"");
    for (    String i : this.extraParameters.keySet()) {
      paramsEl.addContent(this.getKeyAndValueAsElement(this.extraParameters,i,""String_Node_Str""));
    }
    el.addContent(paramsEl);
  }
  if (this.templates.size() > 0) {
    Element templatesEl=new Element(""String_Node_Str"");
    for (    CustomMessageTemplate t : this.templates.values()) {
      templatesEl.addContent(t.getAsElement());
    }
    el.addContent(templatesEl);
  }
  if (this.authType != ""String_Node_Str"") {
    Element authEl=new Element(""String_Node_Str"");
    authEl.setAttribute(""String_Node_Str"",this.authEnabled.toString());
    authEl.setAttribute(""String_Node_Str"",this.authType);
    authEl.setAttribute(""String_Node_Str"",this.authPreemptive.toString());
    if (this.authParameters.size() > 0) {
      Element paramsEl=new Element(""String_Node_Str"");
      for (      String i : this.authParameters.keySet()) {
        paramsEl.addContent(this.getKeyAndValueAsElement(this.authParameters,i,""String_Node_Str""));
      }
      authEl.addContent(paramsEl);
    }
    el.addContent(authEl);
  }
  return el;
}",0.995418098510882
33448,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  params.put(""String_Node_Str"",Boolean.toString(this.myServer.getServerMajorVersion() < 7));
  params.put(""String_Node_Str"",myServer.getServerRootPath());
  params.put(""String_Node_Str"",myPluginDescriptor.getPluginVersion());
  if (myMainSettings.getInfoUrl() != null && myMainSettings.getInfoUrl().length() > 0) {
    params.put(""String_Node_Str"",""String_Node_Str"" + myMainSettings.getInfoUrl() + ""String_Node_Str""+ myMainSettings.getInfoText()+ ""String_Node_Str"");
    if (myMainSettings.getWebhookShowFurtherReading()) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (myMainSettings.getWebhookShowFurtherReading()) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
      SUser myUser=SessionUser.getUser(request);
      params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
      String message=projSettings.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",project.getBuildTypes());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
      logger.debug(myMainSettings.getInfoText() + myMainSettings.getInfoUrl() + myMainSettings.getProxyListasString());
      params.put(""String_Node_Str"",projSettings.getWebHooksCount());
      params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
      if (projSettings.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project))));
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBean.buildWithoutNew(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)));
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        SUser myUser=SessionUser.getUser(request);
        params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
        List<WebHookConfig> configs=projSettings.getBuildWebHooksAsList(sBuildType);
        params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
        params.put(""String_Node_Str"",configs);
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",project.getProjectId());
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",sBuildType.getName());
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalBuildId(sBuildType));
        params.put(""String_Node_Str"",project.getBuildTypes());
        params.put(""String_Node_Str"",configs.size() == 0);
        params.put(""String_Node_Str"",configs.size() != 0);
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getBuildHistory(sBuildType))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  params.put(""String_Node_Str"",Boolean.toString(this.myServer.getServerMajorVersion() < 7));
  params.put(""String_Node_Str"",myServer.getServerRootPath());
  params.put(""String_Node_Str"",myPluginDescriptor.getPluginVersion());
  if (myMainSettings.getInfoUrl() != null && myMainSettings.getInfoUrl().length() > 0) {
    params.put(""String_Node_Str"",""String_Node_Str"" + myMainSettings.getInfoUrl() + ""String_Node_Str""+ myMainSettings.getInfoText()+ ""String_Node_Str"");
    if (myMainSettings.getWebhookShowFurtherReading()) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (myMainSettings.getWebhookShowFurtherReading()) {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
      SUser myUser=SessionUser.getUser(request);
      params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
      String message=projSettings.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",project.getBuildTypes());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
      logger.debug(myMainSettings.getInfoText() + myMainSettings.getInfoUrl() + myMainSettings.getProxyListasString());
      params.put(""String_Node_Str"",projSettings.getWebHooksCount());
      params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
      if (projSettings.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project))));
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBean.buildWithoutNew(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)));
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getProjectHistory(project))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        SUser myUser=SessionUser.getUser(request);
        params.put(""String_Node_Str"",myUser.isPermissionGrantedForProject(project.getProjectId(),Permission.EDIT_PROJECT));
        ProjectWebHooksBean bean=ProjectWebHooksBean.buildWithoutNew(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project));
        params.put(""String_Node_Str"",bean);
        params.put(""String_Node_Str"",RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()).getTemplateList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",project.getProjectId());
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",getProjectName(TeamCityIdResolver.getExternalProjectId(project),project.getName()));
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",sBuildType.getName());
        params.put(""String_Node_Str"",TeamCityIdResolver.getExternalBuildId(sBuildType));
        params.put(""String_Node_Str"",project.getBuildTypes());
        params.put(""String_Node_Str"",bean.getWebHookList().size() == 0);
        params.put(""String_Node_Str"",bean.getWebHookList().size() != 0);
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(TemplatesAndProjectWebHooksBean.build(RegisteredWebHookTemplateBean.build(myTemplateResolver.findWebHookTemplatesForProject(project),myManager.getRegisteredFormats()),ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection(),myTemplateResolver.findWebHookTemplatesForProject(project)),ProjectHistoryResolver.getBuildHistory(sBuildType))));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9606845172235744
33449,"public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.webHookList=new LinkedHashMap<String,WebhookConfigAndBuildTypeListHolder>();
  for (  WebHookConfig config : projSettings.getWebHooksAsList()) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}","public static ProjectWebHooksBean buildWithoutNew(WebHookProjectSettings projSettings,SBuildType sBuildType,SProject project,Collection<WebHookPayload> registeredPayloads,List<WebHookTemplate> templateList){
  ProjectWebHooksBean bean=new ProjectWebHooksBean();
  List<SBuildType> projectBuildTypes=TeamCityIdResolver.getOwnBuildTypes(project);
  Set<String> enabledBuildTypes=new HashSet<String>();
  enabledBuildTypes.add(sBuildType.getBuildTypeId());
  bean.projectId=TeamCityIdResolver.getInternalProjectId(project);
  bean.webHookList=new LinkedHashMap<String,WebhookConfigAndBuildTypeListHolder>();
  for (  WebHookConfig config : projSettings.getBuildWebHooksAsList(sBuildType)) {
    addWebHookConfigHolder(bean,projectBuildTypes,config,registeredPayloads,templateList);
  }
  return bean;
}",0.8994490358126722
33450,"@Override public boolean supportsPayloadFormat(String payloadFormat){
  return supportedFormats.contains(payloadFormat);
}","@Override public boolean supportsPayloadFormat(String payloadFormat){
  for (  String format : supportedFormats) {
    if (payloadFormat.equalsIgnoreCase(format)) {
      return true;
    }
  }
  return false;
}",0.4564564564564564
33451,"private void rebuildOrderedListOfTemplates(){
  this.orderedTemplateCollection.clear();
  for (  WebHookTemplate payloadTemplate : springTemplates.values()) {
    this.orderedTemplateCollection.add(payloadTemplate);
  }
  for (  WebHookTemplate payloadTemplate : xmlConfigTemplates.values()) {
    this.orderedTemplateCollection.add(payloadTemplate);
  }
  Collections.sort(this.orderedTemplateCollection,rankComparator);
}","private void rebuildOrderedListOfTemplates(){
  this.orderedTemplateCollection.clear();
  HashMap<String,WebHookTemplate> combinedTemplates=new HashMap<String,WebHookTemplate>();
  for (  WebHookTemplate payloadTemplate : springTemplates.values()) {
    combinedTemplates.put(payloadTemplate.getTemplateShortName(),payloadTemplate);
  }
  for (  WebHookTemplate payloadTemplate : xmlConfigTemplates.values()) {
    combinedTemplates.put(payloadTemplate.getTemplateShortName(),payloadTemplate);
  }
  this.orderedTemplateCollection.addAll(combinedTemplates.values());
  Collections.sort(this.orderedTemplateCollection,rankComparator);
}",0.5330812854442344
33452,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null) && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
      projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
        if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
          projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
          if (projSettings.updateSuccessful()) {
            myProject.persist();
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
 else         if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
            if (request.getParameter(""String_Node_Str"") != null) {
              Boolean enabled=false;
              Boolean buildTypeAll=false;
              Boolean buildTypeSubProjects=false;
              Set<String> buildTypes=new HashSet<String>();
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                enabled=true;
              }
              BuildState states=new BuildState();
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
              checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeSubProjects=true;
              }
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeAll=true;
              }
 else {
                if (request.getParameterValues(""String_Node_Str"") != null) {
                  String[] types=request.getParameterValues(""String_Node_Str"");
                  for (                  String string : types) {
                    buildTypes.add(string);
                  }
                }
              }
              if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
 else {
                projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
            }
          }
 else {
            if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else             if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    String message=projSettings1.getWebHooksAsString();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",message);
    params.put(""String_Node_Str"",project.getProjectId());
    params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
    params.put(""String_Node_Str"",project.getName());
    params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
    if (projSettings1.getWebHooksCount() == 0) {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
      params.put(""String_Node_Str"",!projSettings.isEnabled());
      params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null)) {
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if (myProject == null) {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
        if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
            projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
            if (projSettings.updateSuccessful()) {
              myProject.persist();
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
            if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
              if (request.getParameter(""String_Node_Str"") != null) {
                Boolean enabled=false;
                Boolean buildTypeAll=false;
                Boolean buildTypeSubProjects=false;
                Set<String> buildTypes=new HashSet<String>();
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  enabled=true;
                }
                BuildState states=new BuildState();
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
                checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeSubProjects=true;
                }
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeAll=true;
                }
 else {
                  if (request.getParameterValues(""String_Node_Str"") != null) {
                    String[] types=request.getParameterValues(""String_Node_Str"");
                    for (                    String string : types) {
                      buildTypes.add(string);
                    }
                  }
                }
                if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                  projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
 else {
                  projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
 else               if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
            }
          }
        }
 else {
          params.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      String message=projSettings1.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",project.getName());
      params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
      if (projSettings1.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}",0.9177393008820648
33453,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    if (project == null) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9460680927990358
33454,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null) && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
      projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
        if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
          projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
          if (projSettings.updateSuccessful()) {
            myProject.persist();
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
 else         if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
            if (request.getParameter(""String_Node_Str"") != null) {
              Boolean enabled=false;
              Boolean buildTypeAll=false;
              Boolean buildTypeSubProjects=false;
              Set<String> buildTypes=new HashSet<String>();
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                enabled=true;
              }
              BuildState states=new BuildState();
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
              checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeSubProjects=true;
              }
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeAll=true;
              }
 else {
                if (request.getParameterValues(""String_Node_Str"") != null) {
                  String[] types=request.getParameterValues(""String_Node_Str"");
                  for (                  String string : types) {
                    buildTypes.add(string);
                  }
                }
              }
              if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
 else {
                projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
            }
          }
 else {
            if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else             if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    String message=projSettings1.getWebHooksAsString();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",message);
    params.put(""String_Node_Str"",project.getProjectId());
    params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
    params.put(""String_Node_Str"",project.getName());
    params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
    if (projSettings1.getWebHooksCount() == 0) {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
      params.put(""String_Node_Str"",!projSettings.isEnabled());
      params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null)) {
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if (myProject == null) {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
        if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
            projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
            if (projSettings.updateSuccessful()) {
              myProject.persist();
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
            if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
              if (request.getParameter(""String_Node_Str"") != null) {
                Boolean enabled=false;
                Boolean buildTypeAll=false;
                Boolean buildTypeSubProjects=false;
                Set<String> buildTypes=new HashSet<String>();
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  enabled=true;
                }
                BuildState states=new BuildState();
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
                checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeSubProjects=true;
                }
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeAll=true;
                }
 else {
                  if (request.getParameterValues(""String_Node_Str"") != null) {
                    String[] types=request.getParameterValues(""String_Node_Str"");
                    for (                    String string : types) {
                      buildTypes.add(string);
                    }
                  }
                }
                if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                  projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
 else {
                  projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
 else               if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
            }
          }
        }
 else {
          params.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      String message=projSettings1.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",project.getName());
      params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
      if (projSettings1.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}",0.9177393008820648
33455,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    if (project == null) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9460680927990358
33456,"public void setBranch(Branch branch){
  this.branch=branch;
}","public void setBranch(Branch branch){
  this.branch=new WebHooksBranchImpl(branch);
}",0.8356164383561644
33457,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null) && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
      projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
        if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
          projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
          if (projSettings.updateSuccessful()) {
            myProject.persist();
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
 else         if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
            if (request.getParameter(""String_Node_Str"") != null) {
              Boolean enabled=false;
              Boolean buildTypeAll=false;
              Boolean buildTypeSubProjects=false;
              Set<String> buildTypes=new HashSet<String>();
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                enabled=true;
              }
              BuildState states=new BuildState();
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
              checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeSubProjects=true;
              }
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeAll=true;
              }
 else {
                if (request.getParameterValues(""String_Node_Str"") != null) {
                  String[] types=request.getParameterValues(""String_Node_Str"");
                  for (                  String string : types) {
                    buildTypes.add(string);
                  }
                }
              }
              if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
 else {
                projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
            }
          }
 else {
            if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else             if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    String message=projSettings1.getWebHooksAsString();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",message);
    params.put(""String_Node_Str"",project.getProjectId());
    params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
    params.put(""String_Node_Str"",project.getName());
    params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
    if (projSettings1.getWebHooksCount() == 0) {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
      params.put(""String_Node_Str"",!projSettings.isEnabled());
      params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null)) {
      myProject=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
      if (myProject == null) {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
        if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
            projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
            if (projSettings.updateSuccessful()) {
              myProject.persist();
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
            if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
              if (request.getParameter(""String_Node_Str"") != null) {
                Boolean enabled=false;
                Boolean buildTypeAll=false;
                Boolean buildTypeSubProjects=false;
                Set<String> buildTypes=new HashSet<String>();
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  enabled=true;
                }
                BuildState states=new BuildState();
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
                checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeSubProjects=true;
                }
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeAll=true;
                }
 else {
                  if (request.getParameterValues(""String_Node_Str"") != null) {
                    String[] types=request.getParameterValues(""String_Node_Str"");
                    for (                    String string : types) {
                      buildTypes.add(string);
                    }
                  }
                }
                if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                  projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
 else {
                  projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
 else               if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
            }
          }
        }
 else {
          params.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      String message=projSettings1.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",project.getName());
      params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
      if (projSettings1.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}",0.9128164969981728
33458,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project == null) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9077291791491912
33459,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null)) {
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if (myProject == null) {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
        if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
            projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
            if (projSettings.updateSuccessful()) {
              myProject.persist();
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
 else           if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
            if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
              if (request.getParameter(""String_Node_Str"") != null) {
                Boolean enabled=false;
                Boolean buildTypeAll=false;
                Boolean buildTypeSubProjects=false;
                Set<String> buildTypes=new HashSet<String>();
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  enabled=true;
                }
                BuildState states=new BuildState();
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
                checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
                checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
                checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeSubProjects=true;
                }
                if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                  buildTypeAll=true;
                }
 else {
                  if (request.getParameterValues(""String_Node_Str"") != null) {
                    String[] types=request.getParameterValues(""String_Node_Str"");
                    for (                    String string : types) {
                      buildTypes.add(string);
                    }
                  }
                }
                if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                  projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
 else {
                  projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                  if (projSettings.updateSuccessful()) {
                    myProject.persist();
                    params.put(""String_Node_Str"",""String_Node_Str"");
                  }
 else {
                    params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                  }
                }
              }
            }
 else {
              if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
 else               if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
                params.put(""String_Node_Str"",""String_Node_Str"");
              }
            }
          }
        }
 else {
          params.put(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null) {
    SProject project=TeamCityIdResolver.findProjectById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (project != null) {
      WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      String message=projSettings1.getWebHooksAsString();
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",message);
      params.put(""String_Node_Str"",project.getProjectId());
      params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
      params.put(""String_Node_Str"",project.getName());
      params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
      if (projSettings1.getWebHooksCount() == 0) {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",""String_Node_Str"");
        params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
        params.put(""String_Node_Str"",!projSettings.isEnabled());
        params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  SUser myUser=SessionUser.getUser(request);
  SProject myProject=null;
  WebHookProjectSettings projSettings=null;
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    if ((request.getParameter(""String_Node_Str"") != null) && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
      projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      myProject=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
      if ((projSettings != null) && (myProject != null) && (myUser.isPermissionGrantedForProject(myProject.getProjectId(),Permission.EDIT_PROJECT))) {
        if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) && (request.getParameter(""String_Node_Str"") != null)) {
          projSettings.deleteWebHook(request.getParameter(""String_Node_Str""),myProject.getProjectId());
          if (projSettings.updateSuccessful()) {
            myProject.persist();
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
 else {
            params.put(""String_Node_Str"",""String_Node_Str"");
          }
        }
 else         if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equals(""String_Node_Str""))) {
          if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").length() > 0) && (request.getParameter(""String_Node_Str"") != null)&& (request.getParameter(""String_Node_Str"").length() > 0)) {
            if (request.getParameter(""String_Node_Str"") != null) {
              Boolean enabled=false;
              Boolean buildTypeAll=false;
              Boolean buildTypeSubProjects=false;
              Set<String> buildTypes=new HashSet<String>();
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                enabled=true;
              }
              BuildState states=new BuildState();
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_SUCCESSFUL,BUILD_SUCCESSFUL);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FAILED,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_FIXED,BUILD_FIXED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_BROKEN,BUILD_BROKEN);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_STARTED,BUILD_STARTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BUILD_INTERRUPTED,BUILD_INTERRUPTED);
              checkAndAddBuildState(request,states,BuildStateEnum.BEFORE_BUILD_FINISHED,BEFORE_FINISHED);
              checkAndAddBuildStateIfEitherSet(request,states,BuildStateEnum.BUILD_FINISHED,BUILD_SUCCESSFUL,BUILD_FAILED);
              checkAndAddBuildState(request,states,BuildStateEnum.RESPONSIBILITY_CHANGED,""String_Node_Str"");
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeSubProjects=true;
              }
              if ((request.getParameter(""String_Node_Str"") != null) && (request.getParameter(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str""))) {
                buildTypeAll=true;
              }
 else {
                if (request.getParameterValues(""String_Node_Str"") != null) {
                  String[] types=request.getParameterValues(""String_Node_Str"");
                  for (                  String string : types) {
                    buildTypes.add(string);
                  }
                }
              }
              if (request.getParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
                projSettings.addNewWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
 else {
                projSettings.updateWebHook(myProject.getProjectId(),request.getParameter(""String_Node_Str""),request.getParameter(""String_Node_Str""),enabled,states,request.getParameter(""String_Node_Str""),buildTypeAll,buildTypeSubProjects,buildTypes);
                if (projSettings.updateSuccessful()) {
                  myProject.persist();
                  params.put(""String_Node_Str"",""String_Node_Str"");
                }
 else {
                  params.put(""String_Node_Str"",""String_Node_Str"" + projSettings.getUpdateMessage() + ""String_Node_Str"");
                }
              }
            }
          }
 else {
            if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
 else             if ((request.getParameter(""String_Node_Str"") == null) || (request.getParameter(""String_Node_Str"").length() == 0)) {
              params.put(""String_Node_Str"",""String_Node_Str"");
            }
          }
        }
      }
 else {
        params.put(""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
  params.put(""String_Node_Str"",myManager.getRegisteredFormatsAsCollection());
  if (request.getMethod().equalsIgnoreCase(""String_Node_Str"") && request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    WebHookProjectSettings projSettings1=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    String message=projSettings1.getWebHooksAsString();
    params.put(""String_Node_Str"",""String_Node_Str"");
    params.put(""String_Node_Str"",message);
    params.put(""String_Node_Str"",project.getProjectId());
    params.put(""String_Node_Str"",TeamCityIdResolver.getExternalProjectId(project));
    params.put(""String_Node_Str"",project.getName());
    params.put(""String_Node_Str"",projSettings1.getWebHooksCount());
    if (projSettings1.getWebHooksCount() == 0) {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",projSettings.getWebHooksAsList());
      params.put(""String_Node_Str"",!projSettings.isEnabled());
      params.put(""String_Node_Str"",projSettings.isEnabledAsChecked());
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginPath + ""String_Node_Str"",params);
}",0.807579222476315
33460,"@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    if (project == null) {
      params.put(""String_Node_Str"",""String_Node_Str"");
    }
 else {
      WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
      params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
    }
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}","@Nullable protected ModelAndView doHandle(HttpServletRequest request,HttpServletResponse response) throws Exception {
  HashMap<String,Object> params=new HashMap<String,Object>();
  params.put(""String_Node_Str"",this.myPluginDescriptor.getPluginResourcesPath());
  if (request.getParameter(""String_Node_Str"") != null && request.getParameter(""String_Node_Str"").startsWith(""String_Node_Str"")) {
    SProject project=this.myServer.getProjectManager().findProjectById(request.getParameter(""String_Node_Str""));
    WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(request.getParameter(""String_Node_Str""),""String_Node_Str"");
    params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,project,myManager.getRegisteredFormatsAsCollection())));
  }
 else   if (request.getParameter(""String_Node_Str"") != null) {
    SBuildType sBuildType=TeamCityIdResolver.findBuildTypeById(this.myServer.getProjectManager(),request.getParameter(""String_Node_Str""));
    if (sBuildType != null) {
      SProject project=sBuildType.getProject();
      if (project != null) {
        WebHookProjectSettings projSettings=(WebHookProjectSettings)mySettings.getSettings(project.getProjectId(),""String_Node_Str"");
        params.put(""String_Node_Str"",ProjectWebHooksBeanJsonSerialiser.serialise(ProjectWebHooksBean.build(projSettings,sBuildType,project,myManager.getRegisteredFormatsAsCollection())));
      }
    }
  }
 else {
    params.put(""String_Node_Str"",""String_Node_Str"");
  }
  return new ModelAndView(myPluginDescriptor.getPluginResourcesPath() + ""String_Node_Str"",params);
}",0.9460680927990358
33461,"@JsonCreator public AzureTableConfiguration(@JsonProperty(""String_Node_Str"") String accountName,@JsonProperty(""String_Node_Str"") String accountKey,@JsonProperty(""String_Node_Str"") Duration timeout,@JsonProperty(""String_Node_Str"") Duration retryInterval,@JsonProperty(""String_Node_Str"") int retryAttempts){
  this.retryInterval=checkNotNull(retryInterval,""String_Node_Str"");
  this.retryAttempts=checkNotNull(retryAttempts,""String_Node_Str"");
  this.timeout=checkNotNull(timeout,""String_Node_Str"");
  this.storageCredentialsAccountAndKey=new StorageCredentialsAccountAndKey(checkNotNull(accountName,""String_Node_Str""),checkNotNull(accountKey,""String_Node_Str""));
}","@JsonCreator public AzureTableConfiguration(@JsonProperty(""String_Node_Str"") String accountName,@JsonProperty(""String_Node_Str"") String accountKey,@JsonProperty(""String_Node_Str"") Duration timeout,@JsonProperty(""String_Node_Str"") Duration retryInterval,@JsonProperty(""String_Node_Str"") int retryAttempts){
  this.retryInterval=checkNotNull(retryInterval,""String_Node_Str"");
  this.retryAttempts=retryAttempts;
  this.timeout=checkNotNull(timeout,""String_Node_Str"");
  this.storageCredentialsAccountAndKey=new StorageCredentialsAccountAndKey(checkNotNull(accountName,""String_Node_Str""),checkNotNull(accountKey,""String_Node_Str""));
}",0.955177743431221
33462,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String filename=request.getParameter(""String_Node_Str"");
  if (filename == null) {
    filename=""String_Node_Str"";
  }
 else {
    filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  int delay=500;
  String delayArg=request.getParameter(""String_Node_Str"");
  if (delayArg != null) {
    delay=Integer.parseInt(delayArg);
  }
  int batch=1;
  String batchArg=request.getParameter(""String_Node_Str"");
  if (batchArg != null) {
    batch=Integer.parseInt(batchArg);
  }
  String data=getFileFromPackage(filename);
  String lines[]=data.split(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  response.setCharacterEncoding(""String_Node_Str"");
  int batchCount=0;
  for (; ; ) {
    for (    String s : lines) {
      s=s.trim();
      if (s.length() > 0) {
        try {
          response.getWriter().println(s);
          response.getWriter().println(""String_Node_Str"");
          response.getWriter().flush();
          batchCount++;
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
          return;
        }
        if (batchCount == batch) {
          try {
            Thread.sleep(delay);
          }
 catch (          InterruptedException e) {
          }
          batchCount=0;
        }
      }
    }
  }
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String filename=request.getParameter(""String_Node_Str"");
  if (filename == null) {
    filename=""String_Node_Str"";
  }
 else {
    filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
    filename=filename.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  int delay=500;
  String delayArg=request.getParameter(""String_Node_Str"");
  if (delayArg != null) {
    delay=Integer.parseInt(delayArg);
  }
  int batch=1;
  String batchArg=request.getParameter(""String_Node_Str"");
  if (batchArg != null) {
    batch=Integer.parseInt(batchArg);
  }
  String data=getFileFromPackage(filename);
  String lines[]=data.split(""String_Node_Str"");
  response.setContentType(""String_Node_Str"");
  response.setCharacterEncoding(""String_Node_Str"");
  int batchCount=0;
  for (; ; ) {
    for (    String s : lines) {
      s=s.trim();
      if (s.length() > 0) {
        try {
          response.getWriter().println(s);
          response.getWriter().println(""String_Node_Str"");
          response.getWriter().flush();
          batchCount++;
        }
 catch (        Exception e) {
          logger.warn(""String_Node_Str"",e);
          return;
        }
        if (batchCount == batch) {
          try {
            Thread.sleep(delay);
          }
 catch (          InterruptedException e) {
          }
          batchCount=0;
        }
      }
    }
  }
}",0.9968294229549778
33463,"/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String origin=request.getParameter(""String_Node_Str"");
  if (origin == null) {
    response.setStatus(500);
    response.getWriter().println(""String_Node_Str"");
  }
  origin=origin.trim();
  HttpGet httpget=null;
  InputStream is=null;
  boolean hasFirstParameter=false;
  StringBuilder url=new StringBuilder();
  if (!origin.startsWith(""String_Node_Str"")) {
    url.append(""String_Node_Str"");
  }
  url.append(origin);
  if (origin.contains(""String_Node_Str"")) {
    hasFirstParameter=true;
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,String[]> params=request.getParameterMap();
  for (  String key : params.keySet()) {
    if (!key.equals(""String_Node_Str"")) {
      String[] values=params.get(key);
      String value=values[0].trim();
      if (hasFirstParameter) {
        url.append(""String_Node_Str"");
      }
 else {
        url.append(""String_Node_Str"");
        hasFirstParameter=true;
      }
      url.append(key).append(""String_Node_Str"").append(value);
    }
  }
  String proxyUrl=url.toString();
  logger.info(""String_Node_Str"" + proxyUrl + ""String_Node_Str"");
  try {
    httpget=new HttpGet(proxyUrl);
    HttpClient client=ProxyConnectionManager.httpClient;
    HttpResponse httpResponse=client.execute(httpget);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (statusCode == HttpStatus.SC_OK) {
      is=httpResponse.getEntity().getContent();
      for (      Header header : httpResponse.getAllHeaders()) {
        response.addHeader(header.getName(),header.getValue());
      }
      OutputStream os=response.getOutputStream();
      int b=-1;
      while ((b=is.read()) != -1) {
        try {
          os.write(b);
          if (b == 10) {
            os.flush();
          }
        }
 catch (        Exception e) {
          if (e.getClass().getSimpleName().equalsIgnoreCase(""String_Node_Str"")) {
            logger.debug(""String_Node_Str"");
            break;
          }
 else {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + url,e);
  }
 finally {
    if (httpget != null) {
      try {
        httpget.abort();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception e) {
      }
    }
  }
}","/** 
 * @see HttpServlet#doGet(HttpServletRequest request,HttpServletResponse response)
 */
@Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
  String origin=request.getParameter(""String_Node_Str"");
  if (origin == null) {
    response.setStatus(500);
    response.getWriter().println(""String_Node_Str"");
  }
  origin=origin.trim();
  HttpGet httpget=null;
  InputStream is=null;
  boolean hasFirstParameter=false;
  StringBuilder url=new StringBuilder();
  if (!origin.startsWith(""String_Node_Str"")) {
    url.append(""String_Node_Str"");
  }
  url.append(origin);
  if (origin.contains(""String_Node_Str"")) {
    hasFirstParameter=true;
  }
  @SuppressWarnings(""String_Node_Str"") Map<String,String[]> params=request.getParameterMap();
  for (  String key : params.keySet()) {
    if (!key.equals(""String_Node_Str"")) {
      String[] values=params.get(key);
      String value=values[0].trim();
      if (hasFirstParameter) {
        url.append(""String_Node_Str"");
      }
 else {
        url.append(""String_Node_Str"");
        hasFirstParameter=true;
      }
      url.append(key).append(""String_Node_Str"").append(value);
    }
  }
  String proxyUrl=url.toString();
  logger.info(""String_Node_Str"" + proxyUrl + ""String_Node_Str"");
  try {
    httpget=new HttpGet(proxyUrl);
    HttpClient client=ProxyConnectionManager.httpClient;
    HttpResponse httpResponse=client.execute(httpget);
    int statusCode=httpResponse.getStatusLine().getStatusCode();
    if (statusCode == HttpStatus.SC_OK) {
      is=httpResponse.getEntity().getContent();
      for (      Header header : httpResponse.getAllHeaders()) {
        response.addHeader(header.getName(),header.getValue());
      }
      OutputStream os=response.getOutputStream();
      int b=-1;
      while ((b=is.read()) != -1) {
        try {
          os.write(b);
          if (b == 10) {
            os.flush();
          }
        }
 catch (        Exception e) {
          if (e.getClass().getSimpleName().equalsIgnoreCase(""String_Node_Str"")) {
            logger.debug(""String_Node_Str"");
            break;
          }
 else {
            throw new RuntimeException(e);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"" + url,e);
  }
 finally {
    if (httpget != null) {
      try {
        httpget.abort();
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"",e);
      }
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      Exception e) {
      }
    }
  }
}",0.998070987654321
33464,"private static InstanceDiscovery createClassInstance(Class<InstanceDiscovery> instanceDiscoveryClass,BreakerboxServiceConfiguration configuration,Environment environment) throws Exception {
  if (instanceDiscoveryClass.equals(RancherInstanceDiscovery.class) && configuration.getRancherInstanceConfiguration().isPresent()) {
    return new RancherInstanceDiscovery(configuration.getRancherInstanceConfiguration().get(),environment.getObjectMapper());
  }
 else   if (instanceDiscoveryClass.equals(YamlInstanceDiscovery.class)) {
    return new YamlInstanceDiscovery(configuration.getTurbine(),environment.getValidator(),environment.getObjectMapper());
  }
  return instanceDiscoveryClass.newInstance();
}","private static InstanceDiscovery createClassInstance(Class<InstanceDiscovery> instanceDiscoveryClass,BreakerboxServiceConfiguration configuration,Environment environment) throws Exception {
  if (instanceDiscoveryClass.equals(RancherInstanceDiscovery.class) && configuration.getRancherInstanceConfiguration().isPresent()) {
    return new RancherInstanceDiscovery(configuration.getRancherInstanceConfiguration().get(),environment.getObjectMapper());
  }
 else   if (instanceDiscoveryClass.equals(YamlInstanceDiscovery.class)) {
    return new YamlInstanceDiscovery(configuration.getTurbine(),environment.getValidator(),environment.getObjectMapper());
  }
  return instanceDiscoveryClass.getConstructor().newInstance();
}",0.98805340829234
33465,"protected void registerTenacityProperties(Map<TenacityPropertyKey,TenacityConfiguration> tenacityPropertyKeyConfigurations,BreakerboxServiceConfiguration configuration){
}","@Override protected void registerTenacityProperties(Map<TenacityPropertyKey,TenacityConfiguration> tenacityPropertyKeyConfigurations,BreakerboxServiceConfiguration configuration){
}",0.9715909090909092
33466,"@Test public void testToDate() throws Exception {
  assertThat(SimpleDateParser.millisToDate(String.valueOf(testDateEpoch))).isEqualTo(testDateFormatted);
}","@Test public void testToDate() throws Exception {
  assertThat(SimpleDateParser.millisToDate(String.valueOf(testDateEpoch))).isEqualTo(DateFormatUtils.format(new Date(testDateEpoch),SimpleDateParser.DATE_FORMAT));
}",0.8032345013477089
33467,"public ImmutableList<SyncState> inSync(ServiceId serviceId,DependencyId dependencyId){
  final ImmutableList<InstanceConfiguration> configurations=fetch(serviceId,dependencyId);
  final Optional<ServiceEntity> serviceEntity=breakerboxStore.retrieve(serviceId,dependencyId);
  if (serviceEntity.isPresent()) {
    final Optional<TenacityConfiguration> tenacityConfiguration=breakerboxStore.retrieve(dependencyId,Optional.<String>absent()).get().getConfiguration();
    if (tenacityConfiguration.isPresent()) {
      return FluentIterable.from(configurations).transform(funComputeSyncState(tenacityConfiguration.get())).toList();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return FluentIterable.from(configurations).transform(funUnsynchronized()).toList();
}","public ImmutableList<SyncState> inSync(ServiceId serviceId,DependencyId dependencyId){
  final ImmutableList<InstanceConfiguration> configurations=fetch(serviceId,dependencyId);
  final Optional<DependencyEntity> entityOptional=breakerboxStore.retrieve(dependencyId,Optional.<String>absent());
  if (entityOptional.isPresent()) {
    final DependencyEntity entity=entityOptional.get();
    if (entity.getConfiguration().isPresent()) {
      return FluentIterable.from(configurations).transform(funComputeSyncState(entity.getConfiguration().get())).toList();
    }
 else {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
  return FluentIterable.from(configurations).transform(funUnsynchronized()).toList();
}",0.6286089238845144
33468,"@Test public void noBreakerboxConfiguration(){
  final SyncComparator syncComparator=new SyncComparator(mockFactory,mockTenacityStory);
  when(mockTenacityStory.retrieve(serviceId,dependencyId)).thenReturn(Optional.<ServiceEntity>absent());
  when(mockFactory.create(any(URI.class),any(TenacityPropertyKey.class))).thenReturn(mockFetcher);
  when(mockFetcher.queue()).thenReturn(Futures.immediateFuture(Optional.of(new TenacityConfiguration())));
  assertThat(syncComparator.inSync(serviceId,dependencyId)).isEqualTo(unsynchronized());
}","@Test public void noBreakerboxConfiguration(){
  final SyncComparator syncComparator=new SyncComparator(mockFactory,mockTenacityStory);
  when(mockTenacityStory.retrieve(eq(dependencyId),eq(Optional.<String>absent()))).thenReturn(Optional.<DependencyEntity>absent());
  when(mockFactory.create(any(URI.class),any(TenacityPropertyKey.class))).thenReturn(mockFetcher);
  when(mockFetcher.queue()).thenReturn(Futures.immediateFuture(Optional.of(new TenacityConfiguration())));
  assertThat(syncComparator.inSync(serviceId,dependencyId)).isEqualTo(unsynchronized());
}",0.9064486830154403
33469,"@Test public void noConfigurations(){
  final SyncComparator syncComparator=new SyncComparator(mockFactory,mockTenacityStory);
  when(mockTenacityStory.retrieve(serviceId,dependencyId)).thenReturn(Optional.<ServiceEntity>absent());
  when(mockFactory.create(any(URI.class),any(TenacityPropertyKey.class))).thenReturn(mockFetcher);
  when(mockFetcher.queue()).thenReturn(Futures.immediateFuture(Optional.<TenacityConfiguration>absent()));
  assertThat(syncComparator.inSync(serviceId,dependencyId)).isEqualTo(unsynchronized());
}","@Test public void noConfigurations(){
  final SyncComparator syncComparator=new SyncComparator(mockFactory,mockTenacityStory);
  when(mockTenacityStory.retrieve(eq(dependencyId),eq(Optional.<String>absent()))).thenReturn(Optional.<DependencyEntity>absent());
  when(mockFactory.create(any(URI.class),any(TenacityPropertyKey.class))).thenReturn(mockFetcher);
  when(mockFetcher.queue()).thenReturn(Futures.immediateFuture(Optional.<TenacityConfiguration>absent()));
  assertThat(syncComparator.inSync(serviceId,dependencyId)).isEqualTo(unsynchronized());
}",0.9048938134810712
33470,"public <EntityType extends TableServiceEntity>Optional<EntityType> retrieve(TableKey tableKey){
  try {
    final TableResult tableResult=cloudTableClient.execute(tableKey.getTable().toString(),TableOperation.retrieve(tableKey.getPartitionKey(),tableKey.getRowKey(),tableKey.getEntityClass()));
    return Optional.fromNullable((EntityType)tableResult.getResultAsType());
  }
 catch (  StorageException e) {
    LOG.warn(""String_Node_Str"",tableKey.getTable(),e);
  }
  return Optional.absent();
}","public <EntityType extends TableServiceEntity>Optional<EntityType> retrieve(TableKey tableKey){
  try {
    final TableResult tableResult=cloudTableClient.execute(tableKey.getTable().toString(),TableOperation.retrieve(tableKey.getPartitionKey(),tableKey.getRowKey(),tableKey.getEntityClass()));
    final EntityType entityType=tableResult.getResultAsType();
    return Optional.fromNullable(entityType);
  }
 catch (  StorageException e) {
    LOG.warn(""String_Node_Str"",tableKey.getTable(),e);
  }
  return Optional.absent();
}",0.888671875
33471,"@Override public URI apply(Instance input){
  final URI original=URI.create(input.getHostname());
  try {
    return new URI(original.getScheme(),original.getUserInfo(),original.getHost(),original.getPort(),TenacityClient.TENACITY_PROPERTYKEYS_PATH,original.getQuery(),original.getFragment());
  }
 catch (  URISyntaxException err) {
    LOGGER.warn(""String_Node_Str"",err);
  }
  return original;
}","@Override public URI apply(Instance input){
  final URI original=URI.create(input.getHostname());
  try {
    return new URI(original.getScheme(),original.getUserInfo(),original.getHost(),original.getPort(),""String_Node_Str"",original.getQuery(),original.getFragment());
  }
 catch (  URISyntaxException err) {
    LOGGER.warn(""String_Node_Str"",err);
  }
  return original;
}",0.9300518134715026
33472,"private static Function<Instance,URI> toPropertyKeyUri(){
  return new Function<Instance,URI>(){
    @Override public URI apply(    Instance input){
      final URI original=URI.create(input.getHostname());
      try {
        return new URI(original.getScheme(),original.getUserInfo(),original.getHost(),original.getPort(),TenacityClient.TENACITY_PROPERTYKEYS_PATH,original.getQuery(),original.getFragment());
      }
 catch (      URISyntaxException err) {
        LOGGER.warn(""String_Node_Str"",err);
      }
      return original;
    }
  }
;
}","private static Function<Instance,URI> toPropertyKeyUri(){
  return new Function<Instance,URI>(){
    @Override public URI apply(    Instance input){
      final URI original=URI.create(input.getHostname());
      try {
        return new URI(original.getScheme(),original.getUserInfo(),original.getHost(),original.getPort(),""String_Node_Str"",original.getQuery(),original.getFragment());
      }
 catch (      URISyntaxException err) {
        LOGGER.warn(""String_Node_Str"",err);
      }
      return original;
    }
  }
;
}",0.9514018691588784
33473,"private ColumnSlice[] getPagedColumnSlices(DecoratedKey dk,Collection<IndexEntry> entries,int pageSize){
  ColumnSlice[] columnSlices=new ColumnSlice[pageSize];
  int i=0;
  for (  IndexEntry entry : entries) {
    CellName cellName=entry.clusteringKey;
    if (!filter.columnFilter(dk.getKey()).maySelectPrefix(tableMapper.table.getComparator(),cellName.start())) {
      continue;
    }
    Composite start=tableMapper.start(cellName);
    Composite end=tableMapper.end(start);
    ColumnSlice columnSlice=new ColumnSlice(start,end);
    columnSlices[i++]=columnSlice;
    if (i >= pageSize) {
      break;
    }
  }
  return columnSlices;
}","private ColumnSlice[] getPagedColumnSlices(DecoratedKey dk,Collection<IndexEntry> entries,int pageSize){
  ColumnSlice[] columnSlices=new ColumnSlice[Math.min(entries.size(),pageSize)];
  int i=0;
  for (  IndexEntry entry : entries) {
    CellName cellName=entry.clusteringKey;
    if (!filter.columnFilter(dk.getKey()).maySelectPrefix(tableMapper.table.getComparator(),cellName.start())) {
      continue;
    }
    Composite start=tableMapper.start(cellName);
    Composite end=tableMapper.end(start);
    ColumnSlice columnSlice=new ColumnSlice(start,end);
    columnSlices[i++]=columnSlice;
    if (i >= pageSize) {
      break;
    }
  }
  return columnSlices;
}",0.973302822273074
33474,"private ColumnSlice[] getPagedColumnSlices(DecoratedKey dk,Collection<IndexEntry> entries,int pageSize){
  ColumnSlice[] columnSlices=new ColumnSlice[Math.min(entries.size(),pageSize)];
  int i=0;
  for (  IndexEntry entry : entries) {
    CellName cellName=entry.clusteringKey;
    if (!filter.columnFilter(dk.getKey()).maySelectPrefix(tableMapper.table.getComparator(),cellName.start())) {
      continue;
    }
    Composite start=tableMapper.start(cellName);
    Composite end=tableMapper.end(start);
    ColumnSlice columnSlice=new ColumnSlice(start,end);
    columnSlices[i++]=columnSlice;
    if (i >= pageSize) {
      break;
    }
  }
  return columnSlices;
}","private ColumnSlice[] getPagedColumnSlices(DecoratedKey dk,Collection<IndexEntry> entries,int pageSize){
  ArrayList<ColumnSlice> columnSlices=new ArrayList<>(Math.min(entries.size(),pageSize));
  for (  IndexEntry entry : entries) {
    CellName cellName=entry.clusteringKey;
    if (!filter.columnFilter(dk.getKey()).maySelectPrefix(tableMapper.table.getComparator(),cellName.start())) {
      continue;
    }
    Composite start=tableMapper.start(cellName);
    Composite end=tableMapper.end(start);
    ColumnSlice columnSlice=new ColumnSlice(start,end);
    columnSlices.add(columnSlice);
    if (columnSlices.size() == pageSize) {
      break;
    }
  }
  return columnSlices.toArray(new ColumnSlice[columnSlices.size()]);
}",0.776824034334764
33475,"@Override public List<Row> search(ExtendedFilter mainFilter){
  List<IndexExpression> clause=mainFilter.getClause();
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"",clause);
  try {
    String queryString=getQueryString(matchThisIndex(clause));
    Search search=getQuery(queryString);
    return getRows(mainFilter,search,queryString);
  }
 catch (  Exception e) {
    if (tableMapper.isMetaColumn) {
      ByteBuffer errorMsg=UTF8Type.instance.decompose(""String_Node_Str"" + StringEscapeUtils.escapeEcmaScript(e.getMessage()) + ""String_Node_Str"");
      Row row=tableMapper.getRowWithMetaColumn(errorMsg);
      if (row != null) {
        return Collections.singletonList(row);
      }
    }
    logger.error(""String_Node_Str"",e);
    return Collections.EMPTY_LIST;
  }
}","@Override public List<Row> search(ExtendedFilter mainFilter){
  List<IndexExpression> clause=mainFilter.getClause();
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"",clause);
  try {
    String queryString=getQueryString(matchThisIndex(clause));
    Search search=getQuery(queryString);
    return getRows(mainFilter,search,queryString);
  }
 catch (  Exception e) {
    logger.error(""String_Node_Str"",e);
    if (tableMapper.isMetaColumn) {
      ByteBuffer errorMsg=UTF8Type.instance.decompose(""String_Node_Str"" + StringEscapeUtils.escapeEcmaScript(e.getMessage()) + ""String_Node_Str"");
      Row row=tableMapper.getRowWithMetaColumn(errorMsg);
      if (row != null) {
        return Collections.singletonList(row);
      }
    }
    return Collections.EMPTY_LIST;
  }
}",0.950507614213198
33476,"@Test public void shouldReportErrorRow() throws Exception {
  try {
    createKS(keyspace);
    createTableAndIndexForRow();
    ResultSet rs=getResults(""String_Node_Str"",""String_Node_Str"" + mq(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"",true);
    List<Row> rows=rs.all();
    Assert.assertEquals(true,rows.toString().contains(""String_Node_Str""));
  }
  finally {
    dropTable(keyspace,""String_Node_Str"");
    dropKS(keyspace);
  }
}","@Test public void shouldReportErrorRow() throws Exception {
  try {
    createKS(keyspace);
    createTableAndIndexForRow();
    ResultSet rs=getResults(""String_Node_Str"",""String_Node_Str"",true);
    List<Row> rows=rs.all();
    Assert.assertEquals(true,rows.toString().contains(""String_Node_Str""));
  }
  finally {
    dropTable(keyspace,""String_Node_Str"");
    dropKS(keyspace);
  }
}",0.9256594724220624
33477,"/** 
 * It is ok to have another thread re-run this method after a halt().
 * @throws IllegalStateException if this processor is already running
 */
@Override public void run(){
  if (!running.compareAndSet(false,true)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  sequenceBarrier.clearAlert();
  notifyStart();
  boolean processedSequence=true;
  long nextSequence=sequence.get();
  T event=null;
  while (true) {
    try {
      if (processedSequence) {
        processedSequence=false;
        nextSequence=workSequence.incrementAndGet();
        sequence.set(nextSequence - 1L);
      }
      sequenceBarrier.waitFor(nextSequence);
      event=ringBuffer.get(nextSequence);
      workHandler.onEvent(event);
      processedSequence=true;
    }
 catch (    final AlertException ex) {
      if (!running.get()) {
        break;
      }
    }
catch (    final Throwable ex) {
      exceptionHandler.handleEventException(ex,nextSequence,event);
      processedSequence=true;
    }
  }
  notifyShutdown();
  running.set(false);
}","/** 
 * It is ok to have another thread re-run this method after a halt().
 * @throws IllegalStateException if this processor is already running
 */
@Override public void run(){
  if (!running.compareAndSet(false,true)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  sequenceBarrier.clearAlert();
  notifyStart();
  boolean processedSequence=true;
  long nextSequence=sequence.get();
  T event=null;
  while (true) {
    try {
      if (processedSequence) {
        processedSequence=false;
        nextSequence=workSequence.incrementAndGet();
        sequence.set(nextSequence - 1L);
      }
      if (sequenceBarrier.waitFor(nextSequence) >= nextSequence) {
        event=ringBuffer.get(nextSequence);
        workHandler.onEvent(event);
        processedSequence=true;
      }
    }
 catch (    final AlertException ex) {
      if (!running.get()) {
        break;
      }
    }
catch (    final Throwable ex) {
      exceptionHandler.handleEventException(ex,nextSequence,event);
      processedSequence=true;
    }
  }
  notifyShutdown();
  running.set(false);
}",0.9812206572769951
33478,"/** 
 * It is ok to have another thread re-run this method after a halt().
 * @throws IllegalStateException if this processor is already running
 */
@Override public void run(){
  if (!running.compareAndSet(false,true)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  sequenceBarrier.clearAlert();
  notifyStart();
  boolean processedSequence=true;
  long nextSequence=sequence.get();
  T event=null;
  while (true) {
    try {
      if (processedSequence) {
        processedSequence=false;
        nextSequence=workSequence.incrementAndGet();
        sequence.set(nextSequence - 1L);
      }
      if (sequenceBarrier.waitFor(nextSequence) >= nextSequence) {
        event=ringBuffer.get(nextSequence);
        workHandler.onEvent(event);
        processedSequence=true;
      }
    }
 catch (    final AlertException ex) {
      if (!running.get()) {
        break;
      }
    }
catch (    final Throwable ex) {
      exceptionHandler.handleEventException(ex,nextSequence,event);
      processedSequence=true;
    }
  }
  notifyShutdown();
  running.set(false);
}","/** 
 * It is ok to have another thread re-run this method after a halt().
 * @throws IllegalStateException if this processor is already running
 */
@Override public void run(){
  if (!running.compareAndSet(false,true)) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  sequenceBarrier.clearAlert();
  notifyStart();
  boolean processedSequence=true;
  long cachedAvailableSequence=Long.MIN_VALUE;
  long nextSequence=sequence.get();
  T event=null;
  while (true) {
    try {
      if (processedSequence) {
        processedSequence=false;
        nextSequence=workSequence.incrementAndGet();
        sequence.set(nextSequence - 1L);
      }
      if (cachedAvailableSequence >= nextSequence) {
        event=ringBuffer.get(nextSequence);
        workHandler.onEvent(event);
        processedSequence=true;
      }
 else {
        cachedAvailableSequence=sequenceBarrier.waitFor(nextSequence);
      }
    }
 catch (    final AlertException ex) {
      if (!running.get()) {
        break;
      }
    }
catch (    final Throwable ex) {
      exceptionHandler.handleEventException(ex,nextSequence,event);
      processedSequence=true;
    }
  }
  notifyShutdown();
  running.set(false);
}",0.6509186351706037
33479,"/** 
 * Upon upgrade of disruptor to a version above 3.1.1, this method invocation can be replaced with  {@code disruptor.handleEventsWithWorkerPool}
 * @param workHandlers
 * @param exceptionHandler
 */
private void handleEventsWithWorkerPool(WorkHandler<IndexEntryEvent>[] workHandlers,ExceptionHandler exceptionHandler){
  final Sequence[] barrierSequences=new Sequence[0];
  final SequenceBarrier sequenceBarrier=ringBuffer.newBarrier(barrierSequences);
  EventProcessor[] workProcessors=new CustomWorkProcessor[numWorkers];
  Sequence workSequence=new Sequence(Sequencer.INITIAL_CURSOR_VALUE);
  for (int i=0; i < numWorkers; i++) {
    workProcessors[i]=new CustomWorkProcessor<IndexEntryEvent>(ringBuffer,sequenceBarrier,workHandlers[i],exceptionHandler,workSequence);
  }
  disruptor.handleEventsWith(workProcessors);
}","/** 
 * Upon upgrade of disruptor to a version above 3.2.0, this method invocation can be replaced with  {@code disruptor.handleEventsWithWorkerPool}
 * @param workHandlers
 * @param exceptionHandler
 */
private void handleEventsWithWorkerPool(WorkHandler<IndexEntryEvent>[] workHandlers,ExceptionHandler exceptionHandler){
  final Sequence[] barrierSequences=new Sequence[0];
  final SequenceBarrier sequenceBarrier=ringBuffer.newBarrier(barrierSequences);
  EventProcessor[] workProcessors=new CustomWorkProcessor[numWorkers];
  Sequence workSequence=new Sequence(Sequencer.INITIAL_CURSOR_VALUE);
  for (int i=0; i < numWorkers; i++) {
    workProcessors[i]=new CustomWorkProcessor<IndexEntryEvent>(ringBuffer,sequenceBarrier,workHandlers[i],exceptionHandler,workSequence);
  }
  disruptor.handleEventsWith(workProcessors);
}",0.9975816203143894
33480,"@Override public List<Row> process(RowScanner rowScanner,CustomColumnFactory customColumnFactory,ColumnFamilyStore table,RowIndex currentIndex) throws Exception {
  Options options=rowScanner.getOptions();
  Group group=new Group(options,aggregates,groupBy,groupByExpressions);
  if (aggregates.length == 1 && !aggregates[0].distinct && groupBy == null) {
    Count count=new Count(aggregates[0],null,false);
    count.count=rowScanner.getCollector().docs().size();
    group.groups.put(new Tuple(Collections.EMPTY_MAP,Collections.EMPTY_MAP,simpleExpressions),count);
    Row row=customColumnFactory.getRowWithMetaColumn(table,currentIndex,group.toByteBuffer());
    return Collections.singletonList(row);
  }
  Tuple tuple=new Tuple(positions,allValidators,simpleExpressions);
  if (rowScanner.getCollector().canByPassRowFetch()) {
    Iterator<IndexEntryCollector.IndexEntry> indexIterator=rowScanner.getCollector().docs().iterator();
    while (indexIterator.hasNext()) {
      IndexEntryCollector.IndexEntry indexEntry=indexIterator.next();
      tuple.load(indexEntry);
      group.addTuple(tuple);
    }
  }
 else {
    if (chunkSize == 1) {
      while (rowScanner.hasNext()) {
        Row row=rowScanner.next();
        tuple.load(row,table);
        group.addTuple(tuple);
      }
    }
 else {
      List<Row> rows;
      while (rowScanner.hasNext()) {
        rows=new ArrayList<>(chunkSize);
        for (int i=0; i < chunkSize; i++) {
          if (!rowScanner.hasNext())           break;
          rows.add(rowScanner.next());
        }
        for (        Row row : rows) {
          tuple.load(row,table);
          group.addTuple(tuple);
        }
      }
    }
  }
  Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
  ByteBuffer groupBuffer=group.toByteBuffer();
  timer3.endLogTime(""String_Node_Str"" + group.groups.size() + ""String_Node_Str"");
  Row row=customColumnFactory.getRowWithMetaColumn(table,currentIndex,groupBuffer);
  return Collections.singletonList(row);
}","@Override public List<Row> process(RowScanner rowScanner,CustomColumnFactory customColumnFactory,ColumnFamilyStore table,RowIndex currentIndex) throws Exception {
  Options options=rowScanner.getOptions();
  Group group=new Group(options,aggregates,groupBy,groupByExpressions);
  if (aggregates.length == 1 && !aggregates[0].distinct && ""String_Node_Str"".equalsIgnoreCase(aggregates[0].getType()) && groupBy == null) {
    Count count=new Count(aggregates[0],null,false);
    count.count=rowScanner.getCollector().docs().size();
    group.groups.put(new Tuple(Collections.EMPTY_MAP,Collections.EMPTY_MAP,simpleExpressions),count);
    Row row=customColumnFactory.getRowWithMetaColumn(table,currentIndex,group.toByteBuffer());
    return Collections.singletonList(row);
  }
  Tuple tuple=new Tuple(positions,allValidators,simpleExpressions);
  if (rowScanner.getCollector().canByPassRowFetch()) {
    Iterator<IndexEntryCollector.IndexEntry> indexIterator=rowScanner.getCollector().docs().iterator();
    while (indexIterator.hasNext()) {
      IndexEntryCollector.IndexEntry indexEntry=indexIterator.next();
      tuple.load(indexEntry);
      group.addTuple(tuple);
    }
  }
 else {
    if (chunkSize == 1) {
      while (rowScanner.hasNext()) {
        Row row=rowScanner.next();
        tuple.load(row,table);
        group.addTuple(tuple);
      }
    }
 else {
      List<Row> rows;
      while (rowScanner.hasNext()) {
        rows=new ArrayList<>(chunkSize);
        for (int i=0; i < chunkSize; i++) {
          if (!rowScanner.hasNext())           break;
          rows.add(rowScanner.next());
        }
        for (        Row row : rows) {
          tuple.load(row,table);
          group.addTuple(tuple);
        }
      }
    }
  }
  Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
  ByteBuffer groupBuffer=group.toByteBuffer();
  timer3.endLogTime(""String_Node_Str"" + group.groups.size() + ""String_Node_Str"");
  Row row=customColumnFactory.getRowWithMetaColumn(table,currentIndex,groupBuffer);
  return Collections.singletonList(row);
}",0.9845777233782128
33481,"public ColumnFamily fetchRangeSlice(ArrayList<IndexEntryCollector.IndexEntry> entries,DecoratedKey dk){
  IndexEntryCollector.IndexEntry first=entries.get(0);
  IndexEntryCollector.IndexEntry last=entries.get(entries.size() - 1);
  CellName firstCellName=clusteringKey(first.primaryKey);
  CellName lastCellName=clusteringKey(last.primaryKey);
  QueryFilter sliceQueryFilter=QueryFilter.getSliceFilter(dk,tableMapper.table.name,start(firstCellName),end(lastCellName),false,Integer.MAX_VALUE,filter.timestamp);
  return tableMapper.table.getColumnFamily(sliceQueryFilter);
}","public Map<CellName,ColumnFamily> fetchRangeSlice(ArrayList<IndexEntryCollector.IndexEntry> entries,DecoratedKey dk){
  ColumnSlice[] columnSlices=getColumnSlices(entries);
  SliceQueryFilter sliceQueryFilter=new SliceQueryFilter(columnSlices,false,Integer.MAX_VALUE);
  QueryFilter queryFilter=new QueryFilter(dk,tableMapper.table.name,sliceQueryFilter,filter.timestamp);
  ColumnFamily columnFamily=tableMapper.table.getColumnFamily(queryFilter);
  return getRows(columnFamily);
}",0.3753554502369668
33482,"public final Composite start(CellName cellName){
  CBuilder builder=tableMapper.clusteringCType.builder();
  for (int i=0; i < cellName.clusteringSize(); i++) {
    ByteBuffer component=cellName.get(i);
    builder.add(component);
  }
  return builder.build();
}","private final Composite start(CellName cellName){
  CBuilder builder=tableMapper.clusteringCType.builder();
  for (int i=0; i < cellName.clusteringSize(); i++) {
    ByteBuffer component=cellName.get(i);
    builder.add(component);
  }
  return builder.build();
}",0.979047619047619
33483,"public final Composite end(CellName cellName){
  return start(cellName).withEOC(Composite.EOC.END);
}","private final Composite end(CellName cellName){
  return start(cellName).withEOC(Composite.EOC.END);
}",0.955665024630542
33484,"public List<Row> fetchRows() throws IOException {
  List<Row> rows=new ArrayList<>();
  TreeMultimap<ByteBuffer,IndexEntryCollector.IndexEntry> docs=resultMapper.collector.docsByRowKey(table.metadata.getKeyValidator());
  NavigableSet<ByteBuffer> rowKeys=docs.keySet();
  for (  ByteBuffer rowKey : rowKeys) {
    if (columnsCount >= limit)     break;
    ArrayList<IndexEntryCollector.IndexEntry> entries=new ArrayList<>(docs.get(rowKey));
    final DecoratedKey dk=table.partitioner.decorateKey(rowKey);
    if (!resultMapper.filter.dataRange.contains(dk)) {
      if (SearchSupport.logger.isTraceEnabled()) {
        SearchSupport.logger.trace(""String_Node_Str"",dk.getToken());
      }
      continue;
    }
    final ColumnFamily fullSlice=resultMapper.fetchRangeSlice(entries,dk);
    for (    IndexEntryCollector.IndexEntry input : entries) {
      if (columnsCount >= limit)       break;
      CellName cellName=resultMapper.clusteringKey(input.primaryKey);
      if (!resultMapper.filter.columnFilter(dk.getKey()).maySelectPrefix(table.getComparator(),cellName.start())) {
        continue;
      }
      ColumnFamily data=resultMapper.fetchSingleRow(dk,fullSlice,cellName);
      if (resultMapper.searchSupport.deleteIfNotLatest(dk,data.maxTimestamp(),input.pkName,data))       continue;
      float score=input.score;
      ColumnFamily cleanColumnFamily=resultMapper.showScore ? scored(score,data) : data;
      resultMapper.removeDroppedColumns(cleanColumnFamily);
      rows.add(new Row(dk,cleanColumnFamily));
      columnsCount++;
    }
  }
  return rows;
}","public List<Row> fetchRows() throws IOException {
  List<Row> rows=new ArrayList<>();
  TreeMultimap<ByteBuffer,IndexEntryCollector.IndexEntry> docs=resultMapper.collector.docsByRowKey(table.metadata.getKeyValidator());
  NavigableSet<ByteBuffer> rowKeys=docs.keySet();
  for (  ByteBuffer rowKey : rowKeys) {
    ArrayList<IndexEntryCollector.IndexEntry> entries=new ArrayList<>(docs.get(rowKey));
    final DecoratedKey dk=table.partitioner.decorateKey(rowKey);
    if (!resultMapper.filter.dataRange.contains(dk)) {
      if (SearchSupport.logger.isTraceEnabled()) {
        SearchSupport.logger.trace(""String_Node_Str"",dk.getToken());
      }
      continue;
    }
    final Map<CellName,ColumnFamily> fullSlice=resultMapper.fetchRangeSlice(entries,dk);
    for (    IndexEntryCollector.IndexEntry input : entries) {
      CellName cellName=resultMapper.makeClusteringKey(input.primaryKey);
      if (!resultMapper.filter.columnFilter(dk.getKey()).maySelectPrefix(table.getComparator(),cellName.start())) {
        continue;
      }
      ColumnFamily data=fullSlice.get(cellName);
      if (data == null || resultMapper.searchSupport.deleteIfNotLatest(dk,data.maxTimestamp(),input.pkName,data))       continue;
      float score=input.score;
      ColumnFamily cleanColumnFamily=resultMapper.showScore ? scored(score,data) : data;
      resultMapper.removeDroppedColumns(cleanColumnFamily);
      rows.add(new Row(dk,cleanColumnFamily));
      columnsCount++;
      if (columnsCount >= limit)       break;
    }
    if (columnsCount >= limit)     break;
  }
  return rows;
}",0.5496667724531895
33485,"private void addCell(ByteBuffer rowKey,Map<String,ByteBuffer> pkNames,Map<String,List<Field>> primaryKeysVsFields,Map<String,Long> timestamps,Cell cell){
  CellName cellName=cell.name();
  ColumnIdentifier cql3ColName=cellName.cql3ColumnName(tableMapper.cfMetaData);
  String actualColName=cql3ColName.toString();
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"",actualColName);
  CellName clusteringKey=tableMapper.extractClusteringKey(cell.name());
  ByteBuffer primaryKeyBuff=tableMapper.primaryKey(rowKey,clusteringKey);
  String primaryKey=tableMapper.primaryKeyType.getString(primaryKeyBuff);
  pkNames.put(primaryKey,primaryKeyBuff);
  List<Field> fields=primaryKeysVsFields.get(primaryKey);
  if (fields == null) {
    if (logger.isWarnEnabled()) {
      logger.warn(""String_Node_Str"",primaryKey);
    }
    fields=new LinkedList<>();
    primaryKeysVsFields.put(primaryKey,fields);
    timestamps.put(primaryKey,0l);
    addPartitionKeyFields(rowKey,timestamps,cell.timestamp(),primaryKey,fields);
    addClusteringKeyFields(clusteringKey,timestamps,cell.timestamp(),primaryKey,fields);
  }
  ColumnDefinition columnDefinition=tableMapper.cfMetaData.getColumnDefinition(cql3ColName);
  if (options.shouldIndex(actualColName)) {
    long existingTS=timestamps.get(primaryKey);
    timestamps.put(primaryKey,Math.max(existingTS,cell.timestamp()));
    addFields(cell,actualColName,fields,columnDefinition);
  }
}","private void addCell(ByteBuffer rowKey,Map<String,ByteBuffer> pkNames,Map<String,List<Field>> primaryKeysVsFields,Map<String,Long> timestamps,Cell cell){
  CellName cellName=cell.name();
  ColumnIdentifier cql3ColName=cellName.cql3ColumnName(tableMapper.cfMetaData);
  String actualColName=cql3ColName.toString();
  if (logger.isTraceEnabled())   logger.trace(""String_Node_Str"",actualColName);
  CellName clusteringKey=tableMapper.extractClusteringKey(cell.name());
  ByteBuffer primaryKeyBuff=tableMapper.primaryKey(rowKey,clusteringKey);
  String primaryKey=tableMapper.primaryKeyType.getString(primaryKeyBuff);
  pkNames.put(primaryKey,primaryKeyBuff);
  List<Field> fields=primaryKeysVsFields.get(primaryKey);
  if (fields == null) {
    if (logger.isTraceEnabled()) {
      logger.trace(""String_Node_Str"",primaryKey);
    }
    fields=new LinkedList<>();
    primaryKeysVsFields.put(primaryKey,fields);
    timestamps.put(primaryKey,0l);
    addPartitionKeyFields(rowKey,timestamps,cell.timestamp(),primaryKey,fields);
    addClusteringKeyFields(clusteringKey,timestamps,cell.timestamp(),primaryKey,fields);
  }
  ColumnDefinition columnDefinition=tableMapper.cfMetaData.getColumnDefinition(cql3ColName);
  if (options.shouldIndex(actualColName)) {
    long existingTS=timestamps.get(primaryKey);
    timestamps.put(primaryKey,Math.max(existingTS,cell.timestamp()));
    addFields(cell,actualColName,fields,columnDefinition);
  }
}",0.9937282229965156
33486,"@Override public List<Row> doWithSearcher(org.apache.lucene.search.IndexSearcher searcher) throws Exception {
  Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
  List<Row> results;
  if (search == null) {
    results=new ArrayList<>();
  }
 else {
    Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
    Function function=search.function(options);
    Query query=search.query(options);
    int resultsLimit=searcher.getIndexReader().maxDoc();
    if (function.shouldLimit()) {
      if (resultsLimit == 0) {
        resultsLimit=1;
      }
      resultsLimit=Math.min(filter.currentLimit() + 1,resultsLimit);
    }
    function.init(options);
    IndexEntryCollector collector=new IndexEntryCollector(function,search,options,resultsLimit);
    searcher.search(query,collector);
    timer2.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
    if (SearchSupport.logger.isDebugEnabled()) {
      SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.getTotalHits()));
    }
    ResultMapper iter=new ResultMapper(tableMapper,searchSupport,filter,collector,function.shouldTryScoring() && search.isShowScore());
    Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
    results=function.process(iter,baseCfs,currentIndex);
    timer3.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
  }
  timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  return results;
}","@Override public List<Row> doWithSearcher(org.apache.lucene.search.IndexSearcher searcher) throws Exception {
  Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
  List<Row> results;
  if (search == null) {
    results=new ArrayList<>();
  }
 else {
    Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
    Function function=search.function(options);
    Query query=search.query(options);
    int resultsLimit=searcher.getIndexReader().maxDoc();
    if (function.shouldLimit()) {
      if (resultsLimit == 0) {
        resultsLimit=1;
      }
      resultsLimit=Math.min(filter.currentLimit() + 1,resultsLimit);
    }
    function.init(options);
    IndexEntryCollector collector=new IndexEntryCollector(function,search,options,resultsLimit);
    searcher.search(query,collector);
    timer2.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
    if (SearchSupport.logger.isDebugEnabled()) {
      SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.getTotalHits()));
    }
    ResultMapper iter=new ResultMapper(tableMapper,searchSupport,filter,collector,function.shouldTryScoring() && search.isShowScore());
    Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
    results=function.process(iter,baseCfs,currentIndex);
    timer3.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  }
  timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  return results;
}",0.988628762541806
33487,"protected List<Row> getRows(final ExtendedFilter filter,final Search search){
  final SearchSupport searchSupport=this;
  AbstractBounds<RowPosition> keyRange=filter.dataRange.keyRange();
  final Range<Token> filterRange=new Range<>(keyRange.left.getToken(),keyRange.right.getToken());
  final boolean isSingleToken=filterRange.left.equals(filterRange.right);
  final boolean isFullRange=isSingleToken && baseCfs.partitioner.getMinimumToken().equals(filterRange.left);
  SearcherCallback<List<Row>> sc=new SearcherCallback<List<Row>>(){
    @Override public List<Row> doWithSearcher(    org.apache.lucene.search.IndexSearcher searcher) throws Exception {
      Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
      List<Row> results;
      if (search == null) {
        results=new ArrayList<>();
      }
 else {
        Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
        Function function=search.function(options);
        Query query=search.query(options);
        int resultsLimit=searcher.getIndexReader().maxDoc();
        if (function.shouldLimit()) {
          if (resultsLimit == 0) {
            resultsLimit=1;
          }
          resultsLimit=Math.min(filter.currentLimit() + 1,resultsLimit);
        }
        function.init(options);
        IndexEntryCollector collector=new IndexEntryCollector(function,search,options,resultsLimit);
        searcher.search(query,collector);
        timer2.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
        if (SearchSupport.logger.isDebugEnabled()) {
          SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.getTotalHits()));
        }
        ResultMapper iter=new ResultMapper(tableMapper,searchSupport,filter,collector,function.shouldTryScoring() && search.isShowScore());
        Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
        results=function.process(iter,baseCfs,currentIndex);
        timer3.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
      }
      timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
      return results;
    }
    @Override public Range<Token> filterRange(){
      return filterRange;
    }
    @Override public boolean isSingleToken(){
      return isSingleToken;
    }
    @Override public boolean isFullRange(){
      return isFullRange;
    }
  }
;
  return currentIndex.search(sc);
}","protected List<Row> getRows(final ExtendedFilter filter,final Search search){
  final SearchSupport searchSupport=this;
  AbstractBounds<RowPosition> keyRange=filter.dataRange.keyRange();
  final Range<Token> filterRange=new Range<>(keyRange.left.getToken(),keyRange.right.getToken());
  final boolean isSingleToken=filterRange.left.equals(filterRange.right);
  final boolean isFullRange=isSingleToken && baseCfs.partitioner.getMinimumToken().equals(filterRange.left);
  SearcherCallback<List<Row>> sc=new SearcherCallback<List<Row>>(){
    @Override public List<Row> doWithSearcher(    org.apache.lucene.search.IndexSearcher searcher) throws Exception {
      Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
      List<Row> results;
      if (search == null) {
        results=new ArrayList<>();
      }
 else {
        Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
        Function function=search.function(options);
        Query query=search.query(options);
        int resultsLimit=searcher.getIndexReader().maxDoc();
        if (function.shouldLimit()) {
          if (resultsLimit == 0) {
            resultsLimit=1;
          }
          resultsLimit=Math.min(filter.currentLimit() + 1,resultsLimit);
        }
        function.init(options);
        IndexEntryCollector collector=new IndexEntryCollector(function,search,options,resultsLimit);
        searcher.search(query,collector);
        timer2.endLogTime(""String_Node_Str"" + collector.getTotalHits() + ""String_Node_Str"");
        if (SearchSupport.logger.isDebugEnabled()) {
          SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.getTotalHits()));
        }
        ResultMapper iter=new ResultMapper(tableMapper,searchSupport,filter,collector,function.shouldTryScoring() && search.isShowScore());
        Utils.SimpleTimer timer3=Utils.getStartedTimer(SearchSupport.logger);
        results=function.process(iter,baseCfs,currentIndex);
        timer3.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
      }
      timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
      return results;
    }
    @Override public Range<Token> filterRange(){
      return filterRange;
    }
    @Override public boolean isSingleToken(){
      return isSingleToken;
    }
    @Override public boolean isFullRange(){
      return isFullRange;
    }
  }
;
  return currentIndex.search(sc);
}",0.993029930299303
33488,"@Override public List<Row> process(final ResultMapper resultMapper,final ColumnFamilyStore table,RowIndex currentIndex) throws Exception {
  Set<String> automatonFields=new HashSet<>();
  for (int i=0; i < states.length; i++) {
    automatonFields.add(states[i].getAutomatonField());
  }
  final Map<String,Integer> positions=aggregateFunction.getPositions();
  int position=positions.size();
  for (  String field : automatonFields) {
    aggregateFunction.getPositions().put(field,position++);
  }
  aggregateFunction.getPositions().put(MATCH_ID,position++);
  aggregateFunction.getPositions().put(PATTERN_ID,position++);
  final boolean[] allExpressions=new boolean[positions.size()];
  boolean[] afExpressions=aggregateFunction.getSimpleExpressions();
  for (int i=0; i < afExpressions.length; i++) {
    allExpressions[i]=afExpressions[i];
  }
  for (int i=afExpressions.length - 1; i < allExpressions.length; i++) {
    allExpressions[i]=true;
  }
  aggregateFunction.simpleExpressions=allExpressions;
  TreeMultimap<ByteBuffer,IndexEntryCollector.IndexEntry> docs=resultMapper.collector.docsByRowKey(table.metadata.getKeyValidator());
  NavigableSet<ByteBuffer> rowKeys=docs.keySet();
  List<Tuple> allMatches=new ArrayList<>();
  for (  ByteBuffer rowKey : rowKeys) {
    final DecoratedKey dk=table.partitioner.decorateKey(rowKey);
    ArrayList<IndexEntryCollector.IndexEntry> entries=new ArrayList<>(docs.get(rowKey));
    final ColumnFamily fullSlice=resultMapper.fetchRangeSlice(entries,dk);
    List<Tuple> tuples=Lists.transform(entries,new com.google.common.base.Function<IndexEntryCollector.IndexEntry,Tuple>(){
      @Override public Tuple apply(      IndexEntryCollector.IndexEntry input){
        CellName cellName=resultMapper.clusteringKey(input.primaryKey);
        ColumnFamily cf=resultMapper.fetchSingleRow(dk,fullSlice,cellName);
        Tuple tuple=aggregateFunction.createTuple(options);
        resultMapper.tableMapper.load(positions,tuple,new Row(dk,cf));
        return tuple;
      }
    }
);
    ListIterator<Tuple> iter=tuples.listIterator();
    allMatches.addAll(matchPartition(maxMatches,iter));
  }
  for (  Tuple match : allMatches) {
    aggregateFunction.getGroup().addTuple(match);
  }
  Row row=resultMapper.tableMapper.getRowWithMetaColumn(aggregateFunction.getGroup().toByteBuffer());
  return Collections.singletonList(row);
}","@Override public List<Row> process(final ResultMapper resultMapper,final ColumnFamilyStore table,RowIndex currentIndex) throws Exception {
  Set<String> automatonFields=new HashSet<>();
  for (int i=0; i < states.length; i++) {
    automatonFields.add(states[i].getAutomatonField());
  }
  final Map<String,Integer> positions=aggregateFunction.getPositions();
  int position=positions.size();
  for (  String field : automatonFields) {
    aggregateFunction.getPositions().put(field,position++);
  }
  aggregateFunction.getPositions().put(MATCH_ID,position++);
  aggregateFunction.getPositions().put(PATTERN_ID,position++);
  final boolean[] allExpressions=new boolean[positions.size()];
  boolean[] afExpressions=aggregateFunction.getSimpleExpressions();
  for (int i=0; i < afExpressions.length; i++) {
    allExpressions[i]=afExpressions[i];
  }
  for (int i=afExpressions.length - 1; i < allExpressions.length; i++) {
    allExpressions[i]=true;
  }
  aggregateFunction.simpleExpressions=allExpressions;
  TreeMultimap<ByteBuffer,IndexEntryCollector.IndexEntry> docs=resultMapper.collector.docsByRowKey(table.metadata.getKeyValidator());
  NavigableSet<ByteBuffer> rowKeys=docs.keySet();
  List<Tuple> allMatches=new ArrayList<>();
  for (  ByteBuffer rowKey : rowKeys) {
    final DecoratedKey dk=table.partitioner.decorateKey(rowKey);
    ArrayList<IndexEntryCollector.IndexEntry> entries=new ArrayList<>(docs.get(rowKey));
    final Map<CellName,ColumnFamily> fullSlice=resultMapper.fetchRangeSlice(entries,dk);
    List<Tuple> tuples=Lists.transform(entries,new com.google.common.base.Function<IndexEntryCollector.IndexEntry,Tuple>(){
      @Override public Tuple apply(      IndexEntryCollector.IndexEntry input){
        CellName cellName=resultMapper.makeClusteringKey(input.primaryKey);
        ColumnFamily cf=fullSlice.get(cellName);
        if (cf != null) {
          Tuple tuple=aggregateFunction.createTuple(options);
          resultMapper.tableMapper.load(positions,tuple,new Row(dk,cf));
          return tuple;
        }
        return null;
      }
    }
);
    ListIterator<Tuple> iter=tuples.listIterator();
    allMatches.addAll(matchPartition(maxMatches,iter));
  }
  for (  Tuple match : allMatches) {
    if (match != null)     aggregateFunction.getGroup().addTuple(match);
  }
  Row row=resultMapper.tableMapper.getRowWithMetaColumn(aggregateFunction.getGroup().toByteBuffer());
  return Collections.singletonList(row);
}",0.9077720207253888
33489,"@Override public Tuple apply(IndexEntryCollector.IndexEntry input){
  CellName cellName=resultMapper.clusteringKey(input.primaryKey);
  ColumnFamily cf=resultMapper.fetchSingleRow(dk,fullSlice,cellName);
  Tuple tuple=aggregateFunction.createTuple(options);
  resultMapper.tableMapper.load(positions,tuple,new Row(dk,cf));
  return tuple;
}","@Override public Tuple apply(IndexEntryCollector.IndexEntry input){
  CellName cellName=resultMapper.makeClusteringKey(input.primaryKey);
  ColumnFamily cf=fullSlice.get(cellName);
  if (cf != null) {
    Tuple tuple=aggregateFunction.createTuple(options);
    resultMapper.tableMapper.load(positions,tuple,new Row(dk,cf));
    return tuple;
  }
  return null;
}",0.49002849002849
33490,"@Test public void shouldIndexPerRow() throws Exception {
  try {
    createKS(keyspace);
    createTableAndIndexForRow();
    countResults(""String_Node_Str"",""String_Node_Str"",false,true);
    String home=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    String browse=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1);
    String buy=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    String matchPattern=pattern(Arrays.asList(home,browse,buy));
    String aggregate=aggregate(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    String fap=patternAggregate(matchPattern,aggregate);
    countResults(""String_Node_Str"",""String_Node_Str"" + fap + ""String_Node_Str"",true);
  }
  finally {
    dropTable(keyspace,""String_Node_Str"");
    dropKS(keyspace);
  }
}","@Test public void shouldIndexPerRow() throws Exception {
  try {
    createKS(keyspace);
    createTableAndIndexForRow();
    countResults(""String_Node_Str"",""String_Node_Str"",false,true);
    String home=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    String browse=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",1);
    String buy=state(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",null);
    String matchPattern=pattern(Arrays.asList(home,browse,buy));
    String aggregate=aggregate(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true,""String_Node_Str"");
    String fap=patternAggregate(matchPattern,aggregate);
    countResults(""String_Node_Str"",""String_Node_Str"" + fap + ""String_Node_Str"",true);
    String matchPattern2=pattern(Arrays.asList(home,browse));
    String aggregate2=aggregate(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false,""String_Node_Str"");
    String fap2=patternAggregate(matchPattern2,aggregate2);
    countResults(""String_Node_Str"",""String_Node_Str"" + fap2 + ""String_Node_Str"",true);
  }
  finally {
    dropTable(keyspace,""String_Node_Str"");
    dropKS(keyspace);
  }
}",0.8476506881822496
33491,"public static ByteBuffer defaultValue(AbstractType type){
  CQL3Type cqlType=type.asCQL3Type();
  if (cqlType == CQL3Type.Native.INT) {
    return ByteBufferUtil.bytes(0);
  }
 else   if (cqlType == CQL3Type.Native.VARINT || cqlType == CQL3Type.Native.BIGINT || cqlType == CQL3Type.Native.COUNTER) {
    return ByteBufferUtil.bytes(0L);
  }
 else   if (cqlType == CQL3Type.Native.DECIMAL || cqlType == CQL3Type.Native.DOUBLE) {
    return ByteBufferUtil.bytes(0D);
  }
 else   if (cqlType == CQL3Type.Native.FLOAT) {
    return ByteBufferUtil.bytes(0F);
  }
 else   if (cqlType == CQL3Type.Native.TEXT || cqlType == CQL3Type.Native.VARCHAR) {
    return ByteBufferUtil.bytes(""String_Node_Str"");
  }
 else   if (cqlType == CQL3Type.Native.UUID) {
    return ByteBufferUtil.bytes(UUID.randomUUID());
  }
 else   if (cqlType == CQL3Type.Native.TIMEUUID) {
    return ByteBufferUtil.bytes(UUID.randomUUID());
  }
 else   if (cqlType == CQL3Type.Native.TIMESTAMP) {
    return ByteBufferUtil.bytes(0L);
  }
 else   if (cqlType == CQL3Type.Native.BOOLEAN) {
    return BooleanType.instance.decompose(false);
  }
 else {
    return ByteBufferUtil.EMPTY_BYTE_BUFFER;
  }
}","public static ByteBuffer defaultValue(AbstractType type){
  CQL3Type cqlType=type.asCQL3Type();
  if (cqlType == CQL3Type.Native.INT) {
    return ByteBufferUtil.bytes(0);
  }
 else   if (cqlType == CQL3Type.Native.VARINT || cqlType == CQL3Type.Native.BIGINT || cqlType == CQL3Type.Native.COUNTER) {
    return ByteBufferUtil.bytes(0L);
  }
 else   if (cqlType == CQL3Type.Native.DECIMAL || cqlType == CQL3Type.Native.DOUBLE) {
    return ByteBufferUtil.bytes(0D);
  }
 else   if (cqlType == CQL3Type.Native.FLOAT) {
    return ByteBufferUtil.bytes(0F);
  }
 else   if (cqlType == CQL3Type.Native.TEXT || cqlType == CQL3Type.Native.VARCHAR) {
    return ByteBufferUtil.bytes(""String_Node_Str"");
  }
 else   if (cqlType == CQL3Type.Native.UUID) {
    return ByteBufferUtil.bytes(UUID.randomUUID());
  }
 else   if (cqlType == CQL3Type.Native.TIMEUUID) {
    return ByteBufferUtil.bytes(UUIDGen.getTimeUUID(0));
  }
 else   if (cqlType == CQL3Type.Native.TIMESTAMP) {
    return ByteBufferUtil.bytes(0L);
  }
 else   if (cqlType == CQL3Type.Native.BOOLEAN) {
    return BooleanType.instance.decompose(false);
  }
 else {
    return ByteBufferUtil.EMPTY_BYTE_BUFFER;
  }
}",0.99271324474925
33492,"public void logTime(String prefix){
  if (logger.isDebugEnabled())   logger.debug(String.format(""String_Node_Str""),prefix,time());
}","public void logTime(String prefix){
  if (logger.isWarnEnabled())   logger.warn(String.format(""String_Node_Str""),prefix,time());
}",0.931297709923664
33493,"@Override protected Row computeNext(){
  DataRange range=filter.dataRange;
  SliceQueryFilter sliceQueryFilter=(SliceQueryFilter)filter.dataRange.columnFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER);
  while (indexIterator.hasNext()) {
    try {
      IndexEntryCollector.IndexEntry entry=indexIterator.next();
      String pkNameString=entry.pkName;
      ByteBuffer rowKey=entry.rowKey;
      long ts=entry.timestamp;
      float score=entry.score;
      Pair<DecoratedKey,IDiskAtomFilter> keyAndFilter=getFilterAndKey(rowKey,sliceQueryFilter);
      if (keyAndFilter == null) {
        continue;
      }
      DecoratedKey dk=keyAndFilter.left;
      if (!range.contains(dk)) {
        if (SearchSupport.logger.isTraceEnabled()) {
          SearchSupport.logger.trace(""String_Node_Str"",dk.token);
        }
        continue;
      }
      if (SearchSupport.logger.isTraceEnabled()) {
        SearchSupport.logger.trace(""String_Node_Str"",dk);
      }
      Row row=getRow(pkNameString,keyAndFilter.right,dk,ts,score);
      if (row == null) {
        if (SearchSupport.logger.isTraceEnabled())         SearchSupport.logger.trace(""String_Node_Str"");
        continue;
      }
      return row;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return endOfData();
}","@Override protected Row computeNext(){
  DataRange range=filter.dataRange;
  SliceQueryFilter sliceQueryFilter=(SliceQueryFilter)filter.dataRange.columnFilter(ByteBufferUtil.EMPTY_BYTE_BUFFER);
  while (indexIterator.hasNext() && columnsCount <= limit) {
    try {
      IndexEntryCollector.IndexEntry entry=indexIterator.next();
      String pkNameString=entry.pkName;
      ByteBuffer rowKey=entry.rowKey;
      long ts=entry.timestamp;
      float score=entry.score;
      Pair<DecoratedKey,IDiskAtomFilter> keyAndFilter=getFilterAndKey(rowKey,sliceQueryFilter);
      if (keyAndFilter == null) {
        continue;
      }
      DecoratedKey dk=keyAndFilter.left;
      if (!range.contains(dk)) {
        if (SearchSupport.logger.isTraceEnabled()) {
          SearchSupport.logger.trace(""String_Node_Str"",dk.token);
        }
        continue;
      }
      if (SearchSupport.logger.isTraceEnabled()) {
        SearchSupport.logger.trace(""String_Node_Str"",dk);
      }
      Row row=getRow(pkNameString,keyAndFilter.right,dk,ts,score);
      if (row == null) {
        if (SearchSupport.logger.isTraceEnabled())         SearchSupport.logger.trace(""String_Node_Str"");
        continue;
      }
      columnsCount++;
      return row;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  return endOfData();
}",0.9821631878557876
33494,"public RowScanner(SearchSupport searchSupport,ColumnFamilyStore table,ExtendedFilter filter,Iterator<IndexEntryCollector.IndexEntry> indexIterator) throws Exception {
  this.searchSupport=searchSupport;
  this.table=table;
  this.filter=filter;
  this.indexIterator=indexIterator;
}","public RowScanner(SearchSupport searchSupport,ColumnFamilyStore table,ExtendedFilter filter,Iterator<IndexEntryCollector.IndexEntry> indexIterator) throws Exception {
  this.searchSupport=searchSupport;
  this.table=table;
  this.filter=filter;
  this.indexIterator=indexIterator;
  this.limit=filter.currentLimit();
}",0.94
33495,"@Override public List<Row> doWithSearcher(org.apache.lucene.search.IndexSearcher searcher) throws Exception {
  Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
  List<Row> results;
  if (search == null) {
    results=new ArrayList<>();
  }
 else {
    Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
    int maxResults=filter.maxRows();
    int limit=searcher.getIndexReader().maxDoc();
    if (limit == 0) {
      limit=1;
    }
    maxResults=Math.min(maxResults,limit);
    Query query=search.query(options);
    org.apache.lucene.search.SortField[] sort=search.usesSorting() ? search.sort(options) : null;
    IndexEntryCollector collector=new IndexEntryCollector(sort,maxResults);
    searcher.search(query,collector);
    timer2.endLogTime(""String_Node_Str"" + collector.totalHits + ""String_Node_Str"");
    if (SearchSupport.logger.isDebugEnabled()) {
      SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.totalHits));
    }
    ColumnFamilyStore.AbstractScanIterator iter=new RowScanner(searchSupport,baseCfs,filter,collector.docs().iterator());
    List<Row> inputToFunction=baseCfs.filter(iter,filter);
    Function function=search.function(options);
    return function.process(inputToFunction,customColumnFactory,baseCfs,currentIndex);
  }
  timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  return results;
}","@Override public List<Row> doWithSearcher(org.apache.lucene.search.IndexSearcher searcher) throws Exception {
  Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
  List<Row> results;
  if (search == null) {
    results=new ArrayList<>();
  }
 else {
    Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
    int resultsLimit=filter.currentLimit();
    int limit=searcher.getIndexReader().maxDoc();
    if (limit == 0) {
      limit=1;
    }
    resultsLimit=Math.min(resultsLimit,limit);
    Query query=search.query(options);
    org.apache.lucene.search.SortField[] sort=search.usesSorting() ? search.sort(options) : null;
    IndexEntryCollector collector=new IndexEntryCollector(sort,resultsLimit);
    searcher.search(query,collector);
    timer2.endLogTime(""String_Node_Str"" + collector.totalHits + ""String_Node_Str"");
    if (SearchSupport.logger.isDebugEnabled()) {
      SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.totalHits));
    }
    ColumnFamilyStore.AbstractScanIterator iter=new RowScanner(searchSupport,baseCfs,filter,collector.docs().iterator());
    List<Row> inputToFunction=baseCfs.filter(iter,filter);
    Function function=search.function(options);
    return function.process(inputToFunction,customColumnFactory,baseCfs,currentIndex);
  }
  timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
  return results;
}",0.9318587227970032
33496,"protected List<Row> getRows(final ExtendedFilter filter,final Search search){
  final SearchSupport searchSupport=this;
  SearcherCallback<List<Row>> sc=new SearcherCallback<List<Row>>(){
    @Override public List<Row> doWithSearcher(    org.apache.lucene.search.IndexSearcher searcher) throws Exception {
      Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
      List<Row> results;
      if (search == null) {
        results=new ArrayList<>();
      }
 else {
        Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
        int maxResults=filter.maxRows();
        int limit=searcher.getIndexReader().maxDoc();
        if (limit == 0) {
          limit=1;
        }
        maxResults=Math.min(maxResults,limit);
        Query query=search.query(options);
        org.apache.lucene.search.SortField[] sort=search.usesSorting() ? search.sort(options) : null;
        IndexEntryCollector collector=new IndexEntryCollector(sort,maxResults);
        searcher.search(query,collector);
        timer2.endLogTime(""String_Node_Str"" + collector.totalHits + ""String_Node_Str"");
        if (SearchSupport.logger.isDebugEnabled()) {
          SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.totalHits));
        }
        ColumnFamilyStore.AbstractScanIterator iter=new RowScanner(searchSupport,baseCfs,filter,collector.docs().iterator());
        List<Row> inputToFunction=baseCfs.filter(iter,filter);
        Function function=search.function(options);
        return function.process(inputToFunction,customColumnFactory,baseCfs,currentIndex);
      }
      timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
      return results;
    }
  }
;
  return currentIndex.search(filter,sc);
}","protected List<Row> getRows(final ExtendedFilter filter,final Search search){
  final SearchSupport searchSupport=this;
  SearcherCallback<List<Row>> sc=new SearcherCallback<List<Row>>(){
    @Override public List<Row> doWithSearcher(    org.apache.lucene.search.IndexSearcher searcher) throws Exception {
      Utils.SimpleTimer timer=Utils.getStartedTimer(logger);
      List<Row> results;
      if (search == null) {
        results=new ArrayList<>();
      }
 else {
        Utils.SimpleTimer timer2=Utils.getStartedTimer(SearchSupport.logger);
        int resultsLimit=filter.currentLimit();
        int limit=searcher.getIndexReader().maxDoc();
        if (limit == 0) {
          limit=1;
        }
        resultsLimit=Math.min(resultsLimit,limit);
        Query query=search.query(options);
        org.apache.lucene.search.SortField[] sort=search.usesSorting() ? search.sort(options) : null;
        IndexEntryCollector collector=new IndexEntryCollector(sort,resultsLimit);
        searcher.search(query,collector);
        timer2.endLogTime(""String_Node_Str"" + collector.totalHits + ""String_Node_Str"");
        if (SearchSupport.logger.isDebugEnabled()) {
          SearchSupport.logger.debug(String.format(""String_Node_Str"",collector.totalHits));
        }
        ColumnFamilyStore.AbstractScanIterator iter=new RowScanner(searchSupport,baseCfs,filter,collector.docs().iterator());
        List<Row> inputToFunction=baseCfs.filter(iter,filter);
        Function function=search.function(options);
        return function.process(inputToFunction,customColumnFactory,baseCfs,currentIndex);
      }
      timer.endLogTime(""String_Node_Str"" + results.size() + ""String_Node_Str"");
      return results;
    }
  }
;
  return currentIndex.search(filter,sc);
}",0.9434176855274382
33497,"@Override public void insert(Iterable<Field> doc){
  if (logger.isDebugEnabled())   logger.debug(indexName + ""String_Node_Str"" + doc);
  try {
    latest=indexWriter.addDocument(doc);
    indexSearcherReferenceManager.maybeRefresh();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void insert(Iterable<Field> doc){
  if (logger.isDebugEnabled())   logger.debug(indexName + ""String_Node_Str"" + doc);
  try {
    latest=indexWriter.addDocument(doc);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9107142857142856
33498,"@Override public void delete(Term... terms){
  try {
    BooleanQuery q=new BooleanQuery();
    for (    Term t : terms) {
      if (logger.isDebugEnabled())       logger.debug(indexName + ""String_Node_Str"" + t);
      q.add(new TermQuery(t),BooleanClause.Occur.MUST);
    }
    latest=indexWriter.deleteDocuments(q);
    indexSearcherReferenceManager.maybeRefresh();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void delete(Term... terms){
  try {
    BooleanQuery q=new BooleanQuery();
    for (    Term t : terms) {
      if (logger.isDebugEnabled())       logger.debug(indexName + ""String_Node_Str"" + t);
      q.add(new TermQuery(t),BooleanClause.Occur.MUST);
    }
    latest=indexWriter.deleteDocuments(q);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9396135265700484
33499,"public static void setCurrentWebDriver(RemoteWebDriver driver){
  perThreadDriver.set(ThreadSafeDriver.makeThreadSafe(driver));
}","public static void setCurrentWebDriver(SeleniumDriver driver){
  perThreadDriver.set(ThreadSafeDriver.makeThreadSafe((RemoteWebDriver)driver));
}",0.8905109489051095
33500,"/** 
 * @return the browser which should be used in the test run giventhe program's parameter. If no browser is specified, PhantomJS is used as the only standard browser
 */
public Browser getTargetBrowser(){
  if (this.targetBrowser == null) {
    String browserProptery=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    this.targetBrowser=Browser.valueOf(browserProptery.trim().toUpperCase());
  }
  return this.targetBrowser;
}","/** 
 * @return the browser which should be used in the test run giventhe program's parameter. If no browser is specified, PhantomJS is used as the only standard browser
 */
public Browser getTargetBrowser(){
  if (this.targetBrowser == null) {
    String browserProperty=System.getProperty(""String_Node_Str"",""String_Node_Str"");
    this.targetBrowser=Browser.valueOf(browserProperty.trim().toUpperCase());
  }
  return this.targetBrowser;
}",0.9863945578231292
33501,"/** 
 * @return the initialized driver
 */
public RemoteWebDriver createNewDriver();","/** 
 * @return the initialized driver
 */
public SeleniumDriver createNewDriver();",0.9221556886227544
33502,"@Override public RemoteWebDriver createNewDriver(){
  return new ChromeDriver();
}","@Override public ChromeDriver createNewDriver(){
  return new ChromeDriver();
}",0.9192546583850932
33503,"public PhantomJSDriver createNewDriver(){
  System.out.println(""String_Node_Str"");
  File phantomJsExe=null;
  IllegalStateException downloadError=null;
  for (int i=retryDownload; i >= 0; i--) {
    try {
      phantomJsExe=downloadAndExtract();
      break;
    }
 catch (    IllegalStateException e) {
      downloadError=e;
      if (i != 0) {
        System.err.println(""String_Node_Str"" + downloadError);
        pause(5);
      }
    }
  }
  if (phantomJsExe == null) {
    throw new IllegalStateException(""String_Node_Str"",downloadError);
  }
  UnreachableBrowserException connectError=null;
  for (int i=retryConnect; i >= 0; i--) {
    try {
      return createNewPhantomJsDriver(phantomJsExe);
    }
 catch (    UnreachableBrowserException e) {
      connectError=e;
      if (i != 0) {
        System.err.println(""String_Node_Str"" + connectError);
        pause(5);
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"",connectError);
}","public SeleniumDriver createNewDriver(){
  System.out.println(""String_Node_Str"");
  File phantomJsExe=null;
  IllegalStateException downloadError=null;
  for (int i=retryDownload; i >= 0; i--) {
    try {
      phantomJsExe=downloadAndExtract();
      break;
    }
 catch (    IllegalStateException e) {
      downloadError=e;
      if (i != 0) {
        System.err.println(""String_Node_Str"" + downloadError);
        pause(5);
      }
    }
  }
  if (phantomJsExe == null) {
    throw new IllegalStateException(""String_Node_Str"",downloadError);
  }
  UnreachableBrowserException connectError=null;
  for (int i=retryConnect; i >= 0; i--) {
    try {
      return createNewPhantomJsDriver(phantomJsExe);
    }
 catch (    UnreachableBrowserException e) {
      connectError=e;
      if (i != 0) {
        System.err.println(""String_Node_Str"" + connectError);
        pause(5);
      }
    }
  }
  throw new IllegalStateException(""String_Node_Str"",connectError);
}",0.9922158796056044
33504,"private <T>Should verify(String message,Supplier<T> target,Predicate<T> predicate){
  String verification=""String_Node_Str"" + toString(selector) + ""String_Node_Str""+ message;
  System.out.println(""String_Node_Str"" + verification);
  Verification result=retry.verify(target,predicate);
  if (result == NOT_FOUND) {
    throw new AssertionError(""String_Node_Str"" + verification);
  }
  if ((not && (result != KO)) || (!not && (result != OK))) {
    throw new AssertionError(""String_Node_Str"" + verification);
  }
  return new Should(driver,selector,retry,false);
}","private <T>Should verify(String message,Supplier<T> target,Predicate<T> predicate){
  String verification=""String_Node_Str"" + toString(selector) + ""String_Node_Str""+ message;
  System.out.println(""String_Node_Str"" + verification);
  Verification result=retry.verify(target,not ? predicate.negate() : predicate);
  if (result == NOT_FOUND) {
    throw new AssertionError(""String_Node_Str"" + verification);
  }
  if (result == KO) {
    throw new AssertionError(""String_Node_Str"" + verification);
  }
  return new Should(driver,selector,retry,false);
}",0.9262589928057554
33505,"private static void writeTerminatorBlock(final OutputStream out,final SAMFormat samOutputFormat) throws IOException {
  if (SAMFormat.CRAM == samOutputFormat) {
    CramIO.issueEOF(CramVersions.DEFAULT_CRAM_VERSION,out);
  }
 else {
    out.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
  }
}","private static void writeTerminatorBlock(final OutputStream out,final SAMFormat samOutputFormat) throws IOException {
  if (SAMFormat.CRAM == samOutputFormat) {
    CramIO.issueEOF(CramVersions.DEFAULT_CRAM_VERSION,out);
  }
 else   if (SAMFormat.BAM == samOutputFormat) {
    out.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
  }
}",0.937888198757764
33506,"public long guessNextBGZFBlockStart(long beg,long end) throws IOException {
  byte[] arr=new byte[2 * 0xffff - 1];
  this.seekableInFile.seek(beg);
  int read=inFile.read(arr,0,Math.min((int)(end - beg),arr.length));
  if (read == -1) {
    return -1;
  }
  arr=Arrays.copyOf(arr,read);
  this.in=new ByteArraySeekableStream(arr);
  final BlockCompressedInputStream bgzf=new BlockCompressedInputStream(this.in);
  bgzf.setCheckCrcs(true);
  final int firstBGZFEnd=Math.min((int)(end - beg),0xffff);
  for (int pos=0; ; ) {
    pos=guessNextBGZFPos(pos,firstBGZFEnd);
    if (pos < 0)     return end;
    try {
      bgzf.seek((long)pos << 16);
    }
 catch (    Throwable e) {
      ++pos;
      continue;
    }
    return beg + pos;
  }
}","public long guessNextBGZFBlockStart(long beg,long end) throws IOException {
  byte[] arr=new byte[2 * 0xffff - 1];
  this.seekableInFile.seek(beg);
  int totalRead=0;
  for (int left=Math.min((int)(end - beg),arr.length); left > 0; ) {
    final int r=inFile.read(arr,totalRead,left);
    if (r < 0)     break;
    totalRead+=r;
    left-=r;
  }
  arr=Arrays.copyOf(arr,totalRead);
  this.in=new ByteArraySeekableStream(arr);
  final BlockCompressedInputStream bgzf=new BlockCompressedInputStream(this.in);
  bgzf.setCheckCrcs(true);
  final int firstBGZFEnd=Math.min((int)(end - beg),0xffff);
  for (int pos=0; ; ) {
    pos=guessNextBGZFPos(pos,firstBGZFEnd);
    if (pos < 0)     return end;
    try {
      bgzf.seek((long)pos << 16);
    }
 catch (    Throwable e) {
      ++pos;
      continue;
    }
    return beg + pos;
  }
}",0.8404322949777495
33507,"private void init(final OutputStream output,final SAMFileHeader header,final boolean writeHeader,final TaskAttemptContext ctx) throws IOException {
  origOutput=output;
  final URI referenceURI=URI.create(ctx.getConfiguration().get(CRAMInputFormat.REFERENCE_SOURCE_PATH_PROPERTY));
  refSource=new ReferenceSource(Paths.get(referenceURI));
  if (header != null) {
    cramContainerStream=new CRAMContainerStreamWriter(origOutput,null,refSource,header,HADOOP_BAM_PART_ID);
    if (writeHeader) {
      this.writeHeader(header);
    }
  }
}","private void init(final OutputStream output,final SAMFileHeader header,final boolean writeHeader,final TaskAttemptContext ctx) throws IOException {
  origOutput=output;
  this.writeHeader=writeHeader;
  final URI referenceURI=URI.create(ctx.getConfiguration().get(CRAMInputFormat.REFERENCE_SOURCE_PATH_PROPERTY));
  refSource=new ReferenceSource(Paths.get(referenceURI));
  if (header != null) {
    cramContainerStream=new CRAMContainerStreamWriter(origOutput,null,refSource,header,HADOOP_BAM_PART_ID);
    if (writeHeader) {
      this.writeHeader(header);
    }
  }
}",0.9711191335740073
33508,"protected void writeAlignment(final SAMRecord rec){
  if (null == cramContainerStream) {
    final SAMFileHeader header=rec.getHeader();
    if (header == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    cramContainerStream=new CRAMContainerStreamWriter(origOutput,null,refSource,header,HADOOP_BAM_PART_ID);
  }
  cramContainerStream.writeAlignment(rec);
}","protected void writeAlignment(final SAMRecord rec){
  if (null == cramContainerStream) {
    final SAMFileHeader header=rec.getHeader();
    if (header == null) {
      throw new RuntimeException(""String_Node_Str"");
    }
    if (writeHeader) {
      this.writeHeader(header);
    }
    cramContainerStream=new CRAMContainerStreamWriter(origOutput,null,refSource,header,HADOOP_BAM_PART_ID);
  }
  cramContainerStream.writeAlignment(rec);
}",0.9253365973072216
33509,"public void readSAMHeaderFrom(Path path,Configuration conf) throws IOException {
  this.header=SAMHeaderReader.readSAMHeaderFrom(path,conf);
}","public void readSAMHeaderFrom(InputStream in,Configuration conf){
  this.header=SAMHeaderReader.readSAMHeaderFrom(in,conf);
}",0.8314606741573034
33510,"public RecordWriter<K,SAMRecordWritable> getRecordWriter(TaskAttemptContext ctx,Path out) throws IOException {
  return new KeyIgnoringCRAMRecordWriter<K>(out,header,writeHeader,ctx);
}","public RecordWriter<K,SAMRecordWritable> getRecordWriter(TaskAttemptContext ctx,Path out) throws IOException {
  if (this.header == null)   throw new IOException(""String_Node_Str"");
  return new KeyIgnoringCRAMRecordWriter<K>(out,header,writeHeader,ctx);
}",0.8390022675736961
33511,"private int getCRAMRecordCount(final String cramFileName){
  final CRAMFileReader cramReader=new CRAMFileReader(new File(cramFileName),(File)null,testReferenceSource);
  final Iterator<SAMRecord> it=cramReader.getIterator();
  int recCount=0;
  while (it.hasNext()) {
    final SAMRecord rec=it.next();
    recCount++;
  }
  cramReader.close();
  return recCount;
}","private int getCRAMRecordCount(final String cramFileName){
  final CRAMFileReader cramReader=new CRAMFileReader(new File(cramFileName),(File)null,testReferenceSource);
  final Iterator<SAMRecord> it=cramReader.getIterator();
  int recCount=0;
  while (it.hasNext()) {
    it.next();
    recCount++;
  }
  cramReader.close();
  return recCount;
}",0.971830985915493
33512,"private int verifyCRAMContainerStream(final File containerStreamFile,final SAMFileHeader header,final ReferenceSource refSource) throws IOException {
  final ByteArrayInputStream mergedStream=mergeCRAMContainerStream(containerStreamFile,header,refSource);
  final CRAMFileReader resultCRAMReader=new CRAMFileReader(mergedStream,(SeekableStream)null,refSource,ValidationStringency.DEFAULT_STRINGENCY);
  final Iterator<SAMRecord> it=resultCRAMReader.getIterator();
  int actualCount=0;
  while (it.hasNext()) {
    final SAMRecord rec=it.next();
    actualCount++;
  }
  return actualCount;
}","private int verifyCRAMContainerStream(final File containerStreamFile,final SAMFileHeader header,final ReferenceSource refSource,final boolean writeHeader) throws IOException {
  final ByteArrayInputStream mergedStream=mergeCRAMContainerStream(containerStreamFile,header,refSource,writeHeader);
  final CRAMFileReader resultCRAMReader=new CRAMFileReader(mergedStream,(SeekableStream)null,refSource,ValidationStringency.DEFAULT_STRINGENCY);
  final Iterator<SAMRecord> it=resultCRAMReader.getIterator();
  int actualCount=0;
  while (it.hasNext()) {
    it.next();
    actualCount++;
  }
  return actualCount;
}",0.9516666666666668
33513,"@Test public void testCRAMRoundTrip() throws Exception {
  Path outputPath=doMapReduce(testCRAMFileName);
  File containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final ByteArrayInputStream cramStream=mergeCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource);
  final File outFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  outFile.deleteOnExit();
  Files.copy(cramStream,outFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
  outputPath=doMapReduce(outFile.getAbsolutePath());
  containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final int actualCount=verifyCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource);
  assertEquals(expectedRecordCount,actualCount);
}","@Test public void testCRAMRoundTrip() throws Exception {
  Path outputPath=doMapReduce(testCRAMFileName);
  File containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final ByteArrayInputStream cramStream=mergeCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource,true);
  final File outFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  outFile.deleteOnExit();
  Files.copy(cramStream,outFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
  outputPath=doMapReduce(outFile.getAbsolutePath());
  containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final int actualCount=verifyCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource,true);
  assertEquals(expectedRecordCount,actualCount);
}",0.9936708860759492
33514,"private ByteArrayInputStream mergeCRAMContainerStream(final File containerStreamFile,final SAMFileHeader header,final ReferenceSource refSource) throws IOException {
  final ByteArrayOutputStream cramOutputStream=new ByteArrayOutputStream();
  new SAMOutputPreparer().prepareForRecords(cramOutputStream,SAMFormat.CRAM,header);
  final ByteArrayOutputStream containerOutputStream=new ByteArrayOutputStream();
  Files.copy(containerStreamFile.toPath(),containerOutputStream);
  containerOutputStream.writeTo(cramOutputStream);
  final CRAMContainerStreamWriter containerStreamWriter=new CRAMContainerStreamWriter(cramOutputStream,null,refSource,header,""String_Node_Str"");
  containerStreamWriter.finish(true);
  cramOutputStream.close();
  return new ByteArrayInputStream(cramOutputStream.toByteArray());
}","private ByteArrayInputStream mergeCRAMContainerStream(final File containerStreamFile,final SAMFileHeader header,final ReferenceSource refSource,final boolean writeHeader) throws IOException {
  final ByteArrayOutputStream cramOutputStream=new ByteArrayOutputStream();
  if (writeHeader) {
    new SAMOutputPreparer().prepareForRecords(cramOutputStream,SAMFormat.CRAM,header);
  }
  final ByteArrayOutputStream containerOutputStream=new ByteArrayOutputStream();
  Files.copy(containerStreamFile.toPath(),containerOutputStream);
  containerOutputStream.writeTo(cramOutputStream);
  final CRAMContainerStreamWriter containerStreamWriter=new CRAMContainerStreamWriter(cramOutputStream,null,refSource,header,""String_Node_Str"");
  containerStreamWriter.finish(true);
  cramOutputStream.close();
  return new ByteArrayInputStream(cramOutputStream.toByteArray());
}",0.9680915111378688
33515,"@Test public void testCRAMOutput() throws Exception {
  final Path outputPath=doMapReduce(testCRAMFileName);
  final File containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final int actualCount=verifyCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource);
  assertEquals(expectedRecordCount,actualCount);
}","@Test public void testCRAMOutput() throws Exception {
  final Path outputPath=doMapReduce(testCRAMFileName);
  final File containerStreamFile=new File(new File(outputPath.toUri()),""String_Node_Str"");
  final int actualCount=verifyCRAMContainerStream(containerStreamFile,samFileHeader,testReferenceSource,true);
  assertEquals(expectedRecordCount,actualCount);
}",0.99302649930265
33516,"private Path doMapReduce(final String inputFile) throws Exception {
  final FileSystem fileSystem=FileSystem.get(conf);
  final Path inputPath=new Path(inputFile);
  final Path outputPath=fileSystem.makeQualified(new Path(""String_Node_Str""));
  fileSystem.delete(outputPath,true);
  final Job job=Job.getInstance(conf);
  FileInputFormat.setInputPaths(job,inputPath);
  job.setInputFormatClass(CRAMInputFormat.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(SAMRecordWritable.class);
  job.setOutputFormatClass(KeyIgnoringCRAMOutputFormat.class);
  job.setOutputKeyClass(LongWritable.class);
  job.setOutputValueClass(SAMRecordWritable.class);
  job.setNumReduceTasks(0);
  FileOutputFormat.setOutputPath(job,outputPath);
  final boolean success=job.waitForCompletion(true);
  assertTrue(success);
  return outputPath;
}","private Path doMapReduce(final String inputFile) throws Exception {
  final FileSystem fileSystem=FileSystem.get(conf);
  final Path inputPath=new Path(inputFile);
  final Path outputPath=fileSystem.makeQualified(new Path(""String_Node_Str""));
  fileSystem.delete(outputPath,true);
  final Job job=Job.getInstance(conf);
  FileInputFormat.setInputPaths(job,inputPath);
  job.setInputFormatClass(CRAMInputFormat.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(SAMRecordWritable.class);
  conf.set(CRAMTestNoHeaderOutputFormat.READ_HEADER_FROM_FILE,inputFile);
  job.setOutputFormatClass(CRAMTestNoHeaderOutputFormat.class);
  job.setOutputKeyClass(LongWritable.class);
  job.setOutputValueClass(SAMRecordWritable.class);
  job.setNumReduceTasks(0);
  FileOutputFormat.setOutputPath(job,outputPath);
  final boolean success=job.waitForCompletion(true);
  assertTrue(success);
  return outputPath;
}",0.917831190609279
33517,"@Override public boolean nextKeyValue() throws IOException {
  if (reader.getPosition() >= length)   return false;
  final String line=reader.readLine();
  if (line == null)   return false;
  final VariantContext v=codec.decode(line);
  Integer chromIdx=contigDict.get(v.getChr());
  if (chromIdx == null)   chromIdx=(int)MurmurHash3.murmurhash3(v.getChr(),0);
  key.set((long)chromIdx << 32 | (long)(v.getStart() - 1));
  vc.set(v);
  return true;
}","@Override public boolean nextKeyValue() throws IOException {
  if (!it.hasNext())   return false;
  final String line=it.next();
  final VariantContext v=codec.decode(line);
  Integer chromIdx=contigDict.get(v.getChr());
  if (chromIdx == null)   chromIdx=(int)MurmurHash3.murmurhash3(v.getChr(),0);
  key.set((long)chromIdx << 32 | (long)(v.getStart() - 1));
  vc.set(v);
  return true;
}",0.8748510131108462
33518,"@Override public void initialize(InputSplit spl,TaskAttemptContext ctx) throws IOException {
  final FileSplit split=(FileSplit)spl;
  this.length=split.getLength();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(ContextUtil.getConfiguration(ctx));
  final FSDataInputStream ins=fs.open(file);
  reader=new AsciiLineReader(ins);
  final Object h=codec.readHeader(new AsciiLineReaderIterator(reader));
  if (!(h instanceof VCFHeader))   throw new IOException(""String_Node_Str"" + file);
  contigDict.clear();
  int i=0;
  for (  final VCFContigHeaderLine contig : ((VCFHeader)h).getContigLines())   contigDict.put(contig.getID(),i++);
  final long start=split.getStart();
  if (start != 0) {
    ins.seek(start - 1);
    reader=new AsciiLineReader(ins);
    reader.readLine();
  }
}","@Override public void initialize(InputSplit spl,TaskAttemptContext ctx) throws IOException {
  final FileSplit split=(FileSplit)spl;
  this.length=split.getLength();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(ContextUtil.getConfiguration(ctx));
  final FSDataInputStream ins=fs.open(file);
  reader=new AsciiLineReader(ins);
  it=new AsciiLineReaderIterator(reader);
  final Object h=codec.readHeader(it);
  if (!(h instanceof FeatureCodecHeader) || !(((FeatureCodecHeader)h).getHeaderValue() instanceof VCFHeader))   throw new IOException(""String_Node_Str"" + file);
  final VCFHeader header=(VCFHeader)((FeatureCodecHeader)h).getHeaderValue();
  contigDict.clear();
  int i=0;
  for (  final VCFContigHeaderLine contig : header.getContigLines())   contigDict.put(contig.getID(),i++);
  final long start=split.getStart();
  if (start != 0) {
    ins.seek(start - 1);
    reader=new AsciiLineReader(ins);
    it=new AsciiLineReaderIterator(reader);
  }
 else {
    long current_pos=it.getPosition();
    ins.seek(0);
    reader=new AsciiLineReader(ins);
    it=new AsciiLineReaderIterator(reader);
    while (it.hasNext() && it.getPosition() <= current_pos && it.peek().startsWith(""String_Node_Str"")) {
      it.next();
    }
    if (!it.hasNext() || it.getPosition() > current_pos)     throw new IOException(""String_Node_Str"" + file);
  }
}",0.6856095325389551
33519,"public static VCFHeader readHeaderFrom(final SeekableStream in) throws IOException {
  Object header=null;
  final long initialPos=in.position();
  try {
    header=new VCFCodec().readHeader(new AsciiLineReaderIterator(new AsciiLineReader(in)));
  }
 catch (  TribbleException e) {
    System.err.println(""String_Node_Str"" + e.toString());
    in.seek(initialPos);
    InputStream bin=new BufferedInputStream(in);
    if (BlockCompressedInputStream.isValidFile(bin))     bin=new BlockCompressedInputStream(bin);
    header=new BCF2Codec().readHeader(new PositionalBufferedStream(bin)).getHeaderValue();
  }
  if (!(header instanceof VCFHeader))   throw new IOException(""String_Node_Str"");
  return (VCFHeader)header;
}","public static VCFHeader readHeaderFrom(final SeekableStream in) throws IOException {
  Object headerCodec=null;
  Object header=null;
  final long initialPos=in.position();
  try {
    headerCodec=new VCFCodec().readHeader(new AsciiLineReaderIterator(new AsciiLineReader(in)));
  }
 catch (  TribbleException e) {
    System.err.println(""String_Node_Str"" + e.toString());
    in.seek(initialPos);
    InputStream bin=new BufferedInputStream(in);
    if (BlockCompressedInputStream.isValidFile(bin))     bin=new BlockCompressedInputStream(bin);
    headerCodec=new BCF2Codec().readHeader(new PositionalBufferedStream(bin));
  }
  if (!(headerCodec instanceof FeatureCodecHeader))   throw new IOException(""String_Node_Str"");
  header=((FeatureCodecHeader)headerCodec).getHeaderValue();
  return (VCFHeader)header;
}",0.9131286740692358
33520,"@Override protected int run(final CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  final Path outPath=new Path(args.get(0));
  final List<String> ins=args.subList(1,args.size());
  final boolean verbose=parser.getBoolean(verboseOpt);
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt),""String_Node_Str"");
  if (stringency == null)   return 3;
  final Configuration conf=getConf();
  final List<Path> inputs=new ArrayList<Path>(ins.size());
  for (  final String in : ins) {
    try {
      final Path p=new Path(in);
      for (      final FileStatus fstat : p.getFileSystem(conf).globStatus(p))       inputs.add(fstat.getPath());
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",in,e.getMessage());
    }
  }
  final Path input0=inputs.get(0);
  SAMFormat format=SAMFormat.inferFromFilePath(input0);
  if (format == null) {
    try {
      format=SAMFormat.inferFromData(input0.getFileSystem(conf).open(input0));
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",input0,e.getMessage());
      return 4;
    }
    if (format == null) {
      System.err.printf(""String_Node_Str"",inputs.get(0));
      return 4;
    }
  }
  final SAMFileHeader header;
  try {
    final SAMFileReader r=new SAMFileReader(input0.getFileSystem(conf).open(input0));
    header=r.getFileHeader();
    r.close();
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",input0,e.getMessage());
    return 5;
  }
  final OutputStream out;
  try {
    out=outPath.getFileSystem(conf).create(outPath);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    return 6;
  }
  try {
    new SAMOutputPreparer().prepareForRecords(out,format,header);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    return 7;
  }
  int inIdx=1;
  try {
    for (    final Path inPath : inputs) {
      if (verbose) {
        System.out.printf(""String_Node_Str"",inIdx++,inputs.size());
      }
switch (format) {
case SAM:
{
          final InputStream in=inPath.getFileSystem(conf).open(inPath);
          new SAMFileReader(in).getFileHeader();
          IOUtils.copyBytes(in,out,conf,false);
          in.close();
          break;
        }
case BAM:
{
        final FSDataInputStream in=inPath.getFileSystem(conf).open(inPath);
        final ByteBuffer block=ByteBuffer.wrap(new byte[0xffff]).order(ByteOrder.LITTLE_ENDIAN);
        for (int read=0, prev; (prev=in.read(block.array(),read,block.capacity() - read)) < block.capacity(); ) {
          if (prev == -1)           break;
          read+=prev;
        }
        int blockLength=0;
        for (int xlen=(int)block.getShort(10) & 0xffff, i=12, end=i + xlen; i < end; ) {
          final int slen=(int)block.getShort(i + 2) & 0xffff;
          if (block.getShort(i) == 0x4342 && slen == 2) {
            blockLength=((int)block.getShort(i + 4) & 0xffff) + 1;
            break;
          }
          i+=4 + slen;
        }
        if (blockLength == 0)         throw new IOException(""String_Node_Str"" + inPath);
        if (verbose) {
          System.err.printf(""String_Node_Str"",blockLength);
        }
        final ByteArrayInputStream blockIn=new ByteArrayInputStream(block.array(),0,blockLength);
        final BlockCompressedInputStream bin=new BlockCompressedInputStream(blockIn);
        final ByteBuffer buf=ByteBuffer.wrap(new byte[8]).order(ByteOrder.LITTLE_ENDIAN);
        IOUtils.readFully(bin,buf.array(),0,8);
        final int magic=buf.getInt(0), headerLen=buf.getInt(4);
        if (magic != 0x014d4142)         throw new IOException(""String_Node_Str"" + inPath);
        IOUtils.skipFully(bin,headerLen);
        IOUtils.readFully(bin,buf.array(),0,4);
        for (int i=buf.getInt(0); i-- > 0; ) {
          IOUtils.readFully(bin,buf.array(),0,4);
          IOUtils.skipFully(bin,buf.getInt(0) + 4);
        }
        final int remaining=bin.available();
        if (verbose)         System.err.printf(""String_Node_Str"",remaining);
        if (remaining > 0) {
          final byte[] remBuf=new byte[remaining];
          IOUtils.readFully(bin,remBuf,0,remBuf.length);
          final BlockCompressedOutputStream bout=new BlockCompressedOutputStream(out,null);
          bout.write(remBuf);
          bout.flush();
        }
        in.seek(blockLength);
        IOUtils.copyBytes(in,out,conf,false);
        in.close();
        break;
      }
  }
}
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e.getMessage());
return 8;
}
try {
if (format == SAMFormat.BAM) out.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
out.close();
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e.getMessage());
return 9;
}
return 0;
}","@Override protected int run(final CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  final Path outPath=new Path(args.get(0));
  final List<String> ins=args.subList(1,args.size());
  final boolean verbose=parser.getBoolean(verboseOpt);
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt,SAMFileReader.ValidationStringency.DEFAULT_STRINGENCY.toString()),""String_Node_Str"");
  if (stringency == null)   return 3;
  final Configuration conf=getConf();
  final List<Path> inputs=new ArrayList<Path>(ins.size());
  for (  final String in : ins) {
    try {
      final Path p=new Path(in);
      for (      final FileStatus fstat : p.getFileSystem(conf).globStatus(p))       inputs.add(fstat.getPath());
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",in,e.getMessage());
    }
  }
  final Path input0=inputs.get(0);
  SAMFormat format=SAMFormat.inferFromFilePath(input0);
  if (format == null) {
    try {
      format=SAMFormat.inferFromData(input0.getFileSystem(conf).open(input0));
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",input0,e.getMessage());
      return 4;
    }
    if (format == null) {
      System.err.printf(""String_Node_Str"",inputs.get(0));
      return 4;
    }
  }
  final SAMFileHeader header;
  try {
    final SAMFileReader r=new SAMFileReader(input0.getFileSystem(conf).open(input0));
    header=r.getFileHeader();
    r.close();
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",input0,e.getMessage());
    return 5;
  }
  final OutputStream out;
  try {
    out=outPath.getFileSystem(conf).create(outPath);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    return 6;
  }
  try {
    new SAMOutputPreparer().prepareForRecords(out,format,header);
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e.getMessage());
    return 7;
  }
  int inIdx=1;
  try {
    for (    final Path inPath : inputs) {
      if (verbose) {
        System.out.printf(""String_Node_Str"",inIdx++,inputs.size());
      }
switch (format) {
case SAM:
{
          final InputStream in=inPath.getFileSystem(conf).open(inPath);
          new SAMFileReader(in).getFileHeader();
          IOUtils.copyBytes(in,out,conf,false);
          in.close();
          break;
        }
case BAM:
{
        final FSDataInputStream in=inPath.getFileSystem(conf).open(inPath);
        final ByteBuffer block=ByteBuffer.wrap(new byte[0xffff]).order(ByteOrder.LITTLE_ENDIAN);
        for (int read=0, prev; (prev=in.read(block.array(),read,block.capacity() - read)) < block.capacity(); ) {
          if (prev == -1)           break;
          read+=prev;
        }
        int blockLength=0;
        for (int xlen=(int)block.getShort(10) & 0xffff, i=12, end=i + xlen; i < end; ) {
          final int slen=(int)block.getShort(i + 2) & 0xffff;
          if (block.getShort(i) == 0x4342 && slen == 2) {
            blockLength=((int)block.getShort(i + 4) & 0xffff) + 1;
            break;
          }
          i+=4 + slen;
        }
        if (blockLength == 0)         throw new IOException(""String_Node_Str"" + inPath);
        if (verbose) {
          System.err.printf(""String_Node_Str"",blockLength);
        }
        final ByteArrayInputStream blockIn=new ByteArrayInputStream(block.array(),0,blockLength);
        final BlockCompressedInputStream bin=new BlockCompressedInputStream(blockIn);
        final ByteBuffer buf=ByteBuffer.wrap(new byte[8]).order(ByteOrder.LITTLE_ENDIAN);
        IOUtils.readFully(bin,buf.array(),0,8);
        final int magic=buf.getInt(0), headerLen=buf.getInt(4);
        if (magic != 0x014d4142)         throw new IOException(""String_Node_Str"" + inPath);
        IOUtils.skipFully(bin,headerLen);
        IOUtils.readFully(bin,buf.array(),0,4);
        for (int i=buf.getInt(0); i-- > 0; ) {
          IOUtils.readFully(bin,buf.array(),0,4);
          IOUtils.skipFully(bin,buf.getInt(0) + 4);
        }
        final int remaining=bin.available();
        if (verbose)         System.err.printf(""String_Node_Str"",remaining);
        if (remaining > 0) {
          final byte[] remBuf=new byte[remaining];
          IOUtils.readFully(bin,remBuf,0,remBuf.length);
          final BlockCompressedOutputStream bout=new BlockCompressedOutputStream(out,null);
          bout.write(remBuf);
          bout.flush();
        }
        in.seek(blockLength);
        IOUtils.copyBytes(in,out,conf,false);
        in.close();
        break;
      }
  }
}
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e.getMessage());
return 8;
}
try {
if (format == SAMFormat.BAM) out.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
out.close();
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e.getMessage());
return 9;
}
return 0;
}",0.9935342683775988
33521,"@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (!cacheAndSetProperties(parser))   return 3;
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt),""String_Node_Str"");
  if (stringency == null)   return 3;
  Path wrkDir=new Path(args.get(0));
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final Configuration conf=getConf();
  final String intermediateOutName=(outPath == null ? inputs.get(0) : outPath).getName();
  conf.set(Utils.WORK_FILENAME_PROPERTY,intermediateOutName);
  if (stringency != null)   conf.set(SAMHeaderReader.VALIDATION_STRINGENCY_PROPERTY,stringency.toString());
  final boolean globalSort=parser.getBoolean(sortOpt);
  if (globalSort)   Utils.setHeaderMergerSortOrder(conf,SAMFileHeader.SortOrder.queryname);
  conf.setStrings(Utils.HEADERMERGER_INPUTS_PROPERTY,strInputs.toArray(new String[0]));
  final Timer t=new Timer();
  try {
    wrkDir=wrkDir.getFileSystem(conf).makeQualified(wrkDir);
    if (globalSort)     Utils.configureSampling(wrkDir,intermediateOutName,conf);
    final Job job=new Job(conf);
    job.setJarByClass(FixMate.class);
    job.setMapperClass(FixMateMapper.class);
    job.setReducerClass(FixMateReducer.class);
    if (!parser.getBoolean(noCombinerOpt))     job.setCombinerClass(FixMateReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(AnySAMInputFormat.class);
    job.setOutputFormatClass(CLIMergingAnySAMOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDir);
    if (globalSort) {
      job.setPartitionerClass(TotalOrderPartitioner.class);
      System.out.println(""String_Node_Str"");
      t.start();
      InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.RandomSampler<LongWritable,SAMRecordWritable>(0.01,10000,Math.max(100,reduceTasks)));
      System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    }
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (outPath != null)   try {
    Utils.mergeSAMInto(outPath,wrkDir,""String_Node_Str"",""String_Node_Str"",samFormat,conf,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}","@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (!cacheAndSetProperties(parser))   return 3;
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt,SAMFileReader.ValidationStringency.DEFAULT_STRINGENCY.toString()),""String_Node_Str"");
  if (stringency == null)   return 3;
  Path wrkDir=new Path(args.get(0));
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final Configuration conf=getConf();
  final String intermediateOutName=(outPath == null ? inputs.get(0) : outPath).getName();
  conf.set(Utils.WORK_FILENAME_PROPERTY,intermediateOutName);
  if (stringency != null)   conf.set(SAMHeaderReader.VALIDATION_STRINGENCY_PROPERTY,stringency.toString());
  final boolean globalSort=parser.getBoolean(sortOpt);
  if (globalSort)   Utils.setHeaderMergerSortOrder(conf,SAMFileHeader.SortOrder.queryname);
  conf.setStrings(Utils.HEADERMERGER_INPUTS_PROPERTY,strInputs.toArray(new String[0]));
  final Timer t=new Timer();
  try {
    wrkDir=wrkDir.getFileSystem(conf).makeQualified(wrkDir);
    if (globalSort)     Utils.configureSampling(wrkDir,intermediateOutName,conf);
    final Job job=new Job(conf);
    job.setJarByClass(FixMate.class);
    job.setMapperClass(FixMateMapper.class);
    job.setReducerClass(FixMateReducer.class);
    if (!parser.getBoolean(noCombinerOpt))     job.setCombinerClass(FixMateReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(AnySAMInputFormat.class);
    job.setOutputFormatClass(CLIMergingAnySAMOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDir);
    if (globalSort) {
      job.setPartitionerClass(TotalOrderPartitioner.class);
      System.out.println(""String_Node_Str"");
      t.start();
      InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.RandomSampler<LongWritable,SAMRecordWritable>(0.01,10000,Math.max(100,reduceTasks)));
      System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    }
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (outPath != null)   try {
    Utils.mergeSAMInto(outPath,wrkDir,""String_Node_Str"",""String_Node_Str"",samFormat,conf,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}",0.9897975200125568
33522,"@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() > 2) {
    System.err.printf(""String_Node_Str"",args.size());
    return 3;
  }
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt),""String_Node_Str"");
  if (stringency == null)   return 3;
  final String path=args.get(0);
  final String out=args.size() > 1 ? args.get(1) : path + ""String_Node_Str"";
  final SAMFileReader reader;
  try {
    reader=new SAMFileReader(WrapSeekable.openPath(getConf(),new Path(path)),false);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 4;
  }
  final SAMFileHeader header;
  try {
    header=reader.getFileHeader();
  }
 catch (  SAMFormatException e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 6;
  }
  final BAMIndexer indexer;
  try {
    final Path p=new Path(out);
    indexer=new BAMIndexer(p.getFileSystem(getConf()).create(p),header);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",out,e.getMessage());
    return 5;
  }
  reader.enableFileSource(true);
  final SAMRecordIterator it=reader.iterator();
  try {
    while (it.hasNext())     indexer.processAlignment(it.next());
  }
 catch (  SAMFormatException e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 6;
  }
  indexer.finish();
  return 0;
}","@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() > 2) {
    System.err.printf(""String_Node_Str"",args.size());
    return 3;
  }
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt,SAMFileReader.ValidationStringency.DEFAULT_STRINGENCY.toString()),""String_Node_Str"");
  if (stringency == null)   return 3;
  final String path=args.get(0);
  final String out=args.size() > 1 ? args.get(1) : path + ""String_Node_Str"";
  final SAMFileReader reader;
  try {
    reader=new SAMFileReader(WrapSeekable.openPath(getConf(),new Path(path)),false);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 4;
  }
  final SAMFileHeader header;
  try {
    header=reader.getFileHeader();
  }
 catch (  SAMFormatException e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 6;
  }
  final BAMIndexer indexer;
  try {
    final Path p=new Path(out);
    indexer=new BAMIndexer(p.getFileSystem(getConf()).create(p),header);
  }
 catch (  Exception e) {
    System.err.printf(""String_Node_Str"",out,e.getMessage());
    return 5;
  }
  reader.enableFileSource(true);
  final SAMRecordIterator it=reader.iterator();
  try {
    while (it.hasNext())     indexer.processAlignment(it.next());
  }
 catch (  SAMFormatException e) {
    System.err.printf(""String_Node_Str"",path,e.getMessage());
    return 6;
  }
  indexer.finish();
  return 0;
}",0.9793585265163544
33523,"@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (!cacheAndSetProperties(parser))   return 3;
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt),""String_Node_Str"");
  if (stringency == null)   return 3;
  Path wrkDir=new Path(args.get(0));
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final Configuration conf=getConf();
  Utils.setHeaderMergerSortOrder(conf,SortOrder.coordinate);
  conf.setStrings(Utils.HEADERMERGER_INPUTS_PROPERTY,strInputs.toArray(new String[0]));
  if (stringency != null)   conf.set(SAMHeaderReader.VALIDATION_STRINGENCY_PROPERTY,stringency.toString());
  final String intermediateOutName=(outPath == null ? inputs.get(0) : outPath).getName();
  conf.set(Utils.WORK_FILENAME_PROPERTY,intermediateOutName);
  final Timer t=new Timer();
  try {
    wrkDir=wrkDir.getFileSystem(conf).makeQualified(wrkDir);
    Utils.configureSampling(wrkDir,intermediateOutName,conf);
    final Job job=new Job(conf);
    job.setJarByClass(Sort.class);
    job.setMapperClass(Mapper.class);
    job.setReducerClass(SortReducer.class);
    job.setMapOutputKeyClass(LongWritable.class);
    job.setOutputKeyClass(NullWritable.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(SortInputFormat.class);
    job.setOutputFormatClass(CLIMergingAnySAMOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDir);
    job.setPartitionerClass(TotalOrderPartitioner.class);
    System.out.println(""String_Node_Str"");
    t.start();
    InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.RandomSampler<LongWritable,SAMRecordWritable>(0.01,10000,Math.max(100,reduceTasks)));
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (outPath != null)   try {
    Utils.mergeSAMInto(outPath,wrkDir,""String_Node_Str"",""String_Node_Str"",samFormat,conf,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}","@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (!cacheAndSetProperties(parser))   return 3;
  final SAMFileReader.ValidationStringency stringency=Utils.toStringency(parser.getOptionValue(stringencyOpt,SAMFileReader.ValidationStringency.DEFAULT_STRINGENCY.toString()),""String_Node_Str"");
  if (stringency == null)   return 3;
  Path wrkDir=new Path(args.get(0));
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final Configuration conf=getConf();
  Utils.setHeaderMergerSortOrder(conf,SortOrder.coordinate);
  conf.setStrings(Utils.HEADERMERGER_INPUTS_PROPERTY,strInputs.toArray(new String[0]));
  if (stringency != null)   conf.set(SAMHeaderReader.VALIDATION_STRINGENCY_PROPERTY,stringency.toString());
  final String intermediateOutName=(outPath == null ? inputs.get(0) : outPath).getName();
  conf.set(Utils.WORK_FILENAME_PROPERTY,intermediateOutName);
  final Timer t=new Timer();
  try {
    wrkDir=wrkDir.getFileSystem(conf).makeQualified(wrkDir);
    Utils.configureSampling(wrkDir,intermediateOutName,conf);
    final Job job=new Job(conf);
    job.setJarByClass(Sort.class);
    job.setMapperClass(Mapper.class);
    job.setReducerClass(SortReducer.class);
    job.setMapOutputKeyClass(LongWritable.class);
    job.setOutputKeyClass(NullWritable.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(SortInputFormat.class);
    job.setOutputFormatClass(CLIMergingAnySAMOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDir);
    job.setPartitionerClass(TotalOrderPartitioner.class);
    System.out.println(""String_Node_Str"");
    t.start();
    InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.RandomSampler<LongWritable,SAMRecordWritable>(0.01,10000,Math.max(100,reduceTasks)));
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (outPath != null)   try {
    Utils.mergeSAMInto(outPath,wrkDir,""String_Node_Str"",""String_Node_Str"",samFormat,conf,""String_Node_Str"");
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}",0.9891431434775346
33524,"@Test public void testVerifyQualitySangerOutOfRange(){
  frag.setSequence(new Text(""String_Node_Str""));
  frag.setQuality(new Text(""String_Node_Str""));
  assertEquals(3,SequencedFragment.verifyQuality(frag.getQuality(),FormatConstants.BaseQualityEncoding.Sanger));
  frag.setQuality(new Text(""String_Node_Str""));
  assertEquals(5,SequencedFragment.verifyQuality(frag.getQuality(),FormatConstants.BaseQualityEncoding.Sanger));
}","@Test public void testVerifyQualitySangerOutOfRange(){
  frag.setSequence(new Text(""String_Node_Str""));
  frag.setQuality(new Text(""String_Node_Str"" + Character.toString((char)127)));
  assertEquals(29,SequencedFragment.verifyQuality(frag.getQuality(),FormatConstants.BaseQualityEncoding.Sanger));
  frag.setQuality(new Text(""String_Node_Str""));
  assertEquals(5,SequencedFragment.verifyQuality(frag.getQuality(),FormatConstants.BaseQualityEncoding.Sanger));
}",0.9605411499436304
33525,"@Override public int read(byte[] buf,int off,int len) throws IOException {
  if (headerRemaining) {
    final int h=headerStream.read(buf,off,len);
    if (h != -1)     return h + Math.max(0,streamRead(buf,off + h,len - h));
    headerRemaining=false;
    headerStream.close();
  }
  return streamRead(buf,off,len);
}","@Override public int read(byte[] buf,int off,int len) throws IOException {
  if (headerRemaining) {
    final int h=headerStream.read(buf,off,len);
    if (h < headerLength && h != -1) {
      headerLength-=h;
      return h;
    }
    headerRemaining=false;
    headerStream.close();
    int s=streamRead(buf,off + h,len - h);
    for (int i=0; s > 0 && buf[off + h + i++] == '@'; --s) {
    }
    return h + Math.max(0,s);
  }
  return streamRead(buf,off,len);
}",0.6632522407170295
33526,"@Override public void initialize(InputSplit spl,TaskAttemptContext ctx) throws IOException {
  final FileSplit split=(FileSplit)spl;
  this.start=split.getStart();
  this.end=start + split.getLength();
  final Configuration conf=ctx.getConfiguration();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(conf);
  input=fs.open(file);
  final SAMFileHeader header=new SAMFileReader(input,false).getFileHeader();
  waInput=new WorkaroundingStream(input,header);
  final boolean firstSplit=this.start == 0;
  if (firstSplit) {
    final int headerLength=waInput.getHeaderLength();
    input.seek(headerLength);
    this.start+=headerLength;
  }
 else   input.seek(--this.start);
  waInput.setLength(this.end - this.start);
  iterator=new SAMFileReader(waInput,false).iterator();
  if (!firstSplit) {
    try {
      if (iterator.hasNext())       iterator.next();
    }
 catch (    SAMFormatException e) {
    }
  }
}","@Override public void initialize(InputSplit spl,TaskAttemptContext ctx) throws IOException {
  final FileSplit split=(FileSplit)spl;
  this.start=split.getStart();
  this.end=start + split.getLength();
  final Configuration conf=ctx.getConfiguration();
  final Path file=split.getPath();
  final FileSystem fs=file.getFileSystem(conf);
  input=fs.open(file);
  final SAMFileHeader header=new SAMFileReader(input,false).getFileHeader();
  waInput=new WorkaroundingStream(input,header);
  final boolean firstSplit=this.start == 0;
  if (firstSplit) {
    final int headerLength=waInput.getRemainingHeaderLength();
    input.seek(headerLength);
    this.start+=headerLength;
  }
 else   input.seek(--this.start);
  waInput.setLength(this.end - this.start);
  iterator=new SAMFileReader(waInput,false).iterator();
  if (!firstSplit) {
    try {
      if (iterator.hasNext())       iterator.next();
    }
 catch (    SAMFormatException e) {
    }
  }
}",0.9952254641909816
33527,"@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  final String wrkDir=args.get(0), out=(String)parser.getOptionValue(outputFileOpt);
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final boolean verbose=parser.getBoolean(verboseOpt);
  final String intermediateOutName=out == null ? inputs.get(0).getName() : out;
  final Configuration conf=getConf();
  conf.setStrings(INPUT_PATHS_PROP,strInputs.toArray(new String[0]));
  conf.set(SortOutputFormat.OUTPUT_NAME_PROP,intermediateOutName);
  final Path wrkDirPath=new Path(wrkDir);
  final Timer t=new Timer();
  try {
    for (    final Path in : inputs)     Utils.configureSampling(in,conf);
    @SuppressWarnings(""String_Node_Str"") final int maxReduceTasks=new JobClient(new JobConf(conf)).getClusterStatus().getMaxReduceTasks();
    conf.setInt(""String_Node_Str"",Math.max(1,maxReduceTasks * 9 / 10));
    final Job job=new Job(conf);
    job.setJarByClass(Sort.class);
    job.setMapperClass(Mapper.class);
    job.setReducerClass(SortReducer.class);
    job.setMapOutputKeyClass(LongWritable.class);
    job.setOutputKeyClass(NullWritable.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(BAMInputFormat.class);
    job.setOutputFormatClass(SortOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDirPath);
    job.setPartitionerClass(TotalOrderPartitioner.class);
    System.out.println(""String_Node_Str"");
    t.start();
    InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.IntervalSampler<LongWritable,SAMRecordWritable>(0.01,100));
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (out != null)   try {
    System.out.println(""String_Node_Str"");
    t.start();
    final Path outPath=new Path(out);
    final FileSystem srcFS=wrkDirPath.getFileSystem(conf);
    FileSystem dstFS=outPath.getFileSystem(conf);
    if (dstFS instanceof LocalFileSystem && dstFS instanceof ChecksumFileSystem)     dstFS=((LocalFileSystem)dstFS).getRaw();
    final BAMFileWriter w=new BAMFileWriter(dstFS.create(outPath),new File(""String_Node_Str""));
    w.setSortOrder(SAMFileHeader.SortOrder.coordinate,true);
    w.setHeader(getHeaderMerger(conf).getMergedHeader());
    w.close();
    final OutputStream outs=dstFS.append(outPath);
    final FileStatus[] parts=srcFS.globStatus(new Path(wrkDir,conf.get(SortOutputFormat.OUTPUT_NAME_PROP) + ""String_Node_Str""));
{
      int i=0;
      final Timer t2=new Timer();
      for (      final FileStatus part : parts) {
        t2.start();
        final InputStream ins=srcFS.open(part.getPath());
        IOUtils.copyBytes(ins,outs,conf,false);
        ins.close();
        System.out.printf(""String_Node_Str"",++i,t2.stopS(),t2.fms());
      }
    }
    for (    final FileStatus part : parts)     srcFS.delete(part.getPath(),false);
    outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
    outs.close();
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}","@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
  if (args.isEmpty()) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  if (args.size() == 1) {
    System.err.println(""String_Node_Str"");
    return 3;
  }
  final String wrkDir=args.get(0), out=(String)parser.getOptionValue(outputFileOpt);
  final List<String> strInputs=args.subList(1,args.size());
  final List<Path> inputs=new ArrayList<Path>(strInputs.size());
  for (  final String in : strInputs)   inputs.add(new Path(in));
  final boolean verbose=parser.getBoolean(verboseOpt);
  final String intermediateOutName=(out == null ? inputs.get(0) : new Path(out)).getName();
  final Configuration conf=getConf();
  conf.setStrings(INPUT_PATHS_PROP,strInputs.toArray(new String[0]));
  conf.set(SortOutputFormat.OUTPUT_NAME_PROP,intermediateOutName);
  final Path wrkDirPath=new Path(wrkDir);
  final Timer t=new Timer();
  try {
    for (    final Path in : inputs)     Utils.configureSampling(in,conf);
    @SuppressWarnings(""String_Node_Str"") final int maxReduceTasks=new JobClient(new JobConf(conf)).getClusterStatus().getMaxReduceTasks();
    conf.setInt(""String_Node_Str"",Math.max(1,maxReduceTasks * 9 / 10));
    final Job job=new Job(conf);
    job.setJarByClass(Sort.class);
    job.setMapperClass(Mapper.class);
    job.setReducerClass(SortReducer.class);
    job.setMapOutputKeyClass(LongWritable.class);
    job.setOutputKeyClass(NullWritable.class);
    job.setOutputValueClass(SAMRecordWritable.class);
    job.setInputFormatClass(BAMInputFormat.class);
    job.setOutputFormatClass(SortOutputFormat.class);
    for (    final Path in : inputs)     FileInputFormat.addInputPath(job,in);
    FileOutputFormat.setOutputPath(job,wrkDirPath);
    job.setPartitionerClass(TotalOrderPartitioner.class);
    System.out.println(""String_Node_Str"");
    t.start();
    InputSampler.<LongWritable,SAMRecordWritable>writePartitionFile(job,new InputSampler.IntervalSampler<LongWritable,SAMRecordWritable>(0.01,100));
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
    job.submit();
    System.out.println(""String_Node_Str"");
    t.start();
    if (!job.waitForCompletion(verbose)) {
      System.err.println(""String_Node_Str"");
      return 4;
    }
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 4;
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  if (out != null)   try {
    System.out.println(""String_Node_Str"");
    t.start();
    final Path outPath=new Path(out);
    final FileSystem srcFS=wrkDirPath.getFileSystem(conf);
    FileSystem dstFS=outPath.getFileSystem(conf);
    if (dstFS instanceof LocalFileSystem && dstFS instanceof ChecksumFileSystem)     dstFS=((LocalFileSystem)dstFS).getRaw();
    final BAMFileWriter w=new BAMFileWriter(dstFS.create(outPath),new File(""String_Node_Str""));
    w.setSortOrder(SAMFileHeader.SortOrder.coordinate,true);
    w.setHeader(getHeaderMerger(conf).getMergedHeader());
    w.close();
    final OutputStream outs=dstFS.append(outPath);
    final FileStatus[] parts=srcFS.globStatus(new Path(wrkDir,conf.get(SortOutputFormat.OUTPUT_NAME_PROP) + ""String_Node_Str""));
{
      int i=0;
      final Timer t2=new Timer();
      for (      final FileStatus part : parts) {
        t2.start();
        final InputStream ins=srcFS.open(part.getPath());
        IOUtils.copyBytes(ins,outs,conf,false);
        ins.close();
        System.out.printf(""String_Node_Str"",++i,t2.stopS(),t2.fms());
      }
    }
    for (    final FileStatus part : parts)     srcFS.delete(part.getPath(),false);
    outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
    outs.close();
    System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  }
 catch (  IOException e) {
    System.err.printf(""String_Node_Str"",e);
    return 5;
  }
  return 0;
}",0.9970126960418224
33528,"private int addProbabilisticSplits(List<InputSplit> splits,int i,List<InputSplit> newSplits,Configuration cfg) throws IOException {
  final Path path=((FileSplit)splits.get(i)).getPath();
  final SeekableStream sin=WrapSeekable.openPath(path.getFileSystem(cfg),path);
  final BAMSplitGuesser guesser=new BAMSplitGuesser(sin);
  FileSplit fspl;
  do {
    fspl=(FileSplit)splits.get(i);
    long beg=fspl.getStart();
    long end=beg + fspl.getLength();
    long alignedBeg=guesser.guessNextBAMRecordStart(beg,end);
    newSplits.add(new FileVirtualSplit(path,alignedBeg,end << 16,fspl.getLocations()));
    ++i;
  }
 while (i < splits.size() && fspl.getPath().equals(path));
  sin.close();
  return i;
}","private int addProbabilisticSplits(List<InputSplit> splits,int i,List<InputSplit> newSplits,Configuration cfg) throws IOException {
  final Path path=((FileSplit)splits.get(i)).getPath();
  final SeekableStream sin=WrapSeekable.openPath(path.getFileSystem(cfg),path);
  final BAMSplitGuesser guesser=new BAMSplitGuesser(sin);
  for (; i < splits.size(); ++i) {
    FileSplit fspl=(FileSplit)splits.get(i);
    if (!fspl.getPath().equals(path))     break;
    long beg=fspl.getStart();
    long end=beg + fspl.getLength();
    long alignedBeg=guesser.guessNextBAMRecordStart(beg,end);
    long alignedEnd=end << 16 | 0xffff;
    newSplits.add(new FileVirtualSplit(path,alignedBeg,alignedEnd,fspl.getLocations()));
  }
  sin.close();
  return i;
}",0.7831491712707183
33529,"private int addIndexedSplits(List<InputSplit> splits,int i,List<InputSplit> newSplits,Configuration cfg) throws IOException {
  final Path file=((FileSplit)splits.get(i)).getPath();
  final SplittingBAMIndex idx=new SplittingBAMIndex(file.getFileSystem(cfg).open(getIdxPath(file)));
  int splitsEnd=splits.size();
  for (int j=i; j < splitsEnd; ++j)   if (!file.equals(((FileSplit)splits.get(j)).getPath()))   splitsEnd=j;
  for (int j=i; j < splitsEnd; ++j) {
    final FileSplit fileSplit=(FileSplit)splits.get(j);
    final long start=fileSplit.getStart();
    final long end=start + fileSplit.getLength();
    final Long blockStart=j == i ? idx.nextAlignment(0) : idx.prevAlignment(start);
    final Long blockEnd=j == splitsEnd - 1 ? idx.prevAlignment(end) : idx.nextAlignment(end);
    if (blockStart == null)     throw new RuntimeException(""String_Node_Str"" + start);
    if (blockEnd == null)     throw new RuntimeException(""String_Node_Str"" + end);
    newSplits.add(new FileVirtualSplit(file,blockStart,blockEnd,fileSplit.getLocations()));
  }
  return splitsEnd;
}","private int addIndexedSplits(List<InputSplit> splits,int i,List<InputSplit> newSplits,Configuration cfg) throws IOException {
  final Path file=((FileSplit)splits.get(i)).getPath();
  final SplittingBAMIndex idx=new SplittingBAMIndex(file.getFileSystem(cfg).open(getIdxPath(file)));
  int splitsEnd=splits.size();
  for (int j=i; j < splitsEnd; ++j)   if (!file.equals(((FileSplit)splits.get(j)).getPath()))   splitsEnd=j;
  for (int j=i; j < splitsEnd; ++j) {
    final FileSplit fileSplit=(FileSplit)splits.get(j);
    final long start=fileSplit.getStart();
    final long end=start + fileSplit.getLength();
    final Long blockStart=idx.nextAlignment(start);
    final Long blockEnd=j == splitsEnd - 1 ? idx.prevAlignment(end) | 0xffff : idx.nextAlignment(end);
    if (blockStart == null)     throw new RuntimeException(""String_Node_Str"" + start);
    if (blockEnd == null)     throw new RuntimeException(""String_Node_Str"" + end);
    newSplits.add(new FileVirtualSplit(file,blockStart,blockEnd,fileSplit.getLocations()));
  }
  return splitsEnd;
}",0.917724494593324
33530,"private void mergeOutputs(Path outPath,boolean forceLocal) throws IOException {
  System.out.println(""String_Node_Str"");
  t.start();
  final Configuration conf=getConf();
  final FileSystem srcFS=wrkDirPath.getFileSystem(conf);
  FileSystem dstFS=outPath.getFileSystem(conf);
  if (forceLocal)   dstFS=FileSystem.getLocal(conf).getRaw();
  final Timer tl=new Timer();
  for (  String lvl : levels) {
    tl.start();
    final String lvlName=getSummaryName(lvl);
    final OutputStream outs=dstFS.create(new Path(outPath,lvlName));
    final FileStatus[] parts=srcFS.globStatus(new Path(wrkDirPath,lvlName + ""String_Node_Str""));
    for (    final FileStatus part : parts) {
      final InputStream ins=srcFS.open(part.getPath());
      IOUtils.copyBytes(ins,outs,conf,false);
      ins.close();
    }
    for (    final FileStatus part : parts)     srcFS.delete(part.getPath(),false);
    outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
    outs.close();
    System.out.printf(""String_Node_Str"",lvl,tl.stopS(),tl.fms());
  }
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
}","private void mergeOutputs(Path outPath,boolean forceLocal) throws IOException {
  System.out.println(""String_Node_Str"");
  t.start();
  final Configuration conf=getConf();
  final FileSystem srcFS=wrkDir.getFileSystem(conf);
  FileSystem dstFS=outPath.getFileSystem(conf);
  if (forceLocal)   dstFS=FileSystem.getLocal(conf).getRaw();
  final Timer tl=new Timer();
  for (  String lvl : levels) {
    tl.start();
    final String lvlName=getSummaryName(lvl);
    final OutputStream outs=dstFS.create(new Path(outPath,lvlName));
    final FileStatus[] parts=srcFS.globStatus(new Path(sorted ? getSortOutputDir(level) : wrkDir,lvlName + ""String_Node_Str""));
    for (    final FileStatus part : parts) {
      final InputStream ins=srcFS.open(part.getPath());
      IOUtils.copyBytes(ins,outs,conf,false);
      ins.close();
    }
    for (    final FileStatus part : parts)     srcFS.delete(part.getPath(),false);
    outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK);
    outs.close();
    System.out.printf(""String_Node_Str"",lvl,tl.stopS(),tl.fms());
  }
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
}",0.9806567701304544
33531,"private Job sortMerged(String lvl,Path mergedTmp) throws IOException, ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  conf.set(SortOutputFormat.OUTPUT_NAME_PROP,mergedTmp.getName());
  setSamplingConf(mergedTmp,conf);
  final Job job=new Job(conf);
  job.setJarByClass(Summarize.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(SortReducer.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(Text.class);
  job.setInputFormatClass(SortInputFormat.class);
  job.setOutputFormatClass(SortOutputFormat.class);
  FileInputFormat.setInputPaths(job,mergedTmp);
  FileOutputFormat.setOutputPath(job,wrkDirPath);
  job.setPartitionerClass(TotalOrderPartitioner.class);
  System.out.printf(""String_Node_Str"",lvl);
  t.start();
  InputSampler.<LongWritable,Text>writePartitionFile(job,new InputSampler.SplitSampler<LongWritable,Text>(1 << 16,10));
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  job.submit();
  return job;
}","private Job sortMerged(String lvl,Path mergedTmp) throws IOException, ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  conf.set(SortOutputFormat.OUTPUT_NAME_PROP,mergedTmp.getName());
  setSamplingConf(mergedTmp,conf);
  final Job job=new Job(conf);
  job.setJarByClass(Summarize.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(SortReducer.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(Text.class);
  job.setInputFormatClass(SortInputFormat.class);
  job.setOutputFormatClass(SortOutputFormat.class);
  FileInputFormat.setInputPaths(job,mergedTmp);
  FileOutputFormat.setOutputPath(job,getSortOutputDir(lvl));
  job.setPartitionerClass(TotalOrderPartitioner.class);
  System.out.printf(""String_Node_Str"",lvl);
  t.start();
  InputSampler.<LongWritable,Text>writePartitionFile(job,new InputSampler.SplitSampler<LongWritable,Text>(1 << 16,10));
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  job.submit();
  return job;
}",0.9882463563704748
33532,"@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
switch (args.size()) {
case 0:
    return missingArg(""String_Node_Str"");
case 1:
  return missingArg(""String_Node_Str"");
case 2:
return missingArg(""String_Node_Str"");
default :
break;
}
final String wrkDir=args.get(0), bam=args.get(2), outAny=(String)parser.getOptionValue(outputDirOpt), outLoc=(String)parser.getOptionValue(outputLocalDirOpt), out;
final boolean sort=parser.getBoolean(sortOpt);
verbose=parser.getBoolean(verboseOpt);
if (outAny != null) {
if (outLoc != null) {
System.err.println(""String_Node_Str"");
return 3;
}
out=outAny;
}
 else out=outLoc;
levels=args.get(1).split(""String_Node_Str"");
for (String l : levels) {
try {
int lvl=Integer.parseInt(l);
if (lvl > 0) continue;
System.err.printf(""String_Node_Str"",lvl);
}
 catch (NumberFormatException e) {
System.err.printf(""String_Node_Str"",l);
}
return 3;
}
wrkDirPath=new Path(wrkDir);
final Path bamPath=new Path(bam);
final boolean forceLocal=out == outLoc;
final Configuration conf=getConf();
conf.set(SummarizeOutputFormat.OUTPUT_NAME_PROP,bamPath.getName());
conf.setStrings(SummarizeReducer.SUMMARY_LEVELS_PROP,levels);
try {
try {
@SuppressWarnings(""String_Node_Str"") final int maxReduceTasks=new JobClient(new JobConf(conf)).getClusterStatus().getMaxReduceTasks();
conf.setInt(""String_Node_Str"",Math.max(1,maxReduceTasks * 9 / 10));
if (!runSummary(bamPath)) return 4;
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 4;
}
Path sortedTmpDir=null;
try {
if (sort) {
sortedTmpDir=new Path(wrkDirPath,""String_Node_Str"");
mergeOutputs(sortedTmpDir,false);
}
 else if (out != null) mergeOutputs(new Path(out),forceLocal);
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 5;
}
if (sort) {
if (!doSorting(sortedTmpDir)) return 6;
if (out != null) try {
mergeOutputs(new Path(out),forceLocal);
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 7;
}
}
}
 catch (ClassNotFoundException e) {
throw new RuntimeException(e);
}
catch (InterruptedException e) {
throw new RuntimeException(e);
}
return 0;
}","@Override protected int run(CmdLineParser parser){
  final List<String> args=parser.getRemainingArgs();
switch (args.size()) {
case 0:
    return missingArg(""String_Node_Str"");
case 1:
  return missingArg(""String_Node_Str"");
case 2:
return missingArg(""String_Node_Str"");
default :
break;
}
final String wrkDirS=args.get(0), bam=args.get(2), outAny=(String)parser.getOptionValue(outputDirOpt), outLoc=(String)parser.getOptionValue(outputLocalDirOpt), out;
final boolean sort=parser.getBoolean(sortOpt);
verbose=parser.getBoolean(verboseOpt);
if (outAny != null) {
if (outLoc != null) {
System.err.println(""String_Node_Str"");
return 3;
}
out=outAny;
}
 else out=outLoc;
levels=args.get(1).split(""String_Node_Str"");
for (String l : levels) {
try {
int lvl=Integer.parseInt(l);
if (lvl > 0) continue;
System.err.printf(""String_Node_Str"",lvl);
}
 catch (NumberFormatException e) {
System.err.printf(""String_Node_Str"",l);
}
return 3;
}
wrkDir=new Path(wrkDirS);
mainSortOutputDir=sort ? new Path(wrkDir,""String_Node_Str"") : null;
final Path bamPath=new Path(bam);
final boolean forceLocal=out == outLoc;
final Configuration conf=getConf();
conf.set(SummarizeOutputFormat.OUTPUT_NAME_PROP,bamPath.getName());
conf.setStrings(SummarizeReducer.SUMMARY_LEVELS_PROP,levels);
try {
try {
@SuppressWarnings(""String_Node_Str"") final int maxReduceTasks=new JobClient(new JobConf(conf)).getClusterStatus().getMaxReduceTasks();
conf.setInt(""String_Node_Str"",Math.max(1,maxReduceTasks * 9 / 10));
if (!runSummary(bamPath)) return 4;
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 4;
}
Path mergedTmpDir=null;
try {
if (sort) {
mergedTmpDir=new Path(wrkDir,""String_Node_Str"");
mergeOutputs(mergedTmpDir,false);
}
 else if (out != null) mergeOutputs(new Path(out),forceLocal);
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 5;
}
if (sort) {
if (!doSorting(mergedTmpDir)) return 6;
tryDelete(mergedTmpDir);
if (out != null) try {
sorted=true;
mergeOutputs(new Path(out),forceLocal);
}
 catch (IOException e) {
System.err.printf(""String_Node_Str"",e);
return 7;
}
 else {
System.out.println(""String_Node_Str"");
t.start();
try {
  final FileSystem fs=wrkDir.getFileSystem(conf);
  for (  String lvl : levels) {
    final FileStatus[] parts;
    try {
      parts=fs.globStatus(new Path(new Path(mainSortOutputDir,lvl),""String_Node_Str""));
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",lvl,e);
      continue;
    }
    for (    FileStatus part : parts) {
      final Path path=part.getPath();
      try {
        fs.rename(path,new Path(wrkDir,path.getName()));
      }
 catch (      IOException e) {
        System.err.printf(""String_Node_Str"",path,e);
      }
    }
  }
}
 catch (IOException e) {
  System.err.printf(""String_Node_Str"",e);
}
System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
}
tryDelete(mainSortOutputDir);
}
}
 catch (ClassNotFoundException e) {
throw new RuntimeException(e);
}
catch (InterruptedException e) {
throw new RuntimeException(e);
}
return 0;
}",0.7908232118758435
33533,"private boolean doSorting(Path sortedTmpDir) throws ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  final Job[] jobs=new Job[levels.length];
  boolean errors=false;
  for (int i=0; i < levels.length; ++i) {
    final String l=levels[i];
    try {
      jobs[i]=sortMerged(l,new Path(sortedTmpDir,getSummaryName(l)));
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",l,e);
      if (i == 0)       return false;
 else       errors=true;
    }
  }
  System.out.println(""String_Node_Str"");
  t.start();
  for (int i=levels.length; i-- > 0; ) {
    boolean success;
    try {
      success=jobs[i].waitForCompletion(verbose);
    }
 catch (    IOException e) {
      success=false;
    }
    final String l=levels[i];
    if (!success) {
      System.err.printf(""String_Node_Str"",l);
      errors=true;
      continue;
    }
    System.out.printf(""String_Node_Str"",l);
    final Path mergedTmp=FileInputFormat.getInputPaths(jobs[i])[0];
    try {
      mergedTmp.getFileSystem(conf).delete(mergedTmp,false);
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",mergedTmp);
    }
  }
  if (errors)   return false;
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  return true;
}","private boolean doSorting(Path inputDir) throws ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  final Job[] jobs=new Job[levels.length];
  boolean errors=false;
  for (int i=0; i < levels.length; ++i) {
    final String lvl=levels[i];
    try {
      jobs[i]=sortMerged(lvl,new Path(inputDir,getSummaryName(lvl)));
    }
 catch (    IOException e) {
      System.err.printf(""String_Node_Str"",lvl,e);
      if (i == 0)       return false;
 else       errors=true;
    }
  }
  System.out.println(""String_Node_Str"");
  t.start();
  for (int i=levels.length; i-- > 0; ) {
    boolean success;
    try {
      success=jobs[i].waitForCompletion(verbose);
    }
 catch (    IOException e) {
      success=false;
    }
    final String l=levels[i];
    if (!success) {
      System.err.printf(""String_Node_Str"",l);
      errors=true;
      continue;
    }
    System.out.printf(""String_Node_Str"",l);
  }
  if (errors)   return false;
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  return true;
}",0.8140138408304498
33534,"private boolean runSummary(Path bamPath) throws IOException, ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  setSamplingConf(bamPath,conf);
  final Job job=new Job(conf);
  job.setJarByClass(Summarize.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(SummarizeReducer.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(Range.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(RangeCount.class);
  job.setInputFormatClass(SummarizeInputFormat.class);
  job.setOutputFormatClass(SummarizeOutputFormat.class);
  FileInputFormat.setInputPaths(job,bamPath);
  FileOutputFormat.setOutputPath(job,wrkDirPath);
  job.setPartitionerClass(TotalOrderPartitioner.class);
  System.out.println(""String_Node_Str"");
  t.start();
  InputSampler.<LongWritable,Range>writePartitionFile(job,new InputSampler.SplitSampler<LongWritable,Range>(1 << 16,10));
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  for (  String lvl : levels)   MultipleOutputs.addNamedOutput(job,""String_Node_Str"" + lvl,SummarizeOutputFormat.class,NullWritable.class,Range.class);
  job.submit();
  System.out.println(""String_Node_Str"");
  t.start();
  if (!job.waitForCompletion(verbose)) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  return true;
}","private boolean runSummary(Path bamPath) throws IOException, ClassNotFoundException, InterruptedException {
  final Configuration conf=getConf();
  setSamplingConf(bamPath,conf);
  final Job job=new Job(conf);
  job.setJarByClass(Summarize.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(SummarizeReducer.class);
  job.setMapOutputKeyClass(LongWritable.class);
  job.setMapOutputValueClass(Range.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(RangeCount.class);
  job.setInputFormatClass(SummarizeInputFormat.class);
  job.setOutputFormatClass(SummarizeOutputFormat.class);
  FileInputFormat.setInputPaths(job,bamPath);
  FileOutputFormat.setOutputPath(job,wrkDir);
  job.setPartitionerClass(TotalOrderPartitioner.class);
  System.out.println(""String_Node_Str"");
  t.start();
  InputSampler.<LongWritable,Range>writePartitionFile(job,new InputSampler.SplitSampler<LongWritable,Range>(1 << 16,10));
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  for (  String lvl : levels)   MultipleOutputs.addNamedOutput(job,""String_Node_Str"" + lvl,SummarizeOutputFormat.class,NullWritable.class,Range.class);
  job.submit();
  System.out.println(""String_Node_Str"");
  t.start();
  if (!job.waitForCompletion(verbose)) {
    System.err.println(""String_Node_Str"");
    return false;
  }
  System.out.printf(""String_Node_Str"",t.stopS(),t.fms());
  return true;
}",0.998581560283688
33535,"public static void usage(PrintStream out,Map<String,CLIPlugin> plugins){
  out.printf(""String_Node_Str"",VERSION_MAJOR,VERSION_MINOR);
  out.printf(""String_Node_Str"",Utils.getArgv0());
  int cmdLen=0;
  for (  final String cmd : plugins.keySet())   cmdLen=Math.max(cmdLen,cmd.length());
  final String cmdFmt=""String_Node_Str"" + cmdLen + ""String_Node_Str"";
  out.print(""String_Node_Str"");
  final int descPos=""String_Node_Str"".length() + 2;
  boolean first=true;
  for (  Map.Entry<String,CLIPlugin> entry : plugins.entrySet()) {
    if (first)     first=false;
 else     for (int i=descPos; i-- > 0; )     out.print(' ');
    out.printf(cmdFmt,entry.getKey());
    Utils.printWrapped(out,entry.getValue().getDescription(),descPos);
  }
}","public static void usage(PrintStream out,Map<String,CLIPlugin> plugins){
  out.printf(""String_Node_Str"",VERSION_MAJOR,VERSION_MINOR);
  out.printf(""String_Node_Str"",Utils.getArgv0());
  int cmdLen=0;
  for (  final String cmd : plugins.keySet())   cmdLen=Math.max(cmdLen,cmd.length());
  final String cmdFmt=""String_Node_Str"" + cmdLen + ""String_Node_Str"";
  out.print(""String_Node_Str"");
  final int cmdPos=""String_Node_Str"".length(), descPos=cmdPos + cmdLen + 2;
  boolean first=true;
  for (  Map.Entry<String,CLIPlugin> entry : plugins.entrySet()) {
    if (first)     first=false;
 else     for (int i=cmdPos; i-- > 0; )     out.print(' ');
    out.printf(cmdFmt,entry.getKey());
    Utils.printWrapped(out,entry.getValue().getDescription(),descPos);
  }
}",0.9739478957915833
33536,"private static void tickStart(){
  if (mc.thePlayer != null) {
    boolean flyState;
    boolean descendState;
    if (SJConfig.customControls) {
      flyState=mc.inGameHasFocus && Keyboard.isKeyDown(flyKey);
      descendState=mc.inGameHasFocus && Keyboard.isKeyDown(descendKey);
    }
 else {
      flyState=mc.gameSettings.keyBindJump.getIsKeyPressed();
      descendState=mc.gameSettings.keyBindSneak.getIsKeyPressed();
    }
    boolean forwardState=mc.gameSettings.keyBindForward.getIsKeyPressed();
    boolean backwardState=mc.gameSettings.keyBindBack.getIsKeyPressed();
    boolean leftState=mc.gameSettings.keyBindLeft.getIsKeyPressed();
    boolean rightState=mc.gameSettings.keyBindRight.getIsKeyPressed();
    if (flyState != lastFlyState || descendState != lastDescendState || forwardState != lastForwardState || backwardState != lastBackwardState || leftState != lastLeftState || rightState != lastRightState) {
      lastFlyState=flyState;
      lastDescendState=descendState;
      lastForwardState=forwardState;
      lastBackwardState=backwardState;
      lastLeftState=leftState;
      lastRightState=rightState;
      PacketHandler.instance.sendToServer(new MessageKeyboardSync(flyState,descendState,forwardState,backwardState,leftState,rightState));
      SyncTracker.processKeyUpdate(mc.thePlayer,flyState,descendState,forwardState,backwardState,leftState,rightState);
    }
  }
}","private static void tickStart(){
  if (mc.thePlayer != null) {
    boolean flyState;
    boolean descendState;
    if (SJConfig.customControls) {
      flyState=mc.inGameHasFocus && Keyboard.isKeyDown(flyKey);
      descendState=mc.inGameHasFocus && Keyboard.isKeyDown(descendKey);
    }
 else {
      flyState=mc.gameSettings.keyBindJump.getIsKeyPressed();
      descendState=mc.gameSettings.keyBindSneak.getIsKeyPressed();
    }
    boolean forwardState=mc.gameSettings.keyBindForward.getIsKeyPressed();
    boolean backwardState=mc.gameSettings.keyBindBack.getIsKeyPressed();
    boolean leftState=mc.gameSettings.keyBindLeft.getIsKeyPressed();
    boolean rightState=mc.gameSettings.keyBindRight.getIsKeyPressed();
    if (flyState != lastFlyState || descendState != lastDescendState || forwardState != lastForwardState || backwardState != lastBackwardState || leftState != lastLeftState || rightState != lastRightState) {
      lastFlyState=flyState;
      lastDescendState=descendState;
      lastForwardState=forwardState;
      lastBackwardState=backwardState;
      lastLeftState=leftState;
      lastRightState=rightState;
      PacketHandler.instance.sendToServer(new MessageKeyboardSync(flyState,descendState,forwardState,backwardState,leftState,rightState));
      SyncTracker.processKeyUpdate(mc.thePlayer,flyState,descendState,forwardState,backwardState,leftState,rightState);
    }
    JetpackParticleType jetpackState=null;
    ItemStack armor=mc.thePlayer.getEquipmentInSlot(3);
    if (armor != null && armor.getItem() instanceof ItemJetpack) {
      Jetpack jetpack=((ItemJetpack)armor.getItem()).getJetpack(armor);
      if (jetpack != null) {
        jetpackState=jetpack.particleToShow(armor,(ItemJetpack)armor.getItem(),mc.thePlayer);
      }
    }
    if (jetpackState != lastJetpackState) {
      lastJetpackState=jetpackState;
      SyncTracker.processJetpackUpdate(mc.thePlayer.getEntityId(),jetpackState);
    }
  }
}",0.8378620483726485
33537,"@Override public IMessage onMessage(MessageJetpackSync msg,MessageContext ctx){
  Entity entity=FMLClientHandler.instance().getClient().theWorld.getEntityByID(msg.entityId);
  if (entity != null && entity instanceof EntityLivingBase) {
    if (msg.particleId >= 0) {
      JetpackParticleType particle=JetpackParticleType.values()[msg.particleId];
      SyncTracker.processJetpackUpdate(msg.entityId,particle);
    }
 else {
      SyncTracker.processJetpackUpdate(msg.entityId,null);
    }
  }
  return null;
}","@Override public IMessage onMessage(MessageJetpackSync msg,MessageContext ctx){
  Entity entity=FMLClientHandler.instance().getClient().theWorld.getEntityByID(msg.entityId);
  if (entity != null && entity instanceof EntityLivingBase && entity != FMLClientHandler.instance().getClient().thePlayer) {
    if (msg.particleId >= 0) {
      JetpackParticleType particle=JetpackParticleType.values()[msg.particleId];
      SyncTracker.processJetpackUpdate(msg.entityId,particle);
    }
 else {
      SyncTracker.processJetpackUpdate(msg.entityId,null);
    }
  }
  return null;
}",0.9418282548476454
33538,"@SubscribeEvent public void mobUseJetpack(LivingUpdateEvent evt){
  if (evt.entityLiving instanceof EntityMob) {
    ItemStack armor=evt.entityLiving.getEquipmentInSlot(3);
    if (armor != null && armor.getItem() instanceof ItemJetpack) {
      ItemJetpack jetpackItem=(ItemJetpack)armor.getItem();
      Jetpack jetpack=jetpackItem.getJetpack(armor);
      if (jetpack != null) {
        if (jetpack instanceof JetpackPotato || rand.nextInt(3) == 0) {
          jetpack.setMobMode(armor);
          jetpack.useJetpack(evt.entityLiving,armor,jetpackItem,false);
        }
      }
      if (evt.entityLiving.posY > evt.entityLiving.worldObj.getActualHeight() + 10) {
        evt.entityLiving.attackEntityFrom(DamageSource.generic,80);
      }
    }
  }
}","@SubscribeEvent public void mobUseJetpack(LivingUpdateEvent evt){
  if (!evt.entityLiving.worldObj.isRemote && evt.entityLiving instanceof EntityMob) {
    ItemStack armor=evt.entityLiving.getEquipmentInSlot(3);
    if (armor != null && armor.getItem() instanceof ItemJetpack) {
      ItemJetpack jetpackItem=(ItemJetpack)armor.getItem();
      Jetpack jetpack=jetpackItem.getJetpack(armor);
      if (jetpack != null) {
        if (jetpack instanceof JetpackPotato || rand.nextInt(3) == 0) {
          jetpack.setMobMode(armor);
          jetpack.useJetpack(evt.entityLiving,armor,jetpackItem,false);
        }
      }
      if (evt.entityLiving.posY > evt.entityLiving.worldObj.getActualHeight() + 10) {
        evt.entityLiving.attackEntityFrom(DamageSource.generic,80);
      }
    }
  }
}",0.9747899159663864
33539,"@SubscribeEvent public void onLivingTick(LivingUpdateEvent evt){
  JetpackParticleType jetpackState=null;
  ItemStack armor=evt.entityLiving.getEquipmentInSlot(3);
  boolean foundJetpack=false;
  if (armor != null && armor.getItem() instanceof ItemJetpack) {
    Jetpack jetpack=((ItemJetpack)armor.getItem()).getJetpack(armor);
    if (jetpack != null) {
      jetpackState=jetpack.particleToShow(armor,(ItemJetpack)armor.getItem(),evt.entityLiving);
      foundJetpack=true;
    }
  }
  if (jetpackState != lastJetpackState.get(evt.entityLiving.getEntityId())) {
    if (jetpackState == null) {
      lastJetpackState.remove(evt.entityLiving.getEntityId());
    }
 else {
      lastJetpackState.put(evt.entityLiving.getEntityId(),jetpackState);
    }
    PacketHandler.instance.sendToAllAround(new MessageJetpackSync(evt.entityLiving.getEntityId(),jetpackState != null ? jetpackState.ordinal() : -1),new TargetPoint(evt.entityLiving.dimension,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,256));
  }
 else   if (foundJetpack && evt.entityLiving.worldObj.getTotalWorldTime() % 160L == 0) {
    PacketHandler.instance.sendToAllAround(new MessageJetpackSync(evt.entityLiving.getEntityId(),jetpackState != null ? jetpackState.ordinal() : -1),new TargetPoint(evt.entityLiving.dimension,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,256));
  }
  if (evt.entityLiving.worldObj.getTotalWorldTime() % 200L == 0) {
    Iterator<Integer> itr=lastJetpackState.keySet().iterator();
    while (itr.hasNext()) {
      int entityId=itr.next();
      if (evt.entityLiving.worldObj.getEntityByID(entityId) == null) {
        itr.remove();
      }
    }
  }
}","@SubscribeEvent public void onLivingTick(LivingUpdateEvent evt){
  if (!evt.entityLiving.worldObj.isRemote) {
    JetpackParticleType jetpackState=null;
    ItemStack armor=evt.entityLiving.getEquipmentInSlot(3);
    boolean foundJetpack=false;
    if (armor != null && armor.getItem() instanceof ItemJetpack) {
      Jetpack jetpack=((ItemJetpack)armor.getItem()).getJetpack(armor);
      if (jetpack != null) {
        jetpackState=jetpack.particleToShow(armor,(ItemJetpack)armor.getItem(),evt.entityLiving);
        foundJetpack=true;
      }
    }
    if (jetpackState != lastJetpackState.get(evt.entityLiving.getEntityId())) {
      if (jetpackState == null) {
        lastJetpackState.remove(evt.entityLiving.getEntityId());
      }
 else {
        lastJetpackState.put(evt.entityLiving.getEntityId(),jetpackState);
      }
      PacketHandler.instance.sendToAllAround(new MessageJetpackSync(evt.entityLiving.getEntityId(),jetpackState != null ? jetpackState.ordinal() : -1),new TargetPoint(evt.entityLiving.dimension,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,256));
    }
 else     if (foundJetpack && evt.entityLiving.worldObj.getTotalWorldTime() % 160L == 0) {
      PacketHandler.instance.sendToAllAround(new MessageJetpackSync(evt.entityLiving.getEntityId(),jetpackState != null ? jetpackState.ordinal() : -1),new TargetPoint(evt.entityLiving.dimension,evt.entityLiving.posX,evt.entityLiving.posY,evt.entityLiving.posZ,256));
    }
    if (evt.entityLiving.worldObj.getTotalWorldTime() % 200L == 0) {
      Iterator<Integer> itr=lastJetpackState.keySet().iterator();
      while (itr.hasNext()) {
        int entityId=itr.next();
        if (evt.entityLiving.worldObj.getEntityByID(entityId) == null) {
          itr.remove();
        }
      }
    }
  }
}",0.9686150302332276
33540,"@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int meta,float hitX,float hitY,float hitZ){
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile instanceof TileEntityMobSpawner) {
    NBTTagCompound tag=new NBTTagCompound();
    ((TileEntityMobSpawner)tile).writeToNBT(tag);
    tag.setString(""String_Node_Str"",""String_Node_Str"");
    NBTTagList spawnPotentials=new NBTTagList();
    NBTTagCompound zombieSpawn=new NBTTagCompound();
    zombieSpawn.setString(""String_Node_Str"",""String_Node_Str"");
    zombieSpawn.setInteger(""String_Node_Str"",1);
    NBTTagCompound zombieSpawnProperties=new NBTTagCompound();
    zombieSpawnProperties.setString(""String_Node_Str"",""String_Node_Str"");
    NBTTagList equipment=new NBTTagList();
    equipment.appendTag(new NBTTagCompound());
    equipment.appendTag(new NBTTagCompound());
    equipment.appendTag(new NBTTagCompound());
    equipment.appendTag(SJItems.jetpackTuberous.writeToNBT(new NBTTagCompound()));
    zombieSpawnProperties.setTag(""String_Node_Str"",equipment);
    NBTTagList dropChances=new NBTTagList();
    for (int i=0; i <= 4; i++) {
      equipment.appendTag(new NBTTagFloat(0.0F));
    }
    zombieSpawnProperties.setTag(""String_Node_Str"",dropChances);
    zombieSpawn.setTag(""String_Node_Str"",zombieSpawnProperties);
    spawnPotentials.appendTag(zombieSpawn);
    tag.setTag(""String_Node_Str"",spawnPotentials);
    tag.setShort(""String_Node_Str"",(short)2);
    tag.setShort(""String_Node_Str"",(short)8);
    tag.setShort(""String_Node_Str"",(short)-1);
    tag.setShort(""String_Node_Str"",(short)30);
    tag.setShort(""String_Node_Str"",(short)60);
    tag.setShort(""String_Node_Str"",(short)10);
    tag.setShort(""String_Node_Str"",(short)96);
    ((TileEntityMobSpawner)tile).readFromNBT(tag);
  }
  return true;
}","@Override public boolean onItemUse(ItemStack itemStack,EntityPlayer player,World world,int x,int y,int z,int meta,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    TileEntity tile=world.getTileEntity(x,y,z);
    if (tile instanceof TileEntityMobSpawner) {
      NBTTagCompound tag=new NBTTagCompound();
      ((TileEntityMobSpawner)tile).writeToNBT(tag);
      tag.setString(""String_Node_Str"",""String_Node_Str"");
      NBTTagList spawnPotentials=new NBTTagList();
      NBTTagCompound zombieSpawn=new NBTTagCompound();
      zombieSpawn.setString(""String_Node_Str"",""String_Node_Str"");
      zombieSpawn.setInteger(""String_Node_Str"",1);
      NBTTagCompound zombieSpawnProperties=new NBTTagCompound();
      zombieSpawnProperties.setString(""String_Node_Str"",""String_Node_Str"");
      NBTTagList equipment=new NBTTagList();
      equipment.appendTag(new NBTTagCompound());
      equipment.appendTag(new NBTTagCompound());
      equipment.appendTag(new NBTTagCompound());
      equipment.appendTag(SJItems.jetpackTuberous.writeToNBT(new NBTTagCompound()));
      zombieSpawnProperties.setTag(""String_Node_Str"",equipment);
      NBTTagList dropChances=new NBTTagList();
      for (int i=0; i <= 4; i++) {
        dropChances.appendTag(new NBTTagFloat(0.0F));
      }
      zombieSpawnProperties.setTag(""String_Node_Str"",dropChances);
      zombieSpawn.setTag(""String_Node_Str"",zombieSpawnProperties);
      spawnPotentials.appendTag(zombieSpawn);
      tag.setTag(""String_Node_Str"",spawnPotentials);
      tag.setShort(""String_Node_Str"",(short)2);
      tag.setShort(""String_Node_Str"",(short)8);
      tag.setShort(""String_Node_Str"",(short)-1);
      tag.setShort(""String_Node_Str"",(short)30);
      tag.setShort(""String_Node_Str"",(short)60);
      tag.setShort(""String_Node_Str"",(short)10);
      tag.setShort(""String_Node_Str"",(short)96);
      ((TileEntityMobSpawner)tile).readFromNBT(tag);
    }
  }
  return true;
}",0.934325977133741
33541,"@Override public ArmorProperties getProperties(EntityLivingBase player,ItemStack armor,DamageSource source,double damage,int slot){
  int maxAbsorbed=this.getEnergyStored(armor) / this.energyPerDamage * 100;
  return new ArmorProperties(0,this.armorAbsorption,maxAbsorbed);
}","@Override public ArmorProperties getProperties(EntityLivingBase player,ItemStack armor,DamageSource source,double damage,int slot){
  if (this.energyPerDamage != 0) {
    int maxAbsorbed=this.getEnergyStored(armor) / this.energyPerDamage * 100;
    return new ArmorProperties(0,this.armorAbsorption,maxAbsorbed);
  }
 else {
    int maxAbsorbed=12500000;
    return new ArmorProperties(0,this.armorAbsorption,maxAbsorbed);
  }
}",0.7823613086770982
33542,"/** 
 * Determines whether this instance contains the given character.
 * @param c the character to check for
 * @return true if this instance contains c
 */
public boolean contains(final char c){
  final int index=Arrays.binarySearch(chars,c);
  return (index == -1) == subtractive;
}","/** 
 * Determines whether this instance contains the given character.
 * @param c the character to check for
 * @return true if this instance contains c
 */
public boolean contains(final char c){
  final int index=Arrays.binarySearch(chars,c);
  return index < 0 == subtractive;
}",0.978798586572438
33543,"/** 
 * Kickstart a   {@code join} rule<p>Like  {@link #join(Object)}, except that several rules are accepted as arguments.</p>
 * @param rule first rule
 * @param rule2 second rule
 * @param moreRules other rules
 * @return a {@link JoinMatcherBootstrap}
 * @see #sequence(Object,Object,Object)
 */
public final JoinMatcherBootstrap<V,BaseParser<V>> join(final Object rule,final Object rule2,final Object moreRules){
  Objects.requireNonNull(moreRules);
  return join(sequence(rule,rule2,moreRules));
}","/** 
 * Kickstart a   {@code join} rule<p>Like  {@link #join(Object)}, except that several rules are accepted as arguments.</p>
 * @param rule first rule
 * @param rule2 second rule
 * @param moreRules other rules
 * @return a {@link JoinMatcherBootstrap}
 * @see #sequence(Object,Object,Object)
 */
public final JoinMatcherBootstrap<V,BaseParser<V>> join(final Object rule,final Object rule2,final Object... moreRules){
  Objects.requireNonNull(moreRules);
  return join(sequence(rule,rule2,moreRules));
}",0.9970267591674926
33544,"/** 
 * Core search method <p>This method uses a   {@link CharBuffer} to perform searches, and changesthis buffer's position as the match progresses. The two other arguments are the depth of the current search (ie the number of nodes visited since root) and the index of the last node where a match was found (ie the last node where  {@link #fullWord} was true.</p>
 * @param buffer the charbuffer
 * @param matchedLength the last matched length (-1 if no match yet)
 * @param currentLength the current length walked by the trie
 * @return the length of the match found, -1 otherwise
 */
private int doSearch(final CharBuffer buffer,final int matchedLength,final int currentLength,final boolean ignoreCase){
  final int nextLength=fullWord ? currentLength : matchedLength;
  if (!buffer.hasRemaining())   return nextLength;
  char c=buffer.get();
  int index=Arrays.binarySearch(nextChars,c);
  if (index == -1 && ignoreCase) {
    final boolean isUpper=Character.isUpperCase(c);
    final boolean isLower=Character.isLowerCase(c);
    if (isUpper != isLower) {
      c=isUpper ? Character.toLowerCase(c) : Character.toUpperCase(c);
      index=Arrays.binarySearch(nextChars,c);
    }
  }
  if (index < 0)   return nextLength;
  return nextNodes[index].doSearch(buffer,nextLength,currentLength + 1,ignoreCase);
}","/** 
 * Core search method <p>This method uses a   {@link CharBuffer} to perform searches, and changesthis buffer's position as the match progresses. The two other arguments are the depth of the current search (ie the number of nodes visited since root) and the index of the last node where a match was found (ie the last node where  {@link #fullWord} was true.</p>
 * @param buffer the charbuffer
 * @param matchedLength the last matched length (-1 if no match yet)
 * @param currentLength the current length walked by the trie
 * @return the length of the match found, -1 otherwise
 */
private int doSearch(final CharBuffer buffer,final int matchedLength,final int currentLength,final boolean ignoreCase){
  final int nextLength=fullWord ? currentLength : matchedLength;
  if (!buffer.hasRemaining())   return nextLength;
  char c=buffer.get();
  int index=Arrays.binarySearch(nextChars,c);
  if (index < 0 && ignoreCase) {
    final boolean isUpper=Character.isUpperCase(c);
    final boolean isLower=Character.isLowerCase(c);
    if (isUpper != isLower) {
      c=isUpper ? Character.toLowerCase(c) : Character.toUpperCase(c);
      index=Arrays.binarySearch(nextChars,c);
    }
  }
  if (index < 0)   return nextLength;
  return nextNodes[index].doSearch(buffer,nextLength,currentLength + 1,ignoreCase);
}",0.9969488939740656
33545,"/** 
 * Search for a string into this trie
 * @param needle the string to search
 * @return the length of the match (ie, the string) or -1 if not found
 */
public int search(final String needle){
  return node.search(needle);
}","/** 
 * Search for a string into this trie
 * @param needle the string to search
 * @return the length of the match (ie, the string) or -1 if not found
 */
public int search(final String needle,final boolean ignoreCase){
  return node.search(needle,ignoreCase);
}",0.926530612244898
33546,"/** 
 * Create a new builder for this class
 * @param ignoreCase should the resulting trie be case insensitive
 * @return a builder
 * @see Character#isLowerCase(char)
 * @see Character#isUpperCase(char)
 */
public static TrieBuilder newBuilder(final boolean ignoreCase){
  return new TrieBuilder(ignoreCase);
}","/** 
 * Create a new builder for this class
 * @return a builder
 */
public static TrieBuilder newBuilder(){
  return new TrieBuilder();
}",0.6146993318485523
33547,"/** 
 * Add one word to the trie
 * @param word the word to add
 * @return this
 * @throws IllegalArgumentException word is less than two characters long
 */
public TrieBuilder addWord(@Nonnull final String word){
  Objects.requireNonNull(word);
  final int length=word.length();
  if (length == 0)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  nrWords++;
  maxLength=Math.max(maxLength,length);
  nodeBuilder.addWord(word,ignoreCase);
  return this;
}","/** 
 * Add one word to the trie
 * @param word the word to add
 * @return this
 * @throws IllegalArgumentException word is less than two characters long
 */
public TrieBuilder addWord(@Nonnull final String word){
  Objects.requireNonNull(word);
  final int length=word.length();
  if (length == 0)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  nrWords++;
  maxLength=Math.max(maxLength,length);
  nodeBuilder.addWord(word);
  return this;
}",0.9885297184567258
33548,"TrieBuilder(final boolean ignoreCase){
  this.ignoreCase=ignoreCase;
}","TrieBuilder(){
}",0.3720930232558139
33549,"/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  final int maxLength=trie.getMaxLength();
  final int index=context.getCurrentIndex();
  final String input=context.getInputBuffer().extract(index,index + maxLength);
  final int ret=trie.search(input);
  if (ret == -1)   return false;
  context.advanceIndex(ret);
  return true;
}","/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  final int maxLength=trie.getMaxLength();
  final int index=context.getCurrentIndex();
  final String input=context.getInputBuffer().extract(index,index + maxLength);
  final int ret=trie.search(input,false);
  if (ret == -1)   return false;
  context.advanceIndex(ret);
  return true;
}",0.9938650306748468
33550,"public int search(final String needle){
  return doSearch(CharBuffer.wrap(needle),fullWord ? 0 : -1,0);
}","public int search(final String needle,final boolean ignoreCase){
  return doSearch(CharBuffer.wrap(needle),fullWord ? 0 : -1,0,ignoreCase);
}",0.8536585365853658
33551,"/** 
 * Core search method <p>This method uses a   {@link CharBuffer} to perform searches, and changesthis buffer's position as the match progresses. The two other arguments are the depth of the current search (ie the number of nodes visited since root) and the index of the last node where a match was found (ie the last node where  {@link #fullWord} was true.</p>
 * @param buffer the charbuffer
 * @param matchedLength the last matched length (-1 if no match yet)
 * @param currentLength the current length walked by the trie
 * @return the length of the match found, -1 otherwise
 */
private int doSearch(final CharBuffer buffer,final int matchedLength,final int currentLength){
  final int nextLength=fullWord ? currentLength : matchedLength;
  if (!buffer.hasRemaining())   return nextLength;
  final int index=Arrays.binarySearch(nextChars,buffer.get());
  return index < 0 ? nextLength : nextNodes[index].doSearch(buffer,nextLength,currentLength + 1);
}","/** 
 * Core search method <p>This method uses a   {@link CharBuffer} to perform searches, and changesthis buffer's position as the match progresses. The two other arguments are the depth of the current search (ie the number of nodes visited since root) and the index of the last node where a match was found (ie the last node where  {@link #fullWord} was true.</p>
 * @param buffer the charbuffer
 * @param matchedLength the last matched length (-1 if no match yet)
 * @param currentLength the current length walked by the trie
 * @return the length of the match found, -1 otherwise
 */
private int doSearch(final CharBuffer buffer,final int matchedLength,final int currentLength,final boolean ignoreCase){
  final int nextLength=fullWord ? currentLength : matchedLength;
  if (!buffer.hasRemaining())   return nextLength;
  char c=buffer.get();
  int index=Arrays.binarySearch(nextChars,c);
  if (index == -1 && ignoreCase) {
    final boolean isUpper=Character.isUpperCase(c);
    final boolean isLower=Character.isLowerCase(c);
    if (isUpper != isLower) {
      c=isUpper ? Character.toLowerCase(c) : Character.toUpperCase(c);
      index=Arrays.binarySearch(nextChars,c);
    }
  }
  if (index < 0)   return nextLength;
  return nextNodes[index].doSearch(buffer,nextLength,currentLength + 1,ignoreCase);
}",0.8253409590849098
33552,"TrieNodeBuilder addWord(final CharSequence word,final boolean ignoreCase){
  doAddWord(word,ignoreCase,0);
  return this;
}","public TrieNodeBuilder addWord(final String word){
  doAddWord(CharBuffer.wrap(word));
  return this;
}",0.6637168141592921
33553,"/** 
 * Add a word
 * @param word the word as a {@link CharSequence}
 * @param ignoreCase whether the trie ignores case
 * @param index the current index in the sequence
 */
private void doAddWord(final CharSequence word,final boolean ignoreCase,final int index){
  if (word.length() == index) {
    fullWord=true;
    return;
  }
  char c;
  TrieNodeBuilder builder;
  c=word.charAt(index);
  builder=subnodes.get(c);
  if (builder == null) {
    builder=new TrieNodeBuilder();
    subnodes.put(c,builder);
  }
  builder.doAddWord(word,ignoreCase,index + 1);
  if (!ignoreCase)   return;
  final boolean upper=Character.isUpperCase(c);
  final boolean lower=Character.isLowerCase(c);
  if (upper == lower)   return;
  if (Character.isUpperCase(c)) {
    c=Character.toLowerCase(c);
    builder=subnodes.get(c);
    if (builder == null) {
      builder=new TrieNodeBuilder();
      subnodes.put(c,builder);
    }
    builder.doAddWord(word,ignoreCase,index + 1);
  }
  if (Character.isLowerCase(c)) {
    c=Character.toUpperCase(c);
    builder=subnodes.get(c);
    if (builder == null) {
      builder=new TrieNodeBuilder();
      subnodes.put(c,builder);
    }
    builder.doAddWord(word,ignoreCase,index + 1);
  }
}","/** 
 * Add a word <p>Here also, a   {@link CharBuffer} is used, which changes position as weprogress into building the tree, character by character, node by node. </p> <p>If the buffer is ""empty"" when entering this method, it means a match must be recorded (see  {@link #fullWord}).</p>
 * @param buffer the buffer (never null)
 */
private void doAddWord(final CharBuffer buffer){
  if (!buffer.hasRemaining()) {
    fullWord=true;
    return;
  }
  final char c=buffer.get();
  TrieNodeBuilder builder=subnodes.get(c);
  if (builder == null) {
    builder=new TrieNodeBuilder();
    subnodes.put(c,builder);
  }
  builder.doAddWord(buffer);
}",0.1138560687432867
33554,"/** 
 * Match one string among many using a <a href=""http://en.wikipedia.org/wiki/Trie"" target=""_blank"">trie</a>, case insensitive <p>This method delegates to   {@link #trieIgnoreCase(Collection)}.</p>
 * @param first the first string
 * @param second the second string
 * @param others other strings
 * @return a rule
 * @see TrieBuilder#TrieBuilder(boolean)
 */
public Rule trieIgnoreCase(final String first,final String second,final String... others){
  final List<String> words=ImmutableList.<String>builder().add(first).add(second).add(others).build();
  return trieIgnoreCase(words);
}","/** 
 * Match one string among many using a <a href=""http://en.wikipedia.org/wiki/Trie"" target=""_blank"">trie</a>, case insensitive <p>This method delegates to   {@link #trieIgnoreCase(Collection)}.</p>
 * @param first the first string
 * @param second the second string
 * @param others other strings
 * @return a rule
 * @see CaseInsensitiveTrieMatcher
 */
public Rule trieIgnoreCase(final String first,final String second,final String... others){
  final List<String> words=ImmutableList.<String>builder().add(first).add(second).add(others).build();
  return trieIgnoreCase(words);
}",0.9574829931972788
33555,"public TrieMatcherTest(){
  final TrieBuilder builder=Trie.newBuilder(false);
  for (  final String keyword : KEYWORDS)   builder.addWord(keyword);
  matcher=new TrieMatcher(builder.build());
}","public TrieMatcherTest(){
  final TrieBuilder builder=Trie.newBuilder();
  for (  final String keyword : KEYWORDS)   builder.addWord(keyword);
  matcher=new TrieMatcher(builder.build());
}",0.9868766404199476
33556,"protected final void resetValueStack(){
  if (stackSnapshot == null)   stackSnapshot=new ArrayList<>();
  valueStack.restoreSnapshot(stackSnapshot);
}","protected final void resetValueStack(){
  valueStack=new DefaultValueStack<>();
  stackSnapshot=null;
}",0.5770750988142292
33557,"public void writeBefore(final MatcherContext<?> context) throws IOException {
  final Matcher matcher=context.getMatcher();
  @SuppressWarnings(""String_Node_Str"") final String name=matcher.getClass().getSimpleName();
  sb.setLength(0);
  sb.append(BEFORE_MATCH).append(';').append(context.getCurrentIndex()).append(';').append(context.getLevel()).append(';').append(matcher.toString().replace(""String_Node_Str"",""String_Node_Str"")).append(';').append(matcher.getType().ordinal()).append(name.isEmpty() ? ""String_Node_Str"" : name).append(';');
  writer.append(sb);
}","public void writeBefore(final MatcherContext<?> context,final long nanos) throws IOException {
  final Matcher matcher=context.getMatcher();
  @SuppressWarnings(""String_Node_Str"") final String name=matcher.getClass().getSimpleName();
  sb.setLength(0);
  sb.append(BEFORE_MATCH).append(';').append(context.getCurrentIndex()).append(';').append(context.getLevel()).append(';').append(matcher.toString().replace(""String_Node_Str"",""String_Node_Str"")).append(';').append(matcher.getType().ordinal()).append(';').append(name.isEmpty() ? ""String_Node_Str"" : name).append(';').append(nanos).append('\n');
  writer.append(sb);
}",0.9527027027027029
33558,"@Override public void beforeMatch(final PreMatchEvent<V> event){
  try {
    eventWriter.writeBefore(event.getContext());
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
  before=System.nanoTime();
}","@Override public void beforeMatch(final PreMatchEvent<V> event){
  try {
    eventWriter.writeBefore(event.getContext(),System.nanoTime());
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
}",0.8959276018099548
33559,"@Override public void matchFailure(final MatchFailureEvent<V> event){
  try {
    eventWriter.writeAfter(event.getContext(),before,System.nanoTime(),false);
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
}","@Override public void matchFailure(final MatchFailureEvent<V> event){
  try {
    eventWriter.writeFailure(event.getContext(),System.nanoTime());
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
}",0.945054945054945
33560,"@Override public void matchSuccess(final MatchSuccessEvent<V> event){
  try {
    eventWriter.writeAfter(event.getContext(),before,System.nanoTime(),true);
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
}","@Override public void matchSuccess(final MatchSuccessEvent<V> event){
  try {
    eventWriter.writeSuccess(event.getContext(),System.nanoTime());
  }
 catch (  IOException e) {
    throw cleanup(""String_Node_Str"",e);
  }
}",0.947136563876652
33561,"private int doBinarySearch(final int low,final int high,final int index){
  if (low == high)   return low;
  final int middle=(low + high) / 2;
  final Range<Integer> range=lines.get(middle);
  if (range.contains(index))   return middle;
  return index < range.lowerEndpoint() ? doBinarySearch(low,middle,index) : doBinarySearch(middle,high,index);
}","private int doBinarySearch(final int low,final int high,final int index){
  if (high - low <= 1)   return lines.get(low).contains(index) ? low : high;
  final int middle=(low + high) / 2;
  final Range<Integer> range=lines.get(middle);
  if (range.contains(index))   return middle;
  return index < range.lowerEndpoint() ? doBinarySearch(low,middle,index) : doBinarySearch(middle,high,index);
}",0.9086021505376344
33562,"@BeforeMethod public void initContext(){
  builder=new MatcherContextBuilder().withInput(""String_Node_Str"").withMatcher(EndOfInputMatcher.INSTANCE);
}","@BeforeMethod public void initContext(){
  builder=new MatcherContextBuilder().withInput(""String_Node_Str"").withMatcher(new EndOfInputMatcher());
}",0.9494949494949496
33563,"public TestResult(final ParsingResult<V> result){
  this.result=result;
  resultAssert=OldParsingResultAssert.assertResult(result);
}","public TestResult(final ParsingResult<V> result){
  this.result=result;
}",0.7087378640776699
33564,"/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  if (!joined.getSubContext(context).runMatcher()) {
    if (minCycles != 0)     return false;
    context.createNode();
    return true;
  }
  int beforeCycle;
  beforeCycle=context.getCurrentIndex();
  if (!matchJoining(context,beforeCycle)) {
    context.setCurrentIndex(beforeCycle);
    if (minCycles > 1)     return false;
    context.createNode();
    return true;
  }
  int cycles=2;
  while (true) {
    beforeCycle=context.getCurrentIndex();
    if (matchJoining(context,beforeCycle) && joined.getSubContext(context).runMatcher()) {
      cycles++;
      continue;
    }
    context.setCurrentIndex(beforeCycle);
    break;
  }
  if (cycles < minCycles)   return false;
  context.createNode();
  return true;
}","/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  if (!joined.getSubContext(context).runMatcher()) {
    if (minCycles != 0)     return false;
    context.createNode();
    return true;
  }
  int completedCycles=1;
  int beforeCycle=context.getCurrentIndex();
  while (matchCycle(context,beforeCycle)) {
    beforeCycle=context.getCurrentIndex();
    completedCycles++;
  }
  context.setCurrentIndex(beforeCycle);
  if (completedCycles < minCycles)   return false;
  context.createNode();
  return true;
}",0.6220820189274447
33565,"@Override protected void generateMethod(final InstructionGroup group,final ClassWriter cw){
  final MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",CodegenUtils.sig(void.class,Object.class),null,null);
  convertXLoads(group);
  group.getInstructions().accept(mv);
  mv.visitInsn(ARETURN);
  mv.visitMaxs(0,0);
}","@Override protected void generateMethod(final InstructionGroup group,final ClassWriter cw){
  final MethodVisitor mv=cw.visitMethod(ACC_PUBLIC,""String_Node_Str"",CodegenUtils.sig(Object.class),null,null);
  convertXLoads(group);
  group.getInstructions().accept(mv);
  mv.visitInsn(ARETURN);
  mv.visitMaxs(0,0);
}",0.9827315541601256
33566,"/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  if (!joined.getSubContext(context).runMatcher()) {
    if (minCycles != 0)     return false;
    context.createNode();
    return true;
  }
  int beforeCycle;
  beforeCycle=context.getCurrentIndex();
  if (!matchJoining(context,beforeCycle)) {
    context.setCurrentIndex(beforeCycle);
    if (minCycles != 1)     return false;
    context.createNode();
    return true;
  }
  int cycles=2;
  while (true) {
    beforeCycle=context.getCurrentIndex();
    if (matchJoining(context,beforeCycle) && joined.getSubContext(context).runMatcher()) {
      cycles++;
      continue;
    }
    context.setCurrentIndex(beforeCycle);
    break;
  }
  if (cycles < minCycles)   return false;
  context.createNode();
  return true;
}","/** 
 * Tries a match on the given MatcherContext.
 * @param context the MatcherContext
 * @return true if the match was successful
 */
@Override public <V>boolean match(final MatcherContext<V> context){
  if (!joined.getSubContext(context).runMatcher()) {
    if (minCycles != 0)     return false;
    context.createNode();
    return true;
  }
  int beforeCycle;
  beforeCycle=context.getCurrentIndex();
  if (!matchJoining(context,beforeCycle)) {
    context.setCurrentIndex(beforeCycle);
    if (minCycles > 1)     return false;
    context.createNode();
    return true;
  }
  int cycles=2;
  while (true) {
    beforeCycle=context.getCurrentIndex();
    if (matchJoining(context,beforeCycle) && joined.getSubContext(context).runMatcher()) {
      cycles++;
      continue;
    }
    context.setCurrentIndex(beforeCycle);
    break;
  }
  if (cycles < minCycles)   return false;
  context.createNode();
  return true;
}",0.9983775013520824
33567,"@Override public int getLineCount(){
  return 0;
}","@Override public int getLineCount(){
  if (!newlinesAreBuilt.getAndSet(true))   buildNewlines();
  return newlines.length + 1;
}",0.550561797752809
33568,"@Override public AnnotationVisitor visitAnnotation(final String desc,final boolean visible){
  recordDesc(ruleAnnotations,desc);
  if (Types.EXPLICIT_ACTIONS_ONLY_DESC.equals(desc)) {
    return null;
  }
  if (Types.SUPPRESS_NODE_DESC.equals(desc)) {
    hasSuppressNodeAnnotation=true;
    return null;
  }
  if (Types.SUPPRESS_SUBNODES_DESC.equals(desc)) {
    hasSuppressSubnodesAnnotation=true;
    return null;
  }
  if (Types.SKIP_NODE_DESC.equals(desc)) {
    hasSkipNodeAnnotation=true;
    return null;
  }
  if (Types.MEMO_MISMATCHES_DESC.equals(desc)) {
    hasMemoMismatchesAnnotation=true;
    return null;
  }
  if (Types.SKIP_ACTIONS_IN_PREDICATES_DESC.equals(desc)) {
    hasSkipActionsInPredicatesAnnotation=true;
    return null;
  }
  if (Types.DONT_SKIP_ACTIONS_IN_PREDICATES_DESC.equals(desc)) {
    hasSkipActionsInPredicatesAnnotation=false;
    return null;
  }
  if (Types.DONT_LABEL_DESC.equals(desc)) {
    hasDontLabelAnnotation=true;
    return null;
  }
  return visible ? super.visitAnnotation(desc,true) : null;
}","@Override public AnnotationVisitor visitAnnotation(final String desc,final boolean visible){
  recordDesc(ruleAnnotations,desc);
  if (Types.EXPLICIT_ACTIONS_ONLY_DESC.equals(desc)) {
    return null;
  }
  if (Types.SUPPRESS_NODE_DESC.equals(desc)) {
    hasSuppressNodeAnnotation=true;
    return null;
  }
  if (Types.SUPPRESS_SUBNODES_DESC.equals(desc)) {
    hasSuppressSubnodesAnnotation=true;
    return null;
  }
  if (Types.SKIP_NODE_DESC.equals(desc)) {
    hasSkipNodeAnnotation=true;
    return null;
  }
  if (Types.MEMO_MISMATCHES_DESC.equals(desc)) {
    hasMemoMismatchesAnnotation=true;
    return null;
  }
  if (Types.SKIP_ACTIONS_IN_PREDICATES_DESC.equals(desc)) {
    hasSkipActionsInPredicatesAnnotation=true;
    return null;
  }
  if (Types.DONT_SKIP_ACTIONS_IN_PREDICATES_DESC.equals(desc)) {
    hasSkipActionsInPredicatesAnnotation=false;
    return null;
  }
  if (Types.DONT_LABEL_DESC.equals(desc)) {
    hasDontLabelAnnotation=true;
    return null;
  }
  if (Types.DONT_EXTEND_DESC.equals(desc)) {
    return null;
  }
  return visible ? super.visitAnnotation(desc,true) : null;
}",0.969416126042632
33569,"@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_stats,null);
    holder=new ViewHolder();
    holder.teamNumber=(TextView)convertView.findViewById(R.id.team_number);
    holder.teamName=(TextView)convertView.findViewById(R.id.team_name);
    holder.teamStat=(TextView)convertView.findViewById(R.id.team_stat);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.teamNumber.setText(""String_Node_Str"" + teamNumber);
  if (!teamName.isEmpty()) {
    holder.teamName.setText(teamName);
  }
 else {
    holder.teamName.setText(""String_Node_Str"" + teamNumber);
  }
  holder.teamStat.setText(teamStat);
  return convertView;
}","@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_stats,null);
    holder=new ViewHolder();
    holder.teamNumber=(TextView)convertView.findViewById(R.id.team_number);
    holder.teamName=(TextView)convertView.findViewById(R.id.team_name);
    holder.teamStat=(TextView)convertView.findViewById(R.id.team_stat);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.teamNumber.setText(""String_Node_Str"" + teamNumber);
  holder.teamName.setText(TextUtils.isEmpty(teamName) ? ""String_Node_Str"" + teamNumber : teamName);
  holder.teamStat.setText(teamStat);
  return convertView;
}",0.8312312312312312
33570,"@Override public void parseData(){
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.getRankings() == null || mAPIData.getRankings().isEmpty()) {
    return;
  }
  List<IRankingItem> rankings=mAPIData.getRankings();
  List<IRankingSortOrder> sortOrders=mAPIData.getSortOrderInfo();
  List<IRankingSortOrder> extraStats=mAPIData.getExtraStatsInfo();
  for (int i=0; i < rankings.size(); i++) {
    IRankingItem row=rankings.get(i);
    String teamKey=row.getTeamKey();
    String rankingString;
    String rankingSummary;
    String record;
    @Nullable ITeamRecord teamRecord=row.getRecord();
    if (teamRecord != null) {
      record=""String_Node_Str"" + RankingItem.TeamRecord.buildRecordString(teamRecord) + ""String_Node_Str"";
    }
 else {
      record=""String_Node_Str"";
    }
    IRankingSortOrder firstSortInfo=sortOrders.get(0);
    Double firstSort=row.getSortOrders().remove(0);
    rankingSummary=mResources.getString(R.string.rank_item_summary,sortOrders.get(0).getName(),formatSortOrder(firstSortInfo,firstSort));
    rankingString=buildRankingString(row,sortOrders,extraStats,mResources,BOLD_TITLES | LINE_BREAKS);
    Team team=mDb.getTeamsTable().get(teamKey);
    String nickname;
    if (team != null) {
      nickname=team.getNickname();
    }
 else {
      nickname=""String_Node_Str"" + teamKey.substring(3);
    }
    mDataToBind.add(new TeamRankingViewModel(teamKey,nickname,teamKey.substring(3),row.getRank(),record,rankingSummary,rankingString));
  }
  mEventBus.post(new EventRankingsEvent(generateTopRanksString(mAPIData)));
}","@Override public void parseData(){
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.getRankings() == null || mAPIData.getRankings().isEmpty()) {
    return;
  }
  List<IRankingItem> rankings=mAPIData.getRankings();
  List<IRankingSortOrder> sortOrders=mAPIData.getSortOrderInfo();
  List<IRankingSortOrder> extraStats=mAPIData.getExtraStatsInfo();
  IRankingSortOrder firstSortInfo=sortOrders.remove(0);
  for (int i=0; i < rankings.size(); i++) {
    IRankingItem row=rankings.get(i);
    String teamKey=row.getTeamKey();
    String rankingString;
    String rankingSummary;
    String record;
    @Nullable ITeamRecord teamRecord=row.getRecord();
    if (teamRecord != null) {
      record=""String_Node_Str"" + RankingItem.TeamRecord.buildRecordString(teamRecord) + ""String_Node_Str"";
    }
 else {
      record=""String_Node_Str"";
    }
    Double firstSort=row.getSortOrders().remove(0);
    rankingSummary=mResources.getString(R.string.rank_item_summary,firstSortInfo.getName(),formatSortOrder(firstSortInfo,firstSort));
    rankingString=buildRankingString(row,sortOrders,extraStats,mResources,BOLD_TITLES | LINE_BREAKS);
    Team team=mDb.getTeamsTable().get(teamKey);
    String nickname;
    if (team != null) {
      nickname=team.getNickname();
    }
 else {
      nickname=""String_Node_Str"" + teamKey.substring(3);
    }
    mDataToBind.add(new TeamRankingViewModel(teamKey,nickname,teamKey.substring(3),row.getRank(),record,rankingSummary,rankingString));
  }
  mEventBus.post(new EventRankingsEvent(generateTopRanksString(mAPIData)));
}",0.9547641963426372
33571,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.notification_preferences);
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {
    addPreferencesFromResource(R.xml.notification_preferences_lollipop);
  }
  notificationTone=findPreference(""String_Node_Str"");
  notificationVibrate=findPreference(""String_Node_Str"");
  notificationHeadsup=null;
  if (Utilities.hasLApis()) {
    notificationHeadsup=findPreference(""String_Node_Str"");
  }
  notificationLedEnabled=(CheckBoxPreference)findPreference(""String_Node_Str"");
  notificationLedColor=findPreference(""String_Node_Str"");
  CheckBoxPreference enableNotifications=(CheckBoxPreference)findPreference(""String_Node_Str"");
  boolean currentlyEnabled=enableNotifications.isChecked();
  setPreferencesEnabled(currentlyEnabled);
  enableNotifications.setOnPreferenceChangeListener((preference,newValue) -> {
    boolean enabled=(Boolean)newValue;
    setPreferencesEnabled(enabled);
    return true;
  }
);
  notificationLedColor.setEnabled(notificationLedEnabled.isChecked());
  notificationLedEnabled.setOnPreferenceChangeListener((preference,newValue) -> {
    boolean enabled=(Boolean)newValue;
    notificationLedColor.setEnabled(enabled);
    return true;
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.notification_preferences);
  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.KITKAT) {
    addPreferencesFromResource(R.xml.notification_preferences_lollipop);
  }
}",0.3705552089831566
33572,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  TbaLogger.w(""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  int upgradeTo=oldVersion + 1;
  while (upgradeTo <= newVersion) {
switch (upgradeTo) {
case 14:
      db.execSQL(CREATE_DISTRICTS);
    db.execSQL(CREATE_DISTRICTTEAMS);
  if (!columnExists(db,TABLE_EVENTS,EventsTable.DISTRICT_POINTS)) {
    db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.DISTRICT_POINTS+ ""String_Node_Str"");
  }
break;
case 15:
db.execSQL(CREATE_FAVORITES);
db.execSQL(CREATE_SUBSCRIPTIONS);
break;
case 16:
if (!columnExists(db,TABLE_SUBSCRIPTIONS,SubscriptionsTable.NOTIFICATION_SETTINGS)) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.NOTIFICATION_SETTINGS+ ""String_Node_Str"");
}
if (!columnExists(db,TABLE_SUBSCRIPTIONS,SubscriptionsTable.MODEL_ENUM)) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.MODEL_ENUM+ ""String_Node_Str"");
}
if (!columnExists(db,TABLE_FAVORITES,FavoritesTable.MODEL_ENUM)) {
db.execSQL(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str""+ FavoritesTable.MODEL_ENUM+ ""String_Node_Str"");
}
break;
case 17:
if (!columnExists(db,TABLE_DISTRICTS,DistrictsTable.NAME)) {
db.execSQL(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str""+ DistrictsTable.NAME+ ""String_Node_Str"");
}
break;
case 18:
if (!columnExists(db,TABLE_EVENTS,EventsTable.SHORTNAME)) {
db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.SHORTNAME+ ""String_Node_Str"");
}
break;
case 20:
db.execSQL(CREATE_NOTIFICATIONS);
break;
case 23:
case 24:
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_TEAMS);
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_EVENTS);
onCreate(db);
break;
case 25:
db.execSQL(""String_Node_Str"" + TABLE_API);
break;
case 28:
db.beginTransaction();
try {
db.execSQL(""String_Node_Str"" + TABLE_NOTIFICATIONS);
db.execSQL(CREATE_NOTIFICATIONS);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 29:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_TEAMS,TeamsTable.MOTTO)) {
db.execSQL(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str""+ TeamsTable.MOTTO+ ""String_Node_Str"");
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 30:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_MATCHES,MatchesTable.BREAKDOWN)) {
db.execSQL(""String_Node_Str"" + TABLE_MATCHES + ""String_Node_Str""+ MatchesTable.BREAKDOWN+ ""String_Node_Str"");
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 31:
String[] tables={TABLE_AWARDS,TABLE_DISTRICTS,TABLE_DISTRICTTEAMS,TABLE_EVENTS,TABLE_EVENTTEAMS,TABLE_MATCHES,TABLE_MEDIAS,TABLE_TEAMS};
db.beginTransaction();
try {
for (int i=0; i < tables.length; i++) {
if (!columnExists(db,tables[i],""String_Node_Str"")) {
db.execSQL(String.format(""String_Node_Str"",tables[i]));
}
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 32:
db.beginTransaction();
String[] tables32={TABLE_EVENTS,TABLE_TEAMS,TABLE_DISTRICTTEAMS,TABLE_EVENTTEAMS,TABLE_MATCHES};
try {
for (int i=0; i < tables32.length; i++) {
db.execSQL(""String_Node_Str"" + tables32[i]);
}
onCreate(db);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 33:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_EVENTS,EventsTable.CITY)) {
db.execSQL(String.format(""String_Node_Str"",TABLE_EVENTS,EventsTable.CITY));
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
}
upgradeTo++;
}
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  TbaLogger.w(""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  int upgradeTo=oldVersion + 1;
  while (upgradeTo <= newVersion) {
switch (upgradeTo) {
case 14:
      db.execSQL(CREATE_DISTRICTS);
    db.execSQL(CREATE_DISTRICTTEAMS);
  if (!columnExists(db,TABLE_EVENTS,EventsTable.DISTRICT_POINTS)) {
    db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.DISTRICT_POINTS+ ""String_Node_Str"");
  }
break;
case 15:
db.execSQL(CREATE_FAVORITES);
db.execSQL(CREATE_SUBSCRIPTIONS);
break;
case 16:
if (!columnExists(db,TABLE_SUBSCRIPTIONS,SubscriptionsTable.NOTIFICATION_SETTINGS)) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.NOTIFICATION_SETTINGS+ ""String_Node_Str"");
}
if (!columnExists(db,TABLE_SUBSCRIPTIONS,SubscriptionsTable.MODEL_ENUM)) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.MODEL_ENUM+ ""String_Node_Str"");
}
if (!columnExists(db,TABLE_FAVORITES,FavoritesTable.MODEL_ENUM)) {
db.execSQL(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str""+ FavoritesTable.MODEL_ENUM+ ""String_Node_Str"");
}
break;
case 17:
if (!columnExists(db,TABLE_DISTRICTS,DistrictsTable.NAME)) {
db.execSQL(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str""+ DistrictsTable.NAME+ ""String_Node_Str"");
}
break;
case 18:
if (!columnExists(db,TABLE_EVENTS,EventsTable.SHORTNAME)) {
db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.SHORTNAME+ ""String_Node_Str"");
}
break;
case 20:
db.execSQL(CREATE_NOTIFICATIONS);
break;
case 23:
case 24:
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_TEAMS);
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_EVENTS);
onCreate(db);
break;
case 25:
db.execSQL(""String_Node_Str"" + TABLE_API);
break;
case 28:
db.beginTransaction();
try {
db.execSQL(""String_Node_Str"" + TABLE_NOTIFICATIONS);
db.execSQL(CREATE_NOTIFICATIONS);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 29:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_TEAMS,TeamsTable.MOTTO)) {
db.execSQL(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str""+ TeamsTable.MOTTO+ ""String_Node_Str"");
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 30:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_MATCHES,MatchesTable.BREAKDOWN)) {
db.execSQL(""String_Node_Str"" + TABLE_MATCHES + ""String_Node_Str""+ MatchesTable.BREAKDOWN+ ""String_Node_Str"");
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 31:
String[] tables={TABLE_AWARDS,TABLE_DISTRICTS,TABLE_DISTRICTTEAMS,TABLE_EVENTS,TABLE_EVENTTEAMS,TABLE_MATCHES,TABLE_MEDIAS,TABLE_TEAMS};
db.beginTransaction();
try {
for (int i=0; i < tables.length; i++) {
if (!columnExists(db,tables[i],""String_Node_Str"")) {
db.execSQL(String.format(""String_Node_Str"",tables[i]));
}
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 32:
db.beginTransaction();
String[] tables32={TABLE_EVENTS,TABLE_TEAMS,TABLE_DISTRICTTEAMS,TABLE_EVENTTEAMS,TABLE_MATCHES};
try {
for (int i=0; i < tables32.length; i++) {
db.execSQL(""String_Node_Str"" + tables32[i]);
}
onCreate(db);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 33:
db.beginTransaction();
try {
if (!columnExists(db,TABLE_EVENTS,EventsTable.CITY)) {
db.execSQL(String.format(""String_Node_Str"",TABLE_EVENTS,EventsTable.CITY));
}
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 34:
db.beginTransaction();
try {
db.execSQL(""String_Node_Str"" + TABLE_MEDIAS);
db.execSQL(CREATE_MEDIAS);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
}
upgradeTo++;
}
}",0.9747967479674796
33573,"public Observable<List<Media>> fetchTeamMediaInYear(String teamKey,int year,String cacheHeader){
  Observable<List<Media>> apiData=mResponseMap.getAndWriteResponseBody(mApiv3.fetchTeamMediaInYear(teamKey,year,cacheHeader),mWriter.getMediaListWriter().get());
  return mAPICache.fetchTeamMediaInYear(teamKey,year).concatWith(apiData);
}","public Observable<List<Media>> fetchTeamMediaInYear(String teamKey,int year,String cacheHeader){
  Observable<List<Media>> apiData=mResponseMap.mapAndWriteResponseBody(mApiv3.fetchTeamMediaInYear(teamKey,year,cacheHeader),new TeamMediaKeyAdder(teamKey,year),mWriter.getMediaListWriter().get());
  return mAPICache.fetchTeamMediaInYear(teamKey,year).concatWith(apiData);
}",0.9405099150141644
33574,"public Integer getPlayOrder(){
  int matchNumber=getMatchNumber(), setNumber=getSetNumber();
  return type.getPlayOrder() * 1000000 + matchNumber * 1000 + setNumber;
}","public Integer getPlayOrder(){
  int matchNumber=getMatchNumber(), setNumber=getSetNumber();
  return getType().getPlayOrder() * 1000000 + matchNumber * 1000 + setNumber;
}",0.9852507374631267
33575,"public Integer getDisplayOrder(){
  int matchNumber=getMatchNumber(), setNumber=getSetNumber();
  return type.getPlayOrder() * 1000000 + setNumber * 1000 + matchNumber;
}","public Integer getDisplayOrder(){
  int matchNumber=getMatchNumber(), setNumber=getSetNumber();
  return getType().getPlayOrder() * 1000000 + setNumber * 1000 + matchNumber;
}",0.9855072463768116
33576,"@Nullable @Override public Void renderToViewModel(Context context,@Nullable Void aVoid){
  return null;
}","@Nullable @Override public GenericNotificationViewModel renderToViewModel(Context context,@Nullable Void aVoid){
  Resources r=context.getResources();
  String header=getNotificationCardHeader(context,districtName,districtKey);
  String districtCode=EventHelper.getEventCode(districtKey);
  String title=r.getString(R.string.notification_district_points_title,districtCode);
  String contentText=r.getString(R.string.notification_district_points_updated,districtName);
  return new GenericNotificationViewModel(header,title,contentText,getNotificationTimeString(context),getIntent(context));
}",0.2320916905444126
33577,"@Override public void updateData(@Nullable MatchBreakdownBinder.Model data){
  if (data == null || data.allianceData == null || data.scoreData == null || breakdown == null) {
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  long startTime=System.currentTimeMillis();
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  breakdown.initWithData(mMatchType,data.allianceData,data.scoreData);
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  breakdown.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  setDataBound(true);
}","@Override public void updateData(@Nullable MatchBreakdownBinder.Model data){
  if (data == null || data.allianceData == null || data.scoreData == null || breakdown == null) {
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  long startTime=System.currentTimeMillis();
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  boolean success=breakdown.initWithData(mMatchType,data.allianceData,data.scoreData);
  if (!success) {
    setDataBound(false);
    return;
  }
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  breakdown.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  setDataBound(true);
}",0.9484536082474226
33578,"public void initWithData(MatchType matchType,JsonObject allianceData,JsonObject scoredata){
  if (scoredata == null || scoredata.entrySet().isEmpty() || allianceData == null || !allianceData.has(""String_Node_Str"") || !allianceData.has(""String_Node_Str"")) {
    breakdownContainer.setVisibility(GONE);
    return;
  }
  int redRp=0;
  int blueRp=0;
  JsonObject redAlliance=allianceData.get(""String_Node_Str"").getAsJsonObject();
  JsonArray redTeams=redAlliance.get(""String_Node_Str"").getAsJsonArray();
  JsonObject blueAlliance=allianceData.get(""String_Node_Str"").getAsJsonObject();
  JsonArray blueTeams=blueAlliance.get(""String_Node_Str"").getAsJsonArray();
  JsonObject redData=scoredata.get(""String_Node_Str"").getAsJsonObject();
  JsonObject blueData=scoredata.get(""String_Node_Str"").getAsJsonObject();
  red1.setText(teamNumberFromKey(redTeams.get(0).getAsString()));
  red2.setText(teamNumberFromKey(redTeams.get(1).getAsString()));
  red3.setText(teamNumberFromKey(redTeams.get(2).getAsString()));
  blue1.setText(teamNumberFromKey(blueTeams.get(0).getAsString()));
  blue2.setText(teamNumberFromKey(blueTeams.get(1).getAsString()));
  blue3.setText(teamNumberFromKey(blueTeams.get(2).getAsString()));
  redAutoBoulder.setText(getAutoBoulder(redData));
  blueAutoBoulder.setText(getAutoBoulder(blueData));
  redAutoReach.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoReach.setText(getIntDefault(blueData,""String_Node_Str""));
  redAutoCross.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoCross.setText(getIntDefault(blueData,""String_Node_Str""));
  redAutoTotal.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoTotal.setText(getIntDefault(blueData,""String_Node_Str""));
  redDefense1Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense1Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense2Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense2Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense2Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense2Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense3Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense3Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense3Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense3Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense4Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense4Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense4Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense4Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense5Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense5Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense5Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense5Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redTeleopCross.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleopCross.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulderHigh.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulderHigh.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulderLow.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulderLow.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulder.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulder.setText(getIntDefault(blueData,""String_Node_Str""));
  redTowerChallenge.setText(getIntDefault(redData,""String_Node_Str""));
  blueTowerChallenge.setText(getIntDefault(blueData,""String_Node_Str""));
  redTowerScale.setText(getIntDefault(redData,""String_Node_Str""));
  blueTowerScale.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleop.setText(getTeleopTotal(redData));
  blueTeleop.setText(getTeleopTotal(blueData));
  boolean redBreachSuccess=getBooleanDefault(redData,""String_Node_Str"");
  redBreachIcon.setBackgroundResource(redBreachSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  boolean blueBreachSuccess=getBooleanDefault(blueData,""String_Node_Str"");
  blueBreachIcon.setBackgroundResource(blueBreachSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  int redBreachPoints=getIntDefaultValue(redData,""String_Node_Str"");
  if (redBreachSuccess && matchType == MatchType.QUAL) {
    redRp++;
    redBreach.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    redBreach.setVisibility(VISIBLE);
  }
 else   if (redBreachPoints > 0) {
    redBreach.setText(getContext().getString(R.string.breakdown2016_addition_format,redBreachPoints));
    redBreach.setVisibility(VISIBLE);
  }
 else {
    redBreach.setVisibility(GONE);
  }
  int blueBreachPoints=getIntDefaultValue(blueData,""String_Node_Str"");
  if (blueBreachSuccess && matchType == MatchType.QUAL) {
    blueRp++;
    blueBreach.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    blueBreach.setVisibility(VISIBLE);
  }
 else   if (blueBreachPoints > 0) {
    blueBreach.setText(getContext().getString(R.string.breakdown2016_addition_format,blueBreachPoints));
    blueBreach.setVisibility(VISIBLE);
  }
 else {
    blueBreach.setVisibility(GONE);
  }
  boolean redCaptureSuccess=getBooleanDefault(redData,""String_Node_Str"");
  redCaptureIcon.setBackgroundResource(redCaptureSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  boolean blueCaptureSuccess=getBooleanDefault(blueData,""String_Node_Str"");
  blueCaptureIcon.setBackgroundResource(blueCaptureSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  int redCapturePoints=getIntDefaultValue(redData,""String_Node_Str"");
  if (redCaptureSuccess && matchType == MatchType.QUAL) {
    redRp++;
    redCapture.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    redCapture.setVisibility(VISIBLE);
  }
 else   if (redCapturePoints > 0) {
    redCapture.setText(getContext().getString(R.string.breakdown2016_addition_format,redCapturePoints));
    redCapture.setVisibility(VISIBLE);
  }
 else {
    redCapture.setVisibility(GONE);
  }
  int blueCapturePoints=getIntDefaultValue(blueData,""String_Node_Str"");
  if (blueCaptureSuccess && matchType == MatchType.QUAL) {
    blueRp++;
    blueCapture.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    blueCapture.setVisibility(VISIBLE);
  }
 else   if (blueCapturePoints > 0) {
    blueCapture.setText(getContext().getString(R.string.breakdown2016_addition_format,blueCapturePoints));
    blueCapture.setVisibility(VISIBLE);
  }
 else {
    blueCapture.setVisibility(GONE);
  }
  redFoul.setText(getContext().getString(R.string.breakdown2016_foul_format,getIntDefaultValue(redData,""String_Node_Str"")));
  blueFoul.setText(getContext().getString(R.string.breakdown2016_foul_format,getIntDefaultValue(blueData,""String_Node_Str"")));
  redAdjust.setText(getIntDefault(redData,""String_Node_Str""));
  blueAdjust.setText(getIntDefault(blueData,""String_Node_Str""));
  redTotal.setText(getIntDefault(redData,""String_Node_Str""));
  blueTotal.setText(getIntDefault(blueData,""String_Node_Str""));
  int redScore=getIntDefaultValue(redAlliance,""String_Node_Str"");
  int blueScore=getIntDefaultValue(blueAlliance,""String_Node_Str"");
  if (redScore > blueScore) {
    redRp+=2;
  }
 else   if (blueScore > redScore) {
    blueRp+=2;
  }
 else {
    redRp++;
    blueRp++;
  }
  if (matchType == MatchType.QUAL) {
    redRanking.setText(getContext().getString(R.string.breakdown2016_total_rp,redRp));
    blueRanking.setText(getContext().getString(R.string.breakdown2016_total_rp,blueRp));
  }
 else {
    redRanking.setVisibility(GONE);
    blueRanking.setVisibility(GONE);
    findViewById(R.id.breakdown2016_rp_header).setVisibility(GONE);
  }
}","public boolean initWithData(MatchType matchType,JsonObject allianceData,JsonObject scoredata){
  if (scoredata == null || scoredata.entrySet().isEmpty() || allianceData == null || !allianceData.has(""String_Node_Str"") || !allianceData.has(""String_Node_Str"")) {
    breakdownContainer.setVisibility(GONE);
    return false;
  }
  int redRp=0;
  int blueRp=0;
  JsonObject redAlliance=allianceData.get(""String_Node_Str"").getAsJsonObject();
  JsonArray redTeams=redAlliance.get(""String_Node_Str"").getAsJsonArray();
  JsonObject blueAlliance=allianceData.get(""String_Node_Str"").getAsJsonObject();
  JsonArray blueTeams=blueAlliance.get(""String_Node_Str"").getAsJsonArray();
  JsonObject redData=scoredata.get(""String_Node_Str"").getAsJsonObject();
  JsonObject blueData=scoredata.get(""String_Node_Str"").getAsJsonObject();
  red1.setText(teamNumberFromKey(redTeams.get(0).getAsString()));
  red2.setText(teamNumberFromKey(redTeams.get(1).getAsString()));
  red3.setText(teamNumberFromKey(redTeams.get(2).getAsString()));
  blue1.setText(teamNumberFromKey(blueTeams.get(0).getAsString()));
  blue2.setText(teamNumberFromKey(blueTeams.get(1).getAsString()));
  blue3.setText(teamNumberFromKey(blueTeams.get(2).getAsString()));
  redAutoBoulder.setText(getAutoBoulder(redData));
  blueAutoBoulder.setText(getAutoBoulder(blueData));
  redAutoReach.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoReach.setText(getIntDefault(blueData,""String_Node_Str""));
  redAutoCross.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoCross.setText(getIntDefault(blueData,""String_Node_Str""));
  redAutoTotal.setText(getIntDefault(redData,""String_Node_Str""));
  blueAutoTotal.setText(getIntDefault(blueData,""String_Node_Str""));
  redDefense1Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense1Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense2Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense2Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense2Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense2Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense3Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense3Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense3Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense3Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense4Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense4Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense4Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense4Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redDefense5Name.setText(getDefenseName(redData,""String_Node_Str""));
  redDefense5Cross.setText(getCrossValue(redData,""String_Node_Str""));
  blueDefense5Name.setText(getDefenseName(blueData,""String_Node_Str""));
  blueDefense5Cross.setText(getCrossValue(blueData,""String_Node_Str""));
  redTeleopCross.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleopCross.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulderHigh.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulderHigh.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulderLow.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulderLow.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleBoulder.setText(getIntDefault(redData,""String_Node_Str""));
  blueTeleBoulder.setText(getIntDefault(blueData,""String_Node_Str""));
  redTowerChallenge.setText(getIntDefault(redData,""String_Node_Str""));
  blueTowerChallenge.setText(getIntDefault(blueData,""String_Node_Str""));
  redTowerScale.setText(getIntDefault(redData,""String_Node_Str""));
  blueTowerScale.setText(getIntDefault(blueData,""String_Node_Str""));
  redTeleop.setText(getTeleopTotal(redData));
  blueTeleop.setText(getTeleopTotal(blueData));
  boolean redBreachSuccess=getBooleanDefault(redData,""String_Node_Str"");
  redBreachIcon.setBackgroundResource(redBreachSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  boolean blueBreachSuccess=getBooleanDefault(blueData,""String_Node_Str"");
  blueBreachIcon.setBackgroundResource(blueBreachSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  int redBreachPoints=getIntDefaultValue(redData,""String_Node_Str"");
  if (redBreachSuccess && matchType == MatchType.QUAL) {
    redRp++;
    redBreach.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    redBreach.setVisibility(VISIBLE);
  }
 else   if (redBreachPoints > 0) {
    redBreach.setText(getContext().getString(R.string.breakdown2016_addition_format,redBreachPoints));
    redBreach.setVisibility(VISIBLE);
  }
 else {
    redBreach.setVisibility(GONE);
  }
  int blueBreachPoints=getIntDefaultValue(blueData,""String_Node_Str"");
  if (blueBreachSuccess && matchType == MatchType.QUAL) {
    blueRp++;
    blueBreach.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    blueBreach.setVisibility(VISIBLE);
  }
 else   if (blueBreachPoints > 0) {
    blueBreach.setText(getContext().getString(R.string.breakdown2016_addition_format,blueBreachPoints));
    blueBreach.setVisibility(VISIBLE);
  }
 else {
    blueBreach.setVisibility(GONE);
  }
  boolean redCaptureSuccess=getBooleanDefault(redData,""String_Node_Str"");
  redCaptureIcon.setBackgroundResource(redCaptureSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  boolean blueCaptureSuccess=getBooleanDefault(blueData,""String_Node_Str"");
  blueCaptureIcon.setBackgroundResource(blueCaptureSuccess ? R.drawable.ic_done_black_24dp : R.drawable.ic_clear_black_24dp);
  int redCapturePoints=getIntDefaultValue(redData,""String_Node_Str"");
  if (redCaptureSuccess && matchType == MatchType.QUAL) {
    redRp++;
    redCapture.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    redCapture.setVisibility(VISIBLE);
  }
 else   if (redCapturePoints > 0) {
    redCapture.setText(getContext().getString(R.string.breakdown2016_addition_format,redCapturePoints));
    redCapture.setVisibility(VISIBLE);
  }
 else {
    redCapture.setVisibility(GONE);
  }
  int blueCapturePoints=getIntDefaultValue(blueData,""String_Node_Str"");
  if (blueCaptureSuccess && matchType == MatchType.QUAL) {
    blueRp++;
    blueCapture.setText(getContext().getString(R.string.breakdown2016_rp_format,1));
    blueCapture.setVisibility(VISIBLE);
  }
 else   if (blueCapturePoints > 0) {
    blueCapture.setText(getContext().getString(R.string.breakdown2016_addition_format,blueCapturePoints));
    blueCapture.setVisibility(VISIBLE);
  }
 else {
    blueCapture.setVisibility(GONE);
  }
  redFoul.setText(getContext().getString(R.string.breakdown2016_foul_format,getIntDefaultValue(redData,""String_Node_Str"")));
  blueFoul.setText(getContext().getString(R.string.breakdown2016_foul_format,getIntDefaultValue(blueData,""String_Node_Str"")));
  redAdjust.setText(getIntDefault(redData,""String_Node_Str""));
  blueAdjust.setText(getIntDefault(blueData,""String_Node_Str""));
  redTotal.setText(getIntDefault(redData,""String_Node_Str""));
  blueTotal.setText(getIntDefault(blueData,""String_Node_Str""));
  int redScore=getIntDefaultValue(redAlliance,""String_Node_Str"");
  int blueScore=getIntDefaultValue(blueAlliance,""String_Node_Str"");
  if (redScore > blueScore) {
    redRp+=2;
  }
 else   if (blueScore > redScore) {
    blueRp+=2;
  }
 else {
    redRp++;
    blueRp++;
  }
  if (matchType == MatchType.QUAL) {
    redRanking.setText(getContext().getString(R.string.breakdown2016_total_rp,redRp));
    blueRanking.setText(getContext().getString(R.string.breakdown2016_total_rp,blueRp));
  }
 else {
    redRanking.setVisibility(GONE);
    blueRanking.setVisibility(GONE);
    findViewById(R.id.breakdown2016_rp_header).setVisibility(GONE);
  }
  return true;
}",0.9979734008866372
33579,"@Override public void updateData(@Nullable List<ListGroup> data){
  if (data == null || expandableListView == null) {
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  if (data.isEmpty()) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  if (mAdapter == null) {
    mAdapter=newAdapter(new ArrayList<>(data));
    expandableListView.setAdapter(mAdapter);
  }
 else {
    mAdapter.removeAllGroups();
    mAdapter.addAllGroups(new ArrayList<>(data));
    mAdapter.notifyDataSetChanged();
  }
  expandableListView.setVisibility(View.VISIBLE);
  expandForMode(data);
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  mNoDataBinder.unbindData();
  setDataBound(true);
}","@Override public void updateData(@Nullable List<ListGroup> data){
  if (data == null || expandableListView == null) {
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  if (data.isEmpty()) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    if (!isDataBound()) {
      setDataBound(false);
    }
    return;
  }
  if (expandableListView.getExpandableListAdapter() == null) {
    expandableListView.setAdapter(newAdapter(new ArrayList<>(data)));
  }
 else {
    ExpandableListViewAdapter adapter=(ExpandableListViewAdapter)expandableListView.getExpandableListAdapter();
    adapter.removeAllGroups();
    adapter.addAllGroups(new ArrayList<>(data));
    adapter.notifyDataSetChanged();
  }
  expandableListView.setVisibility(View.VISIBLE);
  expandForMode(data);
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  mNoDataBinder.unbindData();
  setDataBound(true);
}",0.8371278458844134
33580,"/** 
 * @return a comma-separated CharSequence of the given names, applying bold style to names thatsatisfy the given predicate.
 */
public static CharSequence boldNameList(Iterable<? extends CharSequence> names,Predicate<String> beBold){
  final SpannableStringBuilder result=new SpannableStringBuilder();
  boolean first=true;
  for (  CharSequence name : names) {
    if (first) {
      first=false;
    }
 else {
      result.append(""String_Node_Str"");
    }
    if (beBold.apply(name.toString())) {
      result.append(name,new StyleSpan(Typeface.BOLD),0);
    }
 else {
      result.append(name);
    }
  }
  return result;
}","/** 
 * @return a comma-separated CharSequence of the given names, applying bold style to names thatsatisfy the given predicate.
 */
public static CharSequence boldNameList(Iterable<? extends CharSequence> names,Predicate<String> beBold){
  final SpannableStringBuilder result=new SpannableStringBuilder();
  boolean first=true;
  for (  CharSequence name : names) {
    if (first) {
      first=false;
    }
 else {
      result.append(""String_Node_Str"");
    }
    if (beBold.apply(name.toString())) {
      supportAppend(result,name,new StyleSpan(Typeface.BOLD),0);
    }
 else {
      result.append(name);
    }
  }
  return result;
}",0.9724192277383766
33581,"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (mRecyclerView.computeVerticalScrollOffset() == 0) {
    hideNewNotificationIndicator(true);
    return;
  }
  if (dy > 0) {
    hideNewNotificationIndicator(true);
  }
 else   if (dy < 0) {
    showNewNotificationIndicator(true);
  }
}","@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (mRecyclerView.computeVerticalScrollOffset() == 0) {
    hideNewNotificationIndicator(true);
    mNewNotificationCount=0;
    updateNewNotificationIndicator();
    return;
  }
  if (dy > 0) {
    hideNewNotificationIndicator(true);
  }
 else   if (dy < 0) {
    showNewNotificationIndicator(true);
  }
}",0.9041487839771102
33582,"@Override public void bindViews(){
  super.bindViews();
  mNewNotificationIndicator=(TextView)mRootView.findViewById(R.id.new_notification_indicator);
  mNewNotificationIndicator.setOnClickListener(v -> {
    mNewNotificationCount=0;
    mRecyclerView.smoothScrollToPosition(0);
    hideNewNotificationIndicator(true);
  }
);
  hideNewNotificationIndicator(false);
  mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      if (mRecyclerView.computeVerticalScrollOffset() == 0) {
        hideNewNotificationIndicator(true);
        return;
      }
      if (dy > 0) {
        hideNewNotificationIndicator(true);
      }
 else       if (dy < 0) {
        showNewNotificationIndicator(true);
      }
    }
  }
);
}","@Override public void bindViews(){
  super.bindViews();
  mNewNotificationIndicator=(TextView)mRootView.findViewById(R.id.new_notification_indicator);
  mNewNotificationIndicator.setOnClickListener(v -> {
    hideNewNotificationIndicator(true);
    mNewNotificationCount=0;
    mRecyclerView.smoothScrollToPosition(0);
  }
);
  hideNewNotificationIndicator(false);
  mRecyclerView.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrolled(    RecyclerView recyclerView,    int dx,    int dy){
      if (mRecyclerView.computeVerticalScrollOffset() == 0) {
        hideNewNotificationIndicator(true);
        mNewNotificationCount=0;
        updateNewNotificationIndicator();
        return;
      }
      if (dy > 0) {
        hideNewNotificationIndicator(true);
      }
 else       if (dy < 0) {
        showNewNotificationIndicator(true);
      }
    }
  }
);
}",0.9099360836722836
33583,"private void switchToModeForId(int id,Bundle savedInstanceState){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    int weekTab=savedInstanceState != null ? savedInstanceState.getInt(EventsByWeekFragment.TAB,-1) : -1;
  fragment=EventsByWeekFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition,weekTab);
break;
case R.id.nav_item_districts:
fragment=DistrictListFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition);
break;
case R.id.nav_item_teams:
int teamTab=savedInstanceState != null ? savedInstanceState.getInt(AllTeamsListFragment.SELECTED_TAB,0) : 0;
fragment=AllTeamsListFragment.newInstance(teamTab);
break;
case R.id.nav_item_my_tba:
fragment=new MyTBAFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
case R.id.nav_item_notifications:
fragment=new RecentNotificationsFragment();
break;
case R.id.nav_item_gameday:
startActivity(GamedayActivity.newInstance(this));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
invalidateOptionsMenu();
if (mCurrentSelectedNavigationItemId == R.id.nav_item_districts || mCurrentSelectedNavigationItemId == R.id.nav_item_notifications) {
ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
}
 else {
ViewCompat.setElevation(mToolbar,0);
}
}","private void switchToModeForId(int id,Bundle savedInstanceState){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    int weekTab=savedInstanceState != null ? savedInstanceState.getInt(EventsByWeekFragment.TAB,-1) : -1;
  fragment=EventsByWeekFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition,weekTab);
break;
case R.id.nav_item_districts:
fragment=DistrictListFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition);
break;
case R.id.nav_item_teams:
int teamTab=savedInstanceState != null ? savedInstanceState.getInt(AllTeamsListFragment.SELECTED_TAB,0) : 0;
fragment=AllTeamsListFragment.newInstance(teamTab);
break;
case R.id.nav_item_my_tba:
fragment=new MyTBAFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
case R.id.nav_item_notifications:
fragment=new RecentNotificationsFragment();
break;
case R.id.nav_item_gameday:
startActivity(GamedayActivity.newInstance(this));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
setupToolbarForCurrentMode();
if (mCurrentSelectedNavigationItemId == R.id.nav_item_districts || mCurrentSelectedNavigationItemId == R.id.nav_item_notifications) {
ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
}
 else {
ViewCompat.setElevation(mToolbar,0);
}
}",0.9860976398318784
33584,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (intent != null && intent.getExtras() != null) {
    int requestedMode=intent.getExtras().getInt(REQUESTED_MODE,R.id.nav_item_events);
    if (requestedMode == mCurrentSelectedNavigationItemId) {
      return;
    }
 else {
      switchToModeForId(requestedMode,null);
    }
  }
 else {
    switchToModeForId(mCurrentSelectedNavigationItemId,null);
    invalidateOptionsMenu();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (intent != null && intent.getExtras() != null) {
    int requestedMode=intent.getExtras().getInt(REQUESTED_MODE,R.id.nav_item_events);
    if (requestedMode == mCurrentSelectedNavigationItemId) {
      return;
    }
 else {
      switchToModeForId(requestedMode,null);
    }
  }
 else {
    switchToModeForId(mCurrentSelectedNavigationItemId,null);
  }
}",0.9681668496158068
33585,"@Override public ListViewAdapter newAdapter(List<ListItem> data){
  mData=(ListPair<ListItem>)data;
  return new EventStatsFragmentAdapter(mActivity,mData);
}","@Override public ListViewAdapter newAdapter(List<ListItem> data){
  mData=((ListPair<ListItem>)data).copyOf();
  return new EventStatsFragmentAdapter(mActivity,mData);
}",0.9663608562691132
33586,"@Override protected void replaceDataInAdapter(List<ListItem> data){
  mAdapter.notifyDataSetChanged();
}","@Override protected void replaceDataInAdapter(List<ListItem> data){
  mData.replaceAll((ListPair<ListItem>)data);
  mAdapter.notifyDataSetChanged();
}",0.8188976377952756
33587,"private void switchToModeForId(int id,Bundle savedInstanceState){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    int weekTab=savedInstanceState != null ? savedInstanceState.getInt(EventsByWeekFragment.TAB,-1) : -1;
  fragment=EventsByWeekFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition,weekTab);
break;
case R.id.nav_item_districts:
fragment=DistrictListFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition);
break;
case R.id.nav_item_teams:
int teamTab=savedInstanceState != null ? savedInstanceState.getInt(AllTeamsListFragment.SELECTED_TAB,0) : 0;
fragment=AllTeamsListFragment.newInstance(teamTab);
break;
case R.id.nav_item_my_tba:
fragment=new MyTBAFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
case R.id.nav_item_notifications:
fragment=new RecentNotificationsFragment();
break;
case R.id.nav_item_gameday:
startActivity(GamedayActivity.newInstance(this));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
invalidateOptionsMenu();
if (mCurrentSelectedNavigationItemId == R.id.nav_item_districts || mCurrentSelectedNavigationItemId == R.id.nav_item_notifications) {
ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
}
 else {
ViewCompat.setElevation(mToolbar,0);
}
}","private void switchToModeForId(int id,Bundle savedInstanceState){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    int weekTab=savedInstanceState != null ? savedInstanceState.getInt(EventsByWeekFragment.TAB,-1) : -1;
  fragment=EventsByWeekFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition,weekTab);
break;
case R.id.nav_item_districts:
fragment=DistrictListFragment.newInstance(mMaxCompYear - mCurrentSelectedYearPosition);
break;
case R.id.nav_item_teams:
int teamTab=savedInstanceState != null ? savedInstanceState.getInt(AllTeamsListFragment.SELECTED_TAB,0) : 0;
fragment=AllTeamsListFragment.newInstance(teamTab);
break;
case R.id.nav_item_my_tba:
fragment=new MyTBAFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
case R.id.nav_item_notifications:
fragment=new RecentNotificationsFragment();
break;
case R.id.nav_item_gameday:
startActivity(GamedayActivity.newInstance(this));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
setupToolbarForCurrentMode();
if (mCurrentSelectedNavigationItemId == R.id.nav_item_districts || mCurrentSelectedNavigationItemId == R.id.nav_item_notifications) {
ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
}
 else {
ViewCompat.setElevation(mToolbar,0);
}
}",0.9860976398318784
33588,"@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (intent != null && intent.getExtras() != null) {
    int requestedMode=intent.getExtras().getInt(REQUESTED_MODE,R.id.nav_item_events);
    if (requestedMode == mCurrentSelectedNavigationItemId) {
      return;
    }
 else {
      switchToModeForId(requestedMode,null);
    }
  }
 else {
    switchToModeForId(mCurrentSelectedNavigationItemId,null);
    invalidateOptionsMenu();
  }
}","@Override protected void onNewIntent(Intent intent){
  super.onNewIntent(intent);
  if (intent != null && intent.getExtras() != null) {
    int requestedMode=intent.getExtras().getInt(REQUESTED_MODE,R.id.nav_item_events);
    if (requestedMode == mCurrentSelectedNavigationItemId) {
      return;
    }
 else {
      switchToModeForId(requestedMode,null);
    }
  }
 else {
    switchToModeForId(mCurrentSelectedNavigationItemId,null);
  }
}",0.9681668496158068
33589,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_confirm_image_suggestion);
  ButterKnife.bind(this);
  mConfirmFab.setOnClickListener(this);
  mCancelFab.setOnClickListener(this);
  mConfirmFab.setEnabled(false);
  ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  mToolbar.setContentInsetsRelative(0,0);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setTitle(""String_Node_Str"");
  Bundle extras=getIntent().getExtras() == null ? new Bundle() : getIntent().getExtras();
  if (!extras.containsKey(EXTRA_IMAGE_URI) || !extras.containsKey(EXTRA_TEAM_KEY) || !extras.containsKey(EXTRA_YEAR)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mUri=extras.getParcelable(EXTRA_IMAGE_URI);
  mTeamKey=extras.getString(EXTRA_TEAM_KEY);
  mYear=extras.getInt(EXTRA_YEAR);
  if (!TeamHelper.validateTeamKey(mTeamKey)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(SAVED_TEMP_FILE_PATH)) {
    mImageFile=new File(savedInstanceState.getString(SAVED_TEMP_FILE_PATH));
  }
  mHeader.setText(getString(R.string.imgur_confirm_image_header,TeamHelper.getTeamNumber(mTeamKey),mYear));
  ViewTreeObserver vto=mImageView.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      cacheAndLoadImage();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_confirm_image_suggestion);
  ButterKnife.bind(this);
  mConfirmFab.setOnClickListener(this);
  mCancelFab.setOnClickListener(this);
  mConfirmFab.setEnabled(false);
  ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  setSupportActionBar(mToolbar);
  getSupportActionBar().setTitle(""String_Node_Str"");
  Bundle extras=getIntent().getExtras() == null ? new Bundle() : getIntent().getExtras();
  if (!extras.containsKey(EXTRA_IMAGE_URI) || !extras.containsKey(EXTRA_TEAM_KEY) || !extras.containsKey(EXTRA_YEAR)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mUri=extras.getParcelable(EXTRA_IMAGE_URI);
  mTeamKey=extras.getString(EXTRA_TEAM_KEY);
  mYear=extras.getInt(EXTRA_YEAR);
  if (!TeamHelper.validateTeamKey(mTeamKey)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(SAVED_TEMP_FILE_PATH)) {
    mImageFile=new File(savedInstanceState.getString(SAVED_TEMP_FILE_PATH));
  }
  mHeader.setText(getString(R.string.imgur_confirm_image_header,TeamHelper.getTeamNumber(mTeamKey),mYear));
  ViewTreeObserver vto=mImageView.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      cacheAndLoadImage();
    }
  }
);
}",0.9874251497005988
33590,"@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null) {
    dataToLoad=new Short[]{LOAD_TEAMS,LOAD_EVENTS,LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    Call<APIStatus> statusCall=datafeed.statusCall();
    Response<APIStatus> statusResponse=statusCall.execute();
    if (!statusResponse.isSuccess() && statusResponse.body() != null) {
      onConnectionError();
      return null;
    }
    int maxCompYear=statusResponse.body().getMaxSeason();
    List<Team> allTeams=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LOAD_TEAMS) != -1) {
      mDb.getTeamsTable().deleteAllRows();
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        Call<List<Team>> teamListCall=datafeed.fetchTeamPageCall(pageNum,APIv2.TBA_CACHE_WEB);
        Response<List<Team>> teamListResponse=teamListCall.execute();
        if (teamListResponse == null || !teamListResponse.isSuccess() || teamListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        if (teamListResponse.body().isEmpty()) {
          break;
        }
        allTeams.addAll(teamListResponse.body());
        maxPageNum=Math.max(maxPageNum,pageNum);
      }
    }
    List<Event> allEvents=new ArrayList<>();
    if (Arrays.binarySearch(dataToLoad,LOAD_EVENTS) != -1) {
      mDb.getEventsTable().deleteAllRows();
      for (int year=Constants.FIRST_COMP_YEAR; year <= maxCompYear; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        Call<List<Event>> eventListCall=datafeed.fetchEventsInYearCall(year,APIv2.TBA_CACHE_WEB);
        Response<List<Event>> eventListResponse=eventListCall.execute();
        if (eventListResponse == null || !eventListResponse.isSuccess() || eventListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        allEvents.addAll(eventListResponse.body());
        Log.i(Constants.LOG_TAG,String.format(""String_Node_Str"",eventListResponse.body().size(),year));
      }
    }
    List<District> allDistricts=new ArrayList<>();
    if (Arrays.binarySearch(dataToLoad,LOAD_DISTRICTS) != -1) {
      mDb.getDistrictsTable().deleteAllRows();
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= maxCompYear; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        AddDistrictKeys keyAdder=new AddDistrictKeys(year);
        Call<List<District>> districtListCall=datafeed.fetchDistrictListCall(year,APIv2.TBA_CACHE_WEB);
        Response<List<District>> districtListResponse=districtListCall.execute();
        if (districtListResponse == null || !districtListResponse.isSuccess() || districtListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        List<District> newDistrictList=districtListResponse.body();
        keyAdder.call(newDistrictList);
        allDistricts.addAll(newDistrictList);
        Log.i(Constants.LOG_TAG,String.format(""String_Node_Str"",newDistrictList.size(),year));
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allTeams.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mTeamWriter.write(allTeams));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allEvents.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mEventWriter.write(allEvents));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allDistricts.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mDistrictWriter.write(allDistricts));
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    editor.putString(TBAStatusController.STATUS_PREF_KEY,statusResponse.body().getJsonBlob());
    editor.putInt(Constants.LAST_YEAR_KEY,statusResponse.body().getMaxSeason());
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(Database.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= maxCompYear; year++) {
      editor.putBoolean(Database.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= maxCompYear; year++) {
      editor.putBoolean(Database.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(Constants.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.apply();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(ex)));
  }
catch (  IOException e) {
    e.printStackTrace();
    onConnectionError();
  }
  return null;
}","@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null) {
    dataToLoad=new Short[]{LOAD_TEAMS,LOAD_EVENTS,LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    Call<APIStatus> statusCall=datafeed.statusCall();
    Response<APIStatus> statusResponse=statusCall.execute();
    if (!statusResponse.isSuccess() || statusResponse.body() == null) {
      onConnectionError();
      return null;
    }
    int maxCompYear=statusResponse.body().getMaxSeason();
    List<Team> allTeams=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LOAD_TEAMS) != -1) {
      mDb.getTeamsTable().deleteAllRows();
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        Call<List<Team>> teamListCall=datafeed.fetchTeamPageCall(pageNum,APIv2.TBA_CACHE_WEB);
        Response<List<Team>> teamListResponse=teamListCall.execute();
        if (teamListResponse == null || !teamListResponse.isSuccess() || teamListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        if (teamListResponse.body().isEmpty()) {
          break;
        }
        allTeams.addAll(teamListResponse.body());
        maxPageNum=Math.max(maxPageNum,pageNum);
      }
    }
    List<Event> allEvents=new ArrayList<>();
    if (Arrays.binarySearch(dataToLoad,LOAD_EVENTS) != -1) {
      mDb.getEventsTable().deleteAllRows();
      for (int year=Constants.FIRST_COMP_YEAR; year <= maxCompYear; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        Call<List<Event>> eventListCall=datafeed.fetchEventsInYearCall(year,APIv2.TBA_CACHE_WEB);
        Response<List<Event>> eventListResponse=eventListCall.execute();
        if (eventListResponse == null || !eventListResponse.isSuccess() || eventListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        allEvents.addAll(eventListResponse.body());
        Log.i(Constants.LOG_TAG,String.format(""String_Node_Str"",eventListResponse.body().size(),year));
      }
    }
    List<District> allDistricts=new ArrayList<>();
    if (Arrays.binarySearch(dataToLoad,LOAD_DISTRICTS) != -1) {
      mDb.getDistrictsTable().deleteAllRows();
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= maxCompYear; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        AddDistrictKeys keyAdder=new AddDistrictKeys(year);
        Call<List<District>> districtListCall=datafeed.fetchDistrictListCall(year,APIv2.TBA_CACHE_WEB);
        Response<List<District>> districtListResponse=districtListCall.execute();
        if (districtListResponse == null || !districtListResponse.isSuccess() || districtListResponse.body() == null) {
          onConnectionError();
          return null;
        }
        List<District> newDistrictList=districtListResponse.body();
        keyAdder.call(newDistrictList);
        allDistricts.addAll(newDistrictList);
        Log.i(Constants.LOG_TAG,String.format(""String_Node_Str"",newDistrictList.size(),year));
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allTeams.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mTeamWriter.write(allTeams));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allEvents.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mEventWriter.write(allEvents));
    Log.i(Constants.LOG_TAG,""String_Node_Str"" + allDistricts.size() + ""String_Node_Str"");
    Schedulers.io().createWorker().schedule(() -> mDistrictWriter.write(allDistricts));
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    editor.putString(TBAStatusController.STATUS_PREF_KEY,statusResponse.body().getJsonBlob());
    editor.putInt(Constants.LAST_YEAR_KEY,statusResponse.body().getMaxSeason());
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(Database.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= maxCompYear; year++) {
      editor.putBoolean(Database.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= maxCompYear; year++) {
      editor.putBoolean(Database.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(Constants.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.apply();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  RuntimeException ex) {
    ex.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(ex)));
  }
catch (  IOException e) {
    e.printStackTrace();
    onConnectionError();
  }
  return null;
}",0.9994951194883878
33591,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_confirm_image_suggestion);
  ButterKnife.bind(this);
  mConfirmFab.setOnClickListener(this);
  mCancelFab.setOnClickListener(this);
  mConfirmFab.setEnabled(false);
  ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  mToolbar.setContentInsetsRelative(0,0);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setTitle(""String_Node_Str"");
  Bundle extras=getIntent().getExtras() == null ? new Bundle() : getIntent().getExtras();
  if (!extras.containsKey(EXTRA_IMAGE_URI) || !extras.containsKey(EXTRA_TEAM_KEY) || !extras.containsKey(EXTRA_YEAR)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mUri=extras.getParcelable(EXTRA_IMAGE_URI);
  mTeamKey=extras.getString(EXTRA_TEAM_KEY);
  mYear=extras.getInt(EXTRA_YEAR);
  if (!TeamHelper.validateTeamKey(mTeamKey)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(SAVED_TEMP_FILE_PATH)) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + savedInstanceState.getString(SAVED_TEMP_FILE_PATH));
    mImageFile=new File(savedInstanceState.getString(SAVED_TEMP_FILE_PATH));
    mDidFileExistOnCreate=true;
    mProgressBar.setVisibility(View.GONE);
  }
  ViewTreeObserver vto=mImageView.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      cacheAndLoadImage();
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_confirm_image_suggestion);
  ButterKnife.bind(this);
  mConfirmFab.setOnClickListener(this);
  mCancelFab.setOnClickListener(this);
  mConfirmFab.setEnabled(false);
  ViewCompat.setElevation(mToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  mToolbar.setContentInsetsRelative(0,0);
  setSupportActionBar(mToolbar);
  getSupportActionBar().setTitle(""String_Node_Str"");
  Bundle extras=getIntent().getExtras() == null ? new Bundle() : getIntent().getExtras();
  if (!extras.containsKey(EXTRA_IMAGE_URI) || !extras.containsKey(EXTRA_TEAM_KEY) || !extras.containsKey(EXTRA_YEAR)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mUri=extras.getParcelable(EXTRA_IMAGE_URI);
  mTeamKey=extras.getString(EXTRA_TEAM_KEY);
  mYear=extras.getInt(EXTRA_YEAR);
  if (!TeamHelper.validateTeamKey(mTeamKey)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mUri == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(SAVED_TEMP_FILE_PATH)) {
    mImageFile=new File(savedInstanceState.getString(SAVED_TEMP_FILE_PATH));
  }
  ViewTreeObserver vto=mImageView.getViewTreeObserver();
  vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      mImageView.getViewTreeObserver().removeOnGlobalLayoutListener(this);
      cacheAndLoadImage();
    }
  }
);
}",0.9353680430879712
33592,"/** 
 * Loads the image from   {@code mUri} into our cache directory and displays it in this activity.The caching part is important because the image at  {@code mUri} is not guaranteed to be inlocal storage; for instance, it could be an image that needs to be loaded from Google Drive. We need to store it in a local file so that  {@link ImgurSuggestionService}can upload it properly. <p> This should not be called until after initial layout is complete; loading the Bitmap into memory efficiently requires that we know how big the target ImageView so we can scale it properly during the decoding process.
 */
private void cacheAndLoadImage(){
  Observable<File> fileObservable;
  if (mImageFile != null) {
    fileObservable=Observable.just(mImageFile);
  }
 else {
    fileObservable=Observable.just(mUri).map((uri) -> {
      mImageFile=ImgurUtils.createFile(uri,ConfirmImageSuggestionActivity.this);
      if (mImageFile == null) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"");
      }
      return mImageFile;
    }
);
  }
  fileObservable.map((file) -> {
    try {
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      InputStream stream=new BufferedInputStream(new FileInputStream(file));
      BitmapFactory.decodeStream(stream,null,options);
      stream.close();
      options.inSampleSize=calculateInSampleSize(options,mImageView.getWidth(),mImageView.getHeight());
      options.inJustDecodeBounds=false;
      stream=new BufferedInputStream(new FileInputStream(file));
      Bitmap bitmap=BitmapFactory.decodeStream(stream,null,options);
      stream.close();
      return bitmap;
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(bitmap -> {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    mImageView.setImageBitmap(bitmap);
    mImageView.setAlpha(0.0f);
    mImageView.animate().alpha(1.0f).setDuration(500).start();
    if (!mDidFileExistOnCreate) {
      mProgressBar.animate().scaleX(0.0f).scaleY(0.0f).setDuration(500).start();
    }
    mConfirmFab.setEnabled(true);
  }
);
}","/** 
 * Loads the image from   {@code mUri} into our cache directory and displays it in this activity.The caching part is important because the image at  {@code mUri} is not guaranteed to be inlocal storage; for instance, it could be an image that needs to be loaded from Google Drive. We need to store it in a local file so that  {@link ImgurSuggestionService}can upload it properly. <p> This should not be called until after initial layout is complete; loading the Bitmap into memory efficiently requires that we know how big the target ImageView so we can scale it properly during the decoding process.
 */
private void cacheAndLoadImage(){
  Observable<File> fileObservable;
  if (mImageFile != null) {
    fileObservable=Observable.just(mImageFile);
  }
 else {
    fileObservable=Observable.just(mUri).map((uri) -> {
      mImageFile=ImgurUtils.createFile(uri,ConfirmImageSuggestionActivity.this);
      if (mImageFile == null) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"");
      }
      return mImageFile;
    }
);
  }
  fileObservable.map((file) -> {
    try {
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      InputStream stream=new BufferedInputStream(new FileInputStream(file));
      BitmapFactory.decodeStream(stream,null,options);
      stream.close();
      options.inSampleSize=calculateInSampleSize(options,mImageView.getWidth(),mImageView.getHeight());
      options.inJustDecodeBounds=false;
      stream=new BufferedInputStream(new FileInputStream(file));
      Bitmap bitmap=BitmapFactory.decodeStream(stream,null,options);
      stream.close();
      return bitmap;
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(bitmap -> {
    mImageView.setImageBitmap(bitmap);
    mImageView.setAlpha(0.0f);
    mImageView.animate().alpha(1.0f).setDuration(500).start();
    mProgressBar.setAlpha(1.0f);
    mProgressBar.animate().alpha(0.0f).setDuration(500).start();
    mConfirmFab.setEnabled(true);
  }
);
}",0.9455388180764774
33593,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  ViewCompat.setElevation(toolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  setSupportActionBar(toolbar);
  new AnalyticsActions.ReportActivityStart(this).run();
  resultsList=(ListView)findViewById(R.id.results);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setTitle(""String_Node_Str"");
  query=getIntent().getStringExtra(QUERY);
  resultsType=getIntent().getIntExtra(RESULTS_TYPE,-1);
  if (query == null || resultsType == -1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String preparedQuery=Utilities.getPreparedQueryForSearch(query);
  Bundle loaderBundle=new Bundle();
  loaderBundle.putString(PREPARED_QUERY,preparedQuery);
  getSupportLoaderManager().restartLoader(resultsType,loaderBundle,this);
switch (resultsType) {
case TEAM_RESULTS:
    getSupportActionBar().setTitle(String.format(getString(R.string.teams_matching),query));
  break;
case EVENT_RESULTS:
getSupportActionBar().setTitle(String.format(getString(R.string.events_matching),query));
break;
}
resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
switch (resultsType) {
case TEAM_RESULTS:
TeamCursorAdapter teamAdapter=(TeamCursorAdapter)adapterView.getAdapter();
String teamKey=teamAdapter.getKey(position);
startActivity(ViewTeamActivity.newInstance(MoreSearchResultsActivity.this,teamKey));
break;
case EVENT_RESULTS:
EventCursorAdapter eventAdapter=(EventCursorAdapter)adapterView.getAdapter();
String eventKey=eventAdapter.getKey(position);
startActivity(ViewEventActivity.newInstance(MoreSearchResultsActivity.this,eventKey));
break;
}
}
}
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  ViewCompat.setElevation(toolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  setSupportActionBar(toolbar);
  new AnalyticsActions.ReportActivityStart(this).run();
  resultsList=(ListView)findViewById(R.id.results);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setTitle(""String_Node_Str"");
  query=getIntent().getStringExtra(QUERY);
  resultsType=getIntent().getIntExtra(RESULTS_TYPE,-1);
  if (query == null || resultsType == -1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String preparedQuery=Utilities.getPreparedQueryForSearch(query);
  Bundle loaderBundle=new Bundle();
  loaderBundle.putString(PREPARED_QUERY,preparedQuery);
  getSupportLoaderManager().restartLoader(resultsType,loaderBundle,this);
switch (resultsType) {
case TEAM_RESULTS:
    getSupportActionBar().setTitle(String.format(getString(R.string.teams_matching),query));
  break;
case EVENT_RESULTS:
getSupportActionBar().setTitle(String.format(getString(R.string.events_matching),query));
break;
}
resultsList.setOnItemClickListener((adapterView,view,position,id) -> {
switch (resultsType) {
case TEAM_RESULTS:
TeamCursorAdapter teamAdapter=(TeamCursorAdapter)adapterView.getAdapter();
String teamKey=teamAdapter.getKey(position);
startActivity(ViewTeamActivity.newInstance(MoreSearchResultsActivity.this,teamKey));
break;
case EVENT_RESULTS:
EventCursorAdapter eventAdapter=(EventCursorAdapter)adapterView.getAdapter();
String eventKey=eventAdapter.getKey(position);
startActivity(ViewEventActivity.newInstance(MoreSearchResultsActivity.this,eventKey));
break;
}
}
);
}",0.9674818597151305
33594,"private void updateQuery(final String query){
  currentQuery=query;
  String preparedQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(preparedQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(""String_Node_Str""));
      Team team=Database.getInstance(this).getTeamsTable().get(key);
      if (team == null) {
        team=new Team();
        team.setTeamKey(key);
        Database.getInstance(this).getTeamsTable().deleteSearchIndex(team);
        continue;
      }
      try {
        TeamListElement element;
        element=new TeamListElement(team);
        listItems.add(element);
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
      }
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
    teamQueryResults.close();
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(preparedQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (eventQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(eventQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(""String_Node_Str""));
      Event event=Database.getInstance(this).getEventsTable().get(key);
      if (event == null) {
        event=new Event();
        event.setEventKey(key);
        Database.getInstance(this).getEventsTable().deleteSearchIndex(event);
        continue;
      }
      try {
        EventListElement element;
        element=new EventListElement(event);
        listItems.add(element);
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
      }
    }
    eventQueryResults.close();
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
      ListItem clickedItem=adapter.getItem(position);
      if (clickedItem instanceof TeamListElement) {
        String teamKey=((ListElement)clickedItem).getKey();
        Intent i=new Intent(SearchResultsActivity.this,ViewTeamActivity.class);
        i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
        startActivity(i);
      }
 else       if (clickedItem instanceof EventListElement) {
        String eventKey=((ListElement)clickedItem).getKey();
        Intent intent=ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey);
        startActivity(intent);
      }
 else       if (clickedItem == teamsHeader) {
        if (teamsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
        }
      }
 else       if (clickedItem == eventsHeader) {
        if (eventsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
        }
      }
 else {
        searchView.setVisibility(View.INVISIBLE);
        searchView.setVisibility(View.VISIBLE);
      }
    }
  }
);
}","private void updateQuery(final String query){
  currentQuery=query;
  String preparedQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(preparedQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(""String_Node_Str""));
      Team team=Database.getInstance(this).getTeamsTable().get(key);
      if (team == null) {
        team=new Team();
        team.setTeamKey(key);
        Database.getInstance(this).getTeamsTable().deleteSearchIndex(team);
        continue;
      }
      try {
        TeamListElement element;
        element=new TeamListElement(team);
        listItems.add(element);
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
      }
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
    teamQueryResults.close();
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(preparedQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (eventQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(eventQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(""String_Node_Str""));
      Event event=Database.getInstance(this).getEventsTable().get(key);
      if (event == null) {
        event=new Event();
        event.setEventKey(key);
        Database.getInstance(this).getEventsTable().deleteSearchIndex(event);
        continue;
      }
      try {
        EventListElement element;
        element=new EventListElement(event);
        listItems.add(element);
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
      }
    }
    eventQueryResults.close();
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener((adapterView,view,position,id) -> {
    ListViewAdapter adapter1=(ListViewAdapter)adapterView.getAdapter();
    ListItem clickedItem=adapter1.getItem(position);
    if (clickedItem instanceof TeamListElement) {
      String teamKey=((ListElement)clickedItem).getKey();
      startActivity(ViewTeamActivity.newInstance(SearchResultsActivity.this,teamKey));
    }
 else     if (clickedItem instanceof EventListElement) {
      String eventKey=((ListElement)clickedItem).getKey();
      startActivity(ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey));
    }
 else     if (clickedItem == teamsHeader) {
      if (teamsHeader.isShowingMoreButton()) {
        startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
      }
    }
 else     if (clickedItem == eventsHeader) {
      if (eventsHeader.isShowingMoreButton()) {
        startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
      }
    }
 else {
      searchView.setVisibility(View.INVISIBLE);
      searchView.setVisibility(View.VISIBLE);
    }
  }
);
}",0.8793359027571894
33595,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mTeamKey=getIntent().getStringExtra(TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setModelKey(mTeamKey,ModelType.TEAM);
  setContentView(R.layout.activity_view_team);
  ButterKnife.bind(this);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
  }
 else {
    int maxYear=mStatusController.getMaxCompYear();
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,maxYear);
    }
 else {
      mYear=maxYear;
    }
    mSelectedTab=0;
  }
  mPager.setOffscreenPageLimit(3);
  mPager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  mAdapter=new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey,mYear);
  mPager.setAdapter(mAdapter);
  SlidingTabs tabs=(SlidingTabs)findViewById(R.id.tabs);
  tabs.setViewPager(mPager);
  tabs.setOnPageChangeListener(this);
  ViewCompat.setElevation(tabs,getResources().getDimension(R.dimen.toolbar_elevation));
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(BaseActivity.WARNING_OFFLINE);
  }
  getComponent().datafeed().fetchTeamYearsParticipated(mTeamKey,null).subscribeOn(Schedulers.io()).observeOn(Schedulers.computation()).subscribe(new YearsParticipatedDropdownSubscriber(this));
  setupActionBar();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mTeamKey=getIntent().getStringExtra(EXTRA_TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setModelKey(mTeamKey,ModelType.TEAM);
  setContentView(R.layout.activity_view_team);
  ButterKnife.bind(this);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
    if (savedInstanceState.containsKey(CURRENT_PHOTO_URI)) {
      mCurrentPhotoUri=savedInstanceState.getString(CURRENT_PHOTO_URI);
    }
  }
 else {
    int maxYear=mStatusController.getMaxCompYear();
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,maxYear);
    }
 else {
      mYear=maxYear;
    }
    mSelectedTab=0;
  }
  mPager.setOffscreenPageLimit(3);
  mPager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  mAdapter=new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey,mYear);
  mPager.setAdapter(mAdapter);
  SlidingTabs tabs=(SlidingTabs)findViewById(R.id.tabs);
  tabs.setViewPager(mPager);
  tabs.setOnPageChangeListener(this);
  ViewCompat.setElevation(tabs,getResources().getDimension(R.dimen.toolbar_elevation));
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(BaseActivity.WARNING_OFFLINE);
  }
  getComponent().datafeed().fetchTeamYearsParticipated(mTeamKey,null).subscribeOn(Schedulers.io()).observeOn(Schedulers.computation()).subscribe(new YearsParticipatedDropdownSubscriber(this));
  setupActionBar();
}",0.960651289009498
33596,"public static Intent newInstance(Context context,String teamKey,int year){
  Intent intent=new Intent(context,ViewTeamActivity.class);
  intent.putExtra(TEAM_KEY,teamKey);
  intent.putExtra(TEAM_YEAR,year);
  return intent;
}","public static Intent newInstance(Context context,String teamKey,int year){
  Intent intent=new Intent(context,ViewTeamActivity.class);
  intent.putExtra(EXTRA_TEAM_KEY,teamKey);
  intent.putExtra(TEAM_YEAR,year);
  return intent;
}",0.986842105263158
33597,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(SELECTED_YEAR,mYear);
  outState.putInt(SELECTED_TAB,mSelectedTab);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(SELECTED_YEAR,mYear);
  outState.putInt(SELECTED_TAB,mSelectedTab);
  if (mCurrentPhotoUri != null) {
    outState.putString(CURRENT_PHOTO_URI,mCurrentPhotoUri);
  }
}",0.7941176470588235
33598,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  List<Team> teams=mSubscriber.getApiData();
  if (teams == null) {
    return;
  }
  String teamKey=teams.get(position).getKey();
  Intent i=new Intent(mContext,ViewTeamActivity.class);
  i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
  AnalyticsHelper.sendClickUpdate(mContext,""String_Node_Str"",i.getDataString(),teamKey);
  mContext.startActivity(i);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  List<Team> teams=mSubscriber.getApiData();
  if (teams == null) {
    return;
  }
  String teamKey=teams.get(position).getKey();
  Intent i=ViewTeamActivity.newInstance(mContext,teamKey);
  mContext.startActivity(i);
  AnalyticsHelper.sendClickUpdate(mContext,""String_Node_Str"",i.getDataString(),teamKey);
}",0.8028503562945368
33599,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  RenderableModel child=mGroups.get(groupPosition).children.get(childPosition);
  if (child instanceof Match) {
    ((Match)child).setSelectedTeam(mTeamKey);
  }
  ListItem renderedChild=child.render(mRendererSupplier);
  if (renderedChild != null) {
    return renderedChild.getView(mActivity,mInflater,convertView);
  }
 else {
    return new LabelValueListItem(""String_Node_Str"",""String_Node_Str"").getView(mActivity,mInflater,convertView);
  }
}","@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  if (groupPosition >= mGroups.size() || childPosition >= mGroups.get(groupPosition).children.size()) {
    return new LabelValueListItem(""String_Node_Str"",""String_Node_Str"").getView(mActivity,mInflater,convertView);
  }
  RenderableModel child=mGroups.get(groupPosition).children.get(childPosition);
  if (child instanceof Match) {
    ((Match)child).setSelectedTeam(mTeamKey);
  }
  ListItem renderedChild=child.render(mRendererSupplier);
  if (renderedChild != null) {
    return renderedChild.getView(mActivity,mInflater,convertView);
  }
 else {
    return new LabelValueListItem(""String_Node_Str"",""String_Node_Str"").getView(mActivity,mInflater,convertView);
  }
}",0.8388037928519329
33600,"@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=0;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else   if (rank > 0) {
    mDataToBind.add(rankBreakdownItem);
  }
  if (mDataToBind.size() > 0) {
    mDataToBind.add(new EmptyListElement(""String_Node_Str""));
  }
}","@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=-1;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else   if (rank > 0) {
    mDataToBind.add(rankBreakdownItem);
  }
  if (mDataToBind.size() > 0) {
    mDataToBind.add(new EmptyListElement(""String_Node_Str""));
  }
}",0.9996347254352856
33601,"public void hideFab(boolean animate){
  if (!mFabVisible) {
    return;
  }
  mFabVisible=false;
  if (mRunningFabAnimation != null) {
    mRunningFabAnimation.cancel();
  }
  if (!animate) {
    mToggleSettingsPanelButton.setVisibility(View.GONE);
    return;
  }
  ValueAnimator fabScaleDown=ValueAnimator.ofFloat(1,0);
  fabScaleDown.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.VISIBLE);
    }
    @Override public void onAnimationEnd(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.GONE);
    }
  }
);
  fabScaleDown.addUpdateListener(animation -> {
    ViewCompat.setScaleX(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
    ViewCompat.setScaleY(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
  }
);
  fabScaleDown.setDuration(FAB_ANIMATION_DURATION);
  fabScaleDown.setInterpolator(new AccelerateInterpolator());
  fabScaleDown.start();
  mRunningFabAnimation=fabScaleDown;
}","protected void hideFab(boolean animate){
  if (!mFabVisible) {
    return;
  }
  mFabVisible=false;
  if (mRunningFabAnimation != null) {
    mRunningFabAnimation.cancel();
  }
  if (!animate) {
    mToggleSettingsPanelButton.setVisibility(View.GONE);
    return;
  }
  ValueAnimator fabScaleDown=ValueAnimator.ofFloat(1,0);
  fabScaleDown.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.VISIBLE);
    }
    @Override public void onAnimationEnd(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.GONE);
    }
  }
);
  fabScaleDown.addUpdateListener(animation -> {
    ViewCompat.setScaleX(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
    ViewCompat.setScaleY(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
  }
);
  fabScaleDown.setDuration(FAB_ANIMATION_DURATION);
  fabScaleDown.setInterpolator(new AccelerateInterpolator());
  fabScaleDown.start();
  mRunningFabAnimation=fabScaleDown;
}",0.993905297702766
33602,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  super.setContentView(R.layout.activity_mytba_settings);
  mCoordinatorLayout=(CoordinatorLayout)findViewById(R.id.coordinator);
  mSettingsContainer=(RelativeLayout)findViewById(R.id.settings);
  mToggleSettingsPanelButton=(FloatingActionButton)findViewById(R.id.toggle_settings_button);
  mForegroundDim=findViewById(R.id.activity_foreground_dim);
  mSettingsToolbar=(Toolbar)findViewById(R.id.settings_toolbar);
  mToggleSettingsPanelButton.setOnClickListener(this);
  mSettingsToolbar.setNavigationIcon(R.drawable.ic_close_black_24dp);
  mSettingsToolbar.setTitle(""String_Node_Str"");
  mSettingsToolbar.setNavigationOnClickListener(v -> onSettingsCloseButtonClick());
  mSettingsToolbar.setNavigationContentDescription(R.string.close);
  ViewCompat.setElevation(mSettingsToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  mIsMyTBAEnabled=AccountHelper.isMyTBAEnabled(this);
  if (!mIsMyTBAEnabled) {
    hideFab(false);
  }
  setupFabIconForSettingsPanelOpen(false);
  if (savedInstanceState != null) {
    mIsSettingsPanelOpen=savedInstanceState.getBoolean(SETTINGS_PANEL_OPEN);
    setupFabIconForSettingsPanelOpen(mIsSettingsPanelOpen);
    if (mIsSettingsPanelOpen) {
      mSettingsContainer.setVisibility(View.VISIBLE);
      getDrawerLayout().setStatusBarBackgroundColor(getResources().getColor(R.color.accent_dark));
      Utilities.setLightStatusBar(getWindow(),true);
    }
 else {
      mSettingsContainer.setVisibility(View.INVISIBLE);
    }
    savedPreferenceState=savedInstanceState.getBundle(MyTBASettingsFragment.SAVED_STATE_BUNDLE);
  }
  mSaveSettingsTaskFragment=(UpdateUserModelSettingsTaskFragment)getSupportFragmentManager().findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  super.setContentView(R.layout.activity_mytba_settings);
  mCoordinatorLayout=(CoordinatorLayout)findViewById(R.id.coordinator);
  mSettingsContainer=(RelativeLayout)findViewById(R.id.settings);
  mToggleSettingsPanelButton=(FloatingActionButton)findViewById(R.id.toggle_settings_button);
  mForegroundDim=findViewById(R.id.activity_foreground_dim);
  mSettingsToolbar=(Toolbar)findViewById(R.id.settings_toolbar);
  mToggleSettingsPanelButton.setOnClickListener(this);
  mSettingsToolbar.setNavigationIcon(R.drawable.ic_close_black_24dp);
  mSettingsToolbar.setTitle(""String_Node_Str"");
  mSettingsToolbar.setNavigationOnClickListener(v -> onSettingsCloseButtonClick());
  mSettingsToolbar.setNavigationContentDescription(R.string.close);
  ViewCompat.setElevation(mSettingsToolbar,getResources().getDimension(R.dimen.toolbar_elevation));
  mIsMyTBAEnabled=AccountHelper.isMyTBAEnabled(this);
  mFabVisible=(mToggleSettingsPanelButton.getVisibility() == View.VISIBLE);
  syncFabVisibilityWithMyTbaEnabled(false);
  setupFabIconForSettingsPanelOpen(false);
  if (savedInstanceState != null) {
    mIsSettingsPanelOpen=savedInstanceState.getBoolean(SETTINGS_PANEL_OPEN);
    setupFabIconForSettingsPanelOpen(mIsSettingsPanelOpen);
    if (mIsSettingsPanelOpen) {
      mSettingsContainer.setVisibility(View.VISIBLE);
      getDrawerLayout().setStatusBarBackgroundColor(getResources().getColor(R.color.accent_dark));
      Utilities.setLightStatusBar(getWindow(),true);
    }
 else {
      mSettingsContainer.setVisibility(View.INVISIBLE);
    }
    savedPreferenceState=savedInstanceState.getBundle(MyTBASettingsFragment.SAVED_STATE_BUNDLE);
  }
  mSaveSettingsTaskFragment=(UpdateUserModelSettingsTaskFragment)getSupportFragmentManager().findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG);
}",0.9563812600969306
33603,"public void showFab(boolean animate,boolean overrideMyTbaCheck){
  if (mFabVisible) {
    return;
  }
  if (!mIsMyTBAEnabled && !overrideMyTbaCheck) {
    hideFab(false);
    return;
  }
  mFabVisible=true;
  if (mRunningFabAnimation != null) {
    mRunningFabAnimation.cancel();
  }
  if (!animate) {
    mToggleSettingsPanelButton.setVisibility(View.GONE);
    return;
  }
  ValueAnimator fabScaleUp=ValueAnimator.ofFloat(0,1);
  fabScaleUp.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.VISIBLE);
    }
  }
);
  fabScaleUp.addUpdateListener(animation -> {
    ViewCompat.setScaleX(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
    ViewCompat.setScaleY(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
  }
);
  fabScaleUp.setDuration(FAB_ANIMATION_DURATION);
  fabScaleUp.setInterpolator(new DecelerateInterpolator());
  fabScaleUp.start();
  mRunningFabAnimation=fabScaleUp;
}","/** 
 * Will
 * @param animate
 */
protected void showFab(boolean animate){
  if (mFabVisible) {
    return;
  }
  mFabVisible=true;
  if (mRunningFabAnimation != null) {
    mRunningFabAnimation.cancel();
  }
  if (!animate) {
    mToggleSettingsPanelButton.setVisibility(View.VISIBLE);
    mToggleSettingsPanelButton.setScaleX(1.0f);
    mToggleSettingsPanelButton.setScaleY(1.0f);
    return;
  }
  ValueAnimator fabScaleUp=ValueAnimator.ofFloat(0,1);
  fabScaleUp.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      mToggleSettingsPanelButton.setVisibility(View.VISIBLE);
    }
  }
);
  fabScaleUp.addUpdateListener(animation -> {
    ViewCompat.setScaleX(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
    ViewCompat.setScaleY(mToggleSettingsPanelButton,(float)animation.getAnimatedValue());
  }
);
  fabScaleUp.setDuration(FAB_ANIMATION_DURATION);
  fabScaleUp.setInterpolator(new DecelerateInterpolator());
  fabScaleUp.start();
  mRunningFabAnimation=fabScaleUp;
}",0.8719424460431655
33604,"@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    if (position == Arrays.binarySearch(mAdapter.TITLES,""String_Node_Str"")) {
      mOptionsMenu.findItem(R.id.stats_help).setVisible(true);
    }
 else {
      mOptionsMenu.findItem(R.id.stats_help).setVisible(false);
    }
  }
  if (position != 0) {
    hideFab(true);
  }
 else {
    showFab(true,false);
  }
}","@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    if (position == Arrays.binarySearch(mAdapter.TITLES,""String_Node_Str"")) {
      mOptionsMenu.findItem(R.id.stats_help).setVisible(true);
    }
 else {
      mOptionsMenu.findItem(R.id.stats_help).setVisible(false);
    }
  }
  if (position != 0) {
    hideFab(true);
  }
 else {
    syncFabVisibilityWithMyTbaEnabled(true);
  }
}",0.9382716049382716
33605,"@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    MenuItem pointsHelp=mOptionsMenu.findItem(R.id.points_help);
    if (position == 1) {
      pointsHelp.setVisible(true);
    }
 else {
      pointsHelp.setVisible(false);
    }
  }
  if (position != 0) {
    hideFab(true);
  }
 else {
    showFab(true,false);
  }
}","@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    MenuItem pointsHelp=mOptionsMenu.findItem(R.id.points_help);
    if (position == 1) {
      pointsHelp.setVisible(true);
    }
 else {
      pointsHelp.setVisible(false);
    }
  }
  if (position != 0) {
    hideFab(true);
  }
 else {
    syncFabVisibilityWithMyTbaEnabled(true);
  }
}",0.9058171745152356
33606,"@Override public void onPageSelected(int position){
  mSelectedTab=position;
  if (position != ViewEventFragmentPagerAdapter.TAB_INFO) {
    hideFab(true);
  }
 else {
    showFab(true,false);
  }
}","@Override public void onPageSelected(int position){
  mSelectedTab=position;
  if (position != ViewEventFragmentPagerAdapter.TAB_INFO) {
    hideFab(true);
  }
 else {
    syncFabVisibilityWithMyTbaEnabled(true);
  }
}",0.8990384615384616
33607,"@Override public void onPageSelected(int position){
  mSelectedTab=position;
switch (position) {
case ViewTeamFragmentPagerAdapter.TAB_INFO:
    setupFabForMyTbaSettingsTab();
  showFab(true,false);
break;
case ViewTeamFragmentPagerAdapter.TAB_MEDIA:
showFab(true,true);
setFabColor(R.color.accent);
setFabDrawable(R.drawable.ic_add_a_photo_white_24dp);
break;
default :
hideFab(true);
break;
}
}","@Override public void onPageSelected(int position){
  mSelectedTab=position;
switch (position) {
case ViewTeamFragmentPagerAdapter.TAB_INFO:
    syncFabVisibilityWithMyTbaEnabled(true);
  setupFabForMyTbaSettingsTab();
break;
case ViewTeamFragmentPagerAdapter.TAB_MEDIA:
syncFabVisibilityWithMyTbaEnabled(true);
setFabColor(R.color.accent);
setFabDrawable(R.drawable.ic_add_a_photo_white_24dp);
break;
default :
hideFab(true);
break;
}
}",0.8427370948379351
33608,"protected void showLastMatch(MatchListElement match){
  lastMatchView.setVisibility(View.VISIBLE);
  lastMatchContainer.setVisibility(View.VISIBLE);
  lastMatchView.removeAllViews();
  lastMatchView.addView(match.getView(mActivity,mInflater,null));
}","protected void showLastMatch(MatchListElement match){
  if (!mAreViewsBound) {
    bindViews();
  }
  lastMatchView.setVisibility(View.VISIBLE);
  lastMatchContainer.setVisibility(View.VISIBLE);
  lastMatchView.removeAllViews();
  lastMatchView.addView(match.getView(mActivity,mInflater,null));
}",0.9157509157509156
33609,"@Override public void unbind(boolean unbindViews){
  super.unbind(unbindViews);
  if (unbindViews) {
    ButterKnife.unbind(this);
  }
}","@Override public void unbind(boolean unbindViews){
  super.unbind(unbindViews);
  if (unbindViews) {
    ButterKnife.unbind(this);
    mAreViewsBound=false;
  }
}",0.912751677852349
33610,"@Inject public EventInfoBinder(MatchRenderer renderer,SocialClickListener socialClickListener,EventInfoContainerClickListener eventInfoContainerClickListener){
  mSocialClickListener=socialClickListener;
  mInfoClickListener=eventInfoContainerClickListener;
  mMatchRenderer=renderer;
}","@Inject public EventInfoBinder(MatchRenderer renderer,SocialClickListener socialClickListener,EventInfoContainerClickListener eventInfoContainerClickListener){
  mSocialClickListener=socialClickListener;
  mInfoClickListener=eventInfoContainerClickListener;
  mMatchRenderer=renderer;
  mIsLive=false;
  mAreViewsBound=false;
}",0.933115823817292
33611,"protected void showNextMatch(MatchListElement match){
  nextMatchView.setVisibility(View.VISIBLE);
  nextMatchContainer.setVisibility(View.VISIBLE);
  nextMatchView.removeAllViews();
  nextMatchView.addView(match.getView(mActivity,mInflater,null));
}","protected void showNextMatch(MatchListElement match){
  if (!mAreViewsBound) {
    bindViews();
  }
  nextMatchView.setVisibility(View.VISIBLE);
  nextMatchContainer.setVisibility(View.VISIBLE);
  nextMatchView.removeAllViews();
  nextMatchView.addView(match.getView(mActivity,mInflater,null));
}",0.9157509157509156
33612,"@Override public void bindViews(){
  ButterKnife.bind(this,mRootView);
}","@Override public void bindViews(){
  if (!mAreViewsBound) {
    ButterKnife.bind(this,mRootView);
    mAreViewsBound=true;
  }
}",0.72
33613,"@Override public void updateData(@Nullable Integer data){
  viewPager.post(() -> {
    viewPager.setAdapter(new TeamListFragmentPagerAdapter(fragmentManager,data == null ? 0 : data));
    tabs.setViewPager(viewPager);
    viewPager.setCurrentItem(mInitialTab);
  }
);
}","@Override public void updateData(@Nullable Integer data){
  if (data != null && oldData != null && data.equals(oldData)) {
    return;
  }
  viewPager.post(() -> {
    viewPager.setAdapter(new TeamListFragmentPagerAdapter(fragmentManager,data == null ? 0 : data));
    tabs.setViewPager(viewPager);
    viewPager.setCurrentItem(mInitialTab);
  }
);
  oldData=data;
}",0.8472440944881889
33614,"@Override public int getGroupCount(){
  return groups.size();
}","@Override public int getGroupCount(){
  return mGroups.size();
}",0.9763779527559056
33615,"@Override public Object getChild(int groupPosition,int childPosition){
  return groups.get(groupPosition).children.get(childPosition);
}","@Override public Object getChild(int groupPosition,int childPosition){
  return mGroups.get(groupPosition).children.get(childPosition);
}",0.989010989010989
33616,"@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.expandable_list_group,null);
  }
  ListGroup group=(ListGroup)getGroup(groupPosition);
  ((TextView)convertView.findViewById(R.id.group_name)).setText(group.string);
  return convertView;
}","@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=mInflater.inflate(R.layout.expandable_list_group,null);
  }
  ListGroup group=(ListGroup)getGroup(groupPosition);
  ((TextView)convertView.findViewById(R.id.group_name)).setText(group.string);
  return convertView;
}",0.9959294436906376
33617,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  return groups.get(groupPosition).children.get(childPosition).render(mRendererSupplier).getView(mActivity,inflater,convertView);
}","@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  return mGroups.get(groupPosition).children.get(childPosition).render(mRendererSupplier).getView(mActivity,mInflater,convertView);
}",0.9884169884169884
33618,"@Override public int getChildrenCount(int groupPosition){
  if (groups == null || groups.get(groupPosition) == null)   return 0;
  return groups.get(groupPosition).children.size();
}","@Override public int getChildrenCount(int groupPosition){
  if (mGroups == null || mGroups.get(groupPosition) == null)   return 0;
  return mGroups.get(groupPosition).children.size();
}",0.9754768392370572
33619,"@Override public Object getGroup(int groupPosition){
  return groups.get(groupPosition);
}","@Override public Object getGroup(int groupPosition){
  return mGroups.get(groupPosition);
}",0.9834254143646408
33620,"public void addGroup(ListGroup group){
  groups.add(group);
}","public void addGroup(ListGroup group){
  mGroups.add(group);
}",0.975609756097561
33621,"public ExpandableListViewAdapter(Activity activity,ModelRendererSupplier supplier,List<ListGroup> groups){
  mActivity=activity;
  mRendererSupplier=supplier;
  this.groups=groups;
  inflater=activity.getLayoutInflater();
}","public ExpandableListViewAdapter(Activity activity,ModelRendererSupplier supplier,List<ListGroup> groups){
  mActivity=activity;
  mRendererSupplier=supplier;
  mGroups=groups;
  mInflater=activity.getLayoutInflater();
}",0.8306997742663657
33622,"@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  RenderableModel child=groups.get(groupPosition).children.get(childPosition);
  if (child instanceof Match) {
    ((Match)child).setSelectedTeam(mTeamKey);
  }
  ListItem renderedChild=child.render(mRendererSupplier);
  if (renderedChild != null) {
    return renderedChild.getView(mActivity,inflater,convertView);
  }
 else {
    return new LabelValueListItem(""String_Node_Str"",""String_Node_Str"").getView(mActivity,inflater,convertView);
  }
}","@Override public View getChildView(int groupPosition,int childPosition,boolean isLastChild,View convertView,ViewGroup parent){
  RenderableModel child=mGroups.get(groupPosition).children.get(childPosition);
  if (child instanceof Match) {
    ((Match)child).setSelectedTeam(mTeamKey);
  }
  ListItem renderedChild=child.render(mRendererSupplier);
  if (renderedChild != null) {
    return renderedChild.getView(mActivity,mInflater,convertView);
  }
 else {
    return new LabelValueListItem(""String_Node_Str"",""String_Node_Str"").getView(mActivity,mInflater,convertView);
  }
}",0.992153443766347
33623,"@Override public void updateData(@Nullable List<ListGroup> data){
  if (data == null || expandableListView == null) {
    setDataBound(false);
    return;
  }
  if (data.isEmpty()) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    setDataBound(false);
    return;
  }
  ExpandableListViewAdapter adapter=newAdapter(ImmutableList.copyOf(data));
  expandableListView.setAdapter(adapter);
  adapter.notifyDataSetChanged();
  expandableListView.setVisibility(View.VISIBLE);
  expandForMode(data);
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  expandableListView.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  setDataBound(true);
}","@Override public void updateData(@Nullable List<ListGroup> data){
  if (data == null || expandableListView == null) {
    setDataBound(false);
    return;
  }
  if (data.isEmpty()) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    setDataBound(false);
    return;
  }
  if (mAdapter == null) {
    mAdapter=newAdapter(new ArrayList<>(data));
    expandableListView.setAdapter(mAdapter);
  }
 else {
    mAdapter.removeAllGroups();
    mAdapter.addAllGroups(new ArrayList<>(data));
    mAdapter.notifyDataSetChanged();
  }
  expandableListView.setVisibility(View.VISIBLE);
  expandForMode(data);
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  mNoDataBinder.unbindData();
  setDataBound(true);
}",0.7004279600570613
33624,"@Override public void updateData(@Nullable List<ListItem> data){
  if (data == null || listView == null) {
    setDataBound(false);
    return;
  }
  if (data.isEmpty()) {
    setDataBound(false);
    return;
  }
  long startTime=System.currentTimeMillis();
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  if (mAdapter == null) {
    mAdapter=newAdapter(data);
    listView.setAdapter(mAdapter);
  }
 else {
    mAdapter.clear();
    mAdapter.addAll(data);
    mAdapter.notifyDataSetChanged();
  }
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  listView.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  setDataBound(true);
}","@Override public void updateData(@Nullable List<ListItem> data){
  if (data == null || listView == null) {
    setDataBound(false);
    return;
  }
  if (data.isEmpty()) {
    setDataBound(false);
    return;
  }
  long startTime=System.currentTimeMillis();
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  if (mAdapter == null) {
    mAdapter=newAdapter(new ArrayList<>(data));
    listView.setAdapter(mAdapter);
  }
 else {
    mAdapter.clear();
    mAdapter.addAll(new ArrayList<>(data));
    mAdapter.notifyDataSetChanged();
  }
  if (progressBar != null) {
    progressBar.setVisibility(View.GONE);
  }
  listView.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  setDataBound(true);
}",0.9684343434343434
33625,"@Override public void updateData(@Nullable Model data){
  mSocialClickListener.setModelKey(data.eventKey);
  mIsLive=data.isLive;
  eventName.setText(data.nameString);
  if (data.dateString == null || data.dateString.isEmpty()) {
    eventDateContainer.setVisibility(View.GONE);
  }
 else {
    eventDate.setText(data.dateString);
  }
  if (data.venueString != null && !data.venueString.isEmpty()) {
    eventVenue.setText(data.venueString);
  }
 else   if (data.locationString != null && !data.locationString.isEmpty()) {
    eventVenue.setText(data.locationString);
  }
 else {
    eventVenue.setText(R.string.no_location_available);
    eventVenueContainer.setVisibility(View.GONE);
  }
  eventVenueContainer.setFocusable(true);
  eventVenueContainer.setClickable(true);
  eventVenueContainer.setOnClickListener(mSocialClickListener);
  if (data.venueString != null && !data.venueString.isEmpty()) {
    eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(data.venueString));
  }
 else   if (data.locationString != null && !data.locationString.isEmpty()) {
    eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(data.locationString));
  }
 else {
    eventVenueContainer.setTag(null);
    eventVenueContainer.setFocusable(false);
    eventVenueContainer.setClickable(false);
  }
  if (data.eventWebsite != null && data.eventWebsite.isEmpty()) {
    eventWebsiteContainer.setTag(""String_Node_Str"" + Uri.encode(data.nameString));
    eventWebsiteTitle.setText(R.string.find_event_on_google);
  }
 else {
    eventWebsiteContainer.setTag(data.eventWebsite);
    eventWebsiteTitle.setText(R.string.view_event_website);
  }
  eventWebsiteContainer.setOnClickListener(mSocialClickListener);
  eventTwitterContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventTwitterTitle.setText(mActivity.getString(R.string.view_event_twitter,data.eventKey));
  eventTwitterContainer.setOnClickListener(mSocialClickListener);
  eventYoutubeContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventYoutubeTitle.setText(mActivity.getString(R.string.view_event_youtube,data.eventKey));
  eventYoutubeContainer.setOnClickListener(mSocialClickListener);
  eventCdContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventCdContainer.setOnClickListener(mSocialClickListener);
  content.setVisibility(View.VISIBLE);
  progressBar.setVisibility(View.GONE);
  EventBus.getDefault().post(new ActionBarTitleEvent(data.titleString));
  mNoDataBinder.unbindData();
  setDataBound(true);
}","@Override public void updateData(@Nullable Model data){
  if (data == null) {
    if (!isDataBound()) {
      bindNoDataView();
    }
    return;
  }
  mSocialClickListener.setModelKey(data.eventKey);
  mIsLive=data.isLive;
  eventName.setText(data.nameString);
  if (data.dateString == null || data.dateString.isEmpty()) {
    eventDateContainer.setVisibility(View.GONE);
  }
 else {
    eventDate.setText(data.dateString);
  }
  if (data.venueString != null && !data.venueString.isEmpty()) {
    eventVenue.setText(data.venueString);
  }
 else   if (data.locationString != null && !data.locationString.isEmpty()) {
    eventVenue.setText(data.locationString);
  }
 else {
    eventVenue.setText(R.string.no_location_available);
    eventVenueContainer.setVisibility(View.GONE);
  }
  eventVenueContainer.setFocusable(true);
  eventVenueContainer.setClickable(true);
  eventVenueContainer.setOnClickListener(mSocialClickListener);
  if (data.venueString != null && !data.venueString.isEmpty()) {
    eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(data.venueString));
  }
 else   if (data.locationString != null && !data.locationString.isEmpty()) {
    eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(data.locationString));
  }
 else {
    eventVenueContainer.setTag(null);
    eventVenueContainer.setFocusable(false);
    eventVenueContainer.setClickable(false);
  }
  if (data.eventWebsite != null && data.eventWebsite.isEmpty()) {
    eventWebsiteContainer.setTag(""String_Node_Str"" + Uri.encode(data.nameString));
    eventWebsiteTitle.setText(R.string.find_event_on_google);
  }
 else {
    eventWebsiteContainer.setTag(data.eventWebsite);
    eventWebsiteTitle.setText(R.string.view_event_website);
  }
  eventWebsiteContainer.setOnClickListener(mSocialClickListener);
  eventTwitterContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventTwitterTitle.setText(mActivity.getString(R.string.view_event_twitter,data.eventKey));
  eventTwitterContainer.setOnClickListener(mSocialClickListener);
  eventYoutubeContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventYoutubeTitle.setText(mActivity.getString(R.string.view_event_youtube,data.eventKey));
  eventYoutubeContainer.setOnClickListener(mSocialClickListener);
  eventCdContainer.setTag(""String_Node_Str"" + data.eventKey);
  eventCdContainer.setOnClickListener(mSocialClickListener);
  content.setVisibility(View.VISIBLE);
  progressBar.setVisibility(View.GONE);
  EventBus.getDefault().post(new ActionBarTitleEvent(data.titleString));
  mNoDataBinder.unbindData();
  setDataBound(true);
}",0.9814082278481012
33626,"@Override public void updateData(@Nullable TeamInfoBinder.Model data){
  mSocialClickListener.setModelKey(data.teamKey);
  if (data.nickname.isEmpty()) {
    teamName.setText(""String_Node_Str"" + data.teamNumber);
  }
 else {
    teamName.setText(data.nickname);
  }
  if (data.location.isEmpty()) {
    teamLocationContainer.setVisibility(View.GONE);
  }
 else {
    teamLocation.setText(data.location);
    teamLocationContainer.setTag(""String_Node_Str"" + Uri.encode(data.location));
  }
  teamLocationContainer.setOnClickListener(mSocialClickListener);
  if (data.motto.isEmpty()) {
    teamMottoContainer.setVisibility(View.GONE);
  }
 else {
    teamMotto.setText(data.motto);
  }
  if (data.website.isEmpty()) {
    teamWebsiteContainer.setTag(""String_Node_Str"" + Uri.encode(data.nickname));
    teamWebsiteTitle.setText(R.string.find_event_on_google);
  }
 else {
    teamWebsiteContainer.setTag(data.website);
    teamWebsiteTitle.setText(R.string.view_team_website);
  }
  teamWebsiteContainer.setOnClickListener(mSocialClickListener);
  teamTwitterContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamTwitterContainer.setOnClickListener(mSocialClickListener);
  teamTwitterTitle.setText(mActivity.getString(R.string.view_team_twitter,data.teamKey));
  teamYoutubeContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamYoutubeContainer.setOnClickListener(mSocialClickListener);
  teamYoutubeTitle.setText(mActivity.getString(R.string.view_team_youtube,data.teamKey));
  teamCdContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamCdContainer.setOnClickListener(mSocialClickListener);
  if (data.fullName.isEmpty()) {
    teamFullNameContainer.setVisibility(View.GONE);
  }
 else {
    SpannableString string=new SpannableString(""String_Node_Str"" + data.fullName);
    string.setSpan(new TextAppearanceSpan(mActivity,R.style.InfoItemLabelStyle),0,3,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
    teamFullName.setText(string);
  }
  teamNextMatchLabel.setVisibility(View.GONE);
  teamNextMatchDetails.setVisibility(View.GONE);
  content.setVisibility(View.VISIBLE);
  progress.setVisibility(View.GONE);
  content.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  setDataBound(true);
}","@Override public void updateData(@Nullable TeamInfoBinder.Model data){
  if (data == null) {
    if (!isDataBound()) {
      bindNoDataView();
    }
    return;
  }
  mSocialClickListener.setModelKey(data.teamKey);
  if (data.nickname.isEmpty()) {
    teamName.setText(""String_Node_Str"" + data.teamNumber);
  }
 else {
    teamName.setText(data.nickname);
  }
  if (data.location.isEmpty()) {
    teamLocationContainer.setVisibility(View.GONE);
  }
 else {
    teamLocation.setText(data.location);
    teamLocationContainer.setTag(""String_Node_Str"" + Uri.encode(data.location));
  }
  teamLocationContainer.setOnClickListener(mSocialClickListener);
  if (data.motto.isEmpty()) {
    teamMottoContainer.setVisibility(View.GONE);
  }
 else {
    teamMotto.setText(data.motto);
  }
  if (data.website.isEmpty()) {
    teamWebsiteContainer.setTag(""String_Node_Str"" + Uri.encode(data.nickname));
    teamWebsiteTitle.setText(R.string.find_event_on_google);
  }
 else {
    teamWebsiteContainer.setTag(data.website);
    teamWebsiteTitle.setText(R.string.view_team_website);
  }
  teamWebsiteContainer.setOnClickListener(mSocialClickListener);
  teamTwitterContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamTwitterContainer.setOnClickListener(mSocialClickListener);
  teamTwitterTitle.setText(mActivity.getString(R.string.view_team_twitter,data.teamKey));
  teamYoutubeContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamYoutubeContainer.setOnClickListener(mSocialClickListener);
  teamYoutubeTitle.setText(mActivity.getString(R.string.view_team_youtube,data.teamKey));
  teamCdContainer.setTag(""String_Node_Str"" + data.teamKey);
  teamCdContainer.setOnClickListener(mSocialClickListener);
  if (data.fullName.isEmpty()) {
    teamFullNameContainer.setVisibility(View.GONE);
  }
 else {
    SpannableString string=new SpannableString(""String_Node_Str"" + data.fullName);
    string.setSpan(new TextAppearanceSpan(mActivity,R.style.InfoItemLabelStyle),0,3,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
    teamFullName.setText(string);
  }
  teamNextMatchLabel.setVisibility(View.GONE);
  teamNextMatchDetails.setVisibility(View.GONE);
  content.setVisibility(View.VISIBLE);
  progress.setVisibility(View.GONE);
  content.setVisibility(View.VISIBLE);
  mNoDataBinder.unbindData();
  setDataBound(true);
}",0.979148181011535
33627,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  mRenderer.renderAlliances(mAPIData,mDataToBind);
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  mRenderer.renderAlliances(mAPIData,mDataToBind);
}",0.8826530612244898
33628,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  Map<String,Team> teams=Utilities.getMapForPlatform(String.class,Team.class);
  for (int i=0; i < mAPIData.size(); i++) {
    Award award=mAPIData.get(i);
    for (    JsonElement winner : award.getWinners()) {
      if (winner.isJsonObject() && !winner.getAsJsonObject().get(""String_Node_Str"").isJsonNull()) {
        String teamKey=""String_Node_Str"" + winner.getAsJsonObject().get(""String_Node_Str"");
        Team team=mDb.getTeamsTable().get(teamKey);
        teams.put(teamKey,team);
      }
    }
    AwardRenderer.RenderArgs args=new AwardRenderer.RenderArgs(teams,mTeamKey);
    mDataToBind.add(mRenderer.renderFromModel(award,args));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  mDataToBind.clear();
  Map<String,Team> teams=Utilities.getMapForPlatform(String.class,Team.class);
  for (int i=0; i < mAPIData.size(); i++) {
    Award award=mAPIData.get(i);
    for (    JsonElement winner : award.getWinners()) {
      if (winner.isJsonObject() && !winner.getAsJsonObject().get(""String_Node_Str"").isJsonNull()) {
        String teamKey=""String_Node_Str"" + winner.getAsJsonObject().get(""String_Node_Str"");
        Team team=mDb.getTeamsTable().get(teamKey);
        teams.put(teamKey,team);
      }
    }
    AwardRenderer.RenderArgs args=new AwardRenderer.RenderArgs(teams,mTeamKey);
    mDataToBind.add(mRenderer.renderFromModel(award,args));
  }
}",0.9717444717444718
33629,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || !mAPIData.isJsonArray()) {
    return;
  }
  JsonArray data=mAPIData.getAsJsonArray();
  for (  JsonElement e : data) {
    JsonObject user=e.getAsJsonObject();
    String username=user.get(""String_Node_Str"").getAsString();
    int contributionCount=user.get(""String_Node_Str"").getAsInt();
    String avatarUrl=user.get(""String_Node_Str"").getAsString();
    mDataToBind.add(new ContributorListElement(username,contributionCount,avatarUrl));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || !mAPIData.isJsonArray()) {
    return;
  }
  mDataToBind.clear();
  JsonArray data=mAPIData.getAsJsonArray();
  for (  JsonElement e : data) {
    JsonObject user=e.getAsJsonObject();
    String username=user.get(""String_Node_Str"").getAsString();
    int contributionCount=user.get(""String_Node_Str"").getAsInt();
    String avatarUrl=user.get(""String_Node_Str"").getAsString();
    mDataToBind.add(new ContributorListElement(username,contributionCount,avatarUrl));
  }
}",0.9599303135888502
33630,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  for (int i=0; i < mAPIData.size(); i++) {
    District district=mAPIData.get(i);
    int numEvents=getNumEventsForDistrict(district.getKey());
    district.setNumEvents(numEvents);
    DistrictRenderer.RenderArgs args=new DistrictRenderer.RenderArgs(numEvents,false);
    mDataToBind.add(mRenderer.renderFromModel(district,args));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  for (int i=0; i < mAPIData.size(); i++) {
    District district=mAPIData.get(i);
    int numEvents=getNumEventsForDistrict(district.getKey());
    district.setNumEvents(numEvents);
    DistrictRenderer.RenderArgs args=new DistrictRenderer.RenderArgs(numEvents,false);
    mDataToBind.add(mRenderer.renderFromModel(district,args));
  }
}",0.9522821576763484
33631,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  JsonObject rankingsData=mAPIData.getAsJsonObject();
  if (!rankingsData.has(""String_Node_Str"")) {
    return;
  }
  JsonObject points=rankingsData.get(""String_Node_Str"").getAsJsonObject();
  String districtKey=""String_Node_Str"";
  Event event=mDb.getEventsTable().get(mEventKey);
  if (event != null) {
    DistrictType type=DistrictType.fromEnum(event.getDistrictEnum());
    boolean isDistrict=type != DistrictType.NO_DISTRICT;
    ((Type)mDataToBind).isDistrict=isDistrict;
    if (isDistrict) {
      districtKey=mEventKey.substring(0,4) + type.getAbbreviation();
    }
  }
  ArrayList<DistrictPointBreakdown> pointBreakdowns=new ArrayList<>();
  for (  Map.Entry<String,JsonElement> teamPoints : points.entrySet()) {
    Team team=mDb.getTeamsTable().get(teamPoints.getKey());
    DistrictPointBreakdown b=mGson.fromJson(teamPoints.getValue(),DistrictPointBreakdown.class);
    b.setTeamKey(teamPoints.getKey());
    b.setTeamName(team != null ? team.getNickname() : ""String_Node_Str"" + teamPoints.getKey().substring(3));
    b.setDistrictKey(districtKey);
    pointBreakdowns.add(b);
  }
  Collections.sort(pointBreakdowns,new PointBreakdownComparater());
  for (int i=0; i < pointBreakdowns.size(); i++) {
    pointBreakdowns.get(i).setRank(i + 1);
    mDataToBind.add(mRenderer.renderFromModel(pointBreakdowns.get(i),null));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  mDataToBind.clear();
  JsonObject rankingsData=mAPIData.getAsJsonObject();
  if (!rankingsData.has(""String_Node_Str"")) {
    return;
  }
  JsonObject points=rankingsData.get(""String_Node_Str"").getAsJsonObject();
  String districtKey=""String_Node_Str"";
  Event event=mDb.getEventsTable().get(mEventKey);
  if (event != null) {
    DistrictType type=DistrictType.fromEnum(event.getDistrictEnum());
    boolean isDistrict=type != DistrictType.NO_DISTRICT;
    ((Type)mDataToBind).isDistrict=isDistrict;
    if (isDistrict) {
      districtKey=mEventKey.substring(0,4) + type.getAbbreviation();
    }
  }
  ArrayList<DistrictPointBreakdown> pointBreakdowns=new ArrayList<>();
  for (  Map.Entry<String,JsonElement> teamPoints : points.entrySet()) {
    Team team=mDb.getTeamsTable().get(teamPoints.getKey());
    DistrictPointBreakdown b=mGson.fromJson(teamPoints.getValue(),DistrictPointBreakdown.class);
    b.setTeamKey(teamPoints.getKey());
    b.setTeamName(team != null ? team.getNickname() : ""String_Node_Str"" + teamPoints.getKey().substring(3));
    b.setDistrictKey(districtKey);
    pointBreakdowns.add(b);
  }
  Collections.sort(pointBreakdowns,new PointBreakdownComparater());
  for (int i=0; i < pointBreakdowns.size(); i++) {
    pointBreakdowns.get(i).setRank(i + 1);
    mDataToBind.add(mRenderer.renderFromModel(pointBreakdowns.get(i),null));
  }
}",0.9847883597883598
33632,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  for (int i=0; i < mAPIData.size(); i++) {
    DistrictTeam districtTeam=mAPIData.get(i);
    Team teamData=mDb.getTeamsTable().get(districtTeam.getTeamKey());
    String nickname;
    if (teamData != null) {
      nickname=teamData.getNickname();
    }
 else {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + districtTeam.getTeamKey() + ""String_Node_Str"");
      nickname=""String_Node_Str"" + districtTeam.getTeamKey().substring(3);
    }
    mDataToBind.add(new DistrictTeamListElement(districtTeam.getTeamKey(),districtTeam.getDistrictKey(),nickname,districtTeam.getRank(),districtTeam.getTotalPoints()));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  for (int i=0; i < mAPIData.size(); i++) {
    DistrictTeam districtTeam=mAPIData.get(i);
    Team teamData=mDb.getTeamsTable().get(districtTeam.getTeamKey());
    String nickname;
    if (teamData != null) {
      nickname=teamData.getNickname();
    }
 else {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + districtTeam.getTeamKey() + ""String_Node_Str"");
      nickname=""String_Node_Str"" + districtTeam.getTeamKey().substring(3);
    }
    mDataToBind.add(new DistrictTeamListElement(districtTeam.getTeamKey(),districtTeam.getDistrictKey(),nickname,districtTeam.getRank(),districtTeam.getTotalPoints()));
  }
}",0.9697368421052632
33633,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind=new Model();
  if (mAPIData == null) {
    return;
  }
  mDataToBind.eventKey=mAPIData.getKey();
  mDataToBind.nameString=mAPIData.getEventName();
  mDataToBind.actionBarTitle=mAPIData.getEventYear() + ""String_Node_Str"" + mAPIData.getEventShortName();
  mDataToBind.venueString=mAPIData.getVenue();
  mDataToBind.locationString=mAPIData.getLocation();
  mDataToBind.eventWebsite=mAPIData.getWebsite();
  mDataToBind.dateString=mAPIData.getDateString();
  mDataToBind.isLive=mAPIData.isHappeningNow();
  mDataToBind.titleString=mAPIData.getEventYear() + ""String_Node_Str"" + mAPIData.getEventShortName();
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind=new Model();
  mDataToBind.eventKey=mAPIData.getKey();
  mDataToBind.nameString=mAPIData.getEventName();
  mDataToBind.actionBarTitle=mAPIData.getEventYear() + ""String_Node_Str"" + mAPIData.getEventShortName();
  mDataToBind.venueString=mAPIData.getVenue();
  mDataToBind.locationString=mAPIData.getLocation();
  mDataToBind.eventWebsite=mAPIData.getWebsite();
  mDataToBind.dateString=mAPIData.getDateString();
  mDataToBind.isLive=mAPIData.isHappeningNow();
  mDataToBind.titleString=mAPIData.getEventYear() + ""String_Node_Str"" + mAPIData.getEventShortName();
}",0.93974175035868
33634,"@Override public void parseData(){
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
switch (mRenderMode) {
case MODE_WEEK:
default :
    EventHelper.renderEventListForWeek(mAPIData,mDataToBind,mRenderer);
  break;
case MODE_TEAM:
EventHelper.renderEventListForTeam(mAPIData,mDataToBind,mRenderer);
break;
case MODE_DISTRICT:
EventHelper.renderEventListForDistrict(mAPIData,mDataToBind,mRenderer);
break;
}
}","@Override public void parseData(){
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
switch (mRenderMode) {
case MODE_WEEK:
default :
    EventHelper.renderEventListForWeek(mAPIData,mDataToBind,mRenderer);
  break;
case MODE_TEAM:
EventHelper.renderEventListForTeam(mAPIData,mDataToBind,mRenderer);
break;
case MODE_DISTRICT:
EventHelper.renderEventListForDistrict(mAPIData,mDataToBind,mRenderer);
break;
}
}",0.9456264775413712
33635,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  Collections.sort(mAPIData,mEventComparator);
  Calendar cal=Calendar.getInstance();
  int lastEventWeek=-1;
  int lastEventMonth=-1;
  for (int i=0; i < mAPIData.size(); i++) {
    Event event=mAPIData.get(i);
    cal.setTime(event.getStartDate());
    int competitionWeek=event.getCompetitionWeek();
    int month=cal.get(Calendar.MONTH);
    boolean isOffseason=event.getEventType() == EventType.OFFSEASON;
    if (isOffseason ? lastEventMonth != month : lastEventWeek != competitionWeek) {
      mDataToBind.add(new EventWeekTab(competitionWeek,isOffseason ? month : -1,EventHelper.generateLabelForEvent(event)));
      lastEventMonth=month;
      lastEventWeek=competitionWeek;
    }
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  mDataToBind.clear();
  Collections.sort(mAPIData,mEventComparator);
  Calendar cal=Calendar.getInstance();
  int lastEventWeek=-1;
  int lastEventMonth=-1;
  for (int i=0; i < mAPIData.size(); i++) {
    Event event=mAPIData.get(i);
    cal.setTime(event.getStartDate());
    int competitionWeek=event.getCompetitionWeek();
    int month=cal.get(Calendar.MONTH);
    boolean isOffseason=event.getEventType() == EventType.OFFSEASON;
    if (isOffseason ? lastEventMonth != month : lastEventWeek != competitionWeek) {
      mDataToBind.add(new EventWeekTab(competitionWeek,isOffseason ? month : -1,EventHelper.generateLabelForEvent(event)));
      lastEventMonth=month;
      lastEventWeek=competitionWeek;
    }
  }
}",0.9732868757259
33636,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  int lastModel=-1;
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    Favorite favorite=mAPIData.get(i);
    ListItem item=mRenderer.renderFromKey(favorite.getModelKey(),favorite.getModelType(),null);
    if (item != null) {
      if (lastModel != favorite.getModelEnum()) {
        mDataToBind.add(new EventTypeHeader(favorite.getModelType().getTitle()));
      }
      mDataToBind.add(item);
    }
    lastModel=favorite.getModelEnum();
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  int lastModel=-1;
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    Favorite favorite=mAPIData.get(i);
    ListItem item=mRenderer.renderFromKey(favorite.getModelKey(),favorite.getModelType(),null);
    if (item != null) {
      if (lastModel != favorite.getModelEnum()) {
        mDataToBind.add(new EventTypeHeader(favorite.getModelType().getTitle()));
      }
      mDataToBind.add(item);
    }
    lastModel=favorite.getModelEnum();
  }
}",0.963375796178344
33637,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.event == null || mAPIData.match == null) {
    return;
  }
  mDataToBind.add(mRenderer.renderFromModel(mAPIData.match,MatchRenderer.RENDER_MATCH_INFO));
  mMatchTitle=mAPIData.match.getTitle();
  mMatchKey=mAPIData.match.getKey();
  JsonArray matchVideos=mAPIData.match.getVideos();
  for (int i=0; i < matchVideos.size(); i++) {
    JsonElement video=matchVideos.get(i);
    if (MediaType.fromString(video.getAsJsonObject().get(""String_Node_Str"").getAsString()) != MediaType.NONE) {
      Media media=mGson.fromJson(video,Media.class);
      mDataToBind.add(mMediaRenderer.renderFromModel(media,null));
    }
  }
  updateActionBarTitle(mAPIData.event.getEventShortName());
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || mAPIData.event == null || mAPIData.match == null) {
    return;
  }
  mDataToBind.clear();
  mDataToBind.add(mRenderer.renderFromModel(mAPIData.match,MatchRenderer.RENDER_MATCH_INFO));
  mMatchTitle=mAPIData.match.getTitle();
  mMatchKey=mAPIData.match.getKey();
  JsonArray matchVideos=mAPIData.match.getVideos();
  for (int i=0; i < matchVideos.size(); i++) {
    JsonElement video=matchVideos.get(i);
    if (MediaType.fromString(video.getAsJsonObject().get(""String_Node_Str"").getAsString()) != MediaType.NONE) {
      Media media=mGson.fromJson(video,Media.class);
      mDataToBind.add(mMediaRenderer.renderFromModel(media,null));
    }
  }
  updateActionBarTitle(mAPIData.event.getEventShortName());
}",0.9716748768472906
33638,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  mQualMatches.clear();
  mQuarterMatches.clear();
  mSemiMatches.clear();
  mFinalMatches.clear();
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  int[] record={0,0,0};
  Match nextMatch=null;
  Match lastMatch=null;
  Event event=mDb.getEventsTable().get(mEventKey);
  if (event != null && event.isHappeningNow()) {
    Collections.sort(mAPIData,new MatchSortByDisplayOrderComparator());
  }
 else {
    Collections.sort(mAPIData,new MatchSortByPlayOrderComparator());
  }
  ListGroup currentGroup=mQualMatches;
  MatchType lastType=null;
  Match previousIteration=null;
  boolean lastMatchPlayed=false;
  if (mAPIData.size() > 0) {
    nextMatch=mAPIData.get(0);
  }
  for (int i=0; i < mAPIData.size(); i++) {
    Match match=mAPIData.get(i);
    MatchType currentType=match.getType();
    if (lastType != currentType) {
switch (match.getType()) {
case QUAL:
        currentGroup=mQualMatches;
      break;
case QUARTER:
    currentGroup=mQuarterMatches;
  break;
case SEMI:
currentGroup=mSemiMatches;
break;
case FINAL:
currentGroup=mFinalMatches;
break;
}
}
currentGroup.children.add(match);
if (lastMatchPlayed && !match.hasBeenPlayed()) {
lastMatch=previousIteration;
nextMatch=match;
}
if (mTeamKey != null) {
match.addToRecord(mTeamKey,record);
}
lastType=currentType;
previousIteration=match;
lastMatchPlayed=match.hasBeenPlayed();
}
if (lastMatch == null && !mAPIData.isEmpty()) {
Match last=mAPIData.get(mAPIData.size() - 1);
if (last.hasBeenPlayed()) {
lastMatch=last;
}
}
if (nextMatch != null && nextMatch.hasBeenPlayed()) {
nextMatch=null;
}
if (!mQualMatches.children.isEmpty()) {
mDataToBind.add(mQualMatches);
}
if (!mQuarterMatches.children.isEmpty()) {
mDataToBind.add(mQuarterMatches);
}
if (!mSemiMatches.children.isEmpty()) {
mDataToBind.add(mSemiMatches);
}
if (!mFinalMatches.children.isEmpty()) {
mDataToBind.add(mFinalMatches);
}
mEventBus.post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  mDataToBind.clear();
  mQualMatches.clear();
  mQuarterMatches.clear();
  mSemiMatches.clear();
  mFinalMatches.clear();
  int[] record={0,0,0};
  Match nextMatch=null;
  Match lastMatch=null;
  Event event=mDb.getEventsTable().get(mEventKey);
  if (event != null && event.isHappeningNow()) {
    Collections.sort(mAPIData,new MatchSortByDisplayOrderComparator());
  }
 else {
    Collections.sort(mAPIData,new MatchSortByPlayOrderComparator());
  }
  ListGroup currentGroup=mQualMatches;
  MatchType lastType=null;
  Match previousIteration=null;
  boolean lastMatchPlayed=false;
  if (mAPIData.size() > 0) {
    nextMatch=mAPIData.get(0);
  }
  for (int i=0; i < mAPIData.size(); i++) {
    Match match=mAPIData.get(i);
    MatchType currentType=match.getType();
    if (lastType != currentType) {
switch (match.getType()) {
case QUAL:
        currentGroup=mQualMatches;
      break;
case QUARTER:
    currentGroup=mQuarterMatches;
  break;
case SEMI:
currentGroup=mSemiMatches;
break;
case FINAL:
currentGroup=mFinalMatches;
break;
}
}
currentGroup.children.add(match);
if (lastMatchPlayed && !match.hasBeenPlayed()) {
lastMatch=previousIteration;
nextMatch=match;
}
if (mTeamKey != null) {
match.addToRecord(mTeamKey,record);
}
lastType=currentType;
previousIteration=match;
lastMatchPlayed=match.hasBeenPlayed();
}
if (lastMatch == null && !mAPIData.isEmpty()) {
Match last=mAPIData.get(mAPIData.size() - 1);
if (last.hasBeenPlayed()) {
lastMatch=last;
}
}
if (nextMatch != null && nextMatch.hasBeenPlayed()) {
nextMatch=null;
}
if (!mQualMatches.children.isEmpty()) {
mDataToBind.add(mQualMatches);
}
if (!mQuarterMatches.children.isEmpty()) {
mDataToBind.add(mQuarterMatches);
}
if (!mSemiMatches.children.isEmpty()) {
mDataToBind.add(mSemiMatches);
}
if (!mFinalMatches.children.isEmpty()) {
mDataToBind.add(mFinalMatches);
}
mEventBus.post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
}",0.93994140625
33639,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  mCdPhotos.clear();
  mYtVideos.clear();
  if (mAPIData == null) {
    return;
  }
  for (int i=0; i < mAPIData.size(); i++) {
    Media media=mAPIData.get(i);
switch (media.getMediaType()) {
case CD_PHOTO_THREAD:
      mCdPhotos.children.add(media);
    break;
case YOUTUBE:
  mYtVideos.children.add(media);
break;
}
}
if (!mCdPhotos.children.isEmpty()) {
mDataToBind.add(mCdPhotos);
}
if (!mYtVideos.children.isEmpty()) {
mDataToBind.add(mYtVideos);
}
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  mCdPhotos.clear();
  mYtVideos.clear();
  for (int i=0; i < mAPIData.size(); i++) {
    Media media=mAPIData.get(i);
switch (media.getMediaType()) {
case CD_PHOTO_THREAD:
      mCdPhotos.children.add(media);
    break;
case YOUTUBE:
  mYtVideos.children.add(media);
break;
}
}
if (!mCdPhotos.children.isEmpty()) {
mDataToBind.add(mCdPhotos);
}
if (!mYtVideos.children.isEmpty()) {
mDataToBind.add(mYtVideos);
}
}",0.8835125448028673
33640,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || !mAPIData.isJsonArray()) {
    return;
  }
  JsonArray rankingsData=mAPIData.getAsJsonArray();
  if (rankingsData.size() == 0)   return;
  JsonArray headerRow=rankingsData.get(0).getAsJsonArray();
  for (int i=1; i < rankingsData.size(); i++) {
    JsonArray row=rankingsData.get(i).getAsJsonArray();
    String teamKey=""String_Node_Str"" + row.get(1).getAsString();
    String rankingString;
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int j=2; j < row.size(); j++) {
      rankingElements.put(headerRow.get(j).getAsString(),row.get(j).getAsString());
    }
    String record=EventHelper.extractRankingString(rankingElements);
    if (record == null) {
      Set<String> keys=rankingElements.keySet();
      if (keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"")) {
        record=String.format(""String_Node_Str"",rankingElements.get(""String_Node_Str""),rankingElements.get(""String_Node_Str""),rankingElements.get(""String_Node_Str""));
        rankingElements.remove(""String_Node_Str"");
        rankingElements.remove(""String_Node_Str"");
        rankingElements.remove(""String_Node_Str"");
      }
    }
    if (record == null) {
      record=""String_Node_Str"";
    }
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
    Team team=mDb.getTeamsTable().get(teamKey);
    String nickname;
    if (team != null) {
      nickname=team.getNickname();
    }
 else {
      nickname=""String_Node_Str"" + teamKey.substring(3);
    }
    mDataToBind.add(new RankingListElement(teamKey,row.get(1).getAsString(),nickname,row.get(0).getAsInt(),record,rankingString));
  }
  mEventBus.post(new EventRankingsEvent(generateTopRanksString(rankingsData)));
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || !mAPIData.isJsonArray()) {
    return;
  }
  mDataToBind.clear();
  JsonArray rankingsData=mAPIData.getAsJsonArray();
  if (rankingsData.size() == 0)   return;
  JsonArray headerRow=rankingsData.get(0).getAsJsonArray();
  for (int i=1; i < rankingsData.size(); i++) {
    JsonArray row=rankingsData.get(i).getAsJsonArray();
    String teamKey=""String_Node_Str"" + row.get(1).getAsString();
    String rankingString;
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int j=2; j < row.size(); j++) {
      rankingElements.put(headerRow.get(j).getAsString(),row.get(j).getAsString());
    }
    String record=EventHelper.extractRankingString(rankingElements);
    if (record == null) {
      Set<String> keys=rankingElements.keySet();
      if (keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"")) {
        record=String.format(""String_Node_Str"",rankingElements.get(""String_Node_Str""),rankingElements.get(""String_Node_Str""),rankingElements.get(""String_Node_Str""));
        rankingElements.remove(""String_Node_Str"");
        rankingElements.remove(""String_Node_Str"");
        rankingElements.remove(""String_Node_Str"");
      }
    }
    if (record == null) {
      record=""String_Node_Str"";
    }
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
    Team team=mDb.getTeamsTable().get(teamKey);
    String nickname;
    if (team != null) {
      nickname=team.getNickname();
    }
 else {
      nickname=""String_Node_Str"" + teamKey.substring(3);
    }
    mDataToBind.add(new RankingListElement(teamKey,row.get(1).getAsString(),nickname,row.get(0).getAsInt(),record,rankingString));
  }
  mEventBus.post(new EventRankingsEvent(generateTopRanksString(rankingsData)));
}",0.9877464038359084
33641,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  for (int i=0; i < mAPIData.size(); i++) {
    StoredNotification notification=mAPIData.get(i);
    BaseNotification renderable=notification.getNotification(mWriter);
    if (renderable != null) {
      renderable.parseMessageData();
      mDataToBind.add(renderable);
    }
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || mAPIData.isEmpty()) {
    return;
  }
  mDataToBind.clear();
  for (int i=0; i < mAPIData.size(); i++) {
    StoredNotification notification=mAPIData.get(i);
    BaseNotification renderable=notification.getNotification(mWriter);
    if (renderable != null) {
      renderable.parseMessageData();
      mDataToBind.add(renderable);
    }
  }
}",0.9485458612975392
33642,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  JsonObject statsData=mAPIData.getAsJsonObject();
  if (!statsData.has(""String_Node_Str"") || !statsData.get(""String_Node_Str"").isJsonObject() || !statsData.has(""String_Node_Str"")|| !statsData.get(""String_Node_Str"").isJsonObject()|| !statsData.has(""String_Node_Str"")|| !statsData.get(""String_Node_Str"").isJsonObject()) {
    return;
  }
  JsonObject oprs=statsData.get(""String_Node_Str"").getAsJsonObject();
  JsonObject dprs=statsData.get(""String_Node_Str"").getAsJsonObject();
  JsonObject ccwms=statsData.get(""String_Node_Str"").getAsJsonObject();
  for (  Entry<String,JsonElement> stat : oprs.entrySet()) {
    String teamKey=""String_Node_Str"" + stat.getKey();
    Team team=mDb.getTeamsTable().get(teamKey);
    String teamName=team == null ? ""String_Node_Str"" + stat.getKey() : team.getNickname();
    double opr=stat.getValue().getAsDouble();
    double dpr=dprs.has(stat.getKey()) ? dprs.get(stat.getKey()).getAsDouble() : 0;
    double ccwm=ccwms.has(stat.getKey()) ? ccwms.get(stat.getKey()).getAsDouble() : 0;
    String displayString=mResources.getString(R.string.stats_format,Stat.displayFormat.format(opr),Stat.displayFormat.format(dpr),Stat.displayFormat.format(ccwm));
    mDataToBind.add(new StatsListElement(teamKey,stat.getKey(),teamName,displayString,opr,dpr,ccwm));
  }
  Collections.sort(mDataToBind,new StatListElementComparator(mStatToSortBy));
  mEventBus.post(new EventStatsEvent(getTopStatsString()));
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  mDataToBind.clear();
  JsonObject statsData=mAPIData.getAsJsonObject();
  if (!statsData.has(""String_Node_Str"") || !statsData.get(""String_Node_Str"").isJsonObject() || !statsData.has(""String_Node_Str"")|| !statsData.get(""String_Node_Str"").isJsonObject()|| !statsData.has(""String_Node_Str"")|| !statsData.get(""String_Node_Str"").isJsonObject()) {
    return;
  }
  JsonObject oprs=statsData.get(""String_Node_Str"").getAsJsonObject();
  JsonObject dprs=statsData.get(""String_Node_Str"").getAsJsonObject();
  JsonObject ccwms=statsData.get(""String_Node_Str"").getAsJsonObject();
  for (  Entry<String,JsonElement> stat : oprs.entrySet()) {
    String teamKey=""String_Node_Str"" + stat.getKey();
    Team team=mDb.getTeamsTable().get(teamKey);
    String teamName=team == null ? ""String_Node_Str"" + stat.getKey() : team.getNickname();
    double opr=stat.getValue().getAsDouble();
    double dpr=dprs.has(stat.getKey()) ? dprs.get(stat.getKey()).getAsDouble() : 0;
    double ccwm=ccwms.has(stat.getKey()) ? ccwms.get(stat.getKey()).getAsDouble() : 0;
    String displayString=mResources.getString(R.string.stats_format,Stat.displayFormat.format(opr),Stat.displayFormat.format(dpr),Stat.displayFormat.format(ccwm));
    mDataToBind.add(new StatsListElement(teamKey,stat.getKey(),teamName,displayString,opr,dpr,ccwm));
  }
  Collections.sort(mDataToBind,new StatListElementComparator(mStatToSortBy));
  mEventBus.post(new EventStatsEvent(getTopStatsString()));
}",0.985625
33643,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  Collections.sort(mAPIData,mComparator);
  int lastModel=-1;
  for (int i=0; i < mAPIData.size(); i++) {
    Subscription subscription=mAPIData.get(i);
    ListItem item=mRenderer.renderFromKey(subscription.getModelKey(),subscription.getModelType(),null);
    if (item != null) {
      if (lastModel != subscription.getModelEnum()) {
        mDataToBind.add(new EventTypeHeader(subscription.getModelType().getTitle()));
      }
      mDataToBind.add(item);
    }
    lastModel=subscription.getModelEnum();
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  Collections.sort(mAPIData,mComparator);
  int lastModel=-1;
  for (int i=0; i < mAPIData.size(); i++) {
    Subscription subscription=mAPIData.get(i);
    ListItem item=mRenderer.renderFromKey(subscription.getModelKey(),subscription.getModelType(),null);
    if (item != null) {
      if (lastModel != subscription.getModelEnum()) {
        mDataToBind.add(new EventTypeHeader(subscription.getModelType().getTitle()));
      }
      mDataToBind.add(item);
    }
    lastModel=subscription.getModelEnum();
  }
}",0.964939024390244
33644,"@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  Map<String,JsonObject> eventBreakdowns=Utilities.getMapForPlatform(String.class,JsonObject.class);
  JsonObject rawDistrictTeam=mGson.fromJson(mAPIData.getJson(),JsonObject.class);
  eventBreakdowns.put(mAPIData.getEvent1Key(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getEvent1Key()).getAsJsonObject());
  eventBreakdowns.put(mAPIData.getEvent2Key(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getEvent2Key()).getAsJsonObject());
  eventBreakdowns.put(mAPIData.getCmpKey(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getCmpKey()).getAsJsonObject());
  for (  Map.Entry<String,JsonObject> eventData : eventBreakdowns.entrySet()) {
    Event event=mDb.getEventsTable().get(eventData.getKey());
    ListGroup eventGroup=new ListGroup(event == null ? eventData.getKey() : event.getEventName());
    DistrictPointBreakdown breakdown=mGson.fromJson(eventData.getValue(),DistrictPointBreakdown.class);
    if (breakdown.getQualPoints() > -1) {
      eventGroup.children.add(breakdown.renderQualPoints(mResources));
    }
    if (breakdown.getElimPoints() > -1) {
      eventGroup.children.add(breakdown.renderElimPoints(mResources));
    }
    if (breakdown.getAlliancePoints() > -1) {
      eventGroup.children.add(breakdown.renderAlliancePoints(mResources));
    }
    if (breakdown.getAwardPoints() > -1) {
      eventGroup.children.add(breakdown.renderAwardPoints(mResources));
    }
    if (breakdown.getTotalPoints() > -1) {
      eventGroup.children.add(breakdown.renderTotalPoints(mResources));
    }
    mDataToBind.add(eventGroup);
  }
}","@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  Map<String,JsonObject> eventBreakdowns=Utilities.getMapForPlatform(String.class,JsonObject.class);
  JsonObject rawDistrictTeam=mGson.fromJson(mAPIData.getJson(),JsonObject.class);
  eventBreakdowns.put(mAPIData.getEvent1Key(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getEvent1Key()).getAsJsonObject());
  eventBreakdowns.put(mAPIData.getEvent2Key(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getEvent2Key()).getAsJsonObject());
  eventBreakdowns.put(mAPIData.getCmpKey(),rawDistrictTeam.get(""String_Node_Str"").getAsJsonObject().get(mAPIData.getCmpKey()).getAsJsonObject());
  for (  Map.Entry<String,JsonObject> eventData : eventBreakdowns.entrySet()) {
    Event event=mDb.getEventsTable().get(eventData.getKey());
    ListGroup eventGroup=new ListGroup(event == null ? eventData.getKey() : event.getEventName());
    DistrictPointBreakdown breakdown=mGson.fromJson(eventData.getValue(),DistrictPointBreakdown.class);
    if (breakdown.getQualPoints() > -1) {
      eventGroup.children.add(breakdown.renderQualPoints(mResources));
    }
    if (breakdown.getElimPoints() > -1) {
      eventGroup.children.add(breakdown.renderElimPoints(mResources));
    }
    if (breakdown.getAlliancePoints() > -1) {
      eventGroup.children.add(breakdown.renderAlliancePoints(mResources));
    }
    if (breakdown.getAwardPoints() > -1) {
      eventGroup.children.add(breakdown.renderAwardPoints(mResources));
    }
    if (breakdown.getTotalPoints() > -1) {
      eventGroup.children.add(breakdown.renderTotalPoints(mResources));
    }
    mDataToBind.add(eventGroup);
  }
}",0.9870786516853932
33645,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  EventsTable eventsTable=mDb.getEventsTable();
  mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.district_point_rank),mAPIData.getRank() + Utilities.getOrdinalFor(mAPIData.getRank())));
  Event event1=eventsTable.get(mAPIData.getEvent1Key());
  String event1Name=event1 != null ? event1.getEventShortName() : mAPIData.getEvent1Key();
  mDataToBind.add(new LabelValueDetailListItem(event1Name,String.format(mResources.getString(R.string.district_points_format),mAPIData.getEvent1Points()),EventTeamHelper.generateKey(mAPIData.getEvent1Key(),mAPIData.getTeamKey())));
  Event event2=eventsTable.get(mAPIData.getEvent2Key());
  String event2Name=event2 != null ? event2.getEventShortName() : mAPIData.getEvent2Key();
  mDataToBind.add(new LabelValueDetailListItem(event2Name,String.format(mResources.getString(R.string.district_points_format),mAPIData.getEvent2Points()),EventTeamHelper.generateKey(mAPIData.getEvent2Key(),mAPIData.getTeamKey())));
  Event districtCmp=eventsTable.get(mAPIData.getCmpKey());
  String cmpName=districtCmp != null ? districtCmp.getEventShortName() : mAPIData.getCmpKey();
  mDataToBind.add(new LabelValueDetailListItem(cmpName,String.format(mResources.getString(R.string.district_points_format),mAPIData.getCmpPoints()),EventTeamHelper.generateKey(mAPIData.getCmpKey(),mAPIData.getTeamKey())));
  mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.total_district_points),String.format(mResources.getString(R.string.district_points_format),mAPIData.getTotalPoints())));
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",mDistrictKey.substring(0,4),mDistrictKey.substring(4).toUpperCase());
  mEventBus.post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  EventsTable eventsTable=mDb.getEventsTable();
  mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.district_point_rank),mAPIData.getRank() + Utilities.getOrdinalFor(mAPIData.getRank())));
  Event event1=eventsTable.get(mAPIData.getEvent1Key());
  String event1Name=event1 != null ? event1.getEventShortName() : mAPIData.getEvent1Key();
  mDataToBind.add(new LabelValueDetailListItem(event1Name,String.format(mResources.getString(R.string.district_points_format),mAPIData.getEvent1Points()),EventTeamHelper.generateKey(mAPIData.getEvent1Key(),mAPIData.getTeamKey())));
  Event event2=eventsTable.get(mAPIData.getEvent2Key());
  String event2Name=event2 != null ? event2.getEventShortName() : mAPIData.getEvent2Key();
  mDataToBind.add(new LabelValueDetailListItem(event2Name,String.format(mResources.getString(R.string.district_points_format),mAPIData.getEvent2Points()),EventTeamHelper.generateKey(mAPIData.getEvent2Key(),mAPIData.getTeamKey())));
  Event districtCmp=eventsTable.get(mAPIData.getCmpKey());
  String cmpName=districtCmp != null ? districtCmp.getEventShortName() : mAPIData.getCmpKey();
  mDataToBind.add(new LabelValueDetailListItem(cmpName,String.format(mResources.getString(R.string.district_points_format),mAPIData.getCmpPoints()),EventTeamHelper.generateKey(mAPIData.getCmpKey(),mAPIData.getTeamKey())));
  mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.total_district_points),String.format(mResources.getString(R.string.district_points_format),mAPIData.getTotalPoints())));
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",mDistrictKey.substring(0,4),mDistrictKey.substring(4).toUpperCase());
  mEventBus.post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
}",0.973026973026973
33646,"@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (!mIsMatchListLoaded || mAPIData == null || mAPIData.event == null || mAPIData.teamAtEventRank == null) {
    return;
  }
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=0;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else   if (rank > 0) {
    mDataToBind.add(rankBreakdownItem);
  }
  if (mDataToBind.size() > 0) {
    mDataToBind.add(new EmptyListElement(""String_Node_Str""));
  }
}","@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  if (!mIsMatchListLoaded || mAPIData == null || mAPIData.event == null || mAPIData.teamAtEventRank == null) {
    return;
  }
  mDataToBind.clear();
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=0;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else   if (rank > 0) {
    mDataToBind.add(rankBreakdownItem);
  }
  if (mDataToBind.size() > 0) {
    mDataToBind.add(new EmptyListElement(""String_Node_Str""));
  }
}",0.9945665012993148
33647,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind=new TeamInfoBinder.Model();
  if (mAPIData == null) {
    return;
  }
  mDataToBind.teamKey=mAPIData.getKey();
  mDataToBind.fullName=mAPIData.getFullName();
  mDataToBind.nickname=mAPIData.getNickname();
  mDataToBind.teamNumber=mAPIData.getTeamNumber();
  mDataToBind.location=mAPIData.getLocation();
  if (mAPIData.getParams().containsKey(TeamsTable.WEBSITE)) {
    mDataToBind.website=mAPIData.getWebsite();
  }
 else {
    mDataToBind.website=""String_Node_Str"";
  }
  if (mAPIData.getParams().containsKey(TeamsTable.MOTTO)) {
    mDataToBind.motto=mAPIData.getMotto();
  }
 else {
    mDataToBind.motto=""String_Node_Str"";
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind=new TeamInfoBinder.Model();
  mDataToBind.teamKey=mAPIData.getKey();
  mDataToBind.fullName=mAPIData.getFullName();
  mDataToBind.nickname=mAPIData.getNickname();
  mDataToBind.teamNumber=mAPIData.getTeamNumber();
  mDataToBind.location=mAPIData.getLocation();
  if (mAPIData.getParams().containsKey(TeamsTable.WEBSITE)) {
    mDataToBind.website=mAPIData.getWebsite();
  }
 else {
    mDataToBind.website=""String_Node_Str"";
  }
  if (mAPIData.getParams().containsKey(TeamsTable.MOTTO)) {
    mDataToBind.motto=mAPIData.getMotto();
  }
 else {
    mDataToBind.motto=""String_Node_Str"";
  }
}",0.9420689655172414
33648,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    Team team=mAPIData.get(i);
    if (team == null) {
      continue;
    }
    ListItem item=mRenderer.renderFromModel(team,mRenderMode);
    if (item == null) {
      continue;
    }
    mDataToBind.add(item);
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    Team team=mAPIData.get(i);
    if (team == null) {
      continue;
    }
    ListItem item=mRenderer.renderFromModel(team,mRenderMode);
    if (item == null) {
      continue;
    }
    mDataToBind.add(item);
  }
}",0.9486607142857144
33649,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  JsonObject statsData=mAPIData.getAsJsonObject();
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.opr_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.dpr_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.ccwm_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null || !mAPIData.isJsonObject()) {
    return;
  }
  mDataToBind.clear();
  JsonObject statsData=mAPIData.getAsJsonObject();
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.opr_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.dpr_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
  if (statsData.has(""String_Node_Str"")) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.ccwm_no_colon),Stat.displayFormat.format(statsData.get(""String_Node_Str"").getAsDouble())));
  }
}",0.9730994152046784
33650,"@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (mAPIData == null) {
    return;
  }
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    mDataToBind.addAll(mRenderer.renderWebcasts(mAPIData.get(i)));
  }
}","@Override public void parseData() throws BasicModel.FieldNotDefinedException {
  if (mAPIData == null) {
    return;
  }
  mDataToBind.clear();
  Collections.sort(mAPIData,mComparator);
  for (int i=0; i < mAPIData.size(); i++) {
    mDataToBind.addAll(mRenderer.renderWebcasts(mAPIData.get(i)));
  }
}",0.9238410596026492
33651,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  resetActionBar();
switch (mCurrentSelectedNavigationItemId) {
case R.id.nav_item_events:
    setupActionBarForEvents();
  break;
case R.id.nav_item_districts:
setupActionBarForDistricts();
break;
case R.id.nav_item_teams:
getSupportActionBar().setTitle(""String_Node_Str"");
mToolbar.setContentInsetsAbsolute(Utilities.getPixelsFromDp(this,72),0);
break;
case R.id.nav_item_my_tba:
getSupportActionBar().setTitle(""String_Node_Str"");
mToolbar.setContentInsetsAbsolute(Utilities.getPixelsFromDp(this,72),0);
break;
}
return super.onPrepareOptionsMenu(menu);
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  resetActionBar();
switch (mCurrentSelectedNavigationItemId) {
case R.id.nav_item_events:
    setupActionBarForEvents();
  mToolbar.setContentInsetsAbsolute(0,0);
break;
case R.id.nav_item_districts:
setupActionBarForDistricts();
mToolbar.setContentInsetsAbsolute(0,0);
break;
case R.id.nav_item_teams:
getSupportActionBar().setTitle(""String_Node_Str"");
mToolbar.setContentInsetsAbsolute(Utilities.getPixelsFromDp(this,72),0);
break;
case R.id.nav_item_my_tba:
getSupportActionBar().setTitle(""String_Node_Str"");
mToolbar.setContentInsetsAbsolute(Utilities.getPixelsFromDp(this,72),0);
break;
}
return super.onPrepareOptionsMenu(menu);
}",0.9389312977099236
33652,"@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (!mIsMatchListLoaded || mAPIData == null || mAPIData.event == null || mAPIData.teamAtEventRank == null) {
    return;
  }
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=0;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else {
    mDataToBind.add(rankBreakdownItem);
  }
  mDataToBind.add(new EmptyListElement(""String_Node_Str""));
}","@Override public synchronized void parseData() throws BasicModel.FieldNotDefinedException {
  mDataToBind.clear();
  if (!mIsMatchListLoaded || mAPIData == null || mAPIData.event == null || mAPIData.teamAtEventRank == null) {
    return;
  }
  Match nextMatch=null, lastMatch=null;
  Collections.sort(mMatches,new MatchSortByPlayOrderComparator());
  int[] record=MatchHelper.getRecordForTeam(mMatches,mTeamKey);
  String recordString=String.format(""String_Node_Str"",record[0],record[1],record[2]);
  Event event=mAPIData.event;
  int year=event.getEventYear();
  boolean activeEvent=event.isHappeningNow();
  String actionBarTitle=String.format(mResources.getString(R.string.team_actionbar_title),mTeamKey.substring(3));
  String actionBarSubtitle=String.format(""String_Node_Str"",year,event.getEventShortName());
  EventBus.getDefault().post(new ActionBarTitleEvent(actionBarTitle,actionBarSubtitle));
  if (activeEvent) {
    nextMatch=MatchHelper.getNextMatchPlayed(mMatches);
    lastMatch=MatchHelper.getLastMatchPlayed(mMatches);
  }
  JsonArray alliances=event.getAlliances();
  int allianceNumber=0, alliancePick=0;
  if (alliances == null || alliances.size() == 0) {
    allianceNumber=MatchHelper.getAllianceForTeam(mMatches,mTeamKey);
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(mTeamKey)) {
          allianceNumber=i + 1;
          alliancePick=j;
        }
      }
    }
  }
  JsonArray rankData=mAPIData.teamAtEventRank;
  int rank=0;
  String rankingString=""String_Node_Str"";
  if (rankData.size() > 0) {
    rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
    JsonArray headerRow=rankData.get(0).getAsJsonArray();
    JsonArray teamRank=rankData.get(1).getAsJsonArray();
    CaseInsensitiveMap<String> rankingElements=new CaseInsensitiveMap<>();
    for (int i=2; i < teamRank.size(); i++) {
      rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
    }
    EventHelper.extractRankingString(rankingElements);
    rankingString=EventHelper.createRankingBreakdown(rankingElements);
  }
  if (rank > 0) {
    mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
  }
  LabelValueListItem rankBreakdownItem=new LabelValueListItem(""String_Node_Str"",rankingString);
  MatchHelper.EventStatus status;
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,mMatches,mTeamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_alliance),EventHelper.generateAllianceSummary(mResources,allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.team_at_event_status),status.getDescriptionString(mResources)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      mDataToBind.add(rankBreakdownItem);
    }
    if (lastMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_last_match),mMatchRenderer.renderFromModel(lastMatch,MatchRenderer.RENDER_DEFAULT)));
    }
    if (nextMatch != null) {
      mDataToBind.add(new LabelValueListItem(mResources.getString(R.string.title_next_match),mMatchRenderer.renderFromModel(nextMatch,MatchRenderer.RENDER_DEFAULT)));
    }
  }
 else   if (rank > 0) {
    mDataToBind.add(rankBreakdownItem);
  }
  if (mDataToBind.size() > 0) {
    mDataToBind.add(new EmptyListElement(""String_Node_Str""));
  }
}",0.99358059914408
33653,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.w(Constants.LOG_TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  int upgradeTo=oldVersion + 1;
  while (upgradeTo <= newVersion) {
switch (upgradeTo) {
case 14:
      db.execSQL(CREATE_DISTRICTS);
    db.execSQL(CREATE_DISTRICTTEAMS);
  db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.DISTRICT_POINTS+ ""String_Node_Str"");
break;
case 15:
db.execSQL(CREATE_FAVORITES);
db.execSQL(CREATE_SUBSCRIPTIONS);
break;
case 16:
Cursor sub=db.rawQuery(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str"",null);
if (sub.getColumnIndex(SubscriptionsTable.NOTIFICATION_SETTINGS) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.NOTIFICATION_SETTINGS+ ""String_Node_Str"");
}
if (sub.getColumnIndex(SubscriptionsTable.MODEL_ENUM) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.MODEL_ENUM+ ""String_Node_Str"");
}
sub.close();
Cursor fav=db.rawQuery(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str"",null);
if (fav.getColumnIndex(FavoritesTable.MODEL_ENUM) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str""+ FavoritesTable.MODEL_ENUM+ ""String_Node_Str"");
}
fav.close();
break;
case 17:
Cursor dist=db.rawQuery(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str"",null);
if (dist.getColumnIndex(DistrictsTable.NAME) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str""+ DistrictsTable.NAME+ ""String_Node_Str"");
}
dist.close();
break;
case 18:
Cursor event=db.rawQuery(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str"",null);
if (event.getColumnIndex(EventsTable.SHORTNAME) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.SHORTNAME+ ""String_Node_Str"");
}
event.close();
break;
case 20:
db.execSQL(CREATE_NOTIFICATIONS);
break;
case 23:
case 24:
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_TEAMS);
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_EVENTS);
onCreate(db);
break;
case 25:
db.execSQL(""String_Node_Str"" + TABLE_API);
break;
case 28:
db.beginTransaction();
try {
db.execSQL(""String_Node_Str"" + TABLE_NOTIFICATIONS);
db.execSQL(CREATE_NOTIFICATIONS);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 29:
db.beginTransaction();
Cursor motto=null;
try {
motto=db.rawQuery(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str"",null);
if (motto.getColumnIndex(TeamsTable.MOTTO) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str""+ TeamsTable.MOTTO+ ""String_Node_Str"");
}
}
  finally {
motto.close();
break;
}
}
upgradeTo++;
}
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.w(Constants.LOG_TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  int upgradeTo=oldVersion + 1;
  while (upgradeTo <= newVersion) {
switch (upgradeTo) {
case 14:
      db.execSQL(CREATE_DISTRICTS);
    db.execSQL(CREATE_DISTRICTTEAMS);
  db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.DISTRICT_POINTS+ ""String_Node_Str"");
break;
case 15:
db.execSQL(CREATE_FAVORITES);
db.execSQL(CREATE_SUBSCRIPTIONS);
break;
case 16:
Cursor sub=db.rawQuery(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str"",null);
if (sub.getColumnIndex(SubscriptionsTable.NOTIFICATION_SETTINGS) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.NOTIFICATION_SETTINGS+ ""String_Node_Str"");
}
if (sub.getColumnIndex(SubscriptionsTable.MODEL_ENUM) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_SUBSCRIPTIONS + ""String_Node_Str""+ SubscriptionsTable.MODEL_ENUM+ ""String_Node_Str"");
}
sub.close();
Cursor fav=db.rawQuery(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str"",null);
if (fav.getColumnIndex(FavoritesTable.MODEL_ENUM) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_FAVORITES + ""String_Node_Str""+ FavoritesTable.MODEL_ENUM+ ""String_Node_Str"");
}
fav.close();
break;
case 17:
Cursor dist=db.rawQuery(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str"",null);
if (dist.getColumnIndex(DistrictsTable.NAME) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_DISTRICTS + ""String_Node_Str""+ DistrictsTable.NAME+ ""String_Node_Str"");
}
dist.close();
break;
case 18:
Cursor event=db.rawQuery(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str"",null);
if (event.getColumnIndex(EventsTable.SHORTNAME) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_EVENTS + ""String_Node_Str""+ EventsTable.SHORTNAME+ ""String_Node_Str"");
}
event.close();
break;
case 20:
db.execSQL(CREATE_NOTIFICATIONS);
break;
case 23:
case 24:
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_TEAMS);
db.execSQL(""String_Node_Str"" + TABLE_SEARCH_EVENTS);
onCreate(db);
break;
case 25:
db.execSQL(""String_Node_Str"" + TABLE_API);
break;
case 28:
db.beginTransaction();
try {
db.execSQL(""String_Node_Str"" + TABLE_NOTIFICATIONS);
db.execSQL(CREATE_NOTIFICATIONS);
db.setTransactionSuccessful();
}
  finally {
db.endTransaction();
}
break;
case 29:
db.beginTransaction();
Cursor motto=null;
try {
motto=db.rawQuery(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str"",null);
if (motto.getColumnIndex(TeamsTable.MOTTO) == -1) {
db.execSQL(""String_Node_Str"" + TABLE_TEAMS + ""String_Node_Str""+ TeamsTable.MOTTO+ ""String_Node_Str"");
}
db.setTransactionSuccessful();
}
  finally {
motto.close();
db.endTransaction();
break;
}
}
upgradeTo++;
}
}",0.9904761904761904
33654,"public static Retrofit getRetrofit(Gson gson,OkHttpClient okHttpClient,SharedPreferences prefs){
  String baseUrl=Utilities.isDebuggable() ? prefs.getString(APIv2.DEV_TBA_PREF_KEY,APIv2.TBA_URL) : APIv2.TBA_URL;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + baseUrl);
  return new Retrofit.Builder().baseUrl(baseUrl).client(okHttpClient).addConverterFactory(LenientGsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();
}","public static Retrofit getRetrofit(Gson gson,OkHttpClient okHttpClient,SharedPreferences prefs){
  String baseUrl=Utilities.isDebuggable() ? prefs.getString(APIv2.DEV_TBA_PREF_KEY,APIv2.TBA_URL) : APIv2.TBA_URL;
  baseUrl=baseUrl.isEmpty() ? APIv2.TBA_URL : baseUrl;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + baseUrl);
  return new Retrofit.Builder().baseUrl(baseUrl).client(okHttpClient).addConverterFactory(LenientGsonConverterFactory.create(gson)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();
}",0.9443882709807888
33655,"@WorkerThread private void updateTbaStatus(){
  Response<APIStatus> response=mRetrofitAPI.status().toBlocking().first();
  if (!response.isSuccess()) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + response.code() + ""String_Node_Str""+ response.message());
    return;
  }
  APIStatus status=response.body();
  mPrefs.edit().putString(TBAStatusController.STATUS_PREF_KEY,status.getJsonBlob()).apply();
  mEventBus.post(status);
  if (BuildConfig.VERSION_CODE < status.getMinAppVersion()) {
    startActivity(new Intent(this,UpdateRequiredActivity.class));
  }
}","@WorkerThread private void updateTbaStatus(){
  Response<APIStatus> response=null;
  try {
    response=mRetrofitAPI.status().toBlocking().first();
  }
 catch (  Exception ex) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    ex.printStackTrace();
    return;
  }
  if (!response.isSuccess()) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + response.code() + ""String_Node_Str""+ response.message());
    return;
  }
  APIStatus status=response.body();
  mPrefs.edit().putString(TBAStatusController.STATUS_PREF_KEY,status.getJsonBlob()).apply();
  mEventBus.post(status);
  if (BuildConfig.VERSION_CODE < status.getMinAppVersion()) {
    startActivity(new Intent(this,UpdateRequiredActivity.class));
  }
}",0.8843430369787569
33656,"@Override public void setFragmentVisibleAtPosition(int position,boolean visible){
  Fragment f=mFragments.get(getItemId(position)).get();
  if (f != null && f instanceof DatafeedFragment) {
    ((DatafeedFragment)f).setIsCurrentlyVisible(visible);
  }
}","@Override public void setFragmentVisibleAtPosition(int position,boolean visible){
  WeakReference<Fragment> ref=mFragments.get(getItemId(position));
  if (ref == null) {
    return;
  }
  Fragment f=ref.get();
  if (f != null && f instanceof DatafeedFragment) {
    ((DatafeedFragment)f).setIsCurrentlyVisible(visible);
  }
}",0.8442906574394463
33657,"@Override public boolean isFragmentAtPositionBound(int position){
  Fragment f=mFragments.get(getItemId(position)).get();
  return f != null && f instanceof DatafeedFragment && ((DatafeedFragment)f).isBound();
}","@Override public boolean isFragmentAtPositionBound(int position){
  WeakReference<Fragment> ref=mFragments.get(getItemId(position));
  if (ref == null) {
    return false;
  }
  Fragment f=mFragments.get(getItemId(position)).get();
  return f != null && f instanceof DatafeedFragment && ((DatafeedFragment)f).isBound();
}",0.793233082706767
33658,"@Override public void bindFragmentAtPosition(int position){
  Fragment f=mFragments.get(getItemId(position)).get();
  if (f != null && f instanceof DatafeedFragment) {
    ((DatafeedFragment)f).bind();
  }
}","@Override public void bindFragmentAtPosition(int position){
  WeakReference<Fragment> ref=mFragments.get(getItemId(position));
  if (ref == null) {
    return;
  }
  Fragment f=mFragments.get(getItemId(position)).get();
  if (f != null && f instanceof DatafeedFragment) {
    ((DatafeedFragment)f).bind();
  }
}",0.7992277992277992
33659,"private void loadMyTbaData(){
  String currentUser=AccountHelper.getSelectedAccount(this);
  List<Favorite> favoriteModels=new ArrayList<>();
  List<Subscription> subscriptionModels=new ArrayList<>();
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    return;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  TbaMobile service=AccountHelper.getAuthedTbaMobile(this);
  if (service == null) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    Handler mainHandler=new Handler(this.getMainLooper());
    mainHandler.post(() -> Toast.makeText(MyTbaUpdateService.this,getString(R.string.mytba_error_no_account),Toast.LENGTH_SHORT).show());
    return;
  }
  ModelsMobileApiMessagesFavoriteCollection favoriteCollection;
  try {
    favoriteCollection=service.favorites().list().execute();
  }
 catch (  IOException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  if (favoriteCollection == null || favoriteCollection.getFavorites() == null) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return;
  }
  FavoritesTable favorites=mDb.getFavoritesTable();
  favorites.recreate(currentUser);
  for (int i=0; i < favoriteCollection.size(); i++) {
    ModelsMobileApiMessagesFavoriteMessage f=favoriteCollection.getFavorites().get(i);
    favoriteModels.add(new Favorite(currentUser,f.getModelKey(),f.getModelType().intValue()));
  }
  favorites.add(favoriteModels);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + favoriteModels.size() + ""String_Node_Str"");
  ModelsMobileApiMessagesSubscriptionCollection subscriptionCollection;
  try {
    subscriptionCollection=service.subscriptions().list().execute();
  }
 catch (  IOException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  if (subscriptionCollection == null || subscriptionCollection.getSubscriptions() == null) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return;
  }
  SubscriptionsTable subscriptions=mDb.getSubscriptionsTable();
  subscriptions.recreate(currentUser);
  for (  ModelsMobileApiMessagesSubscriptionMessage s : subscriptionCollection.getSubscriptions()) {
    subscriptionModels.add(new Subscription(currentUser,s.getModelKey(),s.getNotifications(),s.getModelType().intValue()));
  }
  subscriptions.add(subscriptionModels);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + subscriptionModels.size() + ""String_Node_Str"");
}","private void loadMyTbaData(){
  String currentUser=AccountHelper.getSelectedAccount(this);
  List<Favorite> favoriteModels=new ArrayList<>();
  List<Subscription> subscriptionModels=new ArrayList<>();
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    return;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  TbaMobile service=AccountHelper.getAuthedTbaMobile(this);
  if (service == null) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    Handler mainHandler=new Handler(this.getMainLooper());
    mainHandler.post(() -> Toast.makeText(MyTbaUpdateService.this,getString(R.string.mytba_error_no_account),Toast.LENGTH_SHORT).show());
    return;
  }
  ModelsMobileApiMessagesFavoriteCollection favoriteCollection;
  try {
    favoriteCollection=service.favorites().list().execute();
  }
 catch (  IOException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  if (favoriteCollection == null || favoriteCollection.getFavorites() == null) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return;
  }
  FavoritesTable favorites=mDb.getFavoritesTable();
  favorites.recreate(currentUser);
  List<ModelsMobileApiMessagesFavoriteMessage> favoriteList=favoriteCollection.getFavorites();
  for (int i=0; i < favoriteList.size(); i++) {
    ModelsMobileApiMessagesFavoriteMessage f=favoriteList.get(i);
    favoriteModels.add(new Favorite(currentUser,f.getModelKey(),f.getModelType().intValue()));
  }
  favorites.add(favoriteModels);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + favoriteModels.size() + ""String_Node_Str"");
  ModelsMobileApiMessagesSubscriptionCollection subscriptionCollection;
  try {
    subscriptionCollection=service.subscriptions().list().execute();
  }
 catch (  IOException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
    return;
  }
  if (subscriptionCollection == null || subscriptionCollection.getSubscriptions() == null) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return;
  }
  SubscriptionsTable subscriptions=mDb.getSubscriptionsTable();
  subscriptions.recreate(currentUser);
  List<ModelsMobileApiMessagesSubscriptionMessage> subscriptionList=subscriptionCollection.getSubscriptions();
  for (int i=0; i < subscriptionList.size(); i++) {
    ModelsMobileApiMessagesSubscriptionMessage s=subscriptionList.get(i);
    subscriptionModels.add(new Subscription(currentUser,s.getModelKey(),s.getNotifications(),s.getModelType().intValue()));
  }
  subscriptions.add(subscriptionModels);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + subscriptionModels.size() + ""String_Node_Str"");
}",0.9266932270916336
33660,"/** 
 * Finds the index in the adapter of the given week. If the week is skipped over, return the next week (assumes sorted adapter items)
 * @return Adapter index containing the week, -1 if not found
 */
private int getIndexForWeek(int week){
  Preconditions.checkState(mViewPager.getAdapter() instanceof EventsByWeekFragmentPagerAdapter,""String_Node_Str"");
  List<EventWeekTab> tabs=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getTabs();
  for (int i=0; i < tabs.size(); i++) {
    if (tabs.get(i).getWeek() >= week) {
      return i;
    }
  }
  return -1;
}","/** 
 * Finds the index in the adapter of the given week. If the week is skipped over, return the next week (assumes sorted adapter items)
 * @return Adapter index containing the week, -1 if not found
 */
private int getIndexForWeek(int week){
  Preconditions.checkState(mViewPager.getAdapter() instanceof EventsByWeekFragmentPagerAdapter,""String_Node_Str"");
  List<EventWeekTab> tabs=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getTabs();
  for (int i=0; i < tabs.size(); i++) {
    if (tabs.get(i).getWeek() > week) {
      return i - 1;
    }
  }
  return -1;
}",0.9956784788245462
33661,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null && mFragment.getView() != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View content=view.findViewById(R.id.event_content);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      content.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      content.setVisibility(View.VISIBLE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      View eventVenueContainer=view.findViewById(R.id.event_venue_container);
      eventVenueContainer.setFocusable(true);
      eventVenueContainer.setClickable(true);
      if (!venueString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        eventVenueContainer.setTag(null);
        eventVenueContainer.setFocusable(false);
        eventVenueContainer.setClickable(false);
      }
      if (event.getWebsite().isEmpty()) {
        view.findViewById(R.id.event_website_container).setTag(""String_Node_Str"" + nameString);
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.find_event_on_google);
      }
 else {
        view.findViewById(R.id.event_website_container).setTag(event.getWebsite());
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.view_event_website);
      }
      view.findViewById(R.id.event_twitter_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_twitter_title)).setText(activity.getResources().getString(R.string.view_event_twitter,eventKey));
      view.findViewById(R.id.event_youtube_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_youtube_title)).setText(activity.getResources().getString(R.string.view_event_youtube,eventKey));
      view.findViewById(R.id.event_cd_container).setTag(""String_Node_Str"" + eventKey);
      EventBus.getDefault().post(new EventInfoLoadedEvent(event));
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (activity != null && mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",eventKey);
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null && mFragment.getView() != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View content=view.findViewById(R.id.event_content);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      content.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      content.setVisibility(View.VISIBLE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      View eventVenueContainer=view.findViewById(R.id.event_venue_container);
      eventVenueContainer.setFocusable(true);
      eventVenueContainer.setClickable(true);
      if (!venueString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(venueString));
      }
 else       if (!locationString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + Uri.encode(locationString));
      }
 else {
        eventVenueContainer.setTag(null);
        eventVenueContainer.setFocusable(false);
        eventVenueContainer.setClickable(false);
      }
      if (event.getWebsite().isEmpty()) {
        view.findViewById(R.id.event_website_container).setTag(""String_Node_Str"" + Uri.encode(nameString));
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.find_event_on_google);
      }
 else {
        view.findViewById(R.id.event_website_container).setTag(event.getWebsite());
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.view_event_website);
      }
      view.findViewById(R.id.event_twitter_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_twitter_title)).setText(activity.getResources().getString(R.string.view_event_twitter,eventKey));
      view.findViewById(R.id.event_youtube_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_youtube_title)).setText(activity.getResources().getString(R.string.view_event_youtube,eventKey));
      view.findViewById(R.id.event_cd_container).setTag(""String_Node_Str"" + eventKey);
      EventBus.getDefault().post(new EventInfoLoadedEvent(event));
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (activity != null && mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",eventKey);
  }
}",0.9787968441814596
33662,"@Override protected void onPreExecute(){
  super.onPreExecute();
  startTime=System.currentTimeMillis();
  showRanks=showStats=false;
  View view=mFragment.getView();
  if (view == null) {
    cancel(true);
    return;
  }
  eventName=(TextView)view.findViewById(R.id.event_name);
  eventDate=(TextView)view.findViewById(R.id.event_date);
  eventLoc=(TextView)view.findViewById(R.id.event_location);
  eventVenue=(TextView)view.findViewById(R.id.event_venue);
  topTeamsContainer=view.findViewById(R.id.event_top_teams_container);
  topOprsContainer=view.findViewById(R.id.event_top_oprs_container);
  topTeams=(TextView)view.findViewById(R.id.event_top_teams);
  topOprs=(TextView)view.findViewById(R.id.event_top_oprs);
}","@Override protected void onPreExecute(){
  super.onPreExecute();
  startTime=System.currentTimeMillis();
  showRanks=showStats=false;
  View view=mFragment.getView();
  if (view == null) {
    cancel(true);
    return;
  }
  eventName=(TextView)view.findViewById(R.id.event_name);
  eventDate=(TextView)view.findViewById(R.id.event_date);
  eventLoc=(TextView)view.findViewById(R.id.event_location);
  eventVenue=(TextView)view.findViewById(R.id.event_venue);
  topTeamsContainer=view.findViewById(R.id.top_teams_container);
  topOprsContainer=view.findViewById(R.id.top_oprs_container);
  topTeams=(TextView)view.findViewById(R.id.top_teams);
  topOprs=(TextView)view.findViewById(R.id.top_oprs);
}",0.8917018284106891
33663,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null && mFragment.getView() != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View infoContainer=view.findViewById(R.id.event_info_container);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      infoContainer.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      View eventVenueContainer=view.findViewById(R.id.event_venue_container);
      eventVenueContainer.setFocusable(true);
      eventVenueContainer.setClickable(true);
      if (!venueString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        eventVenueContainer.setTag(null);
        eventVenueContainer.setFocusable(false);
        eventVenueContainer.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + nameString);
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + eventKey);
      infoContainer.setVisibility(View.VISIBLE);
      EventBus.getDefault().post(new EventInfoLoadedEvent(event));
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (activity != null && mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",eventKey);
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null && mFragment.getView() != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View content=view.findViewById(R.id.event_content);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      content.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      content.setVisibility(View.VISIBLE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      View eventVenueContainer=view.findViewById(R.id.event_venue_container);
      eventVenueContainer.setFocusable(true);
      eventVenueContainer.setClickable(true);
      if (!venueString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        eventVenueContainer.setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        eventVenueContainer.setTag(null);
        eventVenueContainer.setFocusable(false);
        eventVenueContainer.setClickable(false);
      }
      if (event.getWebsite().isEmpty()) {
        view.findViewById(R.id.event_website_container).setTag(""String_Node_Str"" + nameString);
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.find_event_on_google);
      }
 else {
        view.findViewById(R.id.event_website_container).setTag(event.getWebsite());
        ((TextView)view.findViewById(R.id.event_website_title)).setText(R.string.view_event_website);
      }
      view.findViewById(R.id.event_twitter_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_twitter_title)).setText(activity.getResources().getString(R.string.view_event_twitter,eventKey));
      view.findViewById(R.id.event_youtube_container).setTag(""String_Node_Str"" + eventKey);
      ((TextView)view.findViewById(R.id.event_youtube_title)).setText(activity.getResources().getString(R.string.view_event_youtube,eventKey));
      view.findViewById(R.id.event_cd_container).setTag(""String_Node_Str"" + eventKey);
      EventBus.getDefault().post(new EventInfoLoadedEvent(event));
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (activity != null && mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",eventKey);
  }
}",0.8547324017927762
33664,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View content=view.findViewById(R.id.team_content);
    if (code == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_team_info);
      noDataText.setVisibility(View.VISIBLE);
      content.setVisibility(View.GONE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      content.setVisibility(View.VISIBLE);
      TextView teamName=((TextView)view.findViewById(R.id.team_name));
      if (mTeamName.isEmpty()) {
        teamName.setText(""String_Node_Str"" + mTeamNumber);
      }
 else {
        teamName.setText(mTeamName);
      }
      View teamLocationContainer=view.findViewById(R.id.team_location_container);
      if (mLocation.isEmpty()) {
        teamLocationContainer.setVisibility(View.GONE);
      }
 else {
        ((TextView)view.findViewById(R.id.team_location)).setText(mLocation);
        view.findViewById(R.id.team_location_container).setTag(""String_Node_Str"" + mLocation.replace(""String_Node_Str"",""String_Node_Str""));
      }
      if (mTeamWebsite.isEmpty()) {
        view.findViewById(R.id.team_website_container).setTag(""String_Node_Str"" + mTeamKey);
        ((TextView)view.findViewById(R.id.team_website_title)).setText(R.string.find_team_on_google);
      }
 else {
        view.findViewById(R.id.team_website_container).setTag(mTeamWebsite);
        ((TextView)view.findViewById(R.id.team_website_title)).setText(R.string.view_team_website);
      }
      view.findViewById(R.id.team_twitter_container).setTag(""String_Node_Str"" + mTeamKey);
      ((TextView)view.findViewById(R.id.team_twitter_title)).setText(activity.getResources().getString(R.string.view_team_twitter,mTeamKey));
      view.findViewById(R.id.team_youtube_container).setTag(""String_Node_Str"" + mTeamKey);
      ((TextView)view.findViewById(R.id.team_youtube_title)).setText(activity.getResources().getString(R.string.view_team_youtube,mTeamKey));
      view.findViewById(R.id.team_cd_container).setTag(""String_Node_Str"" + mTeamKey);
      if (mFullName.isEmpty()) {
        view.findViewById(R.id.team_full_name_container).setVisibility(View.GONE);
      }
 else {
        SpannableString string=new SpannableString(""String_Node_Str"" + mFullName);
        string.setSpan(new TextAppearanceSpan(mFragment.getActivity(),R.style.InfoItemLabelStyle),0,3,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        ((TextView)view.findViewById(R.id.team_full_name)).setText(string);
      }
      view.findViewById(R.id.team_next_match_label).setVisibility(View.GONE);
      view.findViewById(R.id.team_next_match_details).setVisibility(View.GONE);
      if (code == APIResponse.CODE.OFFLINECACHE) {
        ((RefreshableHostActivity)mFragment.getActivity()).showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
      }
      view.findViewById(R.id.team_info_container).setVisibility(View.VISIBLE);
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateTeamInfo secondLoad=new PopulateTeamInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(mTeamKey);
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + mTeamKey + ""String_Node_Str"");
      if (activity != null && mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",mTeamKey);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View content=view.findViewById(R.id.team_content);
    if (code == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_team_info);
      noDataText.setVisibility(View.VISIBLE);
      content.setVisibility(View.GONE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      content.setVisibility(View.VISIBLE);
      TextView teamName=((TextView)view.findViewById(R.id.team_name));
      if (mTeamName.isEmpty()) {
        teamName.setText(""String_Node_Str"" + mTeamNumber);
      }
 else {
        teamName.setText(mTeamName);
      }
      View teamLocationContainer=view.findViewById(R.id.team_location_container);
      if (mLocation.isEmpty()) {
        teamLocationContainer.setVisibility(View.GONE);
      }
 else {
        ((TextView)view.findViewById(R.id.team_location)).setText(mLocation);
        view.findViewById(R.id.team_location_container).setTag(""String_Node_Str"" + mLocation.replace(""String_Node_Str"",""String_Node_Str""));
      }
      if (mTeamWebsite.isEmpty()) {
        view.findViewById(R.id.team_website_container).setTag(""String_Node_Str"" + mTeamKey);
        ((TextView)view.findViewById(R.id.team_website_title)).setText(R.string.find_team_on_google);
      }
 else {
        view.findViewById(R.id.team_website_container).setTag(mTeamWebsite);
        ((TextView)view.findViewById(R.id.team_website_title)).setText(R.string.view_team_website);
      }
      view.findViewById(R.id.team_twitter_container).setTag(""String_Node_Str"" + mTeamKey);
      ((TextView)view.findViewById(R.id.team_twitter_title)).setText(activity.getResources().getString(R.string.view_team_twitter,mTeamKey));
      view.findViewById(R.id.team_youtube_container).setTag(""String_Node_Str"" + mTeamKey);
      ((TextView)view.findViewById(R.id.team_youtube_title)).setText(activity.getResources().getString(R.string.view_team_youtube,mTeamKey));
      view.findViewById(R.id.team_cd_container).setTag(""String_Node_Str"" + mTeamKey);
      if (mFullName.isEmpty()) {
        view.findViewById(R.id.team_full_name_container).setVisibility(View.GONE);
      }
 else {
        SpannableString string=new SpannableString(""String_Node_Str"" + mFullName);
        string.setSpan(new TextAppearanceSpan(mFragment.getActivity(),R.style.InfoItemLabelStyle),0,3,Spannable.SPAN_INCLUSIVE_INCLUSIVE);
        ((TextView)view.findViewById(R.id.team_full_name)).setText(string);
      }
      view.findViewById(R.id.team_next_match_label).setVisibility(View.GONE);
      view.findViewById(R.id.team_next_match_details).setVisibility(View.GONE);
      if (code == APIResponse.CODE.OFFLINECACHE) {
        ((RefreshableHostActivity)mFragment.getActivity()).showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
      }
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateTeamInfo secondLoad=new PopulateTeamInfo(mFragment,requestParams);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(mTeamKey);
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + mTeamKey + ""String_Node_Str"");
      if (activity != null && mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete(mFragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",mTeamKey);
  }
}",0.989322881470469
33665,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    eventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshListener(this);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  mActivity=getActivity();
  if (mActivity instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)mActivity).registerRefreshListener(this);
  }
}",0.9312320916905444
33666,"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_RANKINGS);
    return;
  }
 else   if (id == R.id.event_top_oprs_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_STATS);
    return;
  }
 else   if (id == R.id.event_date_container) {
    if (event == null) {
      return;
    }
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    String uri=v.getTag().toString();
    AnalyticsHelper.sendSocialUpdate(getActivity(),uri,eventKey);
    PackageManager manager=getActivity().getPackageManager();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.top_teams_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_RANKINGS);
    return;
  }
 else   if (id == R.id.top_oprs_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_STATS);
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    String uri=v.getTag().toString();
    AnalyticsHelper.sendSocialUpdate(getActivity(),uri,mEventKey);
    PackageManager manager=getActivity().getPackageManager();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}",0.9359041167274622
33667,"@Override public void onDestroy(){
  super.onDestroy();
  ((RefreshableHostActivity)parent).unregisterRefreshListener(this);
}","@Override public void onDestroy(){
  super.onDestroy();
  ((RefreshableHostActivity)mActivity).unregisterRefreshListener(this);
}",0.9490196078431372
33668,"@Override public void onRefreshStop(){
  if (task != null) {
    task.cancel(false);
  }
}","@Override public void onRefreshStop(){
  if (mTask != null) {
    mTask.cancel(false);
  }
}",0.967032967032967
33669,"public void updateTask(PopulateEventInfo newTask){
  task=newTask;
}","public void updateTask(PopulateEventInfo newTask){
  mTask=newTask;
}",0.978102189781022
33670,"protected void showLastMatch(MatchListElement match){
  LinearLayout lastLayout=(LinearLayout)getView().findViewById(R.id.event_last_match_container);
  lastLayout.setVisibility(View.VISIBLE);
  if (lastLayout.getChildCount() > 1) {
    lastLayout.removeViewAt(1);
  }
  lastLayout.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}","protected void showLastMatch(MatchListElement match){
  ViewGroup lastMatchContainer=(ViewGroup)getView().findViewById(R.id.last_match_container);
  FrameLayout lastMatchView=(FrameLayout)getView().findViewById(R.id.last_match_view);
  lastMatchContainer.setVisibility(View.VISIBLE);
  lastMatchView.removeAllViews();
  lastMatchView.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}",0.3462532299741602
33671,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).startRefresh(this);
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (mActivity instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)mActivity).startRefresh(this);
  }
}",0.9353448275862069
33672,"public void onEvent(EventInfoLoadedEvent eventEvent){
  this.event=eventEvent.getEvent();
}","public void onEvent(EventInfoLoadedEvent eventEvent){
  this.mEvent=eventEvent.getEvent();
}",0.9836065573770492
33673,"protected void showNextMatch(MatchListElement match){
  LinearLayout nextLayout=(LinearLayout)getView().findViewById(R.id.event_next_match_container);
  nextLayout.setVisibility(View.VISIBLE);
  if (nextLayout.getChildCount() > 1) {
    nextLayout.removeViewAt(1);
  }
  nextLayout.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}","protected void showNextMatch(MatchListElement match){
  ViewGroup nextMatchContainer=(ViewGroup)getView().findViewById(R.id.next_match_container);
  FrameLayout nextMatchView=(FrameLayout)getView().findViewById(R.id.next_match_view);
  nextMatchContainer.setVisibility(View.VISIBLE);
  nextMatchView.removeAllViews();
  nextMatchView.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}",0.359173126614987
33674,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_venue_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_oprs_container).setOnClickListener(this);
  info.findViewById(R.id.event_date_container).setOnClickListener(this);
  return info;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_event_info,null);
  view.findViewById(R.id.event_venue_container).setOnClickListener(this);
  view.findViewById(R.id.event_website_container).setOnClickListener(this);
  view.findViewById(R.id.event_twitter_container).setOnClickListener(this);
  view.findViewById(R.id.event_youtube_container).setOnClickListener(this);
  view.findViewById(R.id.event_cd_container).setOnClickListener(this);
  view.findViewById(R.id.top_teams_container).setOnClickListener(this);
  view.findViewById(R.id.top_oprs_container).setOnClickListener(this);
  return view;
}",0.8440243079000675
33675,"@Override public void onRefreshStart(boolean actionIconPressed){
  Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
  task=new PopulateEventInfo(this,new RequestParams(true,actionIconPressed));
  task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,eventKey);
}","@Override public void onRefreshStart(boolean actionIconPressed){
  Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + mEventKey + ""String_Node_Str"");
  mTask=new PopulateEventInfo(this,new RequestParams(true,actionIconPressed));
  mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
}",0.979591836734694
33676,"public void showCurrentEvent(final EventListElement event){
  final ViewGroup eventLayout=(ViewGroup)getView().findViewById(R.id.team_current_event);
  final View container=getView().findViewById(R.id.team_current_event_container);
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      eventLayout.removeAllViews();
      eventLayout.addView(event.getView(getActivity(),getActivity().getLayoutInflater(),null));
      container.setVisibility(View.VISIBLE);
      container.setTag(mTeamKey + ""String_Node_Str"" + event.getEventKey());
      container.setOnClickListener(new TeamAtEventClickListener(getActivity()));
    }
  }
);
}","public void showCurrentEvent(final EventListElement event){
  final ViewGroup eventLayout=(ViewGroup)getView().findViewById(R.id.team_current_event);
  final View container=getView().findViewById(R.id.team_current_event_container);
  getActivity().runOnUiThread(() -> {
    eventLayout.removeAllViews();
    eventLayout.addView(event.getView(getActivity(),getActivity().getLayoutInflater(),null));
    eventLayout.setOnClickListener(new TeamAtEventClickListener(getActivity()));
    eventLayout.setTag(mTeamKey + ""String_Node_Str"" + event.getEventKey());
    container.setVisibility(View.VISIBLE);
  }
);
}",0.5264822134387351
33677,"private List<Object> getModules(){
  return Arrays.asList(new TBAAndroidModule(this),new DatafeedModule());
}","private List<Object> getModules(){
  return Arrays.asList(new TBAAndroidModule(this));
}",0.8934010152284264
33678,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mTeamKey=getIntent().getStringExtra(TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  mActivityGraph=((TBAAndroid)getApplication()).createScopedGraph(new ViewTeamModule());
  mActivityGraph.inject(this);
  setRefreshEnabled(false);
  setModelKey(mTeamKey,ModelHelper.MODELS.TEAM);
  setContentView(R.layout.activity_view_team);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  mYearSelectorContainer=findViewById(R.id.year_selector_container);
  mYearSelectorSubtitleContainer=findViewById(R.id.year_selector_subtitle_container);
  mYearSelectorTitle=(TextView)findViewById(R.id.year_selector_title);
  mYearSelectorSubtitle=(TextView)findViewById(R.id.year_selector_subtitle);
  mWarningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
  }
 else {
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,Calendar.getInstance().get(Calendar.YEAR));
    }
 else {
      mYear=Calendar.getInstance().get(Calendar.YEAR);
    }
    mCurrentSelectedYearPosition=0;
    mSelectedTab=0;
  }
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setOffscreenPageLimit(3);
  pager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  final ViewTeamFragmentPagerAdapter adapter=new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey);
  pager.setAdapter(adapter);
  SlidingTabs tabs=(SlidingTabs)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  tabs.setOnPageChangeListener(this);
  ViewCompat.setElevation(tabs,getResources().getDimension(R.dimen.toolbar_elevation));
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  new MakeActionBarDropdownForTeam(this).execute(mTeamKey);
  setupActionBar();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mTeamKey=getIntent().getStringExtra(TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  setRefreshEnabled(false);
  setModelKey(mTeamKey,ModelHelper.MODELS.TEAM);
  setContentView(R.layout.activity_view_team);
  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
  setSupportActionBar(toolbar);
  mYearSelectorContainer=findViewById(R.id.year_selector_container);
  mYearSelectorSubtitleContainer=findViewById(R.id.year_selector_subtitle_container);
  mYearSelectorTitle=(TextView)findViewById(R.id.year_selector_title);
  mYearSelectorSubtitle=(TextView)findViewById(R.id.year_selector_subtitle);
  mWarningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
  }
 else {
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,Calendar.getInstance().get(Calendar.YEAR));
    }
 else {
      mYear=Calendar.getInstance().get(Calendar.YEAR);
    }
    mCurrentSelectedYearPosition=0;
    mSelectedTab=0;
  }
  ViewPager pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setOffscreenPageLimit(3);
  pager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  final ViewTeamFragmentPagerAdapter adapter=new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey);
  pager.setAdapter(adapter);
  SlidingTabs tabs=(SlidingTabs)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  tabs.setOnPageChangeListener(this);
  ViewCompat.setElevation(tabs,getResources().getDimension(R.dimen.toolbar_elevation));
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  new MakeActionBarDropdownForTeam(this).execute(mTeamKey);
  setupActionBar();
}",0.9733333333333334
33679,"@Provides @Singleton public APICache provideAPICache(){
  return new APICache();
}","@Provides @Singleton @Named(""String_Node_Str"") public APICache provideAPICache(){
  return new APICache();
}",0.8631578947368421
33680,"@Provides @Singleton public APIv2 provideRetrofitAPI(){
  return mRestAdapter.create(APIv2.class);
}","@Provides @Singleton @Named(""String_Node_Str"") public APIv2 provideRetrofitAPI(){
  return mRestAdapter.create(APIv2.class);
}",0.8849557522123894
33681,"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_oprs_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(5);
    return;
  }
 else   if (id == R.id.event_date_container) {
    if (event == null) {
      return;
    }
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    String uri=v.getTag().toString();
    AnalyticsHelper.sendSocialUpdate(getActivity(),uri,eventKey);
    PackageManager manager=getActivity().getPackageManager();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_RANKINGS);
    return;
  }
 else   if (id == R.id.event_top_oprs_container) {
    ((ViewEventActivity)getActivity()).scrollToTab(ViewEventFragmentPagerAdapter.TAB_STATS);
    return;
  }
 else   if (id == R.id.event_date_container) {
    if (event == null) {
      return;
    }
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    String uri=v.getTag().toString();
    AnalyticsHelper.sendSocialUpdate(getActivity(),uri,eventKey);
    PackageManager manager=getActivity().getPackageManager();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}",0.8293910417715148
33682,"@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_notification_upcoming_match,null,false);
    holder=new ViewHolder();
    holder.header=(TextView)convertView.findViewById(R.id.card_header);
    holder.title=(TextView)convertView.findViewById(R.id.title);
    holder.matchView=(MatchView)convertView.findViewById(R.id.match_details);
    holder.time=(TextView)convertView.findViewById(R.id.notification_time);
    holder.summaryContainer=convertView.findViewById(R.id.summary_container);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.header.setText(c.getString(R.string.gameday_ticker_event_title_format,EventHelper.shortName(eventName),EventHelper.getShortCodeForEventKey(eventKey).toUpperCase()));
  holder.title.setText(c.getString(R.string.notification_upcoming_match_gameday_title,MatchHelper.getMatchTitleFromMatchKey(c,matchKey)));
  if (!JSONManager.isNull(matchTime)) {
    holder.time.setText(getNotificationTimeString(c));
    holder.time.setVisibility(View.VISIBLE);
  }
 else {
    holder.time.setVisibility(View.GONE);
  }
  holder.summaryContainer.setOnClickListener(new GamedayTickerClickListener(c,this));
  new MatchListElement(redTeams,blueTeams,matchKey,JSONManager.isNull(matchTime) ? -1 : matchTime.getAsLong(),""String_Node_Str"").getView(c,inflater,holder.matchView);
  return convertView;
}","@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_notification_upcoming_match,null,false);
    holder=new ViewHolder();
    holder.header=(TextView)convertView.findViewById(R.id.card_header);
    holder.title=(TextView)convertView.findViewById(R.id.title);
    holder.matchView=(MatchView)convertView.findViewById(R.id.match_details);
    holder.time=(TextView)convertView.findViewById(R.id.notification_time);
    holder.summaryContainer=convertView.findViewById(R.id.summary_container);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.header.setText(c.getString(R.string.gameday_ticker_event_title_format,EventHelper.shortName(eventName),EventHelper.getShortCodeForEventKey(eventKey).toUpperCase()));
  holder.title.setText(c.getString(R.string.notification_upcoming_match_gameday_title,MatchHelper.getMatchTitleFromMatchKey(c,matchKey)));
  holder.time.setText(getNotificationTimeString(c));
  holder.summaryContainer.setOnClickListener(new GamedayTickerClickListener(c,this));
  new MatchListElement(redTeams,blueTeams,matchKey,JSONManager.isNull(matchTime) ? -1 : matchTime.getAsLong(),""String_Node_Str"").getView(c,inflater,holder.matchView);
  return convertView;
}",0.9179885251434357
33683,"@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  if (convertView == null) {
    convertView=inflater.inflate(layout,null);
  }
  if (icon != -1) {
    ((SelectableImage)convertView.findViewById(R.id.icon)).setImageResource(icon);
  }
  if (titleId != -1) {
    ((TextView)convertView.findViewById(R.id.title)).setText(titleId);
  }
 else {
    ((TextView)convertView.findViewById(R.id.title)).setText(title != null ? title : ""String_Node_Str"");
  }
  return convertView;
}","@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(layout,null);
    holder=new ViewHolder();
    holder.image=(SelectableImageView)convertView.findViewById(R.id.icon);
    holder.title=(TextView)convertView.findViewById(R.id.title);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  if (icon != -1) {
    holder.image.setImageResource(icon);
  }
  if (titleId != -1) {
    holder.title.setText(titleId);
  }
 else {
    holder.title.setText(title != null ? title : ""String_Node_Str"");
  }
  return convertView;
}",0.608130081300813
33684,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    if (activity.getSupportActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.setActionBarTitle(String.format(activity.getString(R.string.team_actionbar_title),teamKey.substring(3)));
      activity.setActionBarSubtitle(""String_Node_Str"" + year + ""String_Node_Str""+ eventShort);
    }
    ListViewAdapter adapter=new ListViewAdapter(activity,summary);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || (!requestParams.forceFromCache && summary.isEmpty())) {
      noDataText.setText(R.string.not_available);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListView listView=(ListView)view.findViewById(R.id.list);
      listView.setVisibility(View.VISIBLE);
      Parcelable state=listView.onSaveInstanceState();
      int firstVisiblePosition=listView.getFirstVisiblePosition();
      listView.setAdapter(adapter);
      listView.onRestoreInstanceState(state);
      listView.setSelection(firstVisiblePosition);
      adapter.notifyDataSetChanged();
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateTeamAtEventSummary secondTask=new PopulateTeamAtEventSummary(fragment,requestParams);
      fragment.updateTask(secondTask);
      secondTask.execute(teamKey,eventKey);
    }
 else {
      Log.i(Constants.REFRESH_LOG,teamKey + ""String_Node_Str"" + eventKey+ ""String_Node_Str"");
      if (activity != null && activity instanceof RefreshableHostActivity) {
        activity.notifyRefreshComplete(fragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,+""String_Node_Str"",teamKey + ""String_Node_Str"" + eventKey);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    if (activity.getSupportActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.setActionBarTitle(String.format(activity.getString(R.string.team_actionbar_title),teamKey.substring(3)));
      activity.setActionBarSubtitle(""String_Node_Str"" + year + ""String_Node_Str""+ eventShort);
    }
    ListViewAdapter adapter=new ListViewAdapter(activity,summary);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || (!requestParams.forceFromCache && summary.isEmpty())) {
      noDataText.setText(R.string.not_available);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListView listView=(ListView)view.findViewById(R.id.list);
      listView.setVisibility(View.VISIBLE);
      Parcelable state=listView.onSaveInstanceState();
      int firstVisiblePosition=listView.getFirstVisiblePosition();
      listView.setAdapter(adapter);
      listView.onRestoreInstanceState(state);
      listView.setSelection(firstVisiblePosition);
      adapter.notifyDataSetChanged();
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateTeamAtEventSummary secondTask=new PopulateTeamAtEventSummary(fragment,requestParams);
      fragment.updateTask(secondTask);
      secondTask.execute(teamKey,eventKey);
    }
 else {
      Log.i(Constants.REFRESH_LOG,teamKey + ""String_Node_Str"" + eventKey+ ""String_Node_Str"");
      if (activity != null && activity instanceof RefreshableHostActivity) {
        activity.notifyRefreshComplete(fragment);
      }
    }
    AnalyticsHelper.sendTimingUpdate(activity,System.currentTimeMillis() - startTime,""String_Node_Str"",teamKey + ""String_Node_Str"" + eventKey);
  }
}",0.9997696383321816
33685,"@Override public View getView(final Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_carded_summary,null);
    holder=new ViewHolder();
    holder.label=(TextView)convertView.findViewById(R.id.label);
    holder.value=(TextView)convertView.findViewById(R.id.value);
    holder.container=(LinearLayout)convertView.findViewById(R.id.summary_container);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.label.setText(String.format(c.getString(R.string.webcast_event_format),eventName,number));
  final String service=webcast.get(""String_Node_Str"").getAsString();
  final WebcastHelper.TYPE type=WebcastHelper.getType(service);
  if (holder.container.getChildCount() > 2) {
    holder.container.removeViewAt(2);
  }
  if (service != null) {
    holder.value.setVisibility(View.VISIBLE);
    holder.value.setText(String.format(c.getString(R.string.webcast_watch_on),type.render(c)));
    holder.value.setTypeface(null,Typeface.NORMAL);
    holder.container.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        String url=WebcastHelper.getUrlForWebcast(c,type,webcast);
        Intent intent=new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url));
        c.startActivity(intent);
      }
    }
);
  }
 else {
    holder.value.setVisibility(View.GONE);
  }
  return convertView;
}","@Override public View getView(final Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_carded_webcast,null);
    holder=new ViewHolder();
    holder.label=(TextView)convertView.findViewById(R.id.label);
    holder.value=(TextView)convertView.findViewById(R.id.value);
    holder.container=(LinearLayout)convertView.findViewById(R.id.summary_container);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.label.setText(String.format(c.getString(R.string.webcast_event_format),eventName,number));
  final String service=webcast.get(""String_Node_Str"").getAsString();
  final WebcastHelper.TYPE type=WebcastHelper.getType(service);
  if (holder.container.getChildCount() > 2) {
    holder.container.removeViewAt(2);
  }
  if (service != null) {
    holder.value.setVisibility(View.VISIBLE);
    holder.value.setText(String.format(c.getString(R.string.webcast_watch_on),type.render(c)));
    holder.value.setTypeface(null,Typeface.NORMAL);
    holder.container.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        String url=WebcastHelper.getUrlForWebcast(c,type,webcast);
        Intent intent=new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url));
        c.startActivity(intent);
      }
    }
);
  }
 else {
    holder.value.setVisibility(View.GONE);
  }
  return convertView;
}",0.9954397394136808
33686,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.dev_preferences);
  Preference analytics_dryRyn=findPreference(""String_Node_Str"");
  analytics_dryRyn.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      Analytics.setAnalyticsDryRun(getActivity(),(boolean)newValue);
      return true;
    }
  }
);
  Preference addMyTBAItem=findPreference(""String_Node_Str"");
  addMyTBAItem.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Favorite fav=new Favorite();
      fav.setUserName(AccountHelper.getSelectedAccount(DevSettingsActivity.this));
      fav.setModelKey(""String_Node_Str"");
      fav.setModelEnum(ModelHelper.MODELS.TEAM.getEnum());
      Database.getInstance(DevSettingsActivity.this).getFavoritesTable().add(fav);
      return true;
    }
  }
);
  Preference testUpcomingMatchNotification=findPreference(""String_Node_Str"");
  testUpcomingMatchNotification.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String data=""String_Node_Str"";
      GCMMessageHandler.handleMessage(getActivity(),""String_Node_Str"",data);
      return true;
    }
  }
);
  Preference testScoreNotification=findPreference(""String_Node_Str"");
  testScoreNotification.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String data=""String_Node_Str"";
      GCMMessageHandler.handleMessage(getActivity(),""String_Node_Str"",data);
      return true;
    }
  }
);
  Preference gcmRegister=findPreference(""String_Node_Str"");
  gcmRegister.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      GoogleAccountCredential credential=AccountHelper.getSelectedAccountCredential(getActivity());
      getActivity().startActivity(credential.newChooseAccountIntent());
      return false;
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.dev_preferences);
  Preference analytics_dryRyn=findPreference(""String_Node_Str"");
  analytics_dryRyn.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      Analytics.setAnalyticsDryRun(getActivity(),(boolean)newValue);
      return true;
    }
  }
);
  Preference addMyTBAItem=findPreference(""String_Node_Str"");
  addMyTBAItem.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      Favorite fav=new Favorite();
      fav.setUserName(AccountHelper.getSelectedAccount(getActivity()));
      fav.setModelKey(""String_Node_Str"");
      fav.setModelEnum(ModelHelper.MODELS.TEAM.getEnum());
      Database.getInstance(getActivity()).getFavoritesTable().add(fav);
      return true;
    }
  }
);
  Preference testUpcomingMatchNotification=findPreference(""String_Node_Str"");
  testUpcomingMatchNotification.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String data=""String_Node_Str"";
      GCMMessageHandler.handleMessage(getActivity(),""String_Node_Str"",data);
      return true;
    }
  }
);
  Preference testScoreNotification=findPreference(""String_Node_Str"");
  testScoreNotification.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      String data=""String_Node_Str"";
      GCMMessageHandler.handleMessage(getActivity(),""String_Node_Str"",data);
      return true;
    }
  }
);
  Preference gcmRegister=findPreference(""String_Node_Str"");
  gcmRegister.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      GoogleAccountCredential credential=AccountHelper.getSelectedAccountCredential(getActivity());
      getActivity().startActivity(credential.newChooseAccountIntent());
      return false;
    }
  }
);
}",0.99076110866696
33687,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  teams=new ArrayList<>();
  try {
    APIResponse<ArrayList<JsonArray>> response=DataManager.Events.getEventRankings(activity,eventKey,requestParams);
    ArrayList<JsonArray> rankList=response.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    if (!rankList.isEmpty()) {
      JsonArray headerRow=rankList.remove(0);
      for (      JsonArray row : rankList) {
        String teamKey=""String_Node_Str"" + row.get(1).getAsString();
        String rankingString=""String_Node_Str"";
        EventHelper.CaseInsensitiveMap<String> rankingElements=new EventHelper.CaseInsensitiveMap<>();
        for (int i=2; i < row.size(); i++) {
          rankingElements.put(headerRow.get(i).getAsString(),row.get(i).getAsString());
        }
        String record=null;
        Iterator it=rankingElements.entrySet().iterator();
        while (it.hasNext()) {
          Map.Entry<String,Object> entry=(Map.Entry)it.next();
          if (entry.getKey().toLowerCase().contains(""String_Node_Str"".toLowerCase())) {
            record=""String_Node_Str"" + rankingElements.get(entry.getKey()) + ""String_Node_Str"";
            it.remove();
            break;
          }
        }
        if (record == null) {
          Set<String> keys=rankingElements.keySet();
          if (keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"")) {
            record=""String_Node_Str"" + rankingElements.get(""String_Node_Str"") + ""String_Node_Str""+ rankingElements.get(""String_Node_Str"")+ ""String_Node_Str""+ rankingElements.get(""String_Node_Str"")+ ""String_Node_Str"";
            rankingElements.remove(""String_Node_Str"");
            rankingElements.remove(""String_Node_Str"");
            rankingElements.remove(""String_Node_Str"");
          }
        }
        if (record == null) {
          record=""String_Node_Str"";
        }
        rankingString=EventHelper.createRankingBreakdown(rankingElements);
        Team team=DataManager.Teams.getTeamFromDB(activity,teamKey);
        String nickname;
        if (team != null) {
          nickname=team.getNickname();
        }
 else {
          nickname=""String_Node_Str"" + teamKey.substring(3);
        }
        teams.add(new RankingListElement(teamKey,row.get(1).getAsInt(),nickname,row.get(0).getAsInt(),record,rankingString));
      }
      adapter=new ListViewAdapter(activity,teams);
      return response.getCode();
    }
 else {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  teams=new ArrayList<>();
  try {
    APIResponse<ArrayList<JsonArray>> response=DataManager.Events.getEventRankings(activity,eventKey,requestParams);
    ArrayList<JsonArray> rankList=response.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    if (!rankList.isEmpty()) {
      JsonArray headerRow=rankList.remove(0);
      for (      JsonArray row : rankList) {
        String teamKey=""String_Node_Str"" + row.get(1).getAsString();
        String rankingString=""String_Node_Str"";
        EventHelper.CaseInsensitiveMap<String> rankingElements=new EventHelper.CaseInsensitiveMap<>();
        for (int i=2; i < row.size(); i++) {
          rankingElements.put(headerRow.get(i).getAsString(),row.get(i).getAsString());
        }
        String record=EventHelper.extractRankingString(rankingElements);
        if (record == null) {
          Set<String> keys=rankingElements.keySet();
          if (keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"") && keys.contains(""String_Node_Str"")) {
            record=""String_Node_Str"" + rankingElements.get(""String_Node_Str"") + ""String_Node_Str""+ rankingElements.get(""String_Node_Str"")+ ""String_Node_Str""+ rankingElements.get(""String_Node_Str"")+ ""String_Node_Str"";
            rankingElements.remove(""String_Node_Str"");
            rankingElements.remove(""String_Node_Str"");
            rankingElements.remove(""String_Node_Str"");
          }
        }
        if (record == null) {
          record=""String_Node_Str"";
        }
        rankingString=EventHelper.createRankingBreakdown(rankingElements);
        Team team=DataManager.Teams.getTeamFromDB(activity,teamKey);
        String nickname;
        if (team != null) {
          nickname=team.getNickname();
        }
 else {
          nickname=""String_Node_Str"" + teamKey.substring(3);
        }
        teams.add(new RankingListElement(teamKey,row.get(1).getAsInt(),nickname,row.get(0).getAsInt(),record,rankingString));
      }
      adapter=new ListViewAdapter(activity,teams);
      return response.getCode();
    }
 else {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
}",0.9113573407202216
33688,"@Override protected APIResponse.CODE doInBackground(String... params){
  if (params.length != 2)   throw new IllegalArgumentException(""String_Node_Str"");
  teamKey=params[0];
  eventKey=params[1];
  APIResponse<ArrayList<Match>> matchResponse;
  Match nextMatch=null, lastMatch=null;
  try {
    matchResponse=DataManager.Events.getMatchList(activity,eventKey,requestParams);
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    eventMatches=matchResponse.getData();
    Collections.sort(eventMatches,new MatchSortByPlayOrderComparator());
    teamMatches=MatchHelper.getMatchesForTeam(eventMatches,teamKey);
    int[] record=MatchHelper.getRecordForTeam(eventMatches,teamKey);
    recordString=record[0] + ""String_Node_Str"" + record[1]+ ""String_Node_Str""+ record[2];
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    matchResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  }
  APIResponse<Event> eventResponse;
  try {
    eventResponse=DataManager.Events.getEvent(activity,eventKey,requestParams);
    event=eventResponse.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    year=event.getEventYear();
    if (event.isHappeningNow() && teamMatches != null) {
      nextMatch=MatchHelper.getNextMatchPlayed(teamMatches);
      lastMatch=MatchHelper.getLastMatchPlayed(teamMatches);
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
catch (  BasicModel.FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
  if (event != null) {
    try {
      eventShort=event.getEventShortName();
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    activeEvent=event.isHappeningNow();
    JsonArray alliances;
    try {
      alliances=event.getAlliances();
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (alliances.size() == 0) {
      allianceNumber=MatchHelper.getAllianceForTeam(teamMatches,teamKey);
    }
 else {
      for (int i=0; i < alliances.size(); i++) {
        JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
        for (int j=0; j < teams.size(); j++) {
          if (teams.get(j).getAsString().equals(teamKey)) {
            allianceNumber=i + 1;
            alliancePick=j;
          }
        }
      }
    }
  }
 else {
    return APIResponse.CODE.NODATA;
  }
  APIResponse<JsonArray> rankResponse;
  try {
    rankResponse=DataManager.Teams.getRankForTeamAtEvent(activity,teamKey,eventKey,requestParams);
    JsonArray rankData=rankResponse.getData();
    if (rankData.size() > 0) {
      rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
      JsonArray headerRow=rankData.get(0).getAsJsonArray();
      JsonArray teamRank=rankData.get(1).getAsJsonArray();
      rankingString=""String_Node_Str"";
      EventHelper.CaseInsensitiveMap<String> rankingElements=new EventHelper.CaseInsensitiveMap<>();
      for (int i=2; i < teamRank.size(); i++) {
        rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
      }
      rankingString=EventHelper.createRankingBreakdown(rankingElements);
    }
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,teamMatches,teamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  summary=new ArrayList<>();
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (rank != -1) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
    }
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_alliance),generateAllianceSummary(activity.getResources(),allianceNumber,alliancePick)));
    }
    summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_status),status.getDescriptionString(activity)));
    if (!rankingString.isEmpty()) {
      summary.add(new LabelValueListItem(""String_Node_Str"",rankingString));
    }
    if (lastMatch != null) {
      summary.add(new LabelValueListItem(activity.getString(R.string.title_last_match),lastMatch.render()));
    }
    if (nextMatch != null) {
      summary.add(new LabelValueListItem(activity.getString(R.string.title_next_match),nextMatch.render()));
    }
    summary.add(new EmptyListElement(""String_Node_Str""));
  }
  return APIResponse.mergeCodes(matchResponse.getCode(),eventResponse.getCode(),rankResponse.getCode());
}","@Override protected APIResponse.CODE doInBackground(String... params){
  if (params.length != 2)   throw new IllegalArgumentException(""String_Node_Str"");
  teamKey=params[0];
  eventKey=params[1];
  APIResponse<ArrayList<Match>> matchResponse;
  Match nextMatch=null, lastMatch=null;
  try {
    matchResponse=DataManager.Events.getMatchList(activity,eventKey,requestParams);
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    eventMatches=matchResponse.getData();
    Collections.sort(eventMatches,new MatchSortByPlayOrderComparator());
    teamMatches=MatchHelper.getMatchesForTeam(eventMatches,teamKey);
    int[] record=MatchHelper.getRecordForTeam(eventMatches,teamKey);
    recordString=record[0] + ""String_Node_Str"" + record[1]+ ""String_Node_Str""+ record[2];
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    matchResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  }
  APIResponse<Event> eventResponse;
  try {
    eventResponse=DataManager.Events.getEvent(activity,eventKey,requestParams);
    event=eventResponse.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    year=event.getEventYear();
    if (event.isHappeningNow() && teamMatches != null) {
      nextMatch=MatchHelper.getNextMatchPlayed(teamMatches);
      lastMatch=MatchHelper.getLastMatchPlayed(teamMatches);
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
catch (  BasicModel.FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
  if (event != null) {
    try {
      eventShort=event.getEventShortName();
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    activeEvent=event.isHappeningNow();
    JsonArray alliances;
    try {
      alliances=event.getAlliances();
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (alliances.size() == 0) {
      allianceNumber=MatchHelper.getAllianceForTeam(teamMatches,teamKey);
    }
 else {
      for (int i=0; i < alliances.size(); i++) {
        JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
        for (int j=0; j < teams.size(); j++) {
          if (teams.get(j).getAsString().equals(teamKey)) {
            allianceNumber=i + 1;
            alliancePick=j;
          }
        }
      }
    }
  }
 else {
    return APIResponse.CODE.NODATA;
  }
  APIResponse<JsonArray> rankResponse;
  try {
    rankResponse=DataManager.Teams.getRankForTeamAtEvent(activity,teamKey,eventKey,requestParams);
    JsonArray rankData=rankResponse.getData();
    if (rankData.size() > 0) {
      rank=rankData.get(1).getAsJsonArray().get(0).getAsInt();
      JsonArray headerRow=rankData.get(0).getAsJsonArray();
      JsonArray teamRank=rankData.get(1).getAsJsonArray();
      rankingString=""String_Node_Str"";
      EventHelper.CaseInsensitiveMap<String> rankingElements=new EventHelper.CaseInsensitiveMap<>();
      for (int i=2; i < teamRank.size(); i++) {
        rankingElements.put(headerRow.get(i).getAsString(),teamRank.get(i).getAsString());
      }
      EventHelper.extractRankingString(rankingElements);
      rankingString=EventHelper.createRankingBreakdown(rankingElements);
    }
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
  try {
    status=MatchHelper.evaluateStatusOfTeam(event,teamMatches,teamKey);
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
    status=MatchHelper.EventStatus.NOT_AVAILABLE;
  }
  summary=new ArrayList<>();
  if (status != MatchHelper.EventStatus.NOT_AVAILABLE) {
    if (rank > 0) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_rank),rank + Utilities.getOrdinalFor(rank)));
    }
    if (year != 2015 && !recordString.equals(""String_Node_Str"")) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_record),recordString));
    }
    if (status != MatchHelper.EventStatus.PLAYING_IN_QUALS && status != MatchHelper.EventStatus.NO_ALLIANCE_DATA) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_alliance),generateAllianceSummary(activity.getResources(),allianceNumber,alliancePick)));
    }
    if (status != MatchHelper.EventStatus.NOT_PICKED) {
      summary.add(new LabelValueListItem(activity.getString(R.string.team_at_event_status),status.getDescriptionString(activity)));
    }
    if (rankingString != null && !rankingString.isEmpty()) {
      summary.add(new LabelValueListItem(""String_Node_Str"",rankingString));
    }
    if (lastMatch != null) {
      summary.add(new LabelValueListItem(activity.getString(R.string.title_last_match),lastMatch.render()));
    }
    if (nextMatch != null) {
      summary.add(new LabelValueListItem(activity.getString(R.string.title_next_match),nextMatch.render()));
    }
    summary.add(new EmptyListElement(""String_Node_Str""));
  }
  return APIResponse.mergeCodes(matchResponse.getCode(),eventResponse.getCode(),rankResponse.getCode());
}",0.9860456687205508
33689,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null && code != APIResponse.CODE.NODATA) {
    if (activity.getSupportActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.setActionBarTitle(String.format(activity.getString(R.string.team_actionbar_title),teamKey.substring(3)));
      activity.setActionBarSubtitle(""String_Node_Str"" + eventYear + ""String_Node_Str""+ eventShort);
    }
    ListViewAdapter adapter=new ListViewAdapter(activity,summary);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (adapter.isEmpty()) {
      noDataText.setText(R.string.not_available);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListView listView=(ListView)view.findViewById(R.id.list);
      listView.setVisibility(View.VISIBLE);
      Parcelable state=listView.onSaveInstanceState();
      int firstVisiblePosition=listView.getFirstVisiblePosition();
      listView.setAdapter(adapter);
      listView.onRestoreInstanceState(state);
      listView.setSelection(firstVisiblePosition);
      adapter.notifyDataSetChanged();
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    requestParams.forceFromCache=false;
    PopulateTeamAtEventSummary secondTask=new PopulateTeamAtEventSummary(fragment,requestParams);
    fragment.updateTask(secondTask);
    secondTask.execute(teamKey,eventKey);
  }
 else {
    Log.i(Constants.REFRESH_LOG,teamKey + ""String_Node_Str"" + eventKey+ ""String_Node_Str"");
    if (activity != null && activity instanceof RefreshableHostActivity) {
      activity.notifyRefreshComplete(fragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    if (activity.getSupportActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.setActionBarTitle(String.format(activity.getString(R.string.team_actionbar_title),teamKey.substring(3)));
      activity.setActionBarSubtitle(""String_Node_Str"" + eventYear + ""String_Node_Str""+ eventShort);
    }
    ListViewAdapter adapter=new ListViewAdapter(activity,summary);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || (!requestParams.forceFromCache && summary.isEmpty())) {
      noDataText.setText(R.string.not_available);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListView listView=(ListView)view.findViewById(R.id.list);
      listView.setVisibility(View.VISIBLE);
      Parcelable state=listView.onSaveInstanceState();
      int firstVisiblePosition=listView.getFirstVisiblePosition();
      listView.setAdapter(adapter);
      listView.onRestoreInstanceState(state);
      listView.setSelection(firstVisiblePosition);
      adapter.notifyDataSetChanged();
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    requestParams.forceFromCache=false;
    PopulateTeamAtEventSummary secondTask=new PopulateTeamAtEventSummary(fragment,requestParams);
    fragment.updateTask(secondTask);
    secondTask.execute(teamKey,eventKey);
  }
 else {
    Log.i(Constants.REFRESH_LOG,teamKey + ""String_Node_Str"" + eventKey+ ""String_Node_Str"");
    if (activity != null && activity instanceof RefreshableHostActivity) {
      activity.notifyRefreshComplete(fragment);
    }
  }
}",0.7601655709763818
33690,"public PopulateEventMatches(EventMatchesFragment f,RequestParams requestParams){
  mFragment=f;
  activity=(RefreshableHostActivity)mFragment.getActivity();
  this.requestParams=requestParams;
}","public PopulateEventMatches(EventMatchesFragment f,RequestParams requestParams){
  mFragment=f;
  activity=(RefreshableHostActivity)mFragment.getActivity();
  this.requestParams=requestParams;
  this.matchCount=0;
}",0.9486552567237164
33691,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  if (params.length == 2) {
    teamKey=params[1];
  }
 else {
    teamKey=""String_Node_Str"";
  }
  APIResponse<Event> eventResponse;
  try {
    eventResponse=DataManager.Events.getEvent(activity,eventKey,requestParams);
    event=eventResponse.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
  groups=new ArrayList<>();
  ListGroup qualMatches=new ListGroup(activity.getString(R.string.quals_header));
  ListGroup quarterMatches=new ListGroup(activity.getString(R.string.quarters_header));
  ListGroup semiMatches=new ListGroup(activity.getString(R.string.semis_header));
  ListGroup finalMatches=new ListGroup(activity.getString(R.string.finals_header));
  APIResponse<ArrayList<Match>> response;
  int[] record={0,0,0};
  try {
    response=DataManager.Events.getMatchList(activity,eventKey,teamKey,requestParams);
    ArrayList<Match> results=response.getData();
    if (event != null && event.isHappeningNow()) {
      Collections.sort(results,new MatchSortByPlayOrderComparator());
    }
 else {
      Collections.sort(results,new MatchSortByDisplayOrderComparator());
    }
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    ListGroup currentGroup=qualMatches;
    MatchHelper.TYPE lastType=null;
    Match previousIteration=null;
    boolean lastMatchPlayed=false;
    if (results.size() > 0) {
      nextMatch=results.get(0);
    }
    for (    Match match : results) {
      try {
        MatchHelper.TYPE currentType=match.getType();
        if (lastType != currentType) {
switch (match.getType()) {
case QUAL:
            currentGroup=qualMatches;
          break;
case QUARTER:
        currentGroup=quarterMatches;
      break;
case SEMI:
    currentGroup=semiMatches;
  break;
case FINAL:
currentGroup=finalMatches;
break;
}
}
currentGroup.children.add(match);
if (lastMatchPlayed && !match.hasBeenPlayed()) {
lastMatch=previousIteration;
nextMatch=match;
}
match.addToRecord(teamKey,record);
lastType=currentType;
previousIteration=match;
lastMatchPlayed=match.hasBeenPlayed();
}
 catch (BasicModel.FieldNotDefinedException e) {
Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
}
}
if (lastMatch == null && !results.isEmpty()) {
Match last=results.get(results.size() - 1);
if (last.hasBeenPlayed()) {
lastMatch=last;
}
}
}
 catch (DataManager.NoDataException e) {
Log.w(Constants.LOG_TAG,""String_Node_Str"");
response=new APIResponse<>(null,APIResponse.CODE.NODATA);
}
if (!qualMatches.children.isEmpty()) {
groups.add(qualMatches);
}
if (!quarterMatches.children.isEmpty()) {
groups.add(quarterMatches);
}
if (!semiMatches.children.isEmpty()) {
groups.add(semiMatches);
}
if (!finalMatches.children.isEmpty()) {
groups.add(finalMatches);
}
adapter=new MatchListAdapter(activity,groups,teamKey);
return APIResponse.mergeCodes(eventResponse.getCode(),response.getCode());
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  if (params.length == 2) {
    teamKey=params[1];
  }
 else {
    teamKey=""String_Node_Str"";
  }
  APIResponse<Event> eventResponse;
  try {
    eventResponse=DataManager.Events.getEvent(activity,eventKey,requestParams);
    event=eventResponse.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + teamKey + ""String_Node_Str""+ eventKey);
    return APIResponse.CODE.NODATA;
  }
  groups=new ArrayList<>();
  ListGroup qualMatches=new ListGroup(activity.getString(R.string.quals_header));
  ListGroup quarterMatches=new ListGroup(activity.getString(R.string.quarters_header));
  ListGroup semiMatches=new ListGroup(activity.getString(R.string.semis_header));
  ListGroup finalMatches=new ListGroup(activity.getString(R.string.finals_header));
  APIResponse<ArrayList<Match>> response;
  int[] record={0,0,0};
  try {
    response=DataManager.Events.getMatchList(activity,eventKey,teamKey,requestParams);
    ArrayList<Match> results=response.getData();
    matchCount=results.size();
    if (event != null && event.isHappeningNow()) {
      Collections.sort(results,new MatchSortByPlayOrderComparator());
    }
 else {
      Collections.sort(results,new MatchSortByDisplayOrderComparator());
    }
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    ListGroup currentGroup=qualMatches;
    MatchHelper.TYPE lastType=null;
    Match previousIteration=null;
    boolean lastMatchPlayed=false;
    if (results.size() > 0) {
      nextMatch=results.get(0);
    }
    for (    Match match : results) {
      try {
        MatchHelper.TYPE currentType=match.getType();
        if (lastType != currentType) {
switch (match.getType()) {
case QUAL:
            currentGroup=qualMatches;
          break;
case QUARTER:
        currentGroup=quarterMatches;
      break;
case SEMI:
    currentGroup=semiMatches;
  break;
case FINAL:
currentGroup=finalMatches;
break;
}
}
currentGroup.children.add(match);
if (lastMatchPlayed && !match.hasBeenPlayed()) {
lastMatch=previousIteration;
nextMatch=match;
}
match.addToRecord(teamKey,record);
lastType=currentType;
previousIteration=match;
lastMatchPlayed=match.hasBeenPlayed();
}
 catch (BasicModel.FieldNotDefinedException e) {
Log.e(Constants.LOG_TAG,""String_Node_Str"" + Arrays.toString(e.getStackTrace()));
}
}
if (lastMatch == null && !results.isEmpty()) {
Match last=results.get(results.size() - 1);
if (last.hasBeenPlayed()) {
lastMatch=last;
}
}
}
 catch (DataManager.NoDataException e) {
Log.w(Constants.LOG_TAG,""String_Node_Str"");
response=new APIResponse<>(null,APIResponse.CODE.NODATA);
}
if (!qualMatches.children.isEmpty()) {
groups.add(qualMatches);
}
if (!quarterMatches.children.isEmpty()) {
groups.add(quarterMatches);
}
if (!semiMatches.children.isEmpty()) {
groups.add(semiMatches);
}
if (!finalMatches.children.isEmpty()) {
groups.add(finalMatches);
}
adapter=new MatchListAdapter(activity,groups,teamKey);
return response.getCode();
}",0.9832402234636872
33692,"protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    if (code == APIResponse.CODE.NODATA || (!requestParams.forceFromCache && (groups == null || adapter.groups.isEmpty()))) {
      noDataText.setVisibility(View.VISIBLE);
      noDataText.setText(teamKey.isEmpty() ? R.string.no_match_data : R.string.no_team_match_data);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ExpandableListView results=(ExpandableListView)view.findViewById(R.id.match_results);
      Parcelable state=results.onSaveInstanceState();
      int firstVisiblePosition=results.getFirstVisiblePosition();
      results.setAdapter(adapter);
      results.onRestoreInstanceState(state);
      results.setSelection(firstVisiblePosition);
      if (groups.size() == 1) {
        results.expandGroup(0);
      }
      adapter.notifyDataSetChanged();
    }
    if (code != APIResponse.CODE.NODATA) {
      if (event.isHappeningNow()) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
        EventBus.getDefault().post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.match_results).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    requestParams.forceFromCache=false;
    PopulateEventMatches secondLoad=new PopulateEventMatches(mFragment,requestParams);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (activity != null && mFragment instanceof RefreshListener) {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    ExpandableListView results=(ExpandableListView)view.findViewById(R.id.match_results);
    if (code == APIResponse.CODE.NODATA || (!requestParams.forceFromCache && (groups == null || matchCount == 0))) {
      results.setVisibility(View.GONE);
      noDataText.setVisibility(View.VISIBLE);
      noDataText.setText(teamKey.isEmpty() ? R.string.no_match_data : R.string.no_team_match_data);
    }
 else {
      noDataText.setVisibility(View.GONE);
      results.setVisibility(View.VISIBLE);
      Parcelable state=results.onSaveInstanceState();
      int firstVisiblePosition=results.getFirstVisiblePosition();
      results.setAdapter(adapter);
      results.onRestoreInstanceState(state);
      results.setSelection(firstVisiblePosition);
      if (groups.size() == 1) {
        results.expandGroup(0);
      }
      adapter.notifyDataSetChanged();
    }
    if (code != APIResponse.CODE.NODATA) {
      if (event.isHappeningNow()) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
        EventBus.getDefault().post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    requestParams.forceFromCache=false;
    PopulateEventMatches secondLoad=new PopulateEventMatches(mFragment,requestParams);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (activity != null && mFragment instanceof RefreshListener) {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.9139551699204628
33693,"/** 
 * This is the method that, when given an API url, checks the database to see when it was last updated (if event), and tells its calling query what action to take. If the url has not yet been queried or is in need of update, then download (or update) the data from the internet and record the Last-Modified header for future use. This method also implements a rate limit on how often you can hit a single API endpoint, which is defined in Constants.API_HIT_TIMEOUT <p/> About the return values. The 'data' field of the resulting APIResponse is only going to have actual data if we needed to load something from the internet (thus, the accompanying CODE will either be Code.WEBLOAD or Code.UPDATED). If the CODE is anything else, then the 'data' field will be null - so check the code before assuming it's set.
 * @param c              Calling context - used to query the database for the Last-Update time for a URL
 * @param URL            API URL to check and see if an update is required
 * @param params Parameters associated with this requestcacheLocally: Option to save the fact that we hit this URL in the database. Setting this parameter to TRUE allows us to use If-Modified-Since headers, reducing overhead forceFromCache: When this parameter is true, we won't make any web requests and just return Code.LOCAL, telling the caller to use whatever it has cached locally forceFromWeb: When this parameter is true, the API timeout is greatly reduced so we can force (not exactly, but close enough) a web refresh. The timeout still exists for the poor server's sake
 * @return APIResponse containing the data we fetched (if necessary) and the response code for how we obtained that data.
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,RequestParams params) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  boolean existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      long timeout=params.forceFromWeb ? Constants.API_HIT_TIMEOUT_LONG : Constants.API_HIT_TIMEOUT_SHORT;
      Date futureTime=new Date(cachedData.lastHit.getTime() + timeout);
      if (now.before(futureTime) && !params.forceFromWeb) {
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (params.forceFromCache) {
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getRequest(URL,params.forceFromWeb ? null : cachedData.getLastUpdate());
      if (cachedResponse != null) {
        int responseStatus=cachedResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(cachedResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        boolean dataRequiresUpdate=(responseStatus == 200);
        if (dataRequiresUpdate) {
          String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
          Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
          if (lastModified != null) {
            lastUpdate=lastModified.getValue();
          }
          int apiVersion;
          if (cachedResponse.containsHeader(""String_Node_Str"")) {
            apiVersion=Integer.parseInt(cachedResponse.getFirstHeader(""String_Node_Str"").getValue());
          }
 else {
            apiVersion=0;
          }
          Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
          Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + apiVersion + ""String_Node_Str""+ URL);
          return new APIResponse<>(response,APIResponse.CODE.UPDATED,apiVersion);
        }
 else {
          Database.getInstance(c).getResponseTable().touchResponse(URL);
          return cachedData.updateCode(APIResponse.CODE.CACHED304);
        }
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse webResponse=HTTP.getRequest(URL);
      if (webResponse != null) {
        int responseStatus=webResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(webResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        String response=HTTP.dataFromResponse(webResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=webResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (params.cacheLocally) {
          Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
        }
        int apiVersion;
        if (webResponse.containsHeader(""String_Node_Str"")) {
          apiVersion=Integer.parseInt(webResponse.getFirstHeader(""String_Node_Str"").getValue());
        }
 else {
          apiVersion=0;
        }
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + apiVersion + ""String_Node_Str""+ URL);
        return new APIResponse<>(response,APIResponse.CODE.WEBLOAD,apiVersion);
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}","/** 
 * This is the method that, when given an API url, checks the database to see when it was last updated (if event), and tells its calling query what action to take. If the url has not yet been queried or is in need of update, then download (or update) the data from the internet and record the Last-Modified header for future use. This method also implements a rate limit on how often you can hit a single API endpoint, which is defined in Constants.API_HIT_TIMEOUT <p/> About the return values. The 'data' field of the resulting APIResponse is only going to have actual data if we needed to load something from the internet (thus, the accompanying CODE will either be Code.WEBLOAD or Code.UPDATED). If the CODE is anything else, then the 'data' field will be null - so check the code before assuming it's set.
 * @param c              Calling context - used to query the database for the Last-Update time for a URL
 * @param URL            API URL to check and see if an update is required
 * @param params Parameters associated with this requestcacheLocally: Option to save the fact that we hit this URL in the database. Setting this parameter to TRUE allows us to use If-Modified-Since headers, reducing overhead forceFromCache: When this parameter is true, we won't make any web requests and just return Code.LOCAL, telling the caller to use whatever it has cached locally forceFromWeb: When this parameter is true, the API timeout is greatly reduced so we can force (not exactly, but close enough) a web refresh. The timeout still exists for the poor server's sake
 * @return APIResponse containing the data we fetched (if necessary) and the response code for how we obtained that data.
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,RequestParams params) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  boolean existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      long timeout=params.forceFromWeb ? Constants.API_HIT_TIMEOUT_LONG : Constants.API_HIT_TIMEOUT_SHORT;
      Date futureTime=new Date(cachedData.lastHit.getTime() + timeout);
      if (now.before(futureTime) && !params.forceFromWeb) {
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (params.forceFromCache) {
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getRequest(URL,cachedData.getLastUpdate());
      if (cachedResponse != null) {
        int responseStatus=cachedResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(cachedResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        boolean dataRequiresUpdate=(responseStatus == 200);
        if (dataRequiresUpdate) {
          String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
          Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
          if (lastModified != null) {
            lastUpdate=lastModified.getValue();
          }
          int apiVersion;
          if (cachedResponse.containsHeader(""String_Node_Str"")) {
            apiVersion=Integer.parseInt(cachedResponse.getFirstHeader(""String_Node_Str"").getValue());
          }
 else {
            apiVersion=0;
          }
          Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
          Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + apiVersion + ""String_Node_Str""+ URL);
          return new APIResponse<>(response,APIResponse.CODE.UPDATED,apiVersion);
        }
 else {
          Database.getInstance(c).getResponseTable().touchResponse(URL);
          return cachedData.updateCode(APIResponse.CODE.CACHED304);
        }
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse webResponse=HTTP.getRequest(URL);
      if (webResponse != null) {
        int responseStatus=webResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(webResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        String response=HTTP.dataFromResponse(webResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=webResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (params.cacheLocally) {
          Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
        }
        int apiVersion;
        if (webResponse.containsHeader(""String_Node_Str"")) {
          apiVersion=Integer.parseInt(webResponse.getFirstHeader(""String_Node_Str"").getValue());
        }
 else {
          apiVersion=0;
        }
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + apiVersion + ""String_Node_Str""+ URL);
        return new APIResponse<>(response,APIResponse.CODE.WEBLOAD,apiVersion);
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}",0.99773136196511
33694,"@Override public void parseMessageData() throws JsonParseException {
  JsonObject jsonData=JSONManager.getasJsonObject(messageData);
  if (!jsonData.has(""String_Node_Str"")) {
    throw new JsonParseException(""String_Node_Str"");
  }
  eventKey=jsonData.get(""String_Node_Str"").getAsString();
  if (!jsonData.has(""String_Node_Str"")) {
    throw new JsonParseException(""String_Node_Str"");
  }
  eventName=jsonData.get(""String_Node_Str"").getAsString();
  if (!jsonData.has(""String_Node_Str"") || jsonData.get(""String_Node_Str"").isJsonArray()) {
    throw new JsonParseException(""String_Node_Str"");
  }
  JsonArray awardArray=jsonData.get(""String_Node_Str"").getAsJsonArray();
  for (  JsonElement element : awardArray) {
    awards.add(gson.fromJson(element,Award.class));
  }
}","@Override public void parseMessageData() throws JsonParseException {
  JsonObject jsonData=JSONManager.getasJsonObject(messageData);
  if (!jsonData.has(""String_Node_Str"")) {
    throw new JsonParseException(""String_Node_Str"");
  }
  eventKey=jsonData.get(""String_Node_Str"").getAsString();
  if (!jsonData.has(""String_Node_Str"")) {
    throw new JsonParseException(""String_Node_Str"");
  }
  eventName=jsonData.get(""String_Node_Str"").getAsString();
  if (!jsonData.has(""String_Node_Str"") || !jsonData.get(""String_Node_Str"").isJsonArray()) {
    throw new JsonParseException(""String_Node_Str"");
  }
  JsonArray awardArray=jsonData.get(""String_Node_Str"").getAsJsonArray();
  for (  JsonElement element : awardArray) {
    awards.add(gson.fromJson(element,Award.class));
  }
}",0.9993519118600128
33695,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && fragment != null && fragment.getView() != null) {
    View view=fragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || favorites == null || favorites.isEmpty()) {
      noDataText.setText(activity.getString(R.string.no_favorite_data));
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListViewAdapter adapter=new ListViewAdapter(activity,favorites);
      ListView listView=(ListView)fragment.getView().findViewById(R.id.list);
      listView.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateUserFavorites secondLoad=new PopulateUserFavorites(fragment,requestParams);
      fragment.updateTask(secondLoad);
      secondLoad.execute();
    }
 else {
      if (fragment instanceof RefreshListener) {
        Log.d(Constants.REFRESH_LOG,""String_Node_Str"");
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && fragment != null && fragment.getView() != null) {
    View view=fragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    ListView listView=(ListView)fragment.getView().findViewById(R.id.list);
    if (code == APIResponse.CODE.NODATA || favorites == null || favorites.isEmpty()) {
      noDataText.setText(activity.getString(R.string.no_favorite_data));
      noDataText.setVisibility(View.VISIBLE);
      listView.setVisibility(View.GONE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      listView.setVisibility(View.VISIBLE);
      ListViewAdapter adapter=new ListViewAdapter(activity,favorites);
      listView.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateUserFavorites secondLoad=new PopulateUserFavorites(fragment,requestParams);
      fragment.updateTask(secondLoad);
      secondLoad.execute();
    }
 else {
      if (fragment instanceof RefreshListener) {
        Log.d(Constants.REFRESH_LOG,""String_Node_Str"");
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}",0.8770237685153289
33696,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && fragment != null && fragment.getView() != null) {
    View view=fragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || subscriptions == null || subscriptions.isEmpty()) {
      noDataText.setText(activity.getString(R.string.no_subscription_data));
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ListViewAdapter adapter=new ListViewAdapter(activity,subscriptions);
      ListView listView=(ListView)fragment.getView().findViewById(R.id.list);
      listView.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateUserSubscriptions secondLoad=new PopulateUserSubscriptions(fragment,requestParams);
      fragment.updateTask(secondLoad);
      secondLoad.execute();
    }
 else {
      if (fragment instanceof RefreshListener) {
        Log.d(Constants.REFRESH_LOG,""String_Node_Str"");
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && fragment != null && fragment.getView() != null) {
    View view=fragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    ListView listView=(ListView)fragment.getView().findViewById(R.id.list);
    if (code == APIResponse.CODE.NODATA || subscriptions == null || subscriptions.isEmpty()) {
      noDataText.setText(activity.getString(R.string.no_subscription_data));
      noDataText.setVisibility(View.VISIBLE);
      listView.setVisibility(View.GONE);
    }
 else {
      noDataText.setVisibility(View.GONE);
      listView.setVisibility(View.VISIBLE);
      ListViewAdapter adapter=new ListViewAdapter(activity,subscriptions);
      listView.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      requestParams.forceFromCache=false;
      PopulateUserSubscriptions secondLoad=new PopulateUserSubscriptions(fragment,requestParams);
      fragment.updateTask(secondLoad);
      secondLoad.execute();
    }
 else {
      if (fragment instanceof RefreshListener) {
        Log.d(Constants.REFRESH_LOG,""String_Node_Str"");
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}",0.8790240596407998
33697,"@Override protected Void doInBackground(String... params){
  String user=params[0];
  Database.Favorites favorites=Database.getInstance(context).getFavoritesTable();
  favorites.recreate(user);
  Database.Subscriptions subscriptions=Database.getInstance(context).getSubscriptionsTable();
  subscriptions.recreate(user);
  ModelsMobileApiMessagesRegistrationRequest request=new ModelsMobileApiMessagesRegistrationRequest();
  request.setMobileId(GCMAuthHelper.getRegistrationId(context));
  request.setOperatingSystem(GCMAuthHelper.OS_ANDROID);
  TbaMobile service=AccountHelper.getAuthedTbaMobile(context);
  if (service == null) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    return null;
  }
  try {
    ModelsMobileApiMessagesBaseResponse response=service.unregister(request).execute();
    if (response.getCode() == 200) {
      Log.i(Constants.LOG_TAG,""String_Node_Str"");
    }
 else {
      Log.e(Constants.LOG_TAG,""String_Node_Str"" + response.getMessage());
    }
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  AccountHelper.setSelectedAccount(context,""String_Node_Str"");
  GCMAuthHelper.storeRegistrationId(context,""String_Node_Str"");
  return null;
}","@Override protected Void doInBackground(String... params){
  String user=params[0];
  Database.Favorites favorites=Database.getInstance(context).getFavoritesTable();
  favorites.recreate(user);
  Database.Subscriptions subscriptions=Database.getInstance(context).getSubscriptionsTable();
  subscriptions.recreate(user);
  ModelsMobileApiMessagesRegistrationRequest request=new ModelsMobileApiMessagesRegistrationRequest();
  request.setMobileId(GCMAuthHelper.getRegistrationId(context));
  request.setOperatingSystem(GCMAuthHelper.OS_ANDROID);
  request.setDeviceUuid(Utilities.getDeviceUUID(context));
  TbaMobile service=AccountHelper.getAuthedTbaMobile(context);
  if (service == null) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    return null;
  }
  try {
    ModelsMobileApiMessagesBaseResponse response=service.unregister(request).execute();
    if (response.getCode() == 200) {
      Log.i(Constants.LOG_TAG,""String_Node_Str"");
      PreferenceManager.getDefaultSharedPreferences(context).edit().putString(GCMAuthHelper.PROPERTY_GCM_REG_ID,""String_Node_Str"").apply();
    }
 else {
      Log.e(Constants.LOG_TAG,""String_Node_Str"" + response.getMessage());
    }
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  AccountHelper.setSelectedAccount(context,""String_Node_Str"");
  GCMAuthHelper.storeRegistrationId(context,""String_Node_Str"");
  return null;
}",0.9251035001881822
33698,"public static void storeRegistrationId(Context context,String id){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  prefs.edit().putString(PROPERTY_GCM_REG_ID,id).commit();
}","public static void storeRegistrationId(Context context,String id){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  prefs.edit().putString(PROPERTY_GCM_REG_ID,id).apply();
}",0.973621103117506
33699,"public static boolean sendRegistrationToBackend(Activity activity,String gcmId){
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + gcmId);
  GoogleAccountCredential currentCredential=AccountHelper.getSelectedAccountCredential(activity);
  try {
    String token=currentCredential.getToken();
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + currentCredential.getSelectedAccountName());
    e.printStackTrace();
  }
catch (  GoogleAuthException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + currentCredential.getSelectedAccountName());
    e.printStackTrace();
  }
  TbaMobile service=AccountHelper.getTbaMobile(currentCredential);
  ModelsMobileApiMessagesRegistrationRequest request=new ModelsMobileApiMessagesRegistrationRequest();
  request.setMobileId(gcmId);
  request.setOperatingSystem(OS_ANDROID);
  request.setName(Build.MANUFACTURER + ""String_Node_Str"" + Build.MODEL);
  request.setDeviceUuid(Settings.Secure.getString(activity.getApplicationContext().getContentResolver(),Settings.Secure.ANDROID_ID));
  try {
    ModelsMobileApiMessagesBaseResponse response=service.register(request).execute();
    if (response.getCode() == 200 || response.getCode() == 304) {
      return true;
    }
 else {
      Log.e(Constants.LOG_TAG,response.getCode() + ""String_Node_Str"" + response.getMessage());
      return false;
    }
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  return false;
}","public static boolean sendRegistrationToBackend(Activity activity,String gcmId){
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + gcmId);
  GoogleAccountCredential currentCredential=AccountHelper.getSelectedAccountCredential(activity);
  try {
    String token=currentCredential.getToken();
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + currentCredential.getSelectedAccountName());
    e.printStackTrace();
  }
catch (  GoogleAuthException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + currentCredential.getSelectedAccountName());
    e.printStackTrace();
  }
  TbaMobile service=AccountHelper.getTbaMobile(currentCredential);
  ModelsMobileApiMessagesRegistrationRequest request=new ModelsMobileApiMessagesRegistrationRequest();
  request.setMobileId(gcmId);
  request.setOperatingSystem(OS_ANDROID);
  request.setName(Build.MANUFACTURER + ""String_Node_Str"" + Build.MODEL);
  request.setDeviceUuid(Utilities.getDeviceUUID(activity));
  try {
    ModelsMobileApiMessagesBaseResponse response=service.register(request).execute();
    if (response.getCode() == 200 || response.getCode() == 304) {
      return true;
    }
 else {
      Log.e(Constants.LOG_TAG,response.getCode() + ""String_Node_Str"" + response.getMessage());
      return false;
    }
  }
 catch (  IOException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  return false;
}",0.955110497237569
33700,"public static void registerInBackground(final Activity activity){
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      try {
        GoogleCloudMessaging gcm=GCMHelper.getGcm(activity);
        String senderId=GCMHelper.getSenderId(activity);
        String regid=gcm.register(senderId);
        Log.d(Constants.LOG_TAG,""String_Node_Str"" + regid);
        boolean storeOnServer=GCMAuthHelper.sendRegistrationToBackend(activity,regid);
        if (storeOnServer) {
          Log.d(Constants.LOG_TAG,""String_Node_Str"");
          GCMAuthHelper.storeRegistrationId(activity,regid);
        }
      }
 catch (      IOException ex) {
        Log.e(Constants.LOG_TAG,""String_Node_Str"" + ex.getMessage());
      }
      return null;
    }
  }
.execute();
}","public static void registerInBackground(Activity activity){
  new RegisterGCM(activity).execute();
}",0.2106430155210643
33701,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    progressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    progressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
    }
  }
);
  return view;
}",0.9720670391061452
33702,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
  startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
  startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
}",0.9245901639344264
33703,"@Override protected Result doInBackground(String... params){
  String modelKey=settings.modelKey;
  ArrayList<String> notifications=settings.enabledNotifications;
  boolean isFavorite=settings.isFavorite;
  String user=AccountHelper.getSelectedAccount(context);
  String key=MyTBAHelper.createKey(user,modelKey);
  ModelsMobileApiMessagesModelPreferenceMessage request=new ModelsMobileApiMessagesModelPreferenceMessage();
  request.setModelKey(modelKey);
  request.setDeviceKey(GCMAuthHelper.getRegistrationId(context));
  request.setNotifications(notifications);
  request.setFavorite(isFavorite);
  Database.Subscriptions subscriptionsTable=Database.getInstance(context).getSubscriptionsTable();
  Database.Favorites favoritesTable=Database.getInstance(context).getFavoritesTable();
  List<String> existingNotificationsList=new ArrayList<>();
  Subscription existingSubscription=subscriptionsTable.get(key);
  if (existingSubscription != null) {
    existingNotificationsList=existingSubscription.getNotificationList();
  }
  Collections.sort(notifications);
  Collections.sort(existingNotificationsList);
  boolean notificationsHaveChanged=!(notifications.equals(existingNotificationsList));
  if (((isFavorite && favoritesTable.exists(key)) || (!isFavorite && !favoritesTable.exists(key))) && notificationsHaveChanged) {
    return Result.NOOP;
  }
 else {
    try {
      TbaMobile service=AccountHelper.getAuthedTbaMobile(context);
      ModelsMobileApiMessagesBaseResponse response=service.model().setPreferences(request).execute();
      JsonObject responseJson=JSONManager.getasJsonObject(response.getMessage());
      JsonObject fav=responseJson.get(""String_Node_Str"").getAsJsonObject(), sub=responseJson.get(""String_Node_Str"").getAsJsonObject();
      int favCode=fav.get(""String_Node_Str"").getAsInt(), subCode=sub.get(""String_Node_Str"").getAsInt();
      if (subCode == 200) {
        if (notifications.isEmpty()) {
          subscriptionsTable.remove(key);
        }
 else         if (subscriptionsTable.exists(key)) {
          subscriptionsTable.update(key,new Subscription(user,modelKey,notifications));
        }
 else {
          subscriptionsTable.add(new Subscription(user,modelKey,notifications));
        }
      }
 else       if (subCode == 500) {
        Toast.makeText(context,String.format(context.getString(R.string.mytba_error),subCode,sub.get(""String_Node_Str"").getAsString()),Toast.LENGTH_SHORT).show();
      }
      if (favCode == 200) {
        if (!isFavorite) {
          favoritesTable.remove(key);
        }
 else         if (favoritesTable.exists(key)) {
        }
 else {
          favoritesTable.add(new Favorite(user,modelKey));
        }
      }
 else       if (favCode == 500) {
        Toast.makeText(context,String.format(context.getString(R.string.mytba_error),favCode,fav.get(""String_Node_Str"").getAsString()),Toast.LENGTH_SHORT).show();
      }
      return Result.SUCCESS;
    }
 catch (    IOException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
      return Result.ERROR;
    }
  }
}","@Override protected Result doInBackground(String... params){
  String modelKey=settings.modelKey;
  ArrayList<String> notifications=settings.enabledNotifications;
  boolean isFavorite=settings.isFavorite;
  String user=AccountHelper.getSelectedAccount(context);
  String key=MyTBAHelper.createKey(user,modelKey);
  ModelsMobileApiMessagesModelPreferenceMessage request=new ModelsMobileApiMessagesModelPreferenceMessage();
  request.setModelKey(modelKey);
  request.setDeviceKey(GCMAuthHelper.getRegistrationId(context));
  request.setNotifications(notifications);
  request.setFavorite(isFavorite);
  Database.Subscriptions subscriptionsTable=Database.getInstance(context).getSubscriptionsTable();
  Database.Favorites favoritesTable=Database.getInstance(context).getFavoritesTable();
  List<String> existingNotificationsList=new ArrayList<>();
  Subscription existingSubscription=subscriptionsTable.get(key);
  if (existingSubscription != null) {
    existingNotificationsList=existingSubscription.getNotificationList();
  }
  Collections.sort(notifications);
  Collections.sort(existingNotificationsList);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + notifications.toString());
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + existingNotificationsList.toString());
  boolean notificationsHaveChanged=!(notifications.equals(existingNotificationsList));
  if (((isFavorite && favoritesTable.exists(key)) || (!isFavorite && !favoritesTable.exists(key))) && !notificationsHaveChanged) {
    return Result.NOOP;
  }
 else {
    try {
      TbaMobile service=AccountHelper.getAuthedTbaMobile(context);
      ModelsMobileApiMessagesBaseResponse response=service.model().setPreferences(request).execute();
      JsonObject responseJson=JSONManager.getasJsonObject(response.getMessage());
      JsonObject fav=responseJson.get(""String_Node_Str"").getAsJsonObject(), sub=responseJson.get(""String_Node_Str"").getAsJsonObject();
      int favCode=fav.get(""String_Node_Str"").getAsInt(), subCode=sub.get(""String_Node_Str"").getAsInt();
      if (subCode == 200) {
        if (notifications.isEmpty()) {
          subscriptionsTable.remove(key);
        }
 else         if (subscriptionsTable.exists(key)) {
          subscriptionsTable.update(key,new Subscription(user,modelKey,notifications));
        }
 else {
          subscriptionsTable.add(new Subscription(user,modelKey,notifications));
        }
      }
 else       if (subCode == 500) {
        Toast.makeText(context,String.format(context.getString(R.string.mytba_error),subCode,sub.get(""String_Node_Str"").getAsString()),Toast.LENGTH_SHORT).show();
      }
      if (favCode == 200) {
        if (!isFavorite) {
          favoritesTable.remove(key);
        }
 else         if (favoritesTable.exists(key)) {
        }
 else {
          favoritesTable.add(new Favorite(user,modelKey));
        }
      }
 else       if (favCode == 500) {
        Toast.makeText(context,String.format(context.getString(R.string.mytba_error),favCode,fav.get(""String_Node_Str"").getAsString()),Toast.LENGTH_SHORT).show();
      }
      return Result.SUCCESS;
    }
 catch (    IOException e) {
      Log.e(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
      return Result.ERROR;
    }
  }
}",0.3855306996668253
33704,"@Override public void onClick(View v){
  if (v.getId() == R.id.open_notification_settings_button) {
    openNotificationSettingsView();
  }
 else   if (v.getId() == R.id.close_notification_settings_button) {
    closeNotificationSettingsWindow();
    if (saveSettingsTaskFragment == null) {
      saveSettingsTaskFragment=new UpdateUserModelSettingsTaskFragment(settings.getSettings());
      getSupportFragmentManager().beginTransaction().add(saveSettingsTaskFragment,SAVE_SETTINGS_TASK_FRAGMENT_TAG).commit();
    }
  }
 else {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + v.getId() + ""String_Node_Str""+ v.getTag()+ ""String_Node_Str""+ v.toString());
  }
}","@Override public void onClick(View v){
  if (v.getId() == R.id.open_notification_settings_button) {
    if (!saveInProgress) {
      openNotificationSettingsView();
    }
  }
 else   if (v.getId() == R.id.close_notification_settings_button) {
    closeNotificationSettingsWindow();
    if (saveSettingsTaskFragment == null) {
      saveSettingsTaskFragment=new UpdateUserModelSettingsTaskFragment(settings.getSettings());
      getSupportFragmentManager().beginTransaction().add(saveSettingsTaskFragment,SAVE_SETTINGS_TASK_FRAGMENT_TAG).commit();
      saveInProgress=true;
    }
  }
 else {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + v.getId() + ""String_Node_Str""+ v.getTag()+ ""String_Node_Str""+ v.toString());
  }
}",0.9551374819102748
33705,"@Override public void onError(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
}","@Override public void onError(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
  settings.restoreInitialState();
  saveInProgress=false;
}",0.9129129129129128
33706,"@Override public void onNoOp(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
}","@Override public void onNoOp(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
  saveInProgress=false;
}",0.961904761904762
33707,"@Override public void onSuccess(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
}","@Override public void onSuccess(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  android.support.v4.app.FragmentManager fm=getSupportFragmentManager();
  fm.beginTransaction().remove(fm.findFragmentByTag(SAVE_SETTINGS_TASK_FRAGMENT_TAG)).commit();
  saveSettingsTaskFragment=null;
  settings.refreshSettingsFromDatabase();
  saveInProgress=false;
}",0.9026548672566372
33708,"@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  if (fragment == null || context == null || fragment.getActivity() == null) {
    return;
  }
  PreferenceScreen preferenceScreen=fragment.getPreferenceScreen();
  CheckBoxPreference favorite=new CheckBoxPreference(context);
  favorite.setTitle(""String_Node_Str"");
  favorite.setSummary(""String_Node_Str"");
  favorite.setKey(MyTBAHelper.getFavoritePreferenceKey());
  if (savedState != null) {
    if (savedState.containsKey(MyTBAHelper.getFavoritePreferenceKey())) {
      favorite.setChecked(savedState.getBoolean(MyTBAHelper.getFavoritePreferenceKey()));
    }
 else {
      favorite.setChecked(false);
    }
  }
 else {
    favorite.setChecked(favExists);
  }
  favorite.setPersistent(false);
  preferenceScreen.addPreference(favorite);
  String[] notificationTypes=ModelHelper.getNotificationTypes(type);
  if (notificationTypes.length > 0) {
    PreferenceCategory notificationSettingsCategory=new PreferenceCategory(context);
    notificationSettingsCategory.setTitle(""String_Node_Str"");
    preferenceScreen.addPreference(notificationSettingsCategory);
    Preference summary=new Preference(context);
    summary.setSummary(""String_Node_Str"");
    summary.setSelectable(false);
    notificationSettingsCategory.addPreference(summary);
    for (    String notificationKey : notificationTypes) {
      boolean enabled;
      if (savedState != null) {
        if (savedState.containsKey(notificationKey)) {
          enabled=savedState.getBoolean(notificationKey);
        }
 else {
          enabled=false;
        }
      }
 else {
        enabled=currentSettings.contains(notificationKey);
      }
      CheckBoxPreference preference=new CheckBoxPreference(context);
      preference.setTitle(NotificationTypes.getDisplayName(notificationKey));
      preference.setKey(notificationKey);
      preference.setChecked(enabled);
      preference.setPersistent(false);
      notificationSettingsCategory.addPreference(preference);
    }
  }
  fragment.setPreferencesLoaded();
  Bundle initialStateBundle=new Bundle();
  for (  String notificationKey : notificationTypes) {
    initialStateBundle.putBoolean(notificationKey,currentSettings.contains(notificationKey));
  }
  fragment.setInitialStateBundle(initialStateBundle);
}","@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  if (fragment == null || context == null || fragment.getActivity() == null) {
    return;
  }
  PreferenceScreen preferenceScreen=fragment.getPreferenceScreen();
  preferenceScreen.removeAll();
  CheckBoxPreference favorite=new CheckBoxPreference(context);
  favorite.setTitle(""String_Node_Str"");
  favorite.setSummary(""String_Node_Str"");
  favorite.setKey(MyTBAHelper.getFavoritePreferenceKey());
  if (savedState != null) {
    if (savedState.containsKey(MyTBAHelper.getFavoritePreferenceKey())) {
      favorite.setChecked(savedState.getBoolean(MyTBAHelper.getFavoritePreferenceKey()));
    }
 else {
      favorite.setChecked(false);
    }
  }
 else {
    favorite.setChecked(favExists);
  }
  favorite.setPersistent(false);
  preferenceScreen.addPreference(favorite);
  String[] notificationTypes=ModelHelper.getNotificationTypes(type);
  if (notificationTypes.length > 0) {
    PreferenceCategory notificationSettingsCategory=new PreferenceCategory(context);
    notificationSettingsCategory.setTitle(""String_Node_Str"");
    preferenceScreen.addPreference(notificationSettingsCategory);
    Preference summary=new Preference(context);
    summary.setSummary(""String_Node_Str"");
    summary.setSelectable(false);
    notificationSettingsCategory.addPreference(summary);
    for (    String notificationKey : notificationTypes) {
      boolean enabled;
      if (savedState != null) {
        if (savedState.containsKey(notificationKey)) {
          enabled=savedState.getBoolean(notificationKey);
        }
 else {
          enabled=false;
        }
      }
 else {
        enabled=currentSettings.contains(notificationKey);
      }
      CheckBoxPreference preference=new CheckBoxPreference(context);
      preference.setTitle(NotificationTypes.getDisplayName(notificationKey));
      preference.setKey(notificationKey);
      preference.setChecked(enabled);
      preference.setPersistent(false);
      notificationSettingsCategory.addPreference(preference);
    }
  }
  fragment.setPreferencesLoaded();
  Bundle initialStateBundle=new Bundle();
  for (  String notificationKey : notificationTypes) {
    initialStateBundle.putBoolean(notificationKey,currentSettings.contains(notificationKey));
  }
  fragment.setInitialStateBundle(initialStateBundle);
}",0.993127147766323
33709,"public void setDrawerProfileInfo(){
  Person person=PlusHelper.getCurrentPerson();
  if (person != null) {
    profileName.setText(person.getDisplayName());
    Picasso picasso=Picasso.with(getActivity());
    if (person.hasImage()) {
      picasso.load(person.getImage().getUrl()).into(profilePicture);
    }
    if (person.hasCover()) {
      picasso.load(person.getCover().getCoverPhoto().getUrl()).transform(new LinearGradientTransformation()).into(coverPhoto);
    }
 else {
      picasso.load(R.drawable.default_cover).transform(new LinearGradientTransformation()).into(coverPhoto);
    }
  }
}","public void setDrawerProfileInfo(){
  Person person=PlusHelper.getCurrentPerson();
  if (person != null) {
    profileName.setText(person.getDisplayName());
    String personPhotoUrl=person.getImage().getUrl();
    personPhotoUrl=personPhotoUrl.substring(0,personPhotoUrl.length() - 2) + PROFILE_PIC_SIZE;
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + personPhotoUrl);
    Picasso picasso=Picasso.with(getActivity());
    if (person.hasImage()) {
      picasso.load(personPhotoUrl).into(profilePicture);
    }
    if (person.hasCover()) {
      picasso.load(person.getCover().getCoverPhoto().getUrl()).transform(new LinearGradientTransformation()).into(coverPhoto);
    }
 else {
      picasso.load(R.drawable.default_cover).transform(new LinearGradientTransformation()).into(coverPhoto);
    }
  }
}",0.7118402282453637
33710,"@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null) {
    dataToLoad=new Short[]{LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    ArrayList<District> districts=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS) != -1) {
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        APIResponse<String> teamListResponse;
        teamListResponse=TBAv2.getResponseFromURLOrThrow(context,String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.TEAM_LIST),pageNum),true,false,true);
        JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
        if (responseObject != null) {
          if (responseObject.size() == 0) {
            break;
          }
        }
        maxPageNum=Math.max(maxPageNum,pageNum);
        ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
        teams.addAll(pageTeams);
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS) != -1) {
      for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        APIResponse<String> eventListResponse;
        String eventsUrl=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.EVENT_LIST),year);
        eventListResponse=TBAv2.getResponseFromURLOrThrow(context,eventsUrl,true,false,true);
        if (eventListResponse.getCode() == APIResponse.CODE.WEBLOAD || eventListResponse.getCode() == APIResponse.CODE.UPDATED) {
          JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
          if (responseObject instanceof JsonObject) {
            if (((JsonObject)responseObject).has(""String_Node_Str"")) {
              continue;
            }
          }
          ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
          events.addAll(yearEvents);
        }
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS) != -1) {
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        APIResponse<String> districtListResponse;
        String url=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.DISTRICT_LIST),year);
        districtListResponse=TBAv2.getResponseFromURLOrThrow(context,url,true,false,true);
        if (districtListResponse.getData() == null) {
          continue;
        }
        JsonElement responseObject=JSONManager.getParser().parse(districtListResponse.getData());
        if (responseObject instanceof JsonObject) {
          if (((JsonObject)responseObject).has(""String_Node_Str"")) {
            continue;
          }
        }
        ArrayList<District> yearDistricts=TBAv2.getDistrictList(districtListResponse.getData(),url);
        districts.addAll(yearDistricts);
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getEventsTable().storeEvents(events);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getDistrictsTable().add(districts);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Districts.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(LaunchActivity.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.apply();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,context.getString(R.string.connection_lost)));
    Database.getInstance(context).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(context).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}","@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null) {
    dataToLoad=new Short[]{LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    ArrayList<District> districts=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS) != -1) {
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        APIResponse<String> teamListResponse;
        teamListResponse=TBAv2.getResponseFromURLOrThrow(context,String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.TEAM_LIST),pageNum),true,false,true);
        JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
        if (responseObject != null) {
          if (responseObject.size() == 0) {
            break;
          }
        }
        maxPageNum=Math.max(maxPageNum,pageNum);
        ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
        teams.addAll(pageTeams);
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS) != -1) {
      for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        APIResponse<String> eventListResponse;
        String eventsUrl=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.EVENT_LIST),year);
        eventListResponse=TBAv2.getResponseFromURLOrThrow(context,eventsUrl,true,false,true);
        if (eventListResponse.getCode() == APIResponse.CODE.WEBLOAD || eventListResponse.getCode() == APIResponse.CODE.UPDATED) {
          JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
          if (responseObject instanceof JsonObject) {
            if (((JsonObject)responseObject).has(""String_Node_Str"")) {
              continue;
            }
          }
          ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
          events.addAll(yearEvents);
        }
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS) != -1) {
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        APIResponse<String> districtListResponse;
        String url=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.DISTRICT_LIST),year);
        districtListResponse=TBAv2.getResponseFromURLOrThrow(context,url,true,false,true);
        if (districtListResponse.getData() == null) {
          continue;
        }
        JsonElement responseObject=JSONManager.getParser().parse(districtListResponse.getData());
        if (responseObject instanceof JsonObject) {
          if (((JsonObject)responseObject).has(""String_Node_Str"")) {
            continue;
          }
        }
        ArrayList<District> yearDistricts=TBAv2.getDistrictList(districtListResponse.getData(),url,districtListResponse.getVersion());
        districts.addAll(yearDistricts);
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getEventsTable().storeEvents(events);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getDistrictsTable().add(districts);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Districts.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(LaunchActivity.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.apply();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,context.getString(R.string.connection_lost)));
    Database.getInstance(context).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(context).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}",0.9972389150560338
33711,"public static ArrayList<District> getDistrictList(String json,String url){
  ArrayList<District> districts=new ArrayList<>();
  JsonArray data=JSONManager.getasJsonArray(json);
  for (  JsonElement d : data) {
    if (!d.isJsonNull())     districts.add(DistrictHelper.buildDistrictFromUrl(d.getAsString(),url));
  }
  return districts;
}","public static ArrayList<District> getDistrictList(String json,String url,int version){
  JsonArray data=JSONManager.getasJsonArray(json);
  return DistrictHelper.buildVersionedDistrictList(data,url,version);
}",0.5641025641025641
33712,"public static ArrayList<District> buildVersionedDistrictList(JsonArray districtList,String url,int version){
  ArrayList<District> districts=new ArrayList<>();
  for (  JsonElement d : districtList) {
    if (version > 1) {
      JsonObject data=d.getAsJsonObject();
      District district=DistrictHelper.buildDistrictFromUrl(data.get(""String_Node_Str"").getAsString(),url);
      district.setName(data.get(""String_Node_Str"").getAsString());
      districts.add(district);
    }
 else {
      districts.add(DistrictHelper.buildDistrictFromUrl(d.getAsString(),url));
    }
  }
  return districts;
}","public static ArrayList<District> buildVersionedDistrictList(JsonArray districtList,String url,int version){
  ArrayList<District> districts=new ArrayList<>();
  for (  JsonElement d : districtList) {
    if (!d.isJsonNull()) {
      if (version > 1) {
        JsonObject data=d.getAsJsonObject();
        District district=DistrictHelper.buildDistrictFromUrl(data.get(""String_Node_Str"").getAsString(),url);
        district.setName(data.get(""String_Node_Str"").getAsString());
        districts.add(district);
      }
 else {
        districts.add(DistrictHelper.buildDistrictFromUrl(d.getAsString(),url));
      }
    }
  }
  return districts;
}",0.9605792437650844
33713,"private void setupActionBarForEvents(){
  ActionBar bar=getSupportActionBar();
  if (bar != null) {
    bar.setDisplayShowTitleEnabled(false);
    ArrayAdapter<String> actionBarAdapter=new ArrayAdapter<>(bar.getThemedContext(),R.layout.actionbar_spinner_events,R.id.year,eventsDropdownItems);
    actionBarAdapter.setDropDownViewResource(R.layout.actionbar_spinner_dropdown);
    toolbarSpinner.setVisibility(View.VISIBLE);
    toolbarSpinner.setAdapter(actionBarAdapter);
    toolbarSpinner.setOnItemSelectedListener(this);
  }
}","private void setupActionBarForEvents(){
  ActionBar bar=getSupportActionBar();
  if (bar != null) {
    bar.setDisplayShowTitleEnabled(false);
    ArrayAdapter<String> actionBarAdapter=new ArrayAdapter<>(bar.getThemedContext(),R.layout.actionbar_spinner_events,R.id.year,eventsDropdownItems);
    actionBarAdapter.setDropDownViewResource(R.layout.actionbar_spinner_dropdown);
    toolbarSpinner.setVisibility(View.VISIBLE);
    toolbarSpinner.setAdapter(actionBarAdapter);
    toolbarSpinner.setOnItemSelectedListener(this);
    if (mCurrentSelectedYearPosition >= 0 && mCurrentSelectedYearPosition < eventsDropdownItems.length) {
      toolbarSpinner.setSelection(mCurrentSelectedYearPosition);
    }
 else {
      toolbarSpinner.setSelection(0);
    }
  }
}",0.8223429014740109
33714,"@Override public void onNavDrawerOpened(){
  getSupportActionBar().setTitle(R.string.app_name);
}","@Override public void onNavDrawerOpened(){
  if (mShowAppNameWhenDrawerOpened) {
    getSupportActionBar().setTitle(R.string.app_name);
  }
}",0.8151260504201681
33715,"@Override public void onCreate(){
  super.onCreate();
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + BuildConfig.VERSION_NAME);
  if (AccountHelper.isAccountSelected(this) && !AccountHelper.hasMyTBAData(this)) {
    new UpdateMyTBA(this,true).execute();
  }
}","@Override public void onCreate(){
  super.onCreate();
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + BuildConfig.VERSION_NAME);
}",0.6632124352331606
33716,"protected void onRefreshComplete(){
  setMenuProgressBarVisible(false);
  mRefreshInProgress=false;
  mRefreshed=true;
}","protected void onRefreshComplete(){
  setMenuProgressBarVisible(false);
  mRefreshInProgress=false;
  mRefreshed=true;
  if (AccountHelper.isAccountSelected(this)) {
    new UpdateMyTBA(this,false).execute();
  }
}",0.718562874251497
33717,"@Override public void onPanelCollapsed(View view){
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  ArrayList<String> subscribed=new ArrayList<>();
  subscribed.add(modelKey);
  String[] modelNotifications=ModelHelper.getNotificationTypes(modelType);
  ListViewAdapter adapter=((ListViewAdapter)list.getAdapter());
  for (int i=0; i < adapter.values.size(); i++) {
    NotificationTypeListElement element=((NotificationTypeListElement)adapter.values.get(i));
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ element.isEnabled());
    if (element.isEnabled()) {
      subscribed.add(modelNotifications[element.getPosition()]);
    }
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + subscribed);
  if (subscribed.size() == 1) {
    new RemoveUserSubscription(getActivity()).execute(modelKey);
  }
 else {
    new AddUpdateUserSubscription(getActivity()).execute(subscribed.toArray(new String[subscribed.size()]));
  }
}","@Override public void onPanelCollapsed(View view){
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  ArrayList<String> subscribed=new ArrayList<>();
  subscribed.add(modelKey);
  String[] modelNotifications=ModelHelper.getNotificationTypes(modelType);
  ListViewAdapter adapter=((ListViewAdapter)list.getAdapter());
  if (adapter != null) {
    for (int i=0; i < adapter.values.size(); i++) {
      NotificationTypeListElement element=((NotificationTypeListElement)adapter.values.get(i));
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + i + ""String_Node_Str""+ element.isEnabled());
      if (element.isEnabled()) {
        subscribed.add(modelNotifications[element.getPosition()]);
      }
    }
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + subscribed);
  if (subscribed.size() == 1) {
    new RemoveUserSubscription(getActivity()).execute(modelKey);
  }
 else {
    new AddUpdateUserSubscription(getActivity()).execute(subscribed.toArray(new String[subscribed.size()]));
  }
}",0.9776158250910983
33718,"protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    if (code == APIResponse.CODE.NODATA || (!forceFromCache && groups == null || adapter.groups.isEmpty())) {
      noDataText.setVisibility(View.VISIBLE);
      noDataText.setText(teamKey.isEmpty() ? R.string.no_match_data : R.string.no_team_match_data);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ExpandableListView results=(ExpandableListView)view.findViewById(R.id.match_results);
      Parcelable state=results.onSaveInstanceState();
      int firstVisiblePosition=results.getFirstVisiblePosition();
      results.setAdapter(adapter);
      results.onRestoreInstanceState(state);
      results.setSelection(firstVisiblePosition);
      if (groups.size() == 1) {
        results.expandGroup(0);
      }
      adapter.notifyDataSetChanged();
    }
    if (code != APIResponse.CODE.NODATA) {
      if (event.isHappeningNow()) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
        EventBus.getDefault().post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
      }
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.match_results).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventMatches secondLoad=new PopulateEventMatches(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    if (code == APIResponse.CODE.NODATA || (!forceFromCache && groups == null || adapter.groups.isEmpty())) {
      noDataText.setVisibility(View.VISIBLE);
      noDataText.setText(teamKey.isEmpty() ? R.string.no_match_data : R.string.no_team_match_data);
    }
 else {
      noDataText.setVisibility(View.GONE);
      ExpandableListView results=(ExpandableListView)view.findViewById(R.id.match_results);
      Parcelable state=results.onSaveInstanceState();
      int firstVisiblePosition=results.getFirstVisiblePosition();
      results.setAdapter(adapter);
      results.onRestoreInstanceState(state);
      results.setSelection(firstVisiblePosition);
      if (groups.size() == 1) {
        results.expandGroup(0);
      }
      adapter.notifyDataSetChanged();
    }
    if (code != APIResponse.CODE.NODATA) {
      if (event.isHappeningNow()) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
        EventBus.getDefault().post(new LiveEventMatchUpdateEvent(lastMatch,nextMatch));
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.match_results).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventMatches secondLoad=new PopulateEventMatches(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.9826175869120656
33719,"public boolean isHappeningNow(){
  try {
    Date startDate=getStartDate(), endDate=getEndDate();
    if (startDate == null || endDate == null)     return false;
    Date now=new Date();
    return now.after(startDate) && now.before(endDate);
  }
 catch (  FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    return false;
  }
}","public boolean isHappeningNow(){
  try {
    Date startDate=getStartDate(), endDate=getEndDate();
    Calendar c=Calendar.getInstance();
    c.setTime(endDate);
    c.add(Calendar.DATE,1);
    endDate=c.getTime();
    if (startDate == null || endDate == null)     return false;
    Date now=new Date();
    return now.after(startDate) && now.before(endDate);
  }
 catch (  FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    return false;
  }
}",0.8669724770642202
33720,"public PopulateEventAwards(EventAwardsFragment f,boolean forceFromCache){
  mFragment=f;
  activity=(RefreshableHostActivity)mFragment.getActivity();
  this.forceFromCache=forceFromCache;
}","public PopulateEventAwards(EventAwardsFragment f,boolean forceFromCache){
  mFragment=f;
  if (mFragment != null) {
    activity=(RefreshableHostActivity)mFragment.getActivity();
  }
  this.forceFromCache=forceFromCache;
}",0.9197080291970804
33721,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  teams=new ArrayList<>();
  try {
    APIResponse<JsonObject> response=DataManager.Events.getDistrictPointsForEvent(activity,eventKey,forceFromCache);
    APIResponse<Event> eventResponse=DataManager.Events.getEventBasic(activity,eventKey,forceFromCache);
    JsonObject points=response.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    String districtKey=null;
    try {
      DistrictHelper.DISTRICTS type=DistrictHelper.DISTRICTS.fromEnum(eventResponse.getData().getDistrictEnum());
      isDistrict=type != DistrictHelper.DISTRICTS.NO_DISTRICT;
      if (isDistrict) {
        districtKey=eventKey.substring(0,4) + type.getAbbreviation();
      }
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      isDistrict=false;
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
    teams=new ArrayList<>();
    ArrayList<DistrictPointBreakdown> pointBreakdowns=new ArrayList<>();
    for (    Map.Entry<String,JsonElement> teamPoints : points.entrySet()) {
      Team team=DataManager.Teams.getTeamFromDB(activity,teamPoints.getKey());
      DistrictPointBreakdown b=JSONManager.getGson().fromJson(teamPoints.getValue(),DistrictPointBreakdown.class);
      b.setTeamKey(teamPoints.getKey());
      b.setTeamName(team.getNickname());
      b.setDistrictKey(districtKey);
      pointBreakdowns.add(b);
    }
    Collections.sort(pointBreakdowns,new PointBreakdownComparater());
    for (int i=0; i < pointBreakdowns.size(); i++) {
      pointBreakdowns.get(i).setRank(i + 1);
      teams.add(pointBreakdowns.get(i).render());
    }
    return APIResponse.mergeCodes(response.getCode(),eventResponse.getCode());
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  teams=new ArrayList<>();
  try {
    APIResponse<JsonObject> response=DataManager.Events.getDistrictPointsForEvent(activity,eventKey,forceFromCache);
    APIResponse<Event> eventResponse=DataManager.Events.getEventBasic(activity,eventKey,forceFromCache);
    JsonObject points=response.getData();
    if (isCancelled()) {
      return APIResponse.CODE.NODATA;
    }
    String districtKey=null;
    try {
      DistrictHelper.DISTRICTS type=DistrictHelper.DISTRICTS.fromEnum(eventResponse.getData().getDistrictEnum());
      isDistrict=type != DistrictHelper.DISTRICTS.NO_DISTRICT;
      if (isDistrict) {
        districtKey=eventKey.substring(0,4) + type.getAbbreviation();
      }
    }
 catch (    BasicModel.FieldNotDefinedException e) {
      isDistrict=false;
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
    teams=new ArrayList<>();
    ArrayList<DistrictPointBreakdown> pointBreakdowns=new ArrayList<>();
    for (    Map.Entry<String,JsonElement> teamPoints : points.entrySet()) {
      Team team=DataManager.Teams.getTeamFromDB(activity,teamPoints.getKey());
      DistrictPointBreakdown b=JSONManager.getGson().fromJson(teamPoints.getValue(),DistrictPointBreakdown.class);
      b.setTeamKey(teamPoints.getKey());
      b.setTeamName(team != null ? team.getNickname() : ""String_Node_Str"" + teamPoints.getKey().substring(3));
      b.setDistrictKey(districtKey);
      pointBreakdowns.add(b);
    }
    Collections.sort(pointBreakdowns,new PointBreakdownComparater());
    for (int i=0; i < pointBreakdowns.size(); i++) {
      pointBreakdowns.get(i).setRank(i + 1);
      teams.add(pointBreakdowns.get(i).render());
    }
    return APIResponse.mergeCodes(response.getCode(),eventResponse.getCode());
  }
 catch (  DataManager.NoDataException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    return APIResponse.CODE.NODATA;
  }
}",0.9817708333333334
33722,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View infoContainer=view.findViewById(R.id.event_info_container);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      infoContainer.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!venueString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + nameString);
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + eventKey);
      infoContainer.setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity != null && mFragment != null && mFragment.getView() != null) {
    View view=mFragment.getView();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    View infoContainer=view.findViewById(R.id.event_info_container);
    if (c == APIResponse.CODE.NODATA) {
      noDataText.setText(R.string.no_data);
      noDataText.setVisibility(View.VISIBLE);
      infoContainer.setVisibility(View.GONE);
    }
 else     if (event != null) {
      activity.setActionBarTitle(titleString);
      noDataText.setVisibility(View.GONE);
      eventName.setText(nameString);
      if (event.getDateString().isEmpty()) {
        activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
      }
 else {
        eventDate.setText(event.getDateString());
      }
      if (!venueString.isEmpty()) {
        eventVenue.setText(venueString);
      }
 else       if (!locationString.isEmpty()) {
        eventVenue.setText(locationString);
      }
 else {
        eventVenue.setText(R.string.no_location_available);
        activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
      }
      if (showRanks) {
        topTeamsContainer.setVisibility(View.VISIBLE);
        topTeams.setText(Html.fromHtml(topTeamsString));
      }
      if (showStats) {
        topOprsContainer.setVisibility(View.VISIBLE);
        topOprs.setText(Html.fromHtml(topOprsString));
      }
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!venueString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + nameString);
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + eventKey);
      infoContainer.setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}",0.9953558052434456
33723,"public static JsonArray getasJsonArray(String input){
  if (input == null || input.equals(""String_Node_Str""))   return new JsonArray();
  try {
    return getParser().parse(input).getAsJsonArray();
  }
 catch (  IllegalStateException err) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + err);
    return new JsonArray();
  }
}","public static JsonArray getasJsonArray(String input){
  if (input == null || input.equals(""String_Node_Str""))   return new JsonArray();
  try {
    return getParser().parse(input).getAsJsonArray();
  }
 catch (  IllegalStateException err) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + err);
    return new JsonArray();
  }
catch (  Exception ex) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"");
    ex.printStackTrace();
    return new JsonArray();
  }
}",0.8335451080050826
33724,"public void merge(T in){
  fields.putAll(in.fields);
}","public void merge(T in){
  if (in != null) {
    fields.putAll(in.fields);
  }
}",0.8059701492537313
33725,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Database.getInstance(this);
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  boolean redownload=checkDataRedownload();
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false) && !redownload) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
      if (data != null) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          goToHome();
          finish();
          return;
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
  if (redownload) {
    ((TextView)findViewById(R.id.welcome_message)).setText(getString(R.string.update_message));
  }
  loadFragment=(LoadAllDataTaskFragment)getFragmentManager().findFragmentByTag(LOAD_FRAGMENT_TAG);
  if (loadFragment != null) {
    viewPager.setCurrentItem(1,false);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Database.getInstance(this);
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  boolean redownload=checkDataRedownload();
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false) && !redownload) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
      if (data != null) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          goToHome();
          finish();
          return;
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(CURRENT_LOADING_MESSAGE_KEY)) {
      currentLoadingMessage=savedInstanceState.getString(CURRENT_LOADING_MESSAGE_KEY);
      loadingMessage.setText(currentLoadingMessage);
    }
  }
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
  if (redownload) {
    ((TextView)findViewById(R.id.welcome_message)).setText(getString(R.string.update_message));
  }
  loadFragment=(LoadAllDataTaskFragment)getFragmentManager().findFragmentByTag(LOAD_FRAGMENT_TAG);
  if (loadFragment != null) {
    viewPager.setCurrentItem(1,false);
  }
}",0.942130150866922
33726,"private void beginLoadingIfConnected(){
  if (ConnectionDetector.isConnectedToInternet(this)) {
    advanceToNextPage();
    beginLoading();
  }
 else {
    AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
    alertDialogBuilder.setTitle(""String_Node_Str"");
    alertDialogBuilder.setMessage(getString(R.string.warning_no_internet_connection)).setCancelable(false).setPositiveButton(getString(R.string.retry),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        beginLoadingIfConnected();
        dialog.dismiss();
      }
    }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        finish();
      }
    }
);
    AlertDialog alertDialog=alertDialogBuilder.create();
    alertDialog.show();
  }
}","private void beginLoadingIfConnected(){
  if (ConnectionDetector.isConnectedToInternet(this)) {
    viewPager.advanceToNextPage();
    beginLoading();
  }
 else {
    AlertDialog.Builder alertDialogBuilder=new AlertDialog.Builder(this);
    alertDialogBuilder.setTitle(""String_Node_Str"");
    alertDialogBuilder.setMessage(getString(R.string.warning_no_internet_connection)).setCancelable(false).setPositiveButton(getString(R.string.retry),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        beginLoadingIfConnected();
        dialog.dismiss();
      }
    }
).setNegativeButton(getString(R.string.cancel),new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        finish();
      }
    }
);
    AlertDialog alertDialog=alertDialogBuilder.create();
    alertDialog.show();
  }
}",0.9944196428571428
33727,"protected void onRefreshComplete(){
  hideMenuProgressBar();
  mRefreshInProgress=false;
  mRefreshed=true;
}","protected void onRefreshComplete(){
  setMenuProgressBarVisible(false);
  mRefreshInProgress=false;
  mRefreshed=true;
}",0.925764192139738
33728,"public void restartRefresh(){
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStop();
  }
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStart();
  }
  mRefreshInProgress=true;
  showMenuProgressBar();
}","public void restartRefresh(){
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStop();
  }
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStart();
  }
  mRefreshInProgress=true;
  setMenuProgressBarVisible(true);
}",0.966789667896679
33729,"public void cancelRefresh(){
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStop();
  }
  mRefreshInProgress=false;
  hideMenuProgressBar();
}","public void cancelRefresh(){
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStop();
  }
  mRefreshInProgress=false;
  setMenuProgressBarVisible(false);
}",0.9526462395543176
33730,"public void showMenuProgressBar(){
  if (mOptionsMenu != null) {
    MenuItem refresh=mOptionsMenu.findItem(R.id.refresh);
    refresh.setActionView(R.layout.actionbar_indeterminate_progress);
  }
}","public void showMenuProgressBar(){
}",0.3076923076923077
33731,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  getMenuInflater().inflate(R.menu.refresh_menu,menu);
  mOptionsMenu=menu;
  if (mRefreshInProgress) {
    showMenuProgressBar();
  }
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  getMenuInflater().inflate(R.menu.refresh_menu,menu);
  mOptionsMenu=menu;
  if (mRefreshInProgress) {
    setMenuProgressBarVisible(true);
  }
  return true;
}",0.9637096774193548
33732,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.points_help:
    Utilities.showHelpDialog(this,R.raw.district_points_help,getString(R.string.district_points_help));
  return true;
case android.R.id.home:
if (isDrawerOpen()) {
  closeDrawer();
  return true;
}
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.points_help:
    Utilities.showHelpDialog(this,R.raw.district_points_help,getString(R.string.district_points_help));
  return true;
case android.R.id.home:
if (isDrawerOpen()) {
  closeDrawer();
  return true;
}
startActivity(HomeActivity.newInstance(this,R.id.nav_item_districts).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
return true;
}
return super.onOptionsItemSelected(item);
}",0.5759599332220368
33733,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case android.R.id.home:
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
  Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
  TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
}
 else {
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  NavUtils.navigateUpTo(this,upIntent);
}
return true;
case R.id.stats_help:
Utilities.showHelpDialog(this,R.raw.stats_help,getString(R.string.stats_help_title));
return true;
case R.id.points_help:
Utilities.showHelpDialog(this,R.raw.district_points_help,getString(R.string.district_points_help));
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case android.R.id.home:
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
  startActivity(HomeActivity.newInstance(this,R.id.nav_item_events).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
return true;
case R.id.stats_help:
Utilities.showHelpDialog(this,R.raw.stats_help,getString(R.string.stats_help_title));
return true;
case R.id.points_help:
Utilities.showHelpDialog(this,R.raw.district_points_help,getString(R.string.district_points_help));
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.3133826496301278
33734,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    startActivity(HomeActivity.newInstance(this,R.id.nav_item_teams).setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP));
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.8472775564409031
33735,"private boolean checkDataRedownload(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  int lastVersion=prefs.getInt(APP_VERSION_KEY,-1);
  if (getIntent().getBooleanExtra(REDOWNLOAD,false)) {
    return true;
  }
  boolean redownload=false;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + lastVersion + ""String_Node_Str""+ BuildConfig.VERSION_CODE+ ""String_Node_Str""+ prefs.contains(APP_VERSION_KEY));
  if (!prefs.contains(APP_VERSION_KEY) && lastVersion < BuildConfig.VERSION_CODE) {
    SharedPreferences.Editor editor=prefs.edit();
    while (lastVersion <= BuildConfig.VERSION_CODE) {
      Log.v(Constants.LOG_TAG,""String_Node_Str"" + lastVersion);
switch (lastVersion) {
case 14:
        redownload=true;
      getIntent().putExtra(LaunchActivity.DATA_TO_REDOWNLOAD,new short[]{LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS});
    getIntent().putExtra(LaunchActivity.REDOWNLOAD,true);
  break;
default :
break;
}
editor.putInt(APP_VERSION_KEY,lastVersion);
lastVersion++;
}
editor.putInt(APP_VERSION_KEY,BuildConfig.VERSION_CODE).commit();
}
prefs.edit().putInt(APP_VERSION_KEY,BuildConfig.VERSION_CODE).commit();
return redownload;
}","private boolean checkDataRedownload(){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  int lastVersion=prefs.getInt(APP_VERSION_KEY,-1);
  if (lastVersion == -1 && !prefs.getBoolean(ALL_DATA_LOADED,false)) {
    return false;
  }
  if (getIntent().getBooleanExtra(REDOWNLOAD,false)) {
    return true;
  }
  boolean redownload=false;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + lastVersion + ""String_Node_Str""+ BuildConfig.VERSION_CODE+ ""String_Node_Str""+ prefs.contains(APP_VERSION_KEY));
  if (!prefs.contains(APP_VERSION_KEY) && lastVersion < BuildConfig.VERSION_CODE) {
    while (lastVersion <= BuildConfig.VERSION_CODE) {
      Log.v(Constants.LOG_TAG,""String_Node_Str"" + lastVersion);
switch (lastVersion) {
case 14:
        redownload=true;
      getIntent().putExtra(LaunchActivity.DATA_TO_REDOWNLOAD,new short[]{LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS});
    getIntent().putExtra(LaunchActivity.REDOWNLOAD,true);
  break;
default :
break;
}
lastVersion++;
}
}
return redownload;
}",0.8580166011358672
33736,"@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null || params.length < 1) {
    dataToLoad=new Short[]{LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    ArrayList<District> districts=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS) != -1) {
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        APIResponse<String> teamListResponse;
        teamListResponse=TBAv2.getResponseFromURLOrThrow(context,String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.TEAM_LIST),pageNum),true,false);
        JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
        if (responseObject != null) {
          if (responseObject.size() == 0) {
            break;
          }
        }
        maxPageNum=Math.max(maxPageNum,pageNum);
        ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
        teams.addAll(pageTeams);
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS) != -1) {
      for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        APIResponse<String> eventListResponse;
        String eventsUrl=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.EVENT_LIST),year);
        eventListResponse=TBAv2.getResponseFromURLOrThrow(context,eventsUrl,true,false);
        if (eventListResponse.getCode() == APIResponse.CODE.WEBLOAD || eventListResponse.getCode() == APIResponse.CODE.UPDATED) {
          JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
          if (responseObject instanceof JsonObject) {
            if (((JsonObject)responseObject).has(""String_Node_Str"")) {
              continue;
            }
          }
          ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
          events.addAll(yearEvents);
        }
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS) != -1) {
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        APIResponse<String> districtListResponse;
        String url=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.DISTRICT_LIST),year);
        districtListResponse=TBAv2.getResponseFromURLOrThrow(context,url,true,false);
        if (districtListResponse.getData() == null) {
          continue;
        }
        JsonElement responseObject=JSONManager.getParser().parse(districtListResponse.getData());
        if (responseObject instanceof JsonObject) {
          if (((JsonObject)responseObject).has(""String_Node_Str"")) {
            continue;
          }
        }
        ArrayList<District> yearDistricts=TBAv2.getDistrictList(districtListResponse.getData(),url);
        districts.addAll(yearDistricts);
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getEventsTable().storeEvents(events);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getDistrictsTable().add(districts);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Districts.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(LaunchActivity.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.commit();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,context.getString(R.string.connection_lost)));
    Database.getInstance(context).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(context).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}","@Override protected Void doInBackground(Short... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(params));
  Short[] dataToLoad;
  if (params == null || params.length < 1) {
    dataToLoad=new Short[]{LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS};
  }
 else {
    dataToLoad=params;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Arrays.deepToString(dataToLoad));
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    ArrayList<District> districts=new ArrayList<>();
    int maxPageNum=0;
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_TEAMS) != -1) {
      for (int pageNum=0; pageNum < 20; pageNum++) {
        if (isCancelled()) {
          return null;
        }
        int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
        int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
        start=start == 0 ? 1 : start;
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
        APIResponse<String> teamListResponse;
        teamListResponse=TBAv2.getResponseFromURLOrThrow(context,String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.TEAM_LIST),pageNum),true,false);
        JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
        if (responseObject != null) {
          if (responseObject.size() == 0) {
            break;
          }
        }
        maxPageNum=Math.max(maxPageNum,pageNum);
        ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
        teams.addAll(pageTeams);
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_EVENTS) != -1) {
      for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
        APIResponse<String> eventListResponse;
        String eventsUrl=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.EVENT_LIST),year);
        eventListResponse=TBAv2.getResponseFromURLOrThrow(context,eventsUrl,true,false);
        if (eventListResponse.getCode() == APIResponse.CODE.WEBLOAD || eventListResponse.getCode() == APIResponse.CODE.UPDATED) {
          JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
          if (responseObject instanceof JsonObject) {
            if (((JsonObject)responseObject).has(""String_Node_Str"")) {
              continue;
            }
          }
          ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
          events.addAll(yearEvents);
        }
      }
    }
    if (Arrays.binarySearch(dataToLoad,LaunchActivity.LoadAllDataTaskFragment.LOAD_DISTRICTS) != -1) {
      for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
        if (isCancelled()) {
          return null;
        }
        publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_districts),year)));
        APIResponse<String> districtListResponse;
        String url=String.format(TBAv2.getTBAApiUrl(context,TBAv2.QUERY.DISTRICT_LIST),year);
        districtListResponse=TBAv2.getResponseFromURLOrThrow(context,url,true,false);
        if (districtListResponse.getData() == null) {
          continue;
        }
        JsonElement responseObject=JSONManager.getParser().parse(districtListResponse.getData());
        if (responseObject instanceof JsonObject) {
          if (((JsonObject)responseObject).has(""String_Node_Str"")) {
            continue;
          }
        }
        ArrayList<District> yearDistricts=TBAv2.getDistrictList(districtListResponse.getData(),url);
        districts.addAll(yearDistricts);
      }
    }
    if (isCancelled()) {
      return null;
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getEventsTable().storeEvents(events);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getDistrictsTable().add(districts);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    for (int year=Constants.FIRST_DISTRICT_YEAR; year <= Constants.MAX_COMP_YEAR; year++) {
      editor.putBoolean(DataManager.Districts.ALL_DISTRICTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.putInt(LaunchActivity.APP_VERSION_KEY,BuildConfig.VERSION_CODE);
    editor.apply();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,context.getString(R.string.connection_lost)));
    Database.getInstance(context).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(context).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}",0.9991051818107868
33737,"@Override public Fragment getItem(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=TeamAtEventSummaryFragment.newInstance(teamKey,eventKey);
  break;
case 1:
fragment=EventResultsFragment.newInstance(eventKey,teamKey);
break;
case 2:
fragment=TeamAtEventStatsFragment.newInstance(teamKey,eventKey);
break;
case 3:
fragment=EventAwardsFragment.newInstance(eventKey,teamKey);
break;
}
return fragment;
}","@Override public Fragment getItem(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=TeamAtEventSummaryFragment.newInstance(teamKey,eventKey);
  break;
case 1:
fragment=EventMatchesFragment.newInstance(eventKey,teamKey);
break;
case 2:
fragment=TeamAtEventStatsFragment.newInstance(teamKey,eventKey);
break;
case 3:
fragment=EventAwardsFragment.newInstance(eventKey,teamKey);
break;
}
return fragment;
}",0.9863325740318908
33738,"@Override public Fragment getItem(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=EventInfoFragment.newInstance(mEventKey);
  break;
case 1:
fragment=EventTeamsFragment.newInstance(mEventKey);
break;
case 2:
fragment=EventRankingsFragment.newInstance(mEventKey);
break;
case 3:
fragment=EventResultsFragment.newInstance(mEventKey);
break;
case 4:
fragment=EventAlliancesFragment.newInstance(mEventKey);
break;
case 5:
fragment=EventDistrictPointsFragment.newInstance(mEventKey);
break;
case 6:
fragment=EventStatsFragment.newInstance(mEventKey);
break;
case 7:
fragment=EventAwardsFragment.newInstance(mEventKey);
break;
}
return fragment;
}","@Override public Fragment getItem(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=EventInfoFragment.newInstance(mEventKey);
  break;
case 1:
fragment=EventTeamsFragment.newInstance(mEventKey);
break;
case 2:
fragment=EventRankingsFragment.newInstance(mEventKey);
break;
case 3:
fragment=EventMatchesFragment.newInstance(mEventKey);
break;
case 4:
fragment=EventAlliancesFragment.newInstance(mEventKey);
break;
case 5:
fragment=EventDistrictPointsFragment.newInstance(mEventKey);
break;
case 6:
fragment=EventStatsFragment.newInstance(mEventKey);
break;
case 7:
fragment=EventAwardsFragment.newInstance(mEventKey);
break;
}
return fragment;
}",0.9911764705882352
33739,"protected void showNextMatch(MatchListElement match){
  LinearLayout lastLayout=(LinearLayout)getView().findViewById(R.id.event_next_match_container);
  lastLayout.setVisibility(View.VISIBLE);
  if (lastLayout.getChildCount() > 1) {
    lastLayout.removeViewAt(1);
  }
  lastLayout.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}","protected void showNextMatch(MatchListElement match){
  LinearLayout nextLayout=(LinearLayout)getView().findViewById(R.id.event_next_match_container);
  nextLayout.setVisibility(View.VISIBLE);
  if (nextLayout.getChildCount() > 1) {
    nextLayout.removeViewAt(1);
  }
  nextLayout.addView(match.getView(getActivity(),getActivity().getLayoutInflater(),null));
}",0.9584487534626038
33740,"protected void onRefreshComplete(){
  hideMenuProgressBar();
  mRefreshInProgress=false;
}","protected void onRefreshComplete(){
  hideMenuProgressBar();
  mRefreshInProgress=false;
  mRefreshed=true;
}",0.9045226130653268
33741,"@Override protected void onResume(){
  super.onResume();
  refreshListener=new RefreshBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(refreshListener,new IntentFilter(ConnectionChangeBroadcast.ACTION));
}","@Override protected void onResume(){
  super.onResume();
  refreshListener=new RefreshBroadcastReceiver();
  LocalBroadcastManager.getInstance(this).registerReceiver(refreshListener,new IntentFilter(ConnectionChangeBroadcast.ACTION));
  if (!mRefreshed) {
    startRefresh();
  }
}",0.9129593810444874
33742,"@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    MenuItem statsSort=mOptionsMenu.findItem(R.id.action_sort_by);
    MenuItem statsHelp=mOptionsMenu.findItem(R.id.stats_help);
    MenuItem pointsHelp=mOptionsMenu.findItem(R.id.points_help);
    if (position == Arrays.binarySearch(adapter.TITLES,""String_Node_Str"")) {
      if (statsHelp != null) {
        statsHelp.setVisible(true);
      }
      if (statsSort != null) {
        statsSort.setVisible(true);
      }
    }
 else {
      if (statsHelp != null) {
        statsHelp.setVisible(false);
      }
      if (statsSort != null) {
        statsSort.setVisible(false);
      }
    }
    if (position == 5) {
      pointsHelp.setVisible(true);
      if (!isDistrict) {
        showInfoMessage(getString(R.string.warning_not_real_district));
      }
 else {
        hideInfoMessage();
      }
    }
 else {
      pointsHelp.setVisible(false);
      hideInfoMessage();
    }
  }
}","@Override public void onPageSelected(int position){
  if (mOptionsMenu != null) {
    if (position == 5 && !isDistrict) {
      showInfoMessage(getString(R.string.warning_not_real_district));
    }
 else {
      hideInfoMessage();
    }
  }
}",0.2656765676567656
33743,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  mOptionsMenu=menu;
  getMenuInflater().inflate(R.menu.district_point_math,menu);
  menu.findItem(R.id.points_help).setVisible(false);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  mOptionsMenu=menu;
  return true;
}",0.6916890080428955
33744,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
  isDistrict=true;
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
  isDistrict=true;
  setHasOptionsMenu(true);
}",0.9653401797175868
33745,"public APIResponse(A data,CODE code){
  this.code=code;
  this.data=data;
  this.lastUpdate=""String_Node_Str"";
}","public APIResponse(A data,String errorMessage){
  this.code=CODE.ERROR;
  this.data=data;
  this.lastUpdate=""String_Node_Str"";
  this.errorMessage=errorMessage;
}",0.7445255474452555
33746,"/** 
 * This is the method that, when given an API url, checks the database to see when it was last updated (if event), and tells its calling query what action to take. If the url has not yet been queried or is in need of update, then download (or update) the data from the internet and record the Last-Modified header for future use. This method also implements a rate limit on how often you can hit a single API endpoint, which is defined in Constants.API_HIT_TIMEOUT <p/> About the return values. The 'data' field of the resulting APIResponse is only going to have actual data if we needed to load something from the internet (thus, the accompanying CODE will either be Code.WEBLOAD or Code.UPDATED). If the CODE is anything else, then the 'data' field will be null - so check the code before assuming it's set.
 * @param c              Calling context - used to query the database for the Last-Update time for a URL
 * @param URL            API URL to check and see if an update is required
 * @param cacheLocally   Option to save the fact that we hit this URL in the database. Setting this parameter to TRUE allows us to use If-Modified-Since headers, reducing overhead
 * @param forceFromCache When this parameter is true, we won't make any web requests and just return Code.LOCAL, telling the caller to use whatever it has cached locally
 * @return APIResponse containing the data we fetched (if necessary) and the response code for how we obtained that data.
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheLocally,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  boolean existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      if (cachedResponse != null) {
        boolean dataRequiresUpdate=(cachedResponse.getStatusLine().getStatusCode() == 200);
        if (dataRequiresUpdate) {
          String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
          Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
          if (lastModified != null) {
            lastUpdate=lastModified.getValue();
          }
          Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
          Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
          return new APIResponse<>(response,APIResponse.CODE.UPDATED);
        }
 else {
          Database.getInstance(c).getResponseTable().touchResponse(URL);
          return cachedData.updateCode(APIResponse.CODE.CACHED304);
        }
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse webResponse=HTTP.getResponse(URL);
      if (webResponse != null) {
        String response=HTTP.dataFromResponse(webResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=webResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (cacheLocally) {
          Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
        }
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}","/** 
 * This is the method that, when given an API url, checks the database to see when it was last updated (if event), and tells its calling query what action to take. If the url has not yet been queried or is in need of update, then download (or update) the data from the internet and record the Last-Modified header for future use. This method also implements a rate limit on how often you can hit a single API endpoint, which is defined in Constants.API_HIT_TIMEOUT <p/> About the return values. The 'data' field of the resulting APIResponse is only going to have actual data if we needed to load something from the internet (thus, the accompanying CODE will either be Code.WEBLOAD or Code.UPDATED). If the CODE is anything else, then the 'data' field will be null - so check the code before assuming it's set.
 * @param c              Calling context - used to query the database for the Last-Update time for a URL
 * @param URL            API URL to check and see if an update is required
 * @param cacheLocally   Option to save the fact that we hit this URL in the database. Setting this parameter to TRUE allows us to use If-Modified-Since headers, reducing overhead
 * @param forceFromCache When this parameter is true, we won't make any web requests and just return Code.LOCAL, telling the caller to use whatever it has cached locally
 * @return APIResponse containing the data we fetched (if necessary) and the response code for how we obtained that data.
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheLocally,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  boolean existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      if (cachedResponse != null) {
        int responseStatus=cachedResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(cachedResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        boolean dataRequiresUpdate=(responseStatus == 200);
        if (dataRequiresUpdate) {
          String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
          Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
          if (lastModified != null) {
            lastUpdate=lastModified.getValue();
          }
          Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
          Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
          return new APIResponse<>(response,APIResponse.CODE.UPDATED);
        }
 else {
          Database.getInstance(c).getResponseTable().touchResponse(URL);
          return cachedData.updateCode(APIResponse.CODE.CACHED304);
        }
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse webResponse=HTTP.getResponse(URL);
      if (webResponse != null) {
        int responseStatus=webResponse.getStatusLine().getStatusCode();
        if (responseStatus / 100 == 4 || responseStatus / 100 == 5) {
          String responseData=HTTP.dataFromResponse(webResponse);
          Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"" + responseStatus + ""String_Node_Str""+ responseData+ ""String_Node_Str""+ URL);
          return new APIResponse<>(""String_Node_Str"",responseData);
        }
        String response=HTTP.dataFromResponse(webResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=webResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (cacheLocally) {
          Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
        }
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
      }
 else {
        Log.e(Constants.DATAMANAGER_LOG,""String_Node_Str"");
        return new APIResponse<String>(null,APIResponse.CODE.NODATA);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}",0.8315560821484992
33747,"public static synchronized Tracker getTracker(GAnalyticsTracker trackerId,Context c){
  if (!mTrackers.containsKey(trackerId)) {
    if (analytics == null) {
      analytics=GoogleAnalytics.getInstance(c);
      boolean dryRun;
      if (Utilities.isDebuggable(c)) {
        dryRun=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",true);
      }
 else {
        dryRun=false;
      }
      analytics.setDryRun(dryRun);
      Log.d(""String_Node_Str"",""String_Node_Str"" + dryRun);
    }
    String id;
    if (Utilities.isDebuggable(c)) {
      boolean useDebugKey=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",true);
      id=Utilities.readLocalProperty(c,useDebugKey ? DEBUG_ANALYTICS_KEY : PROD_ANALYTICS_KEY);
    }
 else {
      id=Utilities.readLocalProperty(c,PROD_ANALYTICS_KEY);
    }
    Tracker t;
    Log.d(""String_Node_Str"",""String_Node_Str"" + id);
    t=analytics.newTracker(id);
    t.enableAutoActivityTracking(true);
    t.enableExceptionReporting(true);
    mTrackers.put(trackerId,t);
  }
  return mTrackers.get(trackerId);
}","public static synchronized Tracker getTracker(GAnalyticsTracker trackerId,Context c){
  if (!mTrackers.containsKey(trackerId)) {
    if (analytics == null) {
      analytics=GoogleAnalytics.getInstance(c);
      boolean dryRun;
      if (Utilities.isDebuggable()) {
        dryRun=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",true);
      }
 else {
        dryRun=false;
      }
      analytics.setDryRun(dryRun);
      Log.d(""String_Node_Str"",""String_Node_Str"" + dryRun);
    }
    String id;
    if (Utilities.isDebuggable()) {
      boolean useDebugKey=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(""String_Node_Str"",true);
      id=Utilities.readLocalProperty(c,useDebugKey ? DEBUG_ANALYTICS_KEY : PROD_ANALYTICS_KEY);
    }
 else {
      id=Utilities.readLocalProperty(c,PROD_ANALYTICS_KEY);
    }
    Tracker t;
    Log.d(""String_Node_Str"",""String_Node_Str"" + id);
    t=analytics.newTracker(id);
    t.enableAutoActivityTracking(true);
    t.enableExceptionReporting(true);
    mTrackers.put(trackerId,t);
  }
  return mTrackers.get(trackerId);
}",0.9990917347865576
33748,"public static boolean isDebuggable(Context c){
  return (0 != (c.getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE));
}","public static boolean isDebuggable(){
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + BuildConfig.DEBUG);
  return BuildConfig.DEBUG;
}",0.5019011406844106
33749,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference appVersion=findPreference(""String_Node_Str"");
  appVersion.setSummary(BuildConfig.VERSION_NAME);
  Preference githubLink=findPreference(""String_Node_Str"");
  githubLink.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  Preference licenses=findPreference(""String_Node_Str"");
  licenses.setIntent(new Intent(getActivity(),OpenSourceLicensesActivity.class));
  Preference contributors=findPreference(""String_Node_Str"");
  contributors.setIntent(new Intent(getActivity(),ContributorsActivity.class));
  Preference changelog=findPreference(""String_Node_Str"");
  String version=BuildConfig.VERSION_NAME;
  if (version.contains(""String_Node_Str"")) {
    String sha=version.split(""String_Node_Str"")[1];
    sha=sha.replace(""String_Node_Str"",""String_Node_Str"");
    changelog.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + sha)));
  }
 else {
    changelog.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + version)));
  }
  Preference tbaLink=findPreference(""String_Node_Str"");
  tbaLink.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  Preference devSettings=findPreference(""String_Node_Str"");
  if (Utilities.isDebuggable(getActivity())) {
    devSettings.setIntent(new Intent(getActivity(),com.thebluealliance.androidclient.activities.settings.DevSettingsActivity.class));
  }
 else {
    getPreferenceScreen().removePreference(devSettings);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
  Preference appVersion=findPreference(""String_Node_Str"");
  appVersion.setSummary(BuildConfig.VERSION_NAME);
  Preference githubLink=findPreference(""String_Node_Str"");
  githubLink.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  Preference licenses=findPreference(""String_Node_Str"");
  licenses.setIntent(new Intent(getActivity(),OpenSourceLicensesActivity.class));
  Preference contributors=findPreference(""String_Node_Str"");
  contributors.setIntent(new Intent(getActivity(),ContributorsActivity.class));
  Preference changelog=findPreference(""String_Node_Str"");
  String version=BuildConfig.VERSION_NAME;
  if (version.contains(""String_Node_Str"")) {
    String sha=version.split(""String_Node_Str"")[1];
    sha=sha.replace(""String_Node_Str"",""String_Node_Str"");
    changelog.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + sha)));
  }
 else {
    changelog.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + version)));
  }
  Preference tbaLink=findPreference(""String_Node_Str"");
  tbaLink.setIntent(new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"")));
  if (Utilities.isDebuggable()) {
    addPreferencesFromResource(R.xml.dev_preference_link);
    Preference devSettings=findPreference(""String_Node_Str"");
    devSettings.setIntent(new Intent(getActivity(),com.thebluealliance.androidclient.activities.settings.DevSettingsActivity.class));
  }
}",0.8486571879936808
33750,"public static HashMap<String,ArrayList<Event>> groupByWeek(ArrayList<Event> events){
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + events.size() + ""String_Node_Str"");
  HashMap<String,ArrayList<Event>> groups=new HashMap<>();
  ArrayList<Event> offseason=new ArrayList<>(), preseason=new ArrayList<>(), weekless=new ArrayList<>();
  for (  Event e : events) {
    ArrayList<Event> list;
    try {
      boolean official=e.isOfficial();
      TYPE type=e.getEventType();
      Date start=e.getStartDate();
      if (official && (type == TYPE.CMP_DIVISION || type == TYPE.CMP_FINALS)) {
        if (!groups.containsKey(CHAMPIONSHIP_LABEL) || groups.get(CHAMPIONSHIP_LABEL) == null) {
          list=new ArrayList<>();
          groups.put(CHAMPIONSHIP_LABEL,list);
        }
 else {
          list=groups.get(CHAMPIONSHIP_LABEL);
        }
        list.add(e);
      }
 else       if (official && (type == TYPE.REGIONAL || type == TYPE.DISTRICT || type == TYPE.DISTRICT_CMP)) {
        if (start == null) {
          weekless.add(e);
        }
 else {
          Log.d(Constants.LOG_TAG,""String_Node_Str"" + e.getEventKey() + ""String_Node_Str""+ e.getStartDate()+ ""String_Node_Str""+ e.getCompetitionWeek());
          String label=String.format(REGIONAL_LABEL,e.getCompetitionWeek());
          if (groups.containsKey(label) && groups.get(label) != null) {
            groups.get(label).add(e);
          }
 else {
            list=new ArrayList<>();
            list.add(e);
            groups.put(label,list);
          }
        }
      }
 else       if (type == TYPE.PRESEASON) {
        preseason.add(e);
      }
 else {
        offseason.add(e);
      }
    }
 catch (    BasicModel.FieldNotDefinedException ex) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (!weekless.isEmpty()) {
    groups.put(WEEKLESS_LABEL,weekless);
  }
  if (!offseason.isEmpty()) {
    groups.put(OFFSEASON_LABEL,offseason);
  }
  if (!preseason.isEmpty()) {
    groups.put(PRESEASON_LABEL,preseason);
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + groups.keySet().toString());
  return groups;
}","public static HashMap<String,ArrayList<Event>> groupByWeek(ArrayList<Event> events){
  HashMap<String,ArrayList<Event>> groups=new HashMap<>();
  ArrayList<Event> offseason=new ArrayList<>(), preseason=new ArrayList<>(), weekless=new ArrayList<>();
  for (  Event e : events) {
    ArrayList<Event> list;
    try {
      boolean official=e.isOfficial();
      TYPE type=e.getEventType();
      Date start=e.getStartDate();
      if (official && (type == TYPE.CMP_DIVISION || type == TYPE.CMP_FINALS)) {
        if (!groups.containsKey(CHAMPIONSHIP_LABEL) || groups.get(CHAMPIONSHIP_LABEL) == null) {
          list=new ArrayList<>();
          groups.put(CHAMPIONSHIP_LABEL,list);
        }
 else {
          list=groups.get(CHAMPIONSHIP_LABEL);
        }
        list.add(e);
      }
 else       if (official && (type == TYPE.REGIONAL || type == TYPE.DISTRICT || type == TYPE.DISTRICT_CMP)) {
        if (start == null) {
          weekless.add(e);
        }
 else {
          Log.d(Constants.LOG_TAG,""String_Node_Str"" + e.getEventKey() + ""String_Node_Str""+ e.getStartDate()+ ""String_Node_Str""+ e.getCompetitionWeek());
          String label=String.format(REGIONAL_LABEL,e.getCompetitionWeek());
          if (groups.containsKey(label) && groups.get(label) != null) {
            groups.get(label).add(e);
          }
 else {
            list=new ArrayList<>();
            list.add(e);
            groups.put(label,list);
          }
        }
      }
 else       if (type == TYPE.PRESEASON) {
        preseason.add(e);
      }
 else {
        offseason.add(e);
      }
    }
 catch (    BasicModel.FieldNotDefinedException ex) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (!weekless.isEmpty()) {
    groups.put(WEEKLESS_LABEL,weekless);
  }
  if (!offseason.isEmpty()) {
    groups.put(OFFSEASON_LABEL,offseason);
  }
  if (!preseason.isEmpty()) {
    groups.put(PRESEASON_LABEL,preseason);
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + groups.keySet().toString());
  return groups;
}",0.9802409638554216
33751,"@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    mWeek=EventHelper.weekNumFromLabel(mYear,mHeader);
  }
  events=new ArrayList<>();
  APIResponse<ArrayList<Event>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.Events.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek,forceFromCache);
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
      ArrayList<Event> eventData=response.getData();
      if (eventData != null && !eventData.isEmpty()) {
        events=EventHelper.renderEventListForWeek(eventData);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    try {
      response=DataManager.Teams.getEventsForTeam(activity,mTeamKey,mYear,forceFromCache);
      ArrayList<Event> eventsArray=response.getData();
      if (eventsArray != null && !eventsArray.isEmpty()) {
        events=EventHelper.renderEventListForTeam(activity,eventsArray,true);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    mWeek=EventHelper.weekNumFromLabel(mYear,mHeader);
  }
  events=new ArrayList<>();
  APIResponse<ArrayList<Event>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.Events.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek,forceFromCache);
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
      ArrayList<Event> eventData=response.getData();
      if (eventData != null && !eventData.isEmpty()) {
        events=EventHelper.renderEventListForWeek(eventData);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"" + mTeamKey + ""String_Node_Str""+ mYear);
    try {
      response=DataManager.Teams.getEventsForTeam(activity,mTeamKey,mYear,forceFromCache);
      ArrayList<Event> eventsArray=response.getData();
      if (eventsArray != null && !eventsArray.isEmpty()) {
        events=EventHelper.renderEventListForTeam(activity,eventsArray,true);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}",0.7551500882872277
33752,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || (!forceFromCache && adapter.values.isEmpty())) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      noDataText.setVisibility(View.GONE);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    if (!mHeader.equals(""String_Node_Str"") || mTeamKey != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    }
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,host,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"");
      host.notifyRefreshComplete((RefreshListener)mFragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if ((code == APIResponse.CODE.NODATA && !ConnectionDetector.isConnectedToInternet(activity)) || (!forceFromCache && adapter.values.isEmpty())) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      noDataText.setVisibility(View.GONE);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    if (!mHeader.equals(""String_Node_Str"") || mTeamKey != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    }
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,host,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"");
      host.notifyRefreshComplete((RefreshListener)mFragment);
    }
  }
}",0.97989417989418
33753,"public static String getApiHeader(){
  return ""String_Node_Str"" + BuildConfig.VERSION_NAME;
}","public static String getApiHeader(){
  return ""String_Node_Str"" + BuildConfig.VERSION_NAME.replace(""String_Node_Str"",""String_Node_Str"");
}",0.8051948051948052
33754,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(titleString);
    eventName.setText(nameString);
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (!venueString.isEmpty()) {
      eventVenue.setText(venueString);
    }
 else     if (!locationString.isEmpty()) {
      eventVenue.setText(locationString);
    }
 else {
      eventVenue.setText(R.string.no_location_available);
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
    if (showRanks) {
      topTeamsContainer.setVisibility(View.VISIBLE);
      topTeams.setText(Html.fromHtml(topTeamsString));
    }
    if (showStats) {
      topOprsContainer.setVisibility(View.VISIBLE);
      topOprs.setText(Html.fromHtml(topOprsString));
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!venueString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + eventName);
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + eventKey);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(titleString);
    eventName.setText(nameString);
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (!venueString.isEmpty()) {
      eventVenue.setText(venueString);
    }
 else     if (!locationString.isEmpty()) {
      eventVenue.setText(locationString);
    }
 else {
      eventVenue.setText(R.string.no_location_available);
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
    if (showRanks) {
      topTeamsContainer.setVisibility(View.VISIBLE);
      topTeams.setText(Html.fromHtml(topTeamsString));
    }
    if (showStats) {
      topOprsContainer.setVisibility(View.VISIBLE);
      topOprs.setText(Html.fromHtml(topOprsString));
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!venueString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + venueString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!locationString.isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + locationString.replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + nameString);
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + eventKey);
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + eventKey);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + eventKey + ""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}",0.9968275171147104
33755,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
  items=getResources().getStringArray(R.array.statsDialogArray);
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.dialog_stats_title).setSingleChoiceItems(items,selectedStatSort,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      selectedStatSort=i;
switch (items[i]) {
case ""String_Node_Str"":
        statSortCategory=""String_Node_Str"";
      break;
case ""String_Node_Str"":
    statSortCategory=""String_Node_Str"";
  break;
case ""String_Node_Str"":
statSortCategory=""String_Node_Str"";
break;
case ""String_Node_Str"":
statSortCategory=""String_Node_Str"";
break;
default :
break;
}
dialogInterface.dismiss();
mAdapter=(EventStatsFragmentAdapter)mListView.getAdapter();
if (mAdapter != null && statSortCategory != null) {
mAdapter.sortStats(mAdapter,statSortCategory);
}
}
}
).setNegativeButton(R.string.dialog_cancel,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.cancel();
}
}
);
statsDialog=builder.create();
setHasOptionsMenu(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(KEY,""String_Node_Str"");
  }
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
  items=getResources().getStringArray(R.array.statsDialogArray);
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  builder.setTitle(R.string.dialog_stats_title).setSingleChoiceItems(items,selectedStatSort,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialogInterface,    int i){
      selectedStatSort=i;
switch (items[i]) {
case ""String_Node_Str"":
        statSortCategory=""String_Node_Str"";
      break;
case ""String_Node_Str"":
    statSortCategory=""String_Node_Str"";
  break;
case ""String_Node_Str"":
statSortCategory=""String_Node_Str"";
break;
case ""String_Node_Str"":
statSortCategory=""String_Node_Str"";
break;
default :
break;
}
dialogInterface.dismiss();
mAdapter=(EventStatsFragmentAdapter)mListView.getAdapter();
if (mAdapter != null && statSortCategory != null) {
mAdapter.sortStats(mAdapter,statSortCategory);
}
}
}
).setNegativeButton(R.string.dialog_cancel,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int id){
dialog.cancel();
}
}
);
statsDialog=builder.create();
}",0.9913822819717338
33756,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_team_list_fragment_pager,container,false);
  mViewPager=(ViewPager)v.findViewById(R.id.team_pager);
  mViewPager.setAdapter(new TeamListFragmentPagerAdapter(getChildFragmentManager()));
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)v.findViewById(R.id.team_pager_tabs);
  tabs.setViewPager(mViewPager);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_team_list_fragment_pager,container,false);
  mViewPager=(ViewPager)v.findViewById(R.id.team_pager);
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  mTabs=(PagerSlidingTabStrip)v.findViewById(R.id.team_pager_tabs);
  mViewPager.post(new Runnable(){
    public void run(){
      mViewPager.setAdapter(new TeamListFragmentPagerAdapter(getChildFragmentManager()));
      mTabs.setViewPager(mViewPager);
    }
  }
);
  return v;
}",0.6904969485614647
33757,"public synchronized void notifyRefreshComplete(RefreshListener completedListener){
  if (completedListener == null || !mRefreshListeners.contains(completedListener)) {
    return;
  }
  if (!mCompletedRefreshListeners.contains(completedListener)) {
    mCompletedRefreshListeners.add(completedListener);
  }
  if (mCompletedRefreshListeners.size() >= mRefreshListeners.size()) {
    onRefreshComplete();
    mCompletedRefreshListeners.clear();
  }
}","public synchronized void notifyRefreshComplete(RefreshListener completedListener){
  if (completedListener == null) {
    return;
  }
  if (!mRefreshListeners.contains(completedListener) && parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).notifyRefreshComplete(completedListener);
  }
  if (!mCompletedRefreshListeners.contains(completedListener)) {
    mCompletedRefreshListeners.add(completedListener);
  }
  if (mCompletedRefreshListeners.size() >= mRefreshListeners.size()) {
    onRefreshComplete();
    mCompletedRefreshListeners.clear();
  }
}",0.8499515972894482
33758,"@Override public void onResume(){
  super.onResume();
  if (parent instanceof RefreshableHostActivity) {
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
    ((RefreshableHostActivity)parent).startRefresh(this);
  }
}","@Override public void onResume(){
  super.onResume();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).startRefresh(this);
  }
}",0.7225806451612903
33759,"/** 
 * Determines the past/current status of a team at an event.
 * @param e       the event the team is competing at
 * @param teamMatches team's match list
 * @param teamKey key associated with team
 * @return team's past/current event status
 */
public static EventStatus evaluateStatusOfTeam(Event e,ArrayList<Match> teamMatches,String teamKey) throws BasicModel.FieldNotDefinedException {
  JsonArray alliances=e.getAlliances();
  boolean inAlliance=false;
  if (alliances.size() == 0) {
    inAlliance=MatchHelper.getAllianceForTeam(teamMatches,teamKey) != -1;
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(teamKey)) {
          inAlliance=true;
        }
      }
    }
  }
  ArrayList<Match> qualMatches=new ArrayList<>();
  ArrayList<Match> quarterMatches=new ArrayList<>();
  ArrayList<Match> semiMatches=new ArrayList<>();
  ArrayList<Match> finalMatches=new ArrayList<>();
  ArrayList<Match> currentGroup=qualMatches;
  TYPE lastType=null;
  boolean teamIsHere=false;
  for (  Match match : teamMatches) {
    match.setSelectedTeam(teamKey);
    JsonObject matchAlliances=match.getAlliances();
    JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
    if (redTeams.toString().contains(teamKey) || blueTeams.toString().contains(teamKey)) {
      teamIsHere=true;
    }
    if (lastType != match.getType()) {
switch (match.getType()) {
case QUAL:
        currentGroup=qualMatches;
      break;
case QUARTER:
    currentGroup=quarterMatches;
  break;
case SEMI:
currentGroup=semiMatches;
break;
case FINAL:
currentGroup=finalMatches;
break;
}
}
currentGroup.add(match);
}
Log.d(Constants.LOG_TAG,""String_Node_Str"" + qualMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + quarterMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + semiMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + finalMatches.size());
if (e.isHappeningNow() && quarterMatches.size() == 0) {
return EventStatus.PLAYING_IN_QUALS;
}
boolean allQualMatchesPlayed=true;
for (Match match : qualMatches) {
if (!match.hasBeenPlayed()) {
Log.d(Constants.LOG_TAG,""String_Node_Str"" + match.getKey() + ""String_Node_Str"");
allQualMatchesPlayed=false;
break;
}
}
Log.d(Constants.LOG_TAG,""String_Node_Str"" + inAlliance);
Log.d(Constants.LOG_TAG,""String_Node_Str"" + allQualMatchesPlayed);
if (qualMatches.isEmpty() || (allQualMatchesPlayed && !teamIsHere)) {
return EventStatus.NOT_AVAILABLE;
}
 else if ((allQualMatchesPlayed && !inAlliance) || (!e.isHappeningNow() && (quarterMatches.isEmpty() && semiMatches.isEmpty() && finalMatches.isEmpty()))) {
return EventStatus.NOT_PICKED;
}
if (!quarterMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : quarterMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_QUARTERS;
}
 else if (!e.isHappeningNow() && semiMatches.isEmpty()) {
return EventStatus.ELIMINATED_IN_QUARTERS;
}
 else {
return EventStatus.PLAYING_IN_QUARTERS;
}
}
if (!semiMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : semiMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_SEMIS;
}
 else if (!e.isHappeningNow() && finalMatches.isEmpty()) {
return EventStatus.ELIMINATED_IN_SEMIS;
}
 else {
return EventStatus.PLAYING_IN_SEMIS;
}
}
if (!finalMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : finalMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
return EventStatus.WON_EVENT;
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_FINALS;
}
 else if (!e.isHappeningNow()) {
return EventStatus.ELIMINATED_IN_FINALS;
}
 else {
return EventStatus.PLAYING_IN_FINALS;
}
}
 else {
return EventStatus.PLAYING_IN_FINALS;
}
}","/** 
 * Determines the past/current status of a team at an event.
 * @param e       the event the team is competing at
 * @param teamMatches team's match list
 * @param teamKey key associated with team
 * @return team's past/current event status
 */
public static EventStatus evaluateStatusOfTeam(Event e,ArrayList<Match> teamMatches,String teamKey) throws BasicModel.FieldNotDefinedException {
  JsonArray alliances=e.getAlliances();
  boolean inAlliance=false;
  if (alliances.size() == 0) {
    inAlliance=MatchHelper.getAllianceForTeam(teamMatches,teamKey) != -1;
  }
 else {
    for (int i=0; i < alliances.size(); i++) {
      JsonArray teams=alliances.get(i).getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
      for (int j=0; j < teams.size(); j++) {
        if (teams.get(j).getAsString().equals(teamKey)) {
          inAlliance=true;
        }
      }
    }
  }
  ArrayList<Match> qualMatches=new ArrayList<>();
  ArrayList<Match> quarterMatches=new ArrayList<>();
  ArrayList<Match> semiMatches=new ArrayList<>();
  ArrayList<Match> finalMatches=new ArrayList<>();
  ArrayList<Match> currentGroup=qualMatches;
  TYPE lastType=null;
  boolean teamIsHere=false;
  for (  Match match : teamMatches) {
    match.setSelectedTeam(teamKey);
    JsonObject matchAlliances=match.getAlliances();
    JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
    if (redTeams.toString().contains(teamKey) || blueTeams.toString().contains(teamKey)) {
      teamIsHere=true;
    }
    if (lastType != match.getType()) {
switch (match.getType()) {
case QUAL:
        currentGroup=qualMatches;
      break;
case QUARTER:
    currentGroup=quarterMatches;
  break;
case SEMI:
currentGroup=semiMatches;
break;
case FINAL:
currentGroup=finalMatches;
break;
}
}
currentGroup.add(match);
}
Log.d(Constants.LOG_TAG,""String_Node_Str"" + qualMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + quarterMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + semiMatches.size());
Log.d(Constants.LOG_TAG,""String_Node_Str"" + finalMatches.size());
if (e.isHappeningNow() && quarterMatches.size() == 0) {
return EventStatus.PLAYING_IN_QUALS;
}
boolean allQualMatchesPlayed=true;
for (Match match : qualMatches) {
if (!match.hasBeenPlayed()) {
Log.d(Constants.LOG_TAG,""String_Node_Str"" + match.getKey() + ""String_Node_Str"");
allQualMatchesPlayed=false;
break;
}
}
Log.d(Constants.LOG_TAG,""String_Node_Str"" + inAlliance);
Log.d(Constants.LOG_TAG,""String_Node_Str"" + allQualMatchesPlayed);
if (qualMatches.isEmpty() || (allQualMatchesPlayed && !teamIsHere)) {
return EventStatus.NOT_AVAILABLE;
}
 else if ((allQualMatchesPlayed && !inAlliance) || (!e.isHappeningNow() && (quarterMatches.isEmpty() && semiMatches.isEmpty() && finalMatches.isEmpty()))) {
return EventStatus.NOT_PICKED;
}
if (!quarterMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : quarterMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_QUARTERS;
}
 else if (!e.isHappeningNow() && semiMatches.isEmpty()) {
return EventStatus.ELIMINATED_IN_QUARTERS;
}
 else {
return EventStatus.PLAYING_IN_QUARTERS;
}
}
 else {
return EventStatus.PLAYING_IN_QUARTERS;
}
if (!semiMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : semiMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_SEMIS;
}
 else if (!e.isHappeningNow() && finalMatches.isEmpty()) {
return EventStatus.ELIMINATED_IN_SEMIS;
}
 else {
return EventStatus.PLAYING_IN_SEMIS;
}
}
 else {
return EventStatus.PLAYING_IN_SEMIS;
}
if (!finalMatches.isEmpty()) {
int countPlayed=0, countWon=0;
for (Match match : finalMatches) {
if (match.hasBeenPlayed()) {
JsonObject matchAlliances=match.getAlliances();
JsonArray redTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray(), blueTeams=matchAlliances.get(""String_Node_Str"").getAsJsonObject().get(""String_Node_Str"").getAsJsonArray();
if (!redTeams.toString().contains(teamKey + ""String_Node_Str"") && !blueTeams.toString().contains(teamKey + ""String_Node_Str"")) {
continue;
}
countPlayed++;
if (match.didSelectedTeamWin()) {
countWon++;
}
}
}
if (countPlayed > 1 && countWon > 1) {
return EventStatus.WON_EVENT;
}
 else if ((countPlayed > 1 && countWon == 0) || (countPlayed > 2 && countWon == 1)) {
return EventStatus.ELIMINATED_IN_FINALS;
}
 else if (!e.isHappeningNow()) {
return EventStatus.ELIMINATED_IN_FINALS;
}
 else {
return EventStatus.PLAYING_IN_FINALS;
}
}
 else {
return EventStatus.PLAYING_IN_FINALS;
}
}",0.9916959164455098
33760,"@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitleContainer=(RelativeLayout)convertView.findViewById(R.id.match_title_container);
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.redAlliance=convertView.findViewById(R.id.red_alliance);
    holder.blueAlliance=convertView.findViewById(R.id.blue_alliance);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
    holder.header=(TableRow)convertView.findViewById(R.id.match_header);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.matchTitle.setTag(matchKey);
  holder.red1.setLines(1);
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        holder.blueAlliance.setBackgroundResource(R.drawable.blue_border);
        holder.redAlliance.setBackgroundResource(R.drawable.no_border);
      }
 else       if (bScore < rScore) {
        holder.redAlliance.setBackgroundResource(R.drawable.red_border);
        holder.blueAlliance.setBackgroundResource(R.drawable.no_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null && showVideoIcon) {
    holder.videoIcon.setVisibility(View.VISIBLE);
  }
 else {
    holder.videoIcon.setVisibility(View.GONE);
  }
  if (showMatchHeader) {
    holder.header.setVisibility(View.VISIBLE);
    holder.matchTitleContainer.setVisibility(View.GONE);
  }
 else {
    holder.header.setVisibility(View.GONE);
    holder.matchTitleContainer.setVisibility(View.VISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamAtEventClickListener listener=new TeamAtEventClickListener(context);
  String eventKey=matchKey.split(""String_Node_Str"")[0];
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setVisibility(View.VISIBLE);
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0] + ""String_Node_Str""+ eventKey);
    holder.red1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red1.setTypeface(Typeface.DEFAULT);
    }
  }
  if (redTeams.length == 1) {
    holder.red2.setVisibility(View.GONE);
    holder.red3.setVisibility(View.GONE);
  }
 else {
    holder.red2.setVisibility(View.VISIBLE);
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1] + ""String_Node_Str""+ eventKey);
    holder.red2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red2.setTypeface(Typeface.DEFAULT);
    }
  }
  if (redTeams.length == 2) {
    holder.red3.setVisibility(View.GONE);
  }
 else {
    holder.red3.setVisibility(View.VISIBLE);
    holder.red3.setText(redTeams[2]);
    holder.red3.setTag(""String_Node_Str"" + redTeams[2] + ""String_Node_Str""+ eventKey);
    holder.red3.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[2])) {
      holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red3.setTypeface(Typeface.DEFAULT);
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setVisibility(View.VISIBLE);
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0] + ""String_Node_Str""+ eventKey);
    holder.blue1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.blue1.setTypeface(Typeface.DEFAULT);
    }
    if (blueTeams.length == 1) {
      holder.blue2.setVisibility(View.GONE);
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue2.setVisibility(View.VISIBLE);
      holder.blue2.setText(blueTeams[1]);
      holder.blue2.setTag(""String_Node_Str"" + blueTeams[1] + ""String_Node_Str""+ eventKey);
      holder.blue2.setOnClickListener(listener);
      if (selectedTeamNumber.equals(blueTeams[1])) {
        holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        holder.blue2.setTypeface(Typeface.DEFAULT);
      }
      if (blueTeams.length == 2) {
        holder.blue3.setVisibility(View.GONE);
      }
 else {
        holder.blue3.setVisibility(View.VISIBLE);
        holder.blue3.setText(blueTeams[2]);
        holder.blue3.setTag(""String_Node_Str"" + blueTeams[2] + ""String_Node_Str""+ eventKey);
        holder.blue3.setOnClickListener(listener);
        if (selectedTeamNumber.equals(blueTeams[2])) {
          holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
        }
 else {
          holder.blue3.setTypeface(Typeface.DEFAULT);
        }
      }
    }
    holder.redScore.setText(redScore);
    holder.blueScore.setText(blueScore);
  }
  return convertView;
}","@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitleContainer=(RelativeLayout)convertView.findViewById(R.id.match_title_container);
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.redAlliance=convertView.findViewById(R.id.red_alliance);
    holder.blueAlliance=convertView.findViewById(R.id.blue_alliance);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
    holder.header=(TableRow)convertView.findViewById(R.id.match_header);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.matchTitle.setTag(matchKey);
  holder.red1.setLines(1);
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        holder.blueAlliance.setBackgroundResource(R.drawable.blue_border);
        holder.redAlliance.setBackgroundResource(R.drawable.no_border);
      }
 else       if (bScore < rScore) {
        holder.redAlliance.setBackgroundResource(R.drawable.red_border);
        holder.blueAlliance.setBackgroundResource(R.drawable.no_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
 else {
    holder.redAlliance.setBackgroundResource(R.drawable.no_border);
    holder.blueAlliance.setBackgroundResource(R.drawable.no_border);
  }
  if (videoKey != null && showVideoIcon) {
    holder.videoIcon.setVisibility(View.VISIBLE);
  }
 else {
    holder.videoIcon.setVisibility(View.GONE);
  }
  if (showMatchHeader) {
    holder.header.setVisibility(View.VISIBLE);
    holder.matchTitleContainer.setVisibility(View.GONE);
  }
 else {
    holder.header.setVisibility(View.GONE);
    holder.matchTitleContainer.setVisibility(View.VISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamAtEventClickListener listener=new TeamAtEventClickListener(context);
  String eventKey=matchKey.split(""String_Node_Str"")[0];
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setVisibility(View.VISIBLE);
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0] + ""String_Node_Str""+ eventKey);
    holder.red1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red1.setTypeface(Typeface.DEFAULT);
    }
  }
  if (redTeams.length == 1) {
    holder.red2.setVisibility(View.GONE);
    holder.red3.setVisibility(View.GONE);
  }
 else {
    holder.red2.setVisibility(View.VISIBLE);
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1] + ""String_Node_Str""+ eventKey);
    holder.red2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red2.setTypeface(Typeface.DEFAULT);
    }
  }
  if (redTeams.length == 2) {
    holder.red3.setVisibility(View.GONE);
  }
 else {
    holder.red3.setVisibility(View.VISIBLE);
    holder.red3.setText(redTeams[2]);
    holder.red3.setTag(""String_Node_Str"" + redTeams[2] + ""String_Node_Str""+ eventKey);
    holder.red3.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[2])) {
      holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.red3.setTypeface(Typeface.DEFAULT);
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setVisibility(View.VISIBLE);
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0] + ""String_Node_Str""+ eventKey);
    holder.blue1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
 else {
      holder.blue1.setTypeface(Typeface.DEFAULT);
    }
    if (blueTeams.length == 1) {
      holder.blue2.setVisibility(View.GONE);
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue2.setVisibility(View.VISIBLE);
      holder.blue2.setText(blueTeams[1]);
      holder.blue2.setTag(""String_Node_Str"" + blueTeams[1] + ""String_Node_Str""+ eventKey);
      holder.blue2.setOnClickListener(listener);
      if (selectedTeamNumber.equals(blueTeams[1])) {
        holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
      }
 else {
        holder.blue2.setTypeface(Typeface.DEFAULT);
      }
      if (blueTeams.length == 2) {
        holder.blue3.setVisibility(View.GONE);
      }
 else {
        holder.blue3.setVisibility(View.VISIBLE);
        holder.blue3.setText(blueTeams[2]);
        holder.blue3.setTag(""String_Node_Str"" + blueTeams[2] + ""String_Node_Str""+ eventKey);
        holder.blue3.setOnClickListener(listener);
        if (selectedTeamNumber.equals(blueTeams[2])) {
          holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
        }
 else {
          holder.blue3.setTypeface(Typeface.DEFAULT);
        }
      }
    }
    holder.redScore.setText(redScore);
    holder.blueScore.setText(blueScore);
  }
  return convertView;
}",0.9877758634834688
33761,"public EventsByWeekFragmentPagerAdapter(Context c,FragmentManager fm,int year,PagerSlidingTabStrip tabs,ViewPager pager){
  super(fm);
  mYear=year;
  thisYearsWeekLabels=new ArrayList<>();
  selectedTab=String.format(EventHelper.REGIONAL_LABEL,1);
  thisYearsWeekLabels.add(selectedTab);
  this.tabs=tabs;
  this.pager=pager;
  mCount=1;
  DownloadEventList task=new DownloadEventList(c,this);
  task.execute(year);
}","public EventsByWeekFragmentPagerAdapter(Context c,FragmentManager fm,int year,PagerSlidingTabStrip tabs,ViewPager pager){
  super(fm);
  mYear=year;
  thisYearsWeekLabels=new ArrayList<>();
  fragments=new ArrayList<>();
  selectedTab=String.format(EventHelper.REGIONAL_LABEL,1);
  thisYearsWeekLabels.add(selectedTab);
  this.tabs=tabs;
  this.pager=pager;
  mCount=1;
  DownloadEventList task=new DownloadEventList(c,this);
  task.execute(year);
  firstTabChanged=false;
}",0.937219730941704
33762,"public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
  tabs.notifyDataSetChanged();
}","public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
  tabs.notifyDataSetChanged();
  if (firstTabChanged) {
    fragments.get(0).updateHeader(getPageTitle(0).toString());
  }
}",0.684931506849315
33763,"@Override public Fragment getItem(int position){
  return EventListFragment.newInstance(mYear,position,null,getPageTitle(position).toString());
}","@Override public Fragment getItem(int position){
  EventListFragment f=EventListFragment.newInstance(mYear,position,null,getPageTitle(position).toString());
  fragments.add(position,f);
  return f;
}",0.8255813953488372
33764,"public void setLabels(ArrayList<String> labels){
  selectedTab=getPageTitle(pager.getCurrentItem()).toString();
  thisYearsWeekLabels=labels;
  mCount=thisYearsWeekLabels.size();
  pager.setAdapter(this);
  notifyDataSetChanged();
  pager.setCurrentItem(thisYearsWeekLabels.indexOf(selectedTab));
}","public void setLabels(ArrayList<String> labels){
  firstTabChanged=!getPageTitle(0).equals(labels.get(0));
  selectedTab=getPageTitle(pager.getCurrentItem()).toString();
  thisYearsWeekLabels=labels;
  mCount=thisYearsWeekLabels.size();
  pager.setAdapter(this);
  notifyDataSetChanged();
  pager.setCurrentItem(thisYearsWeekLabels.indexOf(selectedTab));
}",0.91131498470948
33765,"public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
  tabs.notifyDataSetChanged();
  if (tabsChanged) {
    for (int i=0; i < fragments.size(); i++) {
      fragments.get(i).updateHeader(getPageTitle(i).toString());
    }
  }
}","public void notifyDataSetChanged(){
  super.notifyDataSetChanged();
  tabs.notifyDataSetChanged();
  for (int i=0; i < fragments.size(); i++) {
    fragments.get(i).updateHeader(getPageTitle(i).toString());
  }
}",0.931868131868132
33766,"public void setLabels(ArrayList<String> labels){
  tabsChanged=!thisYearsWeekLabels.equals(labels);
  selectedTab=getPageTitle(pager.getCurrentItem()).toString();
  thisYearsWeekLabels=labels;
  mCount=thisYearsWeekLabels.size();
  pager.setAdapter(this);
  notifyDataSetChanged();
  pager.setCurrentItem(thisYearsWeekLabels.indexOf(selectedTab));
}","public void setLabels(ArrayList<String> labels){
  tabsChanged=labels.size() != thisYearsWeekLabels.size() || !thisYearsWeekLabels.equals(labels);
  selectedTab=getPageTitle(pager.getCurrentItem()).toString();
  thisYearsWeekLabels=labels;
  mCount=thisYearsWeekLabels.size();
  pager.setAdapter(this);
  notifyDataSetChanged();
  pager.setCurrentItem(thisYearsWeekLabels.indexOf(selectedTab));
}",0.9369127516778524
33767,"@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    mWeek=EventHelper.weekNumFromLabel(mYear,mHeader);
  }
  if (mHeader.equals(""String_Node_Str"")) {
    Event ss=Database.getInstance(activity).getEventsTable().get(""String_Node_Str"");
  }
  events=new ArrayList<>();
  APIResponse<ArrayList<Event>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.Events.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek,forceFromCache);
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
      ArrayList<Event> eventData=response.getData();
      if (eventData != null && !eventData.isEmpty()) {
        events=EventHelper.renderEventListForWeek(eventData);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    try {
      response=DataManager.Teams.getEventsForTeam(mFragment.getActivity(),mTeamKey,mYear,forceFromCache);
      ArrayList<Event> eventsArray=response.getData();
      if (eventsArray != null && !eventsArray.isEmpty()) {
        events=EventHelper.renderEventListForTeam(eventsArray);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    mWeek=EventHelper.weekNumFromLabel(mYear,mHeader);
  }
  events=new ArrayList<>();
  APIResponse<ArrayList<Event>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.Events.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek,forceFromCache);
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
      ArrayList<Event> eventData=response.getData();
      if (eventData != null && !eventData.isEmpty()) {
        events=EventHelper.renderEventListForWeek(eventData);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    try {
      response=DataManager.Teams.getEventsForTeam(mFragment.getActivity(),mTeamKey,mYear,forceFromCache);
      ArrayList<Event> eventsArray=response.getData();
      if (eventsArray != null && !eventsArray.isEmpty()) {
        events=EventHelper.renderEventListForTeam(eventsArray);
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}",0.9616947185142194
33768,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      noDataText.setVisibility(View.GONE);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"");
      if (mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete((RefreshListener)mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (true || view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      noDataText.setVisibility(View.GONE);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      Log.i(Constants.REFRESH_LOG,""String_Node_Str"");
      if (mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete((RefreshListener)mFragment);
      }
    }
  }
}",0.9970479704797048
33769,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mYear=getArguments().getInt(YEAR,-1);
  mWeek=getArguments().getInt(WEEK,-1);
  mTeamKey=getArguments().getString(TEAM_KEY);
  mHeader=getArguments().getString(WEEK_HEADER);
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mYear=getArguments().getInt(YEAR,-1);
  mWeek=getArguments().getInt(WEEK,-1);
  mTeamKey=getArguments().getString(TEAM_KEY);
  mHeader=getArguments().getString(WEEK_HEADER);
  parent=getActivity();
  if (parent instanceof RefreshableHostActivity) {
    ((RefreshableHostActivity)parent).registerRefreshableActivityListener(this);
  }
  setRetainInstance(false);
}",0.96875
33770,"public void updateHeader(String newWeekHeader){
  mHeader=newWeekHeader;
  onRefreshStart();
}","public void updateHeader(String newWeekHeader){
  if (!newWeekHeader.equals(mHeader)) {
    mHeader=newWeekHeader;
    onRefreshStart();
  }
}",0.7966101694915254
33771,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  mViewPager.setOffscreenPageLimit(50);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  pagerAdapter=new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear,tabs,mViewPager);
  mViewPager.setAdapter(pagerAdapter);
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  tabs.setViewPager(mViewPager);
  int currentWeek=Utilities.getCurrentCompWeek();
  int currentYear=Utilities.getCurrentYear();
  int week1Index=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getLabels().indexOf(String.format(EventHelper.REGIONAL_LABEL,1));
  if (currentYear != mYear) {
    mViewPager.setCurrentItem(week1Index);
  }
 else {
    mViewPager.setCurrentItem((currentWeek > Utilities.getCmpWeek(mYear) + 1) ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  mViewPager.setOffscreenPageLimit(50);
  mTabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  if (pagerAdapter == null) {
    pagerAdapter=new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear,mTabs,mViewPager);
  }
  mViewPager.setAdapter(pagerAdapter);
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  mTabs.setViewPager(mViewPager);
  int currentWeek=Utilities.getCurrentCompWeek();
  int currentYear=Utilities.getCurrentYear();
  int week1Index=pagerAdapter.getLabels().indexOf(String.format(EventHelper.REGIONAL_LABEL,1));
  if (currentYear != mYear) {
    mViewPager.setCurrentItem(week1Index);
  }
 else {
    mViewPager.setCurrentItem((currentWeek > Utilities.getCmpWeek(mYear) + 1) ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
  }
  return view;
}",0.9488611946712504
33772,"@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  mCurrentSelectedYear=Constants.MAX_COMP_YEAR - position;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + mCurrentSelectedYear);
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,EventsByWeekFragment.newInstance(mCurrentSelectedYear),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}","@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  int selectedYear=Constants.MAX_COMP_YEAR - position;
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + selectedYear);
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,EventsByWeekFragment.newInstance(selectedYear),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}",0.9724473257698542
33773,"private void switchToModeForId(int id){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    fragment=EventsByWeekFragment.newInstance(mCurrentSelectedYear);
  break;
case R.id.nav_item_teams:
fragment=new AllTeamsListFragment();
break;
case R.id.nav_item_insights:
fragment=new InsightsFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
}","private void switchToModeForId(int id){
  Fragment fragment;
switch (id) {
default :
case R.id.nav_item_events:
    fragment=EventsByWeekFragment.newInstance(Constants.MAX_COMP_YEAR - mCurrentSelectedYearPosition);
  break;
case R.id.nav_item_teams:
fragment=new AllTeamsListFragment();
break;
case R.id.nav_item_insights:
fragment=new InsightsFragment();
break;
case R.id.nav_item_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
}
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemId=id;
}",0.9738751814223512
33774,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(STATE_SELECTED_YEAR_SPINNER_POSITION,getActionBar().getSelectedNavigationIndex());
  outState.putInt(STATE_SELECTED_NAV_ID,mCurrentSelectedNavigationItemId);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(STATE_SELECTED_YEAR_SPINNER_POSITION,mCurrentSelectedYearPosition);
  outState.putInt(STATE_SELECTED_NAV_ID,mCurrentSelectedNavigationItemId);
}",0.8677839851024208
33775,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(SELECTED_YEAR,getActionBar().getSelectedNavigationIndex());
  outState.putInt(SELECTED_TAB,mSelectedTab);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putInt(SELECTED_YEAR,mYear);
  outState.putInt(SELECTED_TAB,mSelectedTab);
}",0.8990384615384616
33776,"@Override public void onRefreshStart(){
  Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + mEventKey + ""String_Node_Str"");
  mTask=new PopulateEventStats(this,true);
  mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
}","@Override public void onRefreshStart(){
  Log.i(Constants.REFRESH_LOG,""String_Node_Str"" + mEventKey + ""String_Node_Str"");
  mTask=new PopulateEventStats(this,true,statSortCategory);
  mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
}",0.9650924024640656
33777,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
switch (id) {
case R.id.action_sort_opr:
    mTask=new PopulateEventStats(this,true,""String_Node_Str"");
  mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
return true;
case R.id.action_sort_dpr:
mTask=new PopulateEventStats(this,true,""String_Node_Str"");
mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
return true;
case R.id.action_sort_ccwm:
mTask=new PopulateEventStats(this,true,""String_Node_Str"");
mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_sort_opr)   statSortCategory=""String_Node_Str"";
 else   if (id == R.id.action_sort_dpr)   statSortCategory=""String_Node_Str"";
 else   if (id == R.id.action_sort_ccwm)   statSortCategory=""String_Node_Str"";
 else   return super.onOptionsItemSelected(item);
  mTask=new PopulateEventStats(this,true,statSortCategory);
  mTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,mEventKey);
  return true;
}",0.3514431239388794
33778,"@Override public View getView(final Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_image,null);
    holder=new ViewHolder();
    holder.image_container=(FrameLayout)convertView.findViewById(R.id.image_container);
    holder.image=(ImageView)convertView.findViewById(R.id.image);
    holder.youtube_play_icon=(ImageView)convertView.findViewById(R.id.youtube_play_icon);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  Picasso picasso=Picasso.with(c);
  picasso.load(imageUrl).into(holder.image);
  if (isVideo) {
    holder.youtube_play_icon.setVisibility(View.VISIBLE);
  }
  holder.image_container.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      c.startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(linkUrl)));
    }
  }
);
  return convertView;
}","@Override public View getView(final Context c,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_image,null);
    holder=new ViewHolder();
    holder.image_container=(FrameLayout)convertView.findViewById(R.id.image_container);
    holder.image=(ImageView)convertView.findViewById(R.id.image);
    holder.youtube_play_icon=(ImageView)convertView.findViewById(R.id.youtube_play_icon);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  Picasso picasso=Picasso.with(c);
  picasso.load(imageUrl).into(holder.image);
  if (isVideo) {
    holder.youtube_play_icon.setVisibility(View.VISIBLE);
  }
 else {
    holder.youtube_play_icon.setVisibility(View.GONE);
  }
  holder.image_container.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      c.startActivity(new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(linkUrl)));
    }
  }
);
  return convertView;
}",0.9682915286322764
33779,"@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_team,null);
    holder=new ViewHolder();
    holder.teamNumber=(TextView)convertView.findViewById(R.id.team_number);
    holder.teamName=(TextView)convertView.findViewById(R.id.team_name);
    holder.teamLocation=(TextView)convertView.findViewById(R.id.team_location);
    holder.teamInfoDivider=convertView.findViewById(R.id.team_info_divider);
    holder.teamInfo=(ImageView)convertView.findViewById(R.id.team_info);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.teamNumber.setText(""String_Node_Str"" + mTeamNumber);
  if (mTeamName.isEmpty()) {
    holder.teamName.setText(""String_Node_Str"" + mTeamNumber);
  }
 else {
    holder.teamName.setText(mTeamName);
  }
  holder.teamLocation.setText(mTeamLocation);
  if (mShowLinkToTeamDetails) {
    holder.teamInfo.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=ViewTeamActivity.newInstance(context,""String_Node_Str"" + mTeamNumber);
        context.startActivity(intent);
      }
    }
);
  }
 else {
    holder.teamInfoDivider.setVisibility(View.GONE);
    holder.teamInfo.setVisibility(View.GONE);
  }
  return convertView;
}","@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  ViewHolder holder;
  if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
    convertView=inflater.inflate(R.layout.list_item_team,null);
    holder=new ViewHolder();
    holder.teamNumber=(TextView)convertView.findViewById(R.id.team_number);
    holder.teamName=(TextView)convertView.findViewById(R.id.team_name);
    holder.teamLocation=(TextView)convertView.findViewById(R.id.team_location);
    holder.teamInfoDivider=convertView.findViewById(R.id.team_info_divider);
    holder.teamInfo=(ImageView)convertView.findViewById(R.id.team_info);
    convertView.setTag(holder);
  }
 else {
    holder=(ViewHolder)convertView.getTag();
  }
  holder.teamNumber.setText(""String_Node_Str"" + mTeamNumber);
  if (mTeamName.isEmpty()) {
    holder.teamName.setText(""String_Node_Str"" + mTeamNumber);
  }
 else {
    holder.teamName.setText(mTeamName);
  }
  holder.teamLocation.setText(mTeamLocation);
  if (mShowLinkToTeamDetails) {
    holder.teamInfoDivider.setVisibility(View.VISIBLE);
    holder.teamInfo.setVisibility(View.VISIBLE);
    holder.teamInfo.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=ViewTeamActivity.newInstance(context,""String_Node_Str"" + mTeamNumber);
        context.startActivity(intent);
      }
    }
);
  }
 else {
    holder.teamInfoDivider.setVisibility(View.GONE);
    holder.teamInfo.setVisibility(View.GONE);
  }
  return convertView;
}",0.965127864496845
33780,"@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.content,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}","@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}",0.993431855500821
33781,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  break;
case R.id.action_view_team:
int year=Integer.parseInt(eventKey.substring(0,4));
startActivity(ViewTeamActivity.newInstance(this,teamKey,year));
case android.R.id.home:
if (isDrawerOpen()) {
closeDrawer();
return true;
}
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  return true;
case R.id.action_view_team:
int year=Integer.parseInt(eventKey.substring(0,4));
startActivity(ViewTeamActivity.newInstance(this,teamKey,year));
return true;
case android.R.id.home:
if (isDrawerOpen()) {
closeDrawer();
return true;
}
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.96008993816751
33782,"@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.container,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}","@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in_support,R.anim.fade_out_support).replace(R.id.content,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  getActionBar().setSelectedNavigationItem(mCurrentSelectedYearPosition);
  return true;
}",0.993431855500821
33783,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  super.setContentView(R.layout.activity_navigation_drawer);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.nav_drawer_layout);
  onCreateNavigationDrawer();
  mNavDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer_fragment);
  mNavDrawerFragment.setUp(R.id.navigation_drawer_fragment,(DrawerLayout)findViewById(R.id.nav_drawer_layout),mEncourageLearning,mUseActionBarToggle);
  mContentView=(FrameLayout)findViewById(R.id.container);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(IS_DRAWER_OPEN)) {
      if (savedInstanceState.getBoolean(IS_DRAWER_OPEN)) {
        mDrawerLayout.openDrawer(Gravity.LEFT);
      }
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  super.setContentView(R.layout.activity_navigation_drawer);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.nav_drawer_layout);
  onCreateNavigationDrawer();
  mNavDrawerFragment=(NavigationDrawerFragment)getSupportFragmentManager().findFragmentById(R.id.navigation_drawer_fragment);
  mNavDrawerFragment.setUp(R.id.navigation_drawer_fragment,(DrawerLayout)findViewById(R.id.nav_drawer_layout),mEncourageLearning,mUseActionBarToggle);
  mContentView=(FrameLayout)findViewById(R.id.content);
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(IS_DRAWER_OPEN)) {
      if (savedInstanceState.getBoolean(IS_DRAWER_OPEN)) {
        mDrawerLayout.openDrawer(Gravity.LEFT);
      }
    }
  }
}",0.995079950799508
33784,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Database.getInstance(this);
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false)) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
      if (data != null) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          goToHome();
          finish();
          return;
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Database.getInstance(this);
  Log.i(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false)) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
      if (data != null) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          goToHome();
          finish();
          return;
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
  loadFragment=(LoadAllDataTaskFragment)getFragmentManager().findFragmentByTag(LOAD_FRAGMENT_TAG);
  if (loadFragment != null) {
    viewPager.setCurrentItem(1,false);
  }
}",0.952928297755884
33785,"private void beginLoading(){
  new LoadAllData(this).execute();
}","private void beginLoading(){
  Fragment f=new LoadAllDataTaskFragment();
  f.setRetainInstance(true);
  getFragmentManager().beginTransaction().add(f,LOAD_FRAGMENT_TAG).commit();
}",0.473469387755102
33786,"/** 
 * Inflates the specified view into the ""content container"" of the activity. This allows the resuse of a single layout containing a navigation drawer and said container across all instances of this activity. Subclassing activities that call setContentView(...) will have their requested layout inserted into the content container.
 * @param layoutResID id of the view to be inflated into the content container
 */
@Override public void setContentView(int layoutResID){
  getLayoutInflater().inflate(layoutResID,mContentView);
}","/** 
 * Inflates the specified view into the ""content container"" of the activity. This allows the resuse of a single layout containing a navigation drawer and said container across all instances of this activity. Subclassing activities that call setContentView(...) will have their requested layout inserted into the content container.
 * @param layoutResID id of the view to be inflated into the content container
 */
@Override public void setContentView(int layoutResID){
  mContentView.removeAllViews();
  getLayoutInflater().inflate(layoutResID,mContentView);
}",0.9699179580674568
33787,"@Override protected void onProgressUpdate(LoadProgressInfo... values){
  activity.onLoadingProgressUpdate(values[0]);
}",public void onProgressUpdate(LoadProgressInfo info);,0.5497076023391813
33788,"public LoadAllData(LaunchActivity activity){
  this.activity=activity;
}","public LoadAllData(LoadAllDataCallbacks callbacks,Context c){
  this.callbacks=callbacks;
  this.context=c.getApplicationContext();
}",0.448780487804878
33789,"@Override protected Void doInBackground(Void... params){
  if (activity == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    int maxPageNum=0;
    for (int pageNum=0; pageNum < 20; pageNum++) {
      int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
      int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
      start=start == 0 ? 1 : start;
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_teams),start,end)));
      APIResponse<String> teamListResponse;
      teamListResponse=TBAv2.getResponseFromURLOrThrow(activity,String.format(TBAv2.API_URL.get(TBAv2.QUERY.TEAM_LIST),pageNum),false,false);
      JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
      if (responseObject != null) {
        if (responseObject.size() == 0) {
          break;
        }
      }
      maxPageNum=Math.max(maxPageNum,pageNum);
      ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
      teams.addAll(pageTeams);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_events),Integer.toString(year))));
      APIResponse<String> eventListResponse;
      eventListResponse=TBAv2.getResponseFromURLOrThrow(activity,""String_Node_Str"" + year,false,false);
      JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
      if (responseObject instanceof JsonObject) {
        if (((JsonObject)responseObject).has(""String_Node_Str"")) {
          continue;
        }
      }
      ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
      events.addAll(yearEvents);
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,activity.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(activity).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(activity).getEventsTable().storeEvents(events);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(activity).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.commit();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,activity.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,activity.getString(R.string.connection_lost)));
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  if (callbacks == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    int maxPageNum=0;
    for (int pageNum=0; pageNum < 20; pageNum++) {
      int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
      int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
      start=start == 0 ? 1 : start;
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_teams),start,end)));
      APIResponse<String> teamListResponse;
      teamListResponse=TBAv2.getResponseFromURLOrThrow(context,String.format(TBAv2.API_URL.get(TBAv2.QUERY.TEAM_LIST),pageNum),false,false);
      JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
      if (responseObject != null) {
        if (responseObject.size() == 0) {
          break;
        }
      }
      maxPageNum=Math.max(maxPageNum,pageNum);
      ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
      teams.addAll(pageTeams);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(context.getString(R.string.loading_events),Integer.toString(year))));
      APIResponse<String> eventListResponse;
      eventListResponse=TBAv2.getResponseFromURLOrThrow(context,""String_Node_Str"" + year,false,false);
      JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
      if (responseObject instanceof JsonObject) {
        if (((JsonObject)responseObject).has(""String_Node_Str"")) {
          continue;
        }
      }
      ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
      events.addAll(yearEvents);
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,context.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(context).getEventsTable().storeEvents(events);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.commit();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,context.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,context.getString(R.string.connection_lost)));
    Database.getInstance(context).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(context).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}",0.9644450842090112
33790,"public void storeTeams(ArrayList<Team> teams){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.tryAcquire(10,TimeUnit.SECONDS);
    db.beginTransaction();
    for (    Team team : teams) {
      db.insert(TABLE_TEAMS,null,team.getParams());
      insertSearchItemTeam(team,false);
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}","public void storeTeams(ArrayList<Team> teams){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.tryAcquire(10,TimeUnit.SECONDS);
    db.beginTransaction();
    for (    Team team : teams) {
      try {
        if (!unsafeExists(team.getTeamKey())) {
          db.insert(TABLE_TEAMS,null,team.getParams());
          insertSearchItemTeam(team,false);
        }
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}",0.8476118271417741
33791,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_event);
  if (getIntent().getExtras() != null && getIntent().getExtras().containsKey(EVENTKEY)) {
    mEventKey=getIntent().getExtras().getString(EVENTKEY,""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setAdapter(new ViewEventFragmentPagerAdapter(getSupportFragmentManager(),mEventKey));
  pager.setOffscreenPageLimit(5);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  setupActionBar();
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  setBeamUri(String.format(NfcUris.URI_EVENT,mEventKey));
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_event);
  if (getIntent().getExtras() != null && getIntent().getExtras().containsKey(EVENTKEY)) {
    mEventKey=getIntent().getExtras().getString(EVENTKEY,""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setAdapter(new ViewEventFragmentPagerAdapter(getSupportFragmentManager(),mEventKey));
  pager.setOffscreenPageLimit(5);
  pager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  setupActionBar();
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  setBeamUri(String.format(NfcUris.URI_EVENT,mEventKey));
}",0.9704260651629072
33792,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.6539235412474849
33793,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_team);
  mTeamKey=getIntent().getStringExtra(TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
  }
 else {
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,Calendar.getInstance().get(Calendar.YEAR));
    }
 else {
      mYear=Calendar.getInstance().get(Calendar.YEAR);
    }
    mCurrentSelectedYearPosition=0;
    mSelectedTab=0;
  }
  pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setOffscreenPageLimit(3);
  pager.setAdapter(new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey));
  pager.setOnPageChangeListener(this);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  tabs.setOnPageChangeListener(this);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  new MakeActionBarDropdownForTeam(this).execute(mTeamKey);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_view_team);
  mTeamKey=getIntent().getStringExtra(TEAM_KEY);
  if (mTeamKey == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(SELECTED_TAB)) {
      mSelectedTab=savedInstanceState.getInt(SELECTED_TAB);
    }
    if (savedInstanceState.containsKey(SELECTED_YEAR)) {
      mYear=savedInstanceState.getInt(SELECTED_YEAR);
    }
  }
 else {
    if (getIntent() != null && getIntent().getExtras() != null && getIntent().getExtras().containsKey(TEAM_YEAR)) {
      mYear=getIntent().getIntExtra(TEAM_YEAR,Calendar.getInstance().get(Calendar.YEAR));
    }
 else {
      mYear=Calendar.getInstance().get(Calendar.YEAR);
    }
    mCurrentSelectedYearPosition=0;
    mSelectedTab=0;
  }
  pager=(ViewPager)findViewById(R.id.view_pager);
  pager.setOffscreenPageLimit(3);
  pager.setPageMargin(Utilities.getPixelsFromDp(this,16));
  pager.setAdapter(new ViewTeamFragmentPagerAdapter(getSupportFragmentManager(),mTeamKey));
  pager.setOnPageChangeListener(this);
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)findViewById(R.id.tabs);
  tabs.setViewPager(pager);
  tabs.setOnPageChangeListener(this);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
  new MakeActionBarDropdownForTeam(this).execute(mTeamKey);
}",0.9812995245641838
33794,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.6532258064516129
33795,"@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.expandable_list_group,null);
  }
  ListGroup group=(ListGroup)getGroup(groupPosition);
  ((CheckedTextView)convertView.findViewById(R.id.matchlist_group)).setText(group.string);
  ((CheckedTextView)convertView.findViewById(R.id.matchlist_group)).setChecked(isExpanded);
  return convertView;
}","@Override public View getGroupView(int groupPosition,boolean isExpanded,View convertView,ViewGroup parent){
  if (convertView == null) {
    convertView=inflater.inflate(R.layout.expandable_list_group,null);
  }
  ListGroup group=(ListGroup)getGroup(groupPosition);
  ((TextView)convertView.findViewById(R.id.group_name)).setText(group.string);
  return convertView;
}",0.8119047619047619
33796,"@Override protected void onPreExecute(){
  super.onPreExecute();
  showLastMatch=showNextMatch=showRanks=showStats=false;
  activity.showMenuProgressBar();
}","@Override protected void onPreExecute(){
  super.onPreExecute();
  showLastMatch=showNextMatch=showRanks=showStats=false;
  activity.showMenuProgressBar();
  View view=mFragment.getView();
  eventName=(TextView)view.findViewById(R.id.event_name);
  eventDate=(TextView)view.findViewById(R.id.event_date);
  eventLoc=(TextView)view.findViewById(R.id.event_location);
  eventVenue=(TextView)view.findViewById(R.id.event_venue);
  nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
  lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
  topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
  topOpr=(LinearLayout)view.findViewById(R.id.event_top_opr_container);
}",0.3528089887640449
33797,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  APIResponse<Event> eventResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  APIResponse<ArrayList<JsonArray>> rankResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<JsonObject> statsResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<ArrayList<Match>> matchResult=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  if (view != null && activity != null && eventKey != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    eventVenue=(TextView)view.findViewById(R.id.event_venue);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.event_top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      eventResponse=DataManager.Events.getEvent(activity,eventKey,forceFromCache);
      event=eventResponse.getData();
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        rankResponse=DataManager.Events.getEventRankings(activity,eventKey,forceFromCache);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString());
          if (i < Math.min(6,rankList.size()) - 1) {
            rankString+=""String_Node_Str"";
          }
        }
        ranks.setText(rankString);
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        statsResponse=DataManager.Events.getEventStats(activity,eventKey,forceFromCache);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=(i + 1) + ""String_Node_Str"" + opr.get(i).getKey();
            if (i < Math.min(5,opr.size()) - 1) {
              statsString+=""String_Node_Str"";
            }
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        matchResult=DataManager.Events.getMatchList(activity,eventKey,forceFromCache);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getVenue().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.mergeCodes(eventResponse.getCode(),rankResponse.getCode(),matchResult.getCode(),statsResponse.getCode());
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  APIResponse<Event> eventResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  APIResponse<ArrayList<JsonArray>> rankResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<JsonObject> statsResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<ArrayList<Match>> matchResult=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  if (activity != null && eventKey != null) {
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      eventResponse=DataManager.Events.getEvent(activity,eventKey,forceFromCache);
      event=eventResponse.getData();
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        rankResponse=DataManager.Events.getEventRankings(activity,eventKey,forceFromCache);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString());
          if (i < Math.min(6,rankList.size()) - 1) {
            rankString+=""String_Node_Str"";
          }
        }
        ranks.setText(rankString);
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        statsResponse=DataManager.Events.getEventStats(activity,eventKey,forceFromCache);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=(i + 1) + ""String_Node_Str"" + opr.get(i).getKey();
            if (i < Math.min(5,opr.size()) - 1) {
              statsString+=""String_Node_Str"";
            }
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        matchResult=DataManager.Events.getMatchList(activity,eventKey,forceFromCache);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
  }
  return APIResponse.mergeCodes(eventResponse.getCode(),rankResponse.getCode(),matchResult.getCode(),statsResponse.getCode());
}",0.8603386351975372
33798,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(event.getEventName());
    eventName.setText(event.getEventName());
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (event.getVenue().isEmpty() && activity.findViewById(R.id.event_venue_container) != null) {
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
 else {
      eventVenue.setText(event.getVenue());
      if (activity.findViewById(R.id.event_location_container) != null) {
        activity.findViewById(R.id.event_location_container).setVisibility(View.GONE);
      }
    }
    if (event.getLocation().isEmpty() && activity.findViewById(R.id.event_location_container) != null) {
      activity.findViewById(R.id.event_location_container).setVisibility(View.GONE);
    }
 else {
      eventLoc.setText(event.getLocation());
    }
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(event.getEventName());
    eventName.setText(event.getEventName());
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (!event.getVenue().isEmpty()) {
      eventVenue.setText(event.getVenue());
    }
 else     if (!event.getLocation().isEmpty()) {
      eventVenue.setText(event.getLocation());
    }
 else {
      eventVenue.setText(R.string.no_location_available);
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!event.getVenue().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getVenue().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!event.getLocation().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}",0.6656905807711079
33799,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragmet_team_list_fragment_pager,container,false);
  mViewPager=(ViewPager)v.findViewById(R.id.team_pager);
  mViewPager.setAdapter(new TeamListFragmentPagerAdapter(getChildFragmentManager()));
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)v.findViewById(R.id.team_pager_tabs);
  tabs.setViewPager(mViewPager);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragmet_team_list_fragment_pager,container,false);
  mViewPager=(ViewPager)v.findViewById(R.id.team_pager);
  mViewPager.setAdapter(new TeamListFragmentPagerAdapter(getChildFragmentManager()));
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)v.findViewById(R.id.team_pager_tabs);
  tabs.setViewPager(mViewPager);
  return v;
}",0.9279368213228036
33800,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  mViewPager.setOffscreenPageLimit(50);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  mViewPager.setAdapter(new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear));
  tabs.setViewPager(mViewPager);
  int currentWeek=EventHelper.competitionWeek(new Date());
  int currentYear=Calendar.getInstance().get(Calendar.YEAR);
  int week1Index=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getLabels().indexOf(String.format(EventHelper.REGIONAL_LABEL,1));
  if (currentYear != mYear) {
    mViewPager.setCurrentItem(week1Index);
  }
 else {
    mViewPager.setCurrentItem((currentWeek > Utilities.getCmpWeek(mYear) + 1) ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  mViewPager.setOffscreenPageLimit(50);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  mViewPager.setAdapter(new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear));
  mViewPager.setPageMargin(Utilities.getPixelsFromDp(getActivity(),16));
  tabs.setViewPager(mViewPager);
  int currentWeek=EventHelper.competitionWeek(new Date());
  int currentYear=Calendar.getInstance().get(Calendar.YEAR);
  int week1Index=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getLabels().indexOf(String.format(EventHelper.REGIONAL_LABEL,1));
  if (currentYear != mYear) {
    mViewPager.setCurrentItem(week1Index);
  }
 else {
    mViewPager.setCurrentItem((currentWeek > Utilities.getCmpWeek(mYear) + 1) ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
  }
  return view;
}",0.967512238540276
33801,"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_opr_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    return;
  }
  if (v.getTag() != null) {
    PackageManager manager=getActivity().getPackageManager();
    String uri=v.getTag().toString();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_opr_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    PackageManager manager=getActivity().getPackageManager();
    String uri=v.getTag().toString();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}",0.9767741935483872
33802,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_venue_container).setOnClickListener(this);
  info.findViewById(R.id.event_location_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_opr_container).setOnClickListener(this);
  return info;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_venue_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_opr_container).setOnClickListener(this);
  return info;
}",0.877950101146325
33803,"@Override protected void onPreExecute(){
  super.onPreExecute();
  showLastMatch=showNextMatch=showRanks=showStats=false;
  activity.showMenuProgressBar();
  View view=mFragment.getView();
  eventName=(TextView)view.findViewById(R.id.event_name);
  eventDate=(TextView)view.findViewById(R.id.event_date);
  eventLoc=(TextView)view.findViewById(R.id.event_location);
  eventVenue=(TextView)view.findViewById(R.id.event_venue);
  nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
  lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
  topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
  topOpr=(LinearLayout)view.findViewById(R.id.event_top_opr_container);
}","@Override protected void onPreExecute(){
  super.onPreExecute();
  showLastMatch=showNextMatch=showRanks=showStats=false;
  activity.showMenuProgressBar();
  View view=mFragment.getView();
  eventName=(TextView)view.findViewById(R.id.event_name);
  eventDate=(TextView)view.findViewById(R.id.event_date);
  eventLoc=(TextView)view.findViewById(R.id.event_location);
  eventVenue=(TextView)view.findViewById(R.id.event_venue);
  nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
  lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
  topTeamsContainer=view.findViewById(R.id.event_top_teams_container);
  topOprsContainer=view.findViewById(R.id.event_top_oprs_container);
  topTeams=(TextView)view.findViewById(R.id.event_top_teams);
  topOprs=(TextView)view.findViewById(R.id.event_top_oprs);
}",0.8316455696202532
33804,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  APIResponse<Event> eventResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  APIResponse<ArrayList<JsonArray>> rankResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<JsonObject> statsResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<ArrayList<Match>> matchResult=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  if (activity != null && eventKey != null) {
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      eventResponse=DataManager.Events.getEvent(activity,eventKey,forceFromCache);
      event=eventResponse.getData();
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        rankResponse=DataManager.Events.getEventRankings(activity,eventKey,forceFromCache);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString());
          if (i < Math.min(6,rankList.size()) - 1) {
            rankString+=""String_Node_Str"";
          }
        }
        ranks.setText(rankString);
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        statsResponse=DataManager.Events.getEventStats(activity,eventKey,forceFromCache);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=(i + 1) + ""String_Node_Str"" + opr.get(i).getKey();
            if (i < Math.min(5,opr.size()) - 1) {
              statsString+=""String_Node_Str"";
            }
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        matchResult=DataManager.Events.getMatchList(activity,eventKey,forceFromCache);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
  }
  return APIResponse.mergeCodes(eventResponse.getCode(),rankResponse.getCode(),matchResult.getCode(),statsResponse.getCode());
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  APIResponse<Event> eventResponse=new APIResponse<>(null,APIResponse.CODE.NODATA);
  APIResponse<ArrayList<JsonArray>> rankResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<JsonObject> statsResponse=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  APIResponse<ArrayList<Match>> matchResult=new APIResponse<>(null,APIResponse.CODE.CACHED304);
  if (activity != null && eventKey != null) {
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      eventResponse=DataManager.Events.getEvent(activity,eventKey,forceFromCache);
      event=eventResponse.getData();
      if (isCancelled()) {
        return APIResponse.CODE.NODATA;
      }
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      try {
        rankResponse=DataManager.Events.getEventRankings(activity,eventKey,forceFromCache);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
          if (i < Math.min(6,rankList.size()) - 1) {
            rankString+=""String_Node_Str"";
          }
        }
        rankString.trim();
        topTeamsString=rankString;
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      try {
        statsResponse=DataManager.Events.getEventStats(activity,eventKey,forceFromCache);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=(i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"";
            if (i < Math.min(5,opr.size()) - 1) {
              statsString+=""String_Node_Str"";
            }
          }
          statsString.trim();
          topOprsString=statsString;
        }
 else {
          showStats=false;
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        matchResult=DataManager.Events.getMatchList(activity,eventKey,forceFromCache);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
        if (isCancelled()) {
          return APIResponse.CODE.NODATA;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
  }
  return APIResponse.mergeCodes(eventResponse.getCode(),rankResponse.getCode(),matchResult.getCode(),statsResponse.getCode());
}",0.9730755545012454
33805,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(event.getEventName());
    eventName.setText(event.getEventName());
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (!event.getVenue().isEmpty()) {
      eventVenue.setText(event.getVenue());
    }
 else     if (!event.getLocation().isEmpty()) {
      eventVenue.setText(event.getLocation());
    }
 else {
      eventVenue.setText(R.string.no_location_available);
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!event.getVenue().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getVenue().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!event.getLocation().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    activity.setActionBarTitle(event.getEventName());
    eventName.setText(event.getEventName());
    if (event.getDateString().isEmpty()) {
      activity.findViewById(R.id.event_date_container).setVisibility(View.GONE);
    }
 else {
      eventDate.setText(event.getDateString());
    }
    if (!event.getVenue().isEmpty()) {
      eventVenue.setText(event.getVenue());
    }
 else     if (!event.getLocation().isEmpty()) {
      eventVenue.setText(event.getLocation());
    }
 else {
      eventVenue.setText(R.string.no_location_available);
      activity.findViewById(R.id.event_venue_container).setVisibility(View.GONE);
    }
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeamsContainer.setVisibility(View.VISIBLE);
      topTeams.setText(Html.fromHtml(topTeamsString));
    }
    if (showStats) {
      topOprsContainer.setVisibility(View.VISIBLE);
      topOprs.setText(Html.fromHtml(topOprsString));
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.VISIBLE);
      view.setFocusable(true);
      view.setClickable(true);
      if (!event.getVenue().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getVenue().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else       if (!event.getLocation().isEmpty()) {
        view.findViewById(R.id.event_venue_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        view.findViewById(R.id.event_venue_container).setTag(null);
        view.findViewById(R.id.event_venue_nav_arrow).setVisibility(View.GONE);
        view.setFocusable(false);
        view.setClickable(false);
      }
      view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
      view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
      view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
    if (c == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateEventInfo secondLoad=new PopulateEventInfo(mFragment,false);
      mFragment.updateTask(secondLoad);
      secondLoad.execute(eventKey);
    }
 else {
      if (mFragment instanceof RefreshListener) {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
        activity.notifyRefreshComplete(mFragment);
      }
    }
  }
}",0.963332857754316
33806,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!(parent.getAdapter() instanceof ListViewAdapter)) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return;
      }
      Object item=((ListViewAdapter)parent.getAdapter()).getItem(position);
      if (item != null && item instanceof ListElement) {
        Intent intent;
        String eventKey=((ListElement)item).getKey();
        if (mTeamKey == null || mTeamKey.isEmpty()) {
          intent=ViewEventActivity.newInstance(getActivity(),eventKey);
        }
 else {
          intent=TeamAtEventActivity.newInstance(getActivity(),eventKey,mTeamKey);
        }
        startActivity(intent);
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
  }
);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!(parent.getAdapter() instanceof ListViewAdapter)) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return;
      }
      Object item=((ListViewAdapter)parent.getAdapter()).getItem(position);
      if (item != null && item instanceof ListElement) {
        Intent intent;
        String eventKey=((ListElement)item).getKey();
        if (mTeamKey == null || mTeamKey.isEmpty()) {
          intent=ViewEventActivity.newInstance(getActivity(),eventKey);
        }
 else {
          intent=TeamAtEventActivity.newInstance(getActivity(),eventKey,mTeamKey);
        }
        startActivity(intent);
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
  }
);
  return v;
}",0.9955323901712584
33807,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setFastScrollAlwaysVisible(true);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((TeamCursorAdapter)adapterView.getAdapter()).getKey(position);
      Intent i=new Intent(getActivity(),ViewTeamActivity.class);
      i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
      startActivity(i);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setFastScrollAlwaysVisible(true);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((TeamCursorAdapter)adapterView.getAdapter()).getKey(position);
      Intent i=new Intent(getActivity(),ViewTeamActivity.class);
      i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
      startActivity(i);
    }
  }
);
  return view;
}",0.9923175416133164
33808,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  return view;
}",0.9871244635193132
33809,"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_opr_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    PackageManager manager=getActivity().getPackageManager();
    String uri=v.getTag().toString();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_oprs_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    return;
  }
  if (v.getTag() != null || !v.getTag().toString().isEmpty()) {
    PackageManager manager=getActivity().getPackageManager();
    String uri=v.getTag().toString();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}",0.9993698802772528
33810,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_venue_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_opr_container).setOnClickListener(this);
  return info;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_venue_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_oprs_container).setOnClickListener(this);
  return info;
}",0.9992892679459844
33811,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),eventKey,teamKey));
    }
  }
);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),eventKey,teamKey));
    }
  }
);
  return v;
}",0.9929328621908128
33812,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      if (TeamHelper.validateTeamKey(teamKey) ^ TeamHelper.validateMultiTeamKey(teamKey)) {
        if (TeamHelper.validateMultiTeamKey(teamKey)) {
          teamKey=teamKey.substring(0,teamKey.length() - 1);
        }
        startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      if (TeamHelper.validateTeamKey(teamKey) ^ TeamHelper.validateMultiTeamKey(teamKey)) {
        if (TeamHelper.validateMultiTeamKey(teamKey)) {
          teamKey=teamKey.substring(0,teamKey.length() - 1);
        }
        startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
      }
 else {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
  }
);
  return view;
}",0.9948717948717948
33813,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    progressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  ProgressBar progressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    progressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(TeamAtEventActivity.newInstance(getActivity(),mEventKey,teamKey));
    }
  }
);
  return view;
}",0.993119266055046
33814,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!(parent.getAdapter() instanceof ListViewAdapter)) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return;
      }
      Object item=((ListViewAdapter)parent.getAdapter()).getItem(position);
      if (item != null && item instanceof EventListElement) {
        String eventKey=((ListElement)item).getKey();
        startActivity(TeamAtEventActivity.newInstance(getActivity(),eventKey,mTeamKey));
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
  }
);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.list_view_with_spinner,null);
  mListView=(ListView)v.findViewById(R.id.list);
  mProgressBar=(ProgressBar)v.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!(parent.getAdapter() instanceof ListViewAdapter)) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return;
      }
      Object item=((ListViewAdapter)parent.getAdapter()).getItem(position);
      if (item != null && item instanceof EventListElement) {
        String eventKey=((ListElement)item).getKey();
        startActivity(TeamAtEventActivity.newInstance(getActivity(),eventKey,mTeamKey));
      }
 else {
        Log.d(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
  }
);
  return v;
}",0.9947643979057592
33815,"@Override protected Void doInBackground(Void... params){
  if (activity == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    int maxPageNum=0;
    for (int pageNum=0; pageNum < 20; pageNum++) {
      int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
      int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
      start=start == 0 ? 1 : start;
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_teams),start,end)));
      APIResponse<String> teamListResponse;
      teamListResponse=TBAv2.getResponseFromURLOrThrow(activity,String.format(TBAv2.API_URL.get(TBAv2.QUERY.TEAM_LIST),pageNum),false);
      JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
      if (responseObject != null) {
        if (responseObject.size() == 0) {
          break;
        }
      }
      maxPageNum=Math.max(maxPageNum,pageNum);
      ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
      teams.addAll(pageTeams);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_events),Integer.toString(year))));
      APIResponse<String> eventListResponse;
      eventListResponse=TBAv2.getResponseFromURLOrThrow(activity,""String_Node_Str"" + year,false);
      JsonElement responseObject=new JsonParser().parse(eventListResponse.getData());
      if (responseObject instanceof JsonObject) {
        if (((JsonObject)responseObject).has(""String_Node_Str"")) {
          continue;
        }
      }
      ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
      events.addAll(yearEvents);
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,activity.getString(R.string.loading_almost_finished)));
    Database.getInstance(activity).getTeamsTable().storeTeams(teams);
    Database.getInstance(activity).getEventsTable().storeEvents(events);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(activity).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.commit();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,activity.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,activity.getString(R.string.connection_lost)));
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}","@Override protected Void doInBackground(Void... params){
  if (activity == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  try {
    ArrayList<Team> teams=new ArrayList<>();
    ArrayList<Event> events=new ArrayList<>();
    int maxPageNum=0;
    for (int pageNum=0; pageNum < 20; pageNum++) {
      int start=pageNum * Constants.API_TEAM_LIST_PAGE_SIZE;
      int end=start + Constants.API_TEAM_LIST_PAGE_SIZE - 1;
      start=start == 0 ? 1 : start;
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_teams),start,end)));
      APIResponse<String> teamListResponse;
      teamListResponse=TBAv2.getResponseFromURLOrThrow(activity,String.format(TBAv2.API_URL.get(TBAv2.QUERY.TEAM_LIST),pageNum),false,false);
      JsonArray responseObject=JSONManager.getasJsonArray(teamListResponse.getData());
      if (responseObject != null) {
        if (responseObject.size() == 0) {
          break;
        }
      }
      maxPageNum=Math.max(maxPageNum,pageNum);
      ArrayList<Team> pageTeams=TBAv2.getTeamList(teamListResponse.getData());
      teams.addAll(pageTeams);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,String.format(activity.getString(R.string.loading_events),Integer.toString(year))));
      APIResponse<String> eventListResponse;
      eventListResponse=TBAv2.getResponseFromURLOrThrow(activity,""String_Node_Str"" + year,false,false);
      JsonElement responseObject=JSONManager.getParser().parse(eventListResponse.getData());
      if (responseObject instanceof JsonObject) {
        if (((JsonObject)responseObject).has(""String_Node_Str"")) {
          continue;
        }
      }
      ArrayList<Event> yearEvents=TBAv2.getEventList(eventListResponse.getData());
      events.addAll(yearEvents);
    }
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_LOADING,activity.getString(R.string.loading_almost_finished)));
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(activity).getTeamsTable().storeTeams(teams);
    Log.d(Constants.LOG_TAG,""String_Node_Str"");
    Database.getInstance(activity).getEventsTable().storeEvents(events);
    SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(activity).edit();
    for (int pageNum=0; pageNum <= maxPageNum; pageNum++) {
      editor.putBoolean(DataManager.Teams.ALL_TEAMS_LOADED_TO_DATABASE_FOR_PAGE + pageNum,true);
    }
    for (int year=Constants.FIRST_COMP_YEAR; year < Calendar.getInstance().get(Calendar.YEAR) + 1; year++) {
      editor.putBoolean(DataManager.Events.ALL_EVENTS_LOADED_TO_DATABASE_FOR_YEAR + year,true);
    }
    editor.commit();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_FINISHED,activity.getString(R.string.loading_finished)));
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_NO_CONNECTION,activity.getString(R.string.connection_lost)));
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
  }
catch (  Exception e) {
    e.printStackTrace();
    Database.getInstance(activity).getResponseTable().deleteAllResponses();
    publishProgress(new LoadProgressInfo(LoadProgressInfo.STATE_ERROR,Utilities.exceptionStacktraceToString(e)));
  }
  return null;
}",0.9811486190267428
33816,"public void storeTeams(ArrayList<Team> teams){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.acquire();
    db.beginTransaction();
    for (    Team team : teams) {
      db.insert(TABLE_TEAMS,null,team.getParams());
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}","public void storeTeams(ArrayList<Team> teams){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.acquire();
    db.beginTransaction();
    for (    Team team : teams) {
      db.insert(TABLE_TEAMS,null,team.getParams());
      ContentValues cv=new ContentValues();
      try {
        cv.put(SearchTeam.KEY,team.getTeamKey());
        cv.put(SearchTeam.TITLES,Utilities.getAsciiApproximationOfUnicode(team.getSearchTitles()));
        cv.put(SearchTeam.NUMBER,team.getTeamNumber());
        db.insert(TABLE_SEARCH_TEAMS,null,cv);
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        e.printStackTrace();
      }
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}",0.7084818246614397
33817,"private Database(Context context){
  super(context,DATABASE_NAME,null,DATABASE_VERSION);
  this.context=context;
  db=getWritableDatabase();
  teamsTable=new Teams();
  eventsTable=new Events();
  awardsTable=new Awards();
  matchesTable=new Matches();
  mediasTable=new Medias();
  responseTable=new Response();
  sSemaphore=new Semaphore(1);
}","private Database(Context context){
  super(context,DATABASE_NAME,null,DATABASE_VERSION);
  this.context=context;
  db=getWritableDatabase();
  teamsTable=new Teams();
  eventsTable=new Events();
  awardsTable=new Awards();
  matchesTable=new Matches();
  mediasTable=new Medias();
  responseTable=new Response();
  mSemaphore=new Semaphore(1);
}",0.9971014492753624
33818,"public Semaphore getSemaphore(){
  return sSemaphore;
}","public Semaphore getSemaphore(){
  return mSemaphore;
}",0.9818181818181818
33819,"public void storeEvents(ArrayList<Event> events){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.acquire();
    db.beginTransaction();
    for (    Event event : events) {
      try {
        if (!exists(event.getEventKey())) {
          db.insert(TABLE_MATCHES,null,event.getParams());
        }
 else {
          db.update(TABLE_MATCHES,event.getParams(),KEY + ""String_Node_Str"",new String[]{event.getEventKey()});
        }
      }
 catch (      BasicModel.FieldNotDefinedException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
      }
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}","public void storeEvents(ArrayList<Event> events){
  Semaphore dbSemaphore=null;
  try {
    dbSemaphore=getSemaphore();
    dbSemaphore.acquire();
    db.beginTransaction();
    for (    Event event : events) {
      try {
        db.insert(TABLE_EVENTS,null,event.getParams());
      }
 catch (      Exception e) {
        try {
          db.update(TABLE_EVENTS,event.getParams(),KEY + ""String_Node_Str"",new String[]{event.getEventKey()});
        }
 catch (        BasicModel.FieldNotDefinedException e1) {
          Log.w(Constants.LOG_TAG,""String_Node_Str"");
        }
      }
    }
    db.setTransactionSuccessful();
    db.endTransaction();
  }
 catch (  InterruptedException e) {
    Log.w(""String_Node_Str"",""String_Node_Str"");
  }
 finally {
    if (dbSemaphore != null) {
      dbSemaphore.release();
    }
  }
}",0.9030303030303032
33820,"/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c               App context
 * @param URL             URL to fetch
 * @param forceFromCache  (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
  boolean existsInDb;
  existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Database.getInstance(c).getResponseTable().touchResponse(URL);
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}","/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c               App context
 * @param URL             URL to fetch
 * @param forceFromCache  (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheLocally,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
  boolean existsInDb;
  existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Database.getInstance(c).getResponseTable().touchResponse(URL);
        Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      if (cacheLocally) {
        Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
      }
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}",0.9916090092742528
33821,"public static Event inflateEvent(Cursor data){
  Event event=new Event();
  for (int i=0; i < data.getColumnCount(); i++) {
switch (data.getColumnName(i)) {
case Database.Events.KEY:
      event.setEventKey(data.getString(i));
    break;
case Database.Events.NAME:
  event.setEventName(data.getString(i));
break;
case Database.Events.LOCATION:
event.setLocation(data.getString(i));
break;
case Database.Events.VENUE:
event.setVenue(data.getString(i));
break;
case Database.Events.TYPE:
event.setEventType(data.getString(i));
break;
case Database.Events.DISTRICT:
event.setDistrictEnum(data.getInt(i));
break;
case Database.Events.DISTRICT_STRING:
event.setDistrictTitle(data.getString(i));
break;
case Database.Events.START:
event.setStartDate(new Date(data.getLong(i)));
break;
case Database.Events.END:
event.setEndDate(new Date(data.getLong(i)));
break;
case Database.Events.OFFICIAL:
event.setOfficial(data.getInt(i) == 1);
break;
case Database.Events.WEEK:
event.setCompetitionWeek(data.getInt(i));
break;
case Database.Events.RANKINGS:
JsonArray rankings=JSONManager.getasJsonArray(data.getString(i));
event.setRankings(rankings);
break;
case Database.Events.ALLIANCES:
JsonArray alliances=JSONManager.getasJsonArray(data.getString(i));
event.setAlliances(alliances);
break;
case Database.Events.STATS:
JsonObject stats=JSONManager.getasJsonObject(data.getString(i));
event.setStats(stats);
break;
default :
}
}
return event;
}","public static Event inflateEvent(Cursor data){
  Event event=new Event();
  for (int i=0; i < data.getColumnCount(); i++) {
switch (data.getColumnName(i)) {
case Database.Events.KEY:
      event.setEventKey(data.getString(i));
    break;
case Database.Events.NAME:
  event.setEventName(data.getString(i));
break;
case Database.Events.LOCATION:
event.setLocation(data.getString(i));
break;
case Database.Events.VENUE:
event.setVenue(data.getString(i));
break;
case Database.Events.TYPE:
event.setEventType(data.getInt(i));
break;
case Database.Events.DISTRICT:
event.setDistrictEnum(data.getInt(i));
break;
case Database.Events.DISTRICT_STRING:
event.setDistrictTitle(data.getString(i));
break;
case Database.Events.START:
event.setStartDate(new Date(data.getLong(i)));
break;
case Database.Events.END:
event.setEndDate(new Date(data.getLong(i)));
break;
case Database.Events.OFFICIAL:
event.setOfficial(data.getInt(i) == 1);
break;
case Database.Events.WEEK:
event.setCompetitionWeek(data.getInt(i));
break;
case Database.Events.RANKINGS:
JsonArray rankings=JSONManager.getasJsonArray(data.getString(i));
event.setRankings(rankings);
break;
case Database.Events.ALLIANCES:
JsonArray alliances=JSONManager.getasJsonArray(data.getString(i));
event.setAlliances(alliances);
break;
case Database.Events.STATS:
JsonObject stats=JSONManager.getasJsonObject(data.getString(i));
event.setStats(stats);
break;
default :
}
}
return event;
}",0.9968564442892072
33822,"@Override public int compare(Event event,Event event2){
  try {
    if (event.getEventType() == event2.getEventType()) {
      int districtSort=((Integer)event.getDistrictEnum()).compareTo(event2.getDistrictEnum());
      if (districtSort == 0) {
        return event.getStartDate().compareTo(event2.getStartDate());
      }
 else {
        return districtSort;
      }
    }
 else {
      int typeCompare=event.getEventType().compareTo(event2.getEventType());
      if (typeCompare == 0 && event.getEventType() == EventHelper.TYPE.DISTRICT) {
        return ((Integer)event.getDistrictEnum()).compareTo(event2.getDistrictEnum());
      }
 else {
        return typeCompare;
      }
    }
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + e.getMessage());
    return 0;
  }
}","@Override public int compare(Event event,Event event2){
  try {
    if (event.getEventType() == event2.getEventType()) {
      int districtSort=((Integer)event.getDistrictEnum()).compareTo(event2.getDistrictEnum());
      if (districtSort == 0) {
        int eventSort=event.getStartDate().compareTo(event2.getStartDate());
        if (eventSort == 0) {
          return event.getShortName().compareTo(event2.getShortName());
        }
 else {
          return eventSort;
        }
      }
 else {
        return districtSort;
      }
    }
 else {
      int typeCompare=event.getEventType().compareTo(event2.getEventType());
      if (typeCompare == 0 && event.getEventType() == EventHelper.TYPE.DISTRICT) {
        return ((Integer)event.getDistrictEnum()).compareTo(event2.getDistrictEnum());
      }
 else {
        return typeCompare;
      }
    }
  }
 catch (  BasicModel.FieldNotDefinedException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"" + e.getMessage());
    return 0;
  }
}",0.9017023613399232
33823,"public static APIResponse<ArrayList<Event>> getSimpleEventsInWeek(Context c,int year,int week,boolean loadFromCache) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + week);
  String apiUrl=String.format(TBAv2.API_URL.get(TBAv2.QUERY.EVENT_LIST),year);
  String sqlWhere=Database.Events.YEAR + ""String_Node_Str"" + Database.Events.WEEK+ ""String_Node_Str"";
  return Event.queryList(c,loadFromCache,null,sqlWhere,new String[]{Integer.toString(year),Integer.toString(week)},new String[]{apiUrl});
}","public static APIResponse<ArrayList<Event>> getSimpleEventsInWeek(Context c,int year,int week,boolean loadFromCache) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + week);
  String apiUrl=String.format(TBAv2.API_URL.get(TBAv2.QUERY.EVENT_LIST),year);
  String sqlWhere;
  String[] whereArgs;
  if (week > Utilities.getCmpWeek(year)) {
    sqlWhere=Database.Events.YEAR + ""String_Node_Str"" + Database.Events.WEEK+ ""String_Node_Str"";
    whereArgs=new String[]{Integer.toString(year),Integer.toString(Utilities.getCmpWeek(year))};
  }
 else {
    sqlWhere=Database.Events.YEAR + ""String_Node_Str"" + Database.Events.WEEK+ ""String_Node_Str"";
    whereArgs=new String[]{Integer.toString(year),Integer.toString(week)};
  }
  return Event.queryList(c,loadFromCache,null,sqlWhere,whereArgs,new String[]{apiUrl});
}",0.6845238095238095
33824,"/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c               App context
 * @param URL             URL to fetch
 * @param forceFromCache  (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheLocally,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
  boolean existsInDb;
  existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Database.getInstance(c).getResponseTable().touchResponse(URL);
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      if (cacheLocally) {
        Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
      }
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}","/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c               App context
 * @param URL             URL to fetch
 * @param forceFromCache  (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheLocally,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  boolean existsInDb;
  existsInDb=Database.getInstance(c).getResponseTable().responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData;
      cachedData=Database.getInstance(c).getResponseTable().getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        Database.getInstance(c).getResponseTable().updateResponse(URL,lastUpdate);
        Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Database.getInstance(c).getResponseTable().touchResponse(URL);
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return Database.getInstance(c).getResponseTable().getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      if (cacheLocally) {
        Database.getInstance(c).getResponseTable().storeResponse(URL,lastUpdate);
      }
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(Constants.DATAMANAGER_LOG,""String_Node_Str"" + URL);
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}",0.6324228028503563
33825,"/** 
 * Returns a list of events sorted by name and type. This is optimal for quickly finding a particular event within a given week.
 * @param events a list of events to render
 * @return a list of ListItems representing the sorted events
 */
public static ArrayList<ListItem> renderEventListForWeek(ArrayList<Event> events){
  return renderEventListWithComparator(events,new EventSortByTypeAndNameComparator());
}","/** 
 * Returns a list of events sorted by name and type. This is optimal for quickly finding a particular event within a given week.
 * @param events a list of events to render
 * @return a list of ListItems representing the sorted events
 */
public static ArrayList<ListItem> renderEventListForWeek(ArrayList<Event> events){
  return renderEventListWithComparator(events,new EventSortByTypeAndDateComparator());
}",0.9927710843373494
33826,"@Override public EventListElement render(){
  try {
    String eventKey=getEventKey(), eventName=getEventName(), location=getLocation();
    if (getShortName() == null || shortName.isEmpty()) {
      return new EventListElement(eventKey,eventName,getDateString(),location);
    }
 else {
      return new EventListElement(eventKey,getShortName(),getDateString(),location);
    }
  }
 catch (  FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    return null;
  }
}","@Override public EventListElement render(){
  try {
    String eventKey=getEventKey(), eventName=getShortName(), location=getLocation();
    if (getShortName() == null || shortName.isEmpty()) {
      return new EventListElement(eventKey,eventName,getDateString(),location);
    }
 else {
      return new EventListElement(eventKey,getShortName(),getDateString(),location);
    }
  }
 catch (  FieldNotDefinedException e) {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + ""String_Node_Str"");
    return null;
  }
}",0.9922027290448344
33827,"public String getShortName(){
  try {
    return EventHelper.getShortNameForEvent(getEventName(),getEventType());
  }
 catch (  FieldNotDefinedException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}","public String getShortName(){
  try {
    if (shortName == null || shortName.isEmpty()) {
      setShortName(EventHelper.getShortNameForEvent(getEventName(),getEventType()));
    }
    return shortName;
  }
 catch (  FieldNotDefinedException e) {
    Log.e(Constants.LOG_TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}",0.8231173380035026
33828,"private void setupActionBar(){
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setTitle(getString(R.string.contributors));
}","private void setupActionBar(){
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setActionBarTitle(getString(R.string.contributors));
}",0.9714285714285714
33829,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    this.finish();
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    this.finish();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.8524590163934426
33830,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  break;
case android.R.id.home:
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  break;
case android.R.id.home:
if (isDrawerOpen()) {
  closeDrawer();
  return true;
}
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
break;
}
return super.onOptionsItemSelected(item);
}",0.9598853868194842
33831,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9376083188908144
33832,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    String eventKey=mMatchKey.substring(0,mMatchKey.indexOf(""String_Node_Str""));
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    String eventKey=mMatchKey.substring(0,mMatchKey.indexOf(""String_Node_Str""));
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9537869062901156
33833,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9375
33834,"@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  activity.findViewById(R.id.progress).setVisibility(View.GONE);
  activity.findViewById(R.id.no_data).setVisibility(View.GONE);
  activity.findViewById(android.R.id.list).setVisibility(View.VISIBLE);
  ((ListView)activity.findViewById(android.R.id.list)).setAdapter(adapter);
  activity.notifyRefreshComplete(activity);
}","@Override protected void onPostExecute(Void aVoid){
  super.onPostExecute(aVoid);
  activity.findViewById(R.id.progress).setVisibility(View.GONE);
  activity.findViewById(R.id.no_data).setVisibility(View.GONE);
  activity.findViewById(android.R.id.list).setVisibility(View.VISIBLE);
  ListView contributors=(ListView)activity.findViewById(android.R.id.list);
  Parcelable state=contributors.onSaveInstanceState();
  contributors.setAdapter(adapter);
  contributors.onRestoreInstanceState(state);
  activity.notifyRefreshComplete(activity);
}",0.8486772486772487
33835,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      eventList.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      if (mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete((RefreshListener)mFragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_event_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      new PopulateEventList(mFragment,mYear,mHeader,mTeamKey,false).execute();
    }
 else {
      if (mFragment instanceof RefreshListener) {
        activity.notifyRefreshComplete((RefreshListener)mFragment);
      }
    }
  }
}",0.9571725571725572
33836,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && code != APIResponse.CODE.NODATA) {
    if (activity.getActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.getActionBar().setTitle(teamKey.substring(3) + ""String_Node_Str"" + eventShort);
    }
    MatchListAdapter adapter=new MatchListAdapter(activity,matchGroups,teamKey);
    ExpandableListView listView=(ExpandableListView)activity.findViewById(R.id.results);
    listView.setAdapter(adapter);
    MatchHelper.EventPerformance performance=MatchHelper.evaluatePerformanceForTeam(event,eventMatches,teamKey);
    String summary=generateTeamSummary(teamKey,rank,recordString,allianceNumber,alliancePick,performance);
    ((TextView)activity.findViewById(R.id.team_record)).setText(Html.fromHtml(summary));
    if (!stats.children.isEmpty()) {
      adapter.addGroup(0,stats);
    }
    if (!awards.children.isEmpty()) {
      adapter.addGroup(0,awards);
    }
    if (activeEvent && nextMatch != null) {
      ListGroup nextMatches=new ListGroup(activity.getString(R.string.title_next_match));
      nextMatches.children.add(nextMatch);
      adapter.addGroup(0,nextMatches);
    }
    if (activeEvent && lastMatch != null) {
      ListGroup lastMatches=new ListGroup(activity.getString(R.string.title_last_match));
      lastMatches.children.add(lastMatch);
      adapter.addGroup(0,lastMatches);
    }
    activity.findViewById(R.id.team_at_event_progress).setVisibility(View.GONE);
    activity.findViewById(R.id.content_view).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    new PopulateTeamAtEvent(activity,false).execute(teamKey,eventKey);
  }
 else {
    if (activity instanceof RefreshableHostActivity) {
      ((RefreshableHostActivity)activity).notifyRefreshComplete((RefreshListener)activity);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (activity != null && code != APIResponse.CODE.NODATA) {
    if (activity.getActionBar() != null && eventShort != null && !eventShort.isEmpty()) {
      activity.getActionBar().setTitle(teamKey.substring(3) + ""String_Node_Str"" + eventShort);
    }
    MatchListAdapter adapter=new MatchListAdapter(activity,matchGroups,teamKey);
    MatchHelper.EventPerformance performance=MatchHelper.evaluatePerformanceForTeam(event,eventMatches,teamKey);
    String summary=generateTeamSummary(teamKey,rank,recordString,allianceNumber,alliancePick,performance);
    ((TextView)activity.findViewById(R.id.team_record)).setText(Html.fromHtml(summary));
    if (!stats.children.isEmpty()) {
      adapter.addGroup(0,stats);
    }
    if (!awards.children.isEmpty()) {
      adapter.addGroup(0,awards);
    }
    if (activeEvent && nextMatch != null) {
      ListGroup nextMatches=new ListGroup(activity.getString(R.string.title_next_match));
      nextMatches.children.add(nextMatch);
      adapter.addGroup(0,nextMatches);
    }
    if (activeEvent && lastMatch != null) {
      ListGroup lastMatches=new ListGroup(activity.getString(R.string.title_last_match));
      lastMatches.children.add(lastMatch);
      adapter.addGroup(0,lastMatches);
    }
    ExpandableListView listView=(ExpandableListView)activity.findViewById(R.id.results);
    Parcelable state=listView.onSaveInstanceState();
    int firstVisiblePosition=listView.getFirstVisiblePosition();
    listView.setAdapter(adapter);
    listView.onRestoreInstanceState(state);
    listView.setSelection(firstVisiblePosition);
    activity.findViewById(R.id.team_at_event_progress).setVisibility(View.GONE);
    activity.findViewById(R.id.content_view).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    new PopulateTeamAtEvent(activity,false).execute(teamKey,eventKey);
  }
 else {
    if (activity instanceof RefreshableHostActivity) {
      activity.notifyRefreshComplete((RefreshListener)activity);
    }
  }
}",0.5141794514179452
33837,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    TeamCursorAdapter adapter=new TeamCursorAdapter(activity,teams,0);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || teams == null || !teams.moveToFirst()) {
      noDataText.setText(R.string.no_team_list);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      eventList.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(fragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (fragment instanceof RefreshListener) {
      activity.notifyRefreshComplete((RefreshListener)fragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    TeamCursorAdapter adapter=new TeamCursorAdapter(activity,teams,0);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || teams == null || !teams.moveToFirst()) {
      noDataText.setText(R.string.no_team_list);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView eventList=(ListView)view.findViewById(R.id.list);
      Parcelable state=eventList.onSaveInstanceState();
      eventList.setAdapter(adapter);
      eventList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(fragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
    if (fragment instanceof RefreshListener) {
      activity.notifyRefreshComplete((RefreshListener)fragment);
    }
  }
}",0.9509757258448358
33838,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null) {
    adapter=new ListViewAdapter(activity,awards);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_awards_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView rankings=(ListView)view.findViewById(R.id.list);
      rankings.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventAwards secondLoad=new PopulateEventAwards(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null) {
    adapter=new ListViewAdapter(activity,awards);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_awards_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView rankings=(ListView)view.findViewById(R.id.list);
      Parcelable state=rankings.onSaveInstanceState();
      rankings.setAdapter(adapter);
      rankings.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventAwards secondLoad=new PopulateEventAwards(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.9587923296613629
33839,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_ranking_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView rankings=(ListView)view.findViewById(R.id.list);
      rankings.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventRankings secondLoad=new PopulateEventRankings(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_ranking_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView rankings=(ListView)view.findViewById(R.id.list);
      Parcelable state=rankings.onSaveInstanceState();
      rankings.setAdapter(adapter);
      rankings.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventRankings secondLoad=new PopulateEventRankings(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.960094824180166
33840,"protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups,teamKey);
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    if (code == APIResponse.CODE.NODATA || groups == null || adapter.groups.isEmpty()) {
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.match_results);
      listView.setAdapter(adapter);
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.match_results).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventResults secondLoad;
    secondLoad=new PopulateEventResults(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups,teamKey);
    TextView noDataText=(TextView)view.findViewById(R.id.no_match_data);
    if (code == APIResponse.CODE.NODATA || groups == null || adapter.groups.isEmpty()) {
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ExpandableListView results=(ExpandableListView)view.findViewById(R.id.match_results);
      Parcelable state=results.onSaveInstanceState();
      int firstVisiblePosition=results.getFirstVisiblePosition();
      results.setAdapter(adapter);
      results.onRestoreInstanceState(state);
      results.setSelection(firstVisiblePosition);
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.match_results).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventResults secondLoad;
    secondLoad=new PopulateEventResults(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey,teamKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.909560723514212
33841,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_stats_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView stats=(ListView)view.findViewById(R.id.list);
      stats.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventStats secondLoad=new PopulateEventStats(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_stats_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView stats=(ListView)view.findViewById(R.id.list);
      Parcelable state=stats.onSaveInstanceState();
      stats.setAdapter(adapter);
      stats.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventStats secondLoad=new PopulateEventStats(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.9619543452142572
33842,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    adapter.notifyDataSetChanged();
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_team_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView teamList=(ListView)view.findViewById(R.id.list);
      teamList.setAdapter(adapter);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventTeams secondLoad=new PopulateEventTeams(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    TextView noDataText=(TextView)view.findViewById(R.id.no_data);
    if (code == APIResponse.CODE.NODATA || adapter.values.isEmpty()) {
      noDataText.setText(R.string.no_team_data);
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      ListView teamList=(ListView)view.findViewById(R.id.list);
      Parcelable state=teamList.onSaveInstanceState();
      teamList.setAdapter(adapter);
      teamList.onRestoreInstanceState(state);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.list).setVisibility(View.VISIBLE);
  }
  if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
    PopulateEventTeams secondLoad=new PopulateEventTeams(mFragment,false);
    mFragment.updateTask(secondLoad);
    secondLoad.execute(eventKey);
  }
 else {
    if (mFragment instanceof RefreshListener) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      activity.notifyRefreshComplete(mFragment);
    }
  }
}",0.9474491752972766
33843,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=fragment.getView();
  if (view != null && activity != null) {
    ExpandableListAdapter adapter=new ExpandableListAdapter(activity,groups);
    ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.team_media_list);
    TextView noDataText=(TextView)view.findViewById(R.id.no_media);
    if (code == APIResponse.CODE.NODATA || adapter.groups.isEmpty()) {
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      listView.setAdapter(adapter);
      for (int i=0; i < groups.size(); i++) {
        listView.expandGroup(i);
      }
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.team_media_list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateTeamMedia secondLoad=new PopulateTeamMedia(fragment,false);
      fragment.updateTask(secondLoad);
      secondLoad.execute(team,year);
    }
 else {
      if (fragment instanceof RefreshListener) {
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=fragment.getView();
  if (view != null && activity != null) {
    ExpandableListAdapter adapter=new ExpandableListAdapter(activity,groups);
    ExpandableListView media=(ExpandableListView)view.findViewById(R.id.team_media_list);
    TextView noDataText=(TextView)view.findViewById(R.id.no_media);
    if (code == APIResponse.CODE.NODATA || adapter.groups.isEmpty()) {
      noDataText.setVisibility(View.VISIBLE);
    }
 else {
      Parcelable state=media.onSaveInstanceState();
      int firstVisiblePosition=media.getFirstVisiblePosition();
      media.setAdapter(adapter);
      media.onRestoreInstanceState(state);
      media.setSelection(firstVisiblePosition);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
    view.findViewById(R.id.team_media_list).setVisibility(View.VISIBLE);
    if (code == APIResponse.CODE.LOCAL && !isCancelled()) {
      PopulateTeamMedia secondLoad=new PopulateTeamMedia(fragment,false);
      fragment.updateTask(secondLoad);
      secondLoad.execute(team,year);
    }
 else {
      if (fragment instanceof RefreshListener) {
        activity.notifyRefreshComplete(fragment);
      }
    }
  }
}",0.8838268792710706
33844,"public MatchListElement(String youTubeVideoKey,String matchTitle,String[] redTeams,String[] blueTeams,String redScore,String blueScore,String matchKey,String selectedTeamKey){
  super();
  this.videoKey=youTubeVideoKey;
  this.matchTitle=matchTitle;
  this.redTeams=redTeams;
  this.blueTeams=blueTeams;
  this.redScore=redScore;
  this.blueScore=blueScore;
  this.matchKey=matchKey;
  this.selectedTeamKey=selectedTeamKey;
}","public MatchListElement(String youTubeVideoKey,String matchTitle,String[] redTeams,String[] blueTeams,String redScore,String blueScore,String matchKey,String selectedTeamKey){
  super();
  this.videoKey=youTubeVideoKey;
  this.matchTitle=matchTitle;
  this.redTeams=redTeams;
  this.blueTeams=blueTeams;
  this.redScore=redScore;
  this.blueScore=blueScore;
  this.matchKey=matchKey;
  this.selectedTeamNumber=selectedTeamKey.replace(""String_Node_Str"",""String_Node_Str"");
}",0.9042316258351892
33845,"@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}","@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (selectedTeamNumber.equals(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (selectedTeamNumber.equals(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}",0.9682176983797258
33846,"private void setupActionBar(){
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setTitle(getString(R.string.contributors));
}","private void setupActionBar(){
  getActionBar().setDisplayHomeAsUpEnabled(true);
  setActionBarTitle(getString(R.string.contributors));
}",0.9714285714285714
33847,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    this.finish();
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    this.finish();
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.8524590163934426
33848,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  break;
case android.R.id.home:
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.action_view_event:
    startActivity(ViewEventActivity.newInstance(this,eventKey));
  break;
case android.R.id.home:
if (isDrawerOpen()) {
  closeDrawer();
  return true;
}
Intent upIntent=NavUtils.getParentActivityIntent(this);
if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
}
 else {
Log.d(Constants.LOG_TAG,""String_Node_Str"");
NavUtils.navigateUpTo(this,upIntent);
}
return true;
default :
break;
}
return super.onOptionsItemSelected(item);
}",0.9598853868194842
33849,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9376083188908144
33850,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    String eventKey=mMatchKey.substring(0,mMatchKey.indexOf(""String_Node_Str""));
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    String eventKey=mMatchKey.substring(0,mMatchKey.indexOf(""String_Node_Str""));
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + eventKey);
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_events)).addNextIntent(ViewEventActivity.newInstance(this,eventKey)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9537869062901156
33851,"@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    if (isDrawerOpen()) {
      closeDrawer();
      return true;
    }
    Intent upIntent=NavUtils.getParentActivityIntent(this);
    if (NavUtils.shouldUpRecreateTask(this,upIntent)) {
      TaskStackBuilder.create(this).addNextIntent(HomeActivity.newInstance(this,R.id.nav_item_teams)).startActivities();
    }
 else {
      Log.d(Constants.LOG_TAG,""String_Node_Str"");
      NavUtils.navigateUpTo(this,upIntent);
    }
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0.9375
33852,"@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.contains(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}","@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}",0.9926455566905004
33853,"public MatchListElement(String youTubeVideoKey,String matchTitle,String[] redTeams,String[] blueTeams,String redScore,String blueScore,String matchKey,String selectedTeamKey){
  super();
  this.videoKey=youTubeVideoKey;
  this.matchTitle=matchTitle;
  this.redTeams=redTeams;
  this.blueTeams=blueTeams;
  this.redScore=redScore;
  this.blueScore=blueScore;
  this.matchKey=matchKey;
  this.selectedTeamKey=selectedTeamKey;
}","public MatchListElement(String youTubeVideoKey,String matchTitle,String[] redTeams,String[] blueTeams,String redScore,String blueScore,String matchKey,String selectedTeamKey){
  super();
  this.videoKey=youTubeVideoKey;
  this.matchTitle=matchTitle;
  this.redTeams=redTeams;
  this.blueTeams=blueTeams;
  this.redScore=redScore;
  this.blueScore=blueScore;
  this.matchKey=matchKey;
  this.selectedTeamNumber=selectedTeamKey.replace(""String_Node_Str"",""String_Node_Str"");
}",0.9042316258351892
33854,"@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (!selectedTeamKey.isEmpty() && selectedTeamKey.equals(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}","@Override public View getView(final Context context,LayoutInflater inflater,View convertView){
  if (convertView == null || holder == null) {
    convertView=inflater.inflate(R.layout.list_item_match,null);
    holder=new ViewHolder();
    holder.matchTitle=(TextView)convertView.findViewById(R.id.match_title);
    holder.red1=(TextView)convertView.findViewById(R.id.red1);
    holder.red2=(TextView)convertView.findViewById(R.id.red2);
    holder.red3=(TextView)convertView.findViewById(R.id.red3);
    holder.blue1=(TextView)convertView.findViewById(R.id.blue1);
    holder.blue2=(TextView)convertView.findViewById(R.id.blue2);
    holder.blue3=(TextView)convertView.findViewById(R.id.blue3);
    holder.redScore=(TextView)convertView.findViewById(R.id.red_score);
    holder.blueScore=(TextView)convertView.findViewById(R.id.blue_score);
    holder.videoIcon=(ImageView)convertView.findViewById(R.id.match_video);
  }
  if (!redScore.contains(""String_Node_Str"") && !blueScore.contains(""String_Node_Str"")) {
    try {
      int bScore=Integer.parseInt(blueScore), rScore=Integer.parseInt(redScore);
      if (bScore > rScore) {
        View blue_alliance=convertView.findViewById(R.id.blue_alliance);
        if (blue_alliance != null) {
          blue_alliance.setBackgroundResource(R.drawable.blue_border);
        }
        convertView.findViewById(R.id.blue_score).setBackgroundResource(R.drawable.blue_score_border);
      }
 else       if (bScore < rScore) {
        View red_alliance=convertView.findViewById(R.id.red_alliance);
        if (red_alliance != null) {
          red_alliance.setBackgroundResource(R.drawable.red_border);
        }
        convertView.findViewById(R.id.red_score).setBackgroundResource(R.drawable.red_score_border);
      }
    }
 catch (    NumberFormatException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
    }
  }
  if (videoKey != null) {
    holder.videoIcon.setVisibility(View.VISIBLE);
    holder.videoIcon.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
        view.getContext().startActivity(intent);
      }
    }
);
  }
 else {
    holder.videoIcon.setVisibility(View.INVISIBLE);
  }
  holder.matchTitle.setText(matchTitle);
  TeamClickListener listener=new TeamClickListener(context);
  if (redTeams.length == 0) {
    holder.red1.setText(""String_Node_Str"");
    holder.red2.setText(""String_Node_Str"");
    holder.red3.setText(""String_Node_Str"");
  }
 else {
    holder.red1.setText(redTeams[0]);
    holder.red1.setTag(""String_Node_Str"" + redTeams[0]);
    holder.red1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[0])) {
      holder.red1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.red2.setText(redTeams[1]);
    holder.red2.setTag(""String_Node_Str"" + redTeams[1]);
    holder.red2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(redTeams[1])) {
      holder.red2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (redTeams.length == 2) {
      holder.red3.setVisibility(View.GONE);
    }
 else {
      holder.red3.setVisibility(View.VISIBLE);
      holder.red3.setText(redTeams[2]);
      holder.red3.setTag(""String_Node_Str"" + redTeams[2]);
      holder.red3.setOnClickListener(listener);
      if (selectedTeamNumber.equals(redTeams[2])) {
        holder.red3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  if (blueTeams.length == 0) {
    holder.blue1.setText(""String_Node_Str"");
    holder.blue2.setText(""String_Node_Str"");
    holder.blue3.setText(""String_Node_Str"");
  }
 else {
    holder.blue1.setText(blueTeams[0]);
    holder.blue1.setTag(""String_Node_Str"" + blueTeams[0]);
    holder.blue1.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[0])) {
      holder.blue1.setTypeface(Typeface.DEFAULT_BOLD);
    }
    holder.blue2.setText(blueTeams[1]);
    holder.blue2.setTag(""String_Node_Str"" + blueTeams[1]);
    holder.blue2.setOnClickListener(listener);
    if (selectedTeamNumber.equals(blueTeams[1])) {
      holder.blue2.setTypeface(Typeface.DEFAULT_BOLD);
    }
    if (blueTeams.length == 2) {
      holder.blue3.setVisibility(View.GONE);
    }
 else {
      holder.blue3.setVisibility(View.VISIBLE);
      holder.blue3.setText(blueTeams[2]);
      holder.blue3.setTag(""String_Node_Str"" + blueTeams[2]);
      holder.blue3.setOnClickListener(listener);
      if (selectedTeamNumber.equals(blueTeams[2])) {
        holder.blue3.setTypeface(Typeface.DEFAULT_BOLD);
      }
    }
  }
  holder.redScore.setText(redScore);
  holder.blueScore.setText(blueScore);
  convertView.setTag(matchKey);
  return convertView;
}",0.9769134775374376
33855,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.search_menu,menu);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  if (searchEnabled) {
    getMenuInflater().inflate(R.menu.search_menu,menu);
  }
  return super.onCreateOptionsMenu(menu);
}",0.913946587537092
33856,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_contributors);
  setupActionBar();
  ((ListView)findViewById(android.R.id.list)).setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String login=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      String url=""String_Node_Str"" + login;
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(url)));
    }
  }
);
  if (ConnectionDetector.isConnectedToInternet(this)) {
    new PopulateContributors(this).execute();
  }
 else {
    findViewById(android.R.id.list).setVisibility(View.GONE);
    findViewById(R.id.no_data).setVisibility(View.VISIBLE);
    findViewById(R.id.progress).setVisibility(View.GONE);
  }
  registerRefreshableActivityListener(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_contributors);
  setupActionBar();
  ((ListView)findViewById(android.R.id.list)).setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String login=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      String url=""String_Node_Str"" + login;
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(url)));
    }
  }
);
  registerRefreshableActivityListener(this);
  setSearchEnabled(false);
}",0.8045700541190619
33857,"public static Intent getIntentForTBAUrl(Context c,Uri data){
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
  String host=data.getHost();
  List<String> urlParts=data.getPathSegments();
  Intent intent=null;
  if (host != null && host.equals(c.getString(R.string.web_url_host)) && urlParts != null) {
    if (urlParts.isEmpty()) {
      return HomeActivity.newInstance(c,R.id.nav_item_events);
    }
    System.out.println(urlParts.get(0));
switch (urlParts.get(0)) {
case ""String_Node_Str"":
      intent=HomeActivity.newInstance(c,R.id.nav_item_teams);
    break;
case ""String_Node_Str"":
  if (indexExists(urlParts,1) && TeamHelper.validateTeamKey(""String_Node_Str"" + urlParts.get(1))) {
    if (indexExists(urlParts,2) && urlParts.get(2).matches(""String_Node_Str"")) {
      intent=ViewTeamActivity.newInstance(c,""String_Node_Str"" + urlParts.get(1),Integer.parseInt(urlParts.get(2)));
    }
 else {
      intent=ViewTeamActivity.newInstance(c,""String_Node_Str"" + urlParts.get(1));
    }
  }
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
intent=HomeActivity.newInstance(c,R.id.nav_item_events);
break;
case ""String_Node_Str"":
if (indexExists(urlParts,1) && EventHelper.validateEventKey(urlParts.get(1))) {
intent=ViewEventActivity.newInstance(c,urlParts.get(1));
}
break;
case ""String_Node_Str"":
if (indexExists(urlParts,1) && MatchHelper.validateMatchKey(urlParts.get(1))) {
intent=ViewMatchActivity.newInstance(c,urlParts.get(1));
}
break;
case ""String_Node_Str"":
intent=HomeActivity.newInstance(c,R.id.nav_item_insights);
break;
case ""String_Node_Str"":
break;
default :
intent=null;
}
}
return intent;
}","public static Intent getIntentForTBAUrl(Context c,Uri data){
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
  List<String> urlParts=data.getPathSegments();
  Intent intent=null;
  if (urlParts != null) {
    if (urlParts.isEmpty()) {
      return HomeActivity.newInstance(c,R.id.nav_item_events);
    }
    System.out.println(urlParts.get(0));
switch (urlParts.get(0)) {
case ""String_Node_Str"":
      intent=HomeActivity.newInstance(c,R.id.nav_item_teams);
    break;
case ""String_Node_Str"":
  if (indexExists(urlParts,1) && TeamHelper.validateTeamKey(""String_Node_Str"" + urlParts.get(1))) {
    if (indexExists(urlParts,2) && urlParts.get(2).matches(""String_Node_Str"")) {
      intent=ViewTeamActivity.newInstance(c,""String_Node_Str"" + urlParts.get(1),Integer.parseInt(urlParts.get(2)));
    }
 else {
      intent=ViewTeamActivity.newInstance(c,""String_Node_Str"" + urlParts.get(1));
    }
  }
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
intent=HomeActivity.newInstance(c,R.id.nav_item_events);
break;
case ""String_Node_Str"":
if (indexExists(urlParts,1) && EventHelper.validateEventKey(urlParts.get(1))) {
intent=ViewEventActivity.newInstance(c,urlParts.get(1));
}
break;
case ""String_Node_Str"":
if (indexExists(urlParts,1) && MatchHelper.validateMatchKey(urlParts.get(1))) {
intent=ViewMatchActivity.newInstance(c,urlParts.get(1));
}
break;
case ""String_Node_Str"":
intent=HomeActivity.newInstance(c,R.id.nav_item_insights);
break;
case ""String_Node_Str"":
break;
default :
intent=null;
}
}
return intent;
}",0.932112409220082
33858,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false)) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      if (data != null && data.getHost() != null && data.getHost().equals(getString(R.string.web_url_host))) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          String url=data.toString();
          if (!url.startsWith(""String_Node_Str"") && !url.startsWith(""String_Node_Str"")) {
            url=""String_Node_Str"" + url;
          }
          Intent openUrlIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
          startActivity(openUrlIntent);
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false));
  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(ALL_DATA_LOADED,false)) {
    if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
      Parcelable[] rawMsgs=getIntent().getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
      NdefMessage message=(NdefMessage)rawMsgs[0];
      String uri=new String(message.getRecords()[0].getPayload());
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + uri);
      processNfcUri(uri);
      return;
    }
 else     if (Intent.ACTION_VIEW.equals(getIntent().getAction())) {
      Uri data=getIntent().getData();
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + data.toString());
      if (data != null) {
        Intent intent=Utilities.getIntentForTBAUrl(this,data);
        if (intent != null) {
          startActivity(intent);
          finish();
          return;
        }
 else {
          goToHome();
          finish();
        }
      }
 else {
        goToHome();
        return;
      }
    }
 else {
      goToHome();
      return;
    }
  }
  setContentView(R.layout.activity_launch);
  viewPager=(DisableSwipeViewPager)findViewById(R.id.view_pager);
  viewPager.setSwipeEnabled(false);
  viewPager.setOffscreenPageLimit(2);
  viewPager.setAdapter(new FirstLaunchFragmentAdapter(this));
  loadingMessage=(TextView)findViewById(R.id.message);
  findViewById(R.id.welcome_next_page).setOnClickListener(this);
  findViewById(R.id.finish).setOnClickListener(this);
}",0.7710382513661203
33859,"public void startRefresh(){
  mRefreshInProgress=true;
  if (mRefreshListeners.isEmpty()) {
    return;
  }
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStart();
  }
  if (mOptionsMenu != null) {
    MenuItem refresh=mOptionsMenu.findItem(R.id.refresh);
    refresh.setActionView(R.layout.actionbar_indeterminate_progress);
  }
}","public void startRefresh(){
  if (mRefreshInProgress) {
    return;
  }
  mRefreshInProgress=true;
  if (mRefreshListeners.isEmpty()) {
    return;
  }
  for (  RefreshListener listener : mRefreshListeners) {
    listener.onRefreshStart();
  }
  if (mOptionsMenu != null) {
    MenuItem refresh=mOptionsMenu.findItem(R.id.refresh);
    refresh.setActionView(R.layout.actionbar_indeterminate_progress);
  }
}",0.9428571428571428
33860,"/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c App context
 * @param URL URL to fetch
 * @param cacheInDatabase boolean - do we want to store the response locally if we need to load it from the web?
 * @param forceFromCache (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheInDatabase,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
  Database db=Database.getInstance(c);
  boolean existsInDb=db.responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData=db.getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      System.out.println(""String_Node_Str"" + cachedData.lastHit + ""String_Node_Str""+ futureTime);
      if (now.before(futureTime)) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (cacheInDatabase) {
          db.updateResponse(URL,response,lastUpdate);
        }
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return db.getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      if (cacheInDatabase) {
        db.storeResponse(URL,response,lastUpdate);
      }
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}","/** 
 * This is the main datafeed method - you speciy a URL and this will either return it from our cache or fetch and store it.
 * @param c App context
 * @param URL URL to fetch
 * @param cacheInDatabase boolean - do we want to store the response locally if we need to load it from the web?
 * @param forceFromCache (optional, defaults to FALSE). If set, the data exists locally, we won't query the web ever - just return what we have.
 * @return An APIRespnse containing the data we fetched from the internet
 * @throws DataManager.NoDataException
 */
public static APIResponse<String> getResponseFromURLOrThrow(Context c,final String URL,boolean cacheInDatabase,boolean forceFromCache) throws DataManager.NoDataException {
  if (c == null) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    throw new DataManager.NoDataException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + URL);
  Database db=Database.getInstance(c);
  boolean existsInDb=db.responseExists(URL);
  boolean connectedToInternet=ConnectionDetector.isConnectedToInternet(c);
  if (existsInDb) {
    if (connectedToInternet) {
      APIResponse<String> cachedData=db.getResponse(URL);
      Date now=new Date();
      Date futureTime=new Date(cachedData.lastHit.getTime() + Constants.API_HIT_TIMEOUT);
      if (now.before(futureTime)) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
      if (forceFromCache) {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData;
      }
      HttpResponse cachedResponse=HTTP.getResponse(URL,cachedData.getLastUpdate());
      boolean dataRequiresUpdate=(cachedResponse != null) && (cachedResponse.getStatusLine().getStatusCode() == 200);
      if (dataRequiresUpdate) {
        String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
        Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
        if (lastModified != null) {
          lastUpdate=lastModified.getValue();
        }
        if (cacheInDatabase) {
          db.updateResponse(URL,response,lastUpdate);
        }
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return new APIResponse<>(response,APIResponse.CODE.UPDATED);
      }
 else {
        Log.d(""String_Node_Str"",""String_Node_Str"");
        return cachedData.updateCode(APIResponse.CODE.CACHED304);
      }
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return db.getResponse(URL).updateCode(APIResponse.CODE.OFFLINECACHE);
    }
  }
 else {
    if (connectedToInternet) {
      HttpResponse cachedResponse=HTTP.getResponse(URL);
      String response=HTTP.dataFromResponse(cachedResponse), lastUpdate=""String_Node_Str"";
      Header lastModified=cachedResponse.getFirstHeader(""String_Node_Str"");
      if (lastModified != null) {
        lastUpdate=lastModified.getValue();
      }
      if (cacheInDatabase) {
        db.storeResponse(URL,response,lastUpdate);
      }
      Log.d(""String_Node_Str"",""String_Node_Str"");
      return new APIResponse<>(response,APIResponse.CODE.WEBLOAD);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      throw new DataManager.NoDataException(""String_Node_Str"");
    }
  }
}",0.9852454080096356
33861,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  resultsList=(ListView)findViewById(R.id.results);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  searchView=new SearchView(getActionBar().getThemedContext());
  searchView.setOnQueryTextListener(this);
  searchView.setIconified(false);
  searchView.setQueryHint(getString(R.string.search_hint));
  searchView.setOnCloseListener(new SearchView.OnCloseListener(){
    @Override public boolean onClose(){
      return true;
    }
  }
);
  closeButtonId=searchView.getContext().getResources().getIdentifier(""String_Node_Str"",null,null);
  searchView.findViewById(closeButtonId).setVisibility(View.GONE);
  ActionBar.LayoutParams layoutParams=new ActionBar.LayoutParams(ActionBar.LayoutParams.FILL_PARENT,ActionBar.LayoutParams.FILL_PARENT);
  getActionBar().setDisplayShowCustomEnabled(true);
  getActionBar().setCustomView(searchView,layoutParams);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  resultsList=(ListView)findViewById(R.id.results);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  searchView=new SearchView(getActionBar().getThemedContext());
  searchView.setOnQueryTextListener(this);
  searchView.setIconifiedByDefault(false);
  searchView.setIconified(false);
  searchView.setQueryHint(getString(R.string.search_hint));
  searchView.setOnCloseListener(new SearchView.OnCloseListener(){
    @Override public boolean onClose(){
      return true;
    }
  }
);
  closeButtonId=searchView.getContext().getResources().getIdentifier(""String_Node_Str"",null,null);
  searchView.findViewById(closeButtonId).setVisibility(View.GONE);
  ActionBar.LayoutParams layoutParams=new ActionBar.LayoutParams(ActionBar.LayoutParams.FILL_PARENT,ActionBar.LayoutParams.FILL_PARENT);
  getActionBar().setDisplayShowCustomEnabled(true);
  getActionBar().setCustomView(searchView,layoutParams);
  int searchIconId=searchView.getContext().getResources().getIdentifier(""String_Node_Str"",null,null);
  searchView.findViewById(searchIconId).setLayoutParams(new LinearLayout.LayoutParams(0,0));
}",0.8939393939393939
33862,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && activity != null && eventKey != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && activity != null && eventKey != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.event_top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString());
          if (i < Math.min(6,rankList.size()) - 1) {
            rankString+=""String_Node_Str"";
          }
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=(i + 1) + ""String_Node_Str"" + opr.get(i).getKey();
            if (i < Math.min(5,opr.size()) - 1) {
              statsString+=""String_Node_Str"";
            }
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=MatchHelper.getNextMatchPlayed(matches);
        Match lastMatch=MatchHelper.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}",0.9781952364978196
33863,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setFastScrollAlwaysVisible(true);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      Intent i=new Intent(getActivity(),ViewTeamActivity.class);
      i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
      startActivity(i);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mListView.setFastScrollAlwaysVisible(true);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String teamKey=((TeamCursorAdapter)adapterView.getAdapter()).getKey(position);
      Intent i=new Intent(getActivity(),ViewTeamActivity.class);
      i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
      startActivity(i);
    }
  }
);
  return view;
}",0.9238514789175584
33864,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  String teamKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
  Intent i=new Intent(getActivity(),ViewTeamActivity.class);
  i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
  startActivity(i);
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  String teamKey=((TeamCursorAdapter)adapterView.getAdapter()).getKey(position);
  Intent i=new Intent(getActivity(),ViewTeamActivity.class);
  i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
  startActivity(i);
}",0.8094488188976378
33865,"@Override public void onClick(View v){
  if (v.getTag() != null) {
    if (v.getTag().equals(""String_Node_Str"")) {
      ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    }
 else     if (v.getTag().equals(""String_Node_Str"")) {
      ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    }
 else {
      PackageManager manager=getActivity().getPackageManager();
      String uri=v.getTag().toString();
      Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
      List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
      if (!handlers.isEmpty()) {
        startActivity(i);
      }
 else {
        Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
}","@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.event_top_teams_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(2);
    return;
  }
 else   if (id == R.id.event_top_opr_container) {
    ((ViewEventActivity)getActivity()).getPager().setCurrentItem(4);
    return;
  }
  if (v.getTag() != null) {
    PackageManager manager=getActivity().getPackageManager();
    String uri=v.getTag().toString();
    Intent i=new Intent(android.content.Intent.ACTION_VIEW,Uri.parse(uri));
    List<ResolveInfo> handlers=manager.queryIntentActivities(i,0);
    if (!handlers.isEmpty()) {
      startActivity(i);
    }
 else {
      Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
}",0.7981530343007915
33866,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_location_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.top_opr_container).setOnClickListener(this);
  return info;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View info=inflater.inflate(R.layout.fragment_event_info,null);
  info.findViewById(R.id.event_location_container).setOnClickListener(this);
  info.findViewById(R.id.event_website_button).setOnClickListener(this);
  info.findViewById(R.id.event_twitter_button).setOnClickListener(this);
  info.findViewById(R.id.event_youtube_button).setOnClickListener(this);
  info.findViewById(R.id.event_cd_button).setOnClickListener(this);
  info.findViewById(R.id.event_top_teams_container).setOnClickListener(this);
  info.findViewById(R.id.event_top_opr_container).setOnClickListener(this);
  return info;
}",0.9957325746799432
33867,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  resultsList=(ListView)findViewById(R.id.results);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setTitle(""String_Node_Str"");
  String query=getIntent().getStringExtra(QUERY);
  int resultsType=getIntent().getIntExtra(RESULTS_TYPE,-1);
  if (query == null || resultsType == -1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
switch (resultsType) {
case TEAM_RESULTS:
    getActionBar().setTitle(String.format(getString(R.string.teams_matching),query));
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
  teamQueryResults.moveToPosition(-1);
  while (teamQueryResults.moveToNext()) {
    String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
    Team team=Database.getInstance(this).getTeam(key);
    TeamListElement element=new TeamListElement(team);
    listItems.add(element);
  }
}
 else {
  listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
}
break;
case EVENT_RESULTS:
getActionBar().setTitle(String.format(getString(R.string.events_matching),query));
Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
eventQueryResults.moveToPosition(-1);
while (eventQueryResults.moveToNext()) {
String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
Event event=Database.getInstance(this).getEvent(key);
EventListElement element=new EventListElement(event);
listItems.add(element);
}
}
 else {
listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
}
break;
}
ListViewAdapter adapter=new ListViewAdapter(this,listItems);
resultsList.setAdapter(adapter);
resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
ListItem clickedItem=adapter.getItem(position);
if (clickedItem instanceof TeamListElement) {
String teamKey=((ListElement)clickedItem).getKey();
Intent i=new Intent(MoreSearchResultsActivity.this,ViewTeamActivity.class);
i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
startActivity(i);
}
 else if (clickedItem instanceof EventListElement) {
String eventKey=((ListElement)clickedItem).getKey();
Intent intent=ViewEventActivity.newInstance(MoreSearchResultsActivity.this,eventKey);
startActivity(intent);
}
}
}
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_search_results);
  resultsList=(ListView)findViewById(R.id.results);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setTitle(""String_Node_Str"");
  String query=getIntent().getStringExtra(QUERY);
  int resultsType=getIntent().getIntExtra(RESULTS_TYPE,-1);
  if (query == null || resultsType == -1) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
switch (resultsType) {
case TEAM_RESULTS:
    getActionBar().setTitle(String.format(getString(R.string.teams_matching),query));
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
  teamQueryResults.moveToPosition(-1);
  while (teamQueryResults.moveToNext()) {
    String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
    Team team=Database.getInstance(this).getTeam(key);
    TeamListElement element=new TeamListElement(team);
    listItems.add(element);
  }
  teamQueryResults.close();
}
 else {
  listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
}
break;
case EVENT_RESULTS:
getActionBar().setTitle(String.format(getString(R.string.events_matching),query));
Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
eventQueryResults.moveToPosition(-1);
while (eventQueryResults.moveToNext()) {
String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
Event event=Database.getInstance(this).getEvent(key);
EventListElement element=new EventListElement(event);
listItems.add(element);
}
eventQueryResults.close();
}
 else {
listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
}
break;
}
ListViewAdapter adapter=new ListViewAdapter(this,listItems);
resultsList.setAdapter(adapter);
resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
ListItem clickedItem=adapter.getItem(position);
if (clickedItem instanceof TeamListElement) {
String teamKey=((ListElement)clickedItem).getKey();
Intent i=new Intent(MoreSearchResultsActivity.this,ViewTeamActivity.class);
i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
startActivity(i);
}
 else if (clickedItem instanceof EventListElement) {
String eventKey=((ListElement)clickedItem).getKey();
Intent intent=ViewEventActivity.newInstance(MoreSearchResultsActivity.this,eventKey);
startActivity(intent);
}
}
}
);
}",0.9904131078961128
33868,"public SimpleEvent getEvent(String eventKey){
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"",new String[]{eventKey},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    SimpleEvent event=new SimpleEvent();
    event.setEventKey(cursor.getString(0));
    event.setEventName(cursor.getString(1));
    event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
    event.setDistrictEnum(cursor.getInt(3));
    event.setStartDate(cursor.getString(4));
    event.setEndDate(cursor.getString(5));
    event.setLocation(cursor.getString(6));
    event.setOfficial(cursor.getInt(7) == 1);
    event.setDistrictTitle(cursor.getString(8));
    return event;
  }
 else {
    return null;
  }
}","public SimpleEvent getEvent(String eventKey){
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"",new String[]{eventKey},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    SimpleEvent event=new SimpleEvent();
    event.setEventKey(cursor.getString(0));
    event.setEventName(cursor.getString(1));
    event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
    event.setDistrictEnum(cursor.getInt(3));
    event.setStartDate(cursor.getString(4));
    event.setEndDate(cursor.getString(5));
    event.setLocation(cursor.getString(6));
    event.setOfficial(cursor.getInt(7) == 1);
    event.setDistrictTitle(cursor.getString(8));
    cursor.close();
    return event;
  }
 else {
    return null;
  }
}",0.9887005649717514
33869,"public SimpleTeam getTeam(String teamKey){
  Cursor cursor=db.query(TABLE_TEAMS,new String[]{Teams.KEY,Teams.NUMBER,Teams.NAME,Teams.SHORTNAME,Teams.LOCATION},Teams.KEY + ""String_Node_Str"",new String[]{teamKey},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    SimpleTeam team=new SimpleTeam();
    team.setTeamKey(cursor.getString(0));
    team.setTeamNumber(cursor.getInt(1));
    team.setFullName(cursor.getString(2));
    team.setNickname(cursor.getString(3));
    team.setLocation(cursor.getString(4));
    return team;
  }
 else {
    return null;
  }
}","public SimpleTeam getTeam(String teamKey){
  Cursor cursor=db.query(TABLE_TEAMS,new String[]{Teams.KEY,Teams.NUMBER,Teams.NAME,Teams.SHORTNAME,Teams.LOCATION},Teams.KEY + ""String_Node_Str"",new String[]{teamKey},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    SimpleTeam team=new SimpleTeam();
    team.setTeamKey(cursor.getString(0));
    team.setTeamNumber(cursor.getInt(1));
    team.setFullName(cursor.getString(2));
    team.setNickname(cursor.getString(3));
    team.setLocation(cursor.getString(4));
    cursor.close();
    return team;
  }
 else {
    return null;
  }
}",0.9831365935919056
33870,"public ArrayList<SimpleEvent> getEventsInYear(int year){
  ArrayList<SimpleEvent> events=new ArrayList<>();
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"",new String[]{Integer.toString(year) + ""String_Node_Str""},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    do {
      SimpleEvent event=new SimpleEvent();
      event.setEventKey(cursor.getString(0));
      event.setEventName(cursor.getString(1));
      event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
      event.setDistrictEnum(cursor.getInt(3));
      event.setStartDate(cursor.getString(4));
      event.setEndDate(cursor.getString(5));
      event.setLocation(cursor.getString(6));
      event.setOfficial(cursor.getInt(7) == 1);
      event.setDistrictTitle(cursor.getString(8));
      events.add(event);
    }
 while (cursor.moveToNext());
    return events;
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + year);
    return null;
  }
}","public ArrayList<SimpleEvent> getEventsInYear(int year){
  ArrayList<SimpleEvent> events=new ArrayList<>();
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"",new String[]{Integer.toString(year) + ""String_Node_Str""},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    do {
      SimpleEvent event=new SimpleEvent();
      event.setEventKey(cursor.getString(0));
      event.setEventName(cursor.getString(1));
      event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
      event.setDistrictEnum(cursor.getInt(3));
      event.setStartDate(cursor.getString(4));
      event.setEndDate(cursor.getString(5));
      event.setLocation(cursor.getString(6));
      event.setOfficial(cursor.getInt(7) == 1);
      event.setDistrictTitle(cursor.getString(8));
      events.add(event);
    }
 while (cursor.moveToNext());
    cursor.close();
    return events;
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + year);
    return null;
  }
}",0.9911268855368234
33871,"public boolean eventExists(String key){
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY},Events.KEY + ""String_Node_Str"",new String[]{key},null,null,null,null);
  return cursor != null && cursor.moveToFirst();
}","public boolean eventExists(String key){
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY},Events.KEY + ""String_Node_Str"",new String[]{key},null,null,null,null);
  boolean exists=cursor != null && cursor.moveToFirst();
  cursor.close();
  return exists;
}",0.8839103869653768
33872,"public String getResponse(String url){
  Cursor cursor=db.query(TABLE_API,new String[]{Response.URL,Response.RESPONSE,Response.LASTUPDATE},Response.URL + ""String_Node_Str"",new String[]{url},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    return cursor.getString(1);
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + url);
    return null;
  }
}","public String getResponse(String url){
  Cursor cursor=db.query(TABLE_API,new String[]{Response.URL,Response.RESPONSE,Response.LASTUPDATE},Response.URL + ""String_Node_Str"",new String[]{url},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    String response=cursor.getString(1);
    cursor.close();
    return response;
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + url);
    return null;
  }
}",0.9209876543209876
33873,"public boolean responseExists(String url){
  Cursor cursor=db.query(TABLE_API,new String[]{Response.URL},Response.URL + ""String_Node_Str"",new String[]{url},null,null,null,null);
  return (cursor.moveToFirst()) || (cursor.getCount() != 0);
}","public boolean responseExists(String url){
  Cursor cursor=db.query(TABLE_API,new String[]{Response.URL},Response.URL + ""String_Node_Str"",new String[]{url},null,null,null,null);
  boolean exists=(cursor.moveToFirst()) || (cursor.getCount() != 0);
  cursor.close();
  return exists;
}",0.8910133843212237
33874,"public ArrayList<SimpleTeam> getTeamsInRange(int lowerBound,int upperBound){
  ArrayList<SimpleTeam> teams=new ArrayList<>();
  Cursor cursor=db.query(TABLE_TEAMS,new String[]{Teams.KEY,Teams.NUMBER,Teams.NAME,Teams.SHORTNAME,Teams.LOCATION},Teams.NUMBER + ""String_Node_Str"",new String[]{""String_Node_Str"" + lowerBound,""String_Node_Str"" + upperBound},null,null,null,null);
  cursor.moveToPosition(-1);
  while (cursor.moveToNext()) {
    teams.add(new SimpleTeam(cursor.getString(0),cursor.getInt(1),cursor.getString(3),cursor.getString(4),-1));
  }
  return teams;
}","public ArrayList<SimpleTeam> getTeamsInRange(int lowerBound,int upperBound){
  ArrayList<SimpleTeam> teams=new ArrayList<>();
  Cursor cursor=db.query(TABLE_TEAMS,new String[]{Teams.KEY,Teams.NUMBER,Teams.NAME,Teams.SHORTNAME,Teams.LOCATION},Teams.NUMBER + ""String_Node_Str"",new String[]{""String_Node_Str"" + lowerBound,""String_Node_Str"" + upperBound},null,null,null,null);
  cursor.moveToPosition(-1);
  while (cursor.moveToNext()) {
    teams.add(new SimpleTeam(cursor.getString(0),cursor.getInt(1),cursor.getString(3),cursor.getString(4),-1));
  }
  cursor.close();
  return teams;
}",0.9635416666666666
33875,"public ArrayList<SimpleEvent> getEventsInWeek(int year,int week){
  ArrayList<SimpleEvent> events=new ArrayList<>();
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"" + Events.WEEK+ ""String_Node_Str"",new String[]{Integer.toString(year) + ""String_Node_Str"",Integer.toString(week)},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    do {
      SimpleEvent event=new SimpleEvent();
      event.setEventKey(cursor.getString(0));
      event.setEventName(cursor.getString(1));
      event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
      event.setDistrictEnum(cursor.getInt(3));
      event.setStartDate(cursor.getString(4));
      event.setEndDate(cursor.getString(5));
      event.setLocation(cursor.getString(6));
      event.setOfficial(cursor.getInt(7) == 1);
      event.setDistrictTitle(cursor.getString(8));
      events.add(event);
    }
 while (cursor.moveToNext());
    return events;
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + year + ""String_Node_Str""+ week);
    return null;
  }
}","public ArrayList<SimpleEvent> getEventsInWeek(int year,int week){
  ArrayList<SimpleEvent> events=new ArrayList<>();
  Cursor cursor=db.query(TABLE_EVENTS,new String[]{Events.KEY,Events.NAME,Events.TYPE,Events.DISTRICT,Events.START,Events.END,Events.LOCATION,Events.OFFICIAL,Events.DISTRICT_STRING},Events.KEY + ""String_Node_Str"" + Events.WEEK+ ""String_Node_Str"",new String[]{Integer.toString(year) + ""String_Node_Str"",Integer.toString(week)},null,null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    do {
      SimpleEvent event=new SimpleEvent();
      event.setEventKey(cursor.getString(0));
      event.setEventName(cursor.getString(1));
      event.setEventType(EventHelper.TYPE.values()[cursor.getInt(2)]);
      event.setDistrictEnum(cursor.getInt(3));
      event.setStartDate(cursor.getString(4));
      event.setEndDate(cursor.getString(5));
      event.setLocation(cursor.getString(6));
      event.setOfficial(cursor.getInt(7) == 1);
      event.setDistrictTitle(cursor.getString(8));
      events.add(event);
    }
 while (cursor.moveToNext());
    cursor.close();
    return events;
  }
 else {
    Log.w(Constants.LOG_TAG,""String_Node_Str"" + year + ""String_Node_Str""+ week);
    return null;
  }
}",0.9917898193760264
33876,"private void updateQuery(final String query){
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
      Team team=Database.getInstance(this).getTeam(key);
      TeamListElement element=new TeamListElement(team);
      listItems.add(element);
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (teamQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
      Event event=Database.getInstance(this).getEvent(key);
      EventListElement element=new EventListElement(event);
      listItems.add(element);
    }
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
      ListItem clickedItem=adapter.getItem(position);
      if (clickedItem instanceof TeamListElement) {
        String teamKey=((ListElement)clickedItem).getKey();
        Intent i=new Intent(SearchResultsActivity.this,ViewTeamActivity.class);
        i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
        startActivity(i);
      }
 else       if (clickedItem instanceof EventListElement) {
        String eventKey=((ListElement)clickedItem).getKey();
        Intent intent=ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey);
        startActivity(intent);
      }
 else       if (clickedItem == teamsHeader) {
        if (teamsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
        }
      }
 else       if (clickedItem == eventsHeader) {
        if (eventsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
        }
      }
    }
  }
);
}","private void updateQuery(final String query){
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
      Team team=Database.getInstance(this).getTeam(key);
      TeamListElement element=new TeamListElement(team);
      listItems.add(element);
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (eventQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
      Event event=Database.getInstance(this).getEvent(key);
      EventListElement element=new EventListElement(event);
      listItems.add(element);
    }
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
      ListItem clickedItem=adapter.getItem(position);
      if (clickedItem instanceof TeamListElement) {
        String teamKey=((ListElement)clickedItem).getKey();
        Intent i=new Intent(SearchResultsActivity.this,ViewTeamActivity.class);
        i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
        startActivity(i);
      }
 else       if (clickedItem instanceof EventListElement) {
        String eventKey=((ListElement)clickedItem).getKey();
        Intent intent=ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey);
        startActivity(intent);
      }
 else       if (clickedItem == teamsHeader) {
        if (teamsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
        }
      }
 else       if (clickedItem == eventsHeader) {
        if (eventsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
        }
      }
    }
  }
);
}",0.9989332701197108
33877,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && activity != null && eventKey != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.size() == 0) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && activity != null && eventKey != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.isEmpty() || rankList.size() == 1) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"") && !statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet().isEmpty()) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          Collections.reverse(opr);
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}",0.9972458113380768
33878,"private void updateQuery(final String query){
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
      Team team=Database.getInstance(this).getTeam(key);
      TeamListElement element=new TeamListElement(team);
      listItems.add(element);
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (eventQueryResults.getCount() >= MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
      Event event=Database.getInstance(this).getEvent(key);
      EventListElement element=new EventListElement(event);
      listItems.add(element);
    }
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
      ListItem clickedItem=adapter.getItem(position);
      if (clickedItem instanceof TeamListElement) {
        String teamKey=((ListElement)clickedItem).getKey();
        Intent i=new Intent(SearchResultsActivity.this,ViewTeamActivity.class);
        i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
        startActivity(i);
      }
 else       if (clickedItem instanceof EventListElement) {
        String eventKey=((ListElement)clickedItem).getKey();
        Intent intent=ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey);
        startActivity(intent);
      }
 else       if (clickedItem == teamsHeader) {
        if (teamsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
        }
      }
 else       if (clickedItem == eventsHeader) {
        if (eventsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
        }
      }
    }
  }
);
}","private void updateQuery(final String query){
  String finalQuery=Utilities.getPreparedQueryForSearch(query);
  ArrayList<ListItem> listItems=new ArrayList<>();
  Cursor teamQueryResults=Database.getInstance(this).getMatchesForTeamQuery(finalQuery);
  if (teamQueryResults != null && teamQueryResults.moveToFirst()) {
    teamQueryResults.moveToPosition(-1);
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    if (teamQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      teamsHeader.showMoreButton(true);
      teamsHeader.setMoreCount(teamQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      teamsHeader.showMoreButton(false);
    }
    listItems.add(teamsHeader);
    while (teamQueryResults.moveToNext()) {
      if (teamQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.KEY));
      Team team=Database.getInstance(this).getTeam(key);
      TeamListElement element=new TeamListElement(team);
      listItems.add(element);
      Log.d(Constants.LOG_TAG,""String_Node_Str"" + teamQueryResults.getString(teamQueryResults.getColumnIndex(Database.SearchTeam.TITLES)));
    }
  }
 else {
    teamsHeader=new SearchResultsHeaderListElement(getString(R.string.teams_header));
    teamsHeader.showMoreButton(false);
    listItems.add(teamsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_teams_found)));
  }
  Cursor eventQueryResults=Database.getInstance(this).getMatchesForEventQuery(finalQuery);
  if (eventQueryResults != null && eventQueryResults.moveToFirst()) {
    eventQueryResults.moveToPosition(-1);
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    if (eventQueryResults.getCount() > MAX_RESULTS_PER_CATEGORY) {
      eventsHeader.showMoreButton(true);
      eventsHeader.setMoreCount(eventQueryResults.getCount() - MAX_RESULTS_PER_CATEGORY);
    }
 else {
      eventsHeader.showMoreButton(false);
    }
    listItems.add(eventsHeader);
    while (eventQueryResults.moveToNext()) {
      if (eventQueryResults.getPosition() >= MAX_RESULTS_PER_CATEGORY) {
        break;
      }
      String key=eventQueryResults.getString(eventQueryResults.getColumnIndex(Database.SearchEvent.KEY));
      Event event=Database.getInstance(this).getEvent(key);
      EventListElement element=new EventListElement(event);
      listItems.add(element);
    }
  }
 else {
    eventsHeader=new SearchResultsHeaderListElement(getString(R.string.events_header));
    eventsHeader.showMoreButton(false);
    listItems.add(eventsHeader);
    listItems.add(new EmptyListElement(getString(R.string.no_events_found)));
  }
  ListViewAdapter adapter=new ListViewAdapter(this,listItems);
  resultsList.setAdapter(adapter);
  resultsList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      ListViewAdapter adapter=(ListViewAdapter)adapterView.getAdapter();
      ListItem clickedItem=adapter.getItem(position);
      if (clickedItem instanceof TeamListElement) {
        String teamKey=((ListElement)clickedItem).getKey();
        Intent i=new Intent(SearchResultsActivity.this,ViewTeamActivity.class);
        i.putExtra(ViewTeamActivity.TEAM_KEY,teamKey);
        startActivity(i);
      }
 else       if (clickedItem instanceof EventListElement) {
        String eventKey=((ListElement)clickedItem).getKey();
        Intent intent=ViewEventActivity.newInstance(SearchResultsActivity.this,eventKey);
        startActivity(intent);
      }
 else       if (clickedItem == teamsHeader) {
        if (teamsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.TEAM_RESULTS,query));
        }
      }
 else       if (clickedItem == eventsHeader) {
        if (eventsHeader.isShowingMoreButton()) {
          startActivity(MoreSearchResultsActivity.newInstance(SearchResultsActivity.this,MoreSearchResultsActivity.EVENT_RESULTS,query));
        }
      }
    }
  }
);
}",0.998696219035202
33879,"@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    if (!allEvents.containsKey(mYear)) {
      try {
        allEvents.put(mYear,DataManager.getEventsByYear(mFragment.getActivity(),mYear).getData());
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"" + mYear);
        return APIResponse.CODE.NODATA;
      }
    }
    mWeek=Event.weekNumFromLabel(allEvents.get(mYear),mHeader);
  }
  eventKeys=new ArrayList<>();
  events=new ArrayList<>();
  APIResponse<ArrayList<SimpleEvent>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek);
      ArrayList<SimpleEvent> eventData=response.getData();
      if (eventData != null && eventData.size() > 0) {
        Collections.sort(eventData,new EventSortByTypeAndDateComparator());
        Event.TYPE lastType=null, currentType;
        for (        SimpleEvent event : eventData) {
          currentType=event.getEventType();
          if (currentType != lastType) {
            eventKeys.add(currentType.toString());
            events.add(new EventWeekHeader(currentType.toString()));
          }
          eventKeys.add(event.getEventKey());
          events.add(event.renderWithShortName());
          lastType=currentType;
        }
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    try {
      response=DataManager.getSimpleEventsForTeamInYear(mFragment.getActivity(),mTeamKey,mYear);
      ArrayList<SimpleEvent> eventsArray=response.getData();
      Collections.sort(eventsArray,new EventSortByTypeAndDateComparator());
      Event.TYPE lastType=null, currentType;
      for (      SimpleEvent event : eventsArray) {
        currentType=event.getEventType();
        if (currentType != lastType) {
          eventKeys.add(currentType.toString());
          events.add(new EventWeekHeader(currentType.toString()));
        }
        eventKeys.add(event.getEventKey());
        events.add(event.renderWithShortName());
        lastType=currentType;
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(Void... params){
  if (mFragment == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (mHeader.equals(""String_Node_Str"")) {
    mWeek=-1;
  }
 else {
    if (!allEvents.containsKey(mYear)) {
      try {
        allEvents.put(mYear,DataManager.getEventsByYear(mFragment.getActivity(),mYear).getData());
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"" + mYear);
        return APIResponse.CODE.NODATA;
      }
    }
    mWeek=Event.weekNumFromLabel(allEvents.get(mYear),mHeader);
  }
  eventKeys=new ArrayList<>();
  events=new ArrayList<>();
  APIResponse<ArrayList<SimpleEvent>> response;
  if (mYear != -1 && mWeek == -1 && mTeamKey == null) {
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey == null) {
    try {
      response=DataManager.getSimpleEventsInWeek(mFragment.getActivity(),mYear,mWeek);
      ArrayList<SimpleEvent> eventData=response.getData();
      if (eventData != null && eventData.size() > 0) {
        Collections.sort(eventData,new EventSortByTypeAndDateComparator());
        Event.TYPE lastType=null, currentType;
        for (        SimpleEvent event : eventData) {
          currentType=event.getEventType();
          if (currentType != lastType) {
            eventKeys.add(currentType.toString());
            events.add(new EventWeekHeader(currentType.toString()));
          }
          eventKeys.add(event.getEventKey());
          if (event.getShortName().isEmpty() || event.getShortName() == null) {
            events.add(event.render());
          }
 else {
            events.add(event.renderWithShortName());
          }
          lastType=currentType;
        }
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"" + mWeek + ""String_Node_Str""+ mYear);
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek == -1 && mTeamKey != null) {
    try {
      response=DataManager.getSimpleEventsForTeamInYear(mFragment.getActivity(),mTeamKey,mYear);
      ArrayList<SimpleEvent> eventsArray=response.getData();
      Collections.sort(eventsArray,new EventSortByTypeAndDateComparator());
      Event.TYPE lastType=null, currentType;
      for (      SimpleEvent event : eventsArray) {
        currentType=event.getEventType();
        if (currentType != lastType) {
          eventKeys.add(currentType.toString());
          events.add(new EventWeekHeader(currentType.toString()));
        }
        eventKeys.add(event.getEventKey());
        events.add(event.renderWithShortName());
        lastType=currentType;
      }
      return response.getCode();
    }
 catch (    Exception e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
 else   if (mYear != -1 && mWeek != -1 && mTeamKey != null) {
  }
  return APIResponse.CODE.NODATA;
}",0.9730580825752274
33880,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (code != APIResponse.CODE.NODATA) {
    JsonObject redAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray redAllianceTeamKeys=redAlliance.getAsJsonArray(""String_Node_Str"");
    TextView red1=((TextView)mActivity.findViewById(R.id.red1));
    TextView red2=((TextView)mActivity.findViewById(R.id.red2));
    TextView red3=((TextView)mActivity.findViewById(R.id.red3));
    TeamClickListener listener=new TeamClickListener(mActivity);
    if (redAllianceTeamKeys.size() == 0) {
      red1.setText(""String_Node_Str"");
      red2.setText(""String_Node_Str"");
      red3.setText(""String_Node_Str"");
    }
 else {
      String red1Key=redAllianceTeamKeys.get(0).getAsString();
      red1.setText(red1Key.substring(3));
      red1.setTag(red1Key);
      red1.setOnClickListener(listener);
      String red2Key=redAllianceTeamKeys.get(1).getAsString();
      red2.setText(red2Key.substring(3));
      red2.setTag(red2Key);
      red2.setOnClickListener(listener);
      if (redAllianceTeamKeys.size() > 2) {
        String red3Key=redAllianceTeamKeys.get(2).getAsString();
        red3.setText(red3Key.substring(3));
        red3.setTag(red3Key);
        red3.setOnClickListener(listener);
      }
 else {
        red3.setVisibility(View.GONE);
      }
    }
    JsonElement redScore=redAlliance.get(""String_Node_Str"");
    TextView red_score=((TextView)mActivity.findViewById(R.id.red_score));
    if (redScore.getAsInt() < 0) {
      red_score.setText(""String_Node_Str"");
    }
 else {
      red_score.setText(redAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonObject blueAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray blueAllianceTeamKeys=blueAlliance.getAsJsonArray(""String_Node_Str"");
    TextView blue1=((TextView)mActivity.findViewById(R.id.blue1));
    TextView blue2=((TextView)mActivity.findViewById(R.id.blue2));
    TextView blue3=((TextView)mActivity.findViewById(R.id.blue3));
    if (blueAllianceTeamKeys.size() == 0) {
      blue1.setText(""String_Node_Str"");
      blue2.setText(""String_Node_Str"");
      blue3.setText(""String_Node_Str"");
    }
 else {
      String blue1Key=blueAllianceTeamKeys.get(0).getAsString();
      blue1.setText(blue1Key.substring(3));
      blue1.setTag(blue1Key);
      blue1.setOnClickListener(listener);
      String blue2Key=blueAllianceTeamKeys.get(1).getAsString();
      blue2.setText(blue2Key.substring(3));
      blue2.setTag(blue2Key);
      blue2.setOnClickListener(listener);
      if (blueAllianceTeamKeys.size() > 2) {
        String blue3Key=blueAllianceTeamKeys.get(2).getAsString();
        blue3.setText(blue3Key.substring(3));
        blue3.setTag(blue3Key);
        blue3.setOnClickListener(listener);
      }
 else {
        blue3.setVisibility(View.GONE);
      }
    }
    TextView blue_score=((TextView)mActivity.findViewById(R.id.blue_score));
    if (blueAlliance.get(""String_Node_Str"").getAsInt() < 0) {
      blue_score.setText(""String_Node_Str"");
    }
 else {
      blue_score.setText(blueAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonElement blueScore=blueAlliance.get(""String_Node_Str"");
    blue_score.setText(blueScore.getAsString());
    Resources resources=mActivity.getResources();
    if (blueScore.getAsInt() > redScore.getAsInt()) {
      View blue_alliance=mActivity.findViewById(R.id.blue_alliance);
      if (blue_alliance != null) {
        blue_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_border));
      }
      blue_score.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_score_border));
    }
 else     if (blueScore.getAsInt() < redScore.getAsInt()) {
      View red_alliance=mActivity.findViewById(R.id.red_alliance);
      if (red_alliance != null) {
        red_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.red_border));
      }
      red_score.setBackgroundDrawable(resources.getDrawable(R.drawable.red_score_border));
    }
    SimpleEvent event=Database.getInstance(mActivity).getEvent(mEventKey);
    if (event != null) {
      ((TextView)mActivity.findViewById(R.id.event_name)).setText(event.getEventName());
    }
    ((TextView)mActivity.findViewById(R.id.match_name)).setText(mMatch.getTitle());
    JsonArray videos=mMatch.getVideos();
    Picasso picasso=Picasso.with(mActivity);
    List<ImageView> images=new ArrayList();
    for (int i=0; i < videos.size(); i++) {
      JsonObject video=videos.get(i).getAsJsonObject();
      if (video.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
        final String videoKey=video.get(""String_Node_Str"").getAsString();
        String thumbnailURL=""String_Node_Str"" + videoKey + ""String_Node_Str"";
        ImageView thumbnail=new ImageView(mActivity);
        thumbnail.setAdjustViewBounds(true);
        thumbnail.setClickable(true);
        thumbnail.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
            mActivity.startActivity(intent);
          }
        }
);
        images.add(thumbnail);
        picasso.load(thumbnailURL).into(thumbnail);
      }
    }
    for (int i=0; i < images.size(); i++) {
      ImageView thumbnail=images.get(i);
      LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
      if (images.size() > 1 && i > 0) {
        layoutParams.topMargin=Utilities.getPixelsFromDp(mActivity,16);
      }
      ((LinearLayout)mActivity.findViewById(R.id.video_thumbnail_container)).addView(thumbnail,layoutParams);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      ((RefreshableHostActivity)mActivity).showWarningMessage(mActivity.getString(R.string.warning_using_cached_data));
    }
    mActivity.findViewById(R.id.progress).setVisibility(View.GONE);
    mActivity.findViewById(R.id.match_container).setVisibility(View.VISIBLE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (code != APIResponse.CODE.NODATA) {
    JsonObject redAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray redAllianceTeamKeys=redAlliance.getAsJsonArray(""String_Node_Str"");
    TextView red1=((TextView)mActivity.findViewById(R.id.red1));
    TextView red2=((TextView)mActivity.findViewById(R.id.red2));
    TextView red3=((TextView)mActivity.findViewById(R.id.red3));
    TeamClickListener listener=new TeamClickListener(mActivity);
    if (redAllianceTeamKeys.size() == 0) {
      red1.setText(""String_Node_Str"");
      red2.setText(""String_Node_Str"");
      red3.setText(""String_Node_Str"");
    }
 else {
      String red1Key=redAllianceTeamKeys.get(0).getAsString();
      red1.setText(red1Key.substring(3));
      red1.setTag(red1Key);
      red1.setOnClickListener(listener);
      String red2Key=redAllianceTeamKeys.get(1).getAsString();
      red2.setText(red2Key.substring(3));
      red2.setTag(red2Key);
      red2.setOnClickListener(listener);
      if (redAllianceTeamKeys.size() > 2) {
        String red3Key=redAllianceTeamKeys.get(2).getAsString();
        red3.setText(red3Key.substring(3));
        red3.setTag(red3Key);
        red3.setOnClickListener(listener);
      }
 else {
        red3.setVisibility(View.GONE);
      }
    }
    JsonElement redScore=redAlliance.get(""String_Node_Str"");
    TextView red_score=((TextView)mActivity.findViewById(R.id.red_score));
    if (redScore.getAsInt() < 0) {
      red_score.setText(""String_Node_Str"");
    }
 else {
      red_score.setText(redAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonObject blueAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray blueAllianceTeamKeys=blueAlliance.getAsJsonArray(""String_Node_Str"");
    TextView blue1=((TextView)mActivity.findViewById(R.id.blue1));
    TextView blue2=((TextView)mActivity.findViewById(R.id.blue2));
    TextView blue3=((TextView)mActivity.findViewById(R.id.blue3));
    if (blueAllianceTeamKeys.size() == 0) {
      blue1.setText(""String_Node_Str"");
      blue2.setText(""String_Node_Str"");
      blue3.setText(""String_Node_Str"");
    }
 else {
      String blue1Key=blueAllianceTeamKeys.get(0).getAsString();
      blue1.setText(blue1Key.substring(3));
      blue1.setTag(blue1Key);
      blue1.setOnClickListener(listener);
      String blue2Key=blueAllianceTeamKeys.get(1).getAsString();
      blue2.setText(blue2Key.substring(3));
      blue2.setTag(blue2Key);
      blue2.setOnClickListener(listener);
      if (blueAllianceTeamKeys.size() > 2) {
        String blue3Key=blueAllianceTeamKeys.get(2).getAsString();
        blue3.setText(blue3Key.substring(3));
        blue3.setTag(blue3Key);
        blue3.setOnClickListener(listener);
      }
 else {
        blue3.setVisibility(View.GONE);
      }
    }
    TextView blue_score=((TextView)mActivity.findViewById(R.id.blue_score));
    JsonElement blueScore=blueAlliance.get(""String_Node_Str"");
    if (blueScore.getAsInt() < 0) {
      blue_score.setText(""String_Node_Str"");
    }
 else {
      blue_score.setText(blueScore.getAsString());
    }
    Resources resources=mActivity.getResources();
    if (blueScore.getAsInt() > redScore.getAsInt()) {
      View blue_alliance=mActivity.findViewById(R.id.blue_alliance);
      if (blue_alliance != null) {
        blue_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_border));
      }
      blue_score.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_score_border));
    }
 else     if (blueScore.getAsInt() < redScore.getAsInt()) {
      View red_alliance=mActivity.findViewById(R.id.red_alliance);
      if (red_alliance != null) {
        red_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.red_border));
      }
      red_score.setBackgroundDrawable(resources.getDrawable(R.drawable.red_score_border));
    }
    SimpleEvent event=Database.getInstance(mActivity).getEvent(mEventKey);
    if (event != null) {
      ((TextView)mActivity.findViewById(R.id.event_name)).setText(event.getEventName());
    }
    ((TextView)mActivity.findViewById(R.id.match_name)).setText(mMatch.getTitle());
    JsonArray videos=mMatch.getVideos();
    Picasso picasso=Picasso.with(mActivity);
    List<ImageView> images=new ArrayList();
    for (int i=0; i < videos.size(); i++) {
      JsonObject video=videos.get(i).getAsJsonObject();
      if (video.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
        final String videoKey=video.get(""String_Node_Str"").getAsString();
        String thumbnailURL=""String_Node_Str"" + videoKey + ""String_Node_Str"";
        ImageView thumbnail=new ImageView(mActivity);
        thumbnail.setAdjustViewBounds(true);
        thumbnail.setClickable(true);
        thumbnail.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
            mActivity.startActivity(intent);
          }
        }
);
        images.add(thumbnail);
        picasso.load(thumbnailURL).into(thumbnail);
      }
    }
    for (int i=0; i < images.size(); i++) {
      ImageView thumbnail=images.get(i);
      LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
      if (images.size() > 1 && i > 0) {
        layoutParams.topMargin=Utilities.getPixelsFromDp(mActivity,16);
      }
      ((LinearLayout)mActivity.findViewById(R.id.video_thumbnail_container)).addView(thumbnail,layoutParams);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      ((RefreshableHostActivity)mActivity).showWarningMessage(mActivity.getString(R.string.warning_using_cached_data));
    }
    mActivity.findViewById(R.id.progress).setVisibility(View.GONE);
    mActivity.findViewById(R.id.match_container).setVisibility(View.VISIBLE);
  }
}",0.96764633242776
33881,"public static synchronized APIResponse<HashMap<Match.TYPE,ArrayList<Match>>> getEventResults(Context c,String eventKey,String teamKey) throws NoDataException {
  HashMap<Match.TYPE,ArrayList<Match>> results=new HashMap<Match.TYPE,ArrayList<Match>>();
  results.put(Match.TYPE.QUAL,new ArrayList<Match>());
  results.put(Match.TYPE.QUARTER,new ArrayList<Match>());
  results.put(Match.TYPE.SEMI,new ArrayList<Match>());
  results.put(Match.TYPE.FINAL,new ArrayList<Match>());
  Log.d(""String_Node_Str"",""String_Node_Str"" + eventKey);
  APIResponse<String> response=TBAv2.getResponseFromURLOrThrow(c,""String_Node_Str"" + eventKey + ""String_Node_Str"",true);
  Iterator<JsonElement> iterator=JSONManager.getasJsonArray(response.getData()).iterator();
  while (iterator.hasNext()) {
    Match match=JSONManager.getGson().fromJson(iterator.next().getAsJsonObject(),Match.class);
    if (match.getAlliances().toString().contains(teamKey)) {
      results.get(match.getType()).add(match);
    }
  }
  return new APIResponse<>(results,response.getCode());
}","public static synchronized APIResponse<HashMap<Match.TYPE,ArrayList<Match>>> getEventResults(Context c,String eventKey,String teamKey) throws NoDataException {
  HashMap<Match.TYPE,ArrayList<Match>> results=new HashMap<Match.TYPE,ArrayList<Match>>();
  results.put(Match.TYPE.QUAL,new ArrayList<Match>());
  results.put(Match.TYPE.QUARTER,new ArrayList<Match>());
  results.put(Match.TYPE.SEMI,new ArrayList<Match>());
  results.put(Match.TYPE.FINAL,new ArrayList<Match>());
  Log.d(""String_Node_Str"",""String_Node_Str"" + eventKey);
  APIResponse<String> response=TBAv2.getResponseFromURLOrThrow(c,""String_Node_Str"" + eventKey + ""String_Node_Str"",true);
  Iterator<JsonElement> iterator=JSONManager.getasJsonArray(response.getData()).iterator();
  while (iterator.hasNext()) {
    Match match=JSONManager.getGson().fromJson(iterator.next().getAsJsonObject(),Match.class);
    if (match.getAlliances().toString().contains(teamKey + ""String_Node_Str"")) {
      results.get(match.getType()).add(match);
    }
  }
  return new APIResponse<>(results,response.getCode());
}",0.990530303030303
33882,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_team_at_event);
  Bundle extras=getIntent().getExtras();
  if (extras != null && (extras.containsKey(EVENT) && extras.containsKey(TEAM))) {
    teamKey=extras.getString(TEAM);
    eventKey=extras.getString(EVENT);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportFragmentManager().beginTransaction().add(R.id.content,EventResultsFragment.newInstance(eventKey,teamKey)).commit();
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_team_at_event);
  Bundle extras=getIntent().getExtras();
  if (extras != null && (extras.containsKey(EVENT) && extras.containsKey(TEAM))) {
    teamKey=extras.getString(TEAM);
    eventKey=extras.getString(EVENT);
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  getActionBar().setDisplayHomeAsUpEnabled(true);
  FragmentManager manager=getSupportFragmentManager();
  Fragment f=manager.findFragmentByTag(""String_Node_Str"");
  if (f == null) {
    manager.beginTransaction().add(R.id.content,EventResultsFragment.newInstance(eventKey,teamKey),""String_Node_Str"").commit();
  }
 else {
    f.onResume();
  }
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
}",0.8781431334622823
33883,"protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups,teamKey);
    ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.match_results);
    listView.setAdapter(adapter);
    if (teamKey.isEmpty()) {
      activity.getActionBar().setTitle(event.getEventName());
    }
 else {
      activity.getActionBar().setTitle(teamKey.substring(3) + ""String_Node_Str"" + event.getShortName());
      ((TextView)activity.findViewById(R.id.team_record)).setText(Html.fromHtml(String.format(activity.getString(R.string.team_record),teamKey.substring(3),rank,recordString)));
      activity.findViewById(R.id.content_view).setVisibility(View.VISIBLE);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups,teamKey);
    ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.match_results);
    listView.setAdapter(adapter);
    if (teamKey.isEmpty()) {
      activity.getActionBar().setTitle(event.getEventName());
    }
 else {
      activity.getActionBar().setTitle(teamKey.substring(3) + ""String_Node_Str"" + event.getShortName());
      ((TextView)activity.findViewById(R.id.team_record)).setText(Html.fromHtml(String.format(activity.getString(R.string.team_record),teamKey.substring(3),rank,recordString)));
      activity.findViewById(R.id.team_at_event_info).setVisibility(View.VISIBLE);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.9862204724409448
33884,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (code != APIResponse.CODE.NODATA) {
    JsonObject redAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray redAllianceTeamKeys=redAlliance.getAsJsonArray(""String_Node_Str"");
    TextView red1=((TextView)mActivity.findViewById(R.id.red1));
    TextView red2=((TextView)mActivity.findViewById(R.id.red2));
    TextView red3=((TextView)mActivity.findViewById(R.id.red3));
    TeamClickListener listener=new TeamClickListener(mActivity);
    if (redAllianceTeamKeys.size() == 0) {
      red1.setText(""String_Node_Str"");
      red2.setText(""String_Node_Str"");
      red3.setText(""String_Node_Str"");
    }
 else {
      String red1Key=redAllianceTeamKeys.get(0).getAsString();
      red1.setText(red1Key.substring(3));
      red1.setTag(red1Key);
      red1.setOnClickListener(listener);
      String red2Key=redAllianceTeamKeys.get(1).getAsString();
      red2.setText(red2Key.substring(3));
      red2.setTag(red2Key);
      red2.setOnClickListener(listener);
      if (redAllianceTeamKeys.size() > 2) {
        String red3Key=redAllianceTeamKeys.get(2).getAsString();
        red3.setText(red3Key.substring(3));
        red3.setTag(red3Key);
        red3.setOnClickListener(listener);
      }
 else {
        red3.setVisibility(View.GONE);
      }
    }
    JsonElement redScore=redAlliance.get(""String_Node_Str"");
    TextView red_score=((TextView)mActivity.findViewById(R.id.red_score));
    if (redScore.getAsInt() < 0) {
      red_score.setText(""String_Node_Str"");
    }
 else {
      red_score.setText(redAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonObject blueAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray blueAllianceTeamKeys=blueAlliance.getAsJsonArray(""String_Node_Str"");
    TextView blue1=((TextView)mActivity.findViewById(R.id.blue1));
    TextView blue2=((TextView)mActivity.findViewById(R.id.blue2));
    TextView blue3=((TextView)mActivity.findViewById(R.id.blue3));
    if (blueAllianceTeamKeys.size() == 0) {
      blue1.setText(""String_Node_Str"");
      blue2.setText(""String_Node_Str"");
      blue3.setText(""String_Node_Str"");
    }
 else {
      String blue1Key=blueAllianceTeamKeys.get(0).getAsString();
      blue1.setText(blue1Key.substring(3));
      blue1.setTag(blue1Key);
      blue1.setOnClickListener(listener);
      String blue2Key=blueAllianceTeamKeys.get(1).getAsString();
      blue2.setText(blue2Key.substring(3));
      blue2.setTag(blue2Key);
      blue2.setOnClickListener(listener);
      if (blueAllianceTeamKeys.size() > 2) {
        String blue3Key=blueAllianceTeamKeys.get(2).getAsString();
        blue3.setText(blue3Key.substring(3));
        blue3.setTag(blue3Key);
        blue3.setOnClickListener(listener);
      }
 else {
        blue3.setVisibility(View.GONE);
      }
    }
    TextView blue_score=((TextView)mActivity.findViewById(R.id.blue_score));
    if (blueAlliance.get(""String_Node_Str"").getAsInt() < 0) {
      blue_score.setText(""String_Node_Str"");
    }
 else {
      blue_score.setText(blueAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonElement blueScore=blueAlliance.get(""String_Node_Str"");
    blue_score.setText(blueScore.getAsString());
    Resources resources=mActivity.getResources();
    if (blueScore.getAsInt() > redScore.getAsInt()) {
      View blue_alliance=mActivity.findViewById(R.id.blue_alliance);
      if (blue_alliance != null) {
        blue_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_border));
      }
      blue_score.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_score_border));
    }
 else     if (blueScore.getAsInt() < redScore.getAsInt()) {
      View red_alliance=mActivity.findViewById(R.id.red_alliance);
      if (red_alliance != null) {
        red_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.red_border));
      }
      red_score.setBackgroundDrawable(resources.getDrawable(R.drawable.red_score_border));
    }
    SimpleEvent event=Database.getInstance(mActivity).getEvent(mEventKey);
    if (event != null) {
      ((TextView)mActivity.findViewById(R.id.event_name)).setText(event.getEventName());
    }
    ((TextView)mActivity.findViewById(R.id.match_name)).setText(mMatch.getTitle());
    JsonArray videos=mMatch.getVideos();
    Picasso picasso=Picasso.with(mActivity);
    List<ImageView> images=new ArrayList();
    for (int i=0; i < videos.size(); i++) {
      JsonObject video=videos.get(i).getAsJsonObject();
      if (video.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
        final String videoKey=video.get(""String_Node_Str"").getAsString();
        String thumbnailURL=""String_Node_Str"" + videoKey + ""String_Node_Str"";
        ImageView thumbnail=new ImageView(mActivity);
        thumbnail.setAdjustViewBounds(true);
        thumbnail.setClickable(true);
        thumbnail.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
            mActivity.startActivity(intent);
          }
        }
);
        images.add(thumbnail);
        picasso.load(thumbnailURL).into(thumbnail);
      }
    }
    for (int i=0; i < images.size(); i++) {
      ImageView thumbnail=images.get(i);
      LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
      if (images.size() > 1 && i > 0) {
        layoutParams.topMargin=Utilities.getPixelsFromDp(mActivity,16);
      }
      ((LinearLayout)mActivity.findViewById(R.id.video_thumbnail_container)).addView(thumbnail,layoutParams);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      ((RefreshableHostActivity)mActivity).showWarningMessage(mActivity.getString(R.string.warning_using_cached_data));
    }
    mActivity.findViewById(R.id.progress).setVisibility(View.GONE);
    mActivity.findViewById(R.id.match_container).setVisibility(View.VISIBLE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (code != APIResponse.CODE.NODATA) {
    JsonObject redAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray redAllianceTeamKeys=redAlliance.getAsJsonArray(""String_Node_Str"");
    TextView red1=((TextView)mActivity.findViewById(R.id.red1));
    TextView red2=((TextView)mActivity.findViewById(R.id.red2));
    TextView red3=((TextView)mActivity.findViewById(R.id.red3));
    TeamClickListener listener=new TeamClickListener(mActivity);
    if (redAllianceTeamKeys.size() == 0) {
      red1.setText(""String_Node_Str"");
      red2.setText(""String_Node_Str"");
      red3.setText(""String_Node_Str"");
    }
 else {
      String red1Key=redAllianceTeamKeys.get(0).getAsString();
      red1.setText(red1Key.substring(3));
      red1.setTag(red1Key);
      red1.setOnClickListener(listener);
      String red2Key=redAllianceTeamKeys.get(1).getAsString();
      red2.setText(red2Key.substring(3));
      red2.setTag(red2Key);
      red2.setOnClickListener(listener);
      if (redAllianceTeamKeys.size() > 2) {
        String red3Key=redAllianceTeamKeys.get(2).getAsString();
        red3.setText(red3Key.substring(3));
        red3.setTag(red3Key);
        red3.setOnClickListener(listener);
      }
 else {
        red3.setVisibility(View.GONE);
      }
    }
    JsonElement redScore=redAlliance.get(""String_Node_Str"");
    TextView red_score=((TextView)mActivity.findViewById(R.id.red_score));
    if (redScore.getAsInt() < 0) {
      red_score.setText(""String_Node_Str"");
    }
 else {
      red_score.setText(redAlliance.get(""String_Node_Str"").getAsString());
    }
    JsonObject blueAlliance=mMatch.getAlliances().getAsJsonObject(""String_Node_Str"");
    JsonArray blueAllianceTeamKeys=blueAlliance.getAsJsonArray(""String_Node_Str"");
    TextView blue1=((TextView)mActivity.findViewById(R.id.blue1));
    TextView blue2=((TextView)mActivity.findViewById(R.id.blue2));
    TextView blue3=((TextView)mActivity.findViewById(R.id.blue3));
    if (blueAllianceTeamKeys.size() == 0) {
      blue1.setText(""String_Node_Str"");
      blue2.setText(""String_Node_Str"");
      blue3.setText(""String_Node_Str"");
    }
 else {
      String blue1Key=blueAllianceTeamKeys.get(0).getAsString();
      blue1.setText(blue1Key.substring(3));
      blue1.setTag(blue1Key);
      blue1.setOnClickListener(listener);
      String blue2Key=blueAllianceTeamKeys.get(1).getAsString();
      blue2.setText(blue2Key.substring(3));
      blue2.setTag(blue2Key);
      blue2.setOnClickListener(listener);
      if (blueAllianceTeamKeys.size() > 2) {
        String blue3Key=blueAllianceTeamKeys.get(2).getAsString();
        blue3.setText(blue3Key.substring(3));
        blue3.setTag(blue3Key);
        blue3.setOnClickListener(listener);
      }
 else {
        blue3.setVisibility(View.GONE);
      }
    }
    TextView blue_score=((TextView)mActivity.findViewById(R.id.blue_score));
    JsonElement blueScore=blueAlliance.get(""String_Node_Str"");
    if (blueScore.getAsInt() < 0) {
      blue_score.setText(""String_Node_Str"");
    }
 else {
      blue_score.setText(blueScore.getAsString());
    }
    Resources resources=mActivity.getResources();
    if (blueScore.getAsInt() > redScore.getAsInt()) {
      View blue_alliance=mActivity.findViewById(R.id.blue_alliance);
      if (blue_alliance != null) {
        blue_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_border));
      }
      blue_score.setBackgroundDrawable(resources.getDrawable(R.drawable.blue_score_border));
    }
 else     if (blueScore.getAsInt() < redScore.getAsInt()) {
      View red_alliance=mActivity.findViewById(R.id.red_alliance);
      if (red_alliance != null) {
        red_alliance.setBackgroundDrawable(resources.getDrawable(R.drawable.red_border));
      }
      red_score.setBackgroundDrawable(resources.getDrawable(R.drawable.red_score_border));
    }
    SimpleEvent event=Database.getInstance(mActivity).getEvent(mEventKey);
    if (event != null) {
      ((TextView)mActivity.findViewById(R.id.event_name)).setText(event.getEventName());
    }
    ((TextView)mActivity.findViewById(R.id.match_name)).setText(mMatch.getTitle());
    JsonArray videos=mMatch.getVideos();
    Picasso picasso=Picasso.with(mActivity);
    List<ImageView> images=new ArrayList();
    for (int i=0; i < videos.size(); i++) {
      JsonObject video=videos.get(i).getAsJsonObject();
      if (video.get(""String_Node_Str"").getAsString().equals(""String_Node_Str"")) {
        final String videoKey=video.get(""String_Node_Str"").getAsString();
        String thumbnailURL=""String_Node_Str"" + videoKey + ""String_Node_Str"";
        ImageView thumbnail=new ImageView(mActivity);
        thumbnail.setAdjustViewBounds(true);
        thumbnail.setClickable(true);
        thumbnail.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View view){
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + videoKey));
            mActivity.startActivity(intent);
          }
        }
);
        images.add(thumbnail);
        picasso.load(thumbnailURL).into(thumbnail);
      }
    }
    for (int i=0; i < images.size(); i++) {
      ImageView thumbnail=images.get(i);
      LinearLayout.LayoutParams layoutParams=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
      if (images.size() > 1 && i > 0) {
        layoutParams.topMargin=Utilities.getPixelsFromDp(mActivity,16);
      }
      ((LinearLayout)mActivity.findViewById(R.id.video_thumbnail_container)).addView(thumbnail,layoutParams);
    }
    if (code == APIResponse.CODE.OFFLINECACHE) {
      ((RefreshableHostActivity)mActivity).showWarningMessage(mActivity.getString(R.string.warning_using_cached_data));
    }
    mActivity.findViewById(R.id.progress).setVisibility(View.GONE);
    mActivity.findViewById(R.id.match_container).setVisibility(View.VISIBLE);
  }
}",0.96764633242776
33885,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activty_start);
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  int initNavId=R.id.nav_item_events;
  Bundle b=getIntent().getExtras();
  if (b != null) {
    if (b.containsKey(REQUESTED_MODE)) {
      if (b.getInt(REQUESTED_MODE,-1) != -1) {
        initNavId=b.getInt(REQUESTED_MODE);
      }
    }
  }
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(STATE_SELECTED_NAV_ID)) {
      initNavId=savedInstanceState.getInt(STATE_SELECTED_NAV_ID);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
  switchToModeForId(initNavId);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_start);
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  int initNavId=R.id.nav_item_events;
  Bundle b=getIntent().getExtras();
  if (b != null) {
    if (b.containsKey(REQUESTED_MODE)) {
      if (b.getInt(REQUESTED_MODE,-1) != -1) {
        initNavId=b.getInt(REQUESTED_MODE);
      }
    }
  }
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(STATE_SELECTED_NAV_ID)) {
      initNavId=savedInstanceState.getInt(STATE_SELECTED_NAV_ID);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
  switchToModeForId(initNavId);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
}",0.999538958045182
33886,"public PopulateEventList(EventListFragment fragment,int year,int week,String teamKey){
  mFragment=fragment;
  mYear=year;
  mWeek=week;
  mTeamKey=teamKey;
}","public PopulateEventList(EventListFragment fragment,int year,int week,String teamKey){
  mFragment=fragment;
  mYear=year;
  mWeek=week;
  mTeamKey=teamKey;
  activity=(RefreshableHostActivity)mFragment.getActivity();
}",0.8381962864721485
33887,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (mFragment.getView() != null && mFragment.getActivity() != null) {
    ListView eventList=(ListView)mFragment.getView().findViewById(R.id.list);
    ListViewAdapter adapter=new ListViewAdapter(mFragment.getActivity(),events);
    eventList.setAdapter(adapter);
    if (c == APIResponse.CODE.OFFLINECACHE) {
      ((RefreshableHostActivity)mFragment.getActivity()).showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListView eventList=(ListView)view.findViewById(R.id.list);
    ListViewAdapter adapter=new ListViewAdapter(activity,events);
    eventList.setAdapter(adapter);
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(mFragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.8272884283246977
33888,"@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  if (fragment.getActivity() != null) {
    adapter=new ListViewAdapter(fragment.getActivity(),teamItems);
  }
  if (fragment.getView() != null) {
    ListView eventList=(ListView)fragment.getView().findViewById(R.id.list);
    eventList.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(fragment.getString(R.string.warning_using_cached_data));
    }
    fragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  super.onPostExecute(code);
  View view=fragment.getView();
  if (activity != null && view != null) {
    adapter=new ListViewAdapter(fragment.getActivity(),teamItems);
    ListView eventList=(ListView)fragment.getView().findViewById(R.id.list);
    eventList.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(fragment.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.7996485061511424
33889,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"")) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && activity != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"")) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}",0.9961628914469612
33890,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity instanceof NavigationDrawerActivity) {
    ((NavigationDrawerActivity)activity).setActionBarTitle(event.getEventName());
  }
 else {
    activity.getActionBar().setTitle(event.getEventName());
  }
  if (event != null && mFragment.getActivity() != null) {
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    eventLoc.setText(event.getLocation());
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (mFragment.getView() != null) {
      mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
      mFragment.getView().findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && activity != null) {
    if (activity instanceof NavigationDrawerActivity) {
      ((NavigationDrawerActivity)activity).setActionBarTitle(event.getEventName());
    }
 else {
      activity.getActionBar().setTitle(event.getEventName());
    }
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    eventLoc.setText(event.getLocation());
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    View view=mFragment.getView();
    if (view != null) {
      view.findViewById(R.id.progress).setVisibility(View.GONE);
      view.findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}",0.8324525955859496
33891,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    ListView rankings=(ListView)view.findViewById(R.id.list);
    ListViewAdapter adapter=new ListViewAdapter(mFragment.getActivity(),teams);
    rankings.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListView rankings=(ListView)view.findViewById(R.id.list);
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    rankings.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.9412878787878788
33892,"protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups);
    ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.match_results);
    listView.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    MatchListAdapter adapter=new MatchListAdapter(activity,groups);
    ExpandableListView listView=(ExpandableListView)view.findViewById(R.id.match_results);
    listView.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.9714285714285714
33893,"@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && mFragment != null) {
    ListViewAdapter adapter=new ListViewAdapter(mFragment.getActivity(),teams);
    ListView stats=(ListView)view.findViewById(R.id.list);
    stats.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE code){
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    ListView stats=(ListView)view.findViewById(R.id.list);
    stats.setAdapter(adapter);
    if (code == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.9533980582524272
33894,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    ListViewAdapter adapter=new ListViewAdapter(mFragment.getActivity(),teams);
    adapter.notifyDataSetChanged();
    ListView teamList=(ListView)view.findViewById(R.id.list);
    teamList.setAdapter(adapter);
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  View view=mFragment.getView();
  if (view != null && activity != null) {
    ListViewAdapter adapter=new ListViewAdapter(activity,teams);
    adapter.notifyDataSetChanged();
    ListView teamList=(ListView)view.findViewById(R.id.list);
    teamList.setAdapter(adapter);
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    view.findViewById(R.id.progress).setVisibility(View.GONE);
  }
}",0.946917808219178
33895,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
 else {
    mTask=new PopulateEventAwards(this);
    mTask.execute(mEventKey);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String eventKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.list_fragment_with_spinner,null);
  mListView=(ListView)view.findViewById(R.id.list);
  mProgressBar=(ProgressBar)view.findViewById(R.id.progress);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
    mProgressBar.setVisibility(View.GONE);
  }
 else {
    mTask=new PopulateEventAwards(this);
    mTask.execute(mEventKey);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> adapterView,    View view,    int position,    long id){
      String eventKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
      if (!eventKey.equals(""String_Node_Str"")) {
        startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
      }
    }
  }
);
  return view;
}",0.9508026929052305
33896,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  String eventKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
  startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  String eventKey=((ListElement)((ListViewAdapter)adapterView.getAdapter()).getItem(position)).getKey();
  if (!eventKey.equals(""String_Node_Str"")) {
    startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
  }
}",0.9139966273187184
33897,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_start);
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  int currentYear=Calendar.getInstance().get(Calendar.YEAR);
  dropdownItems=new String[currentYear - oldestYearToDisplay + 1];
  for (int i=0; i < dropdownItems.length; i++) {
    dropdownItems[i]=Integer.toString(currentYear - i);
  }
  int initNavId=R.id.nav_item_events;
  Bundle b=getIntent().getExtras();
  if (b != null) {
    if (b.containsKey(REQUESTED_MODE)) {
      if (b.getInt(REQUESTED_MODE,-1) != -1) {
        initNavId=b.getInt(REQUESTED_MODE);
      }
    }
  }
  if (savedInstanceState != null) {
    if (savedInstanceState.containsKey(STATE_SELECTED_NAV_ID)) {
      initNavId=savedInstanceState.getInt(STATE_SELECTED_NAV_ID);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
  switchToModeForId(initNavId);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_start);
  warningMessage=(TextView)findViewById(R.id.warning_container);
  hideWarningMessage();
  int currentYear=Calendar.getInstance().get(Calendar.YEAR);
  dropdownItems=new String[currentYear - oldestYearToDisplay + 1];
  for (int i=0; i < dropdownItems.length; i++) {
    dropdownItems[i]=Integer.toString(currentYear - i);
  }
  int initNavId=R.id.nav_item_events;
  Bundle b=getIntent().getExtras();
  if (b != null) {
    if (b.containsKey(REQUESTED_MODE)) {
      if (b.getInt(REQUESTED_MODE,-1) != -1) {
        initNavId=b.getInt(REQUESTED_MODE);
      }
    }
  }
  if (savedInstanceState != null) {
    fromSavedInstance=true;
    if (savedInstanceState.containsKey(STATE_SELECTED_NAV_ID)) {
      initNavId=savedInstanceState.getInt(STATE_SELECTED_NAV_ID);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
  switchToModeForId(initNavId);
  if (!ConnectionDetector.isConnectedToInternet(this)) {
    showWarningMessage(getString(R.string.warning_unable_to_load));
  }
}",0.9895209580838324
33898,"@Override public boolean onNavigationItemSelected(int position,long id){
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in,R.anim.fade_out).replace(R.id.container,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  return true;
}","@Override public boolean onNavigationItemSelected(int position,long id){
  if (position == mCurrentSelectedYearPosition) {
    return true;
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + Integer.parseInt(dropdownItems[position]));
  getSupportFragmentManager().beginTransaction().setCustomAnimations(R.anim.fade_in,R.anim.fade_out).replace(R.id.container,EventsByWeekFragment.newInstance(Integer.parseInt(dropdownItems[position])),MAIN_FRAGMENT_TAG).commit();
  mCurrentSelectedYearPosition=position;
  return true;
}",0.9267285861713106
33899,"@Override public void onCreateNavigationDrawer(){
  useActionBarToggle(true);
  encourageLearning(true);
}","@Override public void onCreateNavigationDrawer(){
  useActionBarToggle(true);
  encourageLearning(fromSavedInstance ? false : true);
}",0.8833333333333333
33900,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mYear=getArguments().getInt(YEAR,2014);
  }
  Log.d(Constants.LOG_TAG,""String_Node_Str"" + mYear);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Log.d(Constants.LOG_TAG,""String_Node_Str"");
  int currentYear=Calendar.getInstance().get(Calendar.YEAR);
  if (getArguments() != null) {
    mYear=getArguments().getInt(YEAR,currentYear);
  }
}",0.5419847328244275
33901,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  final int mShortAnimationDuration=getResources().getInteger(android.R.integer.config_shortAnimTime);
  view.animate().alpha(0f).setDuration(mShortAnimationDuration).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      mViewPager.setAdapter(new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear));
      tabs.setViewPager(mViewPager);
      int currentWeek=Event.competitionWeek(new Date());
      int week1Index=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getLabels().indexOf(String.format(Event.REGIONAL_LABEL,1));
      mViewPager.setCurrentItem(currentWeek > 10 ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
      view.animate().alpha(1f).setDuration(mShortAnimationDuration).setListener(null).start();
    }
  }
).start();
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_event_list_fragment_pager,container,false);
  mViewPager=(ViewPager)view.findViewById(R.id.event_pager);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final Context c=getActivity();
  final int mShortAnimationDuration=getResources().getInteger(android.R.integer.config_shortAnimTime);
  mViewPager.setAdapter(new EventsByWeekFragmentPagerAdapter(c,getChildFragmentManager(),mYear));
  tabs.setViewPager(mViewPager);
  int currentWeek=Event.competitionWeek(new Date());
  int week1Index=((EventsByWeekFragmentPagerAdapter)mViewPager.getAdapter()).getLabels().indexOf(String.format(Event.REGIONAL_LABEL,1));
  mViewPager.setCurrentItem(currentWeek > 10 ? Math.min(mViewPager.getAdapter().getCount(),week1Index) : currentWeek);
  return view;
}",0.8490310950878774
33902,"@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"")) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}","@Override protected APIResponse.CODE doInBackground(String... params){
  eventKey=params[0];
  View view=mFragment.getView();
  if (view != null && mFragment.getActivity() != null) {
    eventName=(TextView)view.findViewById(R.id.event_name);
    eventDate=(TextView)view.findViewById(R.id.event_date);
    eventLoc=(TextView)view.findViewById(R.id.event_location);
    nextLayout=(LinearLayout)view.findViewById(R.id.event_next_match_container);
    lastLayout=(LinearLayout)view.findViewById(R.id.event_last_match_container);
    topTeams=(LinearLayout)view.findViewById(R.id.event_top_teams_container);
    topOpr=(LinearLayout)view.findViewById(R.id.top_opr_container);
    LayoutInflater inflater=(LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    try {
      APIResponse<Event> response=DataManager.getEvent(activity,eventKey);
      event=response.getData();
    }
 catch (    DataManager.NoDataException e) {
      Log.w(Constants.LOG_TAG,""String_Node_Str"");
      return APIResponse.CODE.NODATA;
    }
    if (event.hasStarted()) {
      showRanks=showStats=true;
      ranks=new TextView(activity);
      try {
        APIResponse<ArrayList<JsonArray>> rankResponse=DataManager.getEventRankings(activity,eventKey);
        ArrayList<JsonArray> rankList=rankResponse.getData();
        String rankString=""String_Node_Str"";
        if (rankList.size() == 0) {
          showRanks=false;
        }
        for (int i=1; i < Math.min(6,rankList.size()); i++) {
          rankString+=((i) + ""String_Node_Str"" + rankList.get(i).get(1).getAsString()) + ""String_Node_Str"";
        }
        ranks.setText(rankString);
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showRanks=false;
        return APIResponse.CODE.NODATA;
      }
      stats=new TextView(activity);
      try {
        APIResponse<JsonObject> statsResponse=DataManager.getEventStats(activity,eventKey);
        ArrayList<Map.Entry<String,JsonElement>> opr=new ArrayList<>();
        if (statsResponse.getData().has(""String_Node_Str"")) {
          opr.addAll(statsResponse.getData().get(""String_Node_Str"").getAsJsonObject().entrySet());
          Collections.sort(opr,new TeamSortByOPRComparator());
          String statsString=""String_Node_Str"";
          for (int i=0; i < Math.min(5,opr.size()); i++) {
            statsString+=((i + 1) + ""String_Node_Str"" + opr.get(i).getKey()+ ""String_Node_Str"");
          }
          stats.setText(statsString);
        }
 else {
          showStats=false;
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        showStats=false;
        return APIResponse.CODE.NODATA;
      }
    }
    if (event.isHappeningNow()) {
      try {
        APIResponse<ArrayList<Match>> matchResult=DataManager.getMatchList(activity,eventKey);
        ArrayList<Match> matches=matchResult.getData();
        Collections.sort(matches,new MatchSortByPlayOrderComparator());
        Match nextMatch=Match.getNextMatchPlayed(matches);
        Match lastMatch=Match.getLastMatchPlayed(matches);
        if (nextMatch != null) {
          showNextMatch=true;
          next=nextMatch.render().getView(activity,inflater,null);
        }
        if (lastMatch != null) {
          showLastMatch=true;
          last=lastMatch.render().getView(activity,inflater,null);
        }
      }
 catch (      DataManager.NoDataException e) {
        Log.w(Constants.LOG_TAG,""String_Node_Str"");
        return APIResponse.CODE.NODATA;
      }
    }
    view.findViewById(R.id.event_location_container).setTag(""String_Node_Str"" + event.getLocation().replace(""String_Node_Str"",""String_Node_Str""));
    view.findViewById(R.id.event_website_button).setTag(!event.getWebsite().isEmpty() ? event.getWebsite() : ""String_Node_Str"" + event.getEventName());
    view.findViewById(R.id.event_twitter_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_youtube_button).setTag(""String_Node_Str"" + event.getEventKey());
    view.findViewById(R.id.event_cd_button).setTag(""String_Node_Str"" + event.getEventKey());
  }
  return APIResponse.CODE.NODATA;
}",0.979665940450254
33903,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity instanceof NavigationDrawerActivity) {
    ((NavigationDrawerActivity)activity).setActionBarTitle(event.getEventName());
  }
 else {
    activity.getActionBar().setTitle(event.getEventName());
  }
  if (event != null && mFragment.getActivity() != null) {
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    eventLoc.setText(event.getLocation());
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (mFragment.getView() != null) {
      mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
      mFragment.getView().findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (activity instanceof NavigationDrawerActivity) {
    ((NavigationDrawerActivity)activity).setActionBarTitle(event.getEventName());
  }
 else {
    activity.getActionBar().setTitle(event.getEventName());
  }
  if (event != null && mFragment.getActivity() != null) {
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    if (event.getLocation().isEmpty()) {
      activity.findViewById(R.id.event_location_container).setVisibility(View.GONE);
    }
 else {
      eventLoc.setText(event.getLocation());
    }
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (mFragment.getView() != null) {
      mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
      mFragment.getView().findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}",0.953846153846154
33904,"@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && mFragment.getActivity() != null) {
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    eventLoc.setText(event.getLocation());
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (mFragment.getView() != null) {
      mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
      mFragment.getView().findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}","@Override protected void onPostExecute(APIResponse.CODE c){
  super.onPostExecute(c);
  if (event != null && mFragment.getActivity() != null) {
    eventName.setText(event.getEventName());
    eventDate.setText(event.getDateString());
    eventLoc.setText(event.getLocation());
    if (showNextMatch) {
      nextLayout.setVisibility(View.VISIBLE);
      if (nextLayout.getChildCount() > 1) {
        nextLayout.removeViewAt(1);
      }
      nextLayout.addView(next);
    }
    if (showLastMatch) {
      lastLayout.setVisibility(View.VISIBLE);
      if (lastLayout.getChildCount() > 1) {
        lastLayout.removeViewAt(1);
      }
      lastLayout.addView(last);
    }
    if (showRanks) {
      topTeams.setVisibility(View.VISIBLE);
      if (topTeams.getChildCount() > 1) {
        topTeams.removeViewAt(1);
      }
      topTeams.addView(ranks);
    }
    if (showStats) {
      topOpr.setVisibility(View.VISIBLE);
      if (topOpr.getChildCount() > 1) {
        topOpr.removeViewAt(1);
      }
      topOpr.addView(stats);
    }
    if (c == APIResponse.CODE.OFFLINECACHE) {
      activity.showWarningMessage(activity.getString(R.string.warning_using_cached_data));
    }
    if (mFragment.getView() != null) {
      mFragment.getView().findViewById(R.id.progress).setVisibility(View.GONE);
      mFragment.getView().findViewById(R.id.event_info_container).setVisibility(View.VISIBLE);
    }
  }
}",0.8622366288492707
33905,"public synchronized static APIResponse<ArrayList<SimpleEvent>> getSimpleEventsInWeek(Context c,int year,int week) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + week);
  ArrayList<SimpleEvent> events=new ArrayList<>();
  boolean allEventsLoaded=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(ALL_EVENTS_LOADED_TO_DATABASE,false);
  APIResponse<String> response=null;
  if (allEventsLoaded) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    events=Database.getInstance(c).getEventsInWeek(year,week);
  }
 else {
    response=TBAv2.getResponseFromURLOrThrow(c,""String_Node_Str"" + year,false);
    events=TBAv2.getEventList(response.getData());
    Database.getInstance(c).storeEvents(events);
    events=Database.getInstance(c).getEventsInWeek(year,week);
    if (response.getCode() != APIResponse.CODE.NODATA) {
      PreferenceManager.getDefaultSharedPreferences(c).edit().putBoolean(ALL_EVENTS_LOADED_TO_DATABASE,true).commit();
    }
  }
  return new APIResponse<>(events,response == null ? APIResponse.CODE.OFFLINECACHE : response.getCode());
}","public synchronized static APIResponse<ArrayList<SimpleEvent>> getSimpleEventsInWeek(Context c,int year,int week) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + week);
  ArrayList<SimpleEvent> events=new ArrayList<>();
  boolean allEventsLoaded=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(ALL_EVENTS_LOADED_TO_DATABASE,false);
  APIResponse<String> response;
  if (allEventsLoaded) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    events=Database.getInstance(c).getEventsInWeek(year,week);
    response=new APIResponse<>(""String_Node_Str"",ConnectionDetector.isConnectedToInternet(c) ? APIResponse.CODE.CACHED304 : APIResponse.CODE.OFFLINECACHE);
  }
 else {
    response=TBAv2.getResponseFromURLOrThrow(c,""String_Node_Str"" + year,false);
    events=TBAv2.getEventList(response.getData());
    Database.getInstance(c).storeEvents(events);
    events=Database.getInstance(c).getEventsInWeek(year,week);
    if (response.getCode() != APIResponse.CODE.NODATA) {
      PreferenceManager.getDefaultSharedPreferences(c).edit().putBoolean(ALL_EVENTS_LOADED_TO_DATABASE,true).commit();
    }
  }
  return new APIResponse<>(events,response.getCode());
}",0.9033391915641475
33906,"public synchronized static APIResponse<ArrayList<SimpleTeam>> getSimpleTeamsInRange(Context c,int lowerBound,int upperBound) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + lowerBound + ""String_Node_Str""+ upperBound);
  ArrayList<SimpleTeam> teams=new ArrayList<>();
  boolean allTeamsLoaded=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(ALL_TEAMS_LOADED_TO_DATABASE,false);
  APIResponse<String> response=null;
  if (allTeamsLoaded) {
    teams=Database.getInstance(c).getTeamsInRange(lowerBound,upperBound);
  }
 else {
    final String URL=""String_Node_Str"" + Constants.getApiHeader();
    response=TBAv2.getResponseFromURLOrThrow(c,URL,false);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    teams=CSVManager.parseTeamsFromCSV(response.getData());
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Database.getInstance(c).storeTeams(teams);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    teams=Database.getInstance(c).getTeamsInRange(lowerBound,upperBound);
    if (response.getCode() != APIResponse.CODE.NODATA) {
      PreferenceManager.getDefaultSharedPreferences(c).edit().putBoolean(ALL_TEAMS_LOADED_TO_DATABASE,true).commit();
    }
  }
  return new APIResponse<>(teams,response == null ? APIResponse.CODE.OFFLINECACHE : response.getCode());
}","public synchronized static APIResponse<ArrayList<SimpleTeam>> getSimpleTeamsInRange(Context c,int lowerBound,int upperBound) throws NoDataException {
  Log.d(""String_Node_Str"",""String_Node_Str"" + lowerBound + ""String_Node_Str""+ upperBound);
  ArrayList<SimpleTeam> teams=new ArrayList<>();
  boolean allTeamsLoaded=PreferenceManager.getDefaultSharedPreferences(c).getBoolean(ALL_TEAMS_LOADED_TO_DATABASE,false);
  APIResponse<String> response;
  if (allTeamsLoaded) {
    teams=Database.getInstance(c).getTeamsInRange(lowerBound,upperBound);
    response=new APIResponse<>(""String_Node_Str"",ConnectionDetector.isConnectedToInternet(c) ? APIResponse.CODE.CACHED304 : APIResponse.CODE.OFFLINECACHE);
  }
 else {
    final String URL=""String_Node_Str"" + Constants.getApiHeader();
    response=TBAv2.getResponseFromURLOrThrow(c,URL,false);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    teams=CSVManager.parseTeamsFromCSV(response.getData());
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Log.d(""String_Node_Str"",""String_Node_Str"");
    Database.getInstance(c).storeTeams(teams);
    Log.d(""String_Node_Str"",""String_Node_Str"");
    teams=Database.getInstance(c).getTeamsInRange(lowerBound,upperBound);
    if (response.getCode() != APIResponse.CODE.NODATA) {
      PreferenceManager.getDefaultSharedPreferences(c).edit().putBoolean(ALL_TEAMS_LOADED_TO_DATABASE,true).commit();
    }
  }
  return new APIResponse<>(teams,response.getCode());
}",0.856325947105075
33907,"@Override protected Void doInBackground(String... params){
  eventKey=params[0];
  awards=new ArrayList<>();
  keys=new ArrayList<>();
  ArrayList<Award> awardList=null;
  try {
    awardList=DataManager.getEventAwards(mFragment.getActivity(),eventKey);
    for (    Award a : awardList) {
      ArrayList<AwardListElement> allWinners=a.renderAll();
      awards.addAll(allWinners);
      for (int i=0; i < allWinners.size(); i++) {
        keys.add(a.getEventKey() + ""String_Node_Str"" + a.getName());
      }
    }
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
  }
  adapter=new ListViewAdapter(mFragment.getActivity(),awards,keys);
  return null;
}","@Override protected Void doInBackground(String... params){
  eventKey=params[0];
  awards=new ArrayList<>();
  keys=new ArrayList<>();
  ArrayList<Award> awardList;
  try {
    awardList=DataManager.getEventAwards(mFragment.getActivity(),eventKey);
    for (    Award a : awardList) {
      ArrayList<AwardListElement> allWinners=a.renderAll();
      awards.addAll(allWinners);
      for (      AwardListElement allWinner : allWinners) {
        keys.add(a.getEventKey() + ""String_Node_Str"" + a.getName());
      }
    }
  }
 catch (  DataManager.NoDataException e) {
    e.printStackTrace();
  }
  adapter=new ListViewAdapter(mFragment.getActivity(),awards,keys);
  return null;
}",0.9521002210759028
33908,"@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView rankings=(ListView)view.findViewById(R.id.event_awards);
    rankings.setAdapter(adapter);
    rankings.setOnItemClickListener(this);
  }
}","@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView rankings=(ListView)view.findViewById(R.id.event_awards);
    rankings.setAdapter(adapter);
  }
}",0.9094736842105264
33909,"@Override protected void onPostExecute(Void v){
  super.onPostExecute(v);
  if (mFragment.getView() != null) {
    ListView eventList=(ListView)mFragment.getView().findViewById(R.id.event_list);
    eventList.setAdapter(adapter);
    eventList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        Intent intent=new Intent(mFragment.getActivity(),ViewEventActivity.class);
        Bundle data=intent.getExtras();
        if (data == null)         data=new Bundle();
        if (view.getTag() != null) {
          data.putString(""String_Node_Str"",view.getTag().toString());
          intent.putExtras(data);
          mFragment.getActivity().startActivity(intent);
        }
      }
    }
);
  }
}","@Override protected void onPostExecute(Void v){
  super.onPostExecute(v);
  if (mFragment.getView() != null) {
    ListView eventList=(ListView)mFragment.getView().findViewById(R.id.event_list);
    eventList.setAdapter(adapter);
  }
}",0.4409005628517823
33910,"@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView rankings=(ListView)view.findViewById(R.id.event_ranking);
    rankings.setAdapter(adapter);
    rankings.setOnItemClickListener(this);
  }
}","@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView rankings=(ListView)view.findViewById(R.id.event_ranking);
    rankings.setAdapter(adapter);
  }
}",0.909853249475891
33911,"@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView stats=(ListView)view.findViewById(R.id.event_ranking);
    stats.setAdapter(adapter);
    stats.setOnItemClickListener(this);
  }
}","@Override protected void onPostExecute(Void aVoid){
  View view=mFragment.getView();
  if (view != null) {
    ListView stats=(ListView)view.findViewById(R.id.event_ranking);
    stats.setAdapter(adapter);
  }
}",0.9134199134199136
33912,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_events,null);
  mListView=(ListView)v.findViewById(R.id.event_list);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventList(this,mYear,mWeek,mTeamKey);
    mTask.execute();
  }
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_events,null);
  mListView=(ListView)v.findViewById(R.id.event_list);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventList(this,mYear,mWeek,mTeamKey);
    mTask.execute();
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Intent intent=new Intent(getActivity(),ViewEventActivity.class);
      String eventKey=((ListViewAdapter)parent.getAdapter()).getKey(position);
      intent.putExtra(""String_Node_Str"",eventKey);
      startActivity(intent);
    }
  }
);
  return v;
}",0.6595419847328244
33913,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(EVENT_KEY,""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(EVENT_KEY)) {
    mEventKey=savedInstanceState.getString(EVENT_KEY);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (getArguments() != null) {
    mEventKey=getArguments().getString(EVENT_KEY,""String_Node_Str"");
  }
}",0.7435897435897436
33914,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_event_awards,null);
  mListView=(ListView)view.findViewById(R.id.event_awards);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventAwards(this);
    mTask.execute(mEventKey);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_event_awards,null);
  mListView=(ListView)view.findViewById(R.id.event_awards);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventAwards(this);
    mTask.execute(mEventKey);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String eventKey=((ListViewAdapter)parent.getAdapter()).getKey(position);
      startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
    }
  }
);
  return view;
}",0.6987179487179487
33915,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_event_rankings,null);
  mListView=(ListView)v.findViewById(R.id.event_ranking);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventRankings(this);
    mTask.execute(eventKey);
  }
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.fragment_event_rankings,null);
  mListView=(ListView)v.findViewById(R.id.event_ranking);
  if (mAdapter != null) {
    mListView.setAdapter(mAdapter);
    mListView.onRestoreInstanceState(mListState);
  }
 else {
    mTask=new PopulateEventRankings(this);
    mTask.execute(eventKey);
  }
  mListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      String eventKey=((ListViewAdapter)parent.getAdapter()).getKey(position);
      startActivity(ViewTeamActivity.newInstance(getActivity(),eventKey));
    }
  }
);
  return v;
}",0.7011308562197092
33916,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_start);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.nav_drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  ArrayList<ListItem> navDrawer=new ArrayList<ListItem>();
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_event_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_group_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_sort_by_size_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_settings_selectable,R.layout.nav_drawer_item_small));
  mDrawerList.setAdapter(new ListViewAdapter(this,navDrawer,null));
  mDrawerList.setOnItemClickListener(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      setupActionBarForPosition(mCurrentSelectedNavigationItemPosition);
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      resetActionBar();
      getActionBar().setTitle(""String_Node_Str"");
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  if (savedInstanceState != null) {
    mCurrentSelectedNavigationItemPosition=savedInstanceState.getInt(STATE_SELECTED_NAVIGATION_ITEM_POSITION,0);
    Fragment f=getSupportFragmentManager().findFragmentByTag(MAIN_FRAGMENT_TAG);
    if (f == null) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      switchToModeForPosition(mCurrentSelectedNavigationItemPosition);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      setupActionBarForPosition(mCurrentSelectedNavigationItemPosition);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
 else {
    switchToModeForPosition(0);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_start);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.nav_drawer_layout);
  mDrawerList=(ListView)findViewById(R.id.left_drawer);
  ArrayList<ListItem> navDrawer=new ArrayList<ListItem>();
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_event_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_group_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_sort_by_size_selectable,R.layout.nav_drawer_item));
  navDrawer.add(new NavDrawerItem(""String_Node_Str"",R.drawable.ic_action_settings_selectable,R.layout.nav_drawer_item_small));
  mDrawerList.setAdapter(new NavigationDrawerAdapter(this,navDrawer,null));
  mDrawerList.setOnItemClickListener(this);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close){
    /** 
 * Called when a drawer has settled in a completely closed state. 
 */
    public void onDrawerClosed(    View view){
      super.onDrawerClosed(view);
      setupActionBarForPosition(mCurrentSelectedNavigationItemPosition);
    }
    /** 
 * Called when a drawer has settled in a completely open state. 
 */
    public void onDrawerOpened(    View drawerView){
      super.onDrawerOpened(drawerView);
      resetActionBar();
      getActionBar().setTitle(""String_Node_Str"");
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  getActionBar().setDisplayHomeAsUpEnabled(true);
  getActionBar().setHomeButtonEnabled(true);
  if (savedInstanceState != null) {
    mCurrentSelectedNavigationItemPosition=savedInstanceState.getInt(STATE_SELECTED_NAVIGATION_ITEM_POSITION,0);
    Fragment f=getSupportFragmentManager().findFragmentByTag(MAIN_FRAGMENT_TAG);
    if (f == null) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      switchToModeForPosition(mCurrentSelectedNavigationItemPosition);
    }
 else {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      setupActionBarForPosition(mCurrentSelectedNavigationItemPosition);
    }
    if (savedInstanceState.containsKey(STATE_SELECTED_YEAR_SPINNER_POSITION) && getActionBar().getNavigationMode() == ActionBar.NAVIGATION_MODE_LIST) {
      getActionBar().setSelectedNavigationItem(savedInstanceState.getInt(STATE_SELECTED_YEAR_SPINNER_POSITION));
    }
  }
 else {
    switchToModeForPosition(0);
  }
}",0.9952644041041832
33917,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (position == mCurrentSelectedNavigationItemPosition) {
    mDrawerLayout.closeDrawer(mDrawerList);
    return;
  }
  mDrawerList.setSelection(position);
  switchToModeForPosition(position);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (position == mCurrentSelectedNavigationItemPosition) {
    mDrawerLayout.closeDrawer(mDrawerList);
    return;
  }
  switchToModeForPosition(position);
}",0.9285714285714286
33918,"private void switchToModeForPosition(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=new EventsByWeekFragment();
  setupActionBarForEvents();
break;
case 1:
fragment=new AllTeamsListFragment();
setupActionBarForTeams();
break;
case 2:
fragment=new InsightsFragment();
setupActionBarForInsights();
break;
case 3:
startActivity(new Intent(this,SettingsActivity.class));
mDrawerLayout.closeDrawer(mDrawerList);
return;
}
mDrawerList.setSelection(position);
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mDrawerList.setItemChecked(position,true);
mCurrentSelectedNavigationItemPosition=position;
mDrawerLayout.closeDrawer(mDrawerList);
}","private void switchToModeForPosition(int position){
  Fragment fragment;
switch (position) {
default :
case 0:
    fragment=new EventsByWeekFragment();
  setupActionBarForEvents();
break;
case 1:
fragment=new AllTeamsListFragment();
setupActionBarForTeams();
break;
case 2:
fragment=new InsightsFragment();
setupActionBarForInsights();
break;
case 3:
startActivity(new Intent(this,SettingsActivity.class));
mDrawerList.setItemChecked(mCurrentSelectedNavigationItemPosition,true);
mDrawerLayout.closeDrawer(mDrawerList);
return;
}
mDrawerList.setItemChecked(position,true);
((NavigationDrawerAdapter)mDrawerList.getAdapter()).setItemSelected(position);
fragment.setRetainInstance(true);
getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment,MAIN_FRAGMENT_TAG).commit();
mCurrentSelectedNavigationItemPosition=position;
mDrawerLayout.closeDrawer(mDrawerList);
}",0.7929782082324455
33919,"@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  if (convertView == null) {
    convertView=inflater.inflate(layout,null);
  }
  if (icon != -1) {
    ((ImageView)convertView.findViewById(R.id.icon)).setImageResource(icon);
  }
  TextView textView=((TextView)convertView.findViewById(R.id.title));
  textView.setText(title);
  if (convertView.isActivated()) {
    textView.setTypeface(null,Typeface.BOLD);
  }
 else {
    textView.setTypeface(null,Typeface.NORMAL);
  }
  return convertView;
}","@Override public View getView(Context c,LayoutInflater inflater,View convertView){
  if (convertView == null) {
    convertView=inflater.inflate(layout,null);
  }
  if (icon != -1) {
    ((ImageView)convertView.findViewById(R.id.icon)).setImageResource(icon);
  }
  TextView textView=((TextView)convertView.findViewById(R.id.title));
  textView.setText(title);
  return convertView;
}",0.7973713033953997
33920,"public String getDateString(){
  return renderDateFormat.format(startDate) + ""String_Node_Str"" + renderDateFormat.format(endDate);
}","public String getDateString(){
  return shortRenderDateFormat.format(startDate) + ""String_Node_Str"" + renderDateFormat.format(endDate);
}",0.9814126394052044
33921,"@Override public void actionBarSpinnerSelected(int position,String yearString){
  int year=Integer.parseInt(yearString);
  if (year == mYear) {
    return;
  }
  mYear=year;
  View view=getView();
  ViewPager pager=(ViewPager)view.findViewById(R.id.event_pager);
  pager.setAdapter(new EventsByWeekFragmentPagerAdapter(getChildFragmentManager(),mYear));
  PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  tabs.setViewPager(pager);
}","@Override public void actionBarSpinnerSelected(int position,String yearString){
  int year=Integer.parseInt(yearString);
  if (year == mYear) {
    return;
  }
  mYear=year;
  final View view=getView();
  final ViewPager pager=(ViewPager)view.findViewById(R.id.event_pager);
  final PagerSlidingTabStrip tabs=(PagerSlidingTabStrip)view.findViewById(R.id.event_pager_tabs);
  final int mShortAnimationDuration=getResources().getInteger(android.R.integer.config_shortAnimTime);
  view.animate().alpha(0f).setDuration(mShortAnimationDuration).setListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      pager.setAdapter(new EventsByWeekFragmentPagerAdapter(getChildFragmentManager(),mYear));
      tabs.setViewPager(pager);
      view.animate().alpha(1f).setDuration(mShortAnimationDuration).setListener(null).start();
    }
  }
).start();
}",0.5292397660818714
33922,"@Override protected Query getFieldQuery(String field,String queryText,boolean quoted) throws ParseException {
  if (field == null) {
    List<Query> clauses=new ArrayList<>();
    Query[] fieldQueries=new Query[fields.size()];
    int maxTerms=0;
    for (int i=0; i < fields.size(); i++) {
      Query q=super.getFieldQuery(fields.get(i),queryText,quoted);
      if (q != null) {
        if (q instanceof BooleanQuery) {
          maxTerms=Math.max(maxTerms,((BooleanQuery)q).clauses().size());
        }
 else {
          maxTerms=Math.max(1,maxTerms);
        }
        fieldQueries[i]=q;
      }
    }
    for (int termNum=0; termNum < maxTerms; termNum++) {
      List<Query> termClauses=new ArrayList<>();
      for (int i=0; i < fields.size(); i++) {
        if (fieldQueries[i] != null) {
          Query q=null;
          if (fieldQueries[i] instanceof BooleanQuery) {
            List<BooleanClause> nestedClauses=((BooleanQuery)fieldQueries[i]).clauses();
            if (termNum < nestedClauses.size()) {
              q=nestedClauses.get(termNum).getQuery();
            }
          }
 else           if (termNum == 0) {
            q=fieldQueries[i];
          }
          if (q != null) {
            if (boosts != null) {
              Float boost=boosts.get(fields.get(i));
              if (boost != null) {
                q=new BoostQuery(q,boost);
              }
            }
            termClauses.add(q);
          }
        }
      }
      if (maxTerms > 1) {
        if (termClauses.size() > 0) {
          BooleanQuery.Builder builder=newBooleanQuery();
          for (          Query termClause : termClauses) {
            builder.add(termClause,BooleanClause.Occur.SHOULD);
          }
          clauses.add(builder.build());
        }
      }
 else {
        clauses.addAll(termClauses);
      }
    }
    if (clauses.size() == 0)     return null;
    return getMultiFieldQuery(clauses);
  }
  Query q=super.getFieldQuery(field,queryText,quoted);
  return q;
}","@Override protected Query getFieldQuery(String field,String queryText,boolean quoted) throws ParseException {
  if (field == null) {
    List<Query> clauses=new ArrayList<>();
    Query[] fieldQueries=new Query[fields.size()];
    int maxTerms=0;
    for (int i=0; i < fields.size(); i++) {
      Query q=super.getFieldQuery(fields.get(i),queryText,quoted);
      if (q != null) {
        if (q instanceof BooleanQuery) {
          maxTerms=Math.max(maxTerms,((BooleanQuery)q).clauses().size());
        }
 else {
          maxTerms=Math.max(1,maxTerms);
        }
        fieldQueries[i]=q;
      }
    }
    for (int termNum=0; termNum < maxTerms; termNum++) {
      List<Query> termClauses=new ArrayList<>();
      for (int i=0; i < fields.size(); i++) {
        if (fieldQueries[i] != null) {
          Query q=null;
          if (fieldQueries[i] instanceof BooleanQuery) {
            List<BooleanClause> nestedClauses=((BooleanQuery)fieldQueries[i]).clauses();
            if (termNum < nestedClauses.size()) {
              q=nestedClauses.get(termNum).getQuery();
            }
          }
 else           if (termNum == 0) {
            q=fieldQueries[i];
          }
          if (q != null) {
            if (boosts != null) {
              Float boost=boosts.get(fields.get(i));
              if (boost != null) {
                q=new BoostQuery(q,boost);
              }
            }
            termClauses.add(q);
          }
        }
      }
      if (maxTerms > 1) {
        if (termClauses.size() > 0) {
          BooleanQuery.Builder builder=new BooleanQuery.Builder();
          for (          Query termClause : termClauses) {
            builder.add(termClause,BooleanClause.Occur.SHOULD);
          }
          clauses.add(builder.build());
        }
      }
 else {
        clauses.addAll(termClauses);
      }
    }
    if (clauses.size() == 0)     return null;
    return getMultiFieldQuery(clauses);
  }
  Query q=super.getFieldQuery(field,queryText,quoted);
  return q;
}",0.997747183979975
33923,"public static MedlineDocument handleRecord(final MedlineCitation medlineCitation) throws Exception {
  MedlineDocument document=new MedlineDocument();
  Article article=medlineCitation.getArticle();
  AuthorList authorList=article.getAuthorList();
  if (authorList != null) {
    for (    Author author : authorList.getAuthor()) {
      String valid=author.getValidYN();
      if (valid != null && valid.equals(""String_Node_Str"")) {
        List<Object> names=author.getLastNameOrForeNameOrInitialsOrSuffixOrCollectiveName();
        String firstName=null;
        @SuppressWarnings(""String_Node_Str"") String initials=null;
        String lastName=null;
        String suffix=null;
        String collectiveName=null;
        for (        Object name : names) {
          if (name instanceof LastName) {
            LastName ln=(LastName)name;
            lastName=ln.getvalue();
          }
 else           if (name instanceof ForeName) {
            ForeName fn=(ForeName)name;
            firstName=fn.getvalue();
          }
 else           if (name instanceof Initials) {
            Initials it=(Initials)name;
            initials=it.getvalue();
          }
 else           if (name instanceof Suffix) {
            Suffix sf=(Suffix)name;
            suffix=sf.getvalue();
          }
 else           if (name instanceof CollectiveName) {
            CollectiveName cn=(CollectiveName)name;
            collectiveName=cn.getvalue();
          }
        }
        if (collectiveName != null) {
          document.addAuthor(collectiveName);
        }
        if (firstName != null && lastName != null && suffix != null) {
          String authorName=firstName + ""String_Node_Str"" + lastName+ ""String_Node_Str""+ suffix;
          document.addAuthor(authorName);
        }
        if (firstName != null && lastName != null) {
          String authorName=firstName + ""String_Node_Str"" + lastName;
          document.addAuthor(authorName);
        }
      }
    }
  }
  List<Object> paginationOrELocationID=medlineCitation.getArticle().getPaginationOrELocationID();
  StringBuilder fullPagination=new StringBuilder();
  for (  Object obj : paginationOrELocationID) {
    if (obj instanceof Pagination) {
      Pagination page=(Pagination)obj;
      List<Object> startPageOrEndPageOrMedlinePgn=page.getStartPageOrEndPageOrMedlinePgn();
      String start=null;
      String end=null;
      for (      Object o : startPageOrEndPageOrMedlinePgn) {
        if (o instanceof StartPage) {
          StartPage startPage=(StartPage)o;
          start=startPage.getvalue();
        }
        if (o instanceof EndPage) {
          EndPage endPage=(EndPage)o;
          end=endPage.getvalue();
        }
        if (o instanceof MedlinePgn) {
          MedlinePgn medlinePgn=(MedlinePgn)o;
          fullPagination.append(medlinePgn.getvalue());
        }
      }
      if (start != null && !start.isEmpty()) {
        fullPagination.append(start);
      }
      if (!Strings.isNullOrEmpty(end)) {
        fullPagination.append(""String_Node_Str"").append(end);
      }
    }
  }
  document.setPagination(fullPagination.toString());
  String pmid=medlineCitation.getPMID().getvalue();
  document.setPmid(pmid);
  Journal journal=article.getJournal();
  document.setJournalTitle(journal.getTitle());
  document.setJournalIso(journal.getISOAbbreviation());
  JournalIssue journalIssue=journal.getJournalIssue();
  ArticleTitle title=medlineCitation.getArticle().getArticleTitle();
  if (title != null) {
    document.setTitle(title.getvalue());
  }
  Abstract articleAbstract=article.getAbstract();
  if (articleAbstract != null) {
    StringBuilder text=new StringBuilder();
    for (    AbstractText abstractText : articleAbstract.getAbstractText()) {
      text.append(abstractText.getvalue());
      text.append(""String_Node_Str"");
    }
    document.setAbstractText(text.toString().trim());
  }
  MedlineJournalInfo medlineJournalInfo=medlineCitation.getMedlineJournalInfo();
  if (medlineJournalInfo != null) {
    String issn=medlineJournalInfo.getISSNLinking();
    if (issn != null) {
      document.setIssn(issn);
    }
    String country=medlineJournalInfo.getCountry();
    if (country != null && !country.isEmpty()) {
      document.setJournalCountry(country);
    }
  }
  if (journalIssue != null) {
    String issue=journalIssue.getIssue();
    if (issue != null) {
      document.setJournalIssue(issue);
    }
    String volume=journalIssue.getVolume();
    if (volume != null) {
      document.setJournalVolume(volume);
    }
    PubDate pubDate=journalIssue.getPubDate();
    if (pubDate != null) {
      String year=null;
      String month=null;
      String day=null;
      for (      Object o : pubDate.getYearOrMonthOrDayOrSeasonOrMedlineDate()) {
        if (o instanceof Year) {
          Year y=(Year)o;
          year=y.getvalue();
        }
 else         if (o instanceof Month) {
          Month m=(Month)o;
          month=m.getvalue();
        }
 else         if (o instanceof Day) {
          Day d=(Day)o;
          day=d.getvalue();
        }
      }
      Date d=null;
      if (year != null) {
        document.setPubYear(year);
        int yearInt=Integer.parseInt(year);
        DateTime dateTime=new DateTime().withYear(yearInt);
        if (month != null) {
          dateTime=dateTime.withMonthOfYear(shortMonths.indexOf(month) + 1);
        }
 else {
          dateTime=dateTime.withMonthOfYear(1);
        }
        if (day != null) {
          dateTime=dateTime.withDayOfMonth(Integer.parseInt(day));
        }
 else {
          dateTime=dateTime.withDayOfMonth(1);
        }
        d=dateTime.withTimeAtStartOfDay().toDate();
      }
      if (d != null) {
        document.setPublicationDate(d);
      }
    }
  }
  String citation=""String_Node_Str"";
  if (document.getAuthors() != null) {
    citation=joiner.join(document.getAuthors()) + ""String_Node_Str"";
  }
  if (document.getTitle() != null) {
    citation=citation + title + ""String_Node_Str"";
  }
  if (document.getJournalIso() != null) {
    citation=citation + document.getJournalIso() + ""String_Node_Str"";
  }
  if (document.getPubYear() != null) {
    citation=citation + document.getPubYear() + ""String_Node_Str"";
  }
  if (document.getJournalVolume() != null) {
    citation=citation + document.getJournalVolume() + ""String_Node_Str"";
  }
  if (document.getJournalIssue() != null) {
    citation=citation + ""String_Node_Str"" + document.getJournalVolume()+ ""String_Node_Str"";
  }
  if (document.getPagination() != null) {
    citation=citation + ""String_Node_Str"" + document.getPagination()+ ""String_Node_Str"";
  }
  citation=citation.trim();
  document.setCitation(citation);
  return document;
}","public static MedlineDocument handleRecord(final MedlineCitation medlineCitation) throws Exception {
  MedlineDocument document=new MedlineDocument();
  Article article=medlineCitation.getArticle();
  AuthorList authorList=article.getAuthorList();
  if (authorList != null) {
    for (    Author author : authorList.getAuthor()) {
      String valid=author.getValidYN();
      if (valid != null && valid.equals(""String_Node_Str"")) {
        List<Object> names=author.getLastNameOrForeNameOrInitialsOrSuffixOrCollectiveName();
        String firstName=null;
        @SuppressWarnings(""String_Node_Str"") String initials=null;
        String lastName=null;
        String suffix=null;
        String collectiveName=null;
        for (        Object name : names) {
          if (name instanceof LastName) {
            LastName ln=(LastName)name;
            lastName=ln.getvalue();
          }
 else           if (name instanceof ForeName) {
            ForeName fn=(ForeName)name;
            firstName=fn.getvalue();
          }
 else           if (name instanceof Initials) {
            Initials it=(Initials)name;
            initials=it.getvalue();
          }
 else           if (name instanceof Suffix) {
            Suffix sf=(Suffix)name;
            suffix=sf.getvalue();
          }
 else           if (name instanceof CollectiveName) {
            CollectiveName cn=(CollectiveName)name;
            collectiveName=cn.getvalue();
          }
        }
        if (collectiveName != null) {
          document.addAuthor(collectiveName);
        }
        if (firstName != null && lastName != null && suffix != null) {
          String authorName=firstName + ""String_Node_Str"" + lastName+ ""String_Node_Str""+ suffix;
          document.addAuthor(authorName);
        }
        if (firstName != null && lastName != null) {
          String authorName=firstName + ""String_Node_Str"" + lastName;
          document.addAuthor(authorName);
        }
      }
    }
  }
  List<Object> paginationOrELocationID=medlineCitation.getArticle().getPaginationOrELocationID();
  StringBuilder fullPagination=new StringBuilder();
  for (  Object obj : paginationOrELocationID) {
    if (obj instanceof Pagination) {
      Pagination page=(Pagination)obj;
      List<Object> startPageOrEndPageOrMedlinePgn=page.getStartPageOrEndPageOrMedlinePgn();
      String start=null;
      String end=null;
      for (      Object o : startPageOrEndPageOrMedlinePgn) {
        if (o instanceof StartPage) {
          StartPage startPage=(StartPage)o;
          start=startPage.getvalue();
        }
        if (o instanceof EndPage) {
          EndPage endPage=(EndPage)o;
          end=endPage.getvalue();
        }
        if (o instanceof MedlinePgn) {
          MedlinePgn medlinePgn=(MedlinePgn)o;
          fullPagination.append(medlinePgn.getvalue());
        }
      }
      if (start != null && !start.isEmpty()) {
        fullPagination.append(start);
      }
      if (!Strings.isNullOrEmpty(end)) {
        fullPagination.append(""String_Node_Str"").append(end);
      }
    }
  }
  document.setPagination(fullPagination.toString());
  String pmid=medlineCitation.getPMID().getvalue();
  document.setPmid(pmid);
  Journal journal=article.getJournal();
  document.setJournalTitle(journal.getTitle());
  document.setJournalIso(journal.getISOAbbreviation());
  JournalIssue journalIssue=journal.getJournalIssue();
  ArticleTitle title=medlineCitation.getArticle().getArticleTitle();
  if (title != null) {
    document.setTitle(title.getvalue());
  }
  Abstract articleAbstract=article.getAbstract();
  if (articleAbstract != null) {
    StringBuilder text=new StringBuilder();
    for (    AbstractText abstractText : articleAbstract.getAbstractText()) {
      text.append(abstractText.getvalue());
      text.append(""String_Node_Str"");
    }
    document.setAbstractText(text.toString().trim());
  }
  MedlineJournalInfo medlineJournalInfo=medlineCitation.getMedlineJournalInfo();
  if (medlineJournalInfo != null) {
    String issn=medlineJournalInfo.getISSNLinking();
    if (issn != null) {
      document.setIssn(issn);
    }
    String country=medlineJournalInfo.getCountry();
    if (country != null && !country.isEmpty()) {
      document.setJournalCountry(country);
    }
  }
  if (journalIssue != null) {
    String issue=journalIssue.getIssue();
    if (issue != null) {
      document.setJournalIssue(issue);
    }
    String volume=journalIssue.getVolume();
    if (volume != null) {
      document.setJournalVolume(volume);
    }
    PubDate pubDate=journalIssue.getPubDate();
    if (pubDate != null) {
      String year=null;
      String month=null;
      String day=null;
      for (      Object o : pubDate.getYearOrMonthOrDayOrSeasonOrMedlineDate()) {
        if (o instanceof Year) {
          Year y=(Year)o;
          year=y.getvalue();
        }
 else         if (o instanceof Month) {
          Month m=(Month)o;
          month=m.getvalue();
        }
 else         if (o instanceof Day) {
          Day d=(Day)o;
          day=d.getvalue();
        }
      }
      Date d=null;
      if (year != null) {
        document.setPubYear(year);
        int yearInt=Integer.parseInt(year);
        DateTime dateTime=new DateTime().withYear(yearInt);
        if (month != null) {
          dateTime=dateTime.withMonthOfYear(shortMonths.indexOf(month) + 1);
        }
 else {
          dateTime=dateTime.withMonthOfYear(1);
        }
        if (day != null) {
          dateTime=dateTime.withDayOfMonth(Integer.parseInt(day));
        }
 else {
          dateTime=dateTime.withDayOfMonth(1);
        }
        d=dateTime.withTimeAtStartOfDay().toDate();
      }
      if (d != null) {
        document.setPublicationDate(d);
      }
    }
  }
  String citation=""String_Node_Str"";
  if (document.getAuthors() != null) {
    citation=joiner.join(document.getAuthors()) + ""String_Node_Str"";
  }
  if (document.getTitle() != null) {
    citation=citation + document.getTitle() + ""String_Node_Str"";
  }
  if (document.getJournalIso() != null) {
    citation=citation + document.getJournalIso() + ""String_Node_Str"";
  }
  if (document.getPubYear() != null) {
    citation=citation + document.getPubYear() + ""String_Node_Str"";
  }
  if (document.getJournalVolume() != null) {
    citation=citation + document.getJournalVolume() + ""String_Node_Str"";
  }
  if (document.getJournalIssue() != null) {
    citation=citation + ""String_Node_Str"" + document.getJournalVolume()+ ""String_Node_Str"";
  }
  if (document.getPagination() != null) {
    citation=citation + ""String_Node_Str"" + document.getPagination()+ ""String_Node_Str"";
  }
  citation=citation.trim();
  document.setCitation(citation);
  return document;
}",0.9982092225041038
33924,"/** 
 * From org.apache.solr.search.QueryUtils 
 */
public void deleteDocument(DeleteRequest deleteRequest) throws Exception {
  indexLock.readLock().lock();
  try {
    String uniqueId=deleteRequest.getUniqueId();
    ReadWriteLock documentLock=documentLockHandler.getLock(uniqueId);
    try {
      documentLock.writeLock().lock();
      if (deleteRequest.getDeleteDocument()) {
        LumongoSegment s=findSegmentFromUniqueId(deleteRequest.getUniqueId());
        s.deleteDocument(uniqueId);
        documentStorage.deleteSourceDocument(uniqueId);
      }
      if (deleteRequest.getDeleteAllAssociated()) {
        documentStorage.deleteAssociatedDocuments(uniqueId);
      }
 else       if (deleteRequest.hasFilename()) {
        String fileName=deleteRequest.getFilename();
        documentStorage.deleteAssociatedDocument(uniqueId,fileName);
      }
    }
  finally {
      documentLock.writeLock().unlock();
    }
  }
  finally {
    indexLock.readLock().unlock();
  }
}","/** 
 * From org.apache.solr.search.QueryUtils 
 */
public void deleteDocument(DeleteRequest deleteRequest) throws Exception {
  indexLock.readLock().lock();
  try {
    String uniqueId=deleteRequest.getUniqueId();
    ReadWriteLock documentLock=documentLockHandler.getLock(uniqueId);
    try {
      documentLock.writeLock().lock();
      if (deleteRequest.getDeleteDocument()) {
        LumongoSegment s=findSegmentFromUniqueId(deleteRequest.getUniqueId());
        s.deleteDocument(uniqueId);
        if (indexConfig.getIndexSettings().getStoreDocumentInMongo()) {
          documentStorage.deleteSourceDocument(uniqueId);
        }
      }
      if (deleteRequest.getDeleteAllAssociated()) {
        documentStorage.deleteAssociatedDocuments(uniqueId);
      }
 else       if (deleteRequest.hasFilename()) {
        String fileName=deleteRequest.getFilename();
        documentStorage.deleteAssociatedDocument(uniqueId,fileName);
      }
    }
  finally {
      documentLock.writeLock().unlock();
    }
  }
  finally {
    indexLock.readLock().unlock();
  }
}",0.9245837414299706
33925,"public Lumongo.AnalysisResult handleDocument(Document document){
  if (storedFieldName != null && enabled) {
    Object storeFieldValues=ResultHelper.getValueFromMongoDocument(document,storedFieldName);
    Lumongo.AnalysisResult.Builder analysisResult=Lumongo.AnalysisResult.newBuilder();
    analysisResult.setAnalysisRequest(analysisRequest);
    TermFreq docTermFreq=null;
    if (computeDocLevel || AnalysisRequest.SummaryType.TOP_TERMS_TOP_N.equals(summaryType)) {
      docTermFreq=new TermFreq(docFreq);
    }
    final TermFreq docTermFreqFinal=docTermFreq;
    LumongoUtil.handleLists(storeFieldValues,(value) -> {
      String content=value.toString();
      try (TokenStream tokenStream=analyzer.tokenStream(indexField,content)){
        tokenStream.reset();
        while (tokenStream.incrementToken()) {
          String token=tokenStream.getAttribute(CharTermAttribute.class).toString();
          if (analysisRequest.getTokens()) {
            analysisResult.addToken(token);
          }
          if (minWordLength > 0) {
            if (token.length() < minWordLength) {
              continue;
            }
          }
          if (maxWordLength > 0) {
            if (token.length() > maxWordLength) {
              continue;
            }
          }
          if (maxSegmentDocFreqCount != null || minSegmentDocFreqCount != null) {
            int termDocFreq=this.docFreq.getDocFreq(token);
            if (minSegmentDocFreqCount != null) {
              if (termDocFreq < minSegmentDocFreqCount) {
                continue;
              }
            }
            if (maxSegmentDocFreqCount != null) {
              if (termDocFreq > maxSegmentDocFreqCount) {
                continue;
              }
            }
          }
          if (computeDocLevel || AnalysisRequest.SummaryType.TOP_TERMS_TOP_N.equals(summaryType)) {
            docTermFreqFinal.addTerm(token);
          }
          if (summaryLevelEnabled && AnalysisRequest.SummaryType.ALL_TERMS_TOP_N.equals(summaryType)) {
            summaryTermFreq.addTerm(token);
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
    if (computeDocLevel) {
      List<Lumongo.Term.Builder> termBuilderList=docTermFreq.getTopTerms(analysisRequest.getTopN(),analysisRequest.getTermSort());
      if (analysisRequest.getDocTerms()) {
        termBuilderList.forEach(analysisResult::addTerms);
        return analysisResult.build();
      }
      if (summaryLevelEnabled && AnalysisRequest.SummaryType.ALL_TERMS_TOP_N.equals(summaryType)) {
        termBuilderList.forEach(summaryTermFreq::addTerm);
      }
    }
    return null;
  }
  return null;
}","public Lumongo.AnalysisResult handleDocument(Document document){
  if (storedFieldName != null && enabled) {
    Object storeFieldValues=ResultHelper.getValueFromMongoDocument(document,storedFieldName);
    Lumongo.AnalysisResult.Builder analysisResult=Lumongo.AnalysisResult.newBuilder();
    analysisResult.setAnalysisRequest(analysisRequest);
    TermFreq docTermFreq=null;
    if (computeDocLevel || AnalysisRequest.SummaryType.TOP_TERMS_TOP_N.equals(summaryType)) {
      docTermFreq=new TermFreq(docFreq);
    }
    final TermFreq docTermFreqFinal=docTermFreq;
    LumongoUtil.handleLists(storeFieldValues,(value) -> {
      String content=value.toString();
      try (TokenStream tokenStream=analyzer.tokenStream(indexField,content)){
        tokenStream.reset();
        while (tokenStream.incrementToken()) {
          String token=tokenStream.getAttribute(CharTermAttribute.class).toString();
          if (analysisRequest.getTokens()) {
            analysisResult.addToken(token);
          }
          if (minWordLength > 0) {
            if (token.length() < minWordLength) {
              continue;
            }
          }
          if (maxWordLength > 0) {
            if (token.length() > maxWordLength) {
              continue;
            }
          }
          if (maxSegmentDocFreqCount != null || minSegmentDocFreqCount != null) {
            int termDocFreq=this.docFreq.getDocFreq(token);
            if (minSegmentDocFreqCount != null) {
              if (termDocFreq < minSegmentDocFreqCount) {
                continue;
              }
            }
            if (maxSegmentDocFreqCount != null) {
              if (termDocFreq > maxSegmentDocFreqCount) {
                continue;
              }
            }
          }
          if (computeDocLevel || AnalysisRequest.SummaryType.TOP_TERMS_TOP_N.equals(summaryType)) {
            docTermFreqFinal.addTerm(token);
          }
          if (summaryLevelEnabled && AnalysisRequest.SummaryType.ALL_TERMS_TOP_N.equals(summaryType)) {
            summaryTermFreq.addTerm(token);
          }
        }
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
);
    if (computeDocLevel) {
      List<Lumongo.Term.Builder> termBuilderList=docTermFreq.getTopTerms(analysisRequest.getTopN(),analysisRequest.getTermSort());
      if (analysisRequest.getDocTerms()) {
        termBuilderList.forEach(analysisResult::addTerms);
        return analysisResult.build();
      }
      if (summaryLevelEnabled && AnalysisRequest.SummaryType.TOP_TERMS_TOP_N.equals(summaryType)) {
        termBuilderList.forEach(summaryTermFreq::addTerm);
      }
    }
    return null;
  }
  return null;
}",0.9988860007426662
33926,"public void addTerm(Lumongo.Term.Builder term){
  Lumongo.Term.Builder lmTerm=tokenCount.get(term.getValue());
  if (lmTerm == null) {
    tokenCount.put(term.getValue(),term);
  }
 else {
    lmTerm.setTermFreq(lmTerm.getTermFreq() + term.getTermFreq());
  }
}","public void addTerm(Lumongo.Term.Builder term){
  Lumongo.Term.Builder lmTerm=tokenCount.get(term.getValue());
  if (lmTerm == null) {
    lmTerm=Lumongo.Term.newBuilder(term.buildPartial());
    tokenCount.put(term.getValue(),lmTerm);
  }
 else {
    lmTerm.setTermFreq(lmTerm.getTermFreq() + term.getTermFreq());
  }
}",0.8950086058519794
33927,"private void openReaderIfChanges() throws IOException {
  DirectoryReader newDirectoryReader=DirectoryReader.openIfChanged(directoryReader,indexWriter,indexConfig.getApplyUncommittedDeletes());
  if (newDirectoryReader != null) {
    QueryResultCache qrc=queryResultCache;
    if (qrc != null) {
      qrc.clear();
    }
    directoryReader=newDirectoryReader;
  }
}","private void openReaderIfChanges() throws IOException {
  DirectoryReader newDirectoryReader=DirectoryReader.openIfChanged(directoryReader,indexWriter,indexConfig.getApplyUncommittedDeletes());
  if (newDirectoryReader != null) {
    directoryReader=newDirectoryReader;
    QueryResultCache qrc=queryResultCache;
    if (qrc != null) {
      qrc.clear();
    }
  }
}",0.8907103825136612
33928,"public SegmentResponse querySegment(QueryWithFilters queryWithFilters,int amount,FieldDoc after,FacetRequest facetRequest,SortRequest sortRequest,QueryCacheKey queryCacheKey,FetchType resultFetchType,List<String> fieldsToReturn,List<String> fieldsToMask) throws Exception {
  try {
    QueryResultCache qrc=queryResultCache;
    boolean useCache=(qrc != null) && ((segmentQueryCacheMaxAmount <= 0) || (segmentQueryCacheMaxAmount >= amount)) && queryCacheKey != null;
    if (useCache) {
      SegmentResponse cacheSegmentResponse=qrc.getCacheSegmentResponse(queryCacheKey);
      if (cacheSegmentResponse != null) {
        return cacheSegmentResponse;
      }
    }
    Query q=queryWithFilters.getQuery();
    if (!queryWithFilters.getFilterQueries().isEmpty()) {
      BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
      for (      Query filterQuery : queryWithFilters.getFilterQueries()) {
        booleanQuery.add(filterQuery,BooleanClause.Occur.MUST);
      }
      booleanQuery.add(q,BooleanClause.Occur.MUST);
      q=booleanQuery.build();
    }
    reopenIndexWritersIfNecessary();
    openReaderIfChanges();
    IndexSearcher indexSearcher=new IndexSearcher(directoryReader);
    indexSearcher.setSimilarity(new PerFieldSimilarityWrapper(){
      @Override public Similarity get(      String name){
        LMAnalyzer analyzer=indexConfig.getAnalyzer(name);
        if (analyzer != null) {
          if (analyzer.equals(LMAnalyzer.LSH)) {
            return new LSHSimilarity();
          }
        }
        return new ClassicSimilarity();
      }
    }
);
    int hasMoreAmount=amount + 1;
    TopDocsCollector<?> collector;
    List<SortField> sortFields=new ArrayList<>();
    boolean sorting=(sortRequest != null) && !sortRequest.getFieldSortList().isEmpty();
    if (sorting) {
      for (      FieldSort fs : sortRequest.getFieldSortList()) {
        boolean reverse=Direction.DESCENDING.equals(fs.getDirection());
        String sortField=fs.getSortField();
        Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
        if (IndexConfig.isNumericOrDateSortType(sortType)) {
          SortField.Type type;
          if (IndexConfig.isNumericIntSortType(sortType)) {
            type=SortField.Type.INT;
          }
 else           if (IndexConfig.isNumericLongSortType(sortType)) {
            type=SortField.Type.LONG;
          }
 else           if (IndexConfig.isNumericFloatSortType(sortType)) {
            type=SortField.Type.FLOAT;
          }
 else           if (IndexConfig.isNumericDoubleSortType(sortType)) {
            type=SortField.Type.DOUBLE;
          }
 else           if (IndexConfig.isNumericDateSortType(sortType)) {
            type=SortField.Type.LONG;
          }
 else {
            throw new Exception(""String_Node_Str"" + sortType + ""String_Node_Str""+ sortField+ ""String_Node_Str"");
          }
          sortFields.add(new SortedNumericSortField(sortField,type,reverse));
        }
 else {
          sortFields.add(new SortedSetSortField(sortField,reverse));
        }
      }
      Sort sort=new Sort();
      sort.setSort(sortFields.toArray(new SortField[sortFields.size()]));
      collector=TopFieldCollector.create(sort,hasMoreAmount,after,true,true,true);
    }
 else {
      collector=TopScoreDocCollector.create(hasMoreAmount,after);
    }
    SegmentResponse.Builder builder=SegmentResponse.newBuilder();
    if ((facetRequest != null) && !facetRequest.getCountRequestList().isEmpty()) {
      FacetsCollector facetsCollector=new FacetsCollector();
      indexSearcher.search(q,MultiCollector.wrap(collector,facetsCollector));
      for (      CountRequest countRequest : facetRequest.getCountRequestList()) {
        String label=countRequest.getFacetField().getLabel();
        String indexFieldName=facetsConfig.getDimConfig(label).indexFieldName;
        if (indexFieldName.equals(FacetsConfig.DEFAULT_INDEX_FIELD_NAME)) {
          throw new Exception(label + ""String_Node_Str"");
        }
        int numOfFacets=0;
        if (countRequest.getSegmentFacets() != 0) {
          if (countRequest.getSegmentFacets() < countRequest.getMaxFacets()) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          numOfFacets=countRequest.getSegmentFacets() + 1;
        }
        FacetResult facetResult=null;
        try {
          DefaultSortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(directoryReader,indexFieldName);
          Facets facets=new SortedSetDocValuesFacetCounts(state,facetsCollector);
          if (countRequest.getSegmentFacets() == 0) {
            numOfFacets=state.getSize();
          }
          facetResult=facets.getTopChildren(numOfFacets,label);
        }
 catch (        IllegalArgumentException e) {
          if (e.getMessage().contains(""String_Node_Str"")) {
          }
 else {
            throw e;
          }
        }
        handleFacetResult(builder,facetResult,countRequest);
      }
    }
 else {
      indexSearcher.search(q,collector);
    }
    ScoreDoc[] results=collector.topDocs().scoreDocs;
    int totalHits=collector.getTotalHits();
    builder.setTotalHits(totalHits);
    boolean moreAvailable=(results.length == hasMoreAmount);
    int numResults=Math.min(results.length,amount);
    for (int i=0; i < numResults; i++) {
      ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,i,resultFetchType,fieldsToReturn,fieldsToMask);
      builder.addScoredResult(srBuilder.build());
    }
    if (moreAvailable) {
      ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,numResults,resultFetchType,fieldsToReturn,fieldsToMask);
      builder.setNext(srBuilder);
    }
    builder.setIndexName(indexName);
    builder.setSegmentNumber(segmentNumber);
    SegmentResponse segmentResponse=builder.build();
    if (useCache) {
      qrc.storeInCache(queryCacheKey,segmentResponse);
    }
    return segmentResponse;
  }
 catch (  IllegalStateException e) {
    Matcher m=sortedDocValuesMessage.matcher(e.getMessage());
    if (m.matches()) {
      String field=m.group(1);
      throw new Exception(""String_Node_Str"" + field + ""String_Node_Str"");
    }
    throw e;
  }
}","public SegmentResponse querySegment(QueryWithFilters queryWithFilters,int amount,FieldDoc after,FacetRequest facetRequest,SortRequest sortRequest,QueryCacheKey queryCacheKey,FetchType resultFetchType,List<String> fieldsToReturn,List<String> fieldsToMask) throws Exception {
  try {
    reopenIndexWritersIfNecessary();
    openReaderIfChanges();
    QueryResultCache qrc=queryResultCache;
    boolean useCache=(qrc != null) && ((segmentQueryCacheMaxAmount <= 0) || (segmentQueryCacheMaxAmount >= amount)) && queryCacheKey != null;
    if (useCache) {
      SegmentResponse cacheSegmentResponse=qrc.getCacheSegmentResponse(queryCacheKey);
      if (cacheSegmentResponse != null) {
        return cacheSegmentResponse;
      }
    }
    Query q=queryWithFilters.getQuery();
    if (!queryWithFilters.getFilterQueries().isEmpty()) {
      BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
      for (      Query filterQuery : queryWithFilters.getFilterQueries()) {
        booleanQuery.add(filterQuery,BooleanClause.Occur.MUST);
      }
      booleanQuery.add(q,BooleanClause.Occur.MUST);
      q=booleanQuery.build();
    }
    IndexSearcher indexSearcher=new IndexSearcher(directoryReader);
    indexSearcher.setSimilarity(new PerFieldSimilarityWrapper(){
      @Override public Similarity get(      String name){
        LMAnalyzer analyzer=indexConfig.getAnalyzer(name);
        if (analyzer != null) {
          if (analyzer.equals(LMAnalyzer.LSH)) {
            return new LSHSimilarity();
          }
        }
        return new ClassicSimilarity();
      }
    }
);
    int hasMoreAmount=amount + 1;
    TopDocsCollector<?> collector;
    List<SortField> sortFields=new ArrayList<>();
    boolean sorting=(sortRequest != null) && !sortRequest.getFieldSortList().isEmpty();
    if (sorting) {
      for (      FieldSort fs : sortRequest.getFieldSortList()) {
        boolean reverse=Direction.DESCENDING.equals(fs.getDirection());
        String sortField=fs.getSortField();
        Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
        if (IndexConfig.isNumericOrDateSortType(sortType)) {
          SortField.Type type;
          if (IndexConfig.isNumericIntSortType(sortType)) {
            type=SortField.Type.INT;
          }
 else           if (IndexConfig.isNumericLongSortType(sortType)) {
            type=SortField.Type.LONG;
          }
 else           if (IndexConfig.isNumericFloatSortType(sortType)) {
            type=SortField.Type.FLOAT;
          }
 else           if (IndexConfig.isNumericDoubleSortType(sortType)) {
            type=SortField.Type.DOUBLE;
          }
 else           if (IndexConfig.isNumericDateSortType(sortType)) {
            type=SortField.Type.LONG;
          }
 else {
            throw new Exception(""String_Node_Str"" + sortType + ""String_Node_Str""+ sortField+ ""String_Node_Str"");
          }
          sortFields.add(new SortedNumericSortField(sortField,type,reverse));
        }
 else {
          sortFields.add(new SortedSetSortField(sortField,reverse));
        }
      }
      Sort sort=new Sort();
      sort.setSort(sortFields.toArray(new SortField[sortFields.size()]));
      collector=TopFieldCollector.create(sort,hasMoreAmount,after,true,true,true);
    }
 else {
      collector=TopScoreDocCollector.create(hasMoreAmount,after);
    }
    SegmentResponse.Builder builder=SegmentResponse.newBuilder();
    if ((facetRequest != null) && !facetRequest.getCountRequestList().isEmpty()) {
      FacetsCollector facetsCollector=new FacetsCollector();
      indexSearcher.search(q,MultiCollector.wrap(collector,facetsCollector));
      for (      CountRequest countRequest : facetRequest.getCountRequestList()) {
        String label=countRequest.getFacetField().getLabel();
        String indexFieldName=facetsConfig.getDimConfig(label).indexFieldName;
        if (indexFieldName.equals(FacetsConfig.DEFAULT_INDEX_FIELD_NAME)) {
          throw new Exception(label + ""String_Node_Str"");
        }
        int numOfFacets=0;
        if (countRequest.getSegmentFacets() != 0) {
          if (countRequest.getSegmentFacets() < countRequest.getMaxFacets()) {
            throw new IllegalArgumentException(""String_Node_Str"");
          }
          numOfFacets=countRequest.getSegmentFacets() + 1;
        }
        FacetResult facetResult=null;
        try {
          DefaultSortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(directoryReader,indexFieldName);
          Facets facets=new SortedSetDocValuesFacetCounts(state,facetsCollector);
          if (countRequest.getSegmentFacets() == 0) {
            numOfFacets=state.getSize();
          }
          facetResult=facets.getTopChildren(numOfFacets,label);
        }
 catch (        IllegalArgumentException e) {
          if (e.getMessage().contains(""String_Node_Str"")) {
          }
 else {
            throw e;
          }
        }
        handleFacetResult(builder,facetResult,countRequest);
      }
    }
 else {
      indexSearcher.search(q,collector);
    }
    ScoreDoc[] results=collector.topDocs().scoreDocs;
    int totalHits=collector.getTotalHits();
    builder.setTotalHits(totalHits);
    boolean moreAvailable=(results.length == hasMoreAmount);
    int numResults=Math.min(results.length,amount);
    for (int i=0; i < numResults; i++) {
      ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,i,resultFetchType,fieldsToReturn,fieldsToMask);
      builder.addScoredResult(srBuilder.build());
    }
    if (moreAvailable) {
      ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,numResults,resultFetchType,fieldsToReturn,fieldsToMask);
      builder.setNext(srBuilder);
    }
    builder.setIndexName(indexName);
    builder.setSegmentNumber(segmentNumber);
    SegmentResponse segmentResponse=builder.build();
    if (useCache) {
      qrc.storeInCache(queryCacheKey,segmentResponse);
    }
    return segmentResponse;
  }
 catch (  IllegalStateException e) {
    Matcher m=sortedDocValuesMessage.matcher(e.getMessage());
    if (m.matches()) {
      String field=m.group(1);
      throw new Exception(""String_Node_Str"" + field + ""String_Node_Str"");
    }
    throw e;
  }
}",0.989740301378647
33929,"public QueryResponse getQueryResponse() throws Exception {
  boolean sorting=(sortRequest != null && !sortRequest.getFieldSortList().isEmpty());
  long totalHits=0;
  long returnedHits=0;
  for (  SegmentResponse sr : segmentResponses) {
    totalHits+=sr.getTotalHits();
    returnedHits+=sr.getScoredResultList().size();
  }
  QueryResponse.Builder builder=QueryResponse.newBuilder();
  builder.setTotalHits(totalHits);
  resultsSize=Math.min(amount,(int)returnedHits);
  results=Collections.emptyList();
  Map<String,ScoredResult[]> lastIndexResultMap=new HashMap<>();
  for (  String indexName : indexToSegmentResponseMap.keySet()) {
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    lastIndexResultMap.put(indexName,new ScoredResult[numberOfSegments]);
  }
  for (  LastIndexResult lir : lastResult.getLastIndexResultList()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(lir.getIndexName());
    for (    ScoredResult sr : lir.getLastForSegmentList()) {
      lastForSegmentArr[sr.getSegment()]=sr;
    }
  }
  Map<CountRequest,Map<String,AtomicLong>> facetCountsMap=new HashMap<>();
  Map<CountRequest,Map<String,FixedBitSet>> segmentsReturnedMap=new HashMap<>();
  Map<CountRequest,FixedBitSet> fullResultsMap=new HashMap<>();
  Map<CountRequest,long[]> minForSegmentMap=new HashMap<>();
  int segIndex=0;
  for (  SegmentResponse sr : segmentResponses) {
    for (    FacetGroup fg : sr.getFacetGroupList()) {
      CountRequest countRequest=fg.getCountRequest();
      Map<String,AtomicLong> facetCounts=facetCountsMap.get(countRequest);
      Map<String,FixedBitSet> segmentsReturned=segmentsReturnedMap.get(countRequest);
      FixedBitSet fullResults=fullResultsMap.get(countRequest);
      long[] minForSegment=minForSegmentMap.get(countRequest);
      if (facetCounts == null) {
        facetCounts=new HashMap<>();
        facetCountsMap.put(countRequest,facetCounts);
        segmentsReturned=new HashMap<>();
        segmentsReturnedMap.put(countRequest,segmentsReturned);
        fullResults=new FixedBitSet(segmentResponses.size());
        fullResultsMap.put(countRequest,fullResults);
        minForSegment=new long[segmentResponses.size()];
        minForSegmentMap.put(countRequest,minForSegment);
      }
      for (      FacetCount fc : fg.getFacetCountList()) {
        String facet=fc.getFacet();
        AtomicLong facetSum=facetCounts.get(facet);
        FixedBitSet segmentSet=segmentsReturned.get(facet);
        if (facetSum == null) {
          facetSum=new AtomicLong();
          facetCounts.put(facet,facetSum);
          segmentSet=new FixedBitSet(segmentResponses.size());
          segmentsReturned.put(facet,segmentSet);
        }
        long count=fc.getCount();
        facetSum.addAndGet(count);
        segmentSet.set(segIndex);
        minForSegment[segIndex]=count;
      }
      int segmentFacets=countRequest.getSegmentFacets();
      int facetCountCount=fg.getFacetCountCount();
      if (facetCountCount < segmentFacets || (segmentFacets == 0)) {
        fullResults.set(segIndex);
        minForSegment[segIndex]=0;
        System.out.println(segIndex + ""String_Node_Str"" + facetCountCount+ ""String_Node_Str""+ segmentFacets);
      }
    }
    segIndex++;
  }
  for (  CountRequest countRequest : facetCountsMap.keySet()) {
    FacetGroup.Builder fg=FacetGroup.newBuilder();
    fg.setCountRequest(countRequest);
    Map<String,AtomicLong> facetCounts=facetCountsMap.get(countRequest);
    Map<String,FixedBitSet> segmentsReturned=segmentsReturnedMap.get(countRequest);
    FixedBitSet fullResults=fullResultsMap.get(countRequest);
    long[] minForSegment=minForSegmentMap.get(countRequest);
    int numberOfSegments=segmentResponses.size();
    long maxValuePossibleMissing=0;
    for (int i=0; i < numberOfSegments; i++) {
      maxValuePossibleMissing+=minForSegment[i];
    }
    boolean computeError=countRequest.getSegmentFacets() != 0 && countRequest.getComputeError();
    boolean computePossibleMissing=countRequest.getSegmentFacets() != 0 && countRequest.getComputePossibleMissed() && (maxValuePossibleMissing != 0);
    SortedSet<FacetCountResult> sortedFacetResults=facetCounts.keySet().stream().map(facet -> new FacetCountResult(facet,facetCounts.get(facet).get())).collect(Collectors.toCollection(TreeSet::new));
    Integer maxCount=countRequest.getMaxFacets();
    long minCountReturned=0;
    int count=0;
    for (    FacetCountResult facet : sortedFacetResults) {
      FixedBitSet segCount=segmentsReturned.get(facet.getFacet());
      segCount.or(fullResults);
      FacetCount.Builder facetCountBuilder=FacetCount.newBuilder().setFacet(facet.getFacet()).setCount(facet.getCount());
      long maxWithError=0;
      if (computeError) {
        long maxError=0;
        if (segCount.cardinality() < numberOfSegments) {
          for (int i=0; i < numberOfSegments; i++) {
            if (!segCount.get(i)) {
              maxError+=minForSegment[i];
            }
          }
        }
        facetCountBuilder.setMaxError(maxError);
        maxWithError=maxError + facet.getCount();
      }
      count++;
      if (maxCount > 0 && count > maxCount) {
        if (computePossibleMissing) {
          if (maxWithError > maxValuePossibleMissing) {
            maxValuePossibleMissing=maxWithError;
          }
        }
 else {
          break;
        }
      }
 else {
        fg.addFacetCount(facetCountBuilder);
        minCountReturned=facet.getCount();
      }
    }
    if (!sortedFacetResults.isEmpty()) {
      if (maxValuePossibleMissing > minCountReturned) {
        fg.setPossibleMissing(true);
        fg.setMaxValuePossibleMissing(maxValuePossibleMissing);
      }
    }
    builder.addFacetGroup(fg);
  }
  List<ScoredResult> mergedResults=new ArrayList<>((int)returnedHits);
  for (  SegmentResponse sr : segmentResponses) {
    mergedResults.addAll(sr.getScoredResultList());
  }
  Comparator<ScoredResult> myCompare=scoreCompare;
  if (sorting) {
    final List<FieldSort> fieldSortList=sortRequest.getFieldSortList();
    final HashMap<String,LMAnalyzer> analyzerMap=new HashMap<>();
    for (    FieldSort fieldSort : fieldSortList) {
      String sortField=fieldSort.getSortField();
      LMAnalyzer lmAnalyzer=null;
      for (      String indexName : usedIndexMap.keySet()) {
        LumongoIndex index=usedIndexMap.get(indexName);
        if (lmAnalyzer == null) {
          lmAnalyzer=index.getLMAnalyzer(sortField);
          analyzerMap.put(sortField,lmAnalyzer);
        }
 else {
          if (!lmAnalyzer.equals(index.getLMAnalyzer(sortField))) {
            log.error(""String_Node_Str"");
            String message=""String_Node_Str"" + sortField + ""String_Node_Str""+ lmAnalyzer+ ""String_Node_Str""+ index.getLMAnalyzer(sortField)+ ""String_Node_Str"";
            log.error(message);
            throw new Exception(message);
          }
        }
      }
    }
    myCompare=(o1,o2) -> {
      int compare=0;
      int stringIndex=0;
      int intIndex=0;
      int longIndex=0;
      int floatIndex=0;
      int doubleIndex=0;
      int dateIndex=0;
      for (      FieldSort fs : fieldSortList) {
        String sortField=fs.getSortField();
        LMAnalyzer lmAnalyzer=analyzerMap.get(sortField);
        if (LMAnalyzer.NUMERIC_INT.equals(lmAnalyzer)) {
          int a=o1.getSortIntegerList().get(intIndex);
          int b=o2.getSortIntegerList().get(intIndex);
          compare=Integer.compare(a,b);
          intIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_LONG.equals(lmAnalyzer)) {
          long a=o1.getSortLongList().get(longIndex);
          long b=o2.getSortLongList().get(longIndex);
          compare=Long.compare(a,b);
          longIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_FLOAT.equals(lmAnalyzer)) {
          float a=o1.getSortFloatList().get(floatIndex);
          float b=o2.getSortFloatList().get(floatIndex);
          compare=Float.compare(a,b);
          floatIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_DOUBLE.equals(lmAnalyzer)) {
          double a=o1.getSortFloatList().get(doubleIndex);
          double b=o2.getSortFloatList().get(doubleIndex);
          compare=Double.compare(a,b);
          doubleIndex++;
        }
 else         if (LMAnalyzer.DATE.equals(lmAnalyzer)) {
          long a=o1.getSortDateList().get(dateIndex);
          long b=o2.getSortDateList().get(dateIndex);
          compare=Long.compare(a,b);
          dateIndex++;
        }
 else         if (LMAnalyzer.KEYWORD.equals(lmAnalyzer) || LMAnalyzer.LC_KEYWORD.equals(lmAnalyzer)) {
          String a=o1.getSortTermList().get(stringIndex);
          String b=o2.getSortTermList().get(stringIndex);
          compare=a.compareTo(b);
          stringIndex++;
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + lmAnalyzer + ""String_Node_Str""+ sortField+ ""String_Node_Str"");
        }
        if (FieldSort.Direction.DESCENDING.equals(fs.getDirection())) {
          compare*=-1;
        }
        if (compare != 0) {
          return compare;
        }
      }
      return compare;
    }
;
  }
  if (!mergedResults.isEmpty()) {
    Collections.sort(mergedResults,myCompare);
    results=mergedResults.subList(0,resultsSize);
    for (    ScoredResult sr : results) {
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(sr.getIndexName());
      lastForSegmentArr[sr.getSegment()]=sr;
    }
    outside:     for (    String indexName : usedIndexMap.keySet()) {
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
      ScoredResult lastForIndex=null;
      for (      ScoredResult sr : lastForSegmentArr) {
        if (sr != null) {
          if (lastForIndex == null) {
            lastForIndex=sr;
          }
 else {
            if (myCompare.compare(sr,lastForIndex) > 0) {
              lastForIndex=sr;
            }
          }
        }
      }
      if (lastForIndex == null) {
        continue;
      }
      double segmentTolerance=usedIndexMap.get(indexName).getSegmentTolerance();
      int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
      Map<Integer,SegmentResponse> segmentResponseMap=indexToSegmentResponseMap.get(indexName);
      for (int segmentNumber=0; segmentNumber < numberOfSegments; segmentNumber++) {
        SegmentResponse sr=segmentResponseMap.get(segmentNumber);
        if (sr.hasNext()) {
          ScoredResult next=sr.getNext();
          int compare=myCompare.compare(lastForIndex,next);
          if (compare > 0) {
            if (sorting) {
              String msg=""String_Node_Str"" + indexName + ""String_Node_Str"";
              msg+=""String_Node_Str"" + lastForIndex.getSegment() + ""String_Node_Str""+ lastForIndex.getSortTermList()+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + next.getSegment() + ""String_Node_Str""+ next.getSortTermList()+ ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + Arrays.toString(lastForSegmentArr) + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + results + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"";
              log.error(msg);
              isShort=true;
              break outside;
            }
            double diff=(Math.abs(lastForIndex.getScore() - next.getScore()));
            if (diff > segmentTolerance) {
              String msg=""String_Node_Str"" + indexName + ""String_Node_Str""+ segmentTolerance+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + query + ""String_Node_Str"";
              msg+=""String_Node_Str"" + lastForIndex.getSegment() + ""String_Node_Str""+ lastForIndex.getScore()+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + next.getSegment() + ""String_Node_Str""+ next.getScore()+ ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + Arrays.toString(lastForSegmentArr) + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + results + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"";
              log.error(msg);
              isShort=true;
              break outside;
            }
          }
        }
      }
    }
  }
  builder.addAllResults(results);
  LastResult.Builder newLastResultBuilder=LastResult.newBuilder();
  for (  String indexName : lastIndexResultMap.keySet()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    List<ScoredResult> indexList=new ArrayList<>();
    for (int i=0; i < numberOfSegments; i++) {
      if (lastForSegmentArr[i] != null) {
        indexList.add(lastForSegmentArr[i]);
      }
    }
    if (!indexList.isEmpty()) {
      LastIndexResult lastIndexResult=LastIndexResult.newBuilder().addAllLastForSegment(indexList).setIndexName(indexName).build();
      newLastResultBuilder.addLastIndexResult(lastIndexResult);
    }
  }
  builder.setLastResult(newLastResultBuilder.build());
  return builder.build();
}","public QueryResponse getQueryResponse() throws Exception {
  boolean sorting=(sortRequest != null && !sortRequest.getFieldSortList().isEmpty());
  long totalHits=0;
  long returnedHits=0;
  for (  SegmentResponse sr : segmentResponses) {
    totalHits+=sr.getTotalHits();
    returnedHits+=sr.getScoredResultList().size();
  }
  QueryResponse.Builder builder=QueryResponse.newBuilder();
  builder.setTotalHits(totalHits);
  resultsSize=Math.min(amount,(int)returnedHits);
  results=Collections.emptyList();
  Map<String,ScoredResult[]> lastIndexResultMap=new HashMap<>();
  for (  String indexName : indexToSegmentResponseMap.keySet()) {
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    lastIndexResultMap.put(indexName,new ScoredResult[numberOfSegments]);
  }
  for (  LastIndexResult lir : lastResult.getLastIndexResultList()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(lir.getIndexName());
    for (    ScoredResult sr : lir.getLastForSegmentList()) {
      lastForSegmentArr[sr.getSegment()]=sr;
    }
  }
  Map<CountRequest,Map<String,AtomicLong>> facetCountsMap=new HashMap<>();
  Map<CountRequest,Map<String,FixedBitSet>> segmentsReturnedMap=new HashMap<>();
  Map<CountRequest,FixedBitSet> fullResultsMap=new HashMap<>();
  Map<CountRequest,long[]> minForSegmentMap=new HashMap<>();
  int segIndex=0;
  for (  SegmentResponse sr : segmentResponses) {
    for (    FacetGroup fg : sr.getFacetGroupList()) {
      CountRequest countRequest=fg.getCountRequest();
      Map<String,AtomicLong> facetCounts=facetCountsMap.get(countRequest);
      Map<String,FixedBitSet> segmentsReturned=segmentsReturnedMap.get(countRequest);
      FixedBitSet fullResults=fullResultsMap.get(countRequest);
      long[] minForSegment=minForSegmentMap.get(countRequest);
      if (facetCounts == null) {
        facetCounts=new HashMap<>();
        facetCountsMap.put(countRequest,facetCounts);
        segmentsReturned=new HashMap<>();
        segmentsReturnedMap.put(countRequest,segmentsReturned);
        fullResults=new FixedBitSet(segmentResponses.size());
        fullResultsMap.put(countRequest,fullResults);
        minForSegment=new long[segmentResponses.size()];
        minForSegmentMap.put(countRequest,minForSegment);
      }
      for (      FacetCount fc : fg.getFacetCountList()) {
        String facet=fc.getFacet();
        AtomicLong facetSum=facetCounts.get(facet);
        FixedBitSet segmentSet=segmentsReturned.get(facet);
        if (facetSum == null) {
          facetSum=new AtomicLong();
          facetCounts.put(facet,facetSum);
          segmentSet=new FixedBitSet(segmentResponses.size());
          segmentsReturned.put(facet,segmentSet);
        }
        long count=fc.getCount();
        facetSum.addAndGet(count);
        segmentSet.set(segIndex);
        minForSegment[segIndex]=count;
      }
      int segmentFacets=countRequest.getSegmentFacets();
      int facetCountCount=fg.getFacetCountCount();
      if (facetCountCount < segmentFacets || (segmentFacets == 0)) {
        fullResults.set(segIndex);
        minForSegment[segIndex]=0;
        System.out.println(segIndex + ""String_Node_Str"" + facetCountCount+ ""String_Node_Str""+ segmentFacets);
      }
    }
    segIndex++;
  }
  for (  CountRequest countRequest : facetCountsMap.keySet()) {
    FacetGroup.Builder fg=FacetGroup.newBuilder();
    fg.setCountRequest(countRequest);
    Map<String,AtomicLong> facetCounts=facetCountsMap.get(countRequest);
    Map<String,FixedBitSet> segmentsReturned=segmentsReturnedMap.get(countRequest);
    FixedBitSet fullResults=fullResultsMap.get(countRequest);
    long[] minForSegment=minForSegmentMap.get(countRequest);
    int numberOfSegments=segmentResponses.size();
    long maxValuePossibleMissing=0;
    for (int i=0; i < numberOfSegments; i++) {
      maxValuePossibleMissing+=minForSegment[i];
    }
    boolean computeError=countRequest.getSegmentFacets() != 0 && countRequest.getComputeError();
    boolean computePossibleMissing=countRequest.getSegmentFacets() != 0 && countRequest.getComputePossibleMissed() && (maxValuePossibleMissing != 0);
    SortedSet<FacetCountResult> sortedFacetResults=facetCounts.keySet().stream().map(facet -> new FacetCountResult(facet,facetCounts.get(facet).get())).collect(Collectors.toCollection(TreeSet::new));
    Integer maxCount=countRequest.getMaxFacets();
    long minCountReturned=0;
    int count=0;
    for (    FacetCountResult facet : sortedFacetResults) {
      FixedBitSet segCount=segmentsReturned.get(facet.getFacet());
      segCount.or(fullResults);
      FacetCount.Builder facetCountBuilder=FacetCount.newBuilder().setFacet(facet.getFacet()).setCount(facet.getCount());
      long maxWithError=0;
      if (computeError) {
        long maxError=0;
        if (segCount.cardinality() < numberOfSegments) {
          for (int i=0; i < numberOfSegments; i++) {
            if (!segCount.get(i)) {
              maxError+=minForSegment[i];
            }
          }
        }
        facetCountBuilder.setMaxError(maxError);
        maxWithError=maxError + facet.getCount();
      }
      count++;
      if (maxCount > 0 && count > maxCount) {
        if (computePossibleMissing) {
          if (maxWithError > maxValuePossibleMissing) {
            maxValuePossibleMissing=maxWithError;
          }
        }
 else {
          break;
        }
      }
 else {
        fg.addFacetCount(facetCountBuilder);
        minCountReturned=facet.getCount();
      }
    }
    if (!sortedFacetResults.isEmpty()) {
      if (maxValuePossibleMissing > minCountReturned) {
        fg.setPossibleMissing(true);
        fg.setMaxValuePossibleMissing(maxValuePossibleMissing);
      }
    }
    builder.addFacetGroup(fg);
  }
  List<ScoredResult> mergedResults=new ArrayList<>((int)returnedHits);
  for (  SegmentResponse sr : segmentResponses) {
    mergedResults.addAll(sr.getScoredResultList());
  }
  Comparator<ScoredResult> myCompare=scoreCompare;
  if (sorting) {
    final List<FieldSort> fieldSortList=sortRequest.getFieldSortList();
    final HashMap<String,LMAnalyzer> analyzerMap=new HashMap<>();
    for (    FieldSort fieldSort : fieldSortList) {
      String sortField=fieldSort.getSortField();
      LMAnalyzer lmAnalyzer=null;
      for (      String indexName : usedIndexMap.keySet()) {
        LumongoIndex index=usedIndexMap.get(indexName);
        if (lmAnalyzer == null) {
          lmAnalyzer=index.getLMAnalyzer(sortField);
          analyzerMap.put(sortField,lmAnalyzer);
        }
 else {
          if (!lmAnalyzer.equals(index.getLMAnalyzer(sortField))) {
            log.error(""String_Node_Str"");
            String message=""String_Node_Str"" + sortField + ""String_Node_Str""+ lmAnalyzer+ ""String_Node_Str""+ index.getLMAnalyzer(sortField)+ ""String_Node_Str"";
            log.error(message);
            throw new Exception(message);
          }
        }
      }
    }
    myCompare=(o1,o2) -> {
      int compare=0;
      int stringIndex=0;
      int intIndex=0;
      int longIndex=0;
      int floatIndex=0;
      int doubleIndex=0;
      int dateIndex=0;
      for (      FieldSort fs : fieldSortList) {
        String sortField=fs.getSortField();
        LMAnalyzer lmAnalyzer=analyzerMap.get(sortField);
        if (LMAnalyzer.NUMERIC_INT.equals(lmAnalyzer)) {
          int a=o1.getSortIntegerList().get(intIndex);
          int b=o2.getSortIntegerList().get(intIndex);
          compare=Integer.compare(a,b);
          intIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_LONG.equals(lmAnalyzer)) {
          long a=o1.getSortLongList().get(longIndex);
          long b=o2.getSortLongList().get(longIndex);
          compare=Long.compare(a,b);
          longIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_FLOAT.equals(lmAnalyzer)) {
          float a=o1.getSortFloatList().get(floatIndex);
          float b=o2.getSortFloatList().get(floatIndex);
          compare=Float.compare(a,b);
          floatIndex++;
        }
 else         if (LMAnalyzer.NUMERIC_DOUBLE.equals(lmAnalyzer)) {
          double a=o1.getSortFloatList().get(doubleIndex);
          double b=o2.getSortFloatList().get(doubleIndex);
          compare=Double.compare(a,b);
          doubleIndex++;
        }
 else         if (LMAnalyzer.DATE.equals(lmAnalyzer)) {
          long a=o1.getSortDateList().get(dateIndex);
          long b=o2.getSortDateList().get(dateIndex);
          compare=Long.compare(a,b);
          dateIndex++;
        }
 else {
          String a=o1.getSortTermList().get(stringIndex);
          String b=o2.getSortTermList().get(stringIndex);
          compare=a.compareTo(b);
          stringIndex++;
        }
        if (FieldSort.Direction.DESCENDING.equals(fs.getDirection())) {
          compare*=-1;
        }
        if (compare != 0) {
          return compare;
        }
      }
      return compare;
    }
;
  }
  if (!mergedResults.isEmpty()) {
    Collections.sort(mergedResults,myCompare);
    results=mergedResults.subList(0,resultsSize);
    for (    ScoredResult sr : results) {
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(sr.getIndexName());
      lastForSegmentArr[sr.getSegment()]=sr;
    }
    outside:     for (    String indexName : usedIndexMap.keySet()) {
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
      ScoredResult lastForIndex=null;
      for (      ScoredResult sr : lastForSegmentArr) {
        if (sr != null) {
          if (lastForIndex == null) {
            lastForIndex=sr;
          }
 else {
            if (myCompare.compare(sr,lastForIndex) > 0) {
              lastForIndex=sr;
            }
          }
        }
      }
      if (lastForIndex == null) {
        continue;
      }
      double segmentTolerance=usedIndexMap.get(indexName).getSegmentTolerance();
      int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
      Map<Integer,SegmentResponse> segmentResponseMap=indexToSegmentResponseMap.get(indexName);
      for (int segmentNumber=0; segmentNumber < numberOfSegments; segmentNumber++) {
        SegmentResponse sr=segmentResponseMap.get(segmentNumber);
        if (sr.hasNext()) {
          ScoredResult next=sr.getNext();
          int compare=myCompare.compare(lastForIndex,next);
          if (compare > 0) {
            if (sorting) {
              String msg=""String_Node_Str"" + indexName + ""String_Node_Str"";
              msg+=""String_Node_Str"" + lastForIndex.getSegment() + ""String_Node_Str""+ lastForIndex.getSortTermList()+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + next.getSegment() + ""String_Node_Str""+ next.getSortTermList()+ ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + Arrays.toString(lastForSegmentArr) + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + results + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"";
              log.error(msg);
              isShort=true;
              break outside;
            }
            double diff=(Math.abs(lastForIndex.getScore() - next.getScore()));
            if (diff > segmentTolerance) {
              String msg=""String_Node_Str"" + indexName + ""String_Node_Str""+ segmentTolerance+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + query + ""String_Node_Str"";
              msg+=""String_Node_Str"" + lastForIndex.getSegment() + ""String_Node_Str""+ lastForIndex.getScore()+ ""String_Node_Str"";
              msg+=""String_Node_Str"" + next.getSegment() + ""String_Node_Str""+ next.getScore()+ ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + Arrays.toString(lastForSegmentArr) + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"" + results + ""String_Node_Str"";
              msg+=""String_Node_Str"";
              msg+=""String_Node_Str"";
              log.error(msg);
              isShort=true;
              break outside;
            }
          }
        }
      }
    }
  }
  builder.addAllResults(results);
  LastResult.Builder newLastResultBuilder=LastResult.newBuilder();
  for (  String indexName : lastIndexResultMap.keySet()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    List<ScoredResult> indexList=new ArrayList<>();
    for (int i=0; i < numberOfSegments; i++) {
      if (lastForSegmentArr[i] != null) {
        indexList.add(lastForSegmentArr[i]);
      }
    }
    if (!indexList.isEmpty()) {
      LastIndexResult lastIndexResult=LastIndexResult.newBuilder().addAllLastForSegment(indexList).setIndexName(indexName).build();
      newLastResultBuilder.addLastIndexResult(lastIndexResult);
    }
  }
  builder.setLastResult(newLastResultBuilder.build());
  return builder.build();
}",0.9910484459641168
33930,"public SegmentResponse querySegment(QueryWithFilters queryWithFilters,int amount,FieldDoc after,FacetRequest facetRequest,SortRequest sortRequest,QueryCacheKey queryCacheKey,FetchType resultFetchType,List<String> fieldsToReturn,List<String> fieldsToMask) throws Exception {
  QueryResultCache qrc=queryResultCache;
  boolean useCache=(qrc != null) && ((segmentQueryCacheMaxAmount <= 0) || (segmentQueryCacheMaxAmount >= amount)) && queryCacheKey != null;
  if (useCache) {
    SegmentResponse cacheSegmentResponse=qrc.getCacheSegmentResponse(queryCacheKey);
    if (cacheSegmentResponse != null) {
      return cacheSegmentResponse;
    }
  }
  Query q=queryWithFilters.getQuery();
  if (!queryWithFilters.getFilterQueries().isEmpty()) {
    BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
    for (    Query filterQuery : queryWithFilters.getFilterQueries()) {
      booleanQuery.add(filterQuery,BooleanClause.Occur.MUST);
    }
    q=new QueryWrapperFilter(booleanQuery.build());
  }
  reopenIndexWritersIfNecessary();
  openReaderIfChanges();
  IndexSearcher indexSearcher=new IndexSearcher(directoryReader);
  int hasMoreAmount=amount + 1;
  TopDocsCollector<?> collector;
  List<SortField> sortFields=new ArrayList<>();
  boolean sorting=(sortRequest != null) && !sortRequest.getFieldSortList().isEmpty();
  if (sorting) {
    for (    FieldSort fs : sortRequest.getFieldSortList()) {
      boolean reverse=Direction.DESCENDING.equals(fs.getDirection());
      String sortField=fs.getSortField();
      Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
      if (IndexConfig.isNumericOrDateSortType(sortType)) {
        SortField.Type type;
        if (IndexConfig.isNumericIntSortType(sortType)) {
          type=SortField.Type.INT;
        }
 else         if (IndexConfig.isNumericLongSortType(sortType)) {
          type=SortField.Type.LONG;
        }
 else         if (IndexConfig.isNumericFloatSortType(sortType)) {
          type=SortField.Type.FLOAT;
        }
 else         if (IndexConfig.isNumericDoubleSortType(sortType)) {
          type=SortField.Type.DOUBLE;
        }
 else         if (IndexConfig.isNumericDateSortType(sortType)) {
          type=SortField.Type.LONG;
        }
 else {
          throw new Exception(""String_Node_Str"" + sortType + ""String_Node_Str""+ sortField+ ""String_Node_Str"");
        }
        sortFields.add(new SortedNumericSortField(sortField,type,reverse));
      }
 else {
        sortFields.add(new SortedSetSortField(sortField,reverse));
      }
    }
    Sort sort=new Sort();
    sort.setSort(sortFields.toArray(new SortField[sortFields.size()]));
    collector=TopFieldCollector.create(sort,hasMoreAmount,after,true,true,true);
  }
 else {
    collector=TopScoreDocCollector.create(hasMoreAmount,after);
  }
  SegmentResponse.Builder builder=SegmentResponse.newBuilder();
  if ((facetRequest != null) && !facetRequest.getCountRequestList().isEmpty()) {
    FacetsCollector facetsCollector=new FacetsCollector();
    indexSearcher.search(q,MultiCollector.wrap(collector,facetsCollector));
    for (    CountRequest countRequest : facetRequest.getCountRequestList()) {
      String label=countRequest.getFacetField().getLabel();
      String indexFieldName=facetsConfig.getDimConfig(label).indexFieldName;
      DefaultSortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(directoryReader,indexFieldName);
      Facets facets=new SortedSetDocValuesFacetCounts(state,facetsCollector);
      int numOfFacets;
      if (countRequest.getSegmentFacets() != 0) {
        if (countRequest.getSegmentFacets() < countRequest.getMaxFacets()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        numOfFacets=countRequest.getSegmentFacets() + 1;
      }
 else {
        numOfFacets=state.getSize();
      }
      FacetResult facetResult=facets.getTopChildren(numOfFacets,label);
      handleFacetResult(builder,facetResult,countRequest);
    }
  }
 else {
    indexSearcher.search(q,collector);
  }
  ScoreDoc[] results=collector.topDocs().scoreDocs;
  int totalHits=collector.getTotalHits();
  builder.setTotalHits(totalHits);
  boolean moreAvailable=(results.length == hasMoreAmount);
  int numResults=Math.min(results.length,amount);
  for (int i=0; i < numResults; i++) {
    ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,i,resultFetchType,fieldsToReturn,fieldsToMask);
    builder.addScoredResult(srBuilder.build());
  }
  if (moreAvailable) {
    ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,numResults,resultFetchType,fieldsToReturn,fieldsToMask);
    builder.setNext(srBuilder);
  }
  builder.setIndexName(indexName);
  builder.setSegmentNumber(segmentNumber);
  SegmentResponse segmentResponse=builder.build();
  if (useCache) {
    qrc.storeInCache(queryCacheKey,segmentResponse);
  }
  return segmentResponse;
}","public SegmentResponse querySegment(QueryWithFilters queryWithFilters,int amount,FieldDoc after,FacetRequest facetRequest,SortRequest sortRequest,QueryCacheKey queryCacheKey,FetchType resultFetchType,List<String> fieldsToReturn,List<String> fieldsToMask) throws Exception {
  QueryResultCache qrc=queryResultCache;
  boolean useCache=(qrc != null) && ((segmentQueryCacheMaxAmount <= 0) || (segmentQueryCacheMaxAmount >= amount)) && queryCacheKey != null;
  if (useCache) {
    SegmentResponse cacheSegmentResponse=qrc.getCacheSegmentResponse(queryCacheKey);
    if (cacheSegmentResponse != null) {
      return cacheSegmentResponse;
    }
  }
  Query q=queryWithFilters.getQuery();
  if (!queryWithFilters.getFilterQueries().isEmpty()) {
    BooleanQuery.Builder booleanQuery=new BooleanQuery.Builder();
    for (    Query filterQuery : queryWithFilters.getFilterQueries()) {
      booleanQuery.add(filterQuery,BooleanClause.Occur.MUST);
    }
    booleanQuery.add(q,BooleanClause.Occur.MUST);
    q=new QueryWrapperFilter(booleanQuery.build());
  }
  reopenIndexWritersIfNecessary();
  openReaderIfChanges();
  IndexSearcher indexSearcher=new IndexSearcher(directoryReader);
  int hasMoreAmount=amount + 1;
  TopDocsCollector<?> collector;
  List<SortField> sortFields=new ArrayList<>();
  boolean sorting=(sortRequest != null) && !sortRequest.getFieldSortList().isEmpty();
  if (sorting) {
    for (    FieldSort fs : sortRequest.getFieldSortList()) {
      boolean reverse=Direction.DESCENDING.equals(fs.getDirection());
      String sortField=fs.getSortField();
      Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
      if (IndexConfig.isNumericOrDateSortType(sortType)) {
        SortField.Type type;
        if (IndexConfig.isNumericIntSortType(sortType)) {
          type=SortField.Type.INT;
        }
 else         if (IndexConfig.isNumericLongSortType(sortType)) {
          type=SortField.Type.LONG;
        }
 else         if (IndexConfig.isNumericFloatSortType(sortType)) {
          type=SortField.Type.FLOAT;
        }
 else         if (IndexConfig.isNumericDoubleSortType(sortType)) {
          type=SortField.Type.DOUBLE;
        }
 else         if (IndexConfig.isNumericDateSortType(sortType)) {
          type=SortField.Type.LONG;
        }
 else {
          throw new Exception(""String_Node_Str"" + sortType + ""String_Node_Str""+ sortField+ ""String_Node_Str"");
        }
        sortFields.add(new SortedNumericSortField(sortField,type,reverse));
      }
 else {
        sortFields.add(new SortedSetSortField(sortField,reverse));
      }
    }
    Sort sort=new Sort();
    sort.setSort(sortFields.toArray(new SortField[sortFields.size()]));
    collector=TopFieldCollector.create(sort,hasMoreAmount,after,true,true,true);
  }
 else {
    collector=TopScoreDocCollector.create(hasMoreAmount,after);
  }
  SegmentResponse.Builder builder=SegmentResponse.newBuilder();
  if ((facetRequest != null) && !facetRequest.getCountRequestList().isEmpty()) {
    FacetsCollector facetsCollector=new FacetsCollector();
    indexSearcher.search(q,MultiCollector.wrap(collector,facetsCollector));
    for (    CountRequest countRequest : facetRequest.getCountRequestList()) {
      String label=countRequest.getFacetField().getLabel();
      String indexFieldName=facetsConfig.getDimConfig(label).indexFieldName;
      DefaultSortedSetDocValuesReaderState state=new DefaultSortedSetDocValuesReaderState(directoryReader,indexFieldName);
      Facets facets=new SortedSetDocValuesFacetCounts(state,facetsCollector);
      int numOfFacets;
      if (countRequest.getSegmentFacets() != 0) {
        if (countRequest.getSegmentFacets() < countRequest.getMaxFacets()) {
          throw new IllegalArgumentException(""String_Node_Str"");
        }
        numOfFacets=countRequest.getSegmentFacets() + 1;
      }
 else {
        numOfFacets=state.getSize();
      }
      FacetResult facetResult=facets.getTopChildren(numOfFacets,label);
      handleFacetResult(builder,facetResult,countRequest);
    }
  }
 else {
    indexSearcher.search(q,collector);
  }
  ScoreDoc[] results=collector.topDocs().scoreDocs;
  int totalHits=collector.getTotalHits();
  builder.setTotalHits(totalHits);
  boolean moreAvailable=(results.length == hasMoreAmount);
  int numResults=Math.min(results.length,amount);
  for (int i=0; i < numResults; i++) {
    ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,i,resultFetchType,fieldsToReturn,fieldsToMask);
    builder.addScoredResult(srBuilder.build());
  }
  if (moreAvailable) {
    ScoredResult.Builder srBuilder=handleDocResult(indexSearcher,sortRequest,sorting,results,numResults,resultFetchType,fieldsToReturn,fieldsToMask);
    builder.setNext(srBuilder);
  }
  builder.setIndexName(indexName);
  builder.setSegmentNumber(segmentNumber);
  SegmentResponse segmentResponse=builder.build();
  if (useCache) {
    qrc.storeInCache(queryCacheKey,segmentResponse);
  }
  return segmentResponse;
}",0.9949596774193548
33931,"public void deleteDocument(String uniqueId) throws Exception {
  Term term=new Term(uniqueIdField,uniqueId);
  indexWriter.deleteDocuments(term);
  possibleCommit();
}","public void deleteDocument(String uniqueId) throws Exception {
  Term term=new Term(uniqueIdField,uniqueId);
  indexWriter.deleteDocuments(term);
  if (indexConfig.getApplyUncommitedDeletes()) {
    queryResultCache.clear();
  }
  possibleCommit();
}",0.8009592326139089
33932,"public MongoDirectory(MongoClient mongo,String ddName,String indexName,boolean sharded,int blockSize) throws MongoException, IOException {
  this.mongo=mongo;
  this.dbname=ddName;
  this.indexName=indexName;
  this.blockSize=blockSize;
synchronized (MongoDirectory.class) {
    String key=ddName + ""String_Node_Str"" + indexName;
    Short indexNumber=indexNameToNumberMap.get(key);
    if (indexNumber == null) {
      indexNameToNumberMap.put(key,indexCount);
      indexCount++;
      indexNumber=indexCount;
    }
    this.indexNumber=indexNumber;
  }
  getFilesCollection().createIndex(new Document(FILE_NUMBER,1));
  Document indexes=new Document();
  indexes.put(FILE_NUMBER,1);
  indexes.put(BLOCK_NUMBER,1);
  getBlocksCollection().createIndex(indexes);
  if (sharded) {
    String blockCollectionName=getBlocksCollection().getNamespace().getFullName();
    MongoDatabase db=mongo.getDatabase(MongoConstants.StandardDBs.ADMIN);
    Document shardCommand=new Document();
    shardCommand.put(MongoConstants.Commands.SHARD_COLLECTION,blockCollectionName);
    shardCommand.put(MongoConstants.Commands.SHARD_KEY,indexes);
    db.runCommand(shardCommand);
  }
  nameToFileMap=new ConcurrentHashMap<>();
  fetchInitialContents();
}","public MongoDirectory(MongoClient mongo,String ddName,String indexName,boolean sharded,int blockSize) throws MongoException, IOException {
  this.mongo=mongo;
  this.dbname=ddName;
  this.indexName=indexName;
  this.blockSize=blockSize;
synchronized (MongoDirectory.class) {
    String key=ddName + ""String_Node_Str"" + indexName;
    Short indexNumber=indexNameToNumberMap.get(key);
    if (indexNumber == null) {
      indexNameToNumberMap.put(key,indexCount);
      indexNumber=indexCount;
      indexCount++;
    }
    this.indexNumber=indexNumber;
  }
  getFilesCollection().createIndex(new Document(FILE_NUMBER,1));
  Document indexes=new Document();
  indexes.put(FILE_NUMBER,1);
  indexes.put(BLOCK_NUMBER,1);
  getBlocksCollection().createIndex(indexes);
  if (sharded) {
    String blockCollectionName=getBlocksCollection().getNamespace().getFullName();
    MongoDatabase db=mongo.getDatabase(MongoConstants.StandardDBs.ADMIN);
    Document shardCommand=new Document();
    shardCommand.put(MongoConstants.Commands.SHARD_COLLECTION,blockCollectionName);
    shardCommand.put(MongoConstants.Commands.SHARD_KEY,indexes);
    db.runCommand(shardCommand);
  }
  nameToFileMap=new ConcurrentHashMap<>();
  fetchInitialContents();
}",0.9757085020242916
33933,"private ScoredResult.Builder handleDocResult(IndexSearcher is,SortRequest sortRequest,boolean sorting,ScoreDoc[] results,int i) throws IOException {
  int docId=results[i].doc;
  Document d=is.doc(docId,fetchSet);
  ScoredResult.Builder srBuilder=ScoredResult.newBuilder();
  srBuilder.setScore(results[i].score);
  srBuilder.setUniqueId(d.get(indexConfig.getUniqueIdField()));
  IndexableField f=d.getField(LumongoConstants.TIMESTAMP_FIELD);
  srBuilder.setTimestamp(f.numericValue().longValue());
  srBuilder.setDocId(docId);
  srBuilder.setSegment(segmentNumber);
  srBuilder.setIndexName(indexName);
  srBuilder.setResultIndex(i);
  if (sorting) {
    FieldDoc result=(FieldDoc)results[i];
    int c=0;
    for (    Object o : result.fields) {
      FieldSort fieldSort=sortRequest.getFieldSort(c);
      String sortField=fieldSort.getSortField();
      Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
      if (IndexConfig.isNumericOrDateSortType(sortType)) {
        if (IndexConfig.isNumericIntSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortInteger(0);
          }
 else {
            srBuilder.addSortInteger((Integer)o);
          }
        }
 else         if (IndexConfig.isNumericLongSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortLong(0L);
          }
 else {
            srBuilder.addSortLong((Long)o);
          }
        }
 else         if (IndexConfig.isNumericFloatSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortFloat(0f);
          }
 else {
            srBuilder.addSortFloat((Float)o);
          }
        }
 else         if (IndexConfig.isNumericDoubleSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortDouble(0);
          }
 else {
            srBuilder.addSortDouble((Double)o);
          }
        }
 else         if (IndexConfig.isNumericDateSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortDate(0L);
          }
 else {
            srBuilder.addSortDate(((Date)o).getTime());
          }
        }
      }
 else {
        if (o == null) {
          srBuilder.addSortTerm(""String_Node_Str"");
        }
 else {
          BytesRef b=(BytesRef)o;
          srBuilder.addSortTerm(b.utf8ToString());
        }
      }
      c++;
    }
  }
  return srBuilder;
}","private ScoredResult.Builder handleDocResult(IndexSearcher is,SortRequest sortRequest,boolean sorting,ScoreDoc[] results,int i) throws IOException {
  int docId=results[i].doc;
  Document d=is.doc(docId,fetchSet);
  ScoredResult.Builder srBuilder=ScoredResult.newBuilder();
  srBuilder.setScore(results[i].score);
  srBuilder.setUniqueId(d.get(indexConfig.getUniqueIdField()));
  IndexableField f=d.getField(LumongoConstants.TIMESTAMP_FIELD);
  srBuilder.setTimestamp(f.numericValue().longValue());
  srBuilder.setDocId(docId);
  srBuilder.setSegment(segmentNumber);
  srBuilder.setIndexName(indexName);
  srBuilder.setResultIndex(i);
  if (sorting) {
    FieldDoc result=(FieldDoc)results[i];
    int c=0;
    for (    Object o : result.fields) {
      FieldSort fieldSort=sortRequest.getFieldSort(c);
      String sortField=fieldSort.getSortField();
      Lumongo.SortAs.SortType sortType=indexConfig.getSortType(sortField);
      if (IndexConfig.isNumericOrDateSortType(sortType)) {
        if (IndexConfig.isNumericIntSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortInteger(0);
          }
 else {
            srBuilder.addSortInteger((Integer)o);
          }
        }
 else         if (IndexConfig.isNumericLongSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortLong(0L);
          }
 else {
            srBuilder.addSortLong((Long)o);
          }
        }
 else         if (IndexConfig.isNumericFloatSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortFloat(0f);
          }
 else {
            srBuilder.addSortFloat((Float)o);
          }
        }
 else         if (IndexConfig.isNumericDoubleSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortDouble(0);
          }
 else {
            srBuilder.addSortDouble((Double)o);
          }
        }
 else         if (IndexConfig.isNumericDateSortType(sortType)) {
          if (o == null) {
            srBuilder.addSortDate(0L);
          }
 else {
            srBuilder.addSortDate(((Long)o));
          }
        }
      }
 else {
        if (o == null) {
          srBuilder.addSortTerm(""String_Node_Str"");
        }
 else {
          BytesRef b=(BytesRef)o;
          srBuilder.addSortTerm(b.utf8ToString());
        }
      }
      c++;
    }
  }
  return srBuilder;
}",0.9953111679454392
33934,"@GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response get(@Context Response response,@QueryParam(LumongoConstants.UNIQUE_ID) final String uniqueId,@QueryParam(LumongoConstants.INDEX) final String indexName){
  Lumongo.FetchRequest.Builder fetchRequest=Lumongo.FetchRequest.newBuilder();
  fetchRequest.setIndexName(indexName);
  fetchRequest.setUniqueId(uniqueId);
  Lumongo.FetchResponse fetchResponse;
  try {
    fetchResponse=indexManager.fetch(fetchRequest.build());
    if (fetchResponse.hasResultDocument()) {
      Lumongo.ResultDocument resultDocument=fetchResponse.getResultDocument();
      ByteString bs=resultDocument.getDocument();
      DBObject document=new BasicDBObject();
      document.putAll(BSON.decode(bs.toByteArray()));
      return Response.status(LumongoConstants.SUCCESS).entity(document.toString()).build();
    }
 else {
      return Response.status(LumongoConstants.NOT_FOUND).entity(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ indexName+ ""String_Node_Str"").build();
    }
  }
 catch (  Exception e) {
    return Response.status(LumongoConstants.INTERNAL_ERROR).entity(e.getMessage()).build();
  }
}","@GET @Produces({MediaType.APPLICATION_JSON}) public Response get(@Context Response response,@QueryParam(LumongoConstants.UNIQUE_ID) final String uniqueId,@QueryParam(LumongoConstants.INDEX) final String indexName){
  Lumongo.FetchRequest.Builder fetchRequest=Lumongo.FetchRequest.newBuilder();
  fetchRequest.setIndexName(indexName);
  fetchRequest.setUniqueId(uniqueId);
  Lumongo.FetchResponse fetchResponse;
  try {
    fetchResponse=indexManager.fetch(fetchRequest.build());
    if (fetchResponse.hasResultDocument()) {
      Lumongo.ResultDocument resultDocument=fetchResponse.getResultDocument();
      ByteString bs=resultDocument.getDocument();
      DBObject document=new BasicDBObject();
      document.putAll(BSON.decode(bs.toByteArray()));
      return Response.status(LumongoConstants.SUCCESS).entity(document.toString()).build();
    }
 else {
      return Response.status(LumongoConstants.NOT_FOUND).entity(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ indexName+ ""String_Node_Str"").build();
    }
  }
 catch (  Exception e) {
    return Response.status(LumongoConstants.INTERNAL_ERROR).entity(""String_Node_Str"" + uniqueId + ""String_Node_Str""+ indexName+ ""String_Node_Str""+ e.getMessage()).build();
  }
}",0.955685618729097
33935,"public void start() throws IOException {
  URI baseUri=UriBuilder.fromUri(""String_Node_Str"").port(restPort).build();
  ResourceConfig config=new ResourceConfig();
  config.register(new AssociatedResource(indexManager));
  config.register(new QueryResource(indexManager));
  server=GrizzlyHttpServerFactory.createHttpServer(baseUri,config);
}","public void start() throws IOException {
  URI baseUri=UriBuilder.fromUri(""String_Node_Str"").port(restPort).build();
  ResourceConfig config=new ResourceConfig();
  config.register(new AssociatedResource(indexManager));
  config.register(new QueryResource(indexManager));
  config.register(new FetchResource(indexManager));
  server=GrizzlyHttpServerFactory.createHttpServer(baseUri,config);
}",0.9291553133514986
33936,"public void populate(T newInstance,DBObject savedDBObject) throws Exception {
  Object value=savedDBObject.get(fieldName);
  boolean valuesIsList=value instanceof List;
  if (valuesIsList) {
    if (fieldIsList) {
      field.set(newInstance,new ArrayList<>((List<?>)value));
    }
 else {
      List<?> valueList=(List<?>)value;
      if (valueList.size() == 1) {
        Object first=valueList.iterator().next();
        if (first != null) {
          field.set(newInstance,first);
        }
      }
 else       if (valueList.isEmpty()) {
      }
 else {
        throw new Exception(""String_Node_Str"" + valueList + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ field.getType()+ ""String_Node_Str"");
      }
    }
  }
 else {
    if (fieldIsList) {
      if (value != null) {
        field.set(newInstance,Arrays.asList(value));
      }
    }
 else {
      field.set(newInstance,value);
    }
  }
}","public void populate(T newInstance,DBObject savedDBObject) throws Exception {
  Object value=savedDBObject.get(fieldName);
  boolean valuesIsList=value instanceof List;
  if (valuesIsList) {
    if (fieldIsList) {
      field.set(newInstance,new ArrayList<>((List<?>)value));
    }
 else {
      List<?> valueList=(List<?>)value;
      if (valueList.size() == 1) {
        Object first=valueList.iterator().next();
        if (first != null) {
          field.set(newInstance,first);
        }
      }
 else       if (valueList.isEmpty()) {
      }
 else {
        throw new Exception(""String_Node_Str"" + valueList + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ field.getType()+ ""String_Node_Str"");
      }
    }
  }
 else {
    if (fieldIsList) {
      if (value != null) {
        field.set(newInstance,new ArrayList<>(Arrays.asList(value)));
      }
    }
 else {
      field.set(newInstance,value);
    }
  }
}",0.9754232659748772
33937,"public BatchFetchResult fetch(Collection<ScoredResult> scoredResults) throws Exception {
  List<FetchResult> resultsFromCache=new ArrayList<FetchResult>();
  List<FetchDocument> fetchDocumentList=new ArrayList<FetchDocument>();
  for (  ScoredResult sr : scoredResults) {
    FetchResult fetchResult=documentCache.getIfPresent(sr.getUniqueId());
    boolean fetch=fetchNeeded(fetchResult,sr.getTimestamp());
    if (fetch) {
      fetchDocumentList.add(new FetchDocument(sr.getUniqueId(),sr.getIndexName()));
    }
 else {
      resultsFromCache.add(fetchResult);
    }
  }
  if (!fetchDocumentList.isEmpty()) {
    BatchFetchResult bfr=lumongoWorkPool.batchFetch(new BatchFetch().addFetches(fetchDocumentList));
    for (    FetchResult fr : bfr.getFetchResults()) {
      if (fr.hasResultDocument()) {
        documentCache.put(new DocId(fr.getUniqueId(),fr.getIndexName()),fr);
      }
    }
    bfr.getFetchResults().addAll(resultsFromCache);
    return bfr;
  }
 else {
    return new BatchFetchResult(resultsFromCache);
  }
}","public BatchFetchResult fetch(Collection<ScoredResult> scoredResults) throws Exception {
  List<FetchResult> resultsFromCache=new ArrayList<FetchResult>();
  List<FetchDocument> fetchDocumentList=new ArrayList<FetchDocument>();
  for (  ScoredResult sr : scoredResults) {
    FetchResult fetchResult=documentCache.getIfPresent(new DocId(sr.getUniqueId(),sr.getIndexName()));
    boolean fetch=fetchNeeded(fetchResult,sr.getTimestamp());
    if (fetch) {
      fetchDocumentList.add(new FetchDocument(sr.getUniqueId(),sr.getIndexName()));
    }
 else {
      resultsFromCache.add(fetchResult);
    }
  }
  if (!fetchDocumentList.isEmpty()) {
    BatchFetchResult bfr=lumongoWorkPool.batchFetch(new BatchFetch().addFetches(fetchDocumentList));
    for (    FetchResult fr : bfr.getFetchResults()) {
      if (fr.hasResultDocument()) {
        documentCache.put(new DocId(fr.getUniqueId(),fr.getIndexName()),fr);
      }
    }
    bfr.getFetchResults().addAll(resultsFromCache);
    return bfr;
  }
 else {
    return new BatchFetchResult(resultsFromCache);
  }
}",0.8512673362027738
33938,"@Override public void store(RpcController controller,StoreRequest request,RpcCallback<StoreResponse> done){
  try {
    StoreResponse sr=indexManger.storeDocument(request);
    done.run(sr);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + request + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str"",e);
    controller.setFailed(e.getMessage());
    controller.startCancel();
    done.run(null);
  }
}","@Override public void store(RpcController controller,StoreRequest request,RpcCallback<StoreResponse> done){
  try {
    StoreResponse sr=indexManger.storeDocument(request);
    done.run(sr);
  }
 catch (  Exception e) {
    log.error(""String_Node_Str"" + request + ""String_Node_Str""+ e.getClass().getSimpleName()+ ""String_Node_Str"",e);
    controller.setFailed(e.getMessage());
    done.run(null);
  }
}",0.9328537170263788
33939,"@Override public ResultDocument getSourceDocument(String uniqueId,FetchType fetchType) throws Exception {
  if (!FetchType.NONE.equals(fetchType)) {
    DB db=pool.getDB(database);
    DBCollection coll=db.getCollection(RESULT_STORAGE_COLLECTION);
    DBObject search=new BasicDBObject(MongoConstants.StandardFields._ID,uniqueId);
    DBObject result=coll.findOne(search);
    if (null != result) {
      boolean compressed=(boolean)result.removeField(COMPRESSED);
      long timestamp=(long)result.removeField(TIMESTAMP);
      ResultDocument.Type type=ResultDocument.Type.valueOf((String)result.removeField(TYPE));
      ResultDocument.Builder dBuilder=ResultDocument.newBuilder();
      dBuilder.setType(type);
      dBuilder.setCompressed(compressed);
      dBuilder.setUniqueId(uniqueId);
      dBuilder.setTimestamp(timestamp);
      if (result.containsField(METADATA)) {
        DBObject metadata=(DBObject)result.removeField(METADATA);
        for (        String key : metadata.keySet()) {
          dBuilder.addMetadata(Metadata.newBuilder().setKey(key).setValue((String)metadata.get(VALUE)).build());
        }
      }
      if (FetchType.FULL.equals(fetchType)) {
        ByteString document=null;
        if (!compressed && type.equals(ResultDocument.Type.BSON)) {
          document=ByteString.copyFrom(BSON.encode(result));
        }
 else         if (!compressed && type.equals(ResultDocument.Type.TEXT)) {
          document=ByteString.copyFrom(((String)result.get(DOC)).getBytes(UTF_8_CHARSET));
        }
 else {
          byte[] bytes=(byte[])result.get(DOC);
          if (compressed) {
            bytes=CommonCompression.uncompressZlib(bytes);
          }
          if (type.equals(ResultDocument.Type.BSON)) {
            BSONObject object=BSON.decode(bytes);
            object.put(MongoConstants.StandardFields._ID,uniqueId);
            document=ByteString.copyFrom(BSON.encode(object));
          }
 else {
            document=ByteString.copyFrom(bytes);
          }
        }
        dBuilder.setDocument(document);
      }
      return dBuilder.build();
    }
  }
  return null;
}","@Override public ResultDocument getSourceDocument(String uniqueId,FetchType fetchType) throws Exception {
  if (!FetchType.NONE.equals(fetchType)) {
    DB db=pool.getDB(database);
    DBCollection coll=db.getCollection(RESULT_STORAGE_COLLECTION);
    DBObject search=new BasicDBObject(MongoConstants.StandardFields._ID,uniqueId);
    DBObject result=coll.findOne(search);
    if (null != result) {
      boolean compressed=(boolean)result.removeField(COMPRESSED);
      long timestamp=(long)result.removeField(TIMESTAMP);
      ResultDocument.Type type=ResultDocument.Type.valueOf((String)result.removeField(TYPE));
      ResultDocument.Builder dBuilder=ResultDocument.newBuilder();
      dBuilder.setType(type);
      dBuilder.setCompressed(compressed);
      dBuilder.setUniqueId(uniqueId);
      dBuilder.setTimestamp(timestamp);
      if (result.containsField(METADATA)) {
        DBObject metadata=(DBObject)result.removeField(METADATA);
        for (        String key : metadata.keySet()) {
          dBuilder.addMetadata(Metadata.newBuilder().setKey(key).setValue((String)metadata.get(key)));
        }
      }
      if (FetchType.FULL.equals(fetchType)) {
        ByteString document=null;
        if (!compressed && type.equals(ResultDocument.Type.BSON)) {
          document=ByteString.copyFrom(BSON.encode(result));
        }
 else         if (!compressed && type.equals(ResultDocument.Type.TEXT)) {
          document=ByteString.copyFrom(((String)result.get(DOC)).getBytes(UTF_8_CHARSET));
        }
 else {
          byte[] bytes=(byte[])result.get(DOC);
          if (compressed) {
            bytes=CommonCompression.uncompressZlib(bytes);
          }
          if (type.equals(ResultDocument.Type.BSON)) {
            BSONObject object=BSON.decode(bytes);
            object.put(MongoConstants.StandardFields._ID,uniqueId);
            document=ByteString.copyFrom(BSON.encode(object));
          }
 else {
            document=ByteString.copyFrom(bytes);
          }
        }
        dBuilder.setDocument(document);
      }
      return dBuilder.build();
    }
  }
  return null;
}",0.9957264957264956
33940,"@Override public IndexCreateRequest getRequest(){
  IndexCreateRequest.Builder indexCreateRequestBuilder=IndexCreateRequest.newBuilder();
  if (indexName != null) {
    indexCreateRequestBuilder.setIndexName(indexName);
  }
  if (numberOfSegments != null) {
    indexCreateRequestBuilder.setNumberOfSegments(numberOfSegments);
  }
  if (uniqueIdField != null) {
    indexCreateRequestBuilder.setUniqueIdField(uniqueIdField);
  }
  if (indexSettings != null) {
    indexCreateRequestBuilder.setIndexSettings(indexSettings);
  }
  return indexCreateRequestBuilder.build();
}","@Override public IndexCreateRequest getRequest(){
  IndexCreateRequest.Builder indexCreateRequestBuilder=IndexCreateRequest.newBuilder();
  if (indexName != null) {
    indexCreateRequestBuilder.setIndexName(indexName);
  }
  if (numberOfSegments != null) {
    indexCreateRequestBuilder.setNumberOfSegments(numberOfSegments);
  }
  if (uniqueIdField != null) {
    indexCreateRequestBuilder.setUniqueIdField(uniqueIdField);
  }
  if (indexSettings != null) {
    indexCreateRequestBuilder.setIndexSettings(indexSettings);
  }
  if (faceted != null) {
    indexCreateRequestBuilder.setFaceted(faceted);
  }
  return indexCreateRequestBuilder.build();
}",0.934640522875817
33941,"@Override public FetchRequest getRequest(){
  FetchRequest.Builder fetchRequestBuilder=FetchRequest.newBuilder();
  if (uniqueId != null) {
    fetchRequestBuilder.setUniqueId(uniqueId);
  }
  if (fileName != null) {
    fetchRequestBuilder.setFileName(fileName);
  }
  if (resultFetchType != null) {
    fetchRequestBuilder.setResultFetchType(FetchType.NONE);
  }
  if (associatedFetchType != null) {
    fetchRequestBuilder.setAssociatedFetchType(FetchType.FULL);
  }
  return fetchRequestBuilder.build();
}","@Override public FetchRequest getRequest(){
  FetchRequest.Builder fetchRequestBuilder=FetchRequest.newBuilder();
  if (uniqueId != null) {
    fetchRequestBuilder.setUniqueId(uniqueId);
  }
  if (fileName != null) {
    fetchRequestBuilder.setFileName(fileName);
  }
  if (resultFetchType != null) {
    fetchRequestBuilder.setResultFetchType(resultFetchType);
  }
  if (associatedFetchType != null) {
    fetchRequestBuilder.setAssociatedFetchType(associatedFetchType);
  }
  return fetchRequestBuilder.build();
}",0.974609375
33942,"@Override public QueryRequest getRequest(){
  QueryRequest.Builder requestBuilder=QueryRequest.newBuilder();
  requestBuilder.setAmount(amount);
  requestBuilder.setQuery(query);
  if (realTime != null) {
    requestBuilder.setRealTime(realTime);
  }
  if (lastResult != null) {
    requestBuilder.setLastResult(lastResult.getLastResult());
  }
  for (  String index : indexes) {
    requestBuilder.addIndex(index);
  }
  FacetRequest.Builder facetRequestBuilder=FacetRequest.newBuilder();
  facetRequestBuilder.addAllDrillDown(drillDowns);
  facetRequestBuilder.addAllCountRequest(countRequests);
  requestBuilder.setFacetRequest(facetRequestBuilder.build());
  SortRequest.Builder sortRequestBuilder=SortRequest.newBuilder();
  sortRequestBuilder.addAllFieldSort(fieldSorts);
  requestBuilder.setSortRequest(sortRequestBuilder.build());
  return requestBuilder.build();
}","@Override public QueryRequest getRequest(){
  QueryRequest.Builder requestBuilder=QueryRequest.newBuilder();
  requestBuilder.setAmount(amount);
  requestBuilder.setQuery(query);
  if (realTime != null) {
    requestBuilder.setRealTime(realTime);
  }
  if (lastResult != null) {
    requestBuilder.setLastResult(lastResult.getLastResult());
  }
  for (  String index : indexes) {
    requestBuilder.addIndex(index);
  }
  if (!drillDowns.isEmpty() || !countRequests.isEmpty()) {
    FacetRequest.Builder facetRequestBuilder=FacetRequest.newBuilder();
    facetRequestBuilder.addAllDrillDown(drillDowns);
    facetRequestBuilder.addAllCountRequest(countRequests);
    requestBuilder.setFacetRequest(facetRequestBuilder.build());
  }
  SortRequest.Builder sortRequestBuilder=SortRequest.newBuilder();
  sortRequestBuilder.addAllFieldSort(fieldSorts);
  requestBuilder.setSortRequest(sortRequestBuilder.build());
  return requestBuilder.build();
}",0.960924600990644
33943,"@Test(groups={""String_Node_Str""}) public void createIndexTest() throws Exception {
  IndexSettings.Builder indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.NUMERIC_INT));
  indexSettingsBuilder.setSegmentTolerance(0.05);
  lumongoWorkPool.execute(new CreateIndex(MY_TEST_INDEX,16,""String_Node_Str"",indexSettingsBuilder.build()));
  indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.NUMERIC_INT));
  indexSettingsBuilder.setSegmentTolerance(0.05);
  lumongoWorkPool.execute(new CreateIndex(FACET_TEST_INDEX,16,""String_Node_Str"",indexSettingsBuilder.build()));
}","@Test(groups={""String_Node_Str""}) public void createIndexTest() throws Exception {
  IndexSettings.Builder indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.NUMERIC_INT));
  indexSettingsBuilder.setSegmentTolerance(0.05);
  lumongoWorkPool.execute(new CreateIndex(MY_TEST_INDEX,16,""String_Node_Str"",indexSettingsBuilder.build()));
  indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.NUMERIC_INT));
  indexSettingsBuilder.setSegmentTolerance(0.05);
  lumongoWorkPool.execute(new CreateIndex(FACET_TEST_INDEX,16,""String_Node_Str"",indexSettingsBuilder.build()).setFaceted(true));
}",0.9953991880920162
33944,"@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void associatedTest() throws Exception {
  String uniqueId=""String_Node_Str"";
{
{
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      DBObject dbObject=new BasicDBObject();
      dbObject.put(""String_Node_Str"",""String_Node_Str"");
      dbObject.put(""String_Node_Str"",""String_Node_Str"");
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(true);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.setResultDocument(dbObject);
      s.addAssociatedDocument(ad);
      lumongoWorkPool.execute(s);
    }
{
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(false);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.addAssociatedDocument(ad);
      lumongoWorkPool.execute(s);
    }
{
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(true);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.addAssociatedDocument(ad);
    }
  }
{
{
      FetchResult response=lumongoWorkPool.execute(new FetchDocumentAndAssociated(uniqueId,true));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      DBObject dbObject=BsonHelper.dbObjectFromResultDocument(rd);
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(response.getAssociatedDocumentCount(),3,""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(0).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(1).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(2).hasDocument(),""String_Node_Str"");
    }
{
      FetchResult response=lumongoWorkPool.execute(new FetchDocumentAndAssociated(uniqueId));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      DBObject dbObject=BsonHelper.dbObjectFromResultDocument(rd);
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(response.getAssociatedDocumentCount(),3,""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(0).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(1).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(2).hasDocument(),""String_Node_Str"");
    }
  }
}","@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void associatedTest() throws Exception {
  String uniqueId=""String_Node_Str"";
{
{
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      LMDoc indexedDoc=indexedDocBuilder.build();
      DBObject dbObject=new BasicDBObject();
      dbObject.put(""String_Node_Str"",""String_Node_Str"");
      dbObject.put(""String_Node_Str"",""String_Node_Str"");
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(true);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.addIndexedDocument(indexedDoc);
      s.setResultDocument(dbObject);
      s.addAssociatedDocument(ad);
      lumongoWorkPool.execute(s);
    }
{
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(false);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.addAssociatedDocument(ad);
      lumongoWorkPool.execute(s);
    }
{
      AssociatedDocument.Builder adBuilder=AssociatedDocument.newBuilder();
      adBuilder.setCompressed(true);
      adBuilder.setDocument(ByteString.copyFromUtf8(""String_Node_Str""));
      adBuilder.addMetadata(Metadata.newBuilder().setKey(""String_Node_Str"").setValue(""String_Node_Str""));
      adBuilder.setFilename(""String_Node_Str"");
      adBuilder.setDocumentUniqueId(uniqueId);
      AssociatedDocument ad=adBuilder.build();
      Store s=new Store(uniqueId);
      s.addAssociatedDocument(ad);
      lumongoWorkPool.execute(s);
    }
  }
{
{
      FetchResult response=lumongoWorkPool.execute(new FetchDocumentAndAssociated(uniqueId,true));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      DBObject dbObject=BsonHelper.dbObjectFromResultDocument(rd);
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(response.getAssociatedDocumentCount(),3,""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(0).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(1).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(!response.getAssociatedDocuments().get(2).hasDocument(),""String_Node_Str"");
    }
{
      FetchResult response=lumongoWorkPool.execute(new FetchDocumentAndAssociated(uniqueId));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      DBObject dbObject=BsonHelper.dbObjectFromResultDocument(rd);
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(dbObject.get(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"");
      Assert.assertEquals(response.getAssociatedDocumentCount(),3,""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(0).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(1).hasDocument(),""String_Node_Str"");
      Assert.assertTrue(response.getAssociatedDocuments().get(2).hasDocument(),""String_Node_Str"");
    }
  }
}",0.9864451246174027
33945,"@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void bulkTest() throws Exception {
  final int DOCUMENTS_LOADED=5;
  final String uniqueIdPrefix=""String_Node_Str"";
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      LMDoc indexedDoc=indexedDocBuilder.build();
      boolean compressed=(i % 2 == 0);
      Store s=new Store(uniqueId).setResultDocument(""String_Node_Str"",compressed).addIndexedDocument(indexedDoc);
      lumongoWorkPool.execute(s);
    }
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addIntValue(i).build());
      LMDoc indexedDoc=indexedDocBuilder.build();
      boolean compressed=(i % 2 == 0);
      Store s=new Store(uniqueId).setResultDocument(""String_Node_Str"",compressed).addIndexedDocument(indexedDoc);
      lumongoWorkPool.execute(s);
    }
  }
{
    QueryResult qr=null;
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),1,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),3,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),1,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",300));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",100));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",20));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",20));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),0,""String_Node_Str"");
  }
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      FetchResult response=lumongoWorkPool.execute(new FetchDocument(uniqueId));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      String recordText=response.getDocumentAsUtf8();
      Assert.assertTrue(recordText.equals(""String_Node_Str"" + i + ""String_Node_Str""),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
    }
  }
}","@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void bulkTest() throws Exception {
  final int DOCUMENTS_LOADED=5;
  final String uniqueIdPrefix=""String_Node_Str"";
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      LMDoc indexedDoc=indexedDocBuilder.build();
      boolean compressed=(i % 2 == 0);
      Store s=new Store(uniqueId).setResultDocument(""String_Node_Str"",compressed);
      s.addIndexedDocument(indexedDoc);
      lumongoWorkPool.execute(s);
    }
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(MY_TEST_INDEX);
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addIntValue(i).build());
      LMDoc indexedDoc=indexedDocBuilder.build();
      boolean compressed=(i % 2 == 0);
      Store s=new Store(uniqueId).setResultDocument(""String_Node_Str"" + i + ""String_Node_Str"",compressed);
      s.addIndexedDocument(indexedDoc);
      lumongoWorkPool.execute(s);
    }
  }
{
    QueryResult qr=null;
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),1,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),3,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),1,""String_Node_Str"");
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",300));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",100));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",20));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",20));
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoWorkPool.execute(new Query(MY_TEST_INDEX,""String_Node_Str"",10));
    Assert.assertEquals(qr.getTotalHits(),0,""String_Node_Str"");
  }
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      FetchResult response=lumongoWorkPool.execute(new FetchDocument(uniqueId));
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      String recordText=response.getDocumentAsUtf8();
      System.out.println(""String_Node_Str"" + recordText + ""String_Node_Str"");
      Assert.assertTrue(recordText.equals(""String_Node_Str"" + i + ""String_Node_Str""),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
    }
  }
}",0.9833194328607172
33946,"public <R>R execute(Command<R> command){
  for (int i=0; i <= retries; i++) {
    LumongoConnection lumongoConnection=null;
    LMMember randomMember=null;
    try {
      int randomMemberIndex=(int)(Math.random() * members.size());
      randomMember=members.get(randomMemberIndex);
      lumongoConnection=connectionPool.borrowObject(randomMember);
      return command.execute(lumongoConnection);
    }
 catch (    Exception e) {
      if (randomMember != null && lumongoConnection != null) {
        try {
          connectionPool.invalidateObject(randomMember,lumongoConnection);
        }
 catch (        Exception e1) {
        }
      }
    }
  }
  return null;
}","public <R>R execute(Command<R> command){
  for (int i=0; i <= retries; i++) {
    LumongoConnection lumongoConnection=null;
    LMMember randomMember=null;
    try {
      int randomMemberIndex=(int)(Math.random() * members.size());
      randomMember=members.get(randomMemberIndex);
      lumongoConnection=connectionPool.borrowObject(randomMember);
      R r=command.execute(lumongoConnection);
      connectionPool.returnObject(randomMember,lumongoConnection);
      return r;
    }
 catch (    Exception e) {
      if (randomMember != null && lumongoConnection != null) {
        try {
          connectionPool.invalidateObject(randomMember,lumongoConnection);
        }
 catch (        Exception e1) {
        }
      }
    }
  }
  return null;
}",0.9338959212376934
33947,"public void unloadSegment(int segmentNumber) throws CorruptIndexException, IOException {
  indexLock.writeLock().lock();
  try {
    ILock hzLock=hazelLockMap.get(segmentNumber);
    try {
      if (segmentMap.containsKey(segmentNumber)) {
        Segment s=segmentMap.remove(segmentNumber);
        if (s != null) {
          log.info(""String_Node_Str"" + segmentNumber + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
          s.close();
          log.info(""String_Node_Str"" + segmentNumber + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
          log.info(""String_Node_Str"" + (new TreeSet<Integer>(segmentMap.keySet())) + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
        }
      }
    }
  finally {
      try {
        hzLock.unlock();
        hzLock.forceUnlock();
        log.info(""String_Node_Str"" + indexName + ""String_Node_Str""+ segmentNumber+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + segmentNumber + ""String_Node_Str"");
      }
    }
  }
  finally {
    indexLock.writeLock().unlock();
  }
}","public void unloadSegment(int segmentNumber) throws CorruptIndexException, IOException {
  indexLock.writeLock().lock();
  try {
    ILock hzLock=hazelLockMap.get(segmentNumber);
    try {
      if (segmentMap.containsKey(segmentNumber)) {
        Segment s=segmentMap.remove(segmentNumber);
        if (s != null) {
          log.info(""String_Node_Str"" + segmentNumber + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
          s.close();
          log.info(""String_Node_Str"" + segmentNumber + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
          log.info(""String_Node_Str"" + (new TreeSet<Integer>(segmentMap.keySet())) + ""String_Node_Str""+ indexName+ ""String_Node_Str"");
        }
      }
    }
  finally {
      try {
        hzLock.forceUnlock();
        log.info(""String_Node_Str"" + indexName + ""String_Node_Str""+ segmentNumber+ ""String_Node_Str"");
      }
 catch (      Exception e) {
        log.error(""String_Node_Str"" + segmentNumber + ""String_Node_Str"",e);
      }
    }
  }
  finally {
    indexLock.writeLock().unlock();
  }
}",0.9872581406323736
33948,"@Override public void onRangeChange(RangeChangeEvent event){
  Range range=event.getNewRange();
  final int start=range.getStart();
  final int length=range.getLength();
  lastRequest.setAmount(start + length);
  searchService.search(lastRequest,new AsyncCallback<SearchResults>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    SearchResults result){
      docCellTable.setRowCount((int)result.getTotalHits());
      docCellTable.setRowData(start,result.getDocuments().subList(start,start + length));
    }
  }
);
}","@Override public void onRangeChange(RangeChangeEvent event){
  Range range=event.getNewRange();
  final int start=range.getStart();
  final int length=range.getLength();
  lastRequest.setAmount(start + length);
  searchService.search(lastRequest,new AsyncCallback<SearchResults>(){
    @Override public void onFailure(    Throwable caught){
    }
    @Override public void onSuccess(    SearchResults result){
      docCellTable.setRowCount((int)result.getTotalHits());
      if (result.getDocuments().isEmpty()) {
        List<Document> emptyDocs=Collections.emptyList();
        docCellTable.setRowData(start,emptyDocs);
      }
 else {
        docCellTable.setRowData(start,result.getDocuments().subList(start,start + length));
      }
    }
  }
);
}",0.8455162019593067
33949,"protected Widget createMain(){
  VerticalPanel main=new VerticalPanel();
  docCellTable=new CellTable<Document>();
  TextColumn<Document> uniqueIdColumn=new TextColumn<Document>(){
    @Override public String getValue(    Document document){
      return document.getUniqueId();
    }
  }
;
  TextColumn<Document> scoreColumn=new TextColumn<Document>(){
    @Override public String getValue(    Document document){
      return (document.getScore() + ""String_Node_Str"");
    }
  }
;
  SimplePager pager=new SimplePager();
  pager.setDisplay(docCellTable);
  docCellTable.addColumn(uniqueIdColumn);
  docCellTable.addColumn(scoreColumn);
  docCellTable.addRangeChangeHandler(new RangeChangeEvent.Handler(){
    @Override public void onRangeChange(    RangeChangeEvent event){
      Range range=event.getNewRange();
      final int start=range.getStart();
      final int length=range.getLength();
      lastRequest.setAmount(start + length);
      searchService.search(lastRequest,new AsyncCallback<SearchResults>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        SearchResults result){
          docCellTable.setRowCount((int)result.getTotalHits());
          docCellTable.setRowData(start,result.getDocuments().subList(start,start + length));
        }
      }
);
    }
  }
);
  main.add(pager);
  main.add(docCellTable);
  return main;
}","protected Widget createMain(){
  VerticalPanel main=new VerticalPanel();
  docCellTable=new CellTable<Document>();
  TextColumn<Document> uniqueIdColumn=new TextColumn<Document>(){
    @Override public String getValue(    Document document){
      return document.getUniqueId();
    }
  }
;
  TextColumn<Document> scoreColumn=new TextColumn<Document>(){
    @Override public String getValue(    Document document){
      return (document.getScore() + ""String_Node_Str"");
    }
  }
;
  SimplePager pager=new SimplePager();
  pager.setDisplay(docCellTable);
  docCellTable.addColumn(uniqueIdColumn);
  docCellTable.addColumn(scoreColumn);
  docCellTable.addRangeChangeHandler(new RangeChangeEvent.Handler(){
    @Override public void onRangeChange(    RangeChangeEvent event){
      Range range=event.getNewRange();
      final int start=range.getStart();
      final int length=range.getLength();
      lastRequest.setAmount(start + length);
      searchService.search(lastRequest,new AsyncCallback<SearchResults>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        SearchResults result){
          docCellTable.setRowCount((int)result.getTotalHits());
          if (result.getDocuments().isEmpty()) {
            List<Document> emptyDocs=Collections.emptyList();
            docCellTable.setRowData(start,emptyDocs);
          }
 else {
            docCellTable.setRowData(start,result.getDocuments().subList(start,start + length));
          }
        }
      }
);
    }
  }
);
  main.add(pager);
  main.add(docCellTable);
  return main;
}",0.9258160237388724
33950,"@Override public void flush() throws IOException {
  dirtyBlocks.put(currentWriteBlock.getBlockNumber(),currentWriteBlock);
  Set<Integer> dirtyBlockKeys=new HashSet<Integer>(dirtyBlocks.asMap().keySet());
  dirtyBlocks.invalidateAll(dirtyBlockKeys);
  mongoDirectory.updateFileMetadata(this);
}","@Override public void flush() throws IOException {
  if (currentWriteBlock != null) {
    dirtyBlocks.put(currentWriteBlock.getBlockNumber(),currentWriteBlock);
  }
  Set<Integer> dirtyBlockKeys=new HashSet<Integer>(dirtyBlocks.asMap().keySet());
  dirtyBlocks.invalidateAll(dirtyBlockKeys);
  mongoDirectory.updateFileMetadata(this);
}",0.9350237717908082
33951,"@Override public int compareTo(FacetCountResult o){
  return Long.compare(o.count,this.count);
}","@Override public int compareTo(FacetCountResult o){
  int compareCount=Long.compare(this.count,o.count);
  if (compareCount == 0) {
    return this.facet.compareTo(o.facet);
  }
  return compareCount;
}",0.5637583892617449
33952,"protected GetTermsResponse getTerms(String indexName,String fieldName,String startTerm,int amount,int retries) throws Exception {
  GetTermsRequest.Builder requestBuilder=GetTermsRequest.newBuilder();
  requestBuilder.setIndexName(indexName);
  requestBuilder.setFieldName(fieldName);
  requestBuilder.setAmount(amount);
  if (startTerm != null) {
    requestBuilder.setStartingTerm(startTerm);
  }
  GetTermsRequest request=requestBuilder.build();
  RpcController controller=null;
  try {
    if (service == null) {
      service=getInternalBlockingConnection();
    }
    controller=rpcClient.newRpcController();
    return service.getTerms(controller,request);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + request + ""String_Node_Str""+ members.get(myServerIndex).getServerAddress()+ ""String_Node_Str""+ (controller != null ? controller.errorText() : e.toString()));
    cycleServers();
    if (retries > 0) {
      return getTerms(indexName,fieldName,startTerm,retries - 1);
    }
 else {
      throw new Exception(e.getMessage());
    }
  }
}","protected GetTermsResponse getTerms(String indexName,String fieldName,String startTerm,int amount,Integer minDocFreq,int retries) throws Exception {
  GetTermsRequest.Builder requestBuilder=GetTermsRequest.newBuilder();
  requestBuilder.setIndexName(indexName);
  requestBuilder.setFieldName(fieldName);
  requestBuilder.setAmount(amount);
  if (minDocFreq != null) {
    requestBuilder.setMinDocFreq(minDocFreq);
  }
  if (startTerm != null) {
    requestBuilder.setStartingTerm(startTerm);
  }
  GetTermsRequest request=requestBuilder.build();
  RpcController controller=null;
  try {
    if (service == null) {
      service=getInternalBlockingConnection();
    }
    controller=rpcClient.newRpcController();
    return service.getTerms(controller,request);
  }
 catch (  Exception e) {
    System.err.println(""String_Node_Str"" + request + ""String_Node_Str""+ members.get(myServerIndex).getServerAddress()+ ""String_Node_Str""+ (controller != null ? controller.errorText() : e.toString()));
    cycleServers();
    if (retries > 0) {
      return getTerms(indexName,fieldName,startTerm,amount,minDocFreq,retries - 1);
    }
 else {
      throw new Exception(e.getMessage());
    }
  }
}",0.9490474080638016
33953,"public void index(String uniqueId,LMDoc lmDoc) throws CorruptIndexException, IOException {
  Document d=new Document();
  for (  LMField indexedField : lmDoc.getIndexedFieldList()) {
    String fieldName=indexedField.getFieldName();
    List<String> fieldValueList=indexedField.getFieldValueList();
    for (    String fieldValue : fieldValueList) {
      d.add(new Field(fieldName,fieldValue,Store.NO,org.apache.lucene.document.Field.Index.ANALYZED));
    }
  }
  d.removeFields(indexConfig.getUniqueIdField());
  d.add(new Field(indexConfig.getUniqueIdField(),uniqueId,Store.YES,org.apache.lucene.document.Field.Index.ANALYZED));
  Term term=new Term(indexConfig.getUniqueIdField(),uniqueId);
  indexWriter.updateDocument(term,d);
  possibleCommit();
}","public void index(String uniqueId,LMDoc lmDoc) throws CorruptIndexException, IOException {
  Document d=new Document();
  for (  LMField indexedField : lmDoc.getIndexedFieldList()) {
    String fieldName=indexedField.getFieldName();
    List<String> fieldValueList=indexedField.getFieldValueList();
    for (    String fieldValue : fieldValueList) {
      d.add(new Field(fieldName,fieldValue,Store.NO,org.apache.lucene.document.Field.Index.ANALYZED));
    }
  }
  d.removeFields(indexConfig.getUniqueIdField());
  d.add(new Field(indexConfig.getUniqueIdField(),uniqueId,Store.NO,org.apache.lucene.document.Field.Index.ANALYZED));
  d.add(new Field(indexConfig.getUniqueIdField(),uniqueId,Store.YES,org.apache.lucene.document.Field.Index.NOT_ANALYZED_NO_NORMS));
  Term term=new Term(indexConfig.getUniqueIdField(),uniqueId);
  indexWriter.updateDocument(term,d);
  possibleCommit();
}",0.9164124466137888
33954,"public QueryResponse getQueryResponse(){
  long totalHits=0;
  long returnedHits=0;
  for (  SegmentQueryResult sr : segmentQueryResults) {
    totalHits+=sr.getTotalHits();
    returnedHits+=sr.getReturnedHits();
  }
  QueryResponse.Builder builder=QueryResponse.newBuilder();
  builder.setTotalHits(totalHits);
  resultsSize=Math.min(amount,(int)returnedHits);
  results=new ArrayList<ScoredResult>(resultsSize);
  Map<String,ScoredResult[]> lastIndexResultMap=new HashMap<String,ScoredResult[]>();
  for (  String indexName : indexToSegmentResponseMap.keySet()) {
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    lastIndexResultMap.put(indexName,new ScoredResult[numberOfSegments]);
  }
  for (  LastIndexResult lir : lastResult.getLastIndexResultList()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(lir.getIndexName());
    for (    ScoredResult sr : lir.getLastForSegmentList()) {
      lastForSegmentArr[sr.getSegment()]=sr;
    }
  }
  while (results.size() < resultsSize && !isShort) {
    float maxScore=Float.MIN_VALUE;
    SegmentQueryResult maxResult=null;
    boolean anyEmpty=false;
    for (    SegmentQueryResult sr : segmentQueryResults) {
      if (!sr.hasNext() && sr.moreAvailable()) {
        anyEmpty=true;
        break;
      }
    }
    if (!anyEmpty) {
      for (      SegmentQueryResult sr : segmentQueryResults) {
        if (sr.hasNext()) {
          ScoredResult sd=sr.previewNext();
          if (sd != null) {
            if (sd.getScore() > maxScore) {
              maxScore=sd.getScore();
              maxResult=sr;
            }
 else             if (sr.getIndex() < maxResult.getIndex()) {
              if (maxResult.getIndexName().equals(sd.getIndexName())) {
                double segmentTolerance=usedIndexMap.get(maxResult.getIndexName()).getSegmentTolerance();
                double diff=(Math.abs(sd.getScore() - maxScore));
                if (diff < segmentTolerance) {
                  maxScore=sd.getScore();
                  maxResult=sr;
                }
              }
            }
          }
        }
      }
    }
    if (maxResult != null) {
      ScoredResult max=maxResult.next();
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(max.getIndexName());
      lastForSegmentArr[max.getSegment()]=max;
      results.add(max);
    }
 else {
      isShort=true;
    }
  }
  builder.addAllResults(results);
  LastResult.Builder newLastResultBuilder=LastResult.newBuilder();
  for (  String indexName : lastIndexResultMap.keySet()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    List<ScoredResult> indexList=new ArrayList<ScoredResult>();
    for (int i=0; i < numberOfSegments; i++) {
      if (lastForSegmentArr[i] != null) {
        indexList.add(lastForSegmentArr[i]);
      }
    }
    if (!indexList.isEmpty()) {
      LastIndexResult lastIndexResult=LastIndexResult.newBuilder().addAllLastForSegment(indexList).setIndexName(indexName).build();
      newLastResultBuilder.addLastIndexResult(lastIndexResult);
    }
  }
  builder.setLastResult(newLastResultBuilder.build());
  return builder.build();
}","public QueryResponse getQueryResponse(){
  long totalHits=0;
  long returnedHits=0;
  for (  SegmentQueryResult sr : segmentQueryResults) {
    totalHits+=sr.getTotalHits();
    returnedHits+=sr.getReturnedHits();
  }
  QueryResponse.Builder builder=QueryResponse.newBuilder();
  builder.setTotalHits(totalHits);
  resultsSize=Math.min(amount,(int)returnedHits);
  results=new ArrayList<ScoredResult>(resultsSize);
  Map<String,ScoredResult[]> lastIndexResultMap=new HashMap<String,ScoredResult[]>();
  for (  String indexName : indexToSegmentResponseMap.keySet()) {
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    lastIndexResultMap.put(indexName,new ScoredResult[numberOfSegments]);
  }
  for (  LastIndexResult lir : lastResult.getLastIndexResultList()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(lir.getIndexName());
    for (    ScoredResult sr : lir.getLastForSegmentList()) {
      lastForSegmentArr[sr.getSegment()]=sr;
    }
  }
  while (results.size() < resultsSize && !isShort) {
    float maxScore=Float.MIN_VALUE;
    SegmentQueryResult maxResult=null;
    boolean anyEmpty=false;
    for (    SegmentQueryResult sr : segmentQueryResults) {
      if (!sr.hasNext() && sr.moreAvailable()) {
        anyEmpty=true;
        break;
      }
    }
    if (!anyEmpty) {
      for (      SegmentQueryResult sr : segmentQueryResults) {
        if (sr.hasNext()) {
          ScoredResult sd=sr.previewNext();
          if (sd != null) {
            boolean notNearEnd=((sr.getIndex() + 2) < sr.getReturnedHits());
            if (maxResult == null || ((sd.getScore() > maxScore) && notNearEnd)) {
              maxScore=sd.getScore();
              maxResult=sr;
            }
 else             if (sr.getIndex() < maxResult.getIndex()) {
              if (maxResult.getIndexName().equals(sd.getIndexName())) {
                double segmentTolerance=usedIndexMap.get(maxResult.getIndexName()).getSegmentTolerance();
                double diff=(Math.abs(sd.getScore() - maxScore));
                if (diff < segmentTolerance) {
                  maxScore=sd.getScore();
                  maxResult=sr;
                }
              }
            }
          }
        }
      }
    }
    if (maxResult != null) {
      ScoredResult max=maxResult.next();
      ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(max.getIndexName());
      lastForSegmentArr[max.getSegment()]=max;
      results.add(max);
    }
 else {
      isShort=true;
    }
  }
  builder.addAllResults(results);
  LastResult.Builder newLastResultBuilder=LastResult.newBuilder();
  for (  String indexName : lastIndexResultMap.keySet()) {
    ScoredResult[] lastForSegmentArr=lastIndexResultMap.get(indexName);
    int numberOfSegments=usedIndexMap.get(indexName).getNumberOfSegments();
    List<ScoredResult> indexList=new ArrayList<ScoredResult>();
    for (int i=0; i < numberOfSegments; i++) {
      if (lastForSegmentArr[i] != null) {
        indexList.add(lastForSegmentArr[i]);
      }
    }
    if (!indexList.isEmpty()) {
      LastIndexResult lastIndexResult=LastIndexResult.newBuilder().addAllLastForSegment(indexList).setIndexName(indexName).build();
      newLastResultBuilder.addLastIndexResult(lastIndexResult);
    }
  }
  builder.setLastResult(newLastResultBuilder.build());
  return builder.build();
}",0.982381530984204
33955,"@Test(groups={""String_Node_Str""}) public void createIndexTest() throws Exception {
  IndexSettings.Builder indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.setSegmentTolerance(0.1);
  lumongoClient.createIndex(""String_Node_Str"",16,""String_Node_Str"",indexSettingsBuilder.build());
}","@Test(groups={""String_Node_Str""}) public void createIndexTest() throws Exception {
  IndexSettings.Builder indexSettingsBuilder=IndexSettings.newBuilder();
  indexSettingsBuilder.setDefaultSearchField(""String_Node_Str"");
  indexSettingsBuilder.setDefaultAnalyzer(LMAnalyzer.KEYWORD);
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.STANDARD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.addFieldConfig(FieldConfig.newBuilder().setFieldName(""String_Node_Str"").setAnalyzer(LMAnalyzer.LC_KEYWORD));
  indexSettingsBuilder.setSegmentTolerance(0.05);
  lumongoClient.createIndex(""String_Node_Str"",16,""String_Node_Str"",indexSettingsBuilder.build());
}",0.903353057199211
33956,"@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void bulkTest() throws Exception {
  final int DOCUMENTS_LOADED=100;
  final String uniqueIdPrefix=""String_Node_Str"";
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(""String_Node_Str"");
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      ByteString byteString=ByteString.copyFromUtf8(""String_Node_Str"" + i + ""String_Node_Str"");
      boolean compressed=(i % 2 == 0);
      ResultDocument rd=ResultDocument.newBuilder().setType(ResultDocument.Type.TEXT).setDocument(byteString).setUniqueId(uniqueId).setCompressed(compressed).build();
      lumongoClient.storeDocument(rd,indexedDocBuilder.build());
    }
  }
{
    QueryResponse qr=null;
    qr=lumongoClient.query(""String_Node_Str"",300,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",100,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",20,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",20,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",10,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),0,""String_Node_Str"");
  }
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      FetchResponse response=lumongoClient.fetchDocument(uniqueId);
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      String recordText=rd.getDocument().toStringUtf8();
      Assert.assertTrue(recordText.equals(""String_Node_Str"" + i + ""String_Node_Str""),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
    }
  }
}","@Test(groups={""String_Node_Str""},dependsOnGroups={""String_Node_Str""}) public void bulkTest() throws Exception {
  final int DOCUMENTS_LOADED=100;
  final String uniqueIdPrefix=""String_Node_Str"";
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(""String_Node_Str"");
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      ByteString byteString=ByteString.copyFromUtf8(""String_Node_Str"");
      boolean compressed=(i % 2 == 0);
      ResultDocument rd=ResultDocument.newBuilder().setType(ResultDocument.Type.TEXT).setDocument(byteString).setUniqueId(uniqueId).setCompressed(compressed).build();
      lumongoClient.storeDocument(rd,indexedDocBuilder.build());
    }
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      LMDoc.Builder indexedDocBuilder=LMDoc.newBuilder();
      indexedDocBuilder.setIndexName(""String_Node_Str"");
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      indexedDocBuilder.addIndexedField(LMField.newBuilder().setFieldName(""String_Node_Str"").addFieldValue(""String_Node_Str"").build());
      ByteString byteString=ByteString.copyFromUtf8(""String_Node_Str"" + i + ""String_Node_Str"");
      boolean compressed=(i % 2 == 0);
      ResultDocument rd=ResultDocument.newBuilder().setType(ResultDocument.Type.TEXT).setDocument(byteString).setUniqueId(uniqueId).setCompressed(compressed).build();
      lumongoClient.storeDocument(rd,indexedDocBuilder.build());
    }
  }
{
    QueryResponse qr=null;
    qr=lumongoClient.query(""String_Node_Str"",300,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",100,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",20,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",20,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),DOCUMENTS_LOADED,""String_Node_Str"" + DOCUMENTS_LOADED);
    qr=lumongoClient.query(""String_Node_Str"",10,""String_Node_Str"");
    Assert.assertEquals(qr.getTotalHits(),0,""String_Node_Str"");
  }
{
    for (int i=0; i < DOCUMENTS_LOADED; i++) {
      String uniqueId=uniqueIdPrefix + i;
      FetchResponse response=lumongoClient.fetchDocument(uniqueId);
      Assert.assertTrue(response.hasResultDocument(),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
      ResultDocument rd=response.getResultDocument();
      String recordText=rd.getDocument().toStringUtf8();
      Assert.assertTrue(recordText.equals(""String_Node_Str"" + i + ""String_Node_Str""),""String_Node_Str"" + uniqueId + ""String_Node_Str"");
    }
  }
}",0.8534375555160775
33957,"private static void addDoc(IndexWriter w,String value) throws IOException {
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",value,Field.Store.YES,Field.Index.ANALYZED));
  w.addDocument(doc);
}","private static void addDoc(IndexWriter w,String title,String uid) throws IOException {
  Document doc=new Document();
  doc.add(new Field(""String_Node_Str"",title,Field.Store.YES,Field.Index.ANALYZED));
  doc.add(new Field(""String_Node_Str"",uid,Field.Store.YES,Field.Index.ANALYZED));
  doc.add(new Field(""String_Node_Str"",uid,Field.Store.YES,Field.Index.NOT_ANALYZED_NO_NORMS));
  Term uidTerm=new Term(""String_Node_Str"",uid);
  w.updateDocument(uidTerm,doc);
}",0.5659259259259259
33958,"@Test(groups=""String_Node_Str"",dependsOnGroups=""String_Node_Str"") public void queryDocs() throws CorruptIndexException, ParseException, IOException {
  IndexReader indexReader=IndexReader.open(directory);
  StandardAnalyzer analyzer=new StandardAnalyzer(LuceneConstants.VERSION);
  QueryParser qp=new QueryParser(LuceneConstants.VERSION,""String_Node_Str"",analyzer);
  int hits=0;
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,1,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,0,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,2,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,1,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,1,""String_Node_Str"");
}","@Test(groups=""String_Node_Str"",dependsOnGroups=""String_Node_Str"") public void queryDocs() throws CorruptIndexException, ParseException, IOException {
  IndexReader indexReader=IndexReader.open(directory);
  StandardAnalyzer analyzer=new StandardAnalyzer(LuceneConstants.VERSION);
  QueryParser qp=new QueryParser(LuceneConstants.VERSION,""String_Node_Str"",analyzer);
  int hits=0;
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,2,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,0,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,0,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,2,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,1,""String_Node_Str"");
  hits=runQuery(indexReader,qp,""String_Node_Str"",10);
  Assert.assertEquals(hits,1,""String_Node_Str"");
}",0.9424802110817944
33959,"@Test(groups=""String_Node_Str"") public void addDocs() throws CorruptIndexException, LockObtainFailedException, IOException {
  StandardAnalyzer analyzer=new StandardAnalyzer(LuceneConstants.VERSION);
  IndexWriterConfig config=new IndexWriterConfig(LuceneConstants.VERSION,analyzer);
  IndexWriter w=new IndexWriter(directory,config);
  addDoc(w,""String_Node_Str"");
  addDoc(w,""String_Node_Str"");
  addDoc(w,""String_Node_Str"");
  addDoc(w,""String_Node_Str"");
  addDoc(w,""String_Node_Str"");
  w.commit();
  w.close();
}","@Test(groups=""String_Node_Str"") public void addDocs() throws CorruptIndexException, LockObtainFailedException, IOException {
  StandardAnalyzer analyzer=new StandardAnalyzer(LuceneConstants.VERSION);
  IndexWriterConfig config=new IndexWriterConfig(LuceneConstants.VERSION,analyzer);
  IndexWriter w=new IndexWriter(directory,config);
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  addDoc(w,""String_Node_Str"",""String_Node_Str"");
  w.commit();
  w.close();
}",0.8817021276595745
33960,"@Override public void handleMessage(String messageType,JSONObject response){
  try {
    List<String> projectsNames=new ArrayList<String>();
    JSONArray projects=response.getJSONArray(""String_Node_Str"");
    for (int i=0; i < projects.length(); i++) {
      JSONObject project=projects.getJSONObject(i);
      String projectName=project.getString(""String_Node_Str"");
      projectsNames.add(projectName);
    }
    setElements((String[])projectsNames.toArray(new String[projectsNames.size()]));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  messagingConnector.removeMessageHandler(this);
}","@Override public void handleMessage(String messageType,JSONObject response){
  try {
    boolean newProjects=false;
    JSONArray projectsList=response.getJSONArray(""String_Node_Str"");
    for (int i=0; i < projectsList.length(); i++) {
      JSONObject project=projectsList.getJSONObject(i);
      String projectName=project.getString(""String_Node_Str"");
      newProjects|=projects.add(projectName);
    }
    if (newProjects) {
      Display.getDefault().asyncExec(new Runnable(){
        @Override public void run(){
          setListElements((String[])projects.toArray(new String[projects.size()]));
        }
      }
);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.6929012345679012
33961,"public SyncDownloadSelectionDialog(final Shell parent,final ILabelProvider renderer,final IMessagingConnector messagingConnector,final String username){
  super(parent,renderer);
  this.messagingConnector=messagingConnector;
  this.username=username;
  this.setMultipleSelection(true);
  this.setAllowDuplicates(false);
  this.setTitle(""String_Node_Str"");
}","public SyncDownloadSelectionDialog(final Shell parent,final ILabelProvider renderer,final IMessagingConnector messagingConnector,final String username){
  super(parent,renderer);
  this.messagingConnector=messagingConnector;
  this.username=username;
  this.setMultipleSelection(true);
  this.setAllowDuplicates(false);
  this.setTitle(""String_Node_Str"");
  this.projects=new ConcurrentSkipListSet<>();
}",0.938239159001314
33962,"@Override public int open(){
  try {
    int callbackID=this.hashCode();
    CallbackIDAwareMessageHandler responseHandler=new CallbackIDAwareMessageHandler(""String_Node_Str"",callbackID){
      @Override public void handleMessage(      String messageType,      JSONObject response){
        try {
          List<String> projectsNames=new ArrayList<String>();
          JSONArray projects=response.getJSONArray(""String_Node_Str"");
          for (int i=0; i < projects.length(); i++) {
            JSONObject project=projects.getJSONObject(i);
            String projectName=project.getString(""String_Node_Str"");
            projectsNames.add(projectName);
          }
          setElements((String[])projectsNames.toArray(new String[projectsNames.size()]));
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        messagingConnector.removeMessageHandler(this);
      }
    }
;
    this.messagingConnector.addMessageHandler(responseHandler);
    JSONObject message=new JSONObject();
    message.put(""String_Node_Str"",callbackID);
    message.put(""String_Node_Str"",username);
    this.messagingConnector.send(""String_Node_Str"",message);
  }
 catch (  JSONException e1) {
    e1.printStackTrace();
  }
  return super.open();
}","@Override public int open(){
  try {
    int callbackID=this.hashCode();
    projects.clear();
    responseHandler=new CallbackIDAwareMessageHandler(""String_Node_Str"",callbackID){
      @Override public void handleMessage(      String messageType,      JSONObject response){
        try {
          boolean newProjects=false;
          JSONArray projectsList=response.getJSONArray(""String_Node_Str"");
          for (int i=0; i < projectsList.length(); i++) {
            JSONObject project=projectsList.getJSONObject(i);
            String projectName=project.getString(""String_Node_Str"");
            newProjects|=projects.add(projectName);
          }
          if (newProjects) {
            Display.getDefault().asyncExec(new Runnable(){
              @Override public void run(){
                setListElements((String[])projects.toArray(new String[projects.size()]));
              }
            }
);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
;
    this.messagingConnector.addMessageHandler(responseHandler);
    JSONObject message=new JSONObject();
    message.put(""String_Node_Str"",callbackID);
    message.put(""String_Node_Str"",username);
    this.messagingConnector.send(""String_Node_Str"",message);
  }
 catch (  JSONException e1) {
    e1.printStackTrace();
  }
  return super.open();
}",0.2725190839694656
33963,"public void getProjectResponse(JSONObject response){
  try {
    final String responseProject=response.getString(""String_Node_Str"");
    final String responseUser=response.getString(""String_Node_Str"");
    final JSONArray files=response.getJSONArray(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        long timestamp=resource.getLong(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          if (!resourcePath.isEmpty()) {
            IFolder folder=project.getFolder(new Path(resourcePath));
            if (!folder.exists()) {
              folder.create(true,true,null);
            }
            folder.setLocalTimeStamp(timestamp);
          }
        }
 else         if (type.equals(""String_Node_Str"")) {
          requestedFileCount.incrementAndGet();
        }
      }
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          this.projectFiles.add(resourcePath);
          JSONObject message=new JSONObject();
          message.put(""String_Node_Str"",callbackID);
          message.put(""String_Node_Str"",this.username);
          message.put(""String_Node_Str"",responseProject);
          message.put(""String_Node_Str"",resourcePath);
          messagingConnector.send(""String_Node_Str"",message);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}","public void getProjectResponse(JSONObject response){
  try {
    final String responseProject=response.getString(""String_Node_Str"");
    final String responseUser=response.getString(""String_Node_Str"");
    final JSONArray files=response.getJSONArray(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      Set<String> newFiles=new HashSet<String>();
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        long timestamp=resource.getLong(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          if (!resourcePath.isEmpty()) {
            IFolder folder=project.getFolder(new Path(resourcePath));
            createFolder(folder);
            folder.setLocalTimeStamp(timestamp);
          }
        }
 else         if (type.equals(""String_Node_Str"")) {
          boolean added=this.projectFiles.add(resourcePath);
          if (added) {
            newFiles.add(resourcePath);
          }
        }
      }
      for (Iterator<String> newFilesIterator=newFiles.iterator(); newFilesIterator.hasNext(); ) {
        String resourcePath=(String)newFilesIterator.next();
        this.requestedProjectFiles.add(resourcePath);
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",callbackID);
        message.put(""String_Node_Str"",this.username);
        message.put(""String_Node_Str"",responseProject);
        message.put(""String_Node_Str"",resourcePath);
        messagingConnector.send(""String_Node_Str"",message);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}",0.7078189300411523
33964,"public void run(final CompletionCallback completionCallback){
  this.messagingConnector.addMessageHandler(projectResponseHandler);
  this.messagingConnector.addMessageHandler(resourceResponseHandler);
  this.completionCallback=completionCallback;
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  project=root.getProject(projectName);
  WorkspaceJob job=new WorkspaceJob(""String_Node_Str""){
    @Override public IStatus runInWorkspace(    IProgressMonitor monitor) throws CoreException {
      try {
        if (!project.exists()) {
          project.create(monitor);
        }
        if (!project.isOpen()) {
          project.open(null);
        }
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",callbackID);
        message.put(""String_Node_Str"",username);
        message.put(""String_Node_Str"",projectName);
        messagingConnector.send(""String_Node_Str"",message);
      }
 catch (      CoreException e1) {
        e1.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
catch (      JSONException e) {
        e.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().createRule(project));
  job.schedule();
}","public void run(final CompletionCallback completionCallback){
  this.messagingConnector.addMessageHandler(projectResponseHandler);
  this.messagingConnector.addMessageHandler(resourceResponseHandler);
  this.completionCallback=completionCallback;
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  project=root.getProject(projectName);
  WorkspaceJob job=new WorkspaceJob(""String_Node_Str""){
    @Override public IStatus runInWorkspace(    IProgressMonitor monitor) throws CoreException {
      try {
        if (!project.exists()) {
          project.create(monitor);
        }
        if (!project.isOpen()) {
          project.open(monitor);
        }
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",callbackID);
        message.put(""String_Node_Str"",username);
        message.put(""String_Node_Str"",projectName);
        messagingConnector.send(""String_Node_Str"",message);
      }
 catch (      CoreException e1) {
        e1.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
catch (      JSONException e) {
        e.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().createRule(project));
  job.schedule();
}",0.9965721408538486
33965,"public void getResourceResponse(JSONObject response){
  try {
    final String responseUser=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long timestamp=response.getLong(""String_Node_Str"");
    final String content=response.getString(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      IFile file=project.getFile(resourcePath);
      if (!file.exists()) {
        file.create(new ByteArrayInputStream(content.getBytes()),true,null);
      }
 else {
        file.setContents(new ByteArrayInputStream(content.getBytes()),true,false,null);
      }
      file.setLocalTimeStamp(timestamp);
      int downloaded=this.downloadedFileCount.incrementAndGet();
      if (downloaded == this.requestedFileCount.get()) {
        this.messagingConnector.removeMessageHandler(projectResponseHandler);
        this.messagingConnector.removeMessageHandler(resourceResponseHandler);
        finish();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}","public void getResourceResponse(JSONObject response){
  try {
    final String responseUser=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long timestamp=response.getLong(""String_Node_Str"");
    final String content=response.getString(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      IFile file=project.getFile(resourcePath);
      if (!file.exists()) {
        file.create(new ByteArrayInputStream(content.getBytes()),true,null);
      }
 else {
        file.setContents(new ByteArrayInputStream(content.getBytes()),true,false,null);
      }
      file.setLocalTimeStamp(timestamp);
      this.requestedProjectFiles.remove(resourcePath);
      if (this.requestedProjectFiles.isEmpty()) {
        this.messagingConnector.removeMessageHandler(projectResponseHandler);
        this.messagingConnector.removeMessageHandler(resourceResponseHandler);
        finish();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}",0.9396516808424464
33966,"public void sendLiveEditStartedMessage(String changeOriginID,String username,String projectName,String resourcePath,String hash,long timestamp){
  try {
    JSONObject message=new JSONObject();
    message.put(""String_Node_Str"",0);
    message.put(""String_Node_Str"",username);
    message.put(""String_Node_Str"",projectName);
    message.put(""String_Node_Str"",resourcePath);
    message.put(""String_Node_Str"",hash);
    message.put(""String_Node_Str"",timestamp);
    this.messagingConnector.send(""String_Node_Str"",message);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  ILiveEditConnector connector : this.liveEditConnectors) {
    if (!connector.getConnectorID().equals(changeOriginID)) {
      connector.liveEditingStarted(""String_Node_Str"",0,username,resourcePath,hash,timestamp);
    }
  }
}","public void sendLiveEditStartedMessage(String changeOriginID,String username,String projectName,String resourcePath,String hash,long timestamp){
  try {
    JSONObject message=new JSONObject();
    message.put(""String_Node_Str"",0);
    message.put(""String_Node_Str"",username);
    message.put(""String_Node_Str"",projectName);
    message.put(""String_Node_Str"",resourcePath);
    message.put(""String_Node_Str"",hash);
    message.put(""String_Node_Str"",timestamp);
    this.messagingConnector.send(""String_Node_Str"",message);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  String path=projectName + '/' + resourcePath;
  for (  ILiveEditConnector connector : this.liveEditConnectors) {
    if (!connector.getConnectorID().equals(changeOriginID)) {
      connector.liveEditingStarted(""String_Node_Str"",0,username,path,hash,timestamp);
    }
  }
}",0.9652278177458034
33967,"public void getResourceResponse(JSONObject response){
  try {
    final String username=response.getString(""String_Node_Str"");
    final String projectName=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long updateTimestamp=response.getLong(""String_Node_Str"");
    final String updateHash=response.getString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      boolean stored=false;
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null) {
        if (resource instanceof IFile) {
          String localHash=connectedProject.getHash(resourcePath);
          long localTimestamp=connectedProject.getTimestamp(resourcePath);
          if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
            IFile file=(IFile)resource;
            String newResourceContent=response.getString(""String_Node_Str"");
            connectedProject.setTimestamp(resourcePath,updateTimestamp);
            connectedProject.setHash(resourcePath,updateHash);
            file.setContents(new ByteArrayInputStream(newResourceContent.getBytes()),true,true,null);
            file.setLocalTimeStamp(updateTimestamp);
            stored=true;
          }
        }
      }
 else {
        IFile newFile=project.getFile(resourcePath);
        String newResourceContent=response.getString(""String_Node_Str"");
        connectedProject.setHash(resourcePath,updateHash);
        connectedProject.setTimestamp(resourcePath,updateTimestamp);
        newFile.create(new ByteArrayInputStream(newResourceContent.getBytes()),true,null);
        newFile.setLocalTimeStamp(updateTimestamp);
        stored=true;
      }
      if (stored) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",this.username);
        message.put(""String_Node_Str"",connectedProject.getName());
        message.put(""String_Node_Str"",resourcePath);
        message.put(""String_Node_Str"",updateTimestamp);
        message.put(""String_Node_Str"",updateHash);
        message.put(""String_Node_Str"",""String_Node_Str"");
        messagingConnector.send(""String_Node_Str"",message);
        notifyResourceChanged(resource);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void getResourceResponse(JSONObject response){
  try {
    final String username=response.getString(""String_Node_Str"");
    final String projectName=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long updateTimestamp=response.getLong(""String_Node_Str"");
    final String updateHash=response.getString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      boolean stored=false;
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null) {
        if (resource instanceof IFile) {
          String localHash=connectedProject.getHash(resourcePath);
          long localTimestamp=connectedProject.getTimestamp(resourcePath);
          if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
            IFile file=(IFile)resource;
            String newResourceContent=response.getString(""String_Node_Str"");
            connectedProject.setTimestamp(resourcePath,updateTimestamp);
            connectedProject.setHash(resourcePath,updateHash);
            file.setContents(new ByteArrayInputStream(newResourceContent.getBytes()),true,true,null);
            file.setLocalTimeStamp(updateTimestamp);
            stored=true;
          }
        }
      }
 else {
        IFile newFile=project.getFile(resourcePath);
        String newResourceContent=response.getString(""String_Node_Str"");
        connectedProject.setHash(resourcePath,updateHash);
        connectedProject.setTimestamp(resourcePath,updateTimestamp);
        newFile.create(new ByteArrayInputStream(newResourceContent.getBytes()),true,null);
        newFile.setLocalTimeStamp(updateTimestamp);
        stored=true;
      }
      if (stored) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",this.username);
        message.put(""String_Node_Str"",connectedProject.getName());
        message.put(""String_Node_Str"",resourcePath);
        message.put(""String_Node_Str"",updateTimestamp);
        message.put(""String_Node_Str"",updateHash);
        message.put(""String_Node_Str"",""String_Node_Str"");
        messagingConnector.send(""String_Node_Str"",message);
        if (resource != null) {
          notifyResourceChanged(resource);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9912
33968,"@Activate public void activate(final ComponentContext context) throws Exception {
  final boolean lazyStart=org.eclipse.flux.core.Activator.getDefault().isLazyStart();
  final IMessagingConnector messagingConnector=org.eclipse.flux.core.Activator.getDefault().getMessagingConnector();
  new Thread(){
    @Override public void run(){
      String userChannel=messagingConnector.getChannel();
      JdtChannelListener jdtChannelListener=new JdtChannelListener();
      for (; userChannel == null; userChannel=messagingConnector.getChannel()) {
        try {
          sleep(WAIT_TIME_PERIOD);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      discoveryConnector=new ServiceDiscoveryConnector(messagingConnector,JDT_SERVICE_ID,lazyStart);
      if (lazyStart) {
        keepAliveConnector=new KeepAliveConnector(messagingConnector,JDT_SERVICE_ID);
      }
      jdtChannelListener.connected(userChannel);
      messagingConnector.addChannelListener(jdtChannelListener);
    }
  }
.start();
}","@Activate public void activate(final ComponentContext context) throws Exception {
  final boolean lazyStart=org.eclipse.flux.core.Activator.getDefault().isLazyStart();
  final IMessagingConnector messagingConnector=org.eclipse.flux.core.Activator.getDefault().getMessagingConnector();
  if (messagingConnector != null) {
    new Thread(){
      @Override public void run(){
        String userChannel=messagingConnector.getChannel();
        JdtChannelListener jdtChannelListener=new JdtChannelListener();
        for (; userChannel == null; userChannel=messagingConnector.getChannel()) {
          try {
            sleep(WAIT_TIME_PERIOD);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
        discoveryConnector=new ServiceDiscoveryConnector(messagingConnector,JDT_SERVICE_ID,lazyStart);
        if (lazyStart) {
          keepAliveConnector=new KeepAliveConnector(messagingConnector,JDT_SERVICE_ID);
        }
        jdtChannelListener.connected(userChannel);
        messagingConnector.addChannelListener(jdtChannelListener);
      }
    }
.start();
  }
}",0.9631675874769796
33969,"@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  connectionListener=new AuthFailureReporter(Activator.getDefault().getMessagingConnector().getState());
}","@Override public void start(BundleContext context) throws Exception {
  super.start(context);
  plugin=this;
  IMessagingConnector messagingConnector=Activator.getDefault().getMessagingConnector();
  if (messagingConnector != null) {
    connectionListener=new AuthFailureReporter(messagingConnector.getState());
  }
}",0.6454033771106942
33970,"public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
        Repository repository=LiveEditConnector.this.repository;
        if (repository.isConnected(project)) {
          ConnectedProject connectedProject=repository.getProject(project);
          String hash=connectedProject.getHash(resourcePath);
          long timestamp=connectedProject.getTimestamp(resourcePath);
          LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
        }
      }
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
    @Override public void resourceChanged(    final IResource resource){
      UIJob job=new UIJob(""String_Node_Str""){
        @Override public IStatus runInUIThread(        IProgressMonitor monitor){
          IFileBuffer fileBuffer=FileBuffers.getTextFileBufferManager().getFileBuffer(resource.getLocation(),LocationKind.NORMALIZE);
          if (fileBuffer != null) {
            try {
              fileBuffer.revert(new NullProgressMonitor());
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
          return Status.OK_STATUS;
        }
      }
;
      job.setSystem(true);
      job.schedule();
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  WorkbenchJob workbenchJob=new WorkbenchJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
      return Status.OK_STATUS;
    }
  }
;
  workbenchJob.setSystem(true);
  workbenchJob.schedule();
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}","public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
        Repository repository=LiveEditConnector.this.repository;
        if (repository.isConnected(project)) {
          ConnectedProject connectedProject=repository.getProject(project);
          String hash=connectedProject.getHash(resourcePath);
          long timestamp=connectedProject.getTimestamp(resourcePath);
          LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
        }
      }
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
    @Override public void resourceChanged(    final IResource resource){
      if (resource == null) {
        return;
      }
      UIJob job=new UIJob(""String_Node_Str""){
        @Override public IStatus runInUIThread(        IProgressMonitor monitor){
          IFileBuffer fileBuffer=FileBuffers.getTextFileBufferManager().getFileBuffer(resource.getLocation(),LocationKind.NORMALIZE);
          if (fileBuffer != null) {
            try {
              fileBuffer.revert(new NullProgressMonitor());
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
          return Status.OK_STATUS;
        }
      }
;
      job.setSystem(true);
      job.schedule();
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  WorkbenchJob workbenchJob=new WorkbenchJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
      return Status.OK_STATUS;
    }
  }
;
  workbenchJob.setSystem(true);
  workbenchJob.schedule();
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}",0.9963913392141138
33971,"private void initCoreService(String userChannel) throws CoreException {
  repository=new Repository(messagingConnector,userChannel);
  liveEditCoordinator=new LiveEditCoordinator(messagingConnector);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  resourceListener=new CloudSyncResourceListener(repository);
  workspace.addResourceChangeListener(resourceListener,IResourceChangeEvent.POST_CHANGE);
  metadataListener=new CloudSyncMetadataListener(repository);
  workspace.addResourceChangeListener(metadataListener,IResourceChangeEvent.POST_BUILD);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectDisconnected(    IProject project){
      removeConnectedProjectPreference(project.getName());
    }
    @Override public void projectConnected(    IProject project){
      addConnectedProjectPreference(project.getName());
    }
  }
;
  getRepository().addRepositoryListener(repositoryListener);
  workspaceListener=new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      if (event.getResource() instanceof IProject) {
        IResourceDelta delta=event.getDelta();
        if (delta == null) {
          return;
        }
        if (delta.getKind() == IResourceDelta.REMOVED) {
          IProject project=(IProject)event.getResource();
          removeConnectedProjectPreference(project.getName());
        }
 else         if (delta.getKind() == IResourceDelta.CHANGED) {
        }
      }
    }
  }
;
  workspace.addResourceChangeListener(workspaceListener);
  updateProjectConnections();
}","private void initCoreService(String userChannel) throws CoreException {
  repository=new Repository(messagingConnector,userChannel);
  liveEditCoordinator=new LiveEditCoordinator(messagingConnector);
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  resourceListener=new CloudSyncResourceListener(repository);
  workspace.addResourceChangeListener(resourceListener,IResourceChangeEvent.POST_CHANGE);
  metadataListener=new CloudSyncMetadataListener(repository);
  workspace.addResourceChangeListener(metadataListener,IResourceChangeEvent.POST_BUILD);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectDisconnected(    IProject project){
      removeConnectedProjectPreference(project.getName());
    }
    @Override public void projectConnected(    IProject project){
      addConnectedProjectPreference(project.getName());
    }
    @Override public void resourceChanged(    IResource resource){
    }
  }
;
  getRepository().addRepositoryListener(repositoryListener);
  workspaceListener=new IResourceChangeListener(){
    public void resourceChanged(    IResourceChangeEvent event){
      if (event.getResource() instanceof IProject) {
        IResourceDelta delta=event.getDelta();
        if (delta == null) {
          return;
        }
        if (delta.getKind() == IResourceDelta.REMOVED) {
          IProject project=(IProject)event.getResource();
          removeConnectedProjectPreference(project.getName());
        }
 else         if (delta.getKind() == IResourceDelta.CHANGED) {
        }
      }
    }
  }
;
  workspace.addResourceChangeListener(workspaceListener);
  updateProjectConnections();
}",0.977462179685088
33972,"public void getResourceResponse(JSONObject response){
  try {
    final String username=response.getString(""String_Node_Str"");
    final String projectName=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long updateTimestamp=response.getLong(""String_Node_Str"");
    final String updateHash=response.getString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      boolean stored=false;
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null) {
        if (resource instanceof IFile) {
          String localHash=connectedProject.getHash(resourcePath);
          long localTimestamp=connectedProject.getTimestamp(resourcePath);
          if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
            IFile file=(IFile)resource;
            String newResourceContent=response.getString(""String_Node_Str"");
            connectedProject.setTimestamp(resourcePath,updateTimestamp);
            connectedProject.setHash(resourcePath,updateHash);
            file.setContents(new ByteArrayInputStream(newResourceContent.getBytes()),true,true,null);
            file.setLocalTimeStamp(updateTimestamp);
            stored=true;
          }
        }
      }
 else {
        IFile newFile=project.getFile(resourcePath);
        String newResourceContent=response.getString(""String_Node_Str"");
        connectedProject.setHash(resourcePath,updateHash);
        connectedProject.setTimestamp(resourcePath,updateTimestamp);
        newFile.create(new ByteArrayInputStream(newResourceContent.getBytes()),true,null);
        newFile.setLocalTimeStamp(updateTimestamp);
        stored=true;
      }
      if (stored) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",this.username);
        message.put(""String_Node_Str"",connectedProject.getName());
        message.put(""String_Node_Str"",resourcePath);
        message.put(""String_Node_Str"",updateTimestamp);
        message.put(""String_Node_Str"",updateHash);
        message.put(""String_Node_Str"",""String_Node_Str"");
        messagingConnector.send(""String_Node_Str"",message);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void getResourceResponse(JSONObject response){
  try {
    final String username=response.getString(""String_Node_Str"");
    final String projectName=response.getString(""String_Node_Str"");
    final String resourcePath=response.getString(""String_Node_Str"");
    final long updateTimestamp=response.getLong(""String_Node_Str"");
    final String updateHash=response.getString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      boolean stored=false;
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null) {
        if (resource instanceof IFile) {
          String localHash=connectedProject.getHash(resourcePath);
          long localTimestamp=connectedProject.getTimestamp(resourcePath);
          if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
            IFile file=(IFile)resource;
            String newResourceContent=response.getString(""String_Node_Str"");
            connectedProject.setTimestamp(resourcePath,updateTimestamp);
            connectedProject.setHash(resourcePath,updateHash);
            file.setContents(new ByteArrayInputStream(newResourceContent.getBytes()),true,true,null);
            file.setLocalTimeStamp(updateTimestamp);
            stored=true;
          }
        }
      }
 else {
        IFile newFile=project.getFile(resourcePath);
        String newResourceContent=response.getString(""String_Node_Str"");
        connectedProject.setHash(resourcePath,updateHash);
        connectedProject.setTimestamp(resourcePath,updateTimestamp);
        newFile.create(new ByteArrayInputStream(newResourceContent.getBytes()),true,null);
        newFile.setLocalTimeStamp(updateTimestamp);
        stored=true;
      }
      if (stored) {
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",this.username);
        message.put(""String_Node_Str"",connectedProject.getName());
        message.put(""String_Node_Str"",resourcePath);
        message.put(""String_Node_Str"",updateTimestamp);
        message.put(""String_Node_Str"",updateHash);
        message.put(""String_Node_Str"",""String_Node_Str"");
        messagingConnector.send(""String_Node_Str"",message);
        notifyResourceChanged(resource);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9916581892166836
33973,"public void updateResource(JSONObject request){
  try {
    final String username=request.getString(""String_Node_Str"");
    final String projectName=request.getString(""String_Node_Str"");
    final String resourcePath=request.getString(""String_Node_Str"");
    final long updateTimestamp=request.getLong(""String_Node_Str"");
    final String updateHash=request.optString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null && resource instanceof IFile) {
        String localHash=connectedProject.getHash(resourcePath);
        long localTimestamp=connectedProject.getTimestamp(resourcePath);
        if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
          JSONObject message=new JSONObject();
          message.put(""String_Node_Str"",GET_RESOURCE_CALLBACK);
          message.put(""String_Node_Str"",this.username);
          message.put(""String_Node_Str"",projectName);
          message.put(""String_Node_Str"",resourcePath);
          message.put(""String_Node_Str"",updateTimestamp);
          message.put(""String_Node_Str"",updateHash);
          messagingConnector.send(""String_Node_Str"",message);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void updateResource(JSONObject request){
  try {
    final String username=request.getString(""String_Node_Str"");
    final String projectName=request.getString(""String_Node_Str"");
    final String resourcePath=request.getString(""String_Node_Str"");
    final long updateTimestamp=request.getLong(""String_Node_Str"");
    final String updateHash=request.optString(""String_Node_Str"");
    ConnectedProject connectedProject=this.syncedProjects.get(projectName);
    if (this.username.equals(username) && connectedProject != null) {
      IProject project=connectedProject.getProject();
      IResource resource=project.findMember(resourcePath);
      if (resource != null && resource instanceof IFile) {
        String localHash=connectedProject.getHash(resourcePath);
        long localTimestamp=connectedProject.getTimestamp(resourcePath);
        if (localHash != null && !localHash.equals(updateHash) && localTimestamp < updateTimestamp) {
          JSONObject message=new JSONObject();
          message.put(""String_Node_Str"",GET_RESOURCE_CALLBACK);
          message.put(""String_Node_Str"",this.username);
          message.put(""String_Node_Str"",projectName);
          message.put(""String_Node_Str"",resourcePath);
          message.put(""String_Node_Str"",updateTimestamp);
          message.put(""String_Node_Str"",updateHash);
          messagingConnector.send(""String_Node_Str"",message);
          notifyResourceChanged(resource);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9856618872957652
33974,"public LiveEditUnits(IMessagingConnector messagingConnector,LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.messagingConnector=messagingConnector;
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.liveEditUnits=new ConcurrentHashMap<String,ICompilationUnit>();
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      modelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      startLiveUnit(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      updateLiveUnit(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRefEx){
    }
  }
;
  liveEditCoordinator.addLiveEditConnector(this.liveEditConnector);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      startupConnectedProject(project);
    }
    @Override public void projectDisconnected(    IProject project){
    }
  }
;
  this.repository.addRepositoryListener(this.repositoryListener);
  startup();
  this.liveResourcesResponseHandler=new CallbackIDAwareMessageHandler(""String_Node_Str"",GET_LIVE_RESOURCES_CALLBACK){
    @Override public void handleMessage(    String messageType,    JSONObject message){
      startupLiveUnits(message);
    }
  }
;
  messagingConnector.addMessageHandler(this.liveResourcesResponseHandler);
  this.metadataChangeListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      try {
        event.getDelta().accept(new IResourceDeltaVisitor(){
          @Override public boolean visit(          IResourceDelta delta) throws CoreException {
            checkForLiveUnitsInvolved(delta);
            return true;
          }
        }
);
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(this.metadataChangeListener,IResourceChangeEvent.POST_BUILD);
}","public LiveEditUnits(IMessagingConnector messagingConnector,LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.messagingConnector=messagingConnector;
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.liveEditUnits=new ConcurrentHashMap<String,ICompilationUnit>();
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      modelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      startLiveUnit(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      updateLiveUnit(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRefEx){
    }
  }
;
  liveEditCoordinator.addLiveEditConnector(this.liveEditConnector);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      startupConnectedProject(project);
    }
    @Override public void projectDisconnected(    IProject project){
    }
    @Override public void resourceChanged(    IResource resource){
    }
  }
;
  this.repository.addRepositoryListener(this.repositoryListener);
  startup();
  this.liveResourcesResponseHandler=new CallbackIDAwareMessageHandler(""String_Node_Str"",GET_LIVE_RESOURCES_CALLBACK){
    @Override public void handleMessage(    String messageType,    JSONObject message){
      startupLiveUnits(message);
    }
  }
;
  messagingConnector.addMessageHandler(this.liveResourcesResponseHandler);
  this.metadataChangeListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      try {
        event.getDelta().accept(new IResourceDeltaVisitor(){
          @Override public boolean visit(          IResourceDelta delta) throws CoreException {
            checkForLiveUnitsInvolved(delta);
            return true;
          }
        }
);
      }
 catch (      CoreException e) {
        e.printStackTrace();
      }
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(this.metadataChangeListener,IResourceChangeEvent.POST_BUILD);
}",0.9871862383710724
33975,"@Override public void bufferContentReplaced(IFileBuffer buffer){
  IPath path=buffer.getLocation();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=workspace.getRoot();
  IResource resource=root.findMember(path);
  if (resource != null) {
    IProject project=resource.getProject();
    String resourcePath=resource.getProjectRelativePath().toString();
    String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
    IDocument doc=documentMappings.get(fullPath);
    if (doc != null) {
      doc.addDocumentListener(documentListener);
    }
  }
  System.out.println(""String_Node_Str"");
}","@Override public void bufferContentReplaced(IFileBuffer buffer){
  IPath path=buffer.getLocation();
  IWorkspace workspace=ResourcesPlugin.getWorkspace();
  IWorkspaceRoot root=workspace.getRoot();
  IResource resource=root.findMember(path);
  if (resource != null) {
    IProject project=resource.getProject();
    String resourcePath=resource.getProjectRelativePath().toString();
    String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
    IDocument doc=documentMappings.get(fullPath);
    if (doc != null) {
      doc.addDocumentListener(documentListener);
    }
    Repository repository=LiveEditConnector.this.repository;
    if (repository.isConnected(project)) {
      ConnectedProject connectedProject=repository.getProject(project);
      String hash=connectedProject.getHash(resourcePath);
      long timestamp=connectedProject.getTimestamp(resourcePath);
      LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
    }
  }
}",0.6965232763700648
33976,"public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
      }
      System.out.println(""String_Node_Str"");
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
    }
  }
);
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}","public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
        Repository repository=LiveEditConnector.this.repository;
        if (repository.isConnected(project)) {
          ConnectedProject connectedProject=repository.getProject(project);
          String hash=connectedProject.getHash(resourcePath);
          long timestamp=connectedProject.getTimestamp(resourcePath);
          LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
        }
      }
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
    @Override public void resourceChanged(    IResource resource){
      IFileBuffer fileBuffer=FileBuffers.getTextFileBufferManager().getFileBuffer(resource.getLocation(),LocationKind.NORMALIZE);
      if (fileBuffer != null) {
        try {
          fileBuffer.revert(new NullProgressMonitor());
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  PlatformUI.getWorkbench().getDisplay().asyncExec(new Runnable(){
    public void run(){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
    }
  }
);
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}",0.7932859519128989
33977,"public void getProjectResponse(JSONObject response){
  try {
    final String responseProject=response.getString(""String_Node_Str"");
    final String responseUser=response.getString(""String_Node_Str"");
    final JSONArray files=response.getJSONArray(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        long timestamp=resource.getLong(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          if (resourcePath.isEmpty()) {
            project.setLocalTimeStamp(timestamp);
          }
 else {
            IFolder folder=project.getFolder(new Path(resourcePath));
            if (!folder.exists()) {
              folder.create(true,true,null);
            }
            folder.setLocalTimeStamp(timestamp);
          }
        }
 else         if (type.equals(""String_Node_Str"")) {
          requestedFileCount.incrementAndGet();
        }
      }
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          this.projectFiles.add(resourcePath);
          JSONObject message=new JSONObject();
          message.put(""String_Node_Str"",callbackID);
          message.put(""String_Node_Str"",this.username);
          message.put(""String_Node_Str"",responseProject);
          message.put(""String_Node_Str"",resourcePath);
          messagingConnector.send(""String_Node_Str"",message);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}","public void getProjectResponse(JSONObject response){
  try {
    final String responseProject=response.getString(""String_Node_Str"");
    final String responseUser=response.getString(""String_Node_Str"");
    final JSONArray files=response.getJSONArray(""String_Node_Str"");
    if (this.username.equals(responseUser)) {
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        long timestamp=resource.getLong(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          if (!resourcePath.isEmpty()) {
            IFolder folder=project.getFolder(new Path(resourcePath));
            if (!folder.exists()) {
              folder.create(true,true,null);
            }
            folder.setLocalTimeStamp(timestamp);
          }
        }
 else         if (type.equals(""String_Node_Str"")) {
          requestedFileCount.incrementAndGet();
        }
      }
      for (int i=0; i < files.length(); i++) {
        JSONObject resource=files.getJSONObject(i);
        String resourcePath=resource.getString(""String_Node_Str"");
        String type=resource.optString(""String_Node_Str"");
        if (type.equals(""String_Node_Str"")) {
          this.projectFiles.add(resourcePath);
          JSONObject message=new JSONObject();
          message.put(""String_Node_Str"",callbackID);
          message.put(""String_Node_Str"",this.username);
          message.put(""String_Node_Str"",responseProject);
          message.put(""String_Node_Str"",resourcePath);
          messagingConnector.send(""String_Node_Str"",message);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}",0.9822810082355876
33978,"public void run(CompletionCallback completionCallback){
  this.messagingConnector.addMessageHandler(projectResponseHandler);
  this.messagingConnector.addMessageHandler(resourceResponseHandler);
  this.completionCallback=completionCallback;
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  project=root.getProject(projectName);
  try {
    if (!project.exists()) {
      project.create(null);
    }
    if (!project.isOpen()) {
      project.open(null);
    }
    JSONObject message=new JSONObject();
    message.put(""String_Node_Str"",this.callbackID);
    message.put(""String_Node_Str"",this.username);
    message.put(""String_Node_Str"",this.projectName);
    messagingConnector.send(""String_Node_Str"",message);
  }
 catch (  CoreException e1) {
    e1.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
catch (  JSONException e) {
    e.printStackTrace();
    this.messagingConnector.removeMessageHandler(projectResponseHandler);
    this.messagingConnector.removeMessageHandler(resourceResponseHandler);
    this.completionCallback.downloadFailed();
  }
}","public void run(final CompletionCallback completionCallback){
  this.messagingConnector.addMessageHandler(projectResponseHandler);
  this.messagingConnector.addMessageHandler(resourceResponseHandler);
  this.completionCallback=completionCallback;
  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();
  project=root.getProject(projectName);
  WorkspaceJob job=new WorkspaceJob(""String_Node_Str""){
    @Override public IStatus runInWorkspace(    IProgressMonitor monitor) throws CoreException {
      try {
        if (!project.exists()) {
          project.create(monitor);
        }
        if (!project.isOpen()) {
          project.open(null);
        }
        JSONObject message=new JSONObject();
        message.put(""String_Node_Str"",callbackID);
        message.put(""String_Node_Str"",username);
        message.put(""String_Node_Str"",projectName);
        messagingConnector.send(""String_Node_Str"",message);
      }
 catch (      CoreException e1) {
        e1.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
catch (      JSONException e) {
        e.printStackTrace();
        messagingConnector.removeMessageHandler(projectResponseHandler);
        messagingConnector.removeMessageHandler(resourceResponseHandler);
        completionCallback.downloadFailed();
      }
      return Status.OK_STATUS;
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().createRule(project));
  job.schedule();
}",0.5717299578059072
33979,"private void importAsPureMavenProject(IFile pomFile){
  try {
    NullProgressMonitor pm=new NullProgressMonitor();
    ResolverConfiguration resolverConfiguration=new ResolverConfiguration();
    String activeProfiles=""String_Node_Str"";
    resolverConfiguration.setActiveProfiles(activeProfiles);
    MavenPlugin.getProjectConfigurationManager().enableMavenNature(project,resolverConfiguration,pm);
  }
 catch (  CoreException e) {
  }
}","private void importAsPureMavenProject(IFile pomFile){
  WorkspaceJob job=new WorkspaceJob(""String_Node_Str""){
    @Override public IStatus runInWorkspace(    IProgressMonitor monitor) throws CoreException {
      try {
        ResolverConfiguration resolverConfiguration=new ResolverConfiguration();
        String activeProfiles=""String_Node_Str"";
        resolverConfiguration.setActiveProfiles(activeProfiles);
        MavenPlugin.getProjectConfigurationManager().enableMavenNature(project,resolverConfiguration,monitor);
        return Status.OK_STATUS;
      }
 catch (      CoreException e) {
        e.printStackTrace();
        return Status.OK_STATUS;
      }
    }
  }
;
  job.setRule(ResourcesPlugin.getWorkspace().getRoot());
  job.schedule();
}",0.5585284280936454
33980,"protected void handleIncomingMessage(String messageType,JSONObject message){
  Collection<IMessageHandler> handlers=this.messageHandlers.get(messageType);
  if (handlers != null) {
    for (    IMessageHandler handler : handlers) {
      if (handler.canHandle(messageType,message)) {
        handler.handleMessage(messageType,message);
      }
    }
  }
}","protected void handleIncomingMessage(final String messageType,final JSONObject message){
  Collection<IMessageHandler> handlers=AbstractMessagingConnector.this.messageHandlers.get(messageType);
  if (handlers != null) {
    for (    IMessageHandler handler : handlers) {
      if (handler.canHandle(messageType,message)) {
        handler.handleMessage(messageType,message);
      }
    }
  }
}",0.9479305740987984
33981,"public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
        Repository repository=LiveEditConnector.this.repository;
        if (repository.isConnected(project)) {
          ConnectedProject connectedProject=repository.getProject(project);
          String hash=connectedProject.getHash(resourcePath);
          long timestamp=connectedProject.getTimestamp(resourcePath);
          LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
        }
      }
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
    @Override public void resourceChanged(    IResource resource){
      IFileBuffer fileBuffer=FileBuffers.getTextFileBufferManager().getFileBuffer(resource.getLocation(),LocationKind.NORMALIZE);
      if (fileBuffer != null) {
        try {
          fileBuffer.revert(new NullProgressMonitor());
        }
 catch (        CoreException e) {
          e.printStackTrace();
        }
      }
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  WorkbenchJob workbenchJob=new WorkbenchJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
      return Status.OK_STATUS;
    }
  }
;
  workbenchJob.setSystem(true);
  workbenchJob.schedule();
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}","public LiveEditConnector(LiveEditCoordinator liveEditCoordinator,Repository repository){
  this.liveEditCoordinator=liveEditCoordinator;
  this.repository=repository;
  this.resourceMappings=new ConcurrentHashMap<IDocument,String>();
  this.documentMappings=new ConcurrentHashMap<String,IDocument>();
  this.pendingLiveEditStartedResponses=new ConcurrentHashMap<String,PendingLiveEditStartedResponse>();
  this.documentListener=new IDocumentListener(){
    @Override public void documentChanged(    DocumentEvent event){
      sendModelChangedMessage(event);
    }
    @Override public void documentAboutToBeChanged(    DocumentEvent event){
    }
  }
;
  this.fileBufferListener=new IFileBufferListener(){
    @Override public void underlyingFileMoved(    IFileBuffer buffer,    IPath path){
    }
    @Override public void underlyingFileDeleted(    IFileBuffer buffer){
    }
    @Override public void stateValidationChanged(    IFileBuffer buffer,    boolean isStateValidated){
    }
    @Override public void stateChanging(    IFileBuffer buffer){
    }
    @Override public void stateChangeFailed(    IFileBuffer buffer){
    }
    @Override public void dirtyStateChanged(    IFileBuffer buffer,    boolean isDirty){
    }
    @Override public void bufferDisposed(    IFileBuffer buffer){
    }
    @Override public void bufferCreated(    IFileBuffer buffer){
    }
    @Override public void bufferContentReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.addDocumentListener(documentListener);
        }
        Repository repository=LiveEditConnector.this.repository;
        if (repository.isConnected(project)) {
          ConnectedProject connectedProject=repository.getProject(project);
          String hash=connectedProject.getHash(resourcePath);
          long timestamp=connectedProject.getTimestamp(resourcePath);
          LiveEditConnector.this.liveEditCoordinator.sendLiveEditStartedMessage(LIVE_EDIT_CONNECTOR_ID,repository.getUsername(),project.getName(),resourcePath,hash,timestamp);
        }
      }
    }
    @Override public void bufferContentAboutToBeReplaced(    IFileBuffer buffer){
      IPath path=buffer.getLocation();
      IWorkspace workspace=ResourcesPlugin.getWorkspace();
      IWorkspaceRoot root=workspace.getRoot();
      IResource resource=root.findMember(path);
      if (resource != null) {
        IProject project=resource.getProject();
        String resourcePath=resource.getProjectRelativePath().toString();
        String fullPath=project.getName() + ""String_Node_Str"" + resourcePath;
        IDocument doc=documentMappings.get(fullPath);
        if (doc != null) {
          doc.removeDocumentListener(documentListener);
        }
      }
    }
  }
;
  FileBuffers.getTextFileBufferManager().addFileBufferListener(fileBufferListener);
  this.repositoryListener=new IRepositoryListener(){
    @Override public void projectConnected(    IProject project){
      connectOpenEditors(project);
    }
    @Override public void projectDisconnected(    IProject project){
      disconnectOpenEditors(project);
    }
    @Override public void resourceChanged(    final IResource resource){
      UIJob job=new UIJob(""String_Node_Str""){
        @Override public IStatus runInUIThread(        IProgressMonitor monitor){
          IFileBuffer fileBuffer=FileBuffers.getTextFileBufferManager().getFileBuffer(resource.getLocation(),LocationKind.NORMALIZE);
          if (fileBuffer != null) {
            try {
              fileBuffer.revert(new NullProgressMonitor());
            }
 catch (            CoreException e) {
              e.printStackTrace();
            }
          }
          return Status.OK_STATUS;
        }
      }
;
      job.setSystem(true);
      job.schedule();
    }
  }
;
  this.repository.addRepositoryListener(repositoryListener);
  this.liveEditConnector=new ILiveEditConnector(){
    @Override public String getConnectorID(){
      return LIVE_EDIT_CONNECTOR_ID;
    }
    @Override public void liveEditingEvent(    String username,    String resourcePath,    int offset,    int removeCount,    String newText){
      handleModelChanged(username,resourcePath,offset,removeCount,newText);
    }
    @Override public void liveEditingStarted(    String requestSenderID,    int callbackID,    String username,    String resourcePath,    String hash,    long timestamp){
      remoteEditorStarted(requestSenderID,callbackID,username,resourcePath,hash,timestamp);
    }
    @Override public void liveEditingStartedResponse(    String requestSenderID,    int callbackID,    String username,    String projectName,    String resourcePath,    String savePointHash,    long savePointTimestamp,    String content){
      handleRemoteLiveContent(requestSenderID,callbackID,username,projectName,resourcePath,savePointHash,savePointTimestamp,content);
    }
    @Override public void liveEditors(    String requestSenderID,    int callbackID,    String username,    String projectRegEx,    String resourceRegEx){
      handleLiveEditors(requestSenderID,callbackID,username,projectRegEx,resourceRegEx);
    }
  }
;
  this.liveEditCoordinator.addLiveEditConnector(liveEditConnector);
  this.workspaceListener=new IResourceChangeListener(){
    @Override public void resourceChanged(    IResourceChangeEvent event){
      reactToResourceChanged(event);
    }
  }
;
  ResourcesPlugin.getWorkspace().addResourceChangeListener(workspaceListener);
  this.partListener=new IPartListener2(){
    @Override public void partVisible(    IWorkbenchPartReference partRef){
    }
    @Override public void partOpened(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        connectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partInputChanged(    IWorkbenchPartReference partRef){
    }
    @Override public void partHidden(    IWorkbenchPartReference partRef){
    }
    @Override public void partDeactivated(    IWorkbenchPartReference partRef){
    }
    @Override public void partClosed(    IWorkbenchPartReference partRef){
      IWorkbenchPart part=partRef.getPart(false);
      if (part instanceof AbstractTextEditor) {
        disconnectEditor((AbstractTextEditor)part);
      }
    }
    @Override public void partBroughtToTop(    IWorkbenchPartReference partRef){
    }
    @Override public void partActivated(    IWorkbenchPartReference partRef){
    }
  }
;
  WorkbenchJob workbenchJob=new WorkbenchJob(""String_Node_Str""){
    @Override public IStatus runInUIThread(    IProgressMonitor monitor){
      IWorkbenchWindow window=PlatformUI.getWorkbench().getActiveWorkbenchWindow();
      window.getActivePage().addPartListener(partListener);
      return Status.OK_STATUS;
    }
  }
;
  workbenchJob.setSystem(true);
  workbenchJob.schedule();
  for (  ConnectedProject connectedProject : repository.getConnectedProjects()) {
    connectOpenEditors(connectedProject.getProject());
  }
}",0.9812790379885216
33982,"@Activate public void activate(final ComponentContext context){
  String username=System.getProperty(""String_Node_Str"");
  String token=System.getProperty(""String_Node_Str"");
  if (username == null) {
    new ServiceConnector(""String_Node_Str""){
      @Override public void startService(      String user,      String token){
        startJdtService(user,token);
      }
      @Override public void stopService(){
        try {
          System.out.println(""String_Node_Str"");
          context.getBundleContext().getBundle(0).stop();
          System.exit(0);
        }
 catch (        BundleException e) {
          e.printStackTrace();
        }
      }
    }
;
  }
 else {
    startJdtService(username,token);
  }
}","@Activate public void activate(final ComponentContext context){
  String username=System.getProperty(""String_Node_Str"");
  String token=System.getProperty(""String_Node_Str"");
  if (username == null) {
    new ServiceConnector(""String_Node_Str""){
      @Override public void startService(      String user,      String token){
        startJdtService(user,token);
      }
      @Override public void stopService(){
        try {
          System.exit(0);
        }
 catch (        Throwable e) {
          e.printStackTrace();
        }
      }
    }
;
  }
 else {
    startJdtService(username,token);
  }
}",0.8920754716981132
33983,"@Override public void stopService(){
  try {
    System.out.println(""String_Node_Str"");
    context.getBundleContext().getBundle(0).stop();
    System.exit(0);
  }
 catch (  BundleException e) {
    e.printStackTrace();
  }
}","@Override public void stopService(){
  try {
    System.exit(0);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
}",0.670487106017192
33984,"/** 
 * Constructor for GsonWrapper.
 * @param builder Builder
 */
protected GsonWrapper(Builder builder){
  Schema schema=builder.schema != null ? builder.schema : Schema.make().get();
  ASObjectAdapter base=new ASObjectAdapter(schema);
  GsonBuilder b=initGsonBuilder(builder,schema,base);
  for (  AdapterEntry<?> entry : builder.adapters.build()) {
    if (entry.hier)     b.registerTypeHierarchyAdapter(entry.type,entry.adapter != null ? entry.adapter : base);
 else     b.registerTypeAdapter(entry.type,entry.adapter != null ? entry.adapter : base);
  }
  if (builder.pretty)   b.setPrettyPrinting();
  this.gson=b.create();
  this.charset=builder.charset;
}","/** 
 * Constructor for GsonWrapper.
 * @param builder Builder
 */
protected GsonWrapper(Builder builder){
  Schema schema=builder.schema != null ? builder.schema : Schema.make().get();
  ASObjectAdapter base=new ASObjectAdapter(schema);
  GsonBuilder b=initGsonBuilder(builder,schema,base,builder.adapters.build());
  if (builder.pretty)   b.setPrettyPrinting();
  this.gson=b.create();
  this.charset=builder.charset;
}",0.728110599078341
33985,"/** 
 * Method initGsonBuilder.
 * @param builder Builder
 * @return GsonBuilder 
 */
private static GsonBuilder initGsonBuilder(Builder builder,Schema schema,ASObjectAdapter base){
  return new GsonBuilder().registerTypeHierarchyAdapter(TypeValue.class,new TypeValueAdapter(schema)).registerTypeHierarchyAdapter(LinkValue.class,new LinkValueAdapter(schema)).registerTypeHierarchyAdapter(NLV.class,NLV).registerTypeHierarchyAdapter(Iterable.class,ITERABLE).registerTypeHierarchyAdapter(ActionsValue.class,ACTIONS).registerTypeHierarchyAdapter(Optional.class,OPTIONAL).registerTypeHierarchyAdapter(Range.class,RANGE).registerTypeHierarchyAdapter(Table.class,TABLE).registerTypeHierarchyAdapter(LazilyParsedNumber.class,NUMBER).registerTypeHierarchyAdapter(LazilyParsedNumberComparable.class,NUMBER).registerTypeHierarchyAdapter(ASObject.class,base).registerTypeHierarchyAdapter(Collection.class,base).registerTypeHierarchyAdapter(Activity.class,base).registerTypeHierarchyAdapter(ReadableDuration.class,DURATION).registerTypeHierarchyAdapter(ReadablePeriod.class,PERIOD).registerTypeHierarchyAdapter(ReadableInterval.class,INTERVAL).registerTypeAdapter(Activity.Status.class,forEnum(Activity.Status.class,Activity.Status.OTHER)).registerTypeAdapter(Date.class,DATE).registerTypeAdapter(DateTime.class,DATETIME).registerTypeAdapter(MediaType.class,MIMETYPE).registerTypeHierarchyAdapter(Multimap.class,MULTIMAP);
}","/** 
 * Method initGsonBuilder.
 * @param builder Builder
 * @return GsonBuilder 
 */
private static GsonBuilder initGsonBuilder(Builder builder,Schema schema,ASObjectAdapter base,Iterable<AdapterEntry<?>> adapters){
  GsonBuilder gson=new GsonBuilder().registerTypeHierarchyAdapter(TypeValue.class,new TypeValueAdapter(schema)).registerTypeHierarchyAdapter(LinkValue.class,new LinkValueAdapter(schema)).registerTypeHierarchyAdapter(Iterable.class,ITERABLE);
  for (  AdapterEntry<?> entry : adapters) {
    if (entry.hier)     gson.registerTypeHierarchyAdapter(entry.type,entry.adapter != null ? entry.adapter : base);
 else     gson.registerTypeAdapter(entry.type,entry.adapter != null ? entry.adapter : base);
  }
  return gson.registerTypeHierarchyAdapter(NLV.class,NLV).registerTypeHierarchyAdapter(ActionsValue.class,ACTIONS).registerTypeHierarchyAdapter(Optional.class,OPTIONAL).registerTypeHierarchyAdapter(Range.class,RANGE).registerTypeHierarchyAdapter(Table.class,TABLE).registerTypeHierarchyAdapter(LazilyParsedNumber.class,NUMBER).registerTypeHierarchyAdapter(LazilyParsedNumberComparable.class,NUMBER).registerTypeHierarchyAdapter(ASObject.class,base).registerTypeHierarchyAdapter(Collection.class,base).registerTypeHierarchyAdapter(Activity.class,base).registerTypeHierarchyAdapter(ReadableDuration.class,DURATION).registerTypeHierarchyAdapter(ReadablePeriod.class,PERIOD).registerTypeHierarchyAdapter(ReadableInterval.class,INTERVAL).registerTypeAdapter(Activity.Status.class,forEnum(Activity.Status.class,Activity.Status.OTHER)).registerTypeAdapter(Date.class,DATE).registerTypeAdapter(DateTime.class,DATETIME).registerTypeAdapter(MediaType.class,MIMETYPE).registerTypeHierarchyAdapter(Multimap.class,MULTIMAP);
}",0.8599618077657543
33986,"/** 
 * Method get.
 * @return A 
 * @see com.google.common.base.Supplier#get() 
 */
public A get(){
  set(""String_Node_Str"",list.build());
  return create();
}","/** 
 * Method get.
 * @return A 
 * @see com.google.common.base.Supplier#get() 
 */
public A get(){
  super.set(""String_Node_Str"",list.build());
  return create();
}",0.98159509202454
33987,"/** 
 * Method deserialize.
 * @param element JsonElement
 * @param type Type
 * @param context JsonDeserializationContext
 * @return ASObject 
 * @throws JsonParseException
 * @see com.google.gson.JsonDeserializer#deserialize(JsonElement,Type,JsonDeserializationContext) 
 */
public final ASObject deserialize(JsonElement element,Type type,JsonDeserializationContext context) throws JsonParseException {
  JsonObject obj=(JsonObject)element;
  ASObject.AbstractBuilder<?,?> builder=null;
  Model propMap=null;
  TypeValue tv=null;
  if (knowsType(type)) {
    builder=builderFor(type);
    propMap=modelFor(type);
  }
 else {
    if (obj.has(""String_Node_Str"")) {
      tv=context.deserialize(obj.get(""String_Node_Str""),TypeValue.class);
      @SuppressWarnings(""String_Node_Str"") Class<? extends ASObject.AbstractBuilder> _class=schema.builderForObjectTypeOrClass(tv.id(),(Class)type);
      if (_class != null) {
        propMap=schema.forObjectClassOrType(_class,tv.id());
        if (!_class.isInterface()) {
          try {
            builder=_class.getConstructor(String.class).newInstance(tv.id());
          }
 catch (          Throwable t) {
            try {
              builder=_class.newInstance();
              builder.set(""String_Node_Str"",tv);
            }
 catch (            Throwable t2) {
              builder=Makers.object(tv);
            }
          }
        }
 else         builder=Makers.object(tv);
      }
 else {
        builder=Makers.object(tv);
        propMap=schema.forObjectClassOrType(ASObject.Builder.class,tv.id());
      }
    }
 else {
      if (obj.has(""String_Node_Str"") && (obj.has(""String_Node_Str"") || obj.has(""String_Node_Str"") || obj.has(""String_Node_Str""))) {
        builder=activity();
        propMap=schema.forObjectClassOrType(Activity.Builder.class,""String_Node_Str"");
      }
 else       if (obj.has(""String_Node_Str"")) {
        builder=collection();
        propMap=schema.forObjectClassOrType(Collection.Builder.class,""String_Node_Str"");
      }
 else {
        @SuppressWarnings(""String_Node_Str"") Class<? extends ASObject.AbstractBuilder> _class=schema.builderFor((Class)type);
        if (_class != null) {
          if (!_class.isInterface()) {
            try {
              builder=_class.newInstance();
            }
 catch (            Throwable t) {
              builder=object();
            }
          }
 else           builder=object();
        }
        if (builder == null)         builder=object();
        propMap=schema.forObjectClass(builder.getClass());
        propMap=propMap != null ? propMap : schema.forObjectClass(ASObject.Builder.class);
      }
    }
  }
  for (  Entry<String,JsonElement> entry : obj.entrySet()) {
    String name=entry.getKey();
    if (name.equalsIgnoreCase(""String_Node_Str""))     continue;
    Class<?> _class=propMap.get(name);
    JsonElement val=entry.getValue();
    if (val.isJsonPrimitive())     builder.set(name,_class != null ? context.deserialize(val,_class) : primConverter.convert(val.getAsJsonPrimitive()));
 else     if (val.isJsonArray())     builder.set(name,LinkValue.class.isAssignableFrom(_class != null ? _class : Object.class) ? context.deserialize(val,LinkValue.class) : convert(val.getAsJsonArray(),_class,context,builder()));
 else     if (val.isJsonObject())     builder.set(name,context.deserialize(val,propMap.has(name) ? propMap.get(name) : ASObject.class));
  }
  return builder.get();
}","/** 
 * Method deserialize.
 * @param element JsonElement
 * @param type Type
 * @param context JsonDeserializationContext
 * @return ASObject 
 * @throws JsonParseException
 * @see com.google.gson.JsonDeserializer#deserialize(JsonElement,Type,JsonDeserializationContext) 
 */
public final ASObject deserialize(JsonElement element,Type type,JsonDeserializationContext context) throws JsonParseException {
  JsonObject obj=(JsonObject)element;
  ASObject.AbstractBuilder<?,?> builder=null;
  Model propMap=null;
  TypeValue tv=null;
  if (knowsType(type)) {
    builder=builderFor(type);
    propMap=modelFor(type);
  }
 else {
    if (obj.has(""String_Node_Str"")) {
      tv=context.deserialize(obj.get(""String_Node_Str""),TypeValue.class);
      @SuppressWarnings(""String_Node_Str"") Class<? extends ASObject.AbstractBuilder> _class=schema.builderForObjectTypeOrClass(tv.id(),(Class)type);
      if (_class != null) {
        propMap=schema.forObjectClassOrType(_class,tv.id());
        if (!_class.isInterface()) {
          try {
            builder=_class.getConstructor(String.class).newInstance(tv.id());
          }
 catch (          Throwable t) {
            try {
              builder=_class.newInstance();
              builder.set(""String_Node_Str"",tv);
            }
 catch (            Throwable t2) {
              builder=Makers.object(tv);
            }
          }
        }
 else         builder=Makers.object(tv);
      }
 else {
        builder=Makers.object(tv);
        propMap=schema.forObjectClassOrType(ASObject.Builder.class,tv.id());
      }
    }
 else {
      if (obj.has(""String_Node_Str"") && (obj.has(""String_Node_Str"") || obj.has(""String_Node_Str"") || obj.has(""String_Node_Str""))) {
        builder=activity();
        propMap=schema.forObjectClassOrType(Activity.Builder.class,""String_Node_Str"");
      }
 else       if (obj.has(""String_Node_Str"")) {
        builder=collection();
        propMap=schema.forObjectClassOrType(Collection.Builder.class,""String_Node_Str"");
      }
 else {
        @SuppressWarnings(""String_Node_Str"") Class<? extends ASObject.AbstractBuilder> _class=schema.builderFor((Class)type);
        if (_class != null) {
          if (!_class.isInterface()) {
            try {
              builder=_class.newInstance();
            }
 catch (            Throwable t) {
              builder=object();
            }
          }
 else           builder=object();
        }
        if (builder == null)         builder=object();
        propMap=schema.forObjectClass(builder.getClass());
        propMap=propMap != null ? propMap : schema.forObjectClass(ASObject.Builder.class);
      }
    }
  }
  for (  Entry<String,JsonElement> entry : obj.entrySet()) {
    String name=entry.getKey();
    if (name.equalsIgnoreCase(""String_Node_Str""))     continue;
    Class<?> _class=propMap.get(name);
    JsonElement val=entry.getValue();
    if (val.isJsonPrimitive())     builder.set(name,_class != null ? context.deserialize(val,_class) : primConverter.convert(val.getAsJsonPrimitive()));
 else     if (val.isJsonArray()) {
      builder.set(name,LinkValue.class.isAssignableFrom(_class != null ? _class : Object.class) ? context.deserialize(val,LinkValue.class) : convert(val.getAsJsonArray(),_class,context,builder()));
    }
 else     if (val.isJsonObject())     builder.set(name,context.deserialize(val,propMap.has(name) ? propMap.get(name) : ASObject.class));
  }
  return builder.get();
}",0.9985448195576252
33988,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_scan);
  mHandler=new WeakHandler();
  setUpDefaultToolbar();
  scanProgressView=findViewById(R.id.scan_status_layout);
  scanResultListView=findViewById(R.id.scan_result_layout);
  scanResultNoCameraView=findViewById(R.id.scan_result_no_camera_layout);
  progressBar=(ProgressBar)findViewById(R.id.horizontal_progress_bar);
  progressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.colorAccent),PorterDuff.Mode.SRC_IN);
  cameraListView=(ListView)findViewById(R.id.scan_result_list);
  Button addManuallyButton=(Button)findViewById(R.id.button_add_camera_manually);
  showAllDeviceButton=(Button)findViewById(R.id.button_show_all_devices);
  connectWifiButton=(Button)findViewById(R.id.button_connect_wifi);
  connectWifiButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
    }
  }
);
  View footerView=getLayoutInflater().inflate(R.layout.footer_scan_list,cameraListView,false);
  Button showAllDeviceFooterButton=(Button)footerView.findViewById(R.id.button_all_devices_in_list);
  cameraListView.addFooterView(footerView);
  deviceAdapter=new ScanResultAdapter(this,R.layout.item_scan_list,discoveredCameras,drawableArray);
  cameraListView.setAdapter(deviceAdapter);
  cameraListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int position,    long arg3){
      final DiscoveredCamera cameraInList=(DiscoveredCamera)cameraListView.getItemAtPosition(position);
      if (cameraInList != null) {
        if (isCameraAdded(cameraInList)) {
          CustomedDialog.getStandardAlertDialog(ScanActivity.this,new Dialog.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              launchAddCameraPage(cameraInList);
            }
          }
,R.string.msg_camera_has_been_added).show();
        }
 else {
          launchAddCameraPage(cameraInList);
        }
      }
    }
  }
);
  showAllDeviceFooterButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  addManuallyButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(new Intent(ScanActivity.this,AddEditCameraActivity.class),Constants.REQUEST_CODE_ADD_CAMERA);
    }
  }
);
  showAllDeviceButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  new ScanCheckInternetTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_scan);
  mHandler=new WeakHandler();
  setUpDefaultToolbar();
  scanProgressView=findViewById(R.id.scan_status_layout);
  scanResultListView=findViewById(R.id.scan_result_layout);
  scanResultNoCameraView=findViewById(R.id.scan_result_no_camera_layout);
  progressBar=(ProgressBar)findViewById(R.id.horizontal_progress_bar);
  cameraListView=(ListView)findViewById(R.id.scan_result_list);
  Button addManuallyButton=(Button)findViewById(R.id.button_add_camera_manually);
  showAllDeviceButton=(Button)findViewById(R.id.button_show_all_devices);
  connectWifiButton=(Button)findViewById(R.id.button_connect_wifi);
  connectWifiButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(Settings.ACTION_WIFI_SETTINGS));
    }
  }
);
  View footerView=getLayoutInflater().inflate(R.layout.footer_scan_list,cameraListView,false);
  Button showAllDeviceFooterButton=(Button)footerView.findViewById(R.id.button_all_devices_in_list);
  cameraListView.addFooterView(footerView);
  deviceAdapter=new ScanResultAdapter(this,R.layout.item_scan_list,discoveredCameras,drawableArray);
  cameraListView.setAdapter(deviceAdapter);
  cameraListView.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> arg0,    View arg1,    int position,    long arg3){
      final DiscoveredCamera cameraInList=(DiscoveredCamera)cameraListView.getItemAtPosition(position);
      if (cameraInList != null) {
        if (isCameraAdded(cameraInList)) {
          CustomedDialog.getStandardAlertDialog(ScanActivity.this,new Dialog.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              launchAddCameraPage(cameraInList);
            }
          }
,R.string.msg_camera_has_been_added).show();
        }
 else {
          launchAddCameraPage(cameraInList);
        }
      }
    }
  }
);
  showAllDeviceFooterButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  addManuallyButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(new Intent(ScanActivity.this,AddEditCameraActivity.class),Constants.REQUEST_CODE_ADD_CAMERA);
    }
  }
);
  showAllDeviceButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      AllDevicesActivity.showAllDevices(ScanActivity.this,nonCameraDevices);
    }
  }
);
  new ScanCheckInternetTask(this).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.9790185538408184
33989,"@Override public void onBackPressed(){
  int selectedPage=mViewFlipper.getDisplayedChild();
  if (selectedPage == 0) {
    quitAddCamera();
  }
 else {
    mViewFlipper.setDisplayedChild(selectedPage - 1);
  }
}","@Override public void onBackPressed(){
  int selectedPage=mViewFlipper.getDisplayedChild();
  if (selectedPage == 0) {
    quitAddCamera();
  }
 else {
    showPageAtPosition(selectedPage - 1);
  }
}",0.8926829268292683
33990,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_camera);
  setUpDefaultToolbar();
  setHomeIconAsCancel();
  mViewFlipper=(ViewFlipper)findViewById(R.id.add_camera_view_flipper);
  mProgressBar=(ProgressBar)findViewById(R.id.add_camera_progress_bar);
  mProgressBar.getProgressDrawable().setColorFilter(getResources().getColor(R.color.colorAccent),PorterDuff.Mode.SRC_IN);
  mProgressBar.setProgress(33);
  if (savedInstanceState != null) {
    mSelectedModel=(SelectedModel)savedInstanceState.get(KEY_SELECTED_MODEL);
  }
  mHandler=new Handler();
  initModelSelectorUI();
  initConnectCameraUI();
  initCameraNameView();
  if (savedInstanceState != null) {
    int flipperPosition=savedInstanceState.getInt(KEY_FLIPPER_POSITION);
    if (flipperPosition == 0) {
      showModelSelectorView();
    }
 else     if (flipperPosition == 1) {
      showConnectCameraView();
    }
 else     if (flipperPosition == 2) {
      showCameraNameView();
    }
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_add_camera);
  setUpDefaultToolbar();
  setHomeIconAsCancel();
  mViewFlipper=(ViewFlipper)findViewById(R.id.add_camera_view_flipper);
  mProgressBar=(ProgressBar)findViewById(R.id.add_camera_progress_bar);
  mProgressBar.setProgress(33);
  if (savedInstanceState != null) {
    mSelectedModel=(SelectedModel)savedInstanceState.get(KEY_SELECTED_MODEL);
  }
  mHandler=new Handler();
  initModelSelectorUI();
  initConnectCameraUI();
  initCameraNameView();
  if (savedInstanceState != null) {
    int flipperPosition=savedInstanceState.getInt(KEY_FLIPPER_POSITION);
    showPageAtPosition(flipperPosition);
  }
}",0.7939698492462312
33991,"private void updatePortStatus(boolean isPortOpen){
  if (mStatusViewReference != null) {
    TextView statusView=mStatusViewReference.get();
    if (statusView != null) {
      statusView.setVisibility(View.VISIBLE);
      statusView.setText(isPortOpen ? R.string.port_is_open : R.string.port_is_closed);
      statusView.setTextColor(isPortOpen ? mContext.getResources().getColor(R.color.evercam_blue) : mContext.getResources().getColor(R.color.orange_red));
    }
  }
}","private void updatePortStatus(boolean isPortOpen){
  if (mStatusViewReference != null) {
    TextView statusView=mStatusViewReference.get();
    if (statusView != null) {
      statusView.setVisibility(View.VISIBLE);
      statusView.setText(isPortOpen ? R.string.port_is_open : R.string.port_is_closed);
      statusView.setTextColor(isPortOpen ? mContext.getResources().getColor(R.color.evercam_blue) : Color.RED);
    }
  }
}",0.9365962180200222
33992,"private void showShowcaseView(){
  if (showcaseView != null) {
    showcaseView.hide();
    showcaseView=null;
  }
  showcaseView=new MaterialShowcaseView.Builder(this).setTarget(scanButton).setDismissText(R.string.showcase_dismiss_text).setDismissTextSize(17).setShapePadding(30).setContentTextColor(getResources().getColor(R.color.white)).setMaskColour(getResources().getColor(R.color.black_semi_transparent)).setContentText(R.string.confirmSignUp).setContentTextSize(17).setDismissOnTargetTouch(true).show();
}","private void showShowcaseView(){
  new MaterialShowcaseView.Builder(this).setTarget(manuallyAddButton).setDismissText(R.string.showcase_dismiss_text).setDismissTextSize(17).setShapePadding(30).setContentTextColor(getResources().getColor(R.color.white)).setMaskColour(getResources().getColor(R.color.black_semi_transparent)).setContentText(R.string.confirmSignUp).setContentTextSize(17).setDismissOnTargetTouch(true).setListener(new IShowcaseListener(){
    @Override public void onShowcaseDisplayed(    MaterialShowcaseView showcaseView){
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR);
    }
    @Override public void onShowcaseDismissed(    MaterialShowcaseView showcaseView){
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
    }
  }
).show();
}",0.6065699006875478
33993,"@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mDrawerToggle.onConfigurationChanged(newConfig);
  resizeCameras();
  showShowcaseView();
}","@Override public void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  mDrawerToggle.onConfigurationChanged(newConfig);
  resizeCameras();
}",0.9438775510204082
33994,"/** 
 * Add all camera views to the main grid page
 * @param reloadImages   reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public void addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  camerasPerRow=recalculateCameraPerRow();
  io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
  int screen_width=readScreenWidth(this);
  int index=0;
  if (AppData.evercamCameraList.size() <= 1 && showThumbnails)   showShowcaseViewForFirstTimeUser();
  for (  final EvercamCamera evercamCamera : AppData.evercamCameraList) {
    if (!PrefsManager.showOfflineCameras(this) && !evercamCamera.isActive()) {
      continue;
    }
    final LinearLayout cameraListLayout=new LinearLayout(this);
    int indexPlus=index + 1;
    if (reloadImages)     evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
    final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
    params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
    params.width=params.width - 1;
    params.height=(int)(params.width / (1.25));
    params.setMargins(0,0,0,0);
    cameraLayout.setLayoutParams(params);
    cameraListLayout.addView(cameraLayout);
    camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
    index++;
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        Rect cameraBounds=new Rect();
        cameraListLayout.getHitRect(cameraBounds);
        Rect offlineIconBounds=cameraLayout.getOfflineIconBounds();
        int layoutWidth=cameraBounds.right - cameraBounds.left;
        int offlineStartsAt=offlineIconBounds.left;
        int offlineIconWidth=offlineIconBounds.right - offlineIconBounds.left;
        if (layoutWidth > offlineStartsAt + offlineIconWidth * 2) {
          cameraLayout.showOfflineIconAsFloat=false;
        }
 else {
          cameraLayout.showOfflineIconAsFloat=true;
        }
      }
    }
,200);
  }
  if (refresh != null)   refresh.setActionView(null);
}","/** 
 * Add all camera views to the main grid page
 * @param reloadImages   reload camera images or not
 * @param showThumbnails show thumbnails that returned by Evercam or not, if trueand if thumbnail not available, it will request latest snapshot instead. If false, it will request neither thumbnail nor latest snapshot.
 */
public void addAllCameraViews(final boolean reloadImages,final boolean showThumbnails){
  camerasPerRow=recalculateCameraPerRow();
  io.evercam.androidapp.custom.FlowLayout camsLineView=(io.evercam.androidapp.custom.FlowLayout)this.findViewById(R.id.cameras_flow_layout);
  int screen_width=readScreenWidth(this);
  int index=0;
  for (  final EvercamCamera evercamCamera : AppData.evercamCameraList) {
    if (!PrefsManager.showOfflineCameras(this) && !evercamCamera.isActive()) {
      continue;
    }
    final LinearLayout cameraListLayout=new LinearLayout(this);
    int indexPlus=index + 1;
    if (reloadImages)     evercamCamera.loadingStatus=ImageLoadingStatus.not_started;
    final CameraLayout cameraLayout=new CameraLayout(this,evercamCamera,showThumbnails);
    LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT,android.view.ViewGroup.LayoutParams.WRAP_CONTENT);
    params.width=((indexPlus % camerasPerRow == 0) ? (screen_width - (index % camerasPerRow) * (screen_width / camerasPerRow)) : screen_width / camerasPerRow);
    params.width=params.width - 1;
    params.height=(int)(params.width / (1.25));
    params.setMargins(0,0,0,0);
    cameraLayout.setLayoutParams(params);
    cameraListLayout.addView(cameraLayout);
    camsLineView.addView(cameraListLayout,new io.evercam.androidapp.custom.FlowLayout.LayoutParams(0,0));
    index++;
    new Handler().postDelayed(new Runnable(){
      @Override public void run(){
        Rect cameraBounds=new Rect();
        cameraListLayout.getHitRect(cameraBounds);
        Rect offlineIconBounds=cameraLayout.getOfflineIconBounds();
        int layoutWidth=cameraBounds.right - cameraBounds.left;
        int offlineStartsAt=offlineIconBounds.left;
        int offlineIconWidth=offlineIconBounds.right - offlineIconBounds.left;
        if (layoutWidth > offlineStartsAt + offlineIconWidth * 2) {
          cameraLayout.showOfflineIconAsFloat=false;
        }
 else {
          cameraLayout.showOfflineIconAsFloat=true;
        }
      }
    }
,200);
  }
  if (AppData.evercamCameraList.size() <= 1 && showThumbnails)   showShowcaseViewForFirstTimeUser();
  if (refresh != null)   refresh.setActionView(null);
}",0.9605622803592346
33995,"private void updateNavDrawerUserInfo(){
  AppUser defaultUser=AppData.defaultUser;
  if (defaultUser != null) {
    String gravatarUrl=Commons.getGravatarUrl(defaultUser.getEmail());
    mUserNameTextView.setText(defaultUser.getFirstName() + ""String_Node_Str"" + defaultUser.getLastName());
    mUserEmailTextView.setText(defaultUser.getEmail());
    Picasso.with(this).load(gravatarUrl).noFade().placeholder(R.drawable.ic_profile).into(mCircleImageView);
  }
  mAccountNavAdapter.updateUserList(AppData.appUsers);
  mAccountNavAdapter.notifyDataSetChanged();
}","private void updateNavDrawerUserInfo(){
  AppUser defaultUser=AppData.defaultUser;
  if (defaultUser != null) {
    String gravatarUrl=Commons.getGravatarUrl(defaultUser.getEmail());
    mUserNameTextView.setText(defaultUser.getFirstName() + ""String_Node_Str"" + defaultUser.getLastName());
    mUserEmailTextView.setText(defaultUser.getEmail());
    Picasso.with(this).load(gravatarUrl).noFade().placeholder(R.drawable.ic_profile).into(mCircleImageView);
  }
  updateUserListInNavDrawer();
  bindAccountList(mUserListInNavDrawer);
}",0.8754578754578755
33996,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final AppUser appUser=(AppUser)mAccountListView.getItemAtPosition(position);
  new CheckKeyExpirationTaskNavDrawer(appUser).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final AppUser appUser=mUserListInNavDrawer.get(position);
  Log.d(TAG,appUser.toString());
  new CheckKeyExpirationTaskNavDrawer(appUser).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",0.8065693430656934
33997,"private void initNavigationDrawer(){
  mNavSettingsItemLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_settings_layout);
  mNavFeedbackItemLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_feedback_layout);
  mNavScanLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_scan_layout);
  mNavExploreLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_explore_layout);
  mNavTitleLayout=(FrameLayout)findViewById(R.id.navigation_drawer_title_layout);
  mNavBodyScrollView=(ScrollView)findViewById(R.id.drawer_body_scroll_view);
  mNavBodyAccountView=(FrameLayout)findViewById(R.id.drawer_body_account_view);
  mNavAddAccountLayout=(FrameLayout)findViewById(R.id.drawer_account_items_add_layout);
  mNavManageAccountLayout=(FrameLayout)findViewById(R.id.drawer_account_items_manage_layout);
  mUserNameTextView=(TextView)findViewById(R.id.navigation_drawer_title_user_name);
  mUserEmailTextView=(TextView)findViewById(R.id.navigation_drawer_title_user_email);
  mTriangleImageView=(ImageView)findViewById(R.id.image_view_triangle);
  mCircleImageView=(CircleImageView)findViewById(R.id.navigation_drawer_account_profile_image);
  mAccountListView=(ListView)findViewById(R.id.list_view_account_email);
  SwitchCompat offlineSwitch=(SwitchCompat)findViewById(R.id.switch_compat_offline);
  offlineSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      PrefsManager.setShowOfflineCamera(getApplicationContext(),isChecked);
      removeAllCameraViews();
      addAllCameraViews(false,true);
    }
  }
);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_opened,R.string.navigation_drawer_closed){
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,0);
      if (slideOffset != 0) {
        showAccountView(false);
        updateNavDrawerUserInfo();
      }
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  mNavSettingsItemLayout.setOnClickListener(this);
  mNavFeedbackItemLayout.setOnClickListener(this);
  mNavScanLayout.setOnClickListener(this);
  mNavExploreLayout.setOnClickListener(this);
  mNavAddAccountLayout.setOnClickListener(this);
  mNavManageAccountLayout.setOnClickListener(this);
  mNavTitleLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mTriangleImageView.getRotation() == 0) {
        showAccountView(true);
      }
 else       if (mTriangleImageView.getRotation() == 180) {
        showAccountView(false);
      }
    }
  }
);
  mAccountNavAdapter=new AccountNavAdapter(this,R.layout.item_list_nav_account,R.id.drawer_account_user_textView,AppData.appUsers);
  mAccountListView.setAdapter(mAccountNavAdapter);
  mAccountListView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final AppUser appUser=(AppUser)mAccountListView.getItemAtPosition(position);
      new CheckKeyExpirationTaskNavDrawer(appUser).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
}","private void initNavigationDrawer(){
  mNavSettingsItemLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_settings_layout);
  mNavFeedbackItemLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_feedback_layout);
  mNavScanLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_scan_layout);
  mNavExploreLayout=(FrameLayout)findViewById(R.id.navigation_drawer_items_explore_layout);
  mNavTitleLayout=(FrameLayout)findViewById(R.id.navigation_drawer_title_layout);
  mNavBodyScrollView=(ScrollView)findViewById(R.id.drawer_body_scroll_view);
  mNavBodyAccountView=(FrameLayout)findViewById(R.id.drawer_body_account_view);
  mNavAddAccountLayout=(FrameLayout)findViewById(R.id.drawer_account_items_add_layout);
  mNavManageAccountLayout=(FrameLayout)findViewById(R.id.drawer_account_items_manage_layout);
  mUserNameTextView=(TextView)findViewById(R.id.navigation_drawer_title_user_name);
  mUserEmailTextView=(TextView)findViewById(R.id.navigation_drawer_title_user_email);
  mTriangleImageView=(ImageView)findViewById(R.id.image_view_triangle);
  mCircleImageView=(CircleImageView)findViewById(R.id.navigation_drawer_account_profile_image);
  mAccountListView=(ListView)findViewById(R.id.list_view_account_email);
  SwitchCompat offlineSwitch=(SwitchCompat)findViewById(R.id.switch_compat_offline);
  offlineSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      PrefsManager.setShowOfflineCamera(getApplicationContext(),isChecked);
      removeAllCameraViews();
      addAllCameraViews(false,true);
    }
  }
);
  mDrawerLayout=(DrawerLayout)findViewById(R.id.drawer_layout);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,mToolbar,R.string.navigation_drawer_opened,R.string.navigation_drawer_closed){
    @Override public void onDrawerSlide(    View drawerView,    float slideOffset){
      super.onDrawerSlide(drawerView,0);
      if (slideOffset > 0 && !mIsDrawerUpdated) {
        showAccountView(false);
        updateNavDrawerUserInfo();
        mIsDrawerUpdated=true;
      }
      if (slideOffset == 0) {
        mIsDrawerUpdated=false;
      }
    }
  }
;
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  mDrawerToggle.syncState();
  mNavSettingsItemLayout.setOnClickListener(this);
  mNavFeedbackItemLayout.setOnClickListener(this);
  mNavScanLayout.setOnClickListener(this);
  mNavExploreLayout.setOnClickListener(this);
  mNavAddAccountLayout.setOnClickListener(this);
  mNavManageAccountLayout.setOnClickListener(this);
  mNavTitleLayout.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mTriangleImageView.getRotation() == 0) {
        showAccountView(true);
      }
 else       if (mTriangleImageView.getRotation() == 180) {
        showAccountView(false);
      }
    }
  }
);
  updateUserListInNavDrawer();
  bindAccountList(mUserListInNavDrawer);
}",0.8675684177414281
33998,"@Override public void onDrawerSlide(View drawerView,float slideOffset){
  super.onDrawerSlide(drawerView,0);
  if (slideOffset != 0) {
    showAccountView(false);
    updateNavDrawerUserInfo();
  }
}","@Override public void onDrawerSlide(View drawerView,float slideOffset){
  super.onDrawerSlide(drawerView,0);
  if (slideOffset > 0 && !mIsDrawerUpdated) {
    showAccountView(false);
    updateNavDrawerUserInfo();
    mIsDrawerUpdated=true;
  }
  if (slideOffset == 0) {
    mIsDrawerUpdated=false;
  }
}",0.7793240556660039
33999,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_manage_account);
  setUpDefaultToolbar();
  progressDialog=new CustomProgressDialog(ManageAccountsActivity.this);
  ListView listview=(ListView)findViewById(R.id.email_list);
  if (AppData.defaultUser != null) {
    oldDefaultUser=AppData.defaultUser.getUsername();
  }
  showAllAccounts();
  listview.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListView listview=(ListView)findViewById(R.id.email_list);
      final AppUser user=(AppUser)listview.getItemAtPosition(position);
      if (user.getId() < 0) {
        startActivity(new Intent(ManageAccountsActivity.this,OnBoardingActivity.class));
        return;
      }
      final View optionListView=getLayoutInflater().inflate(R.layout.dialog_manage_account_options,null);
      final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitle(ManageAccountsActivity.this,optionListView);
      dialog.show();
      Button openDefault=(Button)optionListView.findViewById(R.id.btn_open_account);
      Button delete=(Button)optionListView.findViewById(R.id.btn_delete_account);
      openDefault.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          new CheckKeyExpirationTaskAccount(user,optionListView,dialog).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
);
      delete.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface warningDialog,            int which){
              if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
                CamerasActivity.logOutDefaultUser(ManageAccountsActivity.this);
              }
 else {
                new EvercamAccount(ManageAccountsActivity.this).remove(user.getEmail(),new AccountManagerCallback<Boolean>(){
                  @Override public void run(                  AccountManagerFuture<Boolean> future){
                    try {
                      boolean isAccountDeleted=future.getResult();
                      if (isAccountDeleted) {
                        showAllAccounts();
                      }
                    }
 catch (                    OperationCanceledException e) {
                      e.printStackTrace();
                    }
catch (                    IOException e) {
                      e.printStackTrace();
                    }
catch (                    AuthenticatorException e) {
                      e.printStackTrace();
                    }
                  }
                }
);
              }
              dialog.dismiss();
            }
          }
,R.string.msg_confirm_remove).show();
        }
      }
);
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_manage_account);
  setUpDefaultToolbar();
  progressDialog=new CustomProgressDialog(ManageAccountsActivity.this);
  ListView listview=(ListView)findViewById(R.id.email_list);
  if (AppData.defaultUser != null) {
    oldDefaultUser=AppData.defaultUser.getUsername();
  }
  showAllAccounts();
  listview.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListView listview=(ListView)findViewById(R.id.email_list);
      final AppUser user=(AppUser)listview.getItemAtPosition(position);
      if (user.getId() < 0) {
        startActivity(new Intent(ManageAccountsActivity.this,LoginActivity.class));
        return;
      }
      final View optionListView=getLayoutInflater().inflate(R.layout.dialog_manage_account_options,null);
      final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitle(ManageAccountsActivity.this,optionListView);
      dialog.show();
      Button openDefault=(Button)optionListView.findViewById(R.id.btn_open_account);
      Button delete=(Button)optionListView.findViewById(R.id.btn_delete_account);
      openDefault.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          new CheckKeyExpirationTaskAccount(user,optionListView,dialog).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
        }
      }
);
      delete.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface warningDialog,            int which){
              if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
                CamerasActivity.logOutDefaultUser(ManageAccountsActivity.this);
              }
 else {
                new EvercamAccount(ManageAccountsActivity.this).remove(user.getEmail(),new AccountManagerCallback<Boolean>(){
                  @Override public void run(                  AccountManagerFuture<Boolean> future){
                    try {
                      boolean isAccountDeleted=future.getResult();
                      if (isAccountDeleted) {
                        showAllAccounts();
                      }
                    }
 catch (                    OperationCanceledException e) {
                      e.printStackTrace();
                    }
catch (                    IOException e) {
                      e.printStackTrace();
                    }
catch (                    AuthenticatorException e) {
                      e.printStackTrace();
                    }
                  }
                }
);
              }
              dialog.dismiss();
            }
          }
,R.string.msg_confirm_remove).show();
        }
      }
);
    }
  }
);
}",0.9975397736591768
34000,"@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListView listview=(ListView)findViewById(R.id.email_list);
  final AppUser user=(AppUser)listview.getItemAtPosition(position);
  if (user.getId() < 0) {
    startActivity(new Intent(ManageAccountsActivity.this,OnBoardingActivity.class));
    return;
  }
  final View optionListView=getLayoutInflater().inflate(R.layout.dialog_manage_account_options,null);
  final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitle(ManageAccountsActivity.this,optionListView);
  dialog.show();
  Button openDefault=(Button)optionListView.findViewById(R.id.btn_open_account);
  Button delete=(Button)optionListView.findViewById(R.id.btn_delete_account);
  openDefault.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new CheckKeyExpirationTaskAccount(user,optionListView,dialog).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  delete.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface warningDialog,        int which){
          if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
            CamerasActivity.logOutDefaultUser(ManageAccountsActivity.this);
          }
 else {
            new EvercamAccount(ManageAccountsActivity.this).remove(user.getEmail(),new AccountManagerCallback<Boolean>(){
              @Override public void run(              AccountManagerFuture<Boolean> future){
                try {
                  boolean isAccountDeleted=future.getResult();
                  if (isAccountDeleted) {
                    showAllAccounts();
                  }
                }
 catch (                OperationCanceledException e) {
                  e.printStackTrace();
                }
catch (                IOException e) {
                  e.printStackTrace();
                }
catch (                AuthenticatorException e) {
                  e.printStackTrace();
                }
              }
            }
);
          }
          dialog.dismiss();
        }
      }
,R.string.msg_confirm_remove).show();
    }
  }
);
}","@Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  ListView listview=(ListView)findViewById(R.id.email_list);
  final AppUser user=(AppUser)listview.getItemAtPosition(position);
  if (user.getId() < 0) {
    startActivity(new Intent(ManageAccountsActivity.this,LoginActivity.class));
    return;
  }
  final View optionListView=getLayoutInflater().inflate(R.layout.dialog_manage_account_options,null);
  final AlertDialog dialog=CustomedDialog.getAlertDialogNoTitle(ManageAccountsActivity.this,optionListView);
  dialog.show();
  Button openDefault=(Button)optionListView.findViewById(R.id.btn_open_account);
  Button delete=(Button)optionListView.findViewById(R.id.btn_delete_account);
  openDefault.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      new CheckKeyExpirationTaskAccount(user,optionListView,dialog).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }
  }
);
  delete.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      CustomedDialog.getConfirmRemoveDialog(ManageAccountsActivity.this,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface warningDialog,        int which){
          if (AppData.appUsers != null && AppData.appUsers.size() == 2) {
            CamerasActivity.logOutDefaultUser(ManageAccountsActivity.this);
          }
 else {
            new EvercamAccount(ManageAccountsActivity.this).remove(user.getEmail(),new AccountManagerCallback<Boolean>(){
              @Override public void run(              AccountManagerFuture<Boolean> future){
                try {
                  boolean isAccountDeleted=future.getResult();
                  if (isAccountDeleted) {
                    showAllAccounts();
                  }
                }
 catch (                OperationCanceledException e) {
                  e.printStackTrace();
                }
catch (                IOException e) {
                  e.printStackTrace();
                }
catch (                AuthenticatorException e) {
                  e.printStackTrace();
                }
              }
            }
);
          }
          dialog.dismiss();
        }
      }
,R.string.msg_confirm_remove).show();
    }
  }
);
}",0.996766544513904
