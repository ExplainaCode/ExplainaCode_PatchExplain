record_number,buggy_code,fixed_code,code_similarity
190001,"private boolean addEdgeAttributes(EdgeDraft edge,String prefix,ArrayList list){
  boolean ret=true;
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      continue;
    }
    if (value instanceof ArrayList) {
      ret=addEdgeAttributes(edge,prefix + ""String_Node_Str"" + key,(ArrayList)value);
      if (!ret) {
        break;
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        EdgeDraft.EdgeType type=((Double)value) == 1 ? EdgeDraft.EdgeType.DIRECTED : EdgeDraft.EdgeType.UNDIRECTED;
        edge.setType(type);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str"",edge.toString()),Issue.Level.WARNING));
      }
    }
 else {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      AttributeColumn column=null;
      if ((column=edgeClass.getColumn(key)) == null) {
        column=edgeClass.addColumn(key,AttributeType.STRING);
        report.log(""String_Node_Str"" + column.getTitle() + ""String_Node_Str""+ column.getType()+ ""String_Node_Str"");
      }
      edge.addAttributeValue(column,value.toString());
    }
  }
  return ret;
}","private boolean addEdgeAttributes(EdgeDraft edge,String prefix,ArrayList list){
  boolean ret=true;
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)|| ""String_Node_Str"".equals(key)) {
      continue;
    }
    if (value instanceof ArrayList) {
      ret=addEdgeAttributes(edge,prefix + ""String_Node_Str"" + key,(ArrayList)value);
      if (!ret) {
        break;
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        EdgeDraft.EdgeType type=((Double)value) == 1 ? EdgeDraft.EdgeType.DIRECTED : EdgeDraft.EdgeType.UNDIRECTED;
        edge.setType(type);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGML.class,""String_Node_Str"",edge.toString()),Issue.Level.WARNING));
      }
    }
 else {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      AttributeColumn column=null;
      if ((column=edgeClass.getColumn(key)) == null) {
        column=edgeClass.addColumn(key,AttributeType.STRING);
        report.log(""String_Node_Str"" + column.getTitle() + ""String_Node_Str""+ column.getType()+ ""String_Node_Str"");
      }
      edge.addAttributeValue(column,value.toString());
    }
  }
  return ret;
}",0.9884643114635904
190002,"private boolean parseEdge(ArrayList list){
  EdgeDraft edgeDraft=container.factory().newEdgeDraft();
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key)) {
      NodeDraft source=container.getNode(value.toString());
      edgeDraft.setSource(source);
    }
 else     if (""String_Node_Str"".equals(key)) {
      NodeDraft target=container.getNode(value.toString());
      edgeDraft.setTarget(target);
    }
 else     if (""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        edgeDraft.setWeight(((Double)value).floatValue());
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      edgeDraft.setLabel(value.toString());
    }
  }
  boolean ret=addEdgeAttributes(edgeDraft,""String_Node_Str"",list);
  container.addEdge(edgeDraft);
  return ret;
}","private boolean parseEdge(ArrayList list){
  EdgeDraft edgeDraft=container.factory().newEdgeDraft();
  for (int i=0; i < list.size(); i+=2) {
    String key=(String)list.get(i);
    Object value=list.get(i + 1);
    if (""String_Node_Str"".equals(key)) {
      NodeDraft source=container.getNode(value.toString());
      edgeDraft.setSource(source);
    }
 else     if (""String_Node_Str"".equals(key)) {
      NodeDraft target=container.getNode(value.toString());
      edgeDraft.setTarget(target);
    }
 else     if (""String_Node_Str"".equals(key) || ""String_Node_Str"".equals(key)) {
      if (value instanceof Double) {
        edgeDraft.setWeight(((Double)value).floatValue());
      }
    }
 else     if (""String_Node_Str"".equals(key)) {
      edgeDraft.setLabel(value.toString());
    }
  }
  boolean ret=addEdgeAttributes(edgeDraft,""String_Node_Str"",list);
  container.addEdge(edgeDraft);
  return ret;
}",0.9814710836608648
190003,"private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  HierarchicalGraph hg=(HierarchicalGraph)graph;
  for (  Edge e : hg.getEdgesAndMetaEdges()) {
    edgeColors=edgeColors || e.getEdgeData().r() != -1;
    edgeLabels=edgeLabels || (e.getEdgeData().getLabel() != null && !e.getEdgeData().getLabel().isEmpty());
  }
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    if (cancel) {
      break;
    }
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  if (!cancel) {
    writer.append(stringBuilder);
  }
  Progress.finish(progressTicket);
}","private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    if (cancel) {
      break;
    }
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  HierarchicalGraph hg=(HierarchicalGraph)graph;
  for (  Edge e : hg.getEdgesAndMetaEdges()) {
    edgeColors=edgeColors || e.getEdgeData().r() != -1;
    edgeLabels=edgeLabels || (e.getEdgeData().getLabel() != null && !e.getEdgeData().getLabel().isEmpty());
  }
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    if (cancel) {
      break;
    }
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : edgeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      val=DynamicUtilities.getDynamicValue(val,visibleInterval.getLow(),visibleInterval.getHigh());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlockAll();
  if (!cancel) {
    writer.append(stringBuilder);
  }
  Progress.finish(progressTicket);
}",0.9995075508864084
190004,"private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return edgeLabels;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight(visibleInterval.getLow(),visibleInterval.getHigh()));
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors && edgeColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      if (edge.getEdgeData().r() != -1) {
        String quote=""String_Node_Str"";
        builder.append(quote);
        builder.append((int)(edge.getEdgeData().r() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().g() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().b() * 255f));
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}","private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return edgeLabels;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight(visibleInterval.getLow(),visibleInterval.getHigh()));
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors && edgeColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      if (edge.getEdgeData().r() != -1) {
        String quote=""String_Node_Str"";
        builder.append(quote);
        builder.append((int)(edge.getEdgeData().r() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().g() * 255f));
        builder.append(""String_Node_Str"");
        builder.append((int)(edge.getEdgeData().b() * 255f));
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  EdgeColumnsGDF edgeIdColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.VARCHAR){
    @Override public boolean isEnable(){
      return false;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[7];
  defaultEdgeColumnsGDFs[0]=edgeIdColumn;
  defaultEdgeColumnsGDFs[1]=labelColumn;
  defaultEdgeColumnsGDFs[2]=weightColumn;
  defaultEdgeColumnsGDFs[3]=directedColumn;
  defaultEdgeColumnsGDFs[4]=colorColumn;
  defaultEdgeColumnsGDFs[5]=visibleColumn;
  defaultEdgeColumnsGDFs[6]=labelVisibleColumn;
}",0.9403544648943422
190005,"private boolean isEdgeDefaultColumn(String id){
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.title.equals(id.toLowerCase())) {
      return true;
    }
  }
  return false;
}","private boolean isEdgeDefaultColumn(String id){
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.title.equalsIgnoreCase(id)) {
      return true;
    }
  }
  return false;
}",0.9578947368421052
190006,"private boolean isNodeDefaultColumn(String id){
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.title.equals(id.toLowerCase())) {
      return true;
    }
  }
  return false;
}","private boolean isNodeDefaultColumn(String id){
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.title.equalsIgnoreCase(id)) {
      return true;
    }
  }
  return false;
}",0.9578947368421052
190007,"public WorkspaceInformationImpl(Project project,String name){
  this.project=project;
  this.name=name;
}","public WorkspaceInformationImpl(Project project,String name){
  this.project=project;
  this.name=name;
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    count=0;
  }
  count++;
}",0.5898876404494382
190008,"public SearchOptions(Edge[] edgesToSearch,Pattern regexPattern,boolean onlyMatchWholeAttributeValue){
  this.edgesToSearch=edgesToSearch;
  this.regexPattern=regexPattern;
  this.onlyMatchWholeAttributeValue=onlyMatchWholeAttributeValue;
  searchNodes=false;
}","/** 
 * Setup options to search on edges with the given pattern. If edgesToSearch is null, all edges of the graph will be used.
 * @param edgesToSearch
 * @param regexPattern
 * @param onlyMatchWholeAttributeValue
 */
public SearchOptions(Edge[] edgesToSearch,Pattern regexPattern,boolean onlyMatchWholeAttributeValue){
  this.edgesToSearch=edgesToSearch;
  this.regexPattern=regexPattern;
  this.onlyMatchWholeAttributeValue=onlyMatchWholeAttributeValue;
  searchNodes=false;
}",0.7046070460704607
190009,"private SearchResult findOnNodes(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Node[] nodes=searchOptions.getNodesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < nodes.length; rowIndex++) {
    if (!gec.isNodeInGraph(nodes[rowIndex])) {
      continue;
    }
    row=(AttributeRow)nodes[rowIndex].getNodeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      value=row.getValue(columnIndex);
      result=matchRegex(value,searchOptions,rowIndex,columnIndex);
      if (result != null) {
        result.setFoundNode(nodes[rowIndex]);
        return result;
      }
      searchOptions.setRegionStart(0);
    }
    columnIndex=0;
  }
  return result;
}","private SearchResult findOnNodes(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Set<Integer> columnsToSearch=searchOptions.getColumnsToSearch();
  boolean searchAllColumns=columnsToSearch.isEmpty();
  Node[] nodes=searchOptions.getNodesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < nodes.length; rowIndex++) {
    if (!gec.isNodeInGraph(nodes[rowIndex])) {
      continue;
    }
    row=(AttributeRow)nodes[rowIndex].getNodeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      if (searchAllColumns || columnsToSearch.contains(columnIndex)) {
        value=row.getValue(columnIndex);
        result=matchRegex(value,searchOptions,rowIndex,columnIndex);
        if (result != null) {
          result.setFoundNode(nodes[rowIndex]);
          return result;
        }
      }
      searchOptions.setRegionStart(0);
    }
    searchOptions.setRegionStart(0);
    columnIndex=0;
  }
  return result;
}",0.8550649350649351
190010,"private SearchResult findOnEdges(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Edge[] edges=searchOptions.getEdgesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < edges.length; rowIndex++) {
    if (!gec.isEdgeInGraph(edges[rowIndex])) {
      continue;
    }
    row=(AttributeRow)edges[rowIndex].getEdgeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      value=row.getValue(columnIndex);
      result=matchRegex(value,searchOptions,rowIndex,columnIndex);
      if (result != null) {
        result.setFoundEdge(edges[rowIndex]);
        return result;
      }
      searchOptions.setRegionStart(0);
    }
    columnIndex=0;
  }
  return result;
}","private SearchResult findOnEdges(SearchOptions searchOptions,int rowIndex,int columnIndex){
  GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
  SearchResult result=null;
  Set<Integer> columnsToSearch=searchOptions.getColumnsToSearch();
  boolean searchAllColumns=columnsToSearch.isEmpty();
  Edge[] edges=searchOptions.getEdgesToSearch();
  AttributeRow row;
  Object value;
  for (; rowIndex < edges.length; rowIndex++) {
    if (!gec.isEdgeInGraph(edges[rowIndex])) {
      continue;
    }
    row=(AttributeRow)edges[rowIndex].getEdgeData().getAttributes();
    for (; columnIndex < row.countValues(); columnIndex++) {
      if (searchAllColumns || columnsToSearch.contains(columnIndex)) {
        value=row.getValue(columnIndex);
        result=matchRegex(value,searchOptions,rowIndex,columnIndex);
        if (result != null) {
          result.setFoundEdge(edges[rowIndex]);
          return result;
        }
      }
      searchOptions.setRegionStart(0);
    }
    searchOptions.setRegionStart(0);
    columnIndex=0;
  }
  return result;
}",0.8550649350649351
190011,"/** 
 * <p>Adds a new column to the specified table with the given title and type of column.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table to add the column
 * @param title Title for the new column, can't be repeated in the table, null or empty string
 * @param type Type for the new column
 * @return The created column or null if title is not correct
 */
AttributeColumn addAttributeColumn(AttributeTable table,String title,AttributeType type);","/** 
 * <p>Adds a new column to the specified table with the given title and type of column.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table to add the column
 * @param title Title for the new column, can't be repeated in the table, null or empty string
 * @param type Type for the new column
 * @return The created column or null if the column could not be created
 */
AttributeColumn addAttributeColumn(AttributeTable table,String title,AttributeType type);",0.9658060013956734
190012,"/** 
 * <p>Duplicates a given column of a table and copies al row values.</p> <p>If the <code>AttributeType</code> for the new column is different from the old column type, it will try to parse each value. If it is not possible, the value will be set to null.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table of the column to duplicate
 * @param column Column to duplicate
 * @param title Title for the new column
 * @param type AttributeType for the new column
 * @return The created column or null if title is not correct
 */
AttributeColumn duplicateColumn(AttributeTable table,AttributeColumn column,String title,AttributeType type);","/** 
 * <p>Duplicates a given column of a table and copies al row values.</p> <p>If the <code>AttributeType</code> for the new column is different from the old column type, it will try to parse each value. If it is not possible, the value will be set to null.</p> <p>The title for the new column can't be repeated in the table, null or an empty string.</p>. <p>The id of the column will be set to the title.</p> <p>The <code>AttributeOrigin</code> of the column will be set to <code>DATA</code>.</p> <p>Default column value will be set to null.</p>
 * @param table Table of the column to duplicate
 * @param column Column to duplicate
 * @param title Title for the new column
 * @param type AttributeType for the new column
 * @return The created column or null if the column could not be created
 */
AttributeColumn duplicateColumn(AttributeTable table,AttributeColumn column,String title,AttributeType type);",0.972913211719182
190013,"private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (exportHierarchy && graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}","private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColorR(document,n);
    nodeE.appendChild(colorE);
    colorE=createNodeColorG(document,n);
    nodeE.appendChild(colorE);
    colorE=createNodeColorB(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (exportHierarchy && graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}",0.9562874251497006
190014,"private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}","private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorRKeyE=document.createElement(""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorRKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorRKeyE);
    Element colorGKeyE=document.createElement(""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorGKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorGKeyE);
    Element colorBKeyE=document.createElement(""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorBKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorBKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}",0.9197463371965888
190015,"private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty()) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.9872195399034364
190016,"/** 
 * <p>Creates and edge between source and target node (if it does not already exist), directed or undirected.</p> <p>If a edge with the given id already exists, no edge will be created.</p> <p>This will not create a self-loop.</p>
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);","/** 
 * <p>Creates and edge between source and target node (if it does not already exist), directed or undirected.</p> <p>If a edge with the given id already exists, no edge will be created.</p>
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);",0.9570680628272252
190017,"public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      source=graph.getNode(sourceId);
      target=graph.getNode(targetId);
      if ((source == null || target == null) && !createNewNodes) {
        continue;
      }
 else {
        if (source == null) {
          source=gec.createNode(null,sourceId);
        }
        if (target == null) {
          target=gec.createNode(null,targetId);
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToEdgesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean createNewNodes){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable edges=Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
    String idColumn=null;
    String sourceColumn=null;
    String targetColumn=null;
    String typeColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && sourceColumn == null) {
        sourceColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && targetColumn == null) {
        targetColumn=columnNames[i];
      }
 else       if (columnNames[i].equalsIgnoreCase(""String_Node_Str"") && typeColumn == null) {
        typeColumn=columnNames[i];
      }
 else       if (edges.hasColumn(columnNames[i])) {
        columnsList.add(edges.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(edges,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Edge edge;
    String sourceId, targetId;
    Node source, target;
    String type;
    boolean directed;
    Attributes edgeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      sourceId=reader.get(sourceColumn);
      targetId=reader.get(targetColumn);
      if (sourceId == null || sourceId.isEmpty() || targetId == null || targetId.isEmpty()) {
        continue;
      }
      graph.readLock();
      source=graph.getNode(sourceId);
      graph.readUnlock();
      if (source == null) {
        if (createNewNodes) {
          if (source == null) {
            source=gec.createNode(null,sourceId);
          }
        }
 else {
          continue;
        }
      }
      graph.readLock();
      target=graph.getNode(targetId);
      graph.readUnlock();
      if (target == null) {
        if (createNewNodes) {
          if (target == null) {
            target=gec.createNode(null,targetId);
          }
        }
 else {
          continue;
        }
      }
      if (typeColumn != null) {
        type=reader.get(typeColumn);
        if (type != null) {
          directed=!type.equalsIgnoreCase(""String_Node_Str"");
        }
 else {
          directed=true;
        }
      }
 else {
        directed=true;
      }
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          edge=gec.createEdge(source,target,directed);
        }
 else {
          edge=gec.createEdge(id,source,target,directed);
          if (edge == null) {
            edge=gec.createEdge(source,target,directed);
          }
        }
      }
 else {
        edge=gec.createEdge(source,target,directed);
      }
      if (edge != null) {
        edgeAttributes=edge.getEdgeData().getAttributes();
        for (        AttributeColumn column : columnsList) {
          setAttributeValue(reader.get(column.getTitle()),edgeAttributes,column);
        }
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9276203032300592
190018,"public AttributeColumn createBooleanMatchesColumn(AttributeTable table,AttributeColumn column,String newColumnTitle,Pattern pattern){
  if (pattern != null) {
    AttributeColumn newColumn=addAttributeColumn(table,newColumnTitle,AttributeType.BOOLEAN);
    if (newColumn == null) {
      return null;
    }
    Matcher matcher;
    Object value;
    for (    Attributes row : getTableAttributeRows(table)) {
      value=row.getValue(column.getIndex());
      if (value != null) {
        matcher=pattern.matcher(value.toString());
      }
 else {
        matcher=pattern.matcher(""String_Node_Str"");
      }
      row.setValue(newColumn.getIndex(),new Boolean(matcher.matches()));
    }
    return newColumn;
  }
 else {
    return null;
  }
}","public AttributeColumn createBooleanMatchesColumn(AttributeTable table,AttributeColumn column,String newColumnTitle,Pattern pattern){
  if (pattern != null) {
    AttributeColumn newColumn=addAttributeColumn(table,newColumnTitle,AttributeType.BOOLEAN);
    if (newColumn == null) {
      return null;
    }
    Matcher matcher;
    Object value;
    for (    Attributes row : getTableAttributeRows(table)) {
      value=row.getValue(column.getIndex());
      if (value != null) {
        matcher=pattern.matcher(value.toString());
      }
 else {
        matcher=pattern.matcher(""String_Node_Str"");
      }
      row.setValue(newColumn.getIndex(),matcher.matches());
    }
    return newColumn;
  }
 else {
    return null;
  }
}",0.991162474507138
190019,"public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          node=graph.getNode(id);
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}","public void importCSVToNodesTable(File file,Character separator,Charset charset,String[] columnNames,AttributeType[] columnTypes,boolean assignNewNodeIds){
  if (columnNames == null || columnNames.length == 0) {
    return;
  }
  if (columnTypes == null || columnNames.length != columnTypes.length) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  CsvReader reader=null;
  try {
    AttributeTable nodesTable=Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
    String idColumn=null;
    ArrayList<AttributeColumn> columnsList=new ArrayList<AttributeColumn>();
    for (int i=0; i < columnNames.length; i++) {
      if (columnNames[i].equalsIgnoreCase(""String_Node_Str"")) {
        if (idColumn == null) {
          idColumn=columnNames[i];
        }
      }
 else       if (nodesTable.hasColumn(columnNames[i])) {
        columnsList.add(nodesTable.getColumn(columnNames[i]));
      }
 else {
        columnsList.add(addAttributeColumn(nodesTable,columnNames[i],columnTypes[i]));
      }
    }
    GraphElementsController gec=Lookup.getDefault().lookup(GraphElementsController.class);
    Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
    String id=null;
    Node node;
    Attributes nodeAttributes;
    reader=new CsvReader(new FileInputStream(file),separator,charset);
    reader.readHeaders();
    while (reader.readRecord()) {
      if (idColumn != null) {
        id=reader.get(idColumn);
        if (id == null || id.isEmpty()) {
          node=gec.createNode(null);
        }
 else {
          graph.readLock();
          node=graph.getNode(id);
          graph.readUnlock();
          if (node != null) {
            if (assignNewNodeIds) {
              node=gec.createNode(null);
            }
          }
 else {
            node=gec.createNode(null,id);
          }
        }
      }
 else {
        node=gec.createNode(null);
      }
      nodeAttributes=node.getNodeData().getAttributes();
      for (      AttributeColumn column : columnsList) {
        setAttributeValue(reader.get(column.getTitle()),nodeAttributes,column);
      }
    }
  }
 catch (  FileNotFoundException ex) {
    Exceptions.printStackTrace(ex);
  }
catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
 finally {
    reader.close();
  }
}",0.9808861859252824
190020,"public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (getGraph().getEdge(id) == null) {
    if (source != target) {
      if (directed) {
        newEdge=buildEdge(id,source,target,true);
        if (getDirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
 else {
        newEdge=buildEdge(id,source,target,false);
        if (getUndirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}","public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (source != target) {
    if (directed) {
      newEdge=buildEdge(id,source,target,true);
      if (getDirectedGraph().addEdge(newEdge)) {
        return newEdge;
      }
 else {
        return null;
      }
    }
 else {
      newEdge=buildEdge(id,source,target,false);
      if (getUndirectedGraph().addEdge(newEdge)) {
        return newEdge;
      }
 else {
        return null;
      }
    }
  }
 else {
    return null;
  }
}",0.3278969957081545
190021,"private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}","private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode();
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}",0.9957983193277312
190022,"public EdgeDataTable(){
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  table=new JXTable();
  prepareRenderers();
  table.setHighlighters(HighlighterFactory.createAlternateStriping());
  table.setColumnControlVisible(true);
  table.setSortable(true);
  table.setRowFilter(rowFilter);
  propertiesColumns=new PropertyEdgeDataColumn[FAKE_COLUMNS_COUNT];
  propertiesColumns[0]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getSource().getNodeData().getLabel();
      }
 else {
        return edge.getSource().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[1]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getTarget().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getLabel();
      }
 else {
        return edge.getTarget().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[2]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (edge.isDirected()) {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
 else {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
    }
  }
;
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (table.getSelectedRow() != -1) {
            edc.editEdges(getEdgesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  table.addMouseListener(new PopupAdapter());
  table.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Edge[] selectedEdges=getEdgesFromSelectedRows();
        if (selectedEdges.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          EdgesManipulator del=dlh.getDeleEdgesManipulator();
          if (del != null) {
            del.setup(selectedEdges,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}","public EdgeDataTable(){
  attributeUtils=AttributeUtils.getDefault();
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  table=new JXTable();
  prepareRenderers();
  table.setHighlighters(HighlighterFactory.createAlternateStriping());
  table.setColumnControlVisible(true);
  table.setSortable(true);
  table.setRowFilter(rowFilter);
  propertiesColumns=new PropertyEdgeDataColumn[FAKE_COLUMNS_COUNT];
  propertiesColumns[0]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getSource().getNodeData().getId() + ""String_Node_Str"" + edge.getSource().getNodeData().getLabel();
      }
 else {
        return edge.getSource().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[1]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (showEdgesNodesLabels) {
        return edge.getTarget().getNodeData().getId() + ""String_Node_Str"" + edge.getTarget().getNodeData().getLabel();
      }
 else {
        return edge.getTarget().getNodeData().getId();
      }
    }
  }
;
  propertiesColumns[2]=new PropertyEdgeDataColumn(NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"")){
    @Override public Class getColumnClass(){
      return String.class;
    }
    @Override public Object getValueFor(    Edge edge){
      if (edge.isDirected()) {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
 else {
        return NbBundle.getMessage(EdgeDataTable.class,""String_Node_Str"");
      }
    }
  }
;
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (table.getSelectedRow() != -1) {
            edc.editEdges(getEdgesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  table.addMouseListener(new PopupAdapter());
  table.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Edge[] selectedEdges=getEdgesFromSelectedRows();
        if (selectedEdges.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          EdgesManipulator del=dlh.getDeleEdgesManipulator();
          if (del != null) {
            del.setup(selectedEdges,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}",0.9922402159244263
190023,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (AttributeUtils.getDefault().isNumberListColumn(column) || AttributeUtils.getDefault().isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (attributeUtils.isNumberListColumn(column) || attributeUtils.isDynamicNumberColumn(column))) {
    return value;
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return value;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return value;
  }
 else {
    if (value != null) {
      if (value instanceof DynamicType) {
        return ((DynamicType)value).toString(currentTimeFormat == TimeFormat.DOUBLE);
      }
 else {
        return value.toString();
      }
    }
 else {
      return null;
    }
  }
}",0.9328214971209212
190024,"public Class getColumnClass(){
  if (useSparklines && AttributeUtils.getDefault().isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && AttributeUtils.getDefault().isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else {
    return String.class;
  }
}","public Class getColumnClass(){
  if (useSparklines && attributeUtils.isNumberListColumn(column)) {
    return NumberList.class;
  }
 else   if (useSparklines && attributeUtils.isDynamicNumberColumn(column)) {
    return column.getType().getType();
  }
 else   if (column.getType() == AttributeType.TIME_INTERVAL) {
    return TimeInterval.class;
  }
 else   if (attributeUtils.isNumberColumn(column)) {
    return column.getType().getType();
  }
 else {
    return String.class;
  }
}",0.8596881959910914
190025,"public NodeDataTable(){
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
  prepareRenderers();
  outlineTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (outlineTable.getSelectedRow() != -1) {
            edc.editNodes(getNodesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  outlineTable.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Node[] selectedNodes=getNodesFromSelectedRows();
        if (selectedNodes.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          NodesManipulator del=dlh.getDeleteNodesManipulator();
          if (del != null) {
            del.setup(selectedNodes,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}","public NodeDataTable(){
  attributeUtils=AttributeUtils.getDefault();
  attributeColumnsController=Lookup.getDefault().lookup(AttributeColumnsController.class);
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
  prepareRenderers();
  outlineTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (!refreshingTable) {
        EditWindowController edc=Lookup.getDefault().lookup(EditWindowController.class);
        if (edc.isOpen()) {
          if (outlineTable.getSelectedRow() != -1) {
            edc.editNodes(getNodesFromSelectedRows());
          }
 else {
            edc.disableEdit();
          }
        }
      }
    }
  }
);
  outlineTable.addKeyListener(new KeyAdapter(){
    @Override public void keyReleased(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_DELETE) {
        Node[] selectedNodes=getNodesFromSelectedRows();
        if (selectedNodes.length > 0) {
          DataLaboratoryHelper dlh=new DataLaboratoryHelper();
          NodesManipulator del=dlh.getDeleteNodesManipulator();
          if (del != null) {
            del.setup(selectedNodes,null);
            if (del.canExecute()) {
              dlh.executeManipulator(del);
            }
          }
        }
      }
    }
  }
);
}",0.9870349492671928
190026,"public void actionPerformed(ActionEvent e){
  try {
    stream.reset();
  }
 catch (  IOException ex) {
    Exceptions.printStackTrace(ex);
  }
  ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
  importController.importStream(stream,importer);
  WelcomeTopComponent.this.close();
}","public void actionPerformed(ActionEvent e){
  try {
    stream.reset();
  }
 catch (  IOException ex) {
  }
  ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
  importController.importStream(stream,importer);
  WelcomeTopComponent.this.close();
}",0.940983606557377
190027,"private void loadSamples(){
  net.miginfocom.swing.MigLayout migLayout1=new net.miginfocom.swing.MigLayout();
  migLayout1.setColumnConstraints(""String_Node_Str"");
  samplesPanel.setLayout(migLayout1);
  String[] samplePath=new String[3];
  samplePath[0]=""String_Node_Str"";
  samplePath[1]=""String_Node_Str"";
  samplePath[2]=""String_Node_Str"";
  String[] sampleTooltip=new String[3];
  sampleTooltip[0]=""String_Node_Str"";
  sampleTooltip[1]=""String_Node_Str"";
  sampleTooltip[2]=""String_Node_Str"";
  try {
    for (int i=0; i < samplePath.length; i++) {
      String s=samplePath[i];
      String tooltip=sampleTooltip[i];
      final InputStream stream=WelcomeTopComponent.class.getResourceAsStream(s);
      String fileName=s.substring(s.lastIndexOf('/') + 1,s.length());
      final String importer=fileName.substring(fileName.lastIndexOf('.'),fileName.length());
      JXHyperlink fileLink=new JXHyperlink(new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          try {
            stream.reset();
          }
 catch (          IOException ex) {
            Exceptions.printStackTrace(ex);
          }
          ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
          importController.importStream(stream,importer);
          WelcomeTopComponent.this.close();
        }
      }
);
      fileLink.setText(fileName);
      fileLink.setToolTipText(tooltip);
      fileLink.putClientProperty(LINK_PATH,importer);
      samplesPanel.add(fileLink,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}","private void loadSamples(){
  net.miginfocom.swing.MigLayout migLayout1=new net.miginfocom.swing.MigLayout();
  migLayout1.setColumnConstraints(""String_Node_Str"");
  samplesPanel.setLayout(migLayout1);
  String[] samplePath=new String[3];
  samplePath[0]=""String_Node_Str"";
  samplePath[1]=""String_Node_Str"";
  samplePath[2]=""String_Node_Str"";
  String[] sampleTooltip=new String[3];
  sampleTooltip[0]=""String_Node_Str"";
  sampleTooltip[1]=""String_Node_Str"";
  sampleTooltip[2]=""String_Node_Str"";
  try {
    for (int i=0; i < samplePath.length; i++) {
      String s=samplePath[i];
      String tooltip=sampleTooltip[i];
      final InputStream stream=WelcomeTopComponent.class.getResourceAsStream(s);
      String fileName=s.substring(s.lastIndexOf('/') + 1,s.length());
      final String importer=fileName.substring(fileName.lastIndexOf('.'),fileName.length());
      JXHyperlink fileLink=new JXHyperlink(new AbstractAction(){
        public void actionPerformed(        ActionEvent e){
          try {
            stream.reset();
          }
 catch (          IOException ex) {
          }
          ImportControllerUI importController=Lookup.getDefault().lookup(ImportControllerUI.class);
          importController.importStream(stream,importer);
          WelcomeTopComponent.this.close();
        }
      }
);
      fileLink.setText(fileName);
      fileLink.setToolTipText(tooltip);
      fileLink.putClientProperty(LINK_PATH,importer);
      samplesPanel.add(fileLink,""String_Node_Str"");
    }
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}",0.986232790988736
190028,"private void writeAttributes(XMLStreamWriter xmlWriter,AttributeColumn[] cols,String mode,String attClass) throws Exception {
  xmlWriter.writeStartElement(ATTRIBUTES);
  xmlWriter.writeAttribute(ATTRIBUTES_CLASS,attClass);
  xmlWriter.writeAttribute(ATTRIBUTES_MODE,mode);
  for (  AttributeColumn col : cols) {
    if (!col.getOrigin().equals(AttributeOrigin.PROPERTY) || (exportDynamic && col.getOrigin().equals(AttributeOrigin.PROPERTY) && col.getIndex() == PropertiesColumn.EDGE_WEIGHT.getIndex())) {
      xmlWriter.writeStartElement(ATTRIBUTE);
      xmlWriter.writeAttribute(ATTRIBUTE_ID,col.getId());
      xmlWriter.writeAttribute(ATTRIBUTE_TITLE,col.getTitle());
      if (col.getType().equals(AttributeType.INT)) {
        xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
      }
 else       if (col.getType().isListType()) {
        if (col.getType().equals(AttributeType.LIST_INTEGER)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else         if (col.getType().equals(AttributeType.LIST_CHARACTER)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
        }
      }
 else       if (col.getType().isDynamicType()) {
        AttributeType staticType=TypeConvertor.getStaticType(col.getType());
        if (staticType.equals(AttributeType.INT)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,staticType.getTypeString().toLowerCase());
        }
      }
 else {
        xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase());
      }
      if (col.getDefaultValue() != null) {
        xmlWriter.writeStartElement(ATTRIBUTE_DEFAULT);
        xmlWriter.writeCharacters(col.getDefaultValue().toString());
        xmlWriter.writeEndElement();
      }
      xmlWriter.writeEndElement();
    }
  }
  xmlWriter.writeEndElement();
}","private void writeAttributes(XMLStreamWriter xmlWriter,AttributeColumn[] cols,String mode,String attClass) throws Exception {
  if (exportAttributes) {
    xmlWriter.writeStartElement(ATTRIBUTES);
    xmlWriter.writeAttribute(ATTRIBUTES_CLASS,attClass);
    xmlWriter.writeAttribute(ATTRIBUTES_MODE,mode);
    for (    AttributeColumn col : cols) {
      if (!col.getOrigin().equals(AttributeOrigin.PROPERTY) || (exportDynamic && col.getOrigin().equals(AttributeOrigin.PROPERTY) && col.getIndex() == PropertiesColumn.EDGE_WEIGHT.getIndex())) {
        xmlWriter.writeStartElement(ATTRIBUTE);
        xmlWriter.writeAttribute(ATTRIBUTE_ID,col.getId());
        xmlWriter.writeAttribute(ATTRIBUTE_TITLE,col.getTitle());
        if (col.getType().equals(AttributeType.INT)) {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
        }
 else         if (col.getType().isListType()) {
          if (col.getType().equals(AttributeType.LIST_INTEGER)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else           if (col.getType().equals(AttributeType.LIST_CHARACTER)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase().replace(""String_Node_Str"",""String_Node_Str""));
          }
        }
 else         if (col.getType().isDynamicType()) {
          AttributeType staticType=TypeConvertor.getStaticType(col.getType());
          if (staticType.equals(AttributeType.INT)) {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,""String_Node_Str"");
          }
 else {
            xmlWriter.writeAttribute(ATTRIBUTE_TYPE,staticType.getTypeString().toLowerCase());
          }
        }
 else {
          xmlWriter.writeAttribute(ATTRIBUTE_TYPE,col.getType().getTypeString().toLowerCase());
        }
        if (col.getDefaultValue() != null) {
          xmlWriter.writeStartElement(ATTRIBUTE_DEFAULT);
          xmlWriter.writeCharacters(col.getDefaultValue().toString());
          xmlWriter.writeEndElement();
        }
        xmlWriter.writeEndElement();
      }
    }
    xmlWriter.writeEndElement();
  }
}",0.9738927738927738
190029,"private void writeEdges(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(EDGES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  EdgeIterable edgeIterable=exportHierarchy ? graph.getEdgesTree() : graph.getEdgesAndMetaEdges();
  for (  Edge edge : edgeIterable) {
    xmlWriter.writeStartElement(EDGE);
    if (edge.getEdgeData().getId() != null && !edge.getEdgeData().getId().equals(Integer.toString(edge.getId()))) {
      xmlWriter.writeAttribute(EDGE_ID,edge.getEdgeData().getId());
    }
    xmlWriter.writeAttribute(EDGE_SOURCE,edge.getSource().getNodeData().getId());
    xmlWriter.writeAttribute(EDGE_TARGET,edge.getTarget().getNodeData().getId());
    if (edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
 else     if (!edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
    String label=edge.getEdgeData().getLabel();
    if (label != null && !label.isEmpty() && !label.equals(edge.getEdgeData().getId())) {
      xmlWriter.writeAttribute(EDGE_LABEL,label);
    }
    float weight=edge.getWeight();
    if (weight != 1f) {
      xmlWriter.writeAttribute(EDGE_WEIGHT,""String_Node_Str"" + weight);
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)edge.getEdgeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    writeEdgeColor(xmlWriter,edge);
    if (exportAttributes && edge.getEdgeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)edge.getEdgeData().getAttributes();
      writeAttValue(xmlWriter,attributeRow,visibleInterval);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeEdges(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(EDGES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  EdgeIterable edgeIterable=exportHierarchy ? graph.getEdgesTree() : graph.getEdgesAndMetaEdges();
  for (  Edge edge : edgeIterable) {
    xmlWriter.writeStartElement(EDGE);
    if (edge.getEdgeData().getId() != null && !edge.getEdgeData().getId().equals(Integer.toString(edge.getId()))) {
      xmlWriter.writeAttribute(EDGE_ID,edge.getEdgeData().getId());
    }
    xmlWriter.writeAttribute(EDGE_SOURCE,edge.getSource().getNodeData().getId());
    xmlWriter.writeAttribute(EDGE_TARGET,edge.getTarget().getNodeData().getId());
    if (edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
 else     if (!edge.isDirected() && graphModel.isMixed()) {
      xmlWriter.writeAttribute(EDGE_TYPE,""String_Node_Str"");
    }
    String label=edge.getEdgeData().getLabel();
    if (label != null && !label.isEmpty() && !label.equals(edge.getEdgeData().getId())) {
      xmlWriter.writeAttribute(EDGE_LABEL,label);
    }
    float weight=edge.getWeight();
    if (weight != 1f) {
      xmlWriter.writeAttribute(EDGE_WEIGHT,""String_Node_Str"" + weight);
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)edge.getEdgeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    writeEdgeColor(xmlWriter,edge);
    if (exportAttributes && edge.getEdgeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)edge.getEdgeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.9997586290127928
190030,"private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValue(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}","private void writeNodes(XMLStreamWriter xmlWriter,HierarchicalGraph graph) throws Exception {
  if (cancel) {
    return;
  }
  xmlWriter.writeStartElement(NODES);
  AttributeColumn dynamicCol=dynamicCol=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
  NodeIterable nodeIterable=exportHierarchy ? graph.getNodesTree() : graph.getNodes();
  for (  Node node : nodeIterable) {
    xmlWriter.writeStartElement(NODE);
    String id=node.getNodeData().getId();
    xmlWriter.writeAttribute(NODE_ID,id);
    if (node.getNodeData().getLabel() != null && !node.getNodeData().getLabel().isEmpty() && !node.getNodeData().getLabel().equals(id)) {
      xmlWriter.writeAttribute(NODE_LABEL,node.getNodeData().getLabel());
    }
    if (exportHierarchy) {
      Node parent=graph.getParent(node);
      if (parent != null) {
        xmlWriter.writeAttribute(NODE_PID,parent.getNodeData().getId());
      }
    }
    if (exportDynamic && dynamicCol != null && visibleInterval != null) {
      TimeInterval timeInterval=(TimeInterval)node.getNodeData().getAttributes().getValue(dynamicCol.getIndex());
      if (timeInterval != null) {
        writeTimeInterval(xmlWriter,timeInterval);
      }
    }
    if (exportAttributes && node.getNodeData().getAttributes() != null) {
      AttributeRow attributeRow=(AttributeRow)node.getNodeData().getAttributes();
      writeAttValues(xmlWriter,attributeRow,visibleInterval);
    }
    if (exportSize) {
      writeNodeSize(xmlWriter,node);
    }
    if (exportPosition) {
      writeNodePosition(xmlWriter,node);
    }
    if (exportColors) {
      writeNodeColor(xmlWriter,node);
    }
    xmlWriter.writeEndElement();
    Progress.progress(progress);
    if (cancel) {
      break;
    }
  }
  xmlWriter.writeEndElement();
}",0.999719495091164
190031,"public FilterProperty[] getProperties(){
  try {
    return new FilterProperty[]{FilterProperty.createProperty(this,String.class,""String_Node_Str""),FilterProperty.createProperty(this,Integer.class,""String_Node_Str"")};
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
  return new FilterProperty[0];
}","public FilterProperty[] getProperties(){
  try {
    return new FilterProperty[]{FilterProperty.createProperty(this,String.class,""String_Node_Str""),FilterProperty.createProperty(this,Integer.class,""String_Node_Str""),FilterProperty.createProperty(this,Boolean.class,""String_Node_Str"")};
  }
 catch (  NoSuchMethodException ex) {
    ex.printStackTrace();
  }
  return new FilterProperty[0];
}",0.9047619047619048
190032,"public Graph filter(Graph graph){
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : graph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if (n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : graph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  for (  Node node : graph.getNodes().toArray()) {
    if (!result.contains(node)) {
      graph.removeNode(node);
    }
  }
  return graph;
}","public Graph filter(Graph graph){
  String str=pattern.toLowerCase();
  List<Node> nodes=new ArrayList<Node>();
  for (  Node n : graph.getNodes()) {
    if (n.getNodeData().getId().toLowerCase().contains(str)) {
      nodes.add(n);
    }
 else     if (n.getNodeData().getLabel().toLowerCase().contains(str)) {
      nodes.add(n);
    }
  }
  Set<Node> result=new HashSet<Node>();
  Set<Node> neighbours=new HashSet<Node>();
  neighbours.addAll(nodes);
  for (int i=0; i < depth; i++) {
    Node[] nei=neighbours.toArray(new Node[0]);
    neighbours.clear();
    for (    Node n : nei) {
      for (      Node neighbor : graph.getNeighbors(n)) {
        if (!result.contains(neighbor)) {
          neighbours.add(neighbor);
          result.add(neighbor);
        }
      }
    }
    if (neighbours.isEmpty()) {
      break;
    }
  }
  if (self) {
    result.addAll(nodes);
  }
  for (  Node node : graph.getNodes().toArray()) {
    if (!result.contains(node)) {
      graph.removeNode(node);
    }
  }
  return graph;
}",0.977977977977978
190033,"public boolean evaluate(Graph graph,Edge edge){
  Object value=edge.getEdgeData().getAttributes().getValue(partition.getColumn().getIndex());
  if (value != null) {
    int size=parts.size();
    for (int i=0; i < size; i++) {
      Object obj=parts.get(i).getValue();
      if (obj == null && value == null) {
        return true;
      }
 else       if (obj != null && obj.equals(value)) {
        return true;
      }
    }
  }
  return false;
}","public boolean evaluate(Graph graph,Edge edge){
  Object value=edge.getEdgeData().getAttributes().getValue(partition.getColumn().getIndex());
  int size=parts.size();
  for (int i=0; i < size; i++) {
    Object obj=parts.get(i).getValue();
    if (obj == null && value == null) {
      return true;
    }
 else     if (obj != null && value != null && obj.equals(value)) {
      return true;
    }
  }
  return false;
}",0.8337182448036952
190034,"public Object getMaximum(){
  return max;
}","public Object getMaximum(){
  if (max == null) {
    refreshValues();
  }
  return max;
}",0.6515151515151515
190035,"public Object getMinimun(){
  return min;
}","public Object getMinimun(){
  if (min == null) {
    refreshValues();
  }
  return min;
}",0.6515151515151515
190036,"public EqualNumberFilter(AttributeColumn column){
  this.column=column;
  this.dynamicHelper=new DynamicAttributesHelper(this,null);
  GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph graph=gm.getGraph();
  List<Object> vals=new ArrayList<Object>();
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    for (    Node n : graph.getNodes()) {
      Object val=n.getNodeData().getAttributes().getValue(column.getIndex());
      if (val != null) {
        vals.add(val);
      }
    }
  }
 else {
    for (    Edge e : graph.getEdges()) {
      Object val=e.getEdgeData().getAttributes().getValue(column.getIndex());
      if (val != null) {
        vals.add(val);
      }
    }
  }
  Comparable[] comparableArray=ComparableArrayConverter.convert(vals);
  min=AttributeUtils.getDefault().getMin(column,comparableArray);
  max=AttributeUtils.getDefault().getMax(column,comparableArray);
}","public EqualNumberFilter(AttributeColumn column){
  this.column=column;
  this.dynamicHelper=new DynamicAttributesHelper(this,null);
}",0.2525918944392083
190037,"public void finish(){
  if (!Double.isInfinite(min)) {
    timelineController.setMin(min);
  }
  if (!Double.isInfinite(max)) {
    timelineController.setMax(max);
  }
}","public void finish(){
  if (!Double.isInfinite(min)) {
  }
  if (!Double.isInfinite(max)) {
  }
}",0.7293233082706767
190038,"public EdgeProcessor(Dhns dhns,GraphViewImpl view){
  this.dhns=dhns;
  this.treeStructure=view.getStructure();
  this.idGen=dhns.getIdGen();
  this.view=view;
  this.viewId=view.getViewId();
  this.edgeIterator=new ParamAVLIterator<AbstractEdge>();
}","public EdgeProcessor(Dhns dhns,GraphViewImpl view){
  this.dhns=dhns;
  this.treeStructure=view.getStructure();
  this.view=view;
  this.viewId=view.getViewId();
  this.edgeIterator=new ParamAVLIterator<AbstractEdge>();
}",0.9364406779661016
190039,"public void selectVisible(Query query){
  if (query != null && model.getCurrentQuery() == query && !model.isFiltering()) {
    return;
  }
  model.setFiltering(false);
  model.setCurrentQuery(query);
  if (model.getFilterThread() != null) {
    model.getFilterThread().setRunning(false);
    model.setFilterThread(null);
  }
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  graphModel.setVisibleView(null);
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  if (query != null) {
    FilterThread filterThread=new FilterThread(model);
    model.setFilterThread(filterThread);
    filterThread.setRootQuery((AbstractQueryImpl)query);
    filterThread.start();
  }
 else {
  }
}","public void selectVisible(Query query){
  if (query != null && model.getCurrentQuery() == query && !model.isFiltering()) {
    return;
  }
  model.setFiltering(false);
  model.setCurrentQuery(query);
  if (model.getFilterThread() != null) {
    model.getFilterThread().setRunning(false);
    model.setFilterThread(null);
  }
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  graphModel.setVisibleView(null);
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  if (query != null) {
    FilterThread filterThread=new FilterThread(model);
    model.setFilterThread(filterThread);
    filterThread.setRootQuery((AbstractQueryImpl)query);
    filterThread.start();
  }
 else {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(null);
    }
  }
}",0.899268429938098
190040,"public void selectNodes(Node[] nodes){
  if (!isCustomSelection()) {
    setCustomSelection();
  }
  Model[] models=new Model[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    models[i]=nodes[i].getNodeData().getModel();
  }
  engine.selectObject(models);
}","public void selectNodes(Node[] nodes){
  if (nodes == null) {
    resetSelection();
    return;
  }
  if (!isCustomSelection()) {
    setCustomSelection();
  }
  Model[] models=new Model[nodes.length];
  for (int i=0; i < nodes.length; i++) {
    models[i]=nodes[i].getNodeData().getModel();
  }
  engine.selectObject(models);
}",0.8974789915966387
190041,"public void attributesChanged(AttributeEvent event){
  if (event.getEventType().equals(AttributeEvent.EventType.ADD_COLUMN) || event.getEventType().equals(AttributeEvent.EventType.REMOVE_COLUMN)) {
    fireChangeEvent();
  }
}","public void attributesChanged(AttributeEvent event){
  if (event.getEventType().equals(AttributeEvent.EventType.ADD_COLUMN) || event.getEventType().equals(AttributeEvent.EventType.REMOVE_COLUMN)) {
    if (refreshTimer != null) {
      refreshTimer.restart();
    }
 else {
      refreshTimer=new Timer(1000,new ActionListener(){
        public void actionPerformed(        ActionEvent e){
          fireChangeEvent();
        }
      }
);
      refreshTimer.setRepeats(false);
      refreshTimer.start();
    }
  }
}",0.6083445491251682
190042,"/** 
 * Used for export (writes XML date strings).
 * @param d a double to convert from
 * @return an XML date string.
 * @throws IllegalArgumentException if {@code d} is infinite.
 */
public static String getXMLDateStringFromDouble(double d){
  try {
    DatatypeFactory dateFactory=DatatypeFactory.newInstance();
    if (Double.isInfinite(d)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    GregorianCalendar gc=new GregorianCalendar();
    gc.setTimeInMillis((long)d);
    return dateFactory.newXMLGregorianCalendar(gc).toXMLFormat().substring(0,23);
  }
 catch (  DatatypeConfigurationException ex) {
    Exceptions.printStackTrace(ex);
    return ""String_Node_Str"";
  }
}","/** 
 * Used for export (writes XML date strings).
 * @param d a double to convert from
 * @return an XML date string.
 * @throws IllegalArgumentException if {@code d} is infinite.
 */
public static String getXMLDateStringFromDouble(double d){
  try {
    DatatypeFactory dateFactory=DatatypeFactory.newInstance();
    if (d == Double.NEGATIVE_INFINITY) {
      return ""String_Node_Str"";
    }
 else     if (d == Double.POSITIVE_INFINITY) {
      return ""String_Node_Str"";
    }
    GregorianCalendar gc=new GregorianCalendar();
    gc.setTimeInMillis((long)d);
    return dateFactory.newXMLGregorianCalendar(gc).toXMLFormat().substring(0,23);
  }
 catch (  DatatypeConfigurationException ex) {
    Exceptions.printStackTrace(ex);
    return ""String_Node_Str"";
  }
}",0.8888888888888888
190043,"/** 
 * Returns the leftmost point or   {@code Double.POSITIVE_INFINITY} in caseof no intervals.
 * @return the leftmost point.
 */
public double getLow(){
  if (isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
  return minimum().getLow();
}","/** 
 * Returns the leftmost point or   {@code Double.NEGATIVE_INFINITY} in caseof no intervals.
 * @return the leftmost point.
 */
public double getLow(){
  if (isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
  return minimum().getLow();
}",0.967479674796748
190044,"/** 
 * Returns the rightmost point or   {@code Double.NEGATIVE_INFINITY} in caseof no intervals.
 * @return the rightmost point.
 */
public double getHigh(){
  if (isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
  return root.left.max;
}","/** 
 * Returns the rightmost point or   {@code Double.POSITIVE_INFINITY} in caseof no intervals.
 * @return the rightmost point.
 */
public double getHigh(){
  if (isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
  return root.left.max;
}",0.9672131147540984
190045,"public double getMax(){
  if (lowMap.isEmpty() && highMap.isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
 else   if (highMap.isEmpty()) {
    return lowMap.lastKey();
  }
 else {
    return highMap.lastKey();
  }
}","public double getMax(){
  if (highMap.isEmpty()) {
    return Double.POSITIVE_INFINITY;
  }
 else {
    return highMap.lastKey();
  }
}",0.7584269662921348
190046,"public double getMin(){
  if (lowMap.isEmpty() && highMap.isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
 else   if (lowMap.isEmpty()) {
    return highMap.firstKey();
  }
 else {
    return lowMap.firstKey();
  }
}","public double getMin(){
  if (lowMap.isEmpty()) {
    return Double.NEGATIVE_INFINITY;
  }
 else {
    return lowMap.firstKey();
  }
}",0.7528089887640449
190047,"public static boolean isDynamicNodePartitionColumn(AttributeColumn column,Graph graph,TimeInterval timeInterval,Estimator estimator){
  Set values=new HashSet();
  int nonNullvalues=0;
  for (  Node n : graph.getNodes()) {
    Object value=n.getNodeData().getAttributes().getValue(column.getIndex());
    value=getDynamicValue(value,timeInterval,estimator);
    if (value != null) {
      nonNullvalues++;
    }
    values.add(value);
  }
  if (values.size() < 9f / 10f * nonNullvalues) {
    return true;
  }
  return false;
}","public static boolean isDynamicNodePartitionColumn(AttributeColumn column,Graph graph,TimeInterval timeInterval,Estimator estimator){
  if (column.getType().isDynamicType() && !Number.class.isAssignableFrom(column.getType().getType())) {
    estimator=Estimator.FIRST;
  }
  Set values=new HashSet();
  int nonNullvalues=0;
  for (  Node n : graph.getNodes()) {
    Object value=n.getNodeData().getAttributes().getValue(column.getIndex());
    value=getDynamicValue(value,timeInterval,estimator);
    if (value != null) {
      nonNullvalues++;
    }
    values.add(value);
  }
  if (values.size() < 9f / 10f * nonNullvalues) {
    return true;
  }
  return false;
}",0.8834870075440067
190048,"public static boolean isDynamicEdgePartitionColumn(AttributeColumn column,Graph graph,TimeInterval timeInterval,Estimator estimator){
  Set values=new HashSet();
  int nonNullvalues=0;
  for (  Edge n : graph.getEdges()) {
    Object value=n.getEdgeData().getAttributes().getValue(column.getIndex());
    value=getDynamicValue(value,timeInterval,estimator);
    if (value != null) {
      nonNullvalues++;
    }
    values.add(value);
  }
  if (values.size() < 9f / 10f * nonNullvalues) {
    return true;
  }
  return false;
}","public static boolean isDynamicEdgePartitionColumn(AttributeColumn column,Graph graph,TimeInterval timeInterval,Estimator estimator){
  if (column.getType().isDynamicType() && !Number.class.isAssignableFrom(column.getType().getType())) {
    estimator=Estimator.FIRST;
  }
  Set values=new HashSet();
  int nonNullvalues=0;
  for (  Edge n : graph.getEdges()) {
    Object value=n.getEdgeData().getAttributes().getValue(column.getIndex());
    value=getDynamicValue(value,timeInterval,estimator);
    if (value != null) {
      nonNullvalues++;
    }
    values.add(value);
  }
  if (values.size() < 9f / 10f * nonNullvalues) {
    return true;
  }
  return false;
}",0.8834870075440067
190049,"private static Object getDynamicValue(Object object,TimeInterval timeInterval,Estimator estimator){
  if (object != null && object instanceof DynamicType) {
    DynamicType dynamicType=(DynamicType)object;
    return dynamicType.getValue(timeInterval == null ? Double.NEGATIVE_INFINITY : timeInterval.getLow(),timeInterval == null ? Double.POSITIVE_INFINITY : timeInterval.getHigh(),estimator);
  }
  return object;
}","private static Object getDynamicValue(Object object,TimeInterval timeInterval,Estimator estimator){
  if (object != null && object instanceof DynamicType) {
    DynamicType dynamicType=(DynamicType)object;
    if (!Number.class.isAssignableFrom(dynamicType.getUnderlyingType())) {
      estimator=Estimator.FIRST;
    }
    return dynamicType.getValue(timeInterval == null ? Double.NEGATIVE_INFINITY : timeInterval.getLow(),timeInterval == null ? Double.POSITIVE_INFINITY : timeInterval.getHigh(),estimator);
  }
  return object;
}",0.879746835443038
190050,"public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}","public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  Workspace toSelectWorkspace=null;
  if (getCurrentWorkspace() == workspace) {
    toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
  }
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    if (toSelectWorkspace == null) {
      closeCurrentProject();
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}",0.6770670826833073
190051,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.992195989331226
190052,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        if (fileName.lastIndexOf(""String_Node_Str"") != -1) {
          fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
          fileName=fileName.concat(fileFilter.getExtensions().get(0));
          selectedFile=new File(directoryPath,fileName);
          chooser.setSelectedFile(selectedFile);
        }
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9917631112501304
190053,"public void setTimeIntervalMax(String timeIntervalMax){
  try {
    this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
  }
 catch (  Exception ex) {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex2) {
    }
  }
  if (this.timeIntervalMax == null) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
  }
}","public void setTimeIntervalMax(String timeIntervalMax){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMax=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMax=Double.parseDouble(timeIntervalMax);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMax),Level.SEVERE));
    }
  }
}",0.5737704918032787
190054,"public void setTimeIntervalMin(String timeIntervalMin){
  try {
    this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
  }
 catch (  Exception ex) {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex2) {
    }
  }
  if (this.timeIntervalMin == null) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
  }
}","public void setTimeIntervalMin(String timeIntervalMin){
  if (timeFormat.equals(TimeFormat.DATE)) {
    try {
      this.timeIntervalMin=DynamicUtilities.getDoubleFromXMLDateString(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
 else {
    try {
      this.timeIntervalMin=Double.parseDouble(timeIntervalMin);
    }
 catch (    Exception ex) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",timeIntervalMin),Level.SEVERE));
    }
  }
}",0.5737704918032787
190055,"public void actionPerformed(ActionEvent e){
  for (  Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
    entry.setValue(Color.BLACK);
  }
  setup(partition,edgeColorTransformer);
  revalidate();
  repaint();
}","public void actionPerformed(ActionEvent e){
  for (  Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
    entry.setValue(Color.BLACK);
  }
  setup(partition,edgeColorTransformer,false);
  revalidate();
  repaint();
}",0.9872881355932204
190056,"public void setup(Partition partition,Transformer transformer){
  removeAll();
  edgeColorTransformer=(EdgeColorTransformer)transformer;
  if (edgeColorTransformer.getMap().isEmpty()) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      edgeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  this.partition=partition;
  for (  final Part p : partition.getParts()) {
    JLabel partLabel=new JLabel(p.getDisplayName());
    add(partLabel);
    final ColorChooser colorChooser=new ColorChooser(edgeColorTransformer.getMap().get(p.getValue()));
    colorChooser.setPreferredSize(new Dimension(16,16));
    colorChooser.setMaximumSize(new Dimension(16,16));
    colorChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        edgeColorTransformer.getMap().put(p.getValue(),colorChooser.getColor());
      }
    }
);
    add(colorChooser,""String_Node_Str"");
  }
}","public void setup(Partition partition,Transformer transformer,boolean color){
  removeAll();
  edgeColorTransformer=(EdgeColorTransformer)transformer;
  if (color) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      edgeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  this.partition=partition;
  for (  final Part p : partition.getParts()) {
    JLabel partLabel=new JLabel(p.getDisplayName());
    add(partLabel);
    final ColorChooser colorChooser=new ColorChooser(edgeColorTransformer.getMap().get(p.getValue()));
    colorChooser.setPreferredSize(new Dimension(16,16));
    colorChooser.setMaximumSize(new Dimension(16,16));
    colorChooser.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        edgeColorTransformer.getMap().put(p.getValue(),colorChooser.getColor());
      }
    }
);
    add(colorChooser,""String_Node_Str"");
  }
}",0.9717898832684824
190057,"private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(EdgeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      edgeColorTransformer.getMap().clear();
      setup(partition,edgeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,edgeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}","private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(EdgeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",false));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      edgeColorTransformer.getMap().clear();
      setup(partition,edgeColorTransformer,true);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : edgeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,edgeColorTransformer,false);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}",0.953405017921147
190058,"public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer);
}","public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer,true);
}",0.976303317535545
190059,"private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeColorTransformer.getMap().clear();
      setup(partition,nodeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : nodeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,nodeColorTransformer);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}","private void createPopup(){
  popupMenu=new JPopupMenu();
  JMenuItem randomizeItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  randomizeItem.setIcon(ImageUtilities.loadImageIcon(""String_Node_Str"",false));
  randomizeItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeColorTransformer.getMap().clear();
      setup(partition,nodeColorTransformer,true);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(randomizeItem);
  JMenuItem allBlackItem=new JMenuItem(NbBundle.getMessage(NodeColorTransformerPanel.class,""String_Node_Str""));
  allBlackItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      for (      Entry<Object,Color> entry : nodeColorTransformer.getMap().entrySet()) {
        entry.setValue(Color.BLACK);
      }
      setup(partition,nodeColorTransformer,false);
      revalidate();
      repaint();
    }
  }
);
  popupMenu.add(allBlackItem);
}",0.953405017921147
190060,"public void setup(Partition partition,Transformer transformer){
  nodeColorTransformer=(NodeColorTransformer)transformer;
  List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
  int i=0;
  for (  Part p : partition.getParts()) {
    nodeColorTransformer.getMap().put(p.getValue(),colors.get(i));
    i++;
  }
  NumberFormat formatter=NumberFormat.getPercentInstance();
  formatter.setMaximumFractionDigits(2);
  this.partition=partition;
  Part[] partsArray=partition.getParts();
  Arrays.sort(partsArray);
  String[] columnNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DefaultTableModel model=new DefaultTableModel(columnNames,partsArray.length){
    @Override public boolean isCellEditable(    int row,    int column){
      return column == 0;
    }
  }
;
  table.setModel(model);
  TableColumn partCol=table.getColumnModel().getColumn(1);
  partCol.setCellRenderer(new TextRenderer());
  TableColumn percCol=table.getColumnModel().getColumn(2);
  percCol.setCellRenderer(new TextRenderer());
  percCol.setPreferredWidth(60);
  percCol.setMaxWidth(60);
  TableColumn colorCol=table.getColumnModel().getColumn(0);
  colorCol.setCellEditor(new ColorChooserEditor());
  colorCol.setCellRenderer(new ColorChooserRenderer());
  colorCol.setPreferredWidth(16);
  colorCol.setMaxWidth(16);
  for (int j=0; j < partsArray.length; j++) {
    final Part p=partsArray[partsArray.length - 1 - j];
    model.setValueAt(p.getValue(),j,0);
    model.setValueAt(p.getDisplayName(),j,1);
    String perc=""String_Node_Str"" + formatter.format(p.getPercentage()) + ""String_Node_Str"";
    model.setValueAt(perc,j,2);
  }
}","public void setup(Partition partition,Transformer transformer,boolean color){
  nodeColorTransformer=(NodeColorTransformer)transformer;
  if (color) {
    List<Color> colors=PaletteUtils.getSequenceColors(partition.getPartsCount());
    int i=0;
    for (    Part p : partition.getParts()) {
      nodeColorTransformer.getMap().put(p.getValue(),colors.get(i));
      i++;
    }
  }
  NumberFormat formatter=NumberFormat.getPercentInstance();
  formatter.setMaximumFractionDigits(2);
  this.partition=partition;
  Part[] partsArray=partition.getParts();
  Arrays.sort(partsArray);
  String[] columnNames=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  DefaultTableModel model=new DefaultTableModel(columnNames,partsArray.length){
    @Override public boolean isCellEditable(    int row,    int column){
      return column == 0;
    }
  }
;
  table.setModel(model);
  TableColumn partCol=table.getColumnModel().getColumn(1);
  partCol.setCellRenderer(new TextRenderer());
  TableColumn percCol=table.getColumnModel().getColumn(2);
  percCol.setCellRenderer(new TextRenderer());
  percCol.setPreferredWidth(60);
  percCol.setMaxWidth(60);
  TableColumn colorCol=table.getColumnModel().getColumn(0);
  colorCol.setCellEditor(new ColorChooserEditor());
  colorCol.setCellRenderer(new ColorChooserRenderer());
  colorCol.setPreferredWidth(16);
  colorCol.setMaxWidth(16);
  for (int j=0; j < partsArray.length; j++) {
    final Part p=partsArray[partsArray.length - 1 - j];
    model.setValueAt(p.getValue(),j,0);
    model.setValueAt(p.getDisplayName(),j,1);
    String perc=""String_Node_Str"" + formatter.format(p.getPercentage()) + ""String_Node_Str"";
    model.setValueAt(perc,j,2);
  }
}",0.9860492727812408
190061,"public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer);
}","public void setup(Partition partition,Transformer transformer){
  panel.setup(partition,transformer,true);
}",0.976303317535545
190062,"public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}","public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  boolean refreshed=RankingFactory.refreshRanking((AbstractRanking)ranking,graph);
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
  if (refreshed) {
    rankingModelImpl.fireChangeEvent();
  }
}",0.9502046384720328
190063,"private void fireChangeEvent(){
  ChangeEvent changeEvent=new ChangeEvent(this);
  for (  ChangeListener changeListener : listeners) {
    changeListener.stateChanged(changeEvent);
  }
}","public void fireChangeEvent(){
  ChangeEvent changeEvent=new ChangeEvent(this);
  for (  ChangeListener changeListener : listeners) {
    changeListener.stateChanged(changeEvent);
  }
}",0.9757412398921832
190064,"public FilterLibraryImpl(){
  content=new InstanceContent();
  lookup=new AbstractLookup(content);
  for (  FilterBuilder builder : Lookup.getDefault().lookupAll(FilterBuilder.class)) {
    content.add(builder);
  }
  for (  Query query : Lookup.getDefault().lookupAll(Query.class)) {
    content.add(query);
  }
  for (  CategoryBuilder catBuilder : Lookup.getDefault().lookupAll(CategoryBuilder.class)) {
    content.add(catBuilder);
  }
  content.add(new HierarchicalGraphMask());
  buildBuildersMap();
}","public FilterLibraryImpl(){
  content=new InstanceContent();
  lookup=new AbstractLookup(content);
  for (  FilterBuilder builder : Lookup.getDefault().lookupAll(FilterBuilder.class)) {
    content.add(builder);
  }
  for (  Query query : Lookup.getDefault().lookupAll(Query.class)) {
    content.add(query);
  }
  for (  CategoryBuilder catBuilder : Lookup.getDefault().lookupAll(CategoryBuilder.class)) {
    content.add(catBuilder);
  }
  content.add(new HierarchicalGraphMask());
}",0.9778225806451613
190065,"public FilterBuilder getBuilder(Filter filter){
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  buildBuildersMap();
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  return null;
}","public FilterBuilder getBuilder(Filter filter){
  if (buildersMap == null) {
    buildBuildersMap();
  }
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  buildBuildersMap();
  if (buildersMap.get(filter.getClass()) != null) {
    return buildersMap.get(filter.getClass());
  }
  return null;
}",0.9110764430577224
190066,"public float getSize(float normalizedValue){
  if (interpolator != null) {
    normalizedValue=interpolator.interpolate(normalizedValue);
  }
  return normalizedValue * maxSize + minSize;
}","public float getSize(float normalizedValue){
  if (interpolator != null) {
    normalizedValue=interpolator.interpolate(normalizedValue);
  }
  return normalizedValue * (maxSize - minSize) + minSize;
}",0.9692307692307692
190067,"private void setValue(int index,AttributeValueImpl value){
  updateColumns();
  this.values[index]=value;
  attributeTable.model.fireAttributeEvent(new ValueEvent(EventType.SET_VALUE,attributeTable,object,value));
}","private void setValue(int index,AttributeValueImpl value){
  updateColumns();
  AttributeValueImpl oldValue=this.values[index];
  this.values[index]=value;
  if (!((oldValue == null && value == null) || (oldValue != null && oldValue.equals(value.getValue())))) {
    attributeTable.model.fireAttributeEvent(new ValueEvent(EventType.SET_VALUE,attributeTable,object,value));
  }
}",0.7048903878583473
190068,"public Object getValue(){
  if (column.getOrigin() != AttributeOrigin.DELEGATE) {
    return value;
  }
 else {
    if (value == null)     return null;
    AttributeValueDelegateProvider attributeValueDelegateProvider=column.getProvider();
    Object result;
    if (AttributeUtilsImpl.getDefault().isEdgeColumn(column))     result=attributeValueDelegateProvider.getEdgeValue(column,value);
 else     if (AttributeUtilsImpl.getDefault().isNodeColumn(column))     result=attributeValueDelegateProvider.getNodeValue(column,value);
 else     throw new AssertionError();
    if (result.getClass().isArray())     result=ListFactory.fromArray(result);
    return result;
  }
}","public Object getValue(){
  if (column.getOrigin() != AttributeOrigin.DELEGATE) {
    return value;
  }
 else {
    if (value == null) {
      return null;
    }
    AttributeValueDelegateProvider attributeValueDelegateProvider=column.getProvider();
    Object result;
    if (AttributeUtilsImpl.getDefault().isEdgeColumn(column)) {
      result=attributeValueDelegateProvider.getEdgeValue(column,value);
    }
 else     if (AttributeUtilsImpl.getDefault().isNodeColumn(column)) {
      result=attributeValueDelegateProvider.getNodeValue(column,value);
    }
 else {
      throw new AssertionError();
    }
    if (result.getClass().isArray()) {
      result=ListFactory.fromArray(result);
    }
    return result;
  }
}",0.9107913669064748
190069,"public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  Progress.start(progress);
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=0;
  if (exportHierarchy) {
    for (    Node n : graph.getNodesTree()) {
      max++;
    }
    for (    Edge e : graph.getEdgesTree()) {
      max++;
    }
  }
 else {
    max=graph.getNodeCount();
    for (    Edge e : graph.getEdgesAndMetaEdges()) {
      max++;
    }
  }
  Progress.switchToDeterminate(progress,max);
  try {
    XMLOutputFactory outputFactory=XMLOutputFactory.newInstance();
    outputFactory.setProperty(""String_Node_Str"",Boolean.FALSE);
    XMLStreamWriter xmlWriter=outputFactory.createXMLStreamWriter(writer);
    xmlWriter=new IndentingXMLStreamWriter(xmlWriter);
    xmlWriter.writeStartDocument(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.setPrefix(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeStartElement(GEXF_NAMESPACE,GEXF);
    xmlWriter.writeNamespace(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeAttribute(GEXF_VERSION,""String_Node_Str"");
    if (exportColors || exportPosition || exportSize) {
      xmlWriter.writeNamespace(VIZ,VIZ_NAMESPACE);
    }
    xmlWriter.writeAttribute(""String_Node_Str"",GEXF_NAMESPACE_LOCATION);
    if (exportDynamic) {
      DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
      DynamicModel dynamicModel=dynamicController != null ? dynamicController.getModel(workspace) : null;
      visibleInterval=dynamicModel == null ? null : exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
    }
    writeMeta(xmlWriter);
    writeGraph(xmlWriter,graph);
    xmlWriter.writeEndElement();
    xmlWriter.writeEndDocument();
    xmlWriter.close();
  }
 catch (  Exception e) {
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new RuntimeException(e);
  }
  Progress.finish(progress);
  return !cancel;
}","public boolean execute(){
  attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  graphModel=workspace.getLookup().lookup(GraphModel.class);
  HierarchicalGraph graph=null;
  if (exportVisible) {
    graph=graphModel.getHierarchicalGraphVisible();
  }
 else {
    graph=graphModel.getHierarchicalGraph();
  }
  Progress.start(progress);
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=0;
  if (exportHierarchy) {
    for (    Node n : graph.getNodesTree()) {
      max++;
    }
    for (    Edge e : graph.getEdgesTree()) {
      max++;
    }
  }
 else {
    max=graph.getNodeCount();
    for (    Edge e : graph.getEdgesAndMetaEdges()) {
      max++;
    }
  }
  Progress.switchToDeterminate(progress,max);
  try {
    XMLOutputFactory outputFactory=XMLOutputFactory.newInstance();
    outputFactory.setProperty(""String_Node_Str"",Boolean.FALSE);
    XMLStreamWriter xmlWriter=outputFactory.createXMLStreamWriter(writer);
    xmlWriter=new IndentingXMLStreamWriter(xmlWriter);
    xmlWriter.writeStartDocument(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.setPrefix(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeStartElement(GEXF_NAMESPACE,GEXF);
    xmlWriter.writeNamespace(""String_Node_Str"",GEXF_NAMESPACE);
    xmlWriter.writeAttribute(GEXF_VERSION,""String_Node_Str"");
    if (exportColors || exportPosition || exportSize) {
      xmlWriter.writeNamespace(VIZ,VIZ_NAMESPACE);
    }
    xmlWriter.writeAttribute(""String_Node_Str"",""String_Node_Str"");
    xmlWriter.writeAttribute(""String_Node_Str"",GEXF_NAMESPACE_LOCATION);
    if (exportDynamic) {
      DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
      DynamicModel dynamicModel=dynamicController != null ? dynamicController.getModel(workspace) : null;
      visibleInterval=dynamicModel == null ? null : exportVisible ? dynamicModel.getVisibleInterval() : new TimeInterval(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
    }
    writeMeta(xmlWriter);
    writeGraph(xmlWriter,graph);
    xmlWriter.writeEndElement();
    xmlWriter.writeEndDocument();
    xmlWriter.close();
  }
 catch (  Exception e) {
    if (e instanceof RuntimeException) {
      throw (RuntimeException)e;
    }
    throw new RuntimeException(e);
  }
  Progress.finish(progress);
  return !cancel;
}",0.9854632241267086
190070,"public void initArchitecture(){
  model=VizController.getInstance().getVizModel().getTextModel();
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  initRenderer();
  for (  SizeMode s : sizeModes) {
    s.init();
  }
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!nodeRenderer.getFont().equals(model.getNodeFont())) {
        nodeRenderer.setFont(model.getNodeFont());
      }
      if (!edgeRenderer.getFont().equals(model.getEdgeFont())) {
        edgeRenderer.setFont(model.getEdgeFont());
      }
      nodeRefresh=true;
      edgeRefresh=true;
    }
  }
);
  VizController.getInstance().getVizModel().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
        if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
          AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
          if (attributeController != null && attributeController.getModel() != null) {
            AttributeModel attributeModel=attributeController.getModel();
            AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
            AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
            model.setTextColumns(nodeCols,edgeCols);
          }
        }
        DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
        currentTimeInterval=dynamicController.getModel().getVisibleInterval();
      }
    }
  }
);
  antialised=vizConfig.isLabelAntialiased();
  mipmap=vizConfig.isLabelMipMap();
  fractionalMetrics=vizConfig.isLabelFractionalMetrics();
  renderer3d=false;
  DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  dynamicController.addModelListener(new DynamicModelListener(){
    public void dynamicModelChanged(    DynamicModelEvent event){
      currentTimeInterval=(TimeInterval)event.getData();
    }
  }
);
}","public void initArchitecture(){
  model=VizController.getInstance().getVizModel().getTextModel();
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  initRenderer();
  for (  SizeMode s : sizeModes) {
    s.init();
  }
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!nodeRenderer.getFont().equals(model.getNodeFont())) {
        nodeRenderer.setFont(model.getNodeFont());
      }
      if (!edgeRenderer.getFont().equals(model.getEdgeFont())) {
        edgeRenderer.setFont(model.getEdgeFont());
      }
      nodeRefresh=true;
      edgeRefresh=true;
    }
  }
);
  VizController.getInstance().getVizModel().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
        if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
          AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
          if (attributeController != null && attributeController.getModel() != null) {
            AttributeModel attributeModel=attributeController.getModel();
            AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
            AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
            model.setTextColumns(nodeCols,edgeCols);
          }
        }
        DynamicModel dynamicModel=dynamicController.getModel();
        if (dynamicModel != null) {
          currentTimeInterval=dynamicModel.getVisibleInterval();
        }
 else {
          currentTimeInterval=null;
        }
      }
    }
  }
);
  antialised=vizConfig.isLabelAntialiased();
  mipmap=vizConfig.isLabelMipMap();
  fractionalMetrics=vizConfig.isLabelFractionalMetrics();
  renderer3d=false;
  dynamicController=Lookup.getDefault().lookup(DynamicController.class);
  dynamicController.addModelListener(new DynamicModelListener(){
    public void dynamicModelChanged(    DynamicModelEvent event){
      currentTimeInterval=(TimeInterval)event.getData();
    }
  }
);
}",0.812933025404157
190071,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(""String_Node_Str"")) {
    TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
      AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
      if (attributeController != null && attributeController.getModel() != null) {
        AttributeModel attributeModel=attributeController.getModel();
        AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
        AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
        model.setTextColumns(nodeCols,edgeCols);
      }
    }
    DynamicController dynamicController=Lookup.getDefault().lookup(DynamicController.class);
    currentTimeInterval=dynamicController.getModel().getVisibleInterval();
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(""String_Node_Str"")) {
    TextManager.this.model=VizController.getInstance().getVizModel().getTextModel();
    if (model.getNodeTextColumns() == null || model.getNodeTextColumns().length == 0) {
      AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
      if (attributeController != null && attributeController.getModel() != null) {
        AttributeModel attributeModel=attributeController.getModel();
        AttributeColumn[] nodeCols=new AttributeColumn[]{attributeModel.getNodeTable().getColumn(PropertiesColumn.NODE_LABEL.getIndex())};
        AttributeColumn[] edgeCols=new AttributeColumn[]{attributeModel.getEdgeTable().getColumn(PropertiesColumn.EDGE_LABEL.getIndex())};
        model.setTextColumns(nodeCols,edgeCols);
      }
    }
    DynamicModel dynamicModel=dynamicController.getModel();
    if (dynamicModel != null) {
      currentTimeInterval=dynamicModel.getVisibleInterval();
    }
 else {
      currentTimeInterval=null;
    }
  }
}",0.8779803646563815
190072,"@Override public BigDecimal getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<BigDecimal> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(values.get(i));
return total.divide(new BigDecimal(values.size()));
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=values.get(values.size() / 2 - 1);
bd=bd.add(values.get(values.size() / 2));
return bd.divide(new BigDecimal(2));
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(values.get(i));
return sum;
case MIN:
BigDecimal minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
BigDecimal maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public BigDecimal getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<BigDecimal>(low,high,false,false),estimator);
}",0.1967049425861208
190073,"@Override public BigInteger getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<BigInteger> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(values.get(i));
return total.divide(BigInteger.valueOf(values.size()));
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=values.get(values.size() / 2 - 1);
bi=bi.add(values.get(values.size() / 2));
return bi.divide(BigInteger.valueOf(2));
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(values.get(i));
return sum;
case MIN:
BigInteger minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
BigInteger maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public BigInteger getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<BigInteger>(low,high,false,false),estimator);
}",0.1951461119366022
190074,"@Override public Boolean getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Boolean> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
Boolean minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
Boolean maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Boolean getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Boolean>(low,high,false,false),estimator);
}",0.2184105202973127
190075,"@Override public Byte getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Byte> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).byteValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).byteValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.byteValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.byteValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.byteValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Byte getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Byte>(low,high,false,false),estimator);
}",0.164079822616408
190076,"@Override public Character getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Character> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
Character minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
Character maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Character getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Character>(low,high,false,false),estimator);
}",0.221465076660988
190077,"@Override public Double getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Double> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(new BigDecimal(values.get(i)));
return total.divide(new BigDecimal(values.size())).doubleValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=new BigDecimal(values.get(values.size() / 2 - 1));
bd=bd.add(new BigDecimal(values.get(values.size() / 2)));
return bd.divide(new BigDecimal(2)).doubleValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(new BigDecimal(values.get(i)));
return sum.doubleValue();
case MIN:
BigDecimal minimum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(new BigDecimal(values.get(i))) > 0) minimum=new BigDecimal(values.get(i));
return minimum.doubleValue();
case MAX:
BigDecimal maximum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(new BigDecimal(values.get(i))) < 0) maximum=new BigDecimal(values.get(i));
return maximum.doubleValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Double getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Double>(low,high,false,false),estimator);
}",0.1705006765899864
190078,"@Override public Float getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Float> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigDecimal total=new BigDecimal(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(new BigDecimal(values.get(i)));
return total.divide(new BigDecimal(values.size())).floatValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigDecimal bd=new BigDecimal(values.get(values.size() / 2 - 1));
bd=bd.add(new BigDecimal(values.get(values.size() / 2)));
return bd.divide(new BigDecimal(2)).floatValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigDecimal sum=new BigDecimal(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(new BigDecimal(values.get(i)));
return sum.floatValue();
case MIN:
BigDecimal minimum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(new BigDecimal(values.get(i))) > 0) minimum=new BigDecimal(values.get(i));
return minimum.floatValue();
case MAX:
BigDecimal maximum=new BigDecimal(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(new BigDecimal(values.get(i))) < 0) maximum=new BigDecimal(values.get(i));
return maximum.floatValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Float getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Float>(low,high,false,false),estimator);
}",0.1693840579710145
190079,"@Override public Integer getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Integer> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).intValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).intValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.intValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.intValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.intValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Integer getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Integer>(low,high,false,false),estimator);
}",0.1688770999115826
190080,"@Override public Long getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Long> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).longValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).longValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.longValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.longValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.longValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Long getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Long>(low,high,false,false),estimator);
}",0.164079822616408
190081,"@Override public Short getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<Short> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    BigInteger total=BigInteger.valueOf(0);
  for (int i=0; i < values.size(); ++i)   total=total.add(BigInteger.valueOf(values.get(i)));
return total.divide(BigInteger.valueOf(values.size())).shortValue();
case MEDIAN:
if (values.size() % 2 == 1) return values.get(values.size() / 2);
BigInteger bi=BigInteger.valueOf(values.get(values.size() / 2 - 1));
bi=bi.add(BigInteger.valueOf(values.get(values.size() / 2)));
return bi.divide(BigInteger.valueOf(2)).shortValue();
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
BigInteger sum=BigInteger.valueOf(0);
for (int i=0; i < values.size(); ++i) sum=sum.add(BigInteger.valueOf(values.get(i)));
return sum.shortValue();
case MIN:
BigInteger minimum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(BigInteger.valueOf(values.get(i))) > 0) minimum=BigInteger.valueOf(values.get(i));
return minimum.shortValue();
case MAX:
BigInteger maximum=BigInteger.valueOf(values.get(0));
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(BigInteger.valueOf(values.get(i))) < 0) maximum=BigInteger.valueOf(values.get(i));
return maximum.shortValue();
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public Short getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<Short>(low,high,false,false),estimator);
}",0.1651943462897526
190082,"@Override public String getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  List<String> values=getValues(low,high);
  if (values.isEmpty())   return null;
switch (estimator) {
case AVERAGE:
    throw new UnsupportedOperationException(""String_Node_Str"");
case MEDIAN:
  if (values.size() % 2 == 1)   return values.get(values.size() / 2);
return values.get(values.size() / 2 - 1);
case MODE:
Hashtable<Integer,Integer> map=new Hashtable<Integer,Integer>();
for (int i=0; i < values.size(); ++i) {
int prev=0;
if (map.containsKey(values.get(i).hashCode())) prev=map.get(values.get(i).hashCode());
map.put(values.get(i).hashCode(),prev + 1);
}
int max=map.get(values.get(0).hashCode());
int index=0;
for (int i=1; i < values.size(); ++i) if (max < map.get(values.get(i).hashCode())) {
max=map.get(values.get(i).hashCode());
index=i;
}
return values.get(index);
case SUM:
throw new UnsupportedOperationException(""String_Node_Str"");
case MIN:
String minimum=values.get(0);
for (int i=1; i < values.size(); ++i) if (minimum.compareTo(values.get(i)) > 0) minimum=values.get(i);
return minimum;
case MAX:
String maximum=values.get(0);
for (int i=1; i < values.size(); ++i) if (maximum.compareTo(values.get(i)) < 0) maximum=values.get(i);
return maximum;
case FIRST:
return values.get(0);
case LAST:
return values.get(values.size() - 1);
default :
throw new IllegalArgumentException(""String_Node_Str"");
}
}","@Override public String getValue(double low,double high,Estimator estimator){
  if (low > high)   throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  return getValue(new Interval<String>(low,high,false,false),estimator);
}",0.216867469879518
190083,"private void finishImport(Container container){
  if (container.verify()) {
    Report report=container.getReport();
    ReportPanel reportPanel=new ReportPanel();
    reportPanel.setData(report,container);
    DialogDescriptor dd=new DialogDescriptor(reportPanel,NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str""));
    if (!DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
      reportPanel.destroy();
      return;
    }
    reportPanel.destroy();
    final Processor processor=reportPanel.getProcessor();
    Workspace workspace=null;
    ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
    ProjectControllerUI pcui=Lookup.getDefault().lookup(ProjectControllerUI.class);
    if (pc.getCurrentProject() == null) {
      pcui.newProject();
      workspace=pc.getCurrentWorkspace();
    }
    final ProcessorUI pui=getProcessorUI(processor);
    if (pui != null) {
      if (pui != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
              JPanel panel=pui.getPanel();
              pui.setup(processor);
              final DialogDescriptor dd2=new DialogDescriptor(panel,title);
              if (panel instanceof ValidationPanel) {
                ValidationPanel vp=(ValidationPanel)panel;
                vp.addChangeListener(new ChangeListener(){
                  public void stateChanged(                  ChangeEvent e){
                    dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
                  }
                }
);
                dd2.setValid(!vp.isProblem());
              }
              Object result=DialogDisplayer.getDefault().notify(dd2);
              if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
                pui.unsetup();
                return;
              }
              pui.unsetup();
            }
          }
);
        }
 catch (        InterruptedException ex) {
          Exceptions.printStackTrace(ex);
        }
catch (        InvocationTargetException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
    controller.process(container,processor,workspace);
    String source=container.getSource();
    if (source.isEmpty()) {
      source=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
    }
    StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"",source));
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}","private void finishImport(Container container){
  if (container.verify()) {
    Report report=container.getReport();
    ReportPanel reportPanel=new ReportPanel();
    reportPanel.setData(report,container);
    DialogDescriptor dd=new DialogDescriptor(reportPanel,NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str""));
    if (!DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.OK_OPTION)) {
      reportPanel.destroy();
      return;
    }
    reportPanel.destroy();
    final Processor processor=reportPanel.getProcessor();
    Workspace workspace=null;
    ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
    ProjectControllerUI pcui=Lookup.getDefault().lookup(ProjectControllerUI.class);
    if (pc.getCurrentProject() == null) {
      pcui.newProject();
      workspace=pc.getCurrentWorkspace();
    }
    final ProcessorUI pui=getProcessorUI(processor);
    final ValidResult validResult=new ValidResult();
    if (pui != null) {
      if (pui != null) {
        try {
          SwingUtilities.invokeAndWait(new Runnable(){
            public void run(){
              String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
              JPanel panel=pui.getPanel();
              pui.setup(processor);
              final DialogDescriptor dd2=new DialogDescriptor(panel,title);
              if (panel instanceof ValidationPanel) {
                ValidationPanel vp=(ValidationPanel)panel;
                vp.addChangeListener(new ChangeListener(){
                  public void stateChanged(                  ChangeEvent e){
                    dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
                  }
                }
);
                dd2.setValid(!vp.isProblem());
              }
              Object result=DialogDisplayer.getDefault().notify(dd2);
              if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
                validResult.setResult(false);
              }
 else {
                pui.unsetup();
                validResult.setResult(true);
              }
            }
          }
);
        }
 catch (        InterruptedException ex) {
          Exceptions.printStackTrace(ex);
        }
catch (        InvocationTargetException ex) {
          Exceptions.printStackTrace(ex);
        }
      }
    }
    if (validResult.isResult()) {
      controller.process(container,processor,workspace);
      String source=container.getSource();
      if (source.isEmpty()) {
        source=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
      }
      StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"",source));
    }
  }
 else {
    System.err.println(""String_Node_Str"");
  }
}",0.9467989179440938
190084,"public void run(){
  String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
  JPanel panel=pui.getPanel();
  pui.setup(processor);
  final DialogDescriptor dd2=new DialogDescriptor(panel,title);
  if (panel instanceof ValidationPanel) {
    ValidationPanel vp=(ValidationPanel)panel;
    vp.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
      }
    }
);
    dd2.setValid(!vp.isProblem());
  }
  Object result=DialogDisplayer.getDefault().notify(dd2);
  if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
    pui.unsetup();
    return;
  }
  pui.unsetup();
}","public void run(){
  String title=NbBundle.getMessage(DesktopImportControllerUI.class,""String_Node_Str"");
  JPanel panel=pui.getPanel();
  pui.setup(processor);
  final DialogDescriptor dd2=new DialogDescriptor(panel,title);
  if (panel instanceof ValidationPanel) {
    ValidationPanel vp=(ValidationPanel)panel;
    vp.addChangeListener(new ChangeListener(){
      public void stateChanged(      ChangeEvent e){
        dd2.setValid(!((ValidationPanel)e.getSource()).isProblem());
      }
    }
);
    dd2.setValid(!vp.isProblem());
  }
  Object result=DialogDisplayer.getDefault().notify(dd2);
  if (result.equals(NotifyDescriptor.CANCEL_OPTION) || result.equals(NotifyDescriptor.CLOSED_OPTION)) {
    validResult.setResult(false);
  }
 else {
    pui.unsetup();
    validResult.setResult(true);
  }
}",0.9152759948652118
190085,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  this.metaEdge=edge instanceof MetaEdge;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.9783505154639176
190086,"/** 
 * Creates a preview graph from the given mixed graph.
 * @param sourceGraph   the mixed graph
 * @return              a generated preview graph
 */
public GraphImpl createPreviewGraph(PreviewModel model,HierarchicalMixedGraph sourceGraph){
  GraphImpl previewGraph=new GraphImpl(model);
  for (  org.gephi.graph.api.Node sourceNode : sourceGraph.getNodes()) {
    createPreviewNode(previewGraph,sourceNode);
  }
  for (  org.gephi.graph.api.Edge sourceEdge : sourceGraph.getEdgesAndMetaEdges()) {
    if (sourceEdge.getWeight() <= 0) {
      continue;
    }
    if (sourceEdge.isSelfLoop()) {
      createPreviewSelfLoop(previewGraph,sourceEdge);
      continue;
    }
    if (sourceEdge.isDirected()) {
      if (isBidirectional(sourceGraph,sourceEdge)) {
        createPreviewBidirectionalEdge(previewGraph,sourceEdge);
      }
 else {
        createPreviewUnidirectionalEdge(previewGraph,sourceEdge);
      }
    }
 else {
      createPreviewUndirectedEdge(previewGraph,sourceEdge);
    }
  }
  nodeMap.clear();
  return previewGraph;
}","/** 
 * Creates a preview graph from the given mixed graph.
 * @param sourceGraph   the mixed graph
 * @return              a generated preview graph
 */
public GraphImpl createPreviewGraph(PreviewModel model,HierarchicalMixedGraph sourceGraph){
  GraphImpl previewGraph=new GraphImpl(model);
  for (  org.gephi.graph.api.Node sourceNode : sourceGraph.getNodes()) {
    createPreviewNode(previewGraph,sourceNode);
  }
  calculateMinMaxWeight(sourceGraph,previewGraph);
  for (  org.gephi.graph.api.Edge sourceEdge : sourceGraph.getEdgesAndMetaEdges()) {
    if (sourceEdge.getWeight() <= 0) {
      continue;
    }
    if (sourceEdge.isSelfLoop()) {
      createPreviewSelfLoop(previewGraph,sourceEdge);
      continue;
    }
    if (sourceEdge.isDirected()) {
      if (isBidirectional(sourceGraph,sourceEdge)) {
        createPreviewBidirectionalEdge(previewGraph,sourceEdge);
      }
 else {
        createPreviewUnidirectionalEdge(previewGraph,sourceEdge);
      }
    }
 else {
      createPreviewUndirectedEdge(previewGraph,sourceEdge);
    }
  }
  nodeMap.clear();
  return previewGraph;
}",0.9761793554413826
190087,"@Override public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","@Override public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9768246281563472
190088,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9754098360655736
190089,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9767441860465116
190090,"/** 
 * Adds the given edge to the list of the supervised edges. It updates the edges with the supervisor's values.
 * @param edge  the edge to supervise
 */
public void addEdge(EdgeImpl edge){
  getSupervisedEdges().add(edge);
  colorEdge(edge);
  colorEdgeLabel(edge);
  updateEdgeLabelValue(edge);
  adjustEdgeLabelFont(edge);
}","/** 
 * Adds the given edge to the list of the supervised edges. It updates the edges with the supervisor's values.
 * @param edge  the edge to supervise
 */
public void addEdge(EdgeImpl edge){
  getSupervisedEdges().add(edge);
  colorEdge(edge);
  colorEdgeLabel(edge);
  updateEdgeLabelValue(edge);
  adjustEdgeLabelFont(edge);
  if (rescaleWeight) {
    float min=edge.getMetaEdge() ? edge.getGraph().getMinMetaWeight() : edge.getGraph().getMinWeight();
    float max=edge.getMetaEdge() ? edge.getGraph().getMaxMetaWeight() : edge.getGraph().getMaxWeight();
    float ratio=(GraphImpl.WEIGHT_MAXIMUM - GraphImpl.WEIGHT_MINIMUM) / (max - min);
    float weight=(edge.getThickness() - min) * ratio + GraphImpl.WEIGHT_MINIMUM;
    edge.setThickness(weight);
  }
}",0.6051188299817185
190091,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.8908594815825375
190092,"public void defaultValues(){
  show=true;
  colorizer=new CustomColorMode(0,0,0);
  edgeScale=new Float(1f);
}","public void defaultValues(){
  show=true;
  colorizer=new CustomColorMode(0,0,0);
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.88
190093,"public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}","public SupervisorPropery[] getProperties(){
  final String CATEGORY=""String_Node_Str"";
  try {
    return new SupervisorPropery[]{SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Float.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeColorizerPropertyEditor.class),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Boolean.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Integer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,Font.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),SupervisorPropery.createProperty(this,EdgeChildColorizer.class,""String_Node_Str"",CATEGORY,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",EdgeChildColorizerPropertyEditor.class)};
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return new SupervisorPropery[0];
}",0.9537931034482758
190094,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeBothBColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9493243243243245
190095,"public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeB1ColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
}","public void defaultValues(){
  curvedFlag=true;
  colorizer=new EdgeB1ColorMode();
  showLabelsFlag=false;
  shortenLabelsFlag=false;
  labelMaxChar=10;
  baseLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,10);
  labelColorizer=new ParentColorMode();
  showMiniLabelsFlag=false;
  shortenMiniLabelsFlag=false;
  miniLabelMaxChar=10;
  miniLabelFont=new Font(Font.SANS_SERIF,Font.PLAIN,8);
  miniLabelAddedRadius=15f;
  miniLabelColorizer=new ParentColorMode();
  showArrowsFlag=true;
  arrowAddedRadius=65f;
  arrowSize=20f;
  arrowColorizer=new ParentColorMode();
  edgeScale=new Float(1f);
  rescaleWeight=Boolean.TRUE;
}",0.9752883031301482
190096,"public Component getStatusLineElement(){
  panel=new WorkspaceUISelectorPanel();
  return panel;
}","public Component getStatusLineElement(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(this);
  panel=new WorkspaceUISelectorPanel();
  return panel;
}",0.6426229508196721
190097,"/** 
 * Creates a preview node from the given source node.
 * @param previewGraph  the parent preview graph
 * @param sourceNode    the source node
 * @return              the generated preview node
 */
private NodeImpl createPreviewNode(GraphImpl previewGraph,org.gephi.graph.api.Node sourceNode){
  org.gephi.graph.api.NodeData sourceNodeData=sourceNode.getNodeData();
  org.gephi.graph.api.TextData sourceNodeTextData=sourceNodeData.getTextData();
  String label=sourceNodeData.getLabel();
  if (sourceNodeTextData != null && sourceNodeTextData.getText() != null && sourceNodeTextData.getText().isEmpty()) {
    label=sourceNodeTextData.getText();
  }
  float labelSize=1f;
  if (sourceNodeTextData != null) {
    labelSize=sourceNodeTextData.getSize();
  }
  if (previewGraph.getModel().getNodeSupervisor().getProportionalLabelSize()) {
    labelSize*=sourceNodeData.getRadius() / 10f;
  }
  NodeImpl previewNode=new NodeImpl(previewGraph,sourceNodeData.x(),-sourceNodeData.y(),sourceNodeData.getRadius(),label,labelSize,sourceNodeData.r(),sourceNodeData.g(),sourceNodeData.b());
  previewGraph.addNode(previewNode);
  nodeMap.put(sourceNode.getId(),previewNode);
  return previewNode;
}","/** 
 * Creates a preview node from the given source node.
 * @param previewGraph  the parent preview graph
 * @param sourceNode    the source node
 * @return              the generated preview node
 */
private NodeImpl createPreviewNode(GraphImpl previewGraph,org.gephi.graph.api.Node sourceNode){
  org.gephi.graph.api.NodeData sourceNodeData=sourceNode.getNodeData();
  org.gephi.graph.api.TextData sourceNodeTextData=sourceNodeData.getTextData();
  String label=sourceNodeData.getLabel();
  if (sourceNodeTextData != null && sourceNodeTextData.getText() != null && !sourceNodeTextData.getText().isEmpty()) {
    label=sourceNodeTextData.getText();
  }
  float labelSize=1f;
  if (sourceNodeTextData != null) {
    labelSize=sourceNodeTextData.getSize();
  }
  if (previewGraph.getModel().getNodeSupervisor().getProportionalLabelSize()) {
    labelSize*=sourceNodeData.getRadius() / 10f;
  }
  NodeImpl previewNode=new NodeImpl(previewGraph,sourceNodeData.x(),-sourceNodeData.y(),sourceNodeData.getRadius(),label,labelSize,sourceNodeData.r(),sourceNodeData.g(),sourceNodeData.b());
  previewGraph.addNode(previewNode);
  nodeMap.put(sourceNode.getId(),previewNode);
  return previewNode;
}",0.9995803608896348
190098,"public void removeChangeListener(ChangeListener listener){
  listeners.remove(listener);
}","public void removeChangeListener(ChangeListener listener){
  if (listeners != null) {
    listeners.remove(listener);
  }
}",0.8450704225352113
190099,"private boolean isSelected(){
  return FiltersTopComponent.findInstance().getUiModel().getSelectedRoot() == query;
}","private boolean isSelected(){
  FilterController fc=Lookup.getDefault().lookup(FilterController.class);
  return fc.getModel().getCurrentQuery() == query;
}",0.5294117647058824
190100,"@Override public boolean isInOctreeLeaf(Octant leaf){
  return ((ModelImpl)obj.getModel()).getOctants()[0] == leaf;
}","@Override public boolean isInOctreeLeaf(Octant leaf){
  if (obj.getModel() == null) {
    return false;
  }
  return ((ModelImpl)obj.getModel()).getOctants()[0] == leaf;
}",0.8125
190101,"@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  FilterLibrary library=filterController.getModel().getLibrary();
  library.saveQuery(queryNode.qetQuery());
  return null;
}","@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  FilterLibrary library=filterController.getModel().getLibrary();
  library.saveQuery(queryNode.getQuery());
  return null;
}",0.9968253968253968
190102,"@Override public PasteType getDropType(final Transferable t,int action,int index){
  if (category == null || !category.equals(FiltersExplorer.QUERIES)) {
    return null;
  }
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        FilterLibrary library=filterController.getModel().getLibrary();
        library.saveQuery(queryNode.qetQuery());
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(final Transferable t,int action,int index){
  if (category == null || !category.equals(FiltersExplorer.QUERIES)) {
    return null;
  }
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        FilterLibrary library=filterController.getModel().getLibrary();
        library.saveQuery(queryNode.getQuery());
        return null;
      }
    }
;
  }
  return null;
}",0.9986206896551724
190103,"private void saveExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    boolean parameterExpanded=false;
    if (firstChild != null && firstChild instanceof ParameterNode) {
      parameterExpanded=isExpanded(firstChild);
    }
    uiModel.setExpand(queryNode.qetQuery(),isExpanded(queryNode),parameterExpanded);
    for (    Node n : queryNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
}","private void saveExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    boolean parameterExpanded=false;
    if (firstChild != null && firstChild instanceof ParameterNode) {
      parameterExpanded=isExpanded(firstChild);
    }
    uiModel.setExpand(queryNode.getQuery(),isExpanded(queryNode),parameterExpanded);
    for (    Node n : queryNode.getChildren().getNodes()) {
      saveExpandStatus(n);
    }
  }
}",0.9985569985569984
190104,"public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
    if (uiModel == null) {
      return;
    }
    Node[] nodeArray=(Node[])evt.getNewValue();
    if (nodeArray.length > 0) {
      Node node=((Node[])evt.getNewValue())[0];
      if (node instanceof RootNode) {
        uiModel.setSelectedQuery(null);
        return;
      }
      while (!(node instanceof QueryNode)) {
        node=node.getParentNode();
        if (node.getParentNode() == null) {
          uiModel.setSelectedQuery(null);
          return;
        }
      }
      QueryNode queryNode=(QueryNode)node;
      final Query query=queryNode.qetQuery();
      new Thread(new Runnable(){
        public void run(){
          uiModel.setSelectedQuery(query);
        }
      }
).start();
    }
  }
}","public void propertyChange(PropertyChangeEvent evt){
  if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
    if (uiModel == null) {
      return;
    }
    Node[] nodeArray=(Node[])evt.getNewValue();
    if (nodeArray.length > 0) {
      Node node=((Node[])evt.getNewValue())[0];
      if (node instanceof RootNode) {
        uiModel.setSelectedQuery(null);
        return;
      }
      while (!(node instanceof QueryNode)) {
        node=node.getParentNode();
        if (node.getParentNode() == null) {
          uiModel.setSelectedQuery(null);
          return;
        }
      }
      QueryNode queryNode=(QueryNode)node;
      final Query query=queryNode.getQuery();
      new Thread(new Runnable(){
        public void run(){
          uiModel.setSelectedQuery(query);
        }
      }
).start();
    }
  }
}",0.99880810488677
190105,"private void loadExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    if (uiModel.isExpanded(queryNode.qetQuery())) {
      expandNode(queryNode);
    }
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    if (firstChild != null && firstChild instanceof ParameterNode) {
      if (uiModel.isParametersExpanded(queryNode.qetQuery())) {
        expandNode(firstChild);
      }
    }
    for (    Node n : queryNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
}","private void loadExpandStatus(Node node){
  if (node instanceof RootNode) {
    RootNode rootNode=(RootNode)node;
    for (    Node n : rootNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
 else   if (node instanceof QueryNode) {
    QueryNode queryNode=(QueryNode)node;
    if (uiModel.isExpanded(queryNode.getQuery())) {
      expandNode(queryNode);
    }
    Node firstChild=queryNode.getChildren().getNodeAt(0);
    if (firstChild != null && firstChild instanceof ParameterNode) {
      if (uiModel.isParametersExpanded(queryNode.getQuery())) {
        expandNode(firstChild);
      }
    }
    for (    Node n : queryNode.getChildren().getNodes()) {
      loadExpandStatus(n);
    }
  }
}",0.9971988795518208
190106,"@Override public Transferable paste() throws IOException {
  SavedQueryNode node=(SavedQueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  filterController.add(node.getQuery());
  return null;
}","@Override public Transferable paste() throws IOException {
  QueryNode queryNode=(QueryNode)dropNode;
  FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
  filterController.removeSubQuery(queryNode.getQuery(),queryNode.getQuery().getParent());
  filterController.add(queryNode.getQuery());
  return null;
}",0.7609427609427609
190107,"@Override public PasteType getDropType(Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    try {
      final FilterBuilder fb=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
      return new PasteType(){
        @Override public Transferable paste() throws IOException {
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query f=filterController.createQuery(fb.getFilter());
          filterController.add(f);
          return null;
        }
      }
;
    }
 catch (    UnsupportedFlavorException ex) {
      ex.printStackTrace();
    }
catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
 else   if (dropNode != null && dropNode instanceof SavedQueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        SavedQueryNode node=(SavedQueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.add(node.getQuery());
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    try {
      final FilterBuilder fb=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
      return new PasteType(){
        @Override public Transferable paste() throws IOException {
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query f=filterController.createQuery(fb.getFilter());
          filterController.add(f);
          return null;
        }
      }
;
    }
 catch (    UnsupportedFlavorException ex) {
      ex.printStackTrace();
    }
catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
 else   if (dropNode != null && dropNode instanceof SavedQueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        SavedQueryNode node=(SavedQueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.add(node.getQuery());
        return null;
      }
    }
;
  }
 else   if (dropNode != null && dropNode instanceof QueryNode && ((QueryNode)dropNode).getQuery().getParent() != null) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.removeSubQuery(queryNode.getQuery(),queryNode.getQuery().getParent());
        filterController.add(queryNode.getQuery());
        return null;
      }
    }
;
  }
  return null;
}",0.8082832331329325
190108,"@Override public PasteType getDropType(final Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.setSubQuery(parent,queryNode.qetQuery());
        return null;
      }
    }
;
  }
 else   if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        try {
          FilterBuilder builder=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query query=filterController.createQuery(builder.getFilter());
          filterController.setSubQuery(parent,query);
        }
 catch (        UnsupportedFlavorException ex) {
          Exceptions.printStackTrace(ex);
        }
        return null;
      }
    }
;
  }
  return null;
}","@Override public PasteType getDropType(final Transferable t,int action,int index){
  final Node dropNode=NodeTransfer.node(t,DnDConstants.ACTION_COPY_OR_MOVE);
  if (dropNode != null && dropNode instanceof QueryNode) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        QueryNode queryNode=(QueryNode)dropNode;
        FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
        filterController.setSubQuery(parent,queryNode.getQuery());
        return null;
      }
    }
;
  }
 else   if (t.isDataFlavorSupported(FilterBuilderNode.DATA_FLAVOR)) {
    return new PasteType(){
      @Override public Transferable paste() throws IOException {
        try {
          FilterBuilder builder=(FilterBuilder)t.getTransferData(FilterBuilderNode.DATA_FLAVOR);
          FilterController filterController=Lookup.getDefault().lookup(FilterController.class);
          Query query=filterController.createQuery(builder.getFilter());
          filterController.setSubQuery(parent,query);
        }
 catch (        UnsupportedFlavorException ex) {
          Exceptions.printStackTrace(ex);
        }
        return null;
      }
    }
;
  }
  return null;
}",0.999185667752443
190109,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public BidirectionalEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB2Out(this));
  arrows.add(new EdgeArrowB1In(this));
  getDirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public BidirectionalEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB2Out(this));
  arrows.add(new EdgeArrowB1In(this));
  getDirectedEdgeSupervisor().addEdge(this);
}",0.8823016564952049
190110,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}",0.9008082292432036
190111,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge.getWeight());
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.7926757235676314
190112,"/** 
 * Creates a preview unidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview unidirectional edge
 */
private UnidirectionalEdgeImpl createPreviewUnidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UnidirectionalEdgeImpl previewEdge=new UnidirectionalEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUnidirectionalEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview unidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview unidirectional edge
 */
private UnidirectionalEdgeImpl createPreviewUnidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UnidirectionalEdgeImpl previewEdge=new UnidirectionalEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUnidirectionalEdge(previewEdge);
  return previewEdge;
}",0.9945105215004576
190113,"/** 
 * Creates a preview bidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview bidirectional edge
 */
private BidirectionalEdgeImpl createPreviewBidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  BidirectionalEdgeImpl previewEdge=new BidirectionalEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addBidirectionalEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview bidirectional edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview bidirectional edge
 */
private BidirectionalEdgeImpl createPreviewBidirectionalEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  BidirectionalEdgeImpl previewEdge=new BidirectionalEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addBidirectionalEdge(previewEdge);
  return previewEdge;
}",0.994475138121547
190114,"/** 
 * Creates a preview self-loop from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview self-loop
 */
private SelfLoopImpl createPreviewSelfLoop(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  SelfLoopImpl previewSelfLoop=new SelfLoopImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()));
  previewGraph.addSelfLoop(previewSelfLoop);
  return previewSelfLoop;
}","/** 
 * Creates a preview self-loop from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview self-loop
 */
private SelfLoopImpl createPreviewSelfLoop(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  SelfLoopImpl previewSelfLoop=new SelfLoopImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()));
  previewGraph.addSelfLoop(previewSelfLoop);
  return previewSelfLoop;
}",0.9897435897435898
190115,"/** 
 * Creates a preview undirected edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview undirected edge
 */
private UndirectedEdgeImpl createPreviewUndirectedEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UndirectedEdgeImpl previewEdge=new UndirectedEdgeImpl(previewGraph,sourceEdge.getWeight(),nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUndirectedEdge(previewEdge);
  return previewEdge;
}","/** 
 * Creates a preview undirected edge from the given source edge.
 * @param previewGraph  the parent preview graph
 * @param sourceEdge    the source edge
 * @return              the generated preview undirected edge
 */
private UndirectedEdgeImpl createPreviewUndirectedEdge(GraphImpl previewGraph,org.gephi.graph.api.Edge sourceEdge){
  org.gephi.graph.api.EdgeData sourceEdgeData=sourceEdge.getEdgeData();
  org.gephi.graph.api.TextData sourceEdgeTextData=sourceEdgeData.getTextData();
  String label=sourceEdgeData.getLabel();
  if (sourceEdgeTextData != null && sourceEdgeTextData.getText() != null && sourceEdgeTextData.getText().isEmpty()) {
    label=sourceEdgeTextData.getText();
  }
  float labelSize=1f;
  if (sourceEdgeTextData != null) {
    labelSize=sourceEdgeTextData.getSize();
  }
  UndirectedEdgeImpl previewEdge=new UndirectedEdgeImpl(previewGraph,sourceEdge,nodeMap.get(sourceEdge.getSource().getId()),nodeMap.get(sourceEdge.getTarget().getId()),label,labelSize);
  previewGraph.addUndirectedEdge(previewEdge);
  return previewEdge;
}",0.9943661971830986
190116,"/** 
 * Constructor.
 * @param parent     the parent graph of the self-loop
 * @param thickness  the self-loop's thickness
 * @param node       the self-loop's related node
 */
public SelfLoopImpl(GraphImpl parent,float thickness,NodeImpl node){
  super(parent,thickness);
  this.node=node;
  genCurve();
  getSelfLoopSupervisor().addSelfLoop(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the self-loop
 * @param thickness  the self-loop's thickness
 * @param node       the self-loop's related node
 */
public SelfLoopImpl(GraphImpl parent,Edge edge,NodeImpl node){
  super(parent,edge.getWeight());
  this.node=node;
  if (edge.getEdgeData().r() != -1) {
    originalColor=new Color(edge.getEdgeData().r(),edge.getEdgeData().g(),edge.getEdgeData().b(),edge.getEdgeData().alpha());
  }
 else {
    originalColor=null;
  }
  genCurve();
  getSelfLoopSupervisor().addSelfLoop(this);
}",0.721058434399118
190117,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UndirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  getUndirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UndirectedEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  getUndirectedEdgeSupervisor().addEdge(this);
}",0.9625126646403244
190118,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UnidirectionalEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  getDirectedEdgeSupervisor().addEdge(this);
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
public UnidirectionalEdgeImpl(GraphImpl parent,Edge edge,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,edge,node1,node2,label,labelSize);
  getDirectedEdgeSupervisor().addEdge(this);
}",0.9626639757820384
190119,"@Override public void setAsText(String s){
  if (supportsCustomColorMode() && colorizerFactory.matchCustomColorMode(s)) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(s);
    if (m.lookingAt()) {
      int r=Integer.valueOf(m.group(1));
      int g=Integer.valueOf(m.group(2));
      int b=Integer.valueOf(m.group(3));
      setValue(colorizerFactory.createCustomColorMode(r,g,b));
    }
  }
 else   if (supportsNodeOriginalColorMode() && colorizerFactory.matchNodeOriginalColorMode(s)) {
    setValue(colorizerFactory.createNodeOriginalColorMode());
  }
 else   if (supportsParentColorMode() && colorizerFactory.matchParentColorMode(s)) {
    setValue(colorizerFactory.createParentColorMode());
  }
 else   if (supportsEdgeB1ColorMode() && colorizerFactory.matchEdgeB1ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB1ColorMode());
  }
 else   if (supportsEdgeB2ColorMode() && colorizerFactory.matchEdgeB2ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB2ColorMode());
  }
 else   if (supportsEdgeBothBColorMode() && colorizerFactory.matchEdgeBothBColorMode(s)) {
    setValue(colorizerFactory.createEdgeBothBColorMode());
  }
}","@Override public void setAsText(String s){
  if (supportsCustomColorMode() && colorizerFactory.matchCustomColorMode(s)) {
    Pattern p=Pattern.compile(""String_Node_Str"");
    Matcher m=p.matcher(s);
    if (m.lookingAt()) {
      int r=Integer.valueOf(m.group(1));
      int g=Integer.valueOf(m.group(2));
      int b=Integer.valueOf(m.group(3));
      setValue(colorizerFactory.createCustomColorMode(r,g,b));
    }
  }
 else   if (supportsNodeOriginalColorMode() && colorizerFactory.matchNodeOriginalColorMode(s)) {
    setValue(colorizerFactory.createNodeOriginalColorMode());
  }
 else   if (supportsParentColorMode() && colorizerFactory.matchParentColorMode(s)) {
    setValue(colorizerFactory.createParentColorMode());
  }
 else   if (supportsEdgeB1ColorMode() && colorizerFactory.matchEdgeB1ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB1ColorMode());
  }
 else   if (supportsEdgeB2ColorMode() && colorizerFactory.matchEdgeB2ColorMode(s)) {
    setValue(colorizerFactory.createEdgeB2ColorMode());
  }
 else   if (supportsEdgeBothBColorMode() && colorizerFactory.matchEdgeBothBColorMode(s)) {
    setValue(colorizerFactory.createEdgeBothBColorMode());
  }
 else   if (supportEdgeOriginalColorMode() && colorizerFactory.matchEdgeOriginalColorMode(s)) {
    setValue(colorizerFactory.createEdgeOriginalColorMode());
  }
}",0.9354581673306772
190120,"@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  p=new ParentColorModePanelDecorator(this,p);
  return p;
}","@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeOriginalColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  p=new ParentColorModePanelDecorator(this,p);
  return p;
}",0.9224011713030746
190121,"@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  return p;
}","@Override public Component getCustomEditor(){
  ColorModePanel p;
  p=(ColorModePanel)super.getCustomEditor();
  p=new EdgeOriginalColorModePanelDecorator(this,p);
  p=new EdgeBothBColorModePanelDecorator(this,p);
  p=new EdgeB2ColorModePanelDecorator(this,p);
  p=new EdgeB1ColorModePanelDecorator(this,p);
  return p;
}",0.9100169779286928
190122,"public void renderGraphLabelBorders(Graph graph){
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}","public void renderGraphLabelBorders(Graph graph){
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()&& n.getLabel().getFont() != null) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}",0.9281045751633988
190123,"public void renderGraphLabels(Graph graph){
  textFont(uniEdgeMiniLabelFont);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  textFont(biEdgeMiniLabelFont);
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  textFont(uniEdgeMiniLabelFont);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  textFont(biEdgeMiniLabelFont);
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9321266968325792
190124,"public void renderGraphLabels(Graph graph){
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9272237196765498
190125,"public void renderGraphLabelBorders(Graph graph){
  labelBorderGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.insertBefore(labelBorderGroupElem,labelGroupElem);
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}","public void renderGraphLabelBorders(Graph graph){
  labelBorderGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.insertBefore(labelBorderGroupElem,labelGroupElem);
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.showLabelBorders()&& n.getLabel().getFont() != null) {
      renderNodeLabelBorder(n.getLabelBorder());
    }
  }
}",0.9527896995708156
190126,"public void renderGraphLabels(Graph graph){
  labelGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.appendChild(labelGroupElem);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel()) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel()) {
      renderNodeLabel(n.getLabel());
    }
  }
}","public void renderGraphLabels(Graph graph){
  labelGroupElem=createGroupElem(""String_Node_Str"");
  svgRoot.appendChild(labelGroupElem);
  for (  UnidirectionalEdge e : graph.getUnidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  BidirectionalEdge e : graph.getBidirectionalEdges()) {
    if (!e.isCurved()) {
      if (e.showLabel() && e.hasLabel() && e.getLabel().getFont() != null) {
        renderEdgeLabel(e.getLabel());
      }
      if (e.showMiniLabels()) {
        renderEdgeMiniLabels(e);
      }
    }
  }
  for (  UndirectedEdge e : graph.getUndirectedEdges()) {
    if (e.showLabel() && !e.isCurved() && e.hasLabel()&& e.getLabel().getFont() != null) {
      renderEdgeLabel(e.getLabel());
    }
  }
  for (  Node n : graph.getNodes()) {
    if (n.showLabel() && n.hasLabel() && n.getLabel().getFont() != null) {
      renderNodeLabel(n.getLabel());
    }
  }
}",0.9337910740559098
190127,"public Boolean showLabel(){
  if (!hasLabel()) {
    return false;
  }
  EdgeSupervisor supervisor=getEdgeSupervisor();
  int labelCharCount=supervisor.getShortenLabelsFlag() ? supervisor.getLabelMaxChar() : 10;
  float minlength=node1.getRadius() + node2.getRadius() + 0.65f * labelCharCount * label.getFont().getSize();
  return supervisor.getShowLabelsFlag() && length >= minlength;
}","public Boolean showLabel(){
  if (!hasLabel() || getLabel().getFont() == null) {
    return false;
  }
  EdgeSupervisor supervisor=getEdgeSupervisor();
  int labelCharCount=supervisor.getShortenLabelsFlag() ? supervisor.getLabelMaxChar() : 10;
  float minlength=node1.getRadius() + node2.getRadius() + 0.65f * labelCharCount * label.getFont().getSize();
  return supervisor.getShowLabelsFlag() && length >= minlength;
}",0.9602977667493796
190128,"/** 
 * Adjusts the font of the given label client.
 * @param client   the label to adjust the font
 */
public static void adjustFont(LabelFontAdjusterClient client){
  Font baseFont=client.getBaseFont();
  int newSize=(int)(baseFont.getSize() * client.getSizeFactor());
  Font font=new Font(baseFont.getName(),baseFont.getStyle(),newSize);
  client.setFont(font);
}","/** 
 * Adjusts the font of the given label client.
 * @param client   the label to adjust the font
 */
public static void adjustFont(LabelFontAdjusterClient client){
  Font baseFont=client.getBaseFont();
  int newSize=Math.round(baseFont.getSize() * client.getSizeFactor());
  if (newSize > 0) {
    Font font=new Font(baseFont.getName(),baseFont.getStyle(),newSize);
    client.setFont(font);
  }
}",0.9425587467362924
190129,"@Override public void restored(){
  initGephi();
  UIManager.put(""String_Node_Str"",""String_Node_Str"");
  Logger.getLogger(""String_Node_Str"").addHandler(new ReporterHandler());
}","@Override public void restored(){
  initGephi();
  UIManager.put(""String_Node_Str"",""String_Node_Str"");
  UIManager.put(""String_Node_Str"",Boolean.FALSE);
  Logger.getLogger(""String_Node_Str"").addHandler(new ReporterHandler());
}",0.8316831683168316
190130,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedBuilder != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  GraphFileExporterBuilder graphFileExporter : Lookup.getDefault().lookupAll(GraphFileExporterBuilder.class)) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    selectedExporter.setExportVisible(visibleOnlyGraph);
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9674698795180724
190131,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportControllerUI exportController=Lookup.getDefault().lookup(ExportControllerUI.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getExportController().getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedBuilder.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedBuilder=getExporter(fileFilter);
      if (selectedBuilder != null) {
        selectedExporter=selectedBuilder.buildExporter();
      }
      if (selectedExporter != null && exportController.getExportController().getUI(selectedExporter) != null) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String fileName=selectedFile.getName();
        String directoryPath=chooser.getCurrentDirectory().getAbsolutePath();
        fileName=fileName.substring(0,fileName.lastIndexOf(""String_Node_Str""));
        fileName=fileName.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(directoryPath,fileName);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  VectorFileExporterBuilder vectorFileExporter : Lookup.getDefault().lookupAll(VectorFileExporterBuilder.class)) {
    for (    FileType fileType : vectorFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.exportFile(fileObject,selectedExporter);
  }
}",0.9813322019516334
190132,"private void updateEdges(HierarchicalGraph graph){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  float minWeight=Float.POSITIVE_INFINITY;
  float maxWeight=Float.NEGATIVE_INFINITY;
  for (  Edge edge : edgeIterable) {
    if (edge.getSource().getNodeData().getModel() == null || edge.getTarget().getNodeData().getModel() == null) {
      continue;
    }
    minWeight=Math.min(minWeight,edge.getWeight());
    maxWeight=Math.max(maxWeight,edge.getWeight());
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
 else {
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
  limits.setMinWeight(minWeight);
  limits.setMaxWeight(maxWeight);
}","private void updateEdges(HierarchicalGraph graph){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  float minWeight=Float.POSITIVE_INFINITY;
  float maxWeight=Float.NEGATIVE_INFINITY;
  for (  Edge edge : edgeIterable) {
    if (edge.getSource().getNodeData().getModel() == null || edge.getTarget().getNodeData().getModel() == null) {
      continue;
    }
    minWeight=Math.min(minWeight,edge.getWeight());
    maxWeight=Math.max(maxWeight,edge.getWeight());
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
 else {
      if (!undirected && vizConfig.isShowArrows() && !edge.isSelfLoop()&& edge.isDirected()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
  limits.setMinWeight(minWeight);
  limits.setMaxWeight(maxWeight);
}",0.9945474372955287
190133,"@Override public boolean accept(File file){
  if (file.isDirectory() || extensions.size() == 0) {
    return true;
  }
  String nomFichier=file.getName().toLowerCase();
  for (  String extension : extensions) {
    if (nomFichier.endsWith(extension)) {
      return true;
    }
  }
  return false;
}","@Override public boolean accept(File file){
  if (file.isDirectory() || extensions.size() == 0) {
    return true;
  }
  String fileName=file.getName().toLowerCase();
  for (  String extension : extensions) {
    if (fileName.endsWith(extension)) {
      return true;
    }
  }
  return false;
}",0.4377104377104377
190134,"public Element writeXML(Document document){
  Element modelE=document.createElement(""String_Node_Str"");
  Element resultsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<StatisticsUI,String> entry : resultMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element resultE=document.createElement(""String_Node_Str"");
      resultE.setAttribute(""String_Node_Str"",entry.getKey().getClass().getName());
      resultE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(resultE);
    }
  }
  modelE.appendChild(resultsE);
  Element reportsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<Class,String> entry : reportMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element reportE=document.createElement(""String_Node_Str"");
      reportE.setAttribute(""String_Node_Str"",entry.getKey().getName());
      reportE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(reportE);
    }
  }
  modelE.appendChild(reportsE);
  return modelE;
}","public Element writeXML(Document document){
  Element modelE=document.createElement(""String_Node_Str"");
  Element resultsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<StatisticsUI,String> entry : resultMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element resultE=document.createElement(""String_Node_Str"");
      resultE.setAttribute(""String_Node_Str"",entry.getKey().getClass().getName());
      resultE.setAttribute(""String_Node_Str"",entry.getValue());
      resultsE.appendChild(resultE);
    }
  }
  modelE.appendChild(resultsE);
  Element reportsE=document.createElement(""String_Node_Str"");
  for (  Map.Entry<Class,String> entry : reportMap.entrySet()) {
    if (entry.getValue() != null && !entry.getValue().isEmpty()) {
      Element reportE=document.createElement(""String_Node_Str"");
      reportE.setAttribute(""String_Node_Str"",entry.getKey().getName());
      reportE.setAttribute(""String_Node_Str"",entry.getValue());
      reportsE.appendChild(reportE);
    }
  }
  modelE.appendChild(reportsE);
  return modelE;
}",0.9972426470588236
190135,"public void setEnable(boolean enable){
  System.out.println(""String_Node_Str"" + enable);
  if (enable) {
    graphModel.addGraphListener(this);
  }
 else {
    graphModel.removeGraphListener(this);
    refresh.set(false);
  }
  if (!isAlive()) {
    start();
  }
}","public void setEnable(boolean enable){
  if (enable) {
    graphModel.addGraphListener(this);
  }
 else {
    graphModel.removeGraphListener(this);
    refresh.set(false);
  }
  if (!isAlive()) {
    start();
  }
}",0.1924686192468619
190136,"@Override public void run(){
  while (running) {
    try {
      if (refresh.compareAndSet(true,false)) {
        if (filterModel.getFilterThread() != null && filterModel.getCurrentQuery() != null) {
          filterModel.getFilterThread().setRootQuery((AbstractQueryImpl)filterModel.getCurrentQuery());
          System.out.println(""String_Node_Str"");
        }
      }
      Thread.sleep(TIMER);
    }
 catch (    InterruptedException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
}","@Override public void run(){
  while (running) {
    try {
      if (refresh.compareAndSet(true,false)) {
        manualRefresh();
      }
      Thread.sleep(TIMER);
    }
 catch (    InterruptedException ex) {
      Exceptions.printStackTrace(ex);
    }
  }
}",0.6569148936170213
190137,"public void removeSubQuery(Query query,Query parent){
  AbstractQueryImpl impl=(AbstractQueryImpl)parent;
  impl.removeSubQuery(query);
  ((AbstractQueryImpl)query).setParent(null);
  fireChangeEvent();
}","public void removeSubQuery(Query query,Query parent){
  AbstractQueryImpl impl=(AbstractQueryImpl)parent;
  impl.removeSubQuery(query);
  ((AbstractQueryImpl)query).setParent(null);
  fireChangeEvent();
  autoRefreshor.manualRefresh();
}",0.9251700680272108
190138,"public void setSubQuery(Query query,Query subQuery){
  if (queries.contains(subQuery)) {
    queries.remove(subQuery);
  }
  if (subQuery.getParent() != null) {
    ((AbstractQueryImpl)subQuery.getParent()).removeSubQuery(subQuery);
  }
  AbstractQueryImpl impl=(AbstractQueryImpl)query;
  impl.addSubQuery(subQuery);
  fireChangeEvent();
}","public void setSubQuery(Query query,Query subQuery){
  if (queries.contains(subQuery)) {
    queries.remove(subQuery);
  }
  if (subQuery.getParent() != null) {
    ((AbstractQueryImpl)subQuery.getParent()).removeSubQuery(subQuery);
  }
  AbstractQueryImpl impl=(AbstractQueryImpl)query;
  impl.addSubQuery(subQuery);
  fireChangeEvent();
  autoRefreshor.manualRefresh();
}",0.9537166900420756
190139,"/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (this.mDirected ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mDensity);
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (this.mDirected ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mDensity+ ""String_Node_Str"");
  return report;
}",0.972181551976574
190140,"public void updateParameters(Query query){
  ((FilterQueryImpl)query).updateParameters();
  fireChangeEvent();
}","public void updateParameters(Query query){
  if (query instanceof FilterQueryImpl) {
    ((FilterQueryImpl)query).updateParameters();
    fireChangeEvent();
  }
}",0.8175182481751825
190141,"public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && AttributeUtils.getDefault().isNumberListColumn(column)) {
    return value;
  }
 else {
    return value != null ? value.toString() : null;
  }
}","public Object getValueFor(ImmutableTreeNode node){
  Node graphNode=node.getNode();
  if (graphNode.getId() == -1) {
    return null;
  }
  Attributes row=graphNode.getNodeData().getAttributes();
  Object value=row.getValue(column.getIndex());
  if (useSparklines && (AttributeUtils.getDefault().isNumberListColumn(column) || AttributeUtils.getDefault().isDynamicNumberColumn(column))) {
    return value;
  }
 else {
    return value != null ? value.toString() : null;
  }
}",0.9289740698985344
190142,"public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        if (parameters.isUndirectedSumDirectedEdgesWeight()) {
          opposite.setWeight(edge.getWeight() + opposite.getWeight());
        }
 else {
          opposite.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
        }
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          if (parameters.isUndirectedSumDirectedEdgesWeight()) {
            edge.setWeight(edge.getWeight() + opposite.getWeight());
          }
 else {
            edge.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
          }
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  if (!allowAutoNode()) {
    for (    NodeDraftImpl nodeDraftImpl : nodeMap.values().toArray(new NodeDraftImpl[0])) {
      if (nodeDraftImpl.isCreatedAuto()) {
        nodeMap.remove(nodeDraftImpl.getId());
        for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
          EdgeDraftImpl edge=itr.next();
          if (edge.getSource() == nodeDraftImpl || edge.getTarget() == nodeDraftImpl) {
            itr.remove();
          }
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o2.getHeight()).compareTo(o1.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (node.getLabel() == null) {
      node.setLabel(node.getId());
    }
  }
}","public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        if (parameters.isUndirectedSumDirectedEdgesWeight()) {
          opposite.setWeight(edge.getWeight() + opposite.getWeight());
        }
 else {
          opposite.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
        }
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          if (parameters.isUndirectedSumDirectedEdgesWeight()) {
            edge.setWeight(edge.getWeight() + opposite.getWeight());
          }
 else {
            edge.setWeight(Math.max(edge.getWeight(),opposite.getWeight()));
          }
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  if (!allowAutoNode()) {
    for (    NodeDraftImpl nodeDraftImpl : nodeMap.values().toArray(new NodeDraftImpl[0])) {
      if (nodeDraftImpl.isCreatedAuto()) {
        nodeMap.remove(nodeDraftImpl.getId());
        for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
          EdgeDraftImpl edge=itr.next();
          if (edge.getSource() == nodeDraftImpl || edge.getTarget() == nodeDraftImpl) {
            itr.remove();
          }
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o2.getHeight()).compareTo(o1.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (node.getLabel() == null) {
      node.setLabel(node.getId());
    }
  }
  boolean customPosition=false;
  for (  NodeDraftImpl node : nodeMap.values()) {
    if (Float.isNaN(node.getX())) {
      node.setX(0);
    }
    if (Float.isNaN(node.getY())) {
      node.setY(0);
    }
    if (Float.isNaN(node.getZ())) {
      node.setZ(0);
    }
    if (node.getX() != 0f || node.getY() != 0) {
      customPosition=true;
    }
  }
  if (!customPosition) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      node.setX((float)((0.01 + Math.random()) * 1000) - 500);
      node.setY((float)((0.01 + Math.random()) * 1000) - 500);
    }
  }
}",0.9084178335747626
190143,"protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  node.getNodeData().setX(nodeDraft.getX());
  node.getNodeData().setY(nodeDraft.getY());
  node.getNodeData().setZ(nodeDraft.getZ());
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.873836831854577
190144,"/** 
 * Constructs an empty   {@code IntervalTree}.
 */
public IntervalTree(){
  nil=new Node();
  nil.left=nil.right=nil.p=nil;
  root=nil;
}","public IntervalTree(IntervalTree intervalTree){
  nil=new Node();
  nil.left=nil.right=nil.p=nil;
  root=nil;
  copy(intervalTree.root.left,intervalTree.nil);
}",0.5695364238410596
190145,"public void setCameraDistance(float distance){
  fireProperyChange(""String_Node_Str"",null,distance);
}","public void setCameraDistance(float distance){
}",0.64
190146,"public void setup(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  vizModel.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
        refreshZoom();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshZoom();
      }
    }
  }
);
  refreshSharedConfig();
  hightlightCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setLightenNonSelectedAuto(hightlightCheckBox.isSelected());
    }
  }
);
  ((JColorButton)backgroundColorButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setBackgroundColor(((JColorButton)backgroundColorButton).getColor());
    }
  }
);
  autoSelectNeigborCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setAutoSelectNeighbor(autoSelectNeigborCheckbox.isSelected());
    }
  }
);
  zoomSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int cam=(int)VizController.getInstance().getVizModel().getCameraDistance();
      if (zoomSlider.getValue() != cam && cam < zoomSlider.getMaximum()) {
        GraphIO io=VizController.getInstance().getGraphIO();
        io.setCameraDistance(zoomSlider.getValue());
      }
    }
  }
);
}","public void setup(){
  VizModel vizModel=VizController.getInstance().getVizModel();
  vizModel.addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
 else       if (evt.getPropertyName().equals(""String_Node_Str"")) {
        refreshSharedConfig();
      }
    }
  }
);
  refreshSharedConfig();
  hightlightCheckBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setLightenNonSelectedAuto(hightlightCheckBox.isSelected());
    }
  }
);
  ((JColorButton)backgroundColorButton).addPropertyChangeListener(JColorButton.EVENT_COLOR,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setBackgroundColor(((JColorButton)backgroundColorButton).getColor());
    }
  }
);
  autoSelectNeigborCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      VizModel vizModel=VizController.getInstance().getVizModel();
      vizModel.setAutoSelectNeighbor(autoSelectNeigborCheckbox.isSelected());
    }
  }
);
  zoomSlider.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      int cam=(int)VizController.getInstance().getVizModel().getCameraDistance();
      if (zoomSlider.getValue() != cam && cam < zoomSlider.getMaximum()) {
        GraphIO io=VizController.getInstance().getGraphIO();
        io.setCameraDistance(zoomSlider.getValue());
      }
    }
  }
);
}",0.9713609467455622
190147,"public void centerOnGraph(){
  float graphWidth=Math.abs(limits.getMaxXoctree() - limits.getMinXoctree());
  float graphHeight=Math.abs(limits.getMaxYoctree() - limits.getMinYoctree());
  float currentDistanceGraphRatioX=Math.abs(graphDrawable.viewport.get(2) / (float)graphDrawable.getDraggingMarkerX()) / graphDrawable.cameraLocation[2];
  float currentDistanceGraphRatioY=Math.abs(graphDrawable.viewport.get(3) / (float)graphDrawable.getDraggingMarkerY()) / graphDrawable.cameraLocation[2];
  float newCameraLocationX=graphWidth / currentDistanceGraphRatioX;
  float newCameraLocationY=graphHeight / currentDistanceGraphRatioY;
  float newCameraLocation=Math.max(newCameraLocationX,newCameraLocationY);
  graphDrawable.cameraLocation[0]=limits.getMinXoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[1]=limits.getMinYoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[2]=newCameraLocation;
  graphDrawable.cameraTarget[0]=graphDrawable.cameraLocation[0];
  graphDrawable.cameraTarget[1]=graphDrawable.cameraLocation[1];
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnGraph(){
  float graphWidth=Math.abs(limits.getMaxXoctree() - limits.getMinXoctree());
  float graphHeight=Math.abs(limits.getMaxYoctree() - limits.getMinYoctree());
  float currentDistanceGraphRatioX=Math.abs(graphDrawable.viewport.get(2) / (float)graphDrawable.getDraggingMarkerX()) / graphDrawable.cameraLocation[2];
  float currentDistanceGraphRatioY=Math.abs(graphDrawable.viewport.get(3) / (float)graphDrawable.getDraggingMarkerY()) / graphDrawable.cameraLocation[2];
  float newCameraLocationX=graphWidth / currentDistanceGraphRatioX;
  float newCameraLocationY=graphHeight / currentDistanceGraphRatioY;
  float newCameraLocation=Math.max(newCameraLocationX,newCameraLocationY);
  graphDrawable.cameraLocation[0]=limits.getMinXoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[1]=limits.getMinYoctree() + graphWidth / 2;
  graphDrawable.cameraLocation[2]=newCameraLocation;
  graphDrawable.cameraTarget[0]=graphDrawable.cameraLocation[0];
  graphDrawable.cameraTarget[1]=graphDrawable.cameraLocation[1];
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
}",0.961061189559264
190148,"public void centerOnCoordinate(float x,float y,float z){
  graphDrawable.cameraTarget[0]=x;
  graphDrawable.cameraTarget[1]=y;
  graphDrawable.cameraTarget[2]=z;
  graphDrawable.cameraLocation[0]=x;
  graphDrawable.cameraLocation[1]=y;
  graphDrawable.cameraLocation[2]=z + 100;
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnCoordinate(float x,float y,float z){
  graphDrawable.cameraTarget[0]=x;
  graphDrawable.cameraTarget[1]=y;
  graphDrawable.cameraTarget[2]=z;
  graphDrawable.cameraLocation[0]=x;
  graphDrawable.cameraLocation[1]=y;
  graphDrawable.cameraLocation[2]=z + 100;
}",0.8602150537634409
190149,"public void centerOnZero(){
  graphDrawable.cameraLocation[0]=0;
  graphDrawable.cameraLocation[1]=0;
  graphDrawable.cameraLocation[2]=100;
  graphDrawable.cameraTarget[0]=0;
  graphDrawable.cameraTarget[1]=0;
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
  vizController.getVizModel().setCameraDistance(graphDrawable.getCameraVector().length());
}","public void centerOnZero(){
  graphDrawable.cameraLocation[0]=0;
  graphDrawable.cameraLocation[1]=0;
  graphDrawable.cameraLocation[2]=100;
  graphDrawable.cameraTarget[0]=0;
  graphDrawable.cameraTarget[1]=0;
  graphDrawable.cameraTarget[2]=0;
  engine.getScheduler().requireUpdateVisible();
}",0.8663729809104258
190150,"private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f && maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}","private Element createNode(Document document,Graph graph,Node n) throws Exception {
  Element nodeE=document.createElement(""String_Node_Str"");
  nodeE.setAttribute(""String_Node_Str"",n.getNodeData().getId());
  if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
    Element labelE=createNodeLabel(document,n);
    nodeE.appendChild(labelE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attvalueE=createNodeAttvalue(document,column,n);
        if (attvalueE != null) {
          nodeE.appendChild(attvalueE);
        }
      }
    }
  }
  if (exportSize) {
    Element sizeE=createNodeSize(document,n);
    nodeE.appendChild(sizeE);
  }
  if (exportColors) {
    Element colorE=createNodeColors(document,n);
    nodeE.appendChild(colorE);
  }
  if (exportPosition) {
    Element positionXE=createNodePositionX(document,n);
    nodeE.appendChild(positionXE);
    Element positionYE=createNodePositionY(document,n);
    nodeE.appendChild(positionYE);
    if (minZ != 0f || maxZ != 0f) {
      Element positionZE=createNodePositionZ(document,n);
      nodeE.appendChild(positionZE);
    }
  }
  if (graphModel.isHierarchical()) {
    HierarchicalGraph hgraph=graphModel.getHierarchicalGraph();
    int childCount=hgraph.getChildrenCount(n);
    if (childCount != 0) {
      createNodes(document,nodeE,graph,n);
    }
  }
  Progress.progress(progressTicket);
  return nodeE;
}",0.9987333755541482
190151,"private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f && maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}","private void createKeys(Document document,Element root){
  Element nodeLabelKeyE=document.createElement(""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  nodeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(nodeLabelKeyE);
  Element edgeLabelKeyE=document.createElement(""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeLabelKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeLabelKeyE);
  Element weightKeyE=document.createElement(""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  weightKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(weightKeyE);
  Element edgeIdKeyE=document.createElement(""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  edgeIdKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  root.appendChild(edgeIdKeyE);
  if (exportColors) {
    Element colorKeyE=document.createElement(""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    colorKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(colorKeyE);
  }
  if (exportPosition) {
    Element positionKeyE=document.createElement(""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKeyE);
    Element positionKey2E=document.createElement(""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    positionKey2E.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(positionKey2E);
    if (minZ != 0f || maxZ != 0f) {
      Element positionKey3E=document.createElement(""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      positionKey3E.setAttribute(""String_Node_Str"",""String_Node_Str"");
      root.appendChild(positionKey3E);
    }
  }
  if (exportSize) {
    Element sizeKeyE=document.createElement(""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    sizeKeyE.setAttribute(""String_Node_Str"",""String_Node_Str"");
    root.appendChild(sizeKeyE);
  }
  if (attributeModel != null && exportAttributes) {
    for (    AttributeColumn column : attributeModel.getNodeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
    for (    AttributeColumn column : attributeModel.getEdgeTable().getColumns()) {
      if (!column.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Element attributeE=createAttribute(document,column);
        attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
        root.appendChild(attributeE);
      }
    }
  }
}",0.9995244888254874
190152,"public boolean init(Graph graph){
  visibleInterval=dynamicModel.getVisibleInterval();
  min=Double.NEGATIVE_INFINITY;
  max=Double.POSITIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  visibleInterval=dynamicModel.getVisibleInterval();
  min=Double.POSITIVE_INFINITY;
  max=Double.NEGATIVE_INFINITY;
  return true;
}",0.9520958083832336
190153,"public void finish(){
  timelineController.setMin(min);
  timelineController.setMax(max);
}","public void finish(){
  if (!Double.isInfinite(min)) {
    timelineController.setMin(min);
  }
  if (!Double.isInfinite(max)) {
    timelineController.setMax(max);
  }
}",0.7
190154,"public boolean evaluate(Graph graph,Edge edge){
  if (edgeColumn != null) {
    Object obj=edge.getEdgeData().getAttributes().getValue(edgeColumn.getIndex());
    if (obj != null) {
      TimeInterval timeInterval=(TimeInterval)obj;
      min=Math.min(min,timeInterval.getLow());
      max=Math.max(max,timeInterval.getHigh());
      return timeInterval.isInRange(visibleInterval.getLow(),visibleInterval.getHigh());
    }
  }
  return true;
}","public boolean evaluate(Graph graph,Edge edge){
  if (edgeColumn != null) {
    Object obj=edge.getEdgeData().getAttributes().getValue(edgeColumn.getIndex());
    if (obj != null) {
      TimeInterval timeInterval=(TimeInterval)obj;
      min=Math.min(min,Double.isInfinite(timeInterval.getLow()) ? min : timeInterval.getLow());
      max=Math.max(max,Double.isInfinite(timeInterval.getHigh()) ? max : timeInterval.getHigh());
      return timeInterval.isInRange(visibleInterval.getLow(),visibleInterval.getHigh());
    }
  }
  return true;
}",0.899492385786802
190155,"private void readEdgelistRow(String row,int pointer,double startTime,double endTime){
  StringTokenizer rowkonizer=new StringTokenizer(row,""String_Node_Str"");
  String from=rowkonizer.nextToken();
  String to=rowkonizer.nextToken();
  double weight=-1;
  String weightParse=rowkonizer.nextToken();
  weight=1.0;
  try {
    weight=Double.parseDouble(weightParse);
  }
 catch (  Exception e) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterDL.class,""String_Node_Str"",weightParse,getLineNumber(pointer)),Issue.Level.WARNING));
  }
  NodeDraft sourceNode=container.getNode(from);
  NodeDraft targetNode=container.getNode(to);
  EdgeDraft edgeDraft=null;
  if (container.edgeExists(sourceNode,targetNode)) {
    edgeDraft=container.getEdge(sourceNode,targetNode);
  }
 else {
    edgeDraft=container.factory().newEdgeDraft();
    edgeDraft.setSource(sourceNode);
    edgeDraft.setTarget(targetNode);
    edgeDraft.setWeight((float)weight);
    container.addEdge(edgeDraft);
  }
}","private void readEdgelistRow(String row,int pointer,double startTime,double endTime){
  StringTokenizer rowkonizer=new StringTokenizer(row,""String_Node_Str"");
  String from=rowkonizer.nextToken();
  String to=rowkonizer.nextToken();
  double weight=1.0;
  if (rowkonizer.hasMoreTokens()) {
    String weightParse=rowkonizer.nextToken();
    try {
      weight=Double.parseDouble(weightParse);
    }
 catch (    Exception e) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterDL.class,""String_Node_Str"",weightParse,getLineNumber(pointer)),Issue.Level.WARNING));
    }
  }
  NodeDraft sourceNode=container.getNode(from);
  NodeDraft targetNode=container.getNode(to);
  EdgeDraft edgeDraft=null;
  if (container.edgeExists(sourceNode,targetNode)) {
    edgeDraft=container.getEdge(sourceNode,targetNode);
  }
 else {
    edgeDraft=container.factory().newEdgeDraft();
    edgeDraft.setSource(sourceNode);
    edgeDraft.setTarget(targetNode);
    edgeDraft.setWeight((float)weight);
    container.addEdge(edgeDraft);
  }
}",0.915136476426799
190156,"private void readHeaderLine(String line){
  StringTokenizer firstLineTokenizer=new StringTokenizer(line,""String_Node_Str"");
  while (firstLineTokenizer.hasMoreTokens()) {
    String tag=firstLineTokenizer.nextToken().toLowerCase();
    if (tag.indexOf(""String_Node_Str"") != -1) {
      headerMap.put(tag.substring(0,tag.indexOf(""String_Node_Str"")).trim(),tag.substring(tag.indexOf(""String_Node_Str"") + 1).trim());
    }
 else {
    }
  }
}","private void readHeaderLine(String line){
  line=line.replaceAll(""String_Node_Str"",""String_Node_Str"");
  StringTokenizer firstLineTokenizer=new StringTokenizer(line,""String_Node_Str"");
  while (firstLineTokenizer.hasMoreTokens()) {
    String tag=firstLineTokenizer.nextToken().toLowerCase();
    if (tag.indexOf(""String_Node_Str"") != -1) {
      headerMap.put(tag.substring(0,tag.indexOf(""String_Node_Str"")).trim(),tag.substring(tag.indexOf(""String_Node_Str"") + 1).trim());
    }
 else {
    }
  }
}",0.9350372736954208
190157,"protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout.getBuilder();
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}","protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout != null ? selectedLayout.getBuilder() : null;
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}",0.9602977667493796
190158,"private void exportData(Graph graph) throws Exception {
  stringBuilder=new StringBuilder();
  int max=graph.getNodeCount();
  Progress.start(progressTicket,max);
  if (!list) {
    if (header) {
      stringBuilder.append(SEPARATOR);
      for (      Node n : graph.getNodes()) {
        writeMatrixNode(n);
      }
      stringBuilder.deleteCharAt(stringBuilder.length() - 1);
      stringBuilder.append(EOL);
    }
  }
  if (list) {
    for (    Node n : graph.getNodes()) {
      writeListNode(n);
      for (      Edge e : graph.getEdges(n)) {
        if (!e.isDirected() || (e.isDirected() && n == e.getSource())) {
          Node m=graph.getOpposite(n,e);
          writeListNode(m);
        }
      }
      stringBuilder.deleteCharAt(stringBuilder.length() - 1);
      stringBuilder.append(EOL);
    }
  }
 else {
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=directedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
 else     if (graph instanceof UndirectedGraph) {
      UndirectedGraph undirectedGraph=(UndirectedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=undirectedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
 else {
      MixedGraph mixedGraph=(MixedGraph)graph;
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n);
        for (        Node m : graph.getNodes()) {
          Edge e=mixedGraph.getEdge(n,m);
          writeEdge(e);
        }
        Progress.progress(progressTicket);
        stringBuilder.deleteCharAt(stringBuilder.length() - 1);
        stringBuilder.append(EOL);
      }
    }
  }
  if (!cancel) {
    writer.append(stringBuilder);
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}","private void exportData(Graph graph) throws Exception {
  int max=graph.getNodeCount();
  Progress.start(progressTicket,max);
  if (!list) {
    if (header) {
      writer.append(SEPARATOR);
      Node[] nodes=graph.getNodes().toArray();
      for (int i=0; i < nodes.length; i++) {
        writeMatrixNode(nodes[i],i < nodes.length - 1);
      }
      writer.append(EOL);
    }
  }
  if (list) {
    Node[] nodes=graph.getNodes().toArray();
    for (int i=0; i < nodes.length; i++) {
      Node n=nodes[i];
      List<Node> neighbours=new ArrayList<Node>();
      for (      Edge e : graph.getEdges(n)) {
        if (!e.isDirected() || (e.isDirected() && n == e.getSource())) {
          Node m=graph.getOpposite(n,e);
          neighbours.add(m);
        }
      }
      writeListNode(n,!neighbours.isEmpty());
      for (int j=0; j < neighbours.size(); j++) {
        writeListNode(neighbours.get(j),j < neighbours.size() - 1);
      }
      writer.append(EOL);
    }
  }
 else {
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : nodes) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=directedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
 else     if (graph instanceof UndirectedGraph) {
      UndirectedGraph undirectedGraph=(UndirectedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : nodes) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=undirectedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
 else {
      MixedGraph mixedGraph=(MixedGraph)graph;
      Node[] nodes=graph.getNodes().toArray();
      for (      Node n : graph.getNodes()) {
        if (cancel) {
          break;
        }
        writeMatrixNode(n,true);
        for (int j=0; j < nodes.length; j++) {
          Node m=nodes[j];
          Edge e=mixedGraph.getEdge(n,m);
          writeEdge(e,j < nodes.length - 1);
        }
        Progress.progress(progressTicket);
        writer.append(EOL);
      }
    }
  }
  graph.readUnlockAll();
  Progress.finish(progressTicket);
}",0.7068896853843091
190159,"private void writeMatrixNode(Node node){
  if (header) {
    String label=node.getNodeData().getLabel();
    if (label == null) {
      label=node.getNodeData().getId();
    }
    stringBuilder.append(label);
    stringBuilder.append(SEPARATOR);
  }
}","private void writeMatrixNode(Node node,boolean writeSeparator) throws IOException {
  if (header) {
    String label=node.getNodeData().getLabel();
    if (label == null) {
      label=node.getNodeData().getId();
    }
    writer.append(label);
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
}",0.8070796460176991
190160,"private void writeEdge(Edge edge){
  if (edge != null) {
    if (edgeWeight) {
      stringBuilder.append(Float.toString(edge.getWeight()));
    }
 else {
      stringBuilder.append(Float.toString(1f));
    }
    stringBuilder.append(SEPARATOR);
  }
 else {
    if (writeZero) {
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.append(SEPARATOR);
  }
}","private void writeEdge(Edge edge,boolean writeSeparator) throws IOException {
  if (edge != null) {
    if (edgeWeight) {
      writer.append(Float.toString(edge.getWeight()));
    }
 else {
      writer.append(Float.toString(1f));
    }
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
 else {
    if (writeZero) {
      writer.append(""String_Node_Str"");
    }
    if (writeSeparator) {
      writer.append(SEPARATOR);
    }
  }
}",0.5970873786407767
190161,"private void writeListNode(Node node){
  String label=node.getNodeData().getLabel();
  if (label == null) {
    label=node.getNodeData().getId();
  }
  stringBuilder.append(label);
  stringBuilder.append(SEPARATOR);
}","private void writeListNode(Node node,boolean writeSeparator) throws IOException {
  String label=node.getNodeData().getLabel();
  if (label == null) {
    label=node.getNodeData().getId();
  }
  writer.append(label);
  if (writeSeparator) {
    writer.append(SEPARATOR);
  }
}",0.7058823529411765
190162,"@Override public void actionPerformed(ActionEvent e){
  for (  Perspective g : perspectives) {
    if (g != perspective) {
      TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
      tpg.close();
    }
  }
  TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
  tpg.open();
  Perspective closingPerspective=getPerspective(selectedPerspective);
  for (  PerspectiveMember member : members) {
    if (member.close(closingPerspective)) {
      if (member instanceof TopComponent) {
        ((TopComponent)member).close();
      }
    }
  }
  for (  PerspectiveMember member : members) {
    if (member.open(perspective)) {
      if (member instanceof TopComponent) {
        ((TopComponent)member).open();
      }
    }
  }
  selectedPerspective=perspective.getName();
}","@Override public void actionPerformed(ActionEvent e){
  for (  Perspective g : perspectives) {
    if (g != perspective) {
      TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
      tpg.close();
    }
  }
  TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
  tpg.open();
  PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
  Perspective closingPerspective=getPerspective(selectedPerspective);
  for (  PerspectiveMember member : members) {
    if (member.close(closingPerspective)) {
      if (member instanceof TopComponent) {
        boolean closed=((TopComponent)member).close();
        System.out.println(""String_Node_Str"" + member + ""String_Node_Str""+ closed);
      }
    }
  }
  for (  PerspectiveMember member : members) {
    if (member.open(perspective)) {
      if (member instanceof TopComponent && !((TopComponent)member).isOpened()) {
        ((TopComponent)member).open();
        System.out.println(""String_Node_Str"" + member);
      }
    }
  }
  selectedPerspective=perspective.getName();
}",0.7912306925759841
190163,"private void addGroupTabs(){
  final Perspective[] perspectives=Lookup.getDefault().lookupAll(Perspective.class).toArray(new Perspective[0]);
  final PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
  buttons=new JPerspectiveButton[perspectives.length];
  int i=0;
  for (  final Perspective perspective : perspectives) {
    JPerspectiveButton toggleButton=new JPerspectiveButton(perspective.getDisplayName(),perspective.getIcon());
    toggleButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        for (        Perspective g : perspectives) {
          if (g != perspective) {
            TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
            tpg.close();
          }
        }
        TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
        tpg.open();
        Perspective closingPerspective=getPerspective(selectedPerspective);
        for (        PerspectiveMember member : members) {
          if (member.close(closingPerspective)) {
            if (member instanceof TopComponent) {
              ((TopComponent)member).close();
            }
          }
        }
        for (        PerspectiveMember member : members) {
          if (member.open(perspective)) {
            if (member instanceof TopComponent) {
              ((TopComponent)member).open();
            }
          }
        }
        selectedPerspective=perspective.getName();
      }
    }
);
    perspectivesButtonGroup.add(toggleButton);
    buttonsPanel.add(toggleButton);
    buttons[i++]=toggleButton;
  }
  refreshSelectedPerspective();
}","private void addGroupTabs(){
  final Perspective[] perspectives=Lookup.getDefault().lookupAll(Perspective.class).toArray(new Perspective[0]);
  buttons=new JPerspectiveButton[perspectives.length];
  int i=0;
  for (  final Perspective perspective : perspectives) {
    JPerspectiveButton toggleButton=new JPerspectiveButton(perspective.getDisplayName(),perspective.getIcon());
    toggleButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        for (        Perspective g : perspectives) {
          if (g != perspective) {
            TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(g.getName());
            tpg.close();
          }
        }
        TopComponentGroup tpg=WindowManager.getDefault().findTopComponentGroup(perspective.getName());
        tpg.open();
        PerspectiveMember[] members=Lookup.getDefault().lookupAll(PerspectiveMember.class).toArray(new PerspectiveMember[0]);
        Perspective closingPerspective=getPerspective(selectedPerspective);
        for (        PerspectiveMember member : members) {
          if (member.close(closingPerspective)) {
            if (member instanceof TopComponent) {
              boolean closed=((TopComponent)member).close();
              System.out.println(""String_Node_Str"" + member + ""String_Node_Str""+ closed);
            }
          }
        }
        for (        PerspectiveMember member : members) {
          if (member.open(perspective)) {
            if (member instanceof TopComponent && !((TopComponent)member).isOpened()) {
              ((TopComponent)member).open();
              System.out.println(""String_Node_Str"" + member);
            }
          }
        }
        selectedPerspective=perspective.getName();
      }
    }
);
    perspectivesButtonGroup.add(toggleButton);
    buttonsPanel.add(toggleButton);
    buttons[i++]=toggleButton;
  }
  refreshSelectedPerspective();
}",0.2955957849229937
190164,"public void exportToNewWorkspace(Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=graphModel.getGraphVisible();
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  final Graph graphView=result;
  new Thread(new Runnable(){
    public void run(){
      ProgressTicketProvider progressProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
      ProgressTicket ticket=null;
      if (progressProvider != null) {
        ticket=progressProvider.createTicket(""String_Node_Str"",null);
      }
      Progress.start(ticket);
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      Workspace newWorkspace=pc.duplicateWorkspace(pc.getCurrentWorkspace());
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel(newWorkspace);
      graphModel.clear();
      graphModel.pushFrom(graphView);
      Progress.finish(ticket);
      String workspaceName=newWorkspace.getLookup().lookup(WorkspaceInformation.class).getName();
    }
  }
,""String_Node_Str"").start();
}","public void exportToNewWorkspace(Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    GraphView view=model.getCurrentResult();
    if (view == null) {
      return;
    }
    result=graphModel.getGraph(view);
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  final Graph graphView=result;
  new Thread(new Runnable(){
    public void run(){
      ProgressTicketProvider progressProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
      ProgressTicket ticket=null;
      if (progressProvider != null) {
        ticket=progressProvider.createTicket(""String_Node_Str"",null);
      }
      Progress.start(ticket);
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      Workspace newWorkspace=pc.duplicateWorkspace(pc.getCurrentWorkspace());
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel(newWorkspace);
      graphModel.clear();
      graphModel.pushFrom(graphView);
      Progress.finish(ticket);
      String workspaceName=newWorkspace.getLookup().lookup(WorkspaceInformation.class).getName();
    }
  }
,""String_Node_Str"").start();
}",0.9625550660792952
190165,"public void exportToColumn(String title,Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=graphModel.getGraphVisible();
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn nodeCol=am.getNodeTable().getColumn(""String_Node_Str"" + title);
  if (nodeCol == null) {
    nodeCol=am.getNodeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  AttributeColumn edgeCol=am.getEdgeTable().getColumn(""String_Node_Str"" + title);
  if (edgeCol == null) {
    edgeCol=am.getEdgeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  result.readLock();
  for (  Node n : result.getNodes()) {
    n.getNodeData().getAttributes().setValue(nodeCol.getIndex(),Boolean.TRUE);
  }
  for (  Edge e : result.getEdges()) {
    e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(),Boolean.TRUE);
  }
  result.readUnlock();
}","public void exportToColumn(String title,Query query){
  Graph result;
  if (model.getCurrentQuery() == query) {
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    GraphView view=model.getCurrentResult();
    if (view != null) {
      return;
    }
    result=graphModel.getGraph(view);
  }
 else {
    FilterProcessor processor=new FilterProcessor();
    GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
    result=processor.process((AbstractQueryImpl)query,graphModel);
  }
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn nodeCol=am.getNodeTable().getColumn(""String_Node_Str"" + title);
  if (nodeCol == null) {
    nodeCol=am.getNodeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  AttributeColumn edgeCol=am.getEdgeTable().getColumn(""String_Node_Str"" + title);
  if (edgeCol == null) {
    edgeCol=am.getEdgeTable().addColumn(""String_Node_Str"" + title,title,AttributeType.BOOLEAN,AttributeOrigin.COMPUTED,Boolean.FALSE);
  }
  result.readLock();
  for (  Node n : result.getNodes()) {
    n.getNodeData().getAttributes().setValue(nodeCol.getIndex(),Boolean.TRUE);
  }
  for (  Edge e : result.getEdges()) {
    e.getEdgeData().getAttributes().setValue(edgeCol.getIndex(),Boolean.TRUE);
  }
  result.readUnlock();
}",0.9629090909090908
190166,"private void select(AbstractQueryImpl query){
  FilterProcessor processor=new FilterProcessor();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph result=processor.process((AbstractQueryImpl)query,graphModel);
  if (running) {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(result.getNodes().toArray());
      visController.selectEdges(result.getEdges().toArray());
    }
  }
 else {
  }
  graphModel.destroyView(result.getView());
}","private void select(AbstractQueryImpl query){
  FilterProcessor processor=new FilterProcessor();
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  Graph result=processor.process((AbstractQueryImpl)query,graphModel);
  if (running) {
    VisualizationController visController=Lookup.getDefault().lookup(VisualizationController.class);
    if (visController != null) {
      visController.selectNodes(result.getNodes().toArray());
      visController.selectEdges(result.getEdges().toArray());
    }
    GraphView view=result.getView();
    model.setCurrentResult(view);
  }
 else {
    graphModel.destroyView(result.getView());
  }
}",0.9391304347826088
190167,"public boolean cancel(){
  return true;
}","public boolean cancel(){
  cancel=true;
  return true;
}",0.845360824742268
190168,"public void readWorkspaceChildren(Workspace workspace,Element workspaceE) throws Exception {
  NodeList children=workspaceE.getChildNodes();
  for (int i=0; i < children.getLength(); i++) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Element childE=(Element)child;
      WorkspacePersistenceProvider pp=providers.get(childE.getTagName());
      if (pp != null) {
        try {
          pp.readXML(childE,workspace);
        }
 catch (        UnsupportedOperationException e) {
        }
      }
    }
  }
}","public void readWorkspaceChildren(Workspace workspace,Element workspaceE) throws Exception {
  NodeList children=workspaceE.getChildNodes();
  for (int i=0; i < children.getLength() && !cancel; i++) {
    Node child=children.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      Element childE=(Element)child;
      WorkspacePersistenceProvider pp=providers.get(childE.getTagName());
      if (pp != null) {
        try {
          pp.readXML(childE,workspace);
        }
 catch (        UnsupportedOperationException e) {
        }
      }
    }
  }
}",0.9901697944593388
190169,"public void readProject(XPath xpath,Element projectE) throws Exception {
  ProjectInformationImpl info=project.getLookup().lookup(ProjectInformationImpl.class);
  WorkspaceProviderImpl workspaces=project.getLookup().lookup(WorkspaceProviderImpl.class);
  info.setName(projectE.getAttribute(""String_Node_Str""));
  XPathExpression exp=xpath.compile(""String_Node_Str"");
  NodeList workSpaceList=(NodeList)exp.evaluate(projectE,XPathConstants.NODESET);
  for (int i=0; i < workSpaceList.getLength(); i++) {
    Element workspaceE=(Element)workSpaceList.item(i);
    Workspace workspace=readWorkspace(xpath,workspaceE);
    if (workspace.getLookup().lookup(WorkspaceInformationImpl.class).isOpen()) {
      workspaces.setCurrentWorkspace(workspace);
    }
  }
}","public void readProject(XPath xpath,Element projectE) throws Exception {
  ProjectInformationImpl info=project.getLookup().lookup(ProjectInformationImpl.class);
  WorkspaceProviderImpl workspaces=project.getLookup().lookup(WorkspaceProviderImpl.class);
  info.setName(projectE.getAttribute(""String_Node_Str""));
  XPathExpression exp=xpath.compile(""String_Node_Str"");
  NodeList workSpaceList=(NodeList)exp.evaluate(projectE,XPathConstants.NODESET);
  for (int i=0; i < workSpaceList.getLength() && !cancel; i++) {
    Element workspaceE=(Element)workSpaceList.item(i);
    Workspace workspace=readWorkspace(xpath,workspaceE);
    if (workspace.getLookup().lookup(WorkspaceInformationImpl.class).isOpen()) {
      workspaces.setCurrentWorkspace(workspace);
    }
  }
}",0.9927774130006566
190170,"public boolean cancel(){
  cancel=true;
  gephiReader.cancel();
  return true;
}","public boolean cancel(){
  cancel=true;
  if (gephiReader != null) {
    gephiReader.cancel();
  }
  return true;
}",0.8205128205128205
190171,"public void run(){
  try {
    Progress.start(progressTicket);
    Progress.setDisplayName(progressTicket,NbBundle.getMessage(SaveTask.class,""String_Node_Str""));
    FileObject fileObject=FileUtil.toFileObject(file);
    if (FileUtil.isArchiveFile(fileObject)) {
      fileObject=FileUtil.getArchiveRoot(fileObject).getChildren()[0];
    }
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document doc=builder.parse(fileObject.getInputStream());
    Project project=new ProjectImpl();
    project.getLookup().lookup(ProjectInformationImpl.class).setFile(file);
    String version=doc.getDocumentElement().getAttribute(""String_Node_Str"");
    if (version == null || version.isEmpty() || Double.parseDouble(version) != 0.7) {
      throw new GephiFormatException(""String_Node_Str"");
    }
    gephiReader=new GephiReader();
    project=gephiReader.readAll(doc.getDocumentElement(),project);
    if (!cancel) {
      ProjectControllerImpl pc=Lookup.getDefault().lookup(ProjectControllerImpl.class);
      pc.openProject(project);
    }
    Progress.finish(progressTicket);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    if (ex instanceof GephiFormatException) {
      throw (GephiFormatException)ex;
    }
    throw new GephiFormatException(GephiReader.class,ex);
  }
}","public void run(){
  try {
    Progress.start(progressTicket);
    Progress.setDisplayName(progressTicket,NbBundle.getMessage(SaveTask.class,""String_Node_Str""));
    FileObject fileObject=FileUtil.toFileObject(file);
    if (FileUtil.isArchiveFile(fileObject)) {
      fileObject=FileUtil.getArchiveRoot(fileObject).getChildren()[0];
    }
    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=factory.newDocumentBuilder();
    Document doc=builder.parse(fileObject.getInputStream());
    if (!cancel) {
      Project project=new ProjectImpl();
      project.getLookup().lookup(ProjectInformationImpl.class).setFile(file);
      String version=doc.getDocumentElement().getAttribute(""String_Node_Str"");
      if (version == null || version.isEmpty() || Double.parseDouble(version) != 0.7) {
        throw new GephiFormatException(""String_Node_Str"");
      }
      gephiReader=new GephiReader();
      project=gephiReader.readAll(doc.getDocumentElement(),project);
      if (!cancel) {
        ProjectControllerImpl pc=Lookup.getDefault().lookup(ProjectControllerImpl.class);
        pc.openProject(project);
      }
    }
    Progress.finish(progressTicket);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    if (ex instanceof GephiFormatException) {
      throw (GephiFormatException)ex;
    }
    throw new GephiFormatException(GephiReader.class,ex);
  }
}",0.982367758186398
190172,"private void readAttribute(XMLStreamReader reader,String classAtt,String typeAtt) throws Exception {
  String id=""String_Node_Str"";
  String type=""String_Node_Str"";
  String title=""String_Node_Str"";
  String defaultStr=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (ATTRIBUTE_ID.equalsIgnoreCase(attName)) {
      id=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TYPE.equalsIgnoreCase(attName) || ATTRIBUTE_TYPE2.equalsIgnoreCase(attName)) {
      type=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TITLE.equalsIgnoreCase(attName)) {
      title=reader.getAttributeValue(i);
    }
  }
  if (title.isEmpty()) {
    title=id;
  }
  if (!id.isEmpty() && !type.isEmpty()) {
    if (classAtt.isEmpty() || !(classAtt.equalsIgnoreCase(""String_Node_Str"") || classAtt.equalsIgnoreCase(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
    }
    boolean end=false;
    boolean defaultFlag=false;
    while (reader.hasNext() && !end) {
      int xmltype=reader.next();
switch (xmltype) {
case XMLStreamReader.START_ELEMENT:
        if (ATTRIBUTE_DEFAULT.equalsIgnoreCase(xmlReader.getLocalName())) {
          defaultFlag=true;
        }
      break;
case XMLStreamReader.CHARACTERS:
    if (defaultFlag && !xmlReader.isWhiteSpace()) {
      defaultStr=xmlReader.getText();
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ATTRIBUTE.equalsIgnoreCase(xmlReader.getLocalName())) {
  end=true;
}
break;
}
}
boolean dynamic=typeAtt.equalsIgnoreCase(""String_Node_Str"");
AttributeType attributeType=AttributeType.STRING;
if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_FLOAT : AttributeType.FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_DOUBLE : AttributeType.DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_STRING : AttributeType.STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGDECIMAL : AttributeType.BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGINTEGER : AttributeType.BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BYTE : AttributeType.BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_CHAR : AttributeType.CHAR;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_SHORT : AttributeType.SHORT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_INTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_CHARACTER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_SHORT;
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",type),Issue.Level.SEVERE));
return;
}
Object defaultValue=null;
if (!defaultStr.isEmpty()) {
try {
defaultValue=attributeType.parse(defaultStr);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultStr,title));
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()),Issue.Level.SEVERE));
}
}
if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getNodeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getNodeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
 else if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getEdgeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getEdgeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
}
}","private void readAttribute(XMLStreamReader reader,String classAtt,String typeAtt) throws Exception {
  String id=""String_Node_Str"";
  String type=""String_Node_Str"";
  String title=""String_Node_Str"";
  String defaultStr=""String_Node_Str"";
  for (int i=0; i < reader.getAttributeCount(); i++) {
    String attName=reader.getAttributeName(i).getLocalPart();
    if (ATTRIBUTE_ID.equalsIgnoreCase(attName)) {
      id=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TYPE.equalsIgnoreCase(attName) || ATTRIBUTE_TYPE2.equalsIgnoreCase(attName)) {
      type=reader.getAttributeValue(i);
    }
 else     if (ATTRIBUTE_TITLE.equalsIgnoreCase(attName)) {
      title=reader.getAttributeValue(i);
    }
  }
  if (title.isEmpty()) {
    title=id;
  }
  if (!id.isEmpty() && !type.isEmpty()) {
    if (classAtt.isEmpty() || !(classAtt.equalsIgnoreCase(""String_Node_Str"") || classAtt.equalsIgnoreCase(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
    }
    boolean end=false;
    boolean defaultFlag=false;
    while (reader.hasNext() && !end) {
      int xmltype=reader.next();
switch (xmltype) {
case XMLStreamReader.START_ELEMENT:
        if (ATTRIBUTE_DEFAULT.equalsIgnoreCase(xmlReader.getLocalName())) {
          defaultFlag=true;
        }
      break;
case XMLStreamReader.CHARACTERS:
    if (defaultFlag && !xmlReader.isWhiteSpace()) {
      defaultStr=xmlReader.getText();
    }
  break;
case XMLStreamReader.END_ELEMENT:
if (ATTRIBUTE.equalsIgnoreCase(xmlReader.getLocalName())) {
  end=true;
}
break;
}
}
boolean dynamic=typeAtt.equalsIgnoreCase(""String_Node_Str"");
AttributeType attributeType=AttributeType.STRING;
if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BOOLEAN : AttributeType.BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"") || type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_INT : AttributeType.INT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_LONG : AttributeType.LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_FLOAT : AttributeType.FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_DOUBLE : AttributeType.DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_STRING : AttributeType.STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGDECIMAL : AttributeType.BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BIGINTEGER : AttributeType.BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_BYTE : AttributeType.BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_CHAR : AttributeType.CHAR;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=dynamic ? AttributeType.DYNAMIC_SHORT : AttributeType.SHORT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BOOLEAN;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_INTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_LONG;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_FLOAT;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_DOUBLE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_STRING;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGDECIMAL;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BIGINTEGER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_BYTE;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_CHARACTER;
}
 else if (type.equalsIgnoreCase(""String_Node_Str"")) {
attributeType=AttributeType.LIST_SHORT;
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",type),Issue.Level.SEVERE));
return;
}
Object defaultValue=null;
if (!defaultStr.isEmpty()) {
try {
defaultValue=attributeType.parse(defaultStr);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultStr,title));
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()),Issue.Level.SEVERE));
}
}
if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getNodeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getNodeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
 else if (""String_Node_Str"".equalsIgnoreCase(classAtt) || classAtt.isEmpty()) {
if (container.getAttributeModel().getEdgeTable().hasColumn(id)) {
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",id));
return;
}
container.getAttributeModel().getEdgeTable().addColumn(id,title,attributeType,AttributeOrigin.DATA,defaultValue);
report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title,attributeType.getTypeString()));
}
}
 else {
report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",title),Issue.Level.SEVERE));
}
}",0.9924307586444177
190173,"/** 
 * Does export the preview graph as an SVG image.
 * @param file         the output SVG file
 * @param supportSize  the support size of the exported image
 * @throws Exception
 */
private void exportData(GraphSheet graphSheet) throws Exception {
  SupportSize supportSize=new SupportSize(210,297,LengthUnit.MILLIMETER);
  Progress.start(progress);
  Graph graph=graphSheet.getGraph();
  int max=0;
  if (graph.showNodes()) {
    max+=graph.countNodes();
  }
  if (graph.showEdges()) {
    max+=graph.countUnidirectionalEdges() + graph.countBidirectionalEdges();
    if (graph.showSelfLoops()) {
      max+=graph.countSelfLoops();
    }
  }
  Progress.switchToDeterminate(progress,max);
  buildDOM(graphSheet,supportSize);
  SVGTranscoder t=new SVGTranscoder();
  t.addTranscodingHint(SVGTranscoder.KEY_XML_DECLARATION,new String(""String_Node_Str""));
  TranscoderInput input=new TranscoderInput(doc);
  try {
    TranscoderOutput output=new TranscoderOutput(writer);
    t.transcode(input,output);
  }
  finally {
    writer.close();
  }
  Progress.finish(progress);
}","/** 
 * Does export the preview graph as an SVG image.
 * @param file         the output SVG file
 * @param supportSize  the support size of the exported image
 * @throws Exception
 */
private void exportData(GraphSheet graphSheet) throws Exception {
  SupportSize supportSize=new SupportSize(210,297,LengthUnit.MILLIMETER);
  Progress.start(progress);
  Graph graph=graphSheet.getGraph();
  int max=0;
  if (graph.showNodes()) {
    max+=graph.countNodes();
  }
  if (graph.showEdges()) {
    max+=graph.countUnidirectionalEdges() + graph.countBidirectionalEdges();
    if (graph.showSelfLoops()) {
      max+=graph.countSelfLoops();
    }
  }
  Progress.switchToDeterminate(progress,max);
  buildDOM(graphSheet,supportSize);
  SVGTranscoder t=new SVGTranscoder();
  t.addTranscodingHint(SVGTranscoder.KEY_XML_DECLARATION,new String(""String_Node_Str""));
  TranscoderInput input=new TranscoderInput(doc);
  try {
    TranscoderOutput output=new TranscoderOutput(new OutputStreamWriter(new WriterOutputStream(writer),Charset.forName(""String_Node_Str"")));
    t.transcode(input,output);
  }
  finally {
    writer.close();
  }
  Progress.finish(progress);
}",0.957341715312079
190174,"public PartitionControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new PartitionModelImpl());
    }
    public void select(    Workspace workspace){
      model=workspace.getLookup().lookup(PartitionModelImpl.class);
      refreshPartitions=true;
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
    public void unselect(    Workspace workspace){
      model=null;
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().removeAttributeListener(PartitionControllerImpl.this);
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      untrackViewChange(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    model=pc.getCurrentWorkspace().getLookup().lookup(PartitionModelImpl.class);
    if (model == null) {
      model=new PartitionModelImpl();
      Workspace workspace=pc.getCurrentWorkspace();
      pc.getCurrentWorkspace().add(new PartitionModelImpl());
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
  }
}","public PartitionControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new PartitionModelImpl());
    }
    public void select(    Workspace workspace){
      model=workspace.getLookup().lookup(PartitionModelImpl.class);
      refreshPartitions=true;
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
    public void unselect(    Workspace workspace){
      model=null;
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().removeAttributeListener(PartitionControllerImpl.this);
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      untrackViewChange(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    refreshPartitions=true;
    model=pc.getCurrentWorkspace().getLookup().lookup(PartitionModelImpl.class);
    if (model == null) {
      model=new PartitionModelImpl();
      Workspace workspace=pc.getCurrentWorkspace();
      pc.getCurrentWorkspace().add(model);
      GraphModel gm=Lookup.getDefault().lookup(GraphController.class).getModel(workspace);
      trachViewChange(gm);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(PartitionControllerImpl.this);
      attributeModel.getEdgeTable().addAttributeListener(PartitionControllerImpl.this);
    }
  }
}",0.9855293221629856
190175,"/** 
 * Creates and edge between source and target node (if does not already exist), directed or undirected. This will not create a self-loop.
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return True if the edge was created succesfully, false otherwise
 */
boolean createEdge(Node source,Node target,boolean directed);","/** 
 * Creates and edge between source and target node (if does not already exist), directed or undirected. If a edge with the given id already exists, no edge will be created. This will not create a self-loop.
 * @param source Source node
 * @param target Target node
 * @param directed Indicates if the edge has to be directed
 * @return New edge if the edge was created succesfully, null otherwise
 */
Edge createEdge(String id,Node source,Node target,boolean directed);",0.8584579976985041
190176,"public Node createNode(String label,String id){
  Graph graph=getGraph();
  if (graph.getNode(id) == null) {
    Node newNode=buildNode(label,id);
    graph.addNode(newNode);
    return newNode;
  }
 else   return null;
}","public Node createNode(String label,String id){
  Graph graph=getGraph();
  if (graph.getNode(id) == null) {
    Node newNode=buildNode(label,id);
    graph.addNode(newNode);
    return newNode;
  }
 else {
    return null;
  }
}",0.9155555555555556
190177,"public boolean createEdge(Node source,Node target,boolean directed){
  if (isNodeInGraph(source) && isNodeInGraph(target)) {
    if (source != target) {
      if (directed) {
        return getDirectedGraph().addEdge(source,target);
      }
 else {
        return getUndirectedGraph().addEdge(source,target);
      }
    }
 else {
      return false;
    }
  }
 else {
    return false;
  }
}","public Edge createEdge(String id,Node source,Node target,boolean directed){
  Edge newEdge;
  if (getGraph().getEdge(id) == null) {
    if (source != target) {
      if (directed) {
        newEdge=buildEdge(id,source,target,true);
        if (getDirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
 else {
        newEdge=buildEdge(id,source,target,false);
        if (getUndirectedGraph().addEdge(newEdge)) {
          return newEdge;
        }
 else {
          return null;
        }
      }
    }
 else {
      return null;
    }
  }
 else {
    return null;
  }
}",0.1320388349514563
190178,"private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}","private Node buildNode(String label,String id){
  Node newNode=Lookup.getDefault().lookup(GraphController.class).getModel().factory().newNode(id);
  getGraph().setId(newNode,id);
  newNode.getNodeData().setLabel(label);
  return newNode;
}",0.9282511210762332
190179,"public void deleteWorkspace(Workspace workspace){
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
  workspaceProvider.removeWorkspace(workspace);
}","public void deleteWorkspace(Workspace workspace){
  WorkspaceInformation wi=workspace.getLookup().lookup(WorkspaceInformation.class);
  WorkspaceProviderImpl workspaceProvider=wi.getProject().getLookup().lookup(WorkspaceProviderImpl.class);
  workspaceProvider.removeWorkspace(workspace);
  fireWorkspaceEvent(EventType.CLOSE,workspace);
  if (getCurrentWorkspace() == workspace) {
    Workspace toSelectWorkspace=workspaceProvider.getPrecedingWorkspace(workspace);
    if (toSelectWorkspace == null) {
      closeCurrentProject();
      return;
    }
 else {
      openWorkspace(toSelectWorkspace);
    }
  }
}",0.6088379705400983
190180,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  panel.refreshList();
}",0.780952380952381
190181,"public boolean verify(){
  for (  EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
    if (edge.getWeight() <= 0f) {
      String id=edge.getId();
      String sourceTargetId=edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId();
      if (parameters.isRemoveEdgeWithWeightZero()) {
        edgeMap.remove(id);
        edgeSourceTargetMap.remove(sourceTargetId);
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.SEVERE));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.WARNING));
      }
    }
  }
  if (directedEdgesCount > 0 && undirectedEdgesCount == 0) {
    parameters.setEdgeDefault(EdgeDefault.DIRECTED);
  }
 else   if (directedEdgesCount == 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.UNDIRECTED);
  }
 else   if (directedEdgesCount > 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.MIXED);
  }
  for (  NodeDraftImpl node : nodeMap.values()) {
    dynamicGraph=node.getTimeInterval() != null;
    if (dynamicGraph) {
      break;
    }
  }
  if (!dynamicGraph) {
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      dynamicGraph=edge.getTimeInterval() != null;
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (!dynamicGraph) {
    for (    AttributeColumn col : attributeModel.getNodeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
    for (    AttributeColumn col : attributeModel.getEdgeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (timeIntervalMin != null || timeIntervalMax != null) {
  }
  if (dynamicGraph && (timeIntervalMin != null || timeIntervalMax != null)) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && node.getTimeInterval() != null && node.getTimeInterval().getLow() < timeIntervalMin) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),timeIntervalMin,node.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && node.getTimeInterval() != null && node.getTimeInterval().getHigh() > timeIntervalMax) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),node.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        node.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
      }
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && DynamicType.class.isAssignableFrom(val.getColumn().getType().getType())) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",node.getId()),Level.WARNING));
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && edge.getTimeInterval() != null && edge.getTimeInterval().getLow() < timeIntervalMin) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),timeIntervalMin,edge.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && edge.getTimeInterval() != null && edge.getTimeInterval().getHigh() > timeIntervalMax) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),edge.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        edge.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
      }
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && DynamicType.class.isAssignableFrom(val.getColumn().getType().getType())) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",edge.getId()),Level.WARNING));
      }
    }
  }
  return true;
}","public boolean verify(){
  for (  EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
    if (edge.getWeight() <= 0f) {
      String id=edge.getId();
      String sourceTargetId=edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId();
      if (parameters.isRemoveEdgeWithWeightZero()) {
        edgeMap.remove(id);
        edgeSourceTargetMap.remove(sourceTargetId);
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.SEVERE));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",id),Level.WARNING));
      }
    }
  }
  if (directedEdgesCount > 0 && undirectedEdgesCount == 0) {
    parameters.setEdgeDefault(EdgeDefault.DIRECTED);
  }
 else   if (directedEdgesCount == 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.UNDIRECTED);
  }
 else   if (directedEdgesCount > 0 && undirectedEdgesCount > 0) {
    parameters.setEdgeDefault(EdgeDefault.MIXED);
  }
  for (  NodeDraftImpl node : nodeMap.values()) {
    dynamicGraph=node.getTimeInterval() != null;
    if (dynamicGraph) {
      break;
    }
  }
  if (!dynamicGraph) {
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      dynamicGraph=edge.getTimeInterval() != null;
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (!dynamicGraph) {
    for (    AttributeColumn col : attributeModel.getNodeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
    for (    AttributeColumn col : attributeModel.getEdgeTable().getColumns()) {
      dynamicGraph=col.getType().isDynamicType();
      if (dynamicGraph) {
        break;
      }
    }
  }
  if (timeIntervalMin != null || timeIntervalMax != null) {
  }
  if (dynamicGraph && (timeIntervalMin != null || timeIntervalMax != null)) {
    for (    NodeDraftImpl node : nodeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && node.getTimeInterval() != null && node.getTimeInterval().getLow() < timeIntervalMin) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),timeIntervalMin,node.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && node.getTimeInterval() != null && node.getTimeInterval().getHigh() > timeIntervalMax) {
          node.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(node.getTimeInterval(),node.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (node.getTimeInterval() == null) {
          node.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=node.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && DynamicType.class.isAssignableFrom(val.getColumn().getType().getType())) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            node.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",node.getId()),Level.WARNING));
      }
    }
    for (    EdgeDraftImpl edge : edgeMap.values()) {
      boolean issue=false;
      if (timeIntervalMin != null || timeIntervalMax != null) {
        if (timeIntervalMin != null && edge.getTimeInterval() != null && edge.getTimeInterval().getLow() < timeIntervalMin) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),timeIntervalMin,edge.getTimeInterval().getHigh()));
          issue=true;
        }
        if (timeIntervalMax != null && edge.getTimeInterval() != null && edge.getTimeInterval().getHigh() > timeIntervalMax) {
          edge.setTimeInterval((TimeInterval)DynamicUtilities.fitToInterval(edge.getTimeInterval(),edge.getTimeInterval().getLow(),timeIntervalMax));
          issue=true;
        }
        if (edge.getTimeInterval() == null) {
          edge.setTimeInterval(new TimeInterval(timeIntervalMin,timeIntervalMax));
        }
      }
      AttributeValue[] values=edge.getAttributeRow().getValues();
      for (int i=0; i < values.length; i++) {
        AttributeValue val=values[i];
        if (val.getValue() != null && DynamicType.class.isAssignableFrom(val.getColumn().getType().getType())) {
          DynamicType type=(DynamicType)val.getValue();
          if (timeIntervalMin != null && type.getLow() < timeIntervalMin) {
            if (!Double.isInfinite(type.getLow())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,timeIntervalMin,type.getHigh()));
          }
          if (timeIntervalMax != null && type.getHigh() > timeIntervalMax) {
            if (!Double.isInfinite(type.getHigh())) {
              issue=true;
            }
            edge.getAttributeRow().setValue(val.getColumn(),DynamicUtilities.fitToInterval(type,type.getLow(),timeIntervalMax));
          }
        }
      }
      if (issue) {
        report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"",edge.getId()),Level.WARNING));
      }
    }
  }
  return true;
}",0.9902324014819804
190182,"@Test public void testNode(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  NodeDraftGetter n1=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n2=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n3=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n4=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n5=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n6=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n7=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n8=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n9=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotNull(n3);
  assertNotNull(n4);
  assertNotNull(n5);
  assertNotNull(n6);
  assertNotNull(n7);
  assertNotNull(n8);
  assertNotNull(n9);
  ContainerUnloader unloader=container.getUnloader();
  AttributeColumn col0=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col1=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col2=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col3=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col4=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",n1.getLabel());
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[1]));
    AttributeValue[] values1=n1.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values1[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values1[col3.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values1[col0.getIndex()].getValue()).getValue());
    assertEquals(new Float(1),((DynamicType)values1[col3.getIndex()].getValue()).getValue());
    AttributeValue[] values2=n2.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values2[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values2[col2.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values2[col0.getIndex()].getValue()).getValue());
    assertEquals(new StringList(""String_Node_Str""),values2[col2.getIndex()].getValue());
    AttributeValue[] values3=n3.getAttributeRow().getValues();
    DynamicType val4=(DynamicType)values3[col4.getIndex()].getValue();
    double low=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    double high=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    assertEquals(new Float(3f),val4.getValue(low,high));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
    assertEquals(2,n3.getTimeInterval().getValues().size());
    container.verify();
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[1]));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  container.closeLoader();
  System.out.println(container.getReport().getText());
}","@Test public void testNode(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  NodeDraftGetter n1=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n2=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n3=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n4=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n5=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n6=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n7=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n8=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  NodeDraftGetter n9=(NodeDraftGetter)container.getLoader().getNode(""String_Node_Str"");
  assertNotNull(n1);
  assertNotNull(n2);
  assertNotNull(n3);
  assertNotNull(n4);
  assertNotNull(n5);
  assertNotNull(n6);
  assertNotNull(n7);
  assertNotNull(n8);
  assertNotNull(n9);
  ContainerUnloader unloader=container.getUnloader();
  AttributeColumn col0=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col1=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col2=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col3=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  AttributeColumn col4=unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"");
  try {
    assertEquals(""String_Node_Str"",n1.getLabel());
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n1.getTimeInterval().getValues().get(0)[1]));
    AttributeValue[] values1=n1.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values1[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values1[col3.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values1[col0.getIndex()].getValue()).getValue());
    assertEquals(new Float(1),((DynamicType)values1[col3.getIndex()].getValue()).getValue());
    AttributeValue[] values2=n2.getAttributeRow().getValues();
    assertEquals(""String_Node_Str"",values2[col0.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",values2[col2.getIndex()].getColumn().getId());
    assertEquals(""String_Node_Str"",((DynamicType)values2[col0.getIndex()].getValue()).getValue());
    assertEquals(new StringList(""String_Node_Str""),values2[col2.getIndex()].getValue());
    AttributeValue[] values3=n3.getAttributeRow().getValues();
    DynamicType val4=(DynamicType)values3[col4.getIndex()].getValue();
    double low=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    double high=DynamicUtilities.getDoubleFromXMLDateString(""String_Node_Str"");
    assertEquals(new Float(3f),val4.getValue(low,high));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
    assertEquals(2,n3.getTimeInterval().getValues().size());
    container.verify();
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n4.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(0)[1]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[0]));
    assertEquals(""String_Node_Str"",DynamicUtilities.getXMLDateStringFromDouble(n3.getTimeInterval().getValues().get(1)[1]));
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  container.closeLoader();
  System.out.println(container.getReport().getText());
}",0.944084097517334
190183,"@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  NumberList numberList=(NumberList)value;
  if (numberList == null) {
    return super.getTableCellRendererComponent(table,""String_Node_Str"",isSelected,hasFocus,row,column);
  }
 else   if (numberList.size() < 2) {
    return super.getTableCellRendererComponent(table,numberList.toString(),isSelected,hasFocus,row,column);
  }
  ArrayList<Number> numbers=new ArrayList<Number>();
  Number n;
  for (int i=0; i < numberList.size(); i++) {
    n=(Number)numberList.getItem(i);
    if (n != null) {
      numbers.add(n);
    }
  }
  JLabel label=new JLabel();
  Color background;
  if (isSelected) {
    background=SELECTED_BACKGROUND;
  }
 else {
    background=UNSELECTED_BACKGROUND;
  }
  final SizeParams size=new SizeParams(table.getColumnModel().getColumn(column).getWidth(),table.getRowHeight(row) - 1,1);
  final BufferedImage i=LineGraph.createGraph(numbers.toArray(new Number[0]),size,Color.BLUE,background);
  label.setIcon(new ImageIcon(i));
  label.setToolTipText(numberList.toString());
  return label;
}","@Override public Component getTableCellRendererComponent(JTable table,Object value,boolean isSelected,boolean hasFocus,int row,int column){
  NumberList numberList=(NumberList)value;
  if (numberList == null) {
    return super.getTableCellRendererComponent(table,""String_Node_Str"",isSelected,hasFocus,row,column);
  }
 else   if (numberList.size() < 2) {
    return super.getTableCellRendererComponent(table,numberList.toString(),isSelected,hasFocus,row,column);
  }
  JLabel label=new JLabel();
  ArrayList<Number> numbers=new ArrayList<Number>();
  Number n;
  for (int i=0; i < numberList.size(); i++) {
    n=(Number)numberList.getItem(i);
    if (n != null) {
      numbers.add(n);
    }
  }
  Color background;
  if (isSelected) {
    background=SELECTED_BACKGROUND;
  }
 else {
    background=UNSELECTED_BACKGROUND;
  }
  final SizeParams size=new SizeParams(table.getColumnModel().getColumn(column).getWidth(),table.getRowHeight(row) - 1,1);
  final BufferedImage i=LineGraph.createGraph(numbers.toArray(new Number[0]),size,Color.BLUE,background);
  label.setIcon(new ImageIcon(i));
  label.setToolTipText(numberList.toString());
  return label;
}",0.9749134948096886
190184,"private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
        dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}","private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        if (deletedEdges[j] != null) {
          dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
          dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
        }
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}",0.9735924265072248
190185,"public synchronized void removeColumn(AttributeColumn column){
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}","public synchronized void removeColumn(AttributeColumn column){
  int index=columns.indexOf(column);
  if (index == -1) {
    return;
  }
  AttributeColumnImpl c;
  for (index=index + 1; index < columns.size(); index++) {
    c=columns.get(index);
    c.index--;
  }
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}",0.8031037827352085
190186,"public AbstractEdge newEdge(String id,Node source,Node target,float weight,boolean directed){
  if (source == null || target == null) {
    throw new NullPointerException();
  }
  AbstractNode nodeSource=(AbstractNode)source;
  AbstractNode nodeTarget=(AbstractNode)target;
  AbstractEdge edge;
  if (source == target) {
    edge=new SelfLoopImpl(idGen.newEdgeId(),nodeSource);
  }
 else {
    edge=new MixedEdgeImpl(idGen.newEdgeId(),nodeSource,nodeTarget,directed);
  }
  edge.setWeight(weight);
  edge.setAttributes(newEdgeAttributes());
  edge.getEdgeData().setTextData(newTextData());
  if (id != null) {
    edge.getEdgeData().setId(id);
  }
 else {
    edge.getEdgeData().setId(""String_Node_Str"" + edge.getId());
  }
  return edge;
}","public AbstractEdge newEdge(String id,Node source,Node target,float weight,boolean directed){
  if (source == null || target == null) {
    throw new NullPointerException();
  }
  AbstractNode nodeSource=(AbstractNode)source;
  AbstractNode nodeTarget=(AbstractNode)target;
  AbstractEdge edge;
  if (source == target) {
    edge=new SelfLoopImpl(idGen.newEdgeId(),nodeSource);
  }
 else {
    edge=new MixedEdgeImpl(idGen.newEdgeId(),nodeSource,nodeTarget,directed);
  }
  edge.setAttributes(newEdgeAttributes());
  edge.setWeight(weight);
  edge.getEdgeData().setTextData(newTextData());
  if (id != null) {
    edge.getEdgeData().setId(id);
  }
 else {
    edge.getEdgeData().setId(""String_Node_Str"" + edge.getId());
  }
  return edge;
}",0.941891891891892
190187,"protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setVisible(nodeDraft.isLabelVisible());
  }
  if (nodeDraft.getLabelColor() != null && node.getNodeData().getTextData() != null) {
    Color labelColor=nodeDraft.getLabelColor();
    node.getNodeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (nodeDraft.getLabelSize() != -1f && node.getNodeData().getTextData() != null) {
    node.getNodeData().getTextData().setSize(nodeDraft.getLabelSize());
  }
  if (nodeDraft.getX() != 0 && !Float.isNaN(nodeDraft.getX())) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0 && !Float.isNaN(nodeDraft.getY())) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0 && !Float.isNaN(nodeDraft.getZ())) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0 && !Float.isNaN(nodeDraft.getSize())) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
 else {
    node.getNodeData().setSize(10f);
  }
  if (nodeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getNodeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getNodeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    node.getNodeData().getAttributes().setValue(col.getIndex(),nodeDraft.getTimeInterval());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.9868500910378312
190188,"protected void flushToEdge(EdgeDraftGetter edgeDraft,Edge edge){
  if (edgeDraft.getColor() != null) {
    edge.getEdgeData().setR(edgeDraft.getColor().getRed() / 255f);
    edge.getEdgeData().setG(edgeDraft.getColor().getGreen() / 255f);
    edge.getEdgeData().setB(edgeDraft.getColor().getBlue() / 255f);
  }
 else {
    edge.getEdgeData().setR(-1f);
    edge.getEdgeData().setG(-1f);
    edge.getEdgeData().setB(-1f);
  }
  if (edgeDraft.getLabel() != null) {
    edge.getEdgeData().setLabel(edgeDraft.getLabel());
  }
  if (edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setVisible(edgeDraft.isLabelVisible());
  }
  if (edgeDraft.getLabelSize() != -1f && edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setSize(edgeDraft.getLabelSize());
  }
  if (edgeDraft.getLabelColor() != null && edge.getEdgeData().getTextData() != null) {
    Color labelColor=edgeDraft.getLabelColor();
    edge.getEdgeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (edgeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getEdgeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    edge.getEdgeData().getAttributes().setValue(col.getIndex(),edgeDraft.getTimeInterval());
  }
  if (edge.getEdgeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)edge.getEdgeData().getAttributes();
    for (    AttributeValue val : edgeDraft.getAttributeRow().getValues()) {
      if (val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}","protected void flushToEdge(EdgeDraftGetter edgeDraft,Edge edge){
  if (edgeDraft.getColor() != null) {
    edge.getEdgeData().setR(edgeDraft.getColor().getRed() / 255f);
    edge.getEdgeData().setG(edgeDraft.getColor().getGreen() / 255f);
    edge.getEdgeData().setB(edgeDraft.getColor().getBlue() / 255f);
  }
 else {
    edge.getEdgeData().setR(-1f);
    edge.getEdgeData().setG(-1f);
    edge.getEdgeData().setB(-1f);
  }
  if (edgeDraft.getLabel() != null) {
    edge.getEdgeData().setLabel(edgeDraft.getLabel());
  }
  if (edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setVisible(edgeDraft.isLabelVisible());
  }
  if (edgeDraft.getLabelSize() != -1f && edge.getEdgeData().getTextData() != null) {
    edge.getEdgeData().getTextData().setSize(edgeDraft.getLabelSize());
  }
  if (edgeDraft.getLabelColor() != null && edge.getEdgeData().getTextData() != null) {
    Color labelColor=edgeDraft.getLabelColor();
    edge.getEdgeData().getTextData().setColor(labelColor.getRed() / 255f,labelColor.getGreen() / 255f,labelColor.getBlue() / 255f,labelColor.getAlpha() / 255f);
  }
  if (edgeDraft.getTimeInterval() != null) {
    AttributeColumn col=attributeModel.getEdgeTable().getColumn(DynamicModel.TIMEINTERVAL_COLUMN);
    if (col == null) {
      col=attributeModel.getEdgeTable().addColumn(DynamicModel.TIMEINTERVAL_COLUMN,""String_Node_Str"",AttributeType.TIME_INTERVAL,AttributeOrigin.PROPERTY,null);
    }
    edge.getEdgeData().getAttributes().setValue(col.getIndex(),edgeDraft.getTimeInterval());
  }
  if (edge.getEdgeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)edge.getEdgeData().getAttributes();
    for (    AttributeValue val : edgeDraft.getAttributeRow().getValues()) {
      if (!val.getColumn().getOrigin().equals(AttributeOrigin.PROPERTY) && val.getValue() != null) {
        row.setValue(val.getColumn(),val.getValue());
      }
    }
  }
}",0.9827723297111052
190189,"public void setValue(FilterProperty property,Object value,Callback callback){
  if (model != null) {
    Query query=model.getQuery(property.getFilter());
    if (query == null) {
      callback.setValue(value);
      return;
    }
    AbstractQueryImpl rootQuery=((AbstractQueryImpl)query).getRoot();
    FilterThread filterThread=null;
    if ((filterThread=model.getFilterThread()) != null && model.getCurrentQuery() == rootQuery) {
      filterThread.addModifier(new PropertyModifier(query,property,value,callback));
      filterThread.setRootQuery(rootQuery);
    }
 else {
      callback.setValue(value);
      model.updateParameters(query);
    }
  }
}","public void setValue(FilterProperty property,Object value,Callback callback){
  if (model != null) {
    Query query=model.getQuery(property.getFilter());
    if (query == null) {
      callback.setValue(value);
      return;
    }
    AbstractQueryImpl rootQuery=((AbstractQueryImpl)query).getRoot();
    FilterThread filterThread=null;
    if ((filterThread=model.getFilterThread()) != null && model.getCurrentQuery() == rootQuery) {
      filterThread.addModifier(new PropertyModifier(query,property,value,callback));
      filterThread.setRootQuery(rootQuery);
    }
 else {
      callback.setValue(value);
      model.updateParameters(query);
    }
  }
 else {
    callback.setValue(value);
  }
}",0.9691176470588236
190190,"private Query readQuery(Element queryE){
  String builderClassName=queryE.getAttribute(""String_Node_Str"");
  FilterBuilder builder=null;
  for (  FilterBuilder fb : filterLibraryImpl.getLookup().lookupAll(FilterBuilder.class)) {
    if (fb.getClass().getName().equals(builderClassName)) {
      builder=fb;
    }
  }
  if (builder != null) {
    Filter filter=builder.getFilter();
    FilterController fc=Lookup.getDefault().lookup(FilterController.class);
    Query query=fc.createQuery(filter);
    NodeList paramList=queryE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < paramList.getLength(); i++) {
      Node n=paramList.item(i);
      if (n.getNodeType() == Node.ELEMENT_NODE) {
        Element paramE=(Element)n;
        int index=Integer.parseInt(paramE.getAttribute(""String_Node_Str""));
        FilterProperty property=query.getFilter().getProperties()[index];
        try {
          PropertyEditor editor=property.getPropertyEditor();
          if (editor == null) {
            editor=PropertyEditorManager.findEditor(property.getValueType());
          }
          if (editor != null) {
            String textValue=paramE.getTextContent();
            editor.setAsText(textValue);
            property.setValue(editor.getValue());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    return query;
  }
  return null;
}","private Query readQuery(Element queryE){
  String builderClassName=queryE.getAttribute(""String_Node_Str"");
  FilterBuilder builder=null;
  for (  FilterBuilder fb : filterLibraryImpl.getLookup().lookupAll(FilterBuilder.class)) {
    if (fb.getClass().getName().equals(builderClassName)) {
      builder=fb;
    }
  }
  if (builder != null) {
    Filter filter=builder.getFilter();
    FilterController fc=Lookup.getDefault().lookup(FilterController.class);
    Query query=fc.createQuery(filter);
    NodeList paramList=queryE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < paramList.getLength(); i++) {
      Node n=paramList.item(i);
      if (n.getNodeType() == Node.ELEMENT_NODE) {
        Element paramE=(Element)n;
        int index=Integer.parseInt(paramE.getAttribute(""String_Node_Str""));
        FilterProperty property=query.getFilter().getProperties()[index];
        try {
          PropertyEditor editor=property.getPropertyEditor();
          if (editor == null) {
            editor=PropertyEditorManager.findEditor(property.getValueType());
          }
          if (editor != null) {
            String textValue=paramE.getTextContent();
            editor.setAsText(textValue);
            property.setValue(editor.getValue());
            updateParameters(query);
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    return query;
  }
  return null;
}",0.987031195233088
190191,"public void readXML(Element textModelElement){
  Element showNodeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showNodeLabels=Boolean.parseBoolean(showNodeE.getAttribute(""String_Node_Str""));
  Element showEdgeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showEdgeLabels=Boolean.parseBoolean(showEdgeE.getAttribute(""String_Node_Str""));
  Element selectedOnlyE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  selectedOnly=Boolean.parseBoolean(selectedOnlyE.getAttribute(""String_Node_Str""));
  Element nodeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String nodeFontName=nodeFontE.getAttribute(""String_Node_Str"");
  int nodeFontSize=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  int nodeFontStyle=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  nodeFont=new Font(nodeFontName,nodeFontStyle,nodeFontSize);
  Element edgeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String edgeFontName=edgeFontE.getAttribute(""String_Node_Str"");
  int edgeFontSize=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  int edgeFontStyle=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  edgeFont=new Font(edgeFontName,edgeFontStyle,edgeFontSize);
  Element nodeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeColor=ColorUtils.decode(nodeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element edgeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeColor=ColorUtils.decode(edgeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element nodeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeSizeFactor=Float.parseFloat(nodeSizeFactorE.getTextContent());
  Element edgeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeSizeFactor=Float.parseFloat(edgeSizeFactorE.getTextContent());
  Element colorModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String colorModeClass=colorModeE.getAttribute(""String_Node_Str"");
  if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[1];
  }
  Element sizeModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String sizeModeClass=sizeModeE.getAttribute(""String_Node_Str"");
  if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[2];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[1];
  }
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  if (attributeController != null && attributeController.getModel() != null) {
    AttributeModel attributeModel=attributeController.getModel();
    List<AttributeColumn> nodeCols=new ArrayList<AttributeColumn>();
    List<AttributeColumn> edgeCols=new ArrayList<AttributeColumn>();
    Element nodeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList nodeColumnList=nodeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeColumnList.getLength(); i++) {
      if (nodeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element nodeColumnE=(Element)nodeColumnList.item(i);
        String id=nodeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getNodeTable().getColumn(id);
        if (col != null) {
          nodeCols.add(col);
        }
      }
    }
    Element edgeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList edgeColumnList=edgeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < edgeColumnList.getLength(); i++) {
      if (edgeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element edgeColumnE=(Element)edgeColumnList.item(i);
        String id=edgeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getEdgeTable().getColumn(id);
        if (col != null) {
          edgeCols.add(col);
        }
      }
    }
    nodeTextColumns=nodeCols.toArray(new AttributeColumn[0]);
    edgeTextColumns=edgeCols.toArray(new AttributeColumn[0]);
  }
}","public void readXML(Element textModelElement){
  Element showNodeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showNodeLabels=Boolean.parseBoolean(showNodeE.getAttribute(""String_Node_Str""));
  Element showEdgeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  showEdgeLabels=Boolean.parseBoolean(showEdgeE.getAttribute(""String_Node_Str""));
  Element selectedOnlyE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  selectedOnly=Boolean.parseBoolean(selectedOnlyE.getAttribute(""String_Node_Str""));
  Element nodeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String nodeFontName=nodeFontE.getAttribute(""String_Node_Str"");
  int nodeFontSize=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  int nodeFontStyle=Integer.parseInt(nodeFontE.getAttribute(""String_Node_Str""));
  nodeFont=new Font(nodeFontName,nodeFontStyle,nodeFontSize);
  Element edgeFontE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String edgeFontName=edgeFontE.getAttribute(""String_Node_Str"");
  int edgeFontSize=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  int edgeFontStyle=Integer.parseInt(edgeFontE.getAttribute(""String_Node_Str""));
  edgeFont=new Font(edgeFontName,edgeFontStyle,edgeFontSize);
  Element nodeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeColor=ColorUtils.decode(nodeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element edgeColorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeColor=ColorUtils.decode(edgeColorE.getAttribute(""String_Node_Str"")).getRGBComponents(null);
  Element nodeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  nodeSizeFactor=Float.parseFloat(nodeSizeFactorE.getTextContent());
  Element edgeSizeFactorE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  edgeSizeFactor=Float.parseFloat(edgeSizeFactorE.getTextContent());
  Element colorModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String colorModeClass=colorModeE.getAttribute(""String_Node_Str"");
  if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[0];
  }
 else   if (colorModeClass.equals(""String_Node_Str"")) {
    colorMode=VizController.getInstance().getTextManager().getColorModes()[1];
  }
  Element sizeModeE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
  String sizeModeClass=sizeModeE.getAttribute(""String_Node_Str"");
  if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[0];
  }
 else   if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[2];
  }
 else   if (sizeModeClass.equals(""String_Node_Str"")) {
    sizeMode=VizController.getInstance().getTextManager().getSizeModes()[1];
  }
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  if (attributeController != null && attributeController.getModel() != null) {
    AttributeModel attributeModel=attributeController.getModel();
    List<AttributeColumn> nodeCols=new ArrayList<AttributeColumn>();
    List<AttributeColumn> edgeCols=new ArrayList<AttributeColumn>();
    Element nodeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList nodeColumnList=nodeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < nodeColumnList.getLength(); i++) {
      if (nodeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element nodeColumnE=(Element)nodeColumnList.item(i);
        String id=nodeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getNodeTable().getColumn(id);
        if (col != null) {
          nodeCols.add(col);
        }
      }
    }
    Element edgeColumnsE=(Element)textModelElement.getElementsByTagName(""String_Node_Str"").item(0);
    NodeList edgeColumnList=edgeColumnsE.getElementsByTagName(""String_Node_Str"");
    for (int i=0; i < edgeColumnList.getLength(); i++) {
      if (edgeColumnList.item(i).getNodeType() == Node.ELEMENT_NODE) {
        Element edgeColumnE=(Element)edgeColumnList.item(i);
        String id=edgeColumnE.getAttribute(""String_Node_Str"");
        AttributeColumn col=attributeModel.getEdgeTable().getColumn(id);
        if (col != null) {
          edgeCols.add(col);
        }
      }
    }
    nodeTextColumns=nodeCols.toArray(new AttributeColumn[0]);
    edgeTextColumns=edgeCols.toArray(new AttributeColumn[0]);
  }
}",0.998109640831758
190192,"public synchronized void removeColumn(AttributeColumn column){
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}","public synchronized void removeColumn(AttributeColumn column){
  int index=columns.indexOf(column);
  if (index == -1) {
    return;
  }
  AttributeColumnImpl c;
  for (index=index + 1; index < columns.size(); index++) {
    c=columns.get(index);
    c.index--;
  }
  columns.remove((AttributeColumnImpl)column);
  columnsMap.remove(column.getId());
  if (column.getTitle() != null && !column.getTitle().equals(column.getId())) {
    columnsMap.remove(column.getTitle());
  }
  columnsSet.remove(column);
  fireAttributeEvent(new AttributeEventImpl(AttributeEvent.EventType.REMOVE_COLUMN,this,column));
  version++;
}",0.8031037827352085
190193,"public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          Node nodeParent=graph.getParent(node);
          if (nodeParent != null) {
            parents.add(nodeParent);
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null) {
            Node nodeParent=graph.getParent(node);
            if (nodeParent != null) {
              parents.add(nodeParent);
            }
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9213389121338912
190194,"public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (node != null && graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.9859525899912204
190195,"public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}","public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (node != null && graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (node != null && graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}",0.9775596072931276
190196,"public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5379146919431279
190197,"public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    graph.removeNode(nodeData.getRootNode());
  }
}","public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl model : selectedNodeModels) {
    NodeData nodeData=(NodeData)model.getObj();
    Node node=nodeData.getRootNode();
    if (node != null) {
      graph.removeNode(node);
    }
  }
}",0.828169014084507
190198,"public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.9857651245551602
190199,"public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9897172236503856
190200,"public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5390070921985816
190201,"public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.9856887298747764
190202,"public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final Node[] newGroup=new Node[selectedNodeModels.length];
  for (int i=0; i < selectedNodeModels.length; i++) {
    newGroup[i]=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup);
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.length + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final List<Node> newGroup=new ArrayList<Node>();
  for (int i=0; i < selectedNodeModels.length; i++) {
    Node node=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
    if (node != null) {
      newGroup.add(node);
    }
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup.toArray(new Node[0]));
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.size() + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.7977087729876394
190203,"/** 
 * Used for iterating through all nodes of the graph
 * @return Array with all graph nodes
 */
private Node[] getNodesArray(){
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  return graph.getNodes().toArray();
}","/** 
 * Used for iterating through all nodes of the graph
 * @return Array with all graph nodes
 */
private Node[] getNodesArray(){
  return Lookup.getDefault().lookup(GraphController.class).getModel().getHierarchicalGraph().getNodesTree().toArray();
}",0.5854616895874263
190204,"protected void createPropertiesColumn(){
  PropertiesColumn[] columnsForNodeTable={PropertiesColumn.NODE_ID,PropertiesColumn.NODE_LABEL};
  PropertiesColumn[] columnsForEdgeTable={PropertiesColumn.EDGE_ID,PropertiesColumn.EDGE_LABEL};
  for (  PropertiesColumn columnForNodeTable : columnsForNodeTable)   nodeTable.addPropertiesColumn(columnForNodeTable);
  for (  PropertiesColumn columnForEdgeTable : columnsForEdgeTable)   edgeTable.addPropertiesColumn(columnForEdgeTable);
}","protected void createPropertiesColumn(){
  PropertiesColumn[] columnsForNodeTable={PropertiesColumn.NODE_ID,PropertiesColumn.NODE_LABEL};
  PropertiesColumn[] columnsForEdgeTable={PropertiesColumn.EDGE_ID,PropertiesColumn.EDGE_LABEL,PropertiesColumn.EDGE_WEIGHT};
  for (  PropertiesColumn columnForNodeTable : columnsForNodeTable)   nodeTable.addPropertiesColumn(columnForNodeTable);
  for (  PropertiesColumn columnForEdgeTable : columnsForEdgeTable)   edgeTable.addPropertiesColumn(columnForEdgeTable);
}",0.9705583756345176
190205,"public AbstractEdge(AbstractEdge edge,AbstractNode source,AbstractNode target){
  this.source=source;
  this.target=target;
  this.ID=edge.ID;
  this.edgeData=edge.edgeData;
  this.weight=edge.weight;
}","public AbstractEdge(AbstractEdge edge,AbstractNode source,AbstractNode target){
  this.source=source;
  this.target=target;
  this.ID=edge.ID;
  this.edgeData=edge.edgeData;
}",0.9283819628647216
190206,"public float getWeight(){
  return weight;
}","public float getWeight(){
  return edgeData.getWeight();
}",0.8431372549019608
190207,"public void setWeight(float weight){
  this.weight=weight;
}","public void setWeight(float weight){
  edgeData.setWeight(weight);
}",0.78125
190208,"public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount + edgeWeight) / (edgeCount + 1);
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}","public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount + edgeWeight) / (edgeCount + 1);
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}",0.9856781802864364
190209,"public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount - edgeWeight) / (edgeCount - 1);
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}","public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float edgeCount=metaEdge.getCount();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  edgeWeight/=div;
  metaWeight=(metaWeight * edgeCount - edgeWeight) / (edgeCount - 1);
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}",0.985774058577406
190210,"public MetaEdgeImpl(int ID,AbstractNode source,AbstractNode target){
  super(ID,source,target);
  this.weight=0f;
}","public MetaEdgeImpl(int ID,AbstractNode source,AbstractNode target){
  super(ID,source,target);
  setWeight(0f);
}",0.9519650655021834
190211,"public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (edge.getSource() == metaEdge.getSource() || edge.getSource() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight+=edgeWeight / div;
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}","public void pushEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (edge.getSource() == metaEdge.getSource() || edge.getSource() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getTarget() || edge.getTarget() == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight+=edgeWeight / div;
  if (metaWeight > weightLimit) {
    metaWeight=weightLimit;
  }
  metaEdge.setWeight(metaWeight);
}",0.984186046511628
190212,"public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.weight;
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight-=edgeWeight / div;
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}","public void pullEdge(AbstractEdge edge,AbstractNode source,AbstractNode target,MetaEdgeImpl metaEdge){
  float edgeWeight=edge.getWeight();
  float metaWeight=metaEdge.getWeight();
  float div=1f;
  if (source == metaEdge.getSource() || source == metaEdge.getTarget() || target == metaEdge.getTarget() || target == metaEdge.getSource()) {
    div=nonDeepDivisor;
  }
  metaWeight-=edgeWeight / div;
  if (metaWeight < weightMinimum) {
    metaWeight=weightMinimum;
  }
  metaEdge.setWeight(metaWeight);
}",0.9830508474576272
190213,"/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mAvgInDegree+ ""String_Node_Str""+ mAvgOutDegree+ ""String_Node_Str"");
  return report;
}","/** 
 * @return
 */
public String getReport(){
  String report=new String(""String_Node_Str"" + ""String_Node_Str"" + mGraphRevision + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ mAvgDegree+ ""String_Node_Str""+ mAvgInDegree+ ""String_Node_Str""+ mAvgOutDegree+ ""String_Node_Str"");
  return report;
}",0.9395509499136442
190214,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  AttributeColumn degCol=nodeTable.getColumn(DEGREE);
  if (graphModel.isDirected()) {
    if (inCol == null) {
      inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
    if (outCol == null) {
      outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
    }
  }
  if (degCol == null) {
    degCol=nodeTable.addColumn(DEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  Graph graph=graphModel.getGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    if (graph instanceof DirectedGraph) {
      DirectedGraph directedGraph=(DirectedGraph)graph;
      row.setValue(inCol,directedGraph.getInDegree(n));
      row.setValue(outCol,directedGraph.getOutDegree(n));
      mAvgInDegree+=directedGraph.getInDegree(n);
      mAvgOutDegree+=directedGraph.getOutDegree(n);
    }
    row.setValue(degCol,graph.getDegree(n));
    mAvgDegree+=graph.getDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.8147004323656578
190215,"private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}","private AbstractNode[] deleteNode(AbstractNode node){
  AbstractNode[] descendants=new AbstractNode[node.size + 1];
  int i=0;
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    descendants[i]=descendant;
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    AbstractEdge[] deletedEdges=edgeProcessor.clearEdges(descendant);
    if (deletedEdges != null) {
      for (int j=0; j < deletedEdges.length; j++) {
        dhns.getGraphStructure().removeFromDictionnary(deletedEdges[j]);
        dhns.getEventManager().fireEvent(new EdgeEvent(EventType.REMOVE_EDGES,deletedEdges[j],view));
      }
    }
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().removeFromDictionnary(descendant);
    }
    i++;
  }
  treeStructure.deleteDescendantAndSelf(node);
  return descendants;
}",0.7912885662431942
190216,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.98280759455823
190217,"@Test public void testAttributeModel(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  ContainerUnloader unloader=container.getUnloader();
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getEdgeTable().getColumn(""String_Node_Str"",AttributeType.FLOAT));
}","@Test public void testAttributeModel(){
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setReport(new Report());
  importer.execute(container.getLoader());
  ContainerUnloader unloader=container.getUnloader();
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.LIST_STRING));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getNodeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
  assertNotNull(unloader.getAttributeModel().getEdgeTable().getColumn(""String_Node_Str"",AttributeType.DYNAMIC_FLOAT));
}",0.9974570883661792
190218,"public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          Node nodeParent=graph.getParent(node);
          if (nodeParent != null) {
            parents.add(nodeParent);
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void contract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null) {
            Node nodeParent=graph.getParent(node);
            if (nodeParent != null) {
              parents.add(nodeParent);
            }
          }
        }
        for (        Node parent : parents) {
          GroupData gd=(GroupData)parent.getNodeData();
          if (gd.getHullModel() != null) {
            ConvexHull hull=((ConvexHullModel)gd.getHullModel()).getObj();
            contractPositioning(hull);
          }
          graph.retract(parent);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9213389121338912
190219,"public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void ungroup(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        Set<Node> parents=new HashSet<Node>();
        for (        ModelImpl metaModelImpl : models) {
          NodeData nodeData=(NodeData)metaModelImpl.getObj();
          Node node=nodeData.getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            parents.add(node);
          }
 else           if (node != null && graph.getParent(node) != null) {
            parents.add(graph.getParent(node));
          }
        }
        for (        Node parent : parents) {
          graph.ungroupNodes(parent);
        }
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.9859525899912204
190220,"public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}","public void run(){
  try {
    Set<Node> parents=new HashSet<Node>();
    for (    ModelImpl metaModelImpl : models) {
      NodeData nodeData=(NodeData)metaModelImpl.getObj();
      Node node=nodeData.getNode(graph.getView().getViewId());
      if (node != null && graph.getDescendantCount(node) > 0) {
        parents.add(node);
      }
 else       if (node != null && graph.getParent(node) != null) {
        parents.add(graph.getParent(node));
      }
    }
    for (    Node parent : parents) {
      graph.ungroupNodes(parent);
    }
  }
 catch (  Exception e) {
    graph.readUnlockAll();
    NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
    DialogDisplayer.getDefault().notifyLater(nd);
  }
}",0.9775596072931276
190221,"public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5379146919431279
190222,"public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    graph.removeNode(nodeData.getRootNode());
  }
}","public void delete(){
  this.graph=graphController.getModel().getHierarchicalGraph();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl model : selectedNodeModels) {
    NodeData nodeData=(NodeData)model.getObj();
    Node node=nodeData.getRootNode();
    if (node != null) {
      graph.removeNode(node);
    }
  }
}",0.828169014084507
190223,"public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.9857651245551602
190224,"public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}","public void expand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final ModelImpl[] models=Arrays.copyOf(selectedNodeModels,selectedNodeModels.length);
  new Thread(new Runnable(){
    public void run(){
      try {
        for (        ModelImpl metaModelImpl : models) {
          Node node=((NodeData)metaModelImpl.getObj()).getNode(graph.getView().getViewId());
          if (node != null && graph.getDescendantCount(node) > 0) {
            expandPositioning(node);
            graph.expand(node);
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
        graph.readUnlockAll();
      }
    }
  }
,""String_Node_Str"").start();
}",0.9897172236503856
190225,"public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  int nodesReallyPresent=0;
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null) {
      nodesReallyPresent++;
    }
  }
  return nodesReallyPresent >= 1;
}",0.5390070921985816
190226,"public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (node != null && graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.9856887298747764
190227,"public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final Node[] newGroup=new Node[selectedNodeModels.length];
  for (int i=0; i < selectedNodeModels.length; i++) {
    newGroup[i]=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup);
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.length + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}","public void group(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  final List<Node> newGroup=new ArrayList<Node>();
  for (int i=0; i < selectedNodeModels.length; i++) {
    Node node=((NodeData)selectedNodeModels[i].getObj()).getNode(graph.getView().getViewId());
    if (node != null) {
      newGroup.add(node);
    }
  }
  new Thread(new Runnable(){
    public void run(){
      try {
        float centroidX=0;
        float centroidY=0;
        int len=0;
        float sizes=0;
        float r=0;
        float g=0;
        float b=0;
        Node group=graph.groupNodes(newGroup.toArray(new Node[0]));
        group.getNodeData().setLabel(""String_Node_Str"" + newGroup.size() + ""String_Node_Str"");
        group.getNodeData().setSize(10f);
        for (        Node child : newGroup) {
          centroidX+=child.getNodeData().x();
          centroidY+=child.getNodeData().y();
          len++;
          sizes+=child.getNodeData().getSize() / 10f;
          r+=child.getNodeData().r();
          g+=child.getNodeData().g();
          b+=child.getNodeData().b();
        }
        centroidX/=len;
        centroidY/=len;
        group.getNodeData().setSize(sizes);
        group.getNodeData().setColor(r / len,g / len,b / len);
        group.getNodeData().setX(centroidX);
        group.getNodeData().setY(centroidY);
      }
 catch (      Exception e) {
        graph.readUnlockAll();
        NotifyDescriptor.Message nd=new NotifyDescriptor.Message(e.getMessage());
        DialogDisplayer.getDefault().notifyLater(nd);
      }
    }
  }
,""String_Node_Str"").start();
}",0.7977087729876394
190228,"public void select(Workspace workspace){
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  refreshAll();
}","public void select(Workspace workspace){
  Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
  hideTable();
  enableTableControls();
  bannerPanel.setVisible(false);
  AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  refreshAll();
}",0.9069958847736626
190229,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
    }
    public void select(    Workspace workspace){
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(DataTableTopComponent.this);
      hideTable();
      enableTableControls();
      bannerPanel.setVisible(false);
      AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      refreshAll();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clearAll();
    }
    public void close(    Workspace workspace){
      clearAll();
    }
    public void disable(){
      clearAll();
      Lookup.getDefault().lookup(DataTablesController.class).setDataTablesEventListener(null);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9818801300913736
190230,"public void unselectAll(){
  filterProperties[1].setValue(new ArrayList<Part>());
}","public void unselectAll(){
  getProperties()[1].setValue(new ArrayList<Part>());
}",0.9454545454545454
190231,"public void removePart(Part part){
  List<Part> newParts=new ArrayList<Part>(parts);
  if (newParts.remove(part)) {
    filterProperties[1].setValue(newParts);
  }
}","public void removePart(Part part){
  List<Part> newParts=new ArrayList<Part>(parts);
  if (newParts.remove(part)) {
    getProperties()[1].setValue(newParts);
  }
}",0.972644376899696
190232,"public void selectAll(){
  filterProperties[1].setValue(Arrays.asList(partition.getParts()));
}","public void selectAll(){
  getProperties()[1].setValue(Arrays.asList(partition.getParts()));
}",0.9523809523809524
190233,"public void addPart(Part part){
  if (!parts.contains(part)) {
    List<Part> newParts=new ArrayList<Part>(parts.size() + 1);
    newParts.addAll(parts);
    newParts.add(part);
    filterProperties[1].setValue(newParts);
  }
}","public void addPart(Part part){
  if (!parts.contains(part)) {
    List<Part> newParts=new ArrayList<Part>(parts.size() + 1);
    newParts.addAll(parts);
    newParts.add(part);
    getProperties()[1].setValue(newParts);
  }
}",0.9757174392935982
190234,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(INDEGREE);
  AttributeColumn outCol=nodeTable.getColumn(OUTDEGREE);
  if (inCol == null) {
    inCol=nodeTable.addColumn(INDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(OUTDEGREE,""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    Progress.progress(mProgress,i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9961117002474372
190235,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localImportDialogTitle);
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.CANCEL_OPTION)       return;
      final File neo4jDirectory=fileChooser.getSelectedFile();
      if (graphDB != null)       graphDB.shutdown();
      graphDB=Neo4jUtils.localDatabase(neo4jDirectory);
      String traversalDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      final TraversalPanel traversalPanel=new TraversalPanel(graphDB);
      ValidationPanel validationPanel=traversalPanel.createValidationPanel();
      if (validationPanel.showOkCancelDialog(traversalDialogTitle)) {
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
          final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
          LongTaskExecutor executor=new LongTaskExecutor(true);
          executor.execute((LongTask)neo4jImporter,new Runnable(){
            @Override public void run(){
              neo4jImporter.importDatabase(graphDB,traversalPanel.getStartNodeId(),traversalPanel.getOrder(),traversalPanel.getMaxDepth(),traversalPanel.getRelationshipInfos());
            }
          }
);
        }
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localExportDialogTitle);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteImportDialogTitle)) {
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            if (graphDB != null)             graphDB.shutdown();
            graphDB=Neo4jUtils.remoteDatabase(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
            neo4jImporter.importDatabase(graphDB);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteExportDialogTitle)) {
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportRemote(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
          }
        }
);
      }
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localImportDialogTitle);
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      Neo4jCustomDirectoryProvider.setEnabled(false);
      if (dialogResult == JFileChooser.CANCEL_OPTION)       return;
      final File neo4jDirectory=fileChooser.getSelectedFile();
      if (graphDB != null)       graphDB.shutdown();
      graphDB=Neo4jUtils.localDatabase(neo4jDirectory);
      String traversalDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      final TraversalPanel traversalPanel=new TraversalPanel(graphDB);
      ValidationPanel validationPanel=traversalPanel.createValidationPanel();
      if (validationPanel.showOkCancelDialog(traversalDialogTitle)) {
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
          final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
          LongTaskExecutor executor=new LongTaskExecutor(true);
          executor.execute((LongTask)neo4jImporter,new Runnable(){
            @Override public void run(){
              neo4jImporter.importDatabase(graphDB,traversalPanel.getStartNodeId(),traversalPanel.getOrder(),traversalPanel.getMaxDepth(),traversalPanel.getRelationshipInfos());
            }
          }
);
        }
      }
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      String localExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      fileChooser.setDialogTitle(localExportDialogTitle);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteImportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteImportDialogTitle)) {
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            if (graphDB != null)             graphDB.shutdown();
            graphDB=Neo4jUtils.remoteDatabase(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
            neo4jImporter.importDatabase(graphDB);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
      final RemoteDatabasePanel databasePanel=new RemoteDatabasePanel();
      final ValidationPanel validationPanel=RemoteDatabasePanel.createValidationPanel(databasePanel);
      String remoteExportDialogTitle=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
      if (validationPanel.showOkCancelDialog(remoteExportDialogTitle)) {
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportRemote(databasePanel.getRemoteUrl(),databasePanel.getLogin(),databasePanel.getPassword());
          }
        }
);
      }
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.9897338403041824
190236,"private SearchResult matchRegex(Object value,SearchOptions searchOptions,int rowIndex,int columnIndex){
  boolean found;
  String str=value != null ? value.toString() : ""String_Node_Str"";
  Matcher matcher=searchOptions.getRegexPattern().matcher(str);
  if (searchOptions.getRegionStart() >= str.length()) {
    return null;
  }
  if (searchOptions.isOnlyMatchWholeAttributeValue()) {
    found=matcher.matches();
  }
 else {
    matcher.region(searchOptions.getRegionStart(),str.length());
    found=matcher.find();
  }
  if (found) {
    searchOptions.setStartingRow(rowIndex);
    searchOptions.setStartingColumn(columnIndex);
    searchOptions.setRegionStart(matcher.end() + 1);
    return new SearchResult(searchOptions,null,null,rowIndex,columnIndex,matcher.start(),matcher.end());
  }
 else {
    return null;
  }
}","private SearchResult matchRegex(Object value,SearchOptions searchOptions,int rowIndex,int columnIndex){
  boolean found;
  String str=value != null ? value.toString() : ""String_Node_Str"";
  Matcher matcher=searchOptions.getRegexPattern().matcher(str);
  if (searchOptions.getRegionStart() >= str.length()) {
    return null;
  }
  if (searchOptions.isOnlyMatchWholeAttributeValue()) {
    found=matcher.matches();
  }
 else {
    matcher.region(searchOptions.getRegionStart(),str.length());
    found=matcher.find();
  }
  if (found) {
    searchOptions.setStartingRow(rowIndex);
    searchOptions.setStartingColumn(columnIndex);
    searchOptions.setRegionStart(matcher.end());
    return new SearchResult(searchOptions,null,null,rowIndex,columnIndex,matcher.start(),matcher.end());
  }
 else {
    return null;
  }
}",0.997560975609756
190237,"public void execute(){
  SearchReplaceUI ui=Lookup.getDefault().lookup(SearchReplaceUI.class);
  if (Lookup.getDefault().lookup(DataTablesController.class).isNodeTableMode()) {
    ui.setMode(SearchReplaceUI.Mode.NODES_TABLE);
  }
 else {
    ui.setMode(SearchReplaceUI.Mode.EDGES_TABLE);
  }
  DialogDescriptor dd=new DialogDescriptor(ui,getName());
  dd.setModal(false);
  dd.setOptions(new Object[]{NbBundle.getMessage(SearchReplace.class,""String_Node_Str"")});
  DialogDisplayer.getDefault().notify(dd);
}","public void execute(){
  SearchReplaceUI ui=Lookup.getDefault().lookup(SearchReplaceUI.class);
  if (Lookup.getDefault().lookup(DataTablesController.class).isNodeTableMode()) {
    ui.setMode(SearchReplaceUI.Mode.NODES_TABLE);
  }
 else {
    ui.setMode(SearchReplaceUI.Mode.EDGES_TABLE);
  }
  DialogDescriptor dd=new DialogDescriptor(ui,getName());
  dd.setModal(true);
  dd.setOptions(new Object[]{NbBundle.getMessage(SearchReplace.class,""String_Node_Str"")});
  DialogDisplayer.getDefault().notify(dd);
}",0.993103448275862
190238,"public Object getValue(){
  if (!column.getOrigin().isDelegate())   return value;
 else {
    Object delegateIdValue=row.getDelegateIdValue();
    PropertiesColumn propertiesColumn=column.getOrigin().getPropertiesColumn();
    AttributeValueDelegateProvider attributeValueDelegateProvider=PropertyColumnToAttributeValueDelegateProviderMapper.getInstance().get(propertiesColumn);
    if (row.attributeTable.isEdgeTable())     return attributeValueDelegateProvider.getEdgeValue(column,delegateIdValue);
 else     if (row.attributeTable.isNodeTable())     return attributeValueDelegateProvider.getNodeValue(column,delegateIdValue);
 else     throw new AssertionError();
  }
}","public Object getValue(){
  if (!column.getOrigin().isDelegate()) {
    System.out.println(""String_Node_Str"" + column.getOrigin());
    System.out.println(""String_Node_Str"" + column.getOrigin().isDelegate());
    System.out.println();
    return value;
  }
 else {
    System.out.println(""String_Node_Str"");
    Object delegateIdValue=1L;
    PropertiesColumn propertiesColumn=column.getOrigin().getPropertiesColumn();
    AttributeValueDelegateProvider attributeValueDelegateProvider=PropertyColumnToAttributeValueDelegateProviderMapper.getInstance().get(propertiesColumn);
    return attributeValueDelegateProvider.getEdgeValue(column,delegateIdValue);
  }
}",0.6126126126126126
190239,"void setAttributeRow(AttributeRowImpl row){
  this.row=row;
}","void setAttributeRow(AttributeRowImpl row){
  System.out.println(""String_Node_Str"" + row);
  this.row=row;
}",0.7218934911242604
190240,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jExporter neo4jExporter=Lookup.getDefault().lookup(Neo4jExporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jExporter,new Runnable(){
          @Override public void run(){
            neo4jExporter.exportLocal(neo4jDirectory);
          }
        }
);
      }
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.8534283916963724
190241,"@Override public void run(){
  neo4jImporter.importLocal(neo4jDirectory);
}","@Override public void run(){
  neo4jExporter.exportLocal(neo4jDirectory);
}",0.9466666666666668
190242,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}","public void select(Workspace workspace){
  hideTable();
  enableControls();
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.7874015748031497
190243,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    clear();
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.8487848784878488
190244,"private void clear(){
  tableScrollPane.setViewport(null);
}","private void clear(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  hideTable();
}",0.2339181286549707
190245,"private void refresh(){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    initEdgesView();
  }
}","private void refresh(){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    nodesButton.setSelected(true);
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    edgesButton.setSelected(true);
    initEdgesView();
  }
}",0.841897233201581
190246,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      hideTable();
      enableControls();
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9103406140216892
190247,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}","public void disable(){
  clear();
}",0.2229299363057325
190248,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}",0.9297297297297298
190249,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
}","public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.991150442477876
190250,"public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
}","public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
  clear();
}",0.9865361077111384
190251,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  clear();
}",0.8817204301075269
190252,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.9887733887733888
190253,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9886965231077408
190254,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
}","public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}",0.979890310786106
190255,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}",0.9297297297297298
190256,"private JMenuItem createMenuItemFromEdgesManipulator(final EdgesManipulator em){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(em.getName());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      em.execute();
    }
  }
);
  return menuItem;
}","private JMenuItem createMenuItemFromEdgesManipulator(final EdgesManipulator em){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(em.getName());
  menuItem.setIcon(em.getIcon());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      em.execute();
    }
  }
);
  return menuItem;
}",0.9478527607361964
190257,"private JMenuItem createMenuItemFromNodesManipulator(final NodesManipulator nm){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(nm.getName());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nm.execute();
    }
  }
);
  return menuItem;
}","private JMenuItem createMenuItemFromNodesManipulator(final NodesManipulator nm){
  JMenuItem menuItem=new JMenuItem();
  menuItem.setText(nm.getName());
  menuItem.setIcon(nm.getIcon());
  menuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nm.execute();
    }
  }
);
  return menuItem;
}",0.9478527607361964
190258,"private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  propertySheet=new PropertySheet();
  propertySheet.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(propertySheet,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    refreshButton.setEnabled(true);
  }
  PreviewUIController.findInstance();
  ratioSlider.addChangeListener(new ChangeListener(){
    NumberFormat formatter=NumberFormat.getPercentInstance();
    public void stateChanged(    ChangeEvent e){
      float val=ratioSlider.getValue() / 100f;
      if (val == 0f) {
        ratioLabel.setText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
      }
 else {
        ratioLabel.setText(formatter.format(val));
      }
    }
  }
);
  presetComboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      PreviewController pc=Lookup.getDefault().lookup(PreviewController.class);
      PreviewModel previewModel=pc.getModel();
      if (previewModel != null && presetComboBox.getSelectedItem() instanceof PreviewPreset) {
        if (previewModel.getCurrentPreset() != presetComboBox.getSelectedItem()) {
          pc.setCurrentPreset((PreviewPreset)presetComboBox.getSelectedItem());
          propertySheet.setNodes(new Node[]{new PreviewNode()});
        }
      }
    }
  }
);
  svgExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      VectorialFileExporterUI ui=Lookup.getDefault().lookup(VectorialFileExporterUI.class);
      ui.action();
    }
  }
);
  refreshModel();
}","private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  propertySheet=new PropertySheet();
  propertySheet.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(propertySheet,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    enableRefreshButton();
  }
  PreviewUIController.findInstance();
  ratioSlider.addChangeListener(new ChangeListener(){
    NumberFormat formatter=NumberFormat.getPercentInstance();
    public void stateChanged(    ChangeEvent e){
      float val=ratioSlider.getValue() / 100f;
      if (val == 0f) {
        ratioLabel.setText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
      }
 else {
        ratioLabel.setText(formatter.format(val));
      }
    }
  }
);
  presetComboBox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      PreviewController pc=Lookup.getDefault().lookup(PreviewController.class);
      PreviewModel previewModel=pc.getModel();
      if (previewModel != null && presetComboBox.getSelectedItem() instanceof PreviewPreset) {
        if (previewModel.getCurrentPreset() != presetComboBox.getSelectedItem()) {
          pc.setCurrentPreset((PreviewPreset)presetComboBox.getSelectedItem());
          propertySheet.setNodes(new Node[]{new PreviewNode()});
        }
      }
    }
  }
);
  svgExportButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      VectorialFileExporterUI ui=Lookup.getDefault().lookup(VectorialFileExporterUI.class);
      ui.action();
    }
  }
);
  refreshModel();
}",0.9934469200524246
190259,"public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
}","public void select(Workspace workspace){
  elementGroup.clearSelection();
  tableScrollPane.setViewportView(null);
  nodesButton.setEnabled(true);
  edgesButton.setEnabled(true);
  filterTextField.setEnabled(true);
  labelFilter.setEnabled(true);
  visibleGraphCheckbox.setEnabled(true);
  bannerPanel.setVisible(false);
  graphModel=gc.getModel();
  graphModel.addGraphListener(DataTableTopComponent.this);
  dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  refresh();
}",0.991150442477876
190260,"public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
}","public void unselect(Workspace workspace){
  graphModel.removeGraphListener(DataTableTopComponent.this);
  AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
  attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
  attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
  graphModel=null;
  dataTablesModel=null;
  clear();
}",0.9865361077111384
190261,"private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt){
  bannerPanel.setVisible(false);
  if (classDisplayed.equals(ClassDisplayed.NODE)) {
    initNodesView();
  }
 else   if (classDisplayed.equals(ClassDisplayed.EDGE)) {
    initEdgesView();
  }
}","private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt){
  refresh();
}",0.4804469273743016
190262,"public void close(Workspace workspace){
}","public void close(Workspace workspace){
  clear();
}",0.8817204301075269
190263,"private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
  bannerPanel.setVisible(false);
}","private DataTableTopComponent(){
  dynamicFiltering=NbPreferences.forModule(DataTableTopComponent.class).getBoolean(DATA_LABORATORY_DYNAMIC_FILTERING,true);
  taskExecutor=new ThreadPoolExecutor(0,1,10L,TimeUnit.SECONDS,new LinkedBlockingDeque<Runnable>(20),new ThreadFactory(){
    public Thread newThread(    Runnable r){
      return new Thread(r,""String_Node_Str"");
    }
  }
);
  initComponents();
  setName(NbBundle.getMessage(DataTableTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  Border b=(Border)UIManager.get(""String_Node_Str"");
  controlToolbar.setBorder(b);
  if (UIUtils.isAquaLookAndFeel()) {
    controlToolbar.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  initEvents();
  nodeTable=new NodeDataTable();
  edgeTable=new EdgeDataTable();
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() == null) {
    nodesButton.setEnabled(false);
    edgesButton.setEnabled(false);
    filterTextField.setEnabled(false);
    labelFilter.setEnabled(false);
    bannerPanel.setVisible(false);
    visibleGraphCheckbox.setEnabled(false);
  }
 else {
    refresh();
  }
  bannerPanel.setVisible(false);
}",0.9887733887733888
190264,"private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}","private void initEvents(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final GraphController gc=Lookup.getDefault().lookup(GraphController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new DataTablesModel());
      refresh();
    }
    public void select(    Workspace workspace){
      elementGroup.clearSelection();
      tableScrollPane.setViewportView(null);
      nodesButton.setEnabled(true);
      edgesButton.setEnabled(true);
      filterTextField.setEnabled(true);
      labelFilter.setEnabled(true);
      visibleGraphCheckbox.setEnabled(true);
      bannerPanel.setVisible(false);
      graphModel=gc.getModel();
      graphModel.addGraphListener(DataTableTopComponent.this);
      dataTablesModel=workspace.getLookup().lookup(DataTablesModel.class);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
      refresh();
    }
    public void unselect(    Workspace workspace){
      graphModel.removeGraphListener(DataTableTopComponent.this);
      AttributeModel attributeModel=workspace.getLookup().lookup(AttributeModel.class);
      attributeModel.getNodeTable().removeAttributeListener(DataTableTopComponent.this);
      attributeModel.getEdgeTable().removeAttributeListener(DataTableTopComponent.this);
      graphModel=null;
      dataTablesModel=null;
      clear();
    }
    public void close(    Workspace workspace){
      clear();
    }
    public void disable(){
      elementGroup.clearSelection();
      nodesButton.setEnabled(false);
      edgesButton.setEnabled(false);
      filterTextField.setEnabled(false);
      labelFilter.setEnabled(false);
      bannerPanel.setVisible(false);
      visibleGraphCheckbox.setEnabled(false);
      clear();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    dataTablesModel=pc.getCurrentWorkspace().getLookup().lookup(DataTablesModel.class);
    graphModel=gc.getModel();
    graphModel.addGraphListener(DataTableTopComponent.this);
    AttributeModel attributeModel=pc.getCurrentWorkspace().getLookup().lookup(AttributeModel.class);
    attributeModel.getNodeTable().addAttributeListener(DataTableTopComponent.this);
    attributeModel.getEdgeTable().addAttributeListener(DataTableTopComponent.this);
  }
  if (dynamicFiltering) {
    filterTextField.getDocument().addDocumentListener(new DocumentListener(){
      public void insertUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void removeUpdate(      DocumentEvent e){
        refreshFilter();
      }
      public void changedUpdate(      DocumentEvent e){
      }
    }
);
  }
 else {
    filterTextField.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        refreshFilter();
      }
    }
);
  }
  visibleGraphCheckbox.setSelected(visibleOnly);
  visibleGraphCheckbox.addItemListener(new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      visibleOnly=visibleGraphCheckbox.isSelected();
      if (classDisplayed.equals(ClassDisplayed.NODE)) {
        initNodesView();
      }
 else       if (classDisplayed.equals(ClassDisplayed.EDGE)) {
        initEdgesView();
      }
    }
  }
);
}",0.9886965231077408
190265,"public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
}","public void disable(){
  elementGroup.clearSelection();
  nodesButton.setEnabled(false);
  edgesButton.setEnabled(false);
  filterTextField.setEnabled(false);
  labelFilter.setEnabled(false);
  bannerPanel.setVisible(false);
  visibleGraphCheckbox.setEnabled(false);
  clear();
}",0.979890310786106
190266,"public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
}","public void initialize(Workspace workspace){
  workspace.add(new DataTablesModel());
  refresh();
}",0.9297297297297298
190267,"@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}","@Override public JMenuItem getMenuPresenter(){
  JMenu menu=new JMenu(NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str""));
  String localImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localImport=new JMenuItem(new AbstractAction(localImportMessage){
    public void actionPerformed(    ActionEvent e){
      JFileChooser fileChooser=new JFileChooser();
      fileChooser.setDialogTitle(""String_Node_Str"");
      Neo4jCustomDirectoryProvider.setEnabled(true);
      fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int dialogResult=fileChooser.showOpenDialog(null);
      if (dialogResult == JFileChooser.APPROVE_OPTION) {
        final File neo4jDirectory=fileChooser.getSelectedFile();
        final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
        LongTaskExecutor executor=new LongTaskExecutor(true);
        executor.execute((LongTask)neo4jImporter,new Runnable(){
          @Override public void run(){
            neo4jImporter.importLocal(neo4jDirectory);
          }
        }
);
      }
      Neo4jCustomDirectoryProvider.setEnabled(false);
    }
  }
);
  String remoteImportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteImport=new JMenuItem(new AbstractAction(remoteImportMessage){
    public void actionPerformed(    ActionEvent e){
      final Neo4jImporter neo4jImporter=Lookup.getDefault().lookup(Neo4jImporter.class);
      LongTaskExecutor executor=new LongTaskExecutor(true);
      executor.execute((LongTask)neo4jImporter,new Runnable(){
        @Override public void run(){
          neo4jImporter.importRemote(""String_Node_Str"");
        }
      }
);
    }
  }
);
  String localExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem localExport=new JMenuItem(new AbstractAction(localExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  String remoteExportMessage=NbBundle.getMessage(Neo4jImportExportAction.class,""String_Node_Str"");
  JMenuItem remoteExport=new JMenuItem(new AbstractAction(remoteExportMessage){
    public void actionPerformed(    ActionEvent e){
    }
  }
);
  menu.add(localImport);
  menu.add(remoteImport);
  menu.add(localExport);
  menu.add(remoteExport);
  return menu;
}",0.9256311121219012
190268,"@Override public void run(){
  neo4jImporter.importLocal(neo4jDirectory);
}","@Override public void run(){
  neo4jImporter.importRemote(""String_Node_Str"");
}",0.7792207792207793
190269,"public void refreshModel(StatisticsModel model){
  currentModel=model;
  if (model == null) {
    runButton.setText(RUN);
    runButton.setEnabled(false);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    currentStatistics=null;
    return;
  }
  runButton.setEnabled(true);
  if (model.isRunning(statisticsUI)) {
    runButton.setText(CANCEL);
    busyLabel.setVisible(true);
    busyLabel.setBusy(true);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
  }
 else {
    runButton.setText(RUN);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    currentStatistics=null;
    refreshResult(model);
  }
}","public void refreshModel(StatisticsModel model){
  currentModel=model;
  if (model == null) {
    runButton.setText(RUN);
    runButton.setEnabled(false);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    currentStatistics=null;
    return;
  }
  runButton.setEnabled(true);
  if (model.isRunning(statisticsUI)) {
    runButton.setText(CANCEL);
    busyLabel.setVisible(true);
    busyLabel.setBusy(true);
    reportButton.setEnabled(false);
    resultLabel.setText(""String_Node_Str"");
    if (currentStatistics == null) {
      currentStatistics=currentModel.getStatistics(statisticsUI);
    }
  }
 else {
    runButton.setText(RUN);
    busyLabel.setBusy(false);
    busyLabel.setVisible(false);
    currentStatistics=null;
    refreshResult(model);
  }
}",0.9318323952470294
190270,"public void run(){
  pStatistics.execute(graphModel,attributeModel);
  for (  StatisticsUI s : uis) {
    model.setRunning(s,false);
  }
  model.addStatistics(pStatistics);
}","public void run(){
  pStatistics.execute(graphModel,attributeModel);
  for (  StatisticsUI s : uis) {
    model.setRunning(s,false);
  }
}",0.8846153846153846
190271,"/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
    model.setRunning(s,true);
  }
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        for (        StatisticsUI s : uis) {
          model.setRunning(s,false);
        }
        model.addStatistics(pStatistics);
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    for (    StatisticsUI s : uis) {
      model.setRunning(s,false);
    }
    model.addStatistics(pStatistics);
  }
}","/** 
 * @param statistics
 */
public void execute(final Statistics pStatistics,LongTaskListener listener){
  final GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  final GraphModel graphModel=graphController.getModel();
  final AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
  StatisticsBuilder builder=getBuilder(pStatistics.getClass());
  final StatisticsUI[] uis=getUI(pStatistics);
  model.addStatistics(pStatistics);
  for (  StatisticsUI s : uis) {
    s.setup(pStatistics);
    model.setRunning(s,true);
  }
  if (pStatistics instanceof LongTask) {
    LongTaskExecutor executor=new LongTaskExecutor(true,builder.getName(),10);
    if (listener != null) {
      executor.setLongTaskListener(listener);
    }
    executor.execute((LongTask)pStatistics,new Runnable(){
      public void run(){
        pStatistics.execute(graphModel,attributeModel);
        for (        StatisticsUI s : uis) {
          model.setRunning(s,false);
        }
      }
    }
,builder.getName(),null);
  }
 else {
    pStatistics.execute(graphModel,attributeModel);
    if (listener != null) {
      listener.taskFinished(null);
    }
    for (    StatisticsUI s : uis) {
      model.setRunning(s,false);
    }
  }
}",0.95565749235474
190272,"protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}","protected void setSelectedLayout(Layout selectedLayout){
  Layout oldValue=this.selectedLayout;
  this.selectedLayout=selectedLayout;
  this.selectedBuilder=selectedLayout.getBuilder();
  if (oldValue != null) {
    saveProperties(oldValue);
  }
  if (selectedLayout != null) {
    loadProperties(selectedLayout);
  }
  firePropertyChangeEvent(SELECTED_LAYOUT,oldValue,selectedLayout);
}",0.92797783933518
190273,"public void setRunning(boolean running){
  this.running=running;
}","public void setRunning(boolean running){
  this.running=running;
synchronized (this.lock) {
    lock.notify();
  }
}",0.7252747252747253
190274,"@Override public void run(){
  while (running) {
    AbstractQueryImpl q;
    while ((q=rootQuery.getAndSet(null)) == null) {
      try {
synchronized (this.lock) {
          lock.wait();
        }
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    Query modifiedQuery=null;
    for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
      PropertyModifier pm=itr.next();
      itr.remove();
      pm.callback.setValue(pm.value);
      modifiedQuery=pm.query;
    }
    if (modifiedQuery != null) {
      model.updateParameters(modifiedQuery);
    }
    ProgressTicket progressTicket=null;
    ProgressTicketProvider progressTicketProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
    if (progressTicketProvider != null) {
      progressTicket=progressTicketProvider.createTicket(""String_Node_Str"",null);
      Progress.start(progressTicket);
    }
    if (filtering) {
      filter(q);
    }
 else {
      select(q);
    }
    Progress.finish(progressTicket);
  }
  Query q=null;
  for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
    PropertyModifier pm=itr.next();
    pm.callback.setValue(pm.value);
    q=pm.query;
  }
  modifiersMap.clear();
  if (q != null) {
    model.updateParameters(q);
  }
}","@Override public void run(){
  while (running) {
    AbstractQueryImpl q;
    while ((q=rootQuery.getAndSet(null)) == null && running) {
      try {
synchronized (this.lock) {
          lock.wait();
        }
      }
 catch (      InterruptedException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    if (!running) {
      return;
    }
    Query modifiedQuery=null;
    for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
      PropertyModifier pm=itr.next();
      itr.remove();
      pm.callback.setValue(pm.value);
      modifiedQuery=pm.query;
    }
    if (modifiedQuery != null) {
      model.updateParameters(modifiedQuery);
    }
    ProgressTicket progressTicket=null;
    ProgressTicketProvider progressTicketProvider=Lookup.getDefault().lookup(ProgressTicketProvider.class);
    if (progressTicketProvider != null) {
      progressTicket=progressTicketProvider.createTicket(""String_Node_Str"",null);
      Progress.start(progressTicket);
    }
    if (filtering) {
      filter(q);
    }
 else {
      select(q);
    }
    Progress.finish(progressTicket);
  }
  Query q=null;
  for (Iterator<PropertyModifier> itr=modifiersMap.values().iterator(); itr.hasNext(); ) {
    PropertyModifier pm=itr.next();
    pm.callback.setValue(pm.value);
    q=pm.query;
  }
  modifiersMap.clear();
  if (q != null) {
    model.updateParameters(q);
  }
}",0.9814612868047984
190275,"public void addStatistics(Statistics statistics){
  statisticsList.add(statistics);
  fireChangeEvent();
}","public void addStatistics(Statistics statistics){
  if (!statisticsList.contains(statistics)) {
    statisticsList.add(statistics);
    fireChangeEvent();
  }
}",0.7969924812030075
190276,"/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(""String_Node_Str"");
  AttributeColumn outCol=nodeTable.getColumn(""String_Node_Str"");
  if (inCol == null) {
    inCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree+=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}","/** 
 * @param graphModel
 */
public void execute(GraphModel graphModel,AttributeModel attributeModel){
  mIsCanceled=false;
  mAvgInDegree=mAvgOutDegree=0.0;
  AttributeTable nodeTable=attributeModel.getNodeTable();
  AttributeColumn inCol=nodeTable.getColumn(""String_Node_Str"");
  AttributeColumn outCol=nodeTable.getColumn(""String_Node_Str"");
  if (inCol == null) {
    inCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  if (outCol == null) {
    outCol=nodeTable.addColumn(""String_Node_Str"",""String_Node_Str"",AttributeType.INT,AttributeOrigin.COMPUTED,0);
  }
  DirectedGraph graph=graphModel.getDirectedGraphVisible();
  int i=0;
  graph.readLock();
  this.mGraphRevision=""String_Node_Str"" + graph.getNodeVersion() + ""String_Node_Str""+ graph.getEdgeVersion()+ ""String_Node_Str"";
  Progress.start(mProgress,graph.getNodeCount());
  for (  Node n : graph.getNodes()) {
    AttributeRow row=(AttributeRow)n.getNodeData().getAttributes();
    row.setValue(inCol,graph.getInDegree(n));
    row.setValue(outCol,graph.getOutDegree(n));
    mAvgInDegree+=graph.getInDegree(n);
    mAvgOutDegree+=graph.getOutDegree(n);
    if (mIsCanceled) {
      break;
    }
    i++;
    mProgress.progress(i);
  }
  mAvgDegree=mAvgInDegree + mAvgOutDegree;
  mAvgInDegree/=graph.getNodeCount();
  mAvgOutDegree/=graph.getNodeCount();
  mAvgDegree/=graph.getNodeCount();
  graph.readUnlockAll();
}",0.9877408056042032
190277,"private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 2 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    label=initial_split[1].trim();
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}","private void readVertex(String curLine,int num_vertices) throws Exception {
  String[] parts=null;
  int firstParts=-1;
  String index;
  String label=null;
  if (curLine.indexOf('""') != -1) {
    String[] initial_split=curLine.trim().split(""String_Node_Str"");
    if (initial_split.length < 1 || initial_split.length > 3) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.SEVERE));
    }
    index=initial_split[0].trim();
    if (initial_split.length > 1) {
      label=initial_split[1].trim();
    }
    if (initial_split.length == 3) {
      parts=initial_split[2].trim().split(""String_Node_Str"",-1);
    }
    firstParts=0;
  }
 else {
    parts=curLine.trim().split(""String_Node_Str"",-1);
    index=parts[0];
switch (parts.length) {
case 1:
      break;
case 2:
    label=parts[1];
  break;
case 3:
firstParts=1;
break;
case 4:
firstParts=2;
break;
}
}
int v_id=Integer.parseInt(index) - 1;
if (v_id >= num_vertices || v_id < 0) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",v_id,num_vertices),Issue.Level.SEVERE));
}
NodeDraft node=verticesArray[v_id];
if (label != null && label.length() > 0) {
node.setLabel(label);
}
if (firstParts != -1 && parts != null && parts.length >= firstParts + 2) {
for (int i=firstParts; i < parts.length; i++) {
if (i < parts.length - 1) {
try {
float x=Float.parseFloat(parts[i]);
float y=Float.parseFloat(parts[i + 1]);
node.setX(x);
node.setY(y);
i++;
}
 catch (Exception e) {
report.logIssue(new Issue(NbBundle.getMessage(ImporterPajek.class,""String_Node_Str"",reader.getLineNumber()),Issue.Level.WARNING));
}
}
if (parts[i].equals(""String_Node_Str"")) {
}
}
}
}",0.9864546525323912
190278,"public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    force.multiply((float)(1.0 / maxForce));
    getDisplacement().moveNode(data,force);
  }
  postAlgo();
}","public void goAlgo(){
  graph=graphModel.getHierarchicalGraphVisible();
  Node[] nodes=graph.getNodes().toArray();
  for (  Node n : nodes) {
    if (n.getNodeData().getLayoutData() == null || !(n.getNodeData().getLayoutData() instanceof ForceVector)) {
      n.getNodeData().setLayoutData(new ForceVector());
    }
  }
  QuadTree tree=QuadTree.buildTree(graph,getQuadTreeMaxLevel());
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.setTheta(getBarnesHutTheta());
  for (  Node node : nodes) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    ForceVector f=barnes.calculateForce(data,tree);
    layoutData.add(f);
  }
  for (  Edge e : graph.getEdgesAndMetaEdges()) {
    NodeData n1=e.getSource().getNodeData();
    NodeData n2=e.getTarget().getNodeData();
    ForceVector f1=n1.getLayoutData();
    ForceVector f2=n2.getLayoutData();
    ForceVector f=getEdgeForce().calculateForce(n1,n2);
    f1.add(f);
    f2.subtract(f);
  }
  energy0=energy;
  energy=0;
  double maxForce=1;
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getNorm();
    maxForce=Math.max(maxForce,force.getNorm());
  }
  for (  Node n : nodes) {
    NodeData data=n.getNodeData();
    if (!data.isFixed()) {
      ForceVector force=data.getLayoutData();
      force.multiply((float)(1.0 / maxForce));
      getDisplacement().moveNode(data,force);
    }
  }
  postAlgo();
}",0.9866117404737385
190279,"private void importXML(InputStream stream,Importer importer,final Container container){
  final Document document=getDocument(stream);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      if (t instanceof OutOfMemoryError) {
        return;
      }
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (xmlImporter.importData(document,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}","private void importXML(final InputStream stream,Importer importer,final Container container){
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      if (t instanceof OutOfMemoryError) {
        return;
      }
      t.printStackTrace();
      NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getCause().getMessage(),NotifyDescriptor.WARNING_MESSAGE);
      DialogDisplayer.getDefault().notify(msg);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        final Document document=getDocument(stream);
        if (xmlImporter.importData(document,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}",0.4880662445202143
190280,"private void importText(InputStream stream,Importer importer,final Container container){
  final LineNumberReader reader=getTextReader(stream);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (textImporter.importData(reader,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}","private void importText(InputStream stream,Importer importer,final Container container){
  final LineNumberReader reader=getTextReader(stream);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      t.printStackTrace();
      NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getCause().getMessage(),NotifyDescriptor.WARNING_MESSAGE);
      DialogDisplayer.getDefault().notify(msg);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        if (textImporter.importData(reader,container.getLoader(),report)) {
          finishImport(container);
        }
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + container.getSource(),errorHandler);
}",0.5111456713322965
190281,"public TextLine(String text){
  this.text=text;
}","public TextLine(String text,Rectangle2D bounds){
  this.text=text;
  this.bounds=bounds;
}",0.7050359712230215
190282,"public void setLine(String line){
  this.line=new TextLine(line);
}","public void setLine(String line){
  this.line=new TextLine(line,this.line.bounds);
}",0.8874172185430463
190283,"private void deleteNode(AbstractNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    dhns.getGraphStructure().getNodeDictionnary().remove(descendant);
  }
  treeStructure.deleteDescendantAndSelf(node);
}","private void deleteNode(AbstractNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,Tautology.instance); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
      view.decNodesEnabled(1);
    }
    edgeProcessor.clearEdges(descendant);
    if (node.countInViews() == 1) {
      dhns.getGraphStructure().getNodeDictionnary().remove(descendant);
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}",0.9572815533980582
190284,"public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget();
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget(view.getViewId());
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.9784366576819408
190285,"protected void setSyntax(StreamTokenizer tk){
  tk.resetSyntax();
  tk.eolIsSignificant(false);
  tk.slashStarComments(true);
  tk.slashSlashComments(true);
  tk.whitespaceChars(0,' ');
  tk.wordChars(' ' + 1,'\u00ff');
  tk.ordinaryChar('[');
  tk.ordinaryChar(']');
  tk.ordinaryChar('{');
  tk.ordinaryChar('}');
  tk.ordinaryChar('-');
  tk.ordinaryChar('>');
  tk.ordinaryChar('/');
  tk.ordinaryChar('*');
  tk.quoteChar('""');
  tk.whitespaceChars(';',';');
  tk.ordinaryChar('=');
}","protected void setSyntax(StreamTokenizer tk){
  tk.resetSyntax();
  tk.eolIsSignificant(false);
  tk.slashStarComments(true);
  tk.slashSlashComments(true);
  tk.whitespaceChars(0,' ');
  tk.wordChars(' ' + 1,'\u00ff');
  tk.ordinaryChar('[');
  tk.ordinaryChar(']');
  tk.ordinaryChar('{');
  tk.ordinaryChar('}');
  tk.ordinaryChar('-');
  tk.ordinaryChar('>');
  tk.ordinaryChar('/');
  tk.ordinaryChar('*');
  tk.ordinaryChar(',');
  tk.quoteChar('""');
  tk.whitespaceChars(';',';');
  tk.ordinaryChar('=');
}",0.9760479041916168
190286,"public Node getPredecessor(Node node){
  return predecessors.get(node).getSource();
}","public Node getPredecessor(Node node){
  Edge edge=predecessors.get(node);
  if (edge != null) {
    if (edge.getSource() != node) {
      return edge.getSource();
    }
 else {
      return edge.getTarget();
    }
  }
  return null;
}",0.46875
190287,"public void compute(){
  graph.readLock();
  Set<Node> nodes=new HashSet<Node>();
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
    nodes.add(node);
    nodeCount++;
  }
  distances.put(sourceNode,0d);
  while (!nodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : nodes) {
      Double dist=distances.get(k);
      if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    Node currentNode=minDistanceNode;
    nodes.remove(currentNode);
    for (    Edge edge : graph.getEdges(currentNode)) {
      Node neighbor=graph.getOpposite(currentNode,edge);
      if (distances.get(neighbor).equals(Double.POSITIVE_INFINITY)) {
        double dist=edgeWeight(edge) + distances.get(currentNode);
        distances.put(neighbor,dist);
        maxDistance=Math.max(maxDistance,dist);
      }
 else {
        double testDistance=distances.get(currentNode) + edgeWeight(edge);
        if (testDistance < distances.get(neighbor)) {
          distances.put(neighbor,testDistance);
          maxDistance=Math.max(maxDistance,testDistance);
        }
      }
    }
  }
  graph.readUnlock();
}","public void compute(){
  graph.readLock();
  Set<Node> nodes=new HashSet<Node>();
  int nodeCount=0;
  for (  Node node : graph.getNodes()) {
    distances.put(node,Double.POSITIVE_INFINITY);
    nodes.add(node);
    nodeCount++;
  }
  distances.put(sourceNode,0d);
  while (!nodes.isEmpty()) {
    Double minDistance=Double.POSITIVE_INFINITY;
    Node minDistanceNode=null;
    for (    Node k : nodes) {
      Double dist=distances.get(k);
      if (dist.compareTo(minDistance) < 0) {
        minDistance=dist;
        minDistanceNode=k;
      }
    }
    Node currentNode=minDistanceNode;
    nodes.remove(currentNode);
    for (    Edge edge : graph.getEdges(currentNode)) {
      Node neighbor=graph.getOpposite(currentNode,edge);
      double dist=edgeWeight(edge) + distances.get(currentNode);
      if (distances.get(neighbor).equals(Double.POSITIVE_INFINITY)) {
        distances.put(neighbor,dist);
        maxDistance=Math.max(maxDistance,dist);
        predecessors.put(neighbor,edge);
      }
 else {
        if (dist < distances.get(neighbor)) {
          distances.put(neighbor,dist);
          maxDistance=Math.max(maxDistance,dist);
          predecessors.put(neighbor,edge);
        }
      }
    }
  }
  graph.readUnlock();
}",0.8654690618762475
190288,"public DijkstraShortestPathAlgorithm(Graph graph,Node sourceNode){
  super(sourceNode);
  this.graph=graph;
}","public DijkstraShortestPathAlgorithm(Graph graph,Node sourceNode){
  super(sourceNode);
  this.graph=graph;
  predecessors=new HashMap<Node,Edge>();
}",0.8416988416988417
190289,"/** 
 * Returns the Processing font related to the given classic font.
 * @param font  a classic font
 * @return      the related Processing font
 */
private PFont getPFont(Font font){
  if (fontMap.containsKey(font)) {
    return fontMap.get(font);
  }
  PFont pFont=createFont(font);
  fontMap.put(font,pFont);
  return pFont;
}","/** 
 * Returns the Processing font related to the given classic font.
 * @param font  a classic font
 * @return      the related Processing font
 */
private PFont getPFont(Font font){
  String fontName=font.getName();
  if (fontMap.containsKey(fontName)) {
    return fontMap.get(fontName);
  }
  PFont pFont=createFont(font);
  fontMap.put(fontName,pFont);
  return pFont;
}",0.9348441926345608
190290,"public void renderEdgeLabel(EdgeLabel label){
  textFont(getPFont(label.getFont()));
  textAlign(CENTER,BASELINE);
  pushMatrix();
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  translate(label.getPosition().getX(),label.getPosition().getY());
  rotate(label.getAngle());
  text(label.getValue(),0,0);
  popMatrix();
}","public void renderEdgeLabel(EdgeLabel label){
  textFont(label.getFont());
  textAlign(CENTER,BASELINE);
  pushMatrix();
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  translate(label.getPosition().getX(),label.getPosition().getY());
  rotate(label.getAngle());
  text(label.getValue(),0,0);
  popMatrix();
}",0.9608938547486032
190291,"/** 
 * Refreshes the preview using the current graph from the preview controller.
 */
public void refresh(){
  PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel model=controller.getModel();
  fontMap.clear();
  if (model != null) {
    uniEdgeMiniLabelFont=getPFont(model.getUniEdgeSupervisor().getMiniLabelFont());
    biEdgeMiniLabelFont=getPFont(model.getBiEdgeSupervisor().getMiniLabelFont());
  }
  redraw();
}","/** 
 * Refreshes the preview using the current graph from the preview controller.
 */
public void refresh(){
  PreviewController controller=Lookup.getDefault().lookup(PreviewController.class);
  PreviewModel model=controller.getModel();
  if (model != null) {
    uniEdgeMiniLabelFont=getPFont(model.getUniEdgeSupervisor().getMiniLabelFont());
    biEdgeMiniLabelFont=getPFont(model.getBiEdgeSupervisor().getMiniLabelFont());
  }
  redraw();
}",0.9790518191841234
190292,"public void renderNodeLabel(NodeLabel label){
  textFont(getPFont(label.getFont()));
  textAlign(CENTER,CENTER);
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  text(label.getValue(),label.getPosition().getX(),label.getPosition().getY() - (textAscent() + textDescent()) * 0.1f);
}","public void renderNodeLabel(NodeLabel label){
  textFont(label.getFont());
  textAlign(CENTER,CENTER);
  fill(label.getColor().getRed(),label.getColor().getGreen(),label.getColor().getBlue());
  text(label.getValue(),label.getPosition().getX(),label.getPosition().getY() - (textAscent() + textDescent()) * 0.1f);
}",0.9561128526645768
190293,"/** 
 * Creates a Processing font from a classic font.
 * @param font  a font to transform
 * @return      a Processing font
 */
private PFont createFont(Font font){
  return createFont(font.getName(),font.getSize());
}","/** 
 * Creates a Processing font from a classic font.
 * @param font  a font to transform
 * @return      a Processing font
 */
private PFont createFont(Font font){
  return createFont(font.getName(),1);
}",0.9647058823529412
190294,"public void applyPreset(PreviewPreset preset){
  Map<String,String> propertiesMap=preset.getProperties();
  for (  Property p : getPropertiesMap().values()) {
    try {
      PropertyEditor editor=p.getPropertyEditor();
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(p.getValueType());
      }
      if (editor != null) {
        String valueStr=propertiesMap.get(p.getName());
        if (valueStr != null && !valueStr.isEmpty()) {
          editor.setAsText(valueStr);
          Object value=editor.getValue();
          if (value != null) {
            p.setValue(value);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void applyPreset(PreviewPreset preset){
  Map<String,String> propertiesMap=preset.getProperties();
  for (  Property p : getPropertiesMap().values()) {
    try {
      PropertyEditor editor=p.getPropertyEditor();
      if (editor == null) {
        editor=PropertyEditorManager.findEditor(p.getValueType());
      }
      if (editor != null) {
        String valueStr=propertiesMap.get(p.getName());
        if (valueStr != null && !valueStr.isEmpty()) {
          editor.setAsText(valueStr);
          if (p.getValueType().equals(Font.class)) {
            editor.setValue(Font.decode(valueStr));
          }
          Object value=editor.getValue();
          if (value != null) {
            p.setValue(value);
          }
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9233791748526524
190295,"public void actionPerformed(ActionEvent e){
  select(tool);
  propertiesBar.select(toolUI.getPropertiesBar(tool));
}","public void actionPerformed(ActionEvent e){
  if (tool == currentTool) {
    toolbar.clearSelection();
    unselect();
  }
 else {
    select(tool);
    propertiesBar.select(toolUI.getPropertiesBar(tool));
  }
}",0.6238532110091743
190296,"public void stateChanged(ChangeEvent e){
  SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
  if (selectionManager.isRectangleSelection() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
    toolbar.clearSelection();
    unselect();
  }
}","public void stateChanged(ChangeEvent e){
  SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
  if (selectionManager.isRectangleSelection() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
    toolbar.clearSelection();
    unselect();
  }
 else   if (selectionManager.isDraggingEnabled() && currentTool != null) {
    toolbar.clearSelection();
    unselect();
  }
}",0.8748748748748749
190297,"public JComponent getToolbar(){
  HashMap<ToolUI,Tool> toolMap=new HashMap<ToolUI,Tool>();
  List<ToolUI> toolsUI=new ArrayList<ToolUI>();
  for (  Tool tool : tools) {
    ToolUI ui=tool.getUI();
    if (ui != null) {
      toolsUI.add(ui);
      toolMap.put(ui,tool);
    }
  }
  Collections.sort(toolsUI,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Integer p1=((ToolUI)o1).getPosition();
      Integer p2=((ToolUI)o2).getPosition();
      return p1.compareTo(p2);
    }
  }
);
  final Toolbar toolbar=new Toolbar();
  for (  final ToolUI toolUI : toolsUI) {
    final Tool tool=toolMap.get(toolUI);
    JToggleButton btn;
    if (toolUI.getIcon() != null) {
      btn=new JToggleButton(toolUI.getIcon());
    }
 else {
      btn=new JToggleButton(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    }
    btn.setToolTipText(toolUI.getName() + ""String_Node_Str"" + toolUI.getDescription());
    btn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        select(tool);
        propertiesBar.select(toolUI.getPropertiesBar(tool));
      }
    }
);
    toolbar.add(btn);
  }
  VizController.getInstance().getSelectionManager().addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
      if (selectionManager.isRectangleSelection() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
        toolbar.clearSelection();
        unselect();
      }
    }
  }
);
  return toolbar;
}","public JComponent getToolbar(){
  HashMap<ToolUI,Tool> toolMap=new HashMap<ToolUI,Tool>();
  List<ToolUI> toolsUI=new ArrayList<ToolUI>();
  for (  Tool tool : tools) {
    ToolUI ui=tool.getUI();
    if (ui != null) {
      toolsUI.add(ui);
      toolMap.put(ui,tool);
    }
  }
  Collections.sort(toolsUI,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Integer p1=((ToolUI)o1).getPosition();
      Integer p2=((ToolUI)o2).getPosition();
      return p1.compareTo(p2);
    }
  }
);
  final Toolbar toolbar=new Toolbar();
  for (  final ToolUI toolUI : toolsUI) {
    final Tool tool=toolMap.get(toolUI);
    JToggleButton btn;
    if (toolUI.getIcon() != null) {
      btn=new JToggleButton(toolUI.getIcon());
    }
 else {
      btn=new JToggleButton(new ImageIcon(getClass().getResource(""String_Node_Str"")));
    }
    btn.setToolTipText(toolUI.getName() + ""String_Node_Str"" + toolUI.getDescription());
    btn.addActionListener(new ActionListener(){
      public void actionPerformed(      ActionEvent e){
        if (tool == currentTool) {
          toolbar.clearSelection();
          unselect();
        }
 else {
          select(tool);
          propertiesBar.select(toolUI.getPropertiesBar(tool));
        }
      }
    }
);
    toolbar.add(btn);
  }
  VizController.getInstance().getSelectionManager().addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      SelectionManager selectionManager=VizController.getInstance().getSelectionManager();
      if (selectionManager.isRectangleSelection() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isSelectionEnabled() && currentTool != null && currentTool.getSelectionType() == ToolSelectionType.NONE) {
        toolbar.clearSelection();
        unselect();
      }
 else       if (selectionManager.isDraggingEnabled() && currentTool != null) {
        toolbar.clearSelection();
        unselect();
      }
    }
  }
);
  return toolbar;
}",0.9116719242902208
190298,"public void setDraggingMouseSelection(){
  engine.setRectangleSelection(false);
  vizConfig.setDraggingEnable(true);
  vizConfig.setSelectionEnable(true);
  vizConfig.setCustomSelection(false);
  this.blocked=false;
  fireChangeEvent();
}","public void setDraggingMouseSelection(){
  engine.setRectangleSelection(false);
  vizConfig.setDraggingEnable(true);
  vizConfig.setMouseSelectionUpdateWhileDragging(false);
  vizConfig.setSelectionEnable(true);
  vizConfig.setCustomSelection(false);
  this.blocked=false;
  fireChangeEvent();
}",0.8930581613508443
190299,"public void renameProject(Project project,final String name){
  project.getLookup().lookup(ProjectInformationImpl.class);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle();
      title=title.substring(0,title.indexOf('-') - 1);
      title+=""String_Node_Str"" + name;
      frame.setTitle(title);
    }
  }
);
}","public void renameProject(Project project,final String name){
  project.getLookup().lookup(ProjectInformationImpl.class).setName(name);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle();
      title=title.substring(0,title.indexOf('-') - 1);
      title+=""String_Node_Str"" + name;
      frame.setTitle(title);
    }
  }
);
}",0.9841628959276018
190300,"public void save(Project project){
  ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);
  if (info != null) {
    if (!titleTextField.getText().isEmpty() && !titleTextField.getText().equals(info.getName())) {
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      pc.renameProject(project,titleTextField.getText());
    }
  }
  ProjectMetaData metaData=project.getLookup().lookup(ProjectMetaData.class);
  if (metaData != null) {
    metaData.setTitle(nameTextField.getText());
    metaData.setAuthor(authorTextField.getText());
    metaData.setKeywords(keywordsTextField.getText());
    metaData.setDescription(descriptionTextArea.getText());
  }
}","public void save(Project project){
  ProjectInformation info=project.getLookup().lookup(ProjectInformation.class);
  if (info != null) {
    if (!nameTextField.getText().isEmpty() && !nameTextField.getText().equals(info.getName())) {
      ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
      pc.renameProject(project,nameTextField.getText());
    }
  }
  ProjectMetaData metaData=project.getLookup().lookup(ProjectMetaData.class);
  if (metaData != null) {
    metaData.setTitle(titleTextField.getText());
    metaData.setAuthor(authorTextField.getText());
    metaData.setKeywords(keywordsTextField.getText());
    metaData.setDescription(descriptionTextArea.getText());
  }
}",0.980169971671388
190301,"public ProjectControllerImpl(){
  longTaskExecutor=new LongTaskExecutor(true,""String_Node_Str"");
  longTaskExecutor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      unlockProjectActions();
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
);
  longTaskExecutor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      unlockProjectActions();
    }
  }
);
  listeners=new ArrayList<WorkspaceListener>();
  listeners.addAll(Lookup.getDefault().lookupAll(WorkspaceListener.class));
  saveProject=false;
  saveAsProject=false;
  projectProperties=false;
  closeProject=false;
  newWorkspace=false;
  deleteWorkspace=false;
  cleanWorkspace=false;
  duplicateWorkspace=false;
}","public ProjectControllerImpl(){
  longTaskExecutor=new LongTaskExecutor(true,""String_Node_Str"");
  longTaskExecutor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      unlockProjectActions();
      if (t instanceof GephiFormatException && t.getCause() == null) {
        NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
        DialogDisplayer.getDefault().notify(msg);
      }
      Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
    }
  }
);
  longTaskExecutor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      unlockProjectActions();
    }
  }
);
  listeners=new ArrayList<WorkspaceListener>();
  listeners.addAll(Lookup.getDefault().lookupAll(WorkspaceListener.class));
  saveProject=false;
  saveAsProject=false;
  projectProperties=false;
  closeProject=false;
  newWorkspace=false;
  deleteWorkspace=false;
  cleanWorkspace=false;
  duplicateWorkspace=false;
}",0.870026525198939
190302,"public void fatalError(Throwable t){
  unlockProjectActions();
  Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
}","public void fatalError(Throwable t){
  unlockProjectActions();
  if (t instanceof GephiFormatException && t.getCause() == null) {
    NotifyDescriptor.Message msg=new NotifyDescriptor.Message(t.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notify(msg);
  }
  Logger.getLogger(""String_Node_Str"").log(Level.WARNING,""String_Node_Str"",t.getCause());
}",0.4037383177570093
190303,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}",0.9976575809199318
190304,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null && fileFilter != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}",0.9975429975429976
190305,"public boolean canFree(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}","public boolean canFree(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}",0.8797169811320755
190306,"public boolean canSettle(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (!nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}","public boolean canSettle(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    if (!nodeData.isFixed()) {
      return true;
    }
  }
  return false;
}",0.8805620608899297
190307,"public boolean canUngroup(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canUngroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7559808612440191
190308,"public boolean canGroup(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canGroup(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7536231884057971
190309,"public boolean canExpand(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}","public boolean canExpand(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getDescendantCount(node) > 0) {
      return true;
    }
  }
  return false;
}",0.8986083499005965
190310,"public boolean canDelete(){
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}","public boolean canDelete(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  return selectedNodeModels.length >= 1;
}",0.7548076923076923
190311,"public boolean canContract(){
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}","public boolean canContract(){
  GraphModel graphModel=graphController.getModel();
  if (graphModel == null) {
    return false;
  }
  this.graph=graphController.getModel().getHierarchicalGraphVisible();
  ModelImpl[] selectedNodeModels=engine.getSelectedObjects(AbstractEngine.CLASS_NODE);
  for (  ModelImpl metaModelImpl : selectedNodeModels) {
    NodeData nodeData=(NodeData)metaModelImpl.getObj();
    Node node=nodeData.getNode(graph.getView().getViewId());
    if (graph.getParent(node) != null) {
      return true;
    }
  }
  return false;
}",0.898
190312,"/** 
 * Set the default error handler. Use error handlers to get errors and exceptions thrown during tasks execution.
 * @param errorHandler the default error handler
 */
public void setDefaultErrorHandler(LongTaskErrorHandler errorHandler){
  if (errorHandler != null) {
    this.errorHandler=errorHandler;
  }
}","/** 
 * Set the default error handler. Use error handlers to get errors and exceptions thrown during tasks execution.
 * @param errorHandler the default error handler
 */
public void setDefaultErrorHandler(LongTaskErrorHandler errorHandler){
  if (errorHandler != null) {
    this.defaultErrorHandler=errorHandler;
  }
}",0.985781990521327
190313,"public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        edgeMap.remove(opposite.getId());
        edgeSourceTargetMap.remove(oppositekey);
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o1.getHeight()).compareTo(o2.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
}","public void closeLoader(){
  if (parameters.getEdgeDefault().equals(EdgeDefault.UNDIRECTED)) {
    for (Iterator<EdgeDraftImpl> itr=edgeMap.values().iterator(); itr.hasNext(); ) {
      EdgeDraftImpl edge=itr.next();
      String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
      EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
      if (opposite != null) {
        itr.remove();
        edgeSourceTargetMap.remove(edge.getSource().getId() + ""String_Node_Str"" + edge.getTarget().getId());
      }
    }
  }
 else   if (parameters.getEdgeDefault().equals(EdgeDefault.MIXED)) {
    for (    EdgeDraftImpl edge : edgeMap.values().toArray(new EdgeDraftImpl[0])) {
      if (edge.getType() == null) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
      if (edge.getType().equals(EdgeDraft.EdgeType.UNDIRECTED)) {
        String oppositekey=edge.getTarget().getId() + ""String_Node_Str"" + edge.getSource().getId();
        EdgeDraftImpl opposite=edgeSourceTargetMap.get(oppositekey);
        if (opposite != null) {
          edgeMap.remove(opposite.getId());
          edgeSourceTargetMap.remove(oppositekey);
        }
      }
    }
  }
  LinkedHashMap<String,NodeDraftImpl> sortedNodeMap=new LinkedHashMap<String,NodeDraftImpl>();
  ArrayList<NodeDraftImpl> sortedMapValues=new ArrayList<NodeDraftImpl>(nodeMap.values());
  Collections.sort(sortedMapValues,new Comparator<NodeDraftImpl>(){
    public int compare(    NodeDraftImpl o1,    NodeDraftImpl o2){
      return new Integer(o1.getHeight()).compareTo(o2.getHeight());
    }
  }
);
  for (  NodeDraftImpl n : sortedMapValues) {
    sortedNodeMap.put(n.getId(),n);
  }
  nodeMap=sortedNodeMap;
}",0.6032219570405728
190314,"public void updateWorld(){
  cacheMarker++;
  GraphModel graphModel=controller.getModel();
  if (graphModel == null) {
    engine.worldUpdated(cacheMarker);
    return;
  }
  HierarchicalGraph graph;
  if (graphModel.isDirected()) {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else   if (graphModel.isUndirected()) {
    undirected=true;
    graph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
 else   if (graphModel.isMixed()) {
    undirected=false;
    graph=graphModel.getHierarchicalMixedGraphVisible();
  }
 else {
    return;
  }
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  graphView=graph.getView().getViewId();
  ModelClass[] object3dClasses=engine.getModelClasses();
  graph.readLock();
  ModelClass nodeClass=object3dClasses[AbstractEngine.CLASS_NODE];
  if (nodeClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updateNodes(graph);
    nodeClass.setCacheMarker(cacheMarker);
  }
  ModelClass edgeClass=object3dClasses[AbstractEngine.CLASS_EDGE];
  if (edgeClass.isEnabled() && (graph.getEdgeVersion() > edgeVersion || modeManager.requireModeChange())) {
    updateEdges(graph);
    updateMetaEdges(graph);
    edgeClass.setCacheMarker(cacheMarker);
    if (!undirected && vizConfig.isShowArrows()) {
      object3dClasses[AbstractEngine.CLASS_ARROW].setCacheMarker(cacheMarker);
    }
  }
  ModelClass potatoClass=object3dClasses[AbstractEngine.CLASS_POTATO];
  if (potatoClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updatePotatoes(graph);
    potatoClass.setCacheMarker(cacheMarker);
  }
  nodeVersion=graph.getNodeVersion();
  edgeVersion=graph.getEdgeVersion();
  graph.readUnlock();
  engine.worldUpdated(cacheMarker);
}","public void updateWorld(){
  cacheMarker++;
  GraphModel graphModel=controller.getModel();
  if (graphModel == null) {
    engine.worldUpdated(cacheMarker);
    return;
  }
  HierarchicalGraph graph;
  if (graphModel.isDirected()) {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
 else   if (graphModel.isUndirected()) {
    undirected=true;
    graph=graphModel.getHierarchicalUndirectedGraphVisible();
  }
 else   if (graphModel.isMixed()) {
    undirected=false;
    graph=graphModel.getHierarchicalMixedGraphVisible();
  }
 else {
    undirected=false;
    graph=graphModel.getHierarchicalDirectedGraphVisible();
  }
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  graphView=graph.getView().getViewId();
  ModelClass[] object3dClasses=engine.getModelClasses();
  graph.readLock();
  ModelClass nodeClass=object3dClasses[AbstractEngine.CLASS_NODE];
  if (nodeClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updateNodes(graph);
    nodeClass.setCacheMarker(cacheMarker);
  }
  ModelClass edgeClass=object3dClasses[AbstractEngine.CLASS_EDGE];
  if (edgeClass.isEnabled() && (graph.getEdgeVersion() > edgeVersion || modeManager.requireModeChange())) {
    updateEdges(graph);
    updateMetaEdges(graph);
    edgeClass.setCacheMarker(cacheMarker);
    if (!undirected && vizConfig.isShowArrows()) {
      object3dClasses[AbstractEngine.CLASS_ARROW].setCacheMarker(cacheMarker);
    }
  }
  ModelClass potatoClass=object3dClasses[AbstractEngine.CLASS_POTATO];
  if (potatoClass.isEnabled() && (graph.getNodeVersion() > nodeVersion || modeManager.requireModeChange())) {
    updatePotatoes(graph);
    potatoClass.setCacheMarker(cacheMarker);
  }
  nodeVersion=graph.getNodeVersion();
  edgeVersion=graph.getEdgeVersion();
  graph.readUnlock();
  engine.worldUpdated(cacheMarker);
}",0.9785752544188536
190315,"public boolean requireUpdate(){
  if (graph == null) {
    GraphModel graphModel=controller.getModel();
    if (graphModel != null) {
      if (!graphModel.isDirected() && !graphModel.isUndirected() && !graphModel.isMixed()) {
        return false;
      }
 else {
        graph=graphModel.getHierarchicalGraphVisible();
      }
    }
  }
  if (graph != null) {
    if (graph.getGraphModel().getVisibleView().getViewId() != graphView) {
      reset();
    }
    return graph.getNodeVersion() > nodeVersion || graph.getEdgeVersion() > edgeVersion;
  }
  return false;
}","public boolean requireUpdate(){
  if (graph == null) {
    GraphModel graphModel=controller.getModel();
    if (graphModel != null) {
      graph=graphModel.getHierarchicalGraphVisible();
    }
  }
  if (graph != null) {
    if (graph.getGraphModel().getVisibleView().getViewId() != graphView) {
      reset();
    }
    return graph.getNodeVersion() > nodeVersion || graph.getEdgeVersion() > edgeVersion;
  }
  return false;
}",0.7698492462311558
190316,"public Element writeXML(Document document,Workspace workspace){
  Dhns dhns=workspace.getLookup().lookup(Dhns.class);
  DHNSSerializer serializer=new DHNSSerializer();
  return serializer.writeDhns(document,dhns);
}","public Element writeXML(Document document,Workspace workspace){
  DhnsGraphController graphController=Lookup.getDefault().lookup(DhnsGraphController.class);
  Dhns dhns=(Dhns)graphController.getModel(workspace);
  DHNSSerializer serializer=new DHNSSerializer();
  return serializer.writeDhns(document,dhns);
}",0.6679389312977099
190317,"private synchronized void refreshModel(){
  refreshSelectedRankings();
  Ranking[] rankings=new Ranking[0];
  if (modelUI.getRanking() == RankingUIModel.NODE_RANKING) {
    rankings=model.getNodeRanking();
  }
 else {
    rankings=model.getEdgeRanking();
  }
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  for (  Ranking r : rankings) {
    String elem=r.toString();
    comboBoxModel.addElement(elem);
    if (selectedRanking != null && selectedRanking.toString().equals(r.toString())) {
      comboBoxModel.setSelectedItem(elem);
    }
  }
  rankingComboBox.setModel(comboBoxModel);
  if (centerPanel != null) {
    remove(centerPanel);
  }
  applyButton.setVisible(false);
  splineButton.setVisible(false);
  if (selectedRanking != null) {
    Transformer transformer=getSelectedTransformer();
    TransformerUI transformerUI;
    if (transformer != null) {
      transformerUI=getUIForTransformer(transformer);
    }
 else {
      transformerUI=getUIForTransformer();
      if (transformerUI != null) {
        transformer=transformerUI.buildTransformer(selectedRanking);
        addTransformer(transformer);
      }
    }
    centerPanel=transformerUI.getPanel(transformer,selectedRanking);
    centerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5,5,0,5),BorderFactory.createEtchedBorder()));
    centerPanel.setOpaque(false);
    add(centerPanel,BorderLayout.CENTER);
    applyButton.setVisible(true);
    splineButton.setVisible(true);
  }
  revalidate();
  repaint();
}","public synchronized void refreshModel(){
  refreshSelectedRankings();
  Ranking[] rankings=new Ranking[0];
  if (modelUI.getRanking() == RankingUIModel.NODE_RANKING) {
    rankings=model.getNodeRanking();
  }
 else {
    rankings=model.getEdgeRanking();
  }
  DefaultComboBoxModel comboBoxModel=new DefaultComboBoxModel();
  comboBoxModel.addElement(NO_SELECTION);
  comboBoxModel.setSelectedItem(NO_SELECTION);
  for (  Ranking r : rankings) {
    String elem=r.toString();
    comboBoxModel.addElement(elem);
    if (selectedRanking != null && selectedRanking.toString().equals(r.toString())) {
      comboBoxModel.setSelectedItem(elem);
    }
  }
  rankingComboBox.setModel(comboBoxModel);
  if (centerPanel != null) {
    remove(centerPanel);
  }
  applyButton.setVisible(false);
  splineButton.setVisible(false);
  if (selectedRanking != null) {
    Transformer transformer=getSelectedTransformer();
    TransformerUI transformerUI;
    if (transformer != null) {
      transformerUI=getUIForTransformer(transformer);
    }
 else {
      transformerUI=getUIForTransformer();
      if (transformerUI != null) {
        transformer=transformerUI.buildTransformer(selectedRanking);
        addTransformer(transformer);
      }
    }
    centerPanel=transformerUI.getPanel(transformer,selectedRanking);
    centerPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5,5,0,5),BorderFactory.createEtchedBorder()));
    centerPanel.setOpaque(false);
    add(centerPanel,BorderLayout.CENTER);
    applyButton.setVisible(true);
    splineButton.setVisible(true);
  }
  revalidate();
  repaint();
}",0.9966122574684324
190318,"private void initEvents(){
  model=new RankingUIModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new RankingUIModel());
    }
    public void select(    Workspace workspace){
      enabled=true;
      RankingUIModel newModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (newModel != null) {
        model.loadModel(newModel);
      }
      refreshModel();
    }
    public void unselect(    Workspace workspace){
      RankingUIModel oldModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (oldModel != null) {
        workspace.remove(oldModel);
      }
      workspace.add(model.saveModel());
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      enabled=false;
      refreshModel();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    RankingUIModel newModel=pc.getCurrentWorkspace().getLookup().lookup(RankingUIModel.class);
    if (newModel != null) {
      model.loadModel(newModel);
    }
  }
}","private void initEvents(){
  model=new RankingUIModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new RankingUIModel());
    }
    public void select(    Workspace workspace){
      enabled=true;
      RankingUIModel newModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (newModel != null) {
        model.loadModel(newModel);
      }
      refreshModel();
    }
    public void unselect(    Workspace workspace){
      RankingUIModel oldModel=workspace.getLookup().lookup(RankingUIModel.class);
      if (oldModel != null) {
        workspace.remove(oldModel);
      }
      workspace.add(model.saveModel());
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      enabled=false;
      refreshModel();
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    enabled=true;
    RankingUIModel newModel=pc.getCurrentWorkspace().getLookup().lookup(RankingUIModel.class);
    if (newModel != null) {
      model.loadModel(newModel);
    }
  }
}",0.9921875
190319,"private RankingTopComponent(){
  setName(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  rankingModel=rankingController.getRankingModel();
  initEvents();
  initComponents();
  initSouth();
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  refreshModel();
}","private RankingTopComponent(){
  setName(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(RankingTopComponent.class,""String_Node_Str""));
  setIcon(ImageUtilities.loadImage(ICON_PATH));
  RankingController rankingController=Lookup.getDefault().lookup(RankingController.class);
  rankingModel=rankingController.getRankingModel();
  initEvents();
  initComponents();
  initSouth();
  if (UIUtils.isAquaLookAndFeel()) {
    mainPanel.setBackground(UIManager.getColor(""String_Node_Str""));
  }
  refreshModel();
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    ((RankingChooser)rankingChooser).refreshModel();
  }
}",0.8613026819923372
190320,"public RankingModelImpl(){
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
      edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
      nodeColumnsResult.addLookupListener(RankingModelImpl.this);
      edgeColumnsResult.addLookupListener(RankingModelImpl.this);
    }
    public void unselect(    Workspace workspace){
      nodeColumnsResult.removeLookupListener(RankingModelImpl.this);
      edgeColumnsResult.removeLookupListener(RankingModelImpl.this);
      nodeColumnsResult=null;
      edgeColumnsResult=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
    }
  }
);
}","public RankingModelImpl(){
  final ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  final AttributeController ac=Lookup.getDefault().lookup(AttributeController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
      edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
      nodeColumnsResult.addLookupListener(RankingModelImpl.this);
      edgeColumnsResult.addLookupListener(RankingModelImpl.this);
    }
    public void unselect(    Workspace workspace){
      nodeColumnsResult.removeLookupListener(RankingModelImpl.this);
      edgeColumnsResult.removeLookupListener(RankingModelImpl.this);
      nodeColumnsResult=null;
      edgeColumnsResult=null;
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    nodeColumnsResult=ac.getModel().getNodeTable().getLookup().lookupResult(AttributeColumn.class);
    edgeColumnsResult=ac.getModel().getEdgeTable().getLookup().lookupResult(AttributeColumn.class);
    nodeColumnsResult.addLookupListener(RankingModelImpl.this);
    edgeColumnsResult.addLookupListener(RankingModelImpl.this);
  }
}",0.8483373884833739
190321,"public void actionPerformed(ActionEvent e){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.closeCurrentProject();
  DialogFileFilter filter=new DialogFileFilter(NbBundle.getMessage(OpenProject.class,""String_Node_Str""));
  filter.addExtension(""String_Node_Str"");
  String lastPathDefault=NbPreferences.forModule(OpenProject.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(OpenProject.class).get(LAST_PATH,lastPathDefault);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.addChoosableFileFilter(filter);
  int returnFile=chooser.showOpenDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(OpenProject.class).put(LAST_PATH,file.getAbsolutePath());
    try {
      DataObject doe=DataObject.find(fileObject);
      pc.loadProject(doe);
    }
 catch (    Exception ew) {
      Exceptions.printStackTrace(ew);
    }
  }
}","public void actionPerformed(ActionEvent e){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (!pc.closeCurrentProject()) {
    return;
  }
  DialogFileFilter filter=new DialogFileFilter(NbBundle.getMessage(OpenProject.class,""String_Node_Str""));
  filter.addExtension(""String_Node_Str"");
  String lastPathDefault=NbPreferences.forModule(OpenProject.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(OpenProject.class).get(LAST_PATH,lastPathDefault);
  final JFileChooser chooser=new JFileChooser(lastPath);
  chooser.addChoosableFileFilter(filter);
  int returnFile=chooser.showOpenDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(OpenProject.class).put(LAST_PATH,file.getAbsolutePath());
    try {
      DataObject doe=DataObject.find(fileObject);
      pc.loadProject(doe);
    }
 catch (    Exception ew) {
      Exceptions.printStackTrace(ew);
    }
  }
}",0.9884845693228926
190322,public void closeCurrentProject();,public boolean closeCurrentProject();,0.8732394366197183
190323,"public void newProject(){
  closeCurrentProject();
  ProjectImpl project=new ProjectImpl();
  projects.addProject(project);
  openProject(project);
}","public void newProject(){
  if (closeCurrentProject()) {
    ProjectImpl project=new ProjectImpl();
    projects.addProject(project);
    openProject(project);
  }
}",0.9426751592356688
190324,"public void removeProject(Project project){
  if (projects.getCurrentProject() == project) {
    closeCurrentProject();
  }
  projects.removeProject(project);
}","public void removeProject(Project project){
  if (projects.getCurrentProject() == project) {
    if (!closeCurrentProject()) {
      return;
    }
  }
  projects.removeProject(project);
}",0.9221902017291066
190325,"public void closeCurrentProject(){
  if (projects.hasCurrentProject()) {
    ProjectImpl currentProject=projects.getCurrentProject();
    String messageBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String titleBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String saveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String doNotSaveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String cancelBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    NotifyDescriptor msg=new NotifyDescriptor(messageBundle,titleBundle,NotifyDescriptor.YES_NO_CANCEL_OPTION,NotifyDescriptor.INFORMATION_MESSAGE,new Object[]{saveBundle,doNotSaveBundle,cancelBundle},saveBundle);
    Object result=DialogDisplayer.getDefault().notify(msg);
    if (result == saveBundle) {
      saveProject(currentProject);
    }
 else     if (result == cancelBundle) {
      return;
    }
    currentProject.getLookup().lookup(ProjectInformationImpl.class).close();
    projects.closeCurrentProject();
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
    if (currentProject.getLookup().lookup(WorkspaceProvider.class).hasCurrentWorkspace()) {
      fireWorkspaceEvent(EventType.UNSELECT,currentProject.getLookup().lookup(WorkspaceProvider.class).getCurrentWorkspace());
    }
    for (    Workspace ws : currentProject.getLookup().lookup(WorkspaceProviderImpl.class).getWorkspaces()) {
      fireWorkspaceEvent(EventType.CLOSE,ws);
    }
    fireWorkspaceEvent(EventType.DISABLE,null);
  }
}","public boolean closeCurrentProject(){
  if (projects.hasCurrentProject()) {
    ProjectImpl currentProject=projects.getCurrentProject();
    String messageBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String titleBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String saveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String doNotSaveBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    String cancelBundle=NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"");
    NotifyDescriptor msg=new NotifyDescriptor(messageBundle,titleBundle,NotifyDescriptor.YES_NO_CANCEL_OPTION,NotifyDescriptor.INFORMATION_MESSAGE,new Object[]{saveBundle,doNotSaveBundle,cancelBundle},saveBundle);
    Object result=DialogDisplayer.getDefault().notify(msg);
    if (result == saveBundle) {
      saveProject(currentProject);
    }
 else     if (result == cancelBundle) {
      return false;
    }
    currentProject.getLookup().lookup(ProjectInformationImpl.class).close();
    projects.closeCurrentProject();
    saveProject=false;
    saveAsProject=false;
    projectProperties=false;
    closeProject=false;
    newWorkspace=false;
    deleteWorkspace=false;
    cleanWorkspace=false;
    duplicateWorkspace=false;
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
        String title=frame.getTitle();
        title=title.substring(0,title.indexOf('-') - 1);
        frame.setTitle(title);
      }
    }
);
    if (currentProject.getLookup().lookup(WorkspaceProvider.class).hasCurrentWorkspace()) {
      fireWorkspaceEvent(EventType.UNSELECT,currentProject.getLookup().lookup(WorkspaceProvider.class).getCurrentWorkspace());
    }
    for (    Workspace ws : currentProject.getLookup().lookup(WorkspaceProviderImpl.class).getWorkspaces()) {
      fireWorkspaceEvent(EventType.CLOSE,ws);
    }
    fireWorkspaceEvent(EventType.DISABLE,null);
  }
  return true;
}",0.992248062015504
190326,"public void openProject(Project project){
  final ProjectImpl projectImpl=(ProjectImpl)project;
  final ProjectInformationImpl projectInformationImpl=projectImpl.getLookup().lookup(ProjectInformationImpl.class);
  final WorkspaceProviderImpl workspaceProviderImpl=project.getLookup().lookup(WorkspaceProviderImpl.class);
  if (projects.hasCurrentProject()) {
    closeCurrentProject();
  }
  projects.addProject(projectImpl);
  projects.setCurrentProject(projectImpl);
  projectInformationImpl.open();
  if (!workspaceProviderImpl.hasCurrentWorkspace()) {
    if (workspaceProviderImpl.getWorkspaces().length == 0) {
      Workspace workspace=newWorkspace(project);
      openWorkspace(workspace);
    }
 else {
      Workspace workspace=workspaceProviderImpl.getWorkspaces()[0];
      openWorkspace(workspace);
    }
  }
 else {
    fireWorkspaceEvent(EventType.SELECT,workspaceProviderImpl.getCurrentWorkspace());
  }
  saveProject=true;
  saveAsProject=true;
  projectProperties=true;
  closeProject=true;
  newWorkspace=true;
  if (workspaceProviderImpl.hasCurrentWorkspace()) {
    deleteWorkspace=true;
    cleanWorkspace=true;
    duplicateWorkspace=true;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle() + ""String_Node_Str"" + projectInformationImpl.getName();
      frame.setTitle(title);
    }
  }
);
  StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"",projectInformationImpl.getName()));
}","public void openProject(Project project){
  final ProjectImpl projectImpl=(ProjectImpl)project;
  final ProjectInformationImpl projectInformationImpl=projectImpl.getLookup().lookup(ProjectInformationImpl.class);
  final WorkspaceProviderImpl workspaceProviderImpl=project.getLookup().lookup(WorkspaceProviderImpl.class);
  if (projects.hasCurrentProject()) {
    if (!closeCurrentProject()) {
      return;
    }
  }
  projects.addProject(projectImpl);
  projects.setCurrentProject(projectImpl);
  projectInformationImpl.open();
  if (!workspaceProviderImpl.hasCurrentWorkspace()) {
    if (workspaceProviderImpl.getWorkspaces().length == 0) {
      Workspace workspace=newWorkspace(project);
      openWorkspace(workspace);
    }
 else {
      Workspace workspace=workspaceProviderImpl.getWorkspaces()[0];
      openWorkspace(workspace);
    }
  }
 else {
    fireWorkspaceEvent(EventType.SELECT,workspaceProviderImpl.getCurrentWorkspace());
  }
  saveProject=true;
  saveAsProject=true;
  projectProperties=true;
  closeProject=true;
  newWorkspace=true;
  if (workspaceProviderImpl.hasCurrentWorkspace()) {
    deleteWorkspace=true;
    cleanWorkspace=true;
    duplicateWorkspace=true;
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      JFrame frame=(JFrame)WindowManager.getDefault().getMainWindow();
      String title=frame.getTitle() + ""String_Node_Str"" + projectInformationImpl.getName();
      frame.setTitle(title);
    }
  }
);
  StatusDisplayer.getDefault().setStatusText(NbBundle.getMessage(ProjectControllerImpl.class,""String_Node_Str"",projectInformationImpl.getName()));
}",0.9909459881361224
190327,"public boolean init(Graph graph){
  values=new ArrayList<Object>();
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Object>();
  return true;
}",0.7241379310344828
190328,"public boolean init(Graph graph){
  values=new ArrayList<Float>(graph.getEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Float>(graph.getEdgeCount());
  min=Float.POSITIVE_INFINITY;
  max=Float.NEGATIVE_INFINITY;
  return true;
}",0.8375634517766497
190329,"private void refreshRange(){
  Float lowerBound=range.getLowerFloat();
  Float upperBound=range.getUpperFloat();
  if ((Float)min > lowerBound || (Float)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Float)min;
  }
  if ((Float)min > upperBound || (Float)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Float)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2846441947565543
190330,"public boolean init(Graph graph){
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.8288770053475936
190331,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
190332,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
190333,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
190334,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
190335,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
190336,"public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}","public boolean init(Graph graph){
  if (!(graph instanceof DirectedGraph)) {
    return false;
  }
  if (range == null) {
    getValues();
    refreshRange();
  }
  values=new ArrayList<Integer>(graph.getNodeCount());
  min=Integer.MAX_VALUE;
  max=Integer.MIN_VALUE;
  return true;
}",0.873015873015873
190337,"private void refreshRange(){
  Integer lowerBound=range.getLowerInteger();
  Integer upperBound=range.getUpperInteger();
  if ((Integer)min > lowerBound || (Integer)max < lowerBound || lowerBound.equals(upperBound)) {
    lowerBound=(Integer)min;
  }
  if ((Integer)min > upperBound || (Integer)max < upperBound || lowerBound.equals(upperBound)) {
    upperBound=(Integer)max;
  }
  range=new Range(lowerBound,upperBound);
}","private void refreshRange(){
  if (range == null) {
    range=new Range(min,max);
  }
 else {
    range.trimBounds(min,max);
  }
}",0.2815884476534296
190338,"public void actionPerformed(ActionEvent e){
  if (!topComponent.isOpened()) {
    topComponent.open();
    topComponent.requestActive();
    button.setText(""String_Node_Str"");
  }
 else {
    topComponent.close();
    button.setText(""String_Node_Str"");
  }
  dynamicRangeFilter.refreshRange();
  TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
  timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
  timelineController.setMin(dynamicRangeFilter.getMinimum());
  timelineController.setMax(dynamicRangeFilter.getMaximum());
}","public void actionPerformed(ActionEvent e){
  if (!topComponent.isOpened()) {
    topComponent.open();
    topComponent.requestActive();
    button.setText(""String_Node_Str"");
    dynamicRangeFilter.refreshRange();
    TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
    timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
    timelineController.setMin(dynamicRangeFilter.getMinimum());
    timelineController.setMax(dynamicRangeFilter.getMaximum());
  }
 else {
    topComponent.close();
    button.setText(""String_Node_Str"");
  }
}",0.4243421052631579
190339,"public JPanel getPanel(Filter filter){
  final DynamicRangeFilter dynamicRangeFilter=(DynamicRangeFilter)filter;
  JPanel panel=new JPanel();
  final TopComponent topComponent=WindowManager.getDefault().findTopComponent(""String_Node_Str"");
  final JButton button=new JButton(topComponent.isOpened() ? ""String_Node_Str"" : ""String_Node_Str"");
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!topComponent.isOpened()) {
        topComponent.open();
        topComponent.requestActive();
        button.setText(""String_Node_Str"");
      }
 else {
        topComponent.close();
        button.setText(""String_Node_Str"");
      }
      dynamicRangeFilter.refreshRange();
      TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
      timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
      timelineController.setMin(dynamicRangeFilter.getMinimum());
      timelineController.setMax(dynamicRangeFilter.getMaximum());
    }
  }
);
  panel.add(button);
  return panel;
}","public JPanel getPanel(Filter filter){
  final DynamicRangeFilter dynamicRangeFilter=(DynamicRangeFilter)filter;
  JPanel panel=new JPanel();
  final TopComponent topComponent=WindowManager.getDefault().findTopComponent(""String_Node_Str"");
  final JButton button=new JButton(topComponent.isOpened() ? ""String_Node_Str"" : ""String_Node_Str"");
  if (topComponent.isOpened()) {
    dynamicRangeFilter.refreshRange();
    TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
    timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
    timelineController.setMin(dynamicRangeFilter.getMinimum());
    timelineController.setMax(dynamicRangeFilter.getMaximum());
  }
  button.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!topComponent.isOpened()) {
        topComponent.open();
        topComponent.requestActive();
        button.setText(""String_Node_Str"");
        dynamicRangeFilter.refreshRange();
        TimelineController timelineController=Lookup.getDefault().lookup(TimelineController.class);
        timelineController.getModel().setFilterProperty(dynamicRangeFilter.getRangeProperty());
        timelineController.setMin(dynamicRangeFilter.getMinimum());
        timelineController.setMax(dynamicRangeFilter.getMaximum());
      }
 else {
        topComponent.close();
        button.setText(""String_Node_Str"");
      }
    }
  }
);
  panel.add(button);
  return panel;
}",0.5659509202453987
190340,"public void process(Workspace workspace,ContainerUnloader container){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  this.timelineController=Lookup.getDefault().lookup(TimelineController.class);
  this.workspace=workspace;
  HierarchicalGraph graph=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
    graph=graphModel.getHierarchicalDirectedGraph();
  break;
case UNDIRECTED:
graph=graphModel.getHierarchicalUndirectedGraph();
break;
case MIXED:
graph=graphModel.getHierarchicalMixedGraph();
break;
default :
graph=graphModel.getHierarchicalMixedGraph();
break;
}
GraphFactory factory=graphModel.factory();
AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
attributeModel.mergeModel(container.getAttributeModel());
Map<String,Node> map=new HashMap<String,Node>();
for (Node n : graph.getNodes()) {
Object id=n.getNodeData().getAttributes().getValue(PropertiesColumn.NODE_ID.getIndex());
if (id != null) {
map.put((String)id,n);
}
if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
map.put(n.getNodeData().getLabel(),n);
}
}
int nodeCount=0;
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n;
String id=draftNode.getId();
if (id != null && map.get(id) != null) {
n=map.get(id);
}
 else {
n=factory.newNode();
}
flushToNode(draftNode,n);
draftNode.setNode(n);
nodeCount++;
}
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n=draftNode.getNode();
NodeDraftGetter[] parents=draftNode.getParents();
if (parents != null) {
for (int i=0; i < parents.length; i++) {
Node parent=parents[i].getNode();
graph.addNode(n,parent);
}
}
 else {
graph.addNode(n);
}
}
int edgeCount=0;
for (EdgeDraftGetter edge : container.getEdges()) {
Node source=edge.getSource().getNode();
Node target=edge.getTarget().getNode();
Edge e=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),true);
break;
case UNDIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),false);
break;
case MIXED:
e=factory.newEdge(source,target,edge.getWeight(),edge.getType().equals(EdgeType.UNDIRECTED) ? false : true);
break;
}
flushToEdge(edge,e);
edgeCount++;
graph.addEdge(e);
}
System.out.println(""String_Node_Str"" + nodeCount + ""String_Node_Str""+ edgeCount);
timelineController=null;
workspace=null;
}","public void process(Workspace workspace,ContainerUnloader container){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  this.timelineController=Lookup.getDefault().lookup(TimelineController.class);
  this.workspace=workspace;
  HierarchicalGraph graph=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
    graph=graphModel.getHierarchicalDirectedGraph();
  break;
case UNDIRECTED:
graph=graphModel.getHierarchicalUndirectedGraph();
break;
case MIXED:
graph=graphModel.getHierarchicalMixedGraph();
break;
default :
graph=graphModel.getHierarchicalMixedGraph();
break;
}
GraphFactory factory=graphModel.factory();
if (timelineController != null) {
timelineController.setMin(workspace,container.getTimeIntervalMin());
timelineController.setMax(workspace,container.getTimeIntervalMax());
}
AttributeModel attributeModel=Lookup.getDefault().lookup(AttributeController.class).getModel();
attributeModel.mergeModel(container.getAttributeModel());
Map<String,Node> map=new HashMap<String,Node>();
for (Node n : graph.getNodes()) {
Object id=n.getNodeData().getAttributes().getValue(PropertiesColumn.NODE_ID.getIndex());
if (id != null) {
map.put((String)id,n);
}
if (n.getNodeData().getLabel() != null && !n.getNodeData().getLabel().isEmpty()) {
map.put(n.getNodeData().getLabel(),n);
}
}
int nodeCount=0;
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n;
String id=draftNode.getId();
if (id != null && map.get(id) != null) {
n=map.get(id);
}
 else {
n=factory.newNode();
}
flushToNode(draftNode,n);
draftNode.setNode(n);
nodeCount++;
}
for (NodeDraftGetter draftNode : container.getNodes()) {
Node n=draftNode.getNode();
NodeDraftGetter[] parents=draftNode.getParents();
if (parents != null) {
for (int i=0; i < parents.length; i++) {
Node parent=parents[i].getNode();
graph.addNode(n,parent);
}
}
 else {
graph.addNode(n);
}
}
int edgeCount=0;
for (EdgeDraftGetter edge : container.getEdges()) {
Node source=edge.getSource().getNode();
Node target=edge.getTarget().getNode();
Edge e=null;
switch (container.getEdgeDefault()) {
case DIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),true);
break;
case UNDIRECTED:
e=factory.newEdge(source,target,edge.getWeight(),false);
break;
case MIXED:
e=factory.newEdge(source,target,edge.getWeight(),edge.getType().equals(EdgeType.UNDIRECTED) ? false : true);
break;
}
flushToEdge(edge,e);
edgeCount++;
graph.addEdge(e);
}
System.out.println(""String_Node_Str"" + nodeCount + ""String_Node_Str""+ edgeCount);
timelineController=null;
workspace=null;
}",0.9646772228989038
190341,"private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String nodeStart=null;
      String nodeEnd=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeStart=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeEnd=nodeE.getAttribute(""String_Node_Str"");
      }
      if (nodeStart != null || nodeEnd != null) {
        node.addTimeSlice(nodeStart,nodeEnd);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}","private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    if (nodeListE.item(i).getNodeType() != ELEMENT_NODE) {
      continue;
    }
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String nodeStart=null;
      String nodeEnd=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeStart=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        nodeEnd=nodeE.getAttribute(""String_Node_Str"");
      }
      if (nodeStart != null || nodeEnd != null) {
        node.addTimeSlice(nodeStart,nodeEnd);
      }
    }
    container.addNode(node);
    Node childNodes=nodeE.getFirstChild();
    if (childNodes != null) {
      do {
        if (childNodes.getNodeName().equals(""String_Node_Str"")) {
          NodeList childrenListE=childNodes.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNodes=childNodes.getNextSibling()) != null);
    }
    Node childEdges=nodeE.getFirstChild();
    if (childEdges != null) {
      do {
        if (childEdges.getNodeName().equals(""String_Node_Str"")) {
          NodeList childrenListE=childEdges.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdges=childEdges.getNextSibling()) != null);
    }
  }
}",0.9073375997194704
190342,"private void parseEdges(NodeList edgeListE,String parent){
  for (int i=0; i < edgeListE.getLength(); i++) {
    Element edgeE=(Element)edgeListE.item(i);
    EdgeDraft edge=container.factory().newEdgeDraft();
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String edgeId=edgeE.getAttribute(""String_Node_Str"");
    if (edgeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
    String edgeSource=edgeE.getAttribute(""String_Node_Str"");
    String edgeTarget=edgeE.getAttribute(""String_Node_Str"");
    NodeDraft nodeSource=container.getNode(edgeSource);
    NodeDraft nodeTarget=container.getNode(edgeTarget);
    if (nodeSource == null || nodeTarget == null) {
      throw new NullPointerException(edgeSource + ""String_Node_Str"" + edgeTarget);
    }
    edge.setSource(nodeSource);
    edge.setTarget(nodeTarget);
    String edgeType=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeType.isEmpty()) {
      if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.DIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.MUTUAL);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeType,edgeId),Issue.Level.SEVERE));
      }
    }
    String weightStr=edgeE.getAttribute(""String_Node_Str"");
    if (!weightStr.isEmpty()) {
      try {
        float weight=Float.parseFloat(weightStr);
        edge.setWeight(weight);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeId),Issue.Level.WARNING));
      }
    }
    String edgeLabel=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeLabel.isEmpty()) {
      edge.setLabel(edgeLabel);
    }
    Node child=edgeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setEdgeData(dataE,edge,edgeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    if (isDynamicMode) {
      String edgeStart=null;
      String edgeEnd=null;
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeStart=edgeE.getAttribute(""String_Node_Str"");
      }
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeEnd=edgeE.getAttribute(""String_Node_Str"");
      }
      if (edgeStart != null || edgeEnd != null) {
        edge.addTimeSlice(edgeStart,edgeEnd);
      }
    }
    container.addEdge(edge);
  }
}","private void parseEdges(NodeList edgeListE,String parent){
  for (int i=0; i < edgeListE.getLength(); i++) {
    if (edgeListE.item(i).getNodeType() != ELEMENT_NODE) {
      continue;
    }
    Element edgeE=(Element)edgeListE.item(i);
    EdgeDraft edge=container.factory().newEdgeDraft();
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String edgeId=edgeE.getAttribute(""String_Node_Str"");
    if (edgeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.WARNING));
    }
    String edgeSource=edgeE.getAttribute(""String_Node_Str"");
    String edgeTarget=edgeE.getAttribute(""String_Node_Str"");
    NodeDraft nodeSource=container.getNode(edgeSource);
    NodeDraft nodeTarget=container.getNode(edgeTarget);
    if (nodeSource == null || nodeTarget == null) {
      throw new NullPointerException(edgeSource + ""String_Node_Str"" + edgeTarget);
    }
    edge.setSource(nodeSource);
    edge.setTarget(nodeTarget);
    String edgeType=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeType.isEmpty()) {
      if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.UNDIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.DIRECTED);
      }
 else       if (edgeType.equals(""String_Node_Str"")) {
        edge.setType(EdgeDraft.EdgeType.MUTUAL);
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeType,edgeId),Issue.Level.SEVERE));
      }
    }
    String weightStr=edgeE.getAttribute(""String_Node_Str"");
    if (!weightStr.isEmpty()) {
      try {
        float weight=Float.parseFloat(weightStr);
        edge.setWeight(weight);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeId),Issue.Level.WARNING));
      }
    }
    String edgeLabel=edgeE.getAttribute(""String_Node_Str"");
    if (!edgeLabel.isEmpty()) {
      edge.setLabel(edgeLabel);
    }
    Node child=edgeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setEdgeData(dataE,edge,edgeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    if (isDynamicMode) {
      String edgeStart=null;
      String edgeEnd=null;
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeStart=edgeE.getAttribute(""String_Node_Str"");
      }
      if (!edgeE.getAttribute(""String_Node_Str"").isEmpty()) {
        edgeEnd=edgeE.getAttribute(""String_Node_Str"");
      }
      if (edgeStart != null || edgeEnd != null) {
        edge.addTimeSlice(edgeStart,edgeEnd);
      }
    }
    container.addEdge(edge);
  }
}",0.9870004814636496
190343,"public void computeMetaEdges(AbstractNode node,AbstractNode enabledAncestor){
  if (!dhns.getSettingsManager().isAutoMetaEdgeCreation()) {
    return;
  }
  if (enabledAncestor == null) {
    enabledAncestor=node;
  }
  int clusterEnd=node.getPre() + node.size;
  for (int i=node.pre; i <= clusterEnd; i++) {
    AbstractNode desc=treeStructure.getNodeAt(i);
    if (desc.getEdgesOutTree().getCount() > 0) {
      edgeIterator.setNode(desc.getEdgesOutTree());
      while (edgeIterator.hasNext()) {
        AbstractEdge edge=edgeIterator.next();
        AbstractNode[] enabledAncestors=treeStructure.getEnabledAncestorsOrSelf(edge.getTarget(viewId));
        if (enabledAncestors != null) {
          for (int j=0; j < enabledAncestors.length; j++) {
            AbstractNode targetNode=enabledAncestors[j];
            if (!(targetNode == edge.getTarget(viewId) && enabledAncestor == edge.getSource(viewId))) {
              createMetaEdge(enabledAncestor,targetNode,edge);
            }
          }
        }
      }
    }
    if (desc.getEdgesInTree().getCount() > 0) {
      edgeIterator.setNode(desc.getEdgesInTree());
      while (edgeIterator.hasNext()) {
        AbstractEdge edge=edgeIterator.next();
        AbstractNode[] enabledAncestors=treeStructure.getEnabledAncestorsOrSelf(edge.getSource(viewId));
        if (enabledAncestors != null) {
          for (int j=0; j < enabledAncestors.length; j++) {
            AbstractNode sourceNode=enabledAncestors[j];
            if (!(sourceNode == edge.getSource(viewId) && enabledAncestor == edge.getTarget(viewId))) {
              createMetaEdge(sourceNode,enabledAncestor,edge);
            }
          }
        }
      }
    }
  }
}","public void computeMetaEdges(){
  for (TreeIterator itr=new TreeIterator(treeStructure,true,Tautology.instance); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    computeMetaEdges(node,node);
  }
}",0.0569020021074815
190344,"public void readEdges(Element edgesE,GraphStructure graphStructure,GraphFactoryImpl factory){
  NodeList edgesListE=edgesE.getChildNodes();
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  for (int i=0; i < edgesListE.getLength(); i++) {
    if (edgesListE.item(i).getNodeType() == Node.ELEMENT_NODE) {
      Element edgeE=(Element)edgesListE.item(i);
      Integer id=Integer.parseInt(edgeE.getAttribute(""String_Node_Str""));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractEdge edge;
      if (edgeE.getTagName().equals(ELEMENT_EDGES_PROPER)) {
        edge=new ProperEdgeImpl(id,source,target);
      }
 else       if (edgeE.getTagName().equals(ELEMENT_EDGES_MIXED)) {
        edge=new MixedEdgeImpl(id,source,target,Boolean.parseBoolean(edgeE.getAttribute(""String_Node_Str"")));
      }
 else {
        edge=new SelfLoopImpl(id,source);
      }
      edge.setWeight(Float.parseFloat(edgeE.getAttribute(""String_Node_Str"")));
      edge.getEdgeData().setAttributes(factory.newEdgeAttributes());
      edge.getEdgeData().setTextData(factory.newTextData());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
      graphStructure.getEdgeDictionnary().add(edge);
    }
  }
}","public void readEdges(Element edgesE,GraphStructure graphStructure,GraphFactoryImpl factory){
  NodeList edgesListE=edgesE.getChildNodes();
  TreeStructure treeStructure=graphStructure.getMainView().getStructure();
  for (int i=0; i < edgesListE.getLength(); i++) {
    if (edgesListE.item(i).getNodeType() == Node.ELEMENT_NODE) {
      Element edgeE=(Element)edgesListE.item(i);
      Integer id=Integer.parseInt(edgeE.getAttribute(""String_Node_Str""));
      AbstractNode source=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractNode target=treeStructure.getNodeAt(Integer.parseInt(edgeE.getAttribute(""String_Node_Str"")));
      AbstractEdge edge;
      if (edgeE.getTagName().equals(ELEMENT_EDGES_PROPER)) {
        edge=new ProperEdgeImpl(id,source,target);
      }
 else       if (edgeE.getTagName().equals(ELEMENT_EDGES_MIXED)) {
        edge=new MixedEdgeImpl(id,source,target,Boolean.parseBoolean(edgeE.getAttribute(""String_Node_Str"")));
      }
 else {
        edge=new SelfLoopImpl(id,source);
      }
      edge.setWeight(Float.parseFloat(edgeE.getAttribute(""String_Node_Str"")));
      edge.getEdgeData().setAttributes(factory.newEdgeAttributes());
      edge.getEdgeData().setTextData(factory.newTextData());
      source.getEdgesOutTree().add(edge);
      target.getEdgesInTree().add(edge);
      graphStructure.getEdgeDictionnary().add(edge);
    }
  }
  graphStructure.getMainView().getStructureModifier().getEdgeProcessor().computeMetaEdges();
}",0.9681397738951696
190345,"public Element writeGraphView(Document document,GraphViewImpl graphView){
  Element viewE=document.createElement(ELEMENT_VIEW);
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    Element nodeE=document.createElement(ELEMENT_TREESTRUCTURE_NODE);
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      Element edgeE=document.createElement(ELEMENT_VIEW_EDGE);
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
    }
  }
  return viewE;
}","public Element writeGraphView(Document document,GraphViewImpl graphView){
  Element viewE=document.createElement(ELEMENT_VIEW);
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getViewId()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getEdgesCountTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesEnabled()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getMutualEdgesTotal()));
  viewE.setAttribute(""String_Node_Str"",String.valueOf(graphView.getNodesEnabled()));
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    Element nodeE=document.createElement(ELEMENT_TREESTRUCTURE_NODE);
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getInView(0).pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.isEnabled()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.parent.pre));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledInDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledOutDegree()));
    nodeE.setAttribute(""String_Node_Str"",String.valueOf(node.getEnabledMutualDegree()));
  }
  ParamAVLIterator<AbstractEdge> edgeIterator=new ParamAVLIterator<AbstractEdge>();
  for (TreeListIterator itr=new TreeListIterator(graphView.getStructure().getTree(),1); itr.hasNext(); ) {
    AbstractNode node=itr.next();
    for (edgeIterator.setNode(node.getEdgesOutTree()); edgeIterator.hasNext(); ) {
      AbstractEdge edge=edgeIterator.next();
      Element edgeE=document.createElement(ELEMENT_VIEW_EDGE);
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(node.pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getTarget(graphView.getViewId()).pre));
      edgeE.setAttribute(""String_Node_Str"",String.valueOf(edge.getId()));
    }
  }
  graphView.getStructureModifier().getEdgeProcessor().computeMetaEdges();
  return viewE;
}",0.982806691449814
190346,"public void refreshModel(FilterModel filterModel,FilterUIModel uiModel){
  this.filterModel=filterModel;
  this.uiModel=uiModel;
  unsetup();
  filterPanelPanel.unsetup();
  queriesExplorer.unsetup();
  setup();
  ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
  queriesExplorer.setup(queriesPanel.manager,filterModel,uiModel);
  filterPanelPanel.setup(uiModel);
  updateEnabled(filterModel != null);
}","public void refreshModel(FilterModel filterModel,FilterUIModel uiModel){
  this.filterModel=filterModel;
  this.uiModel=uiModel;
  unsetup();
  filterPanelPanel.unsetup();
  queriesExplorer.unsetup();
  setup();
  ((FiltersExplorer)libraryTree).setup(manager,filterModel,uiModel);
  queriesExplorer.setup(queriesPanel.manager,filterModel,uiModel);
  filterPanelPanel.setup(uiModel);
  updateEnabled(filterModel != null);
  updateControls();
}",0.976851851851852
190347,"public void run(){
  filterButton.setSelected(filterModel.isFiltering());
  selectButton.setSelected(filterModel.isSelecting());
  updateEnabled(true);
}","public void run(){
  if (filterModel != null) {
    filterButton.setSelected(filterModel.isFiltering());
    selectButton.setSelected(filterModel.isSelecting());
  }
 else {
    filterButton.setSelected(false);
    selectButton.setSelected(false);
  }
}",0.541871921182266
190348,"public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filter(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.select(uiModel.getSelectedRoot());
    }
  }
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      filterButton.setSelected(filterModel.isFiltering());
      selectButton.setSelected(filterModel.isSelecting());
      updateEnabled(true);
    }
  }
);
}","public void stateChanged(ChangeEvent e){
  if (e.getSource() instanceof FilterUIModel) {
    if (uiModel.getSelectedQuery() != null && filterButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.filter(uiModel.getSelectedRoot());
    }
 else     if (uiModel.getSelectedQuery() != null && selectButton.isSelected()) {
      FilterController controller=Lookup.getDefault().lookup(FilterController.class);
      controller.select(uiModel.getSelectedRoot());
    }
  }
  updateControls();
  updateEnabled(true);
}",0.8148698884758364
190349,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  String defaultExtention=((DialogFileFilter)chooser.getFileFilter()).getExtensions().get(0);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultExtention);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(GraphFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  GraphFileExporterUIPanel graphSettings=new GraphFileExporterUIPanel();
  graphSettings.setVisibleOnlyGraph(visibleOnlyGraph);
  southPanel.add(graphSettings,BorderLayout.CENTER);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(GraphFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter graphFileExporter : exportController.getGraphFileExporters()) {
    for (    FileType fileType : graphFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(GraphFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    visibleOnlyGraph=graphSettings.isVisibleOnlyGraph();
    exportController.doExport(selectedExporter,fileObject,visibleOnlyGraph);
  }
}",0.9704804998922646
190350,"public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  String defaultExtention=((DialogFileFilter)chooser.getFileFilter()).getExtensions().get(0);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultExtention);
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}","public void action(){
  final String LAST_PATH=""String_Node_Str"";
  final String LAST_PATH_DEFAULT=""String_Node_Str"";
  final ExportController exportController=Lookup.getDefault().lookup(ExportController.class);
  if (exportController == null) {
    return;
  }
  String lastPathDefault=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH_DEFAULT,null);
  String lastPath=NbPreferences.forModule(VectorialFileExporterUI.class).get(LAST_PATH,lastPathDefault);
  FlowLayout layout=new FlowLayout(FlowLayout.RIGHT);
  JPanel optionsPanel=new JPanel(layout);
  final JButton optionsButton=new JButton(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  optionsPanel.add(optionsButton);
  optionsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ExporterUI exporterUI=exportController.getUI(selectedExporter);
      if (exporterUI != null) {
        JPanel panel=exporterUI.getPanel();
        exporterUI.setup(selectedExporter);
        DialogDescriptor dd=new DialogDescriptor(panel,NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str"",selectedExporter.getName()));
        Object result=DialogDisplayer.getDefault().notify(dd);
        exporterUI.unsetup(result == NotifyDescriptor.OK_OPTION);
      }
    }
  }
);
  final JPanel southPanel=new JPanel(new BorderLayout());
  southPanel.add(optionsPanel,BorderLayout.NORTH);
  final JFileChooser chooser=new JFileChooser(lastPath){
    @Override protected JDialog createDialog(    Component parent) throws HeadlessException {
      JDialog dialog=super.createDialog(parent);
      Component c=dialog.getContentPane().getComponent(0);
      if (c != null && c instanceof JComponent) {
        Insets insets=((JComponent)c).getInsets();
        southPanel.setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
      }
      dialog.getContentPane().add(southPanel,BorderLayout.SOUTH);
      return dialog;
    }
    @Override public void approveSelection(){
      if (canExport(this)) {
        super.approveSelection();
      }
    }
  }
;
  chooser.setDialogTitle(NbBundle.getMessage(VectorialFileExporterUI.class,""String_Node_Str""));
  chooser.addPropertyChangeListener(JFileChooser.FILE_FILTER_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      DialogFileFilter fileFilter=(DialogFileFilter)evt.getNewValue();
      selectedExporter=getExporter(fileFilter);
      if (selectedExporter != null && exportController.hasUI(selectedExporter)) {
        optionsButton.setEnabled(true);
      }
 else {
        optionsButton.setEnabled(false);
      }
      if (selectedFile != null) {
        String filePath=selectedFile.getAbsolutePath();
        filePath=filePath.substring(0,filePath.lastIndexOf(""String_Node_Str""));
        filePath=filePath.concat(fileFilter.getExtensions().get(0));
        selectedFile=new File(filePath);
        chooser.setSelectedFile(selectedFile);
      }
    }
  }
);
  chooser.addPropertyChangeListener(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (evt.getNewValue() != null) {
        selectedFile=(File)evt.getNewValue();
      }
    }
  }
);
  DialogFileFilter defaultFilter=null;
  for (  FileExporter vectorialFileExporter : exportController.getVectorialFileExporters()) {
    for (    FileType fileType : vectorialFileExporter.getFileTypes()) {
      DialogFileFilter dialogFileFilter=new DialogFileFilter(fileType.getName());
      dialogFileFilter.addExtensions(fileType.getExtensions());
      if (defaultFilter == null) {
        defaultFilter=dialogFileFilter;
      }
      chooser.addChoosableFileFilter(dialogFileFilter);
    }
  }
  chooser.setAcceptAllFileFilterUsed(false);
  chooser.setFileFilter(defaultFilter);
  selectedFile=new File(chooser.getCurrentDirectory(),""String_Node_Str"" + defaultFilter.getExtensions().get(0));
  chooser.setSelectedFile(selectedFile);
  int returnFile=chooser.showSaveDialog(null);
  if (returnFile == JFileChooser.APPROVE_OPTION) {
    File file=chooser.getSelectedFile();
    file=FileUtil.normalizeFile(file);
    FileObject fileObject=FileUtil.toFileObject(file);
    NbPreferences.forModule(VectorialFileExporterUI.class).put(LAST_PATH,file.getAbsolutePath());
    exportController.doExport(selectedExporter,fileObject);
  }
}",0.9690185436454092
190351,"public FilterControllerImpl(){
  PropertyEditorManager.registerEditor(Range.class,RangePropertyEditor.class);
  PropertyEditorManager.registerEditor(AttributeColumn.class,AttributeColumnPropertyEditor.class);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new FilterModelImpl());
    }
    public void select(    Workspace workspace){
      model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
      if (model == null) {
        model=new FilterModelImpl();
        workspace.add(model);
      }
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
      if (model.getCurrentResult() != null) {
        graphModel.destroyView(model.getCurrentResult());
        model.setCurrentResult(null);
      }
      model=null;
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Workspace workspace=pc.getCurrentWorkspace();
    model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
    if (model == null) {
      model=new FilterModelImpl();
      workspace.add(model);
    }
  }
}","public FilterControllerImpl(){
  PropertyEditorManager.registerEditor(Range.class,RangePropertyEditor.class);
  PropertyEditorManager.registerEditor(AttributeColumn.class,AttributeColumnPropertyEditor.class);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
      workspace.add(new FilterModelImpl());
    }
    public void select(    Workspace workspace){
      model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
      if (model == null) {
        model=new FilterModelImpl();
        workspace.add(model);
      }
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
      if (model.getCurrentResult() != null && graphModel != null) {
        graphModel.destroyView(model.getCurrentResult());
        model.setCurrentResult(null);
      }
      model=null;
    }
  }
);
  if (pc.getCurrentWorkspace() != null) {
    Workspace workspace=pc.getCurrentWorkspace();
    model=(FilterModelImpl)workspace.getLookup().lookup(FilterModel.class);
    if (model == null) {
      model=new FilterModelImpl();
      workspace.add(model);
    }
  }
}",0.9838354151359294
190352,"public void disable(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  if (model.getCurrentResult() != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  model=null;
}","public void disable(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  if (model.getCurrentResult() != null && graphModel != null) {
    graphModel.destroyView(model.getCurrentResult());
    model.setCurrentResult(null);
  }
  model=null;
}",0.9591078066914498
190353,"public void setMax(double max){
  if (model != null) {
    model.setMaxValue(max);
  }
}","public void setMax(double max){
  if (model != null && max > model.getMaxValue()) {
    model.setMaxValue(max);
  }
}",0.8585365853658536
190354,"public void setMin(double min){
  if (model != null) {
    model.setMinValue(min);
  }
}","public void setMin(double min){
  if (model != null && min < model.getMinValue()) {
    model.setMinValue(min);
  }
}",0.8585365853658536
190355,"public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty())     f=((Date)formatter.parse(from)).getTime();
    if (to != null && !to.isEmpty())     t=((Date)formatter.parse(to)).getTime();
    if (model.getUnit() == null) {
      model.setUnit(DateTime.class);
    }
  }
 catch (  ParseException ex) {
    try {
      if (from != null)       f=Double.parseDouble(from);
      if (to != null)       t=Double.parseDouble(to);
      if (model.getUnit() == null) {
        model.setUnit(Double.class);
      }
    }
 catch (    NumberFormatException ex2) {
      Exceptions.printStackTrace(ex);
    }
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}","public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  pushSlice(workspace,from,to,(Object)edge);
}",0.1666666666666666
190356,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min && min < 0 && max <= 0) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int sf=(int)(model.getFromFloat() * (double)width);
  int st=(int)(model.getToFloat() * (double)width);
  int vhw=settings.selection.visibleHookWidth;
  int sw=st - sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
String str=fmt.withLocale(LOCALE).print(d);
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min && min < 0 && max <= 0) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int sf=(int)(model.getFromFloat() * (double)width);
  int st=(int)(model.getToFloat() * (double)width);
  int vhw=settings.selection.visibleHookWidth;
  int sw=st - sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect(st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect(sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
String str=fmt.withLocale(LOCALE).print(d);
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}
}",0.9957173447537472
190357,"private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    if (nodeLabel.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.SEVERE));
      continue;
    }
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String dateFrom=null;
      String dateTo=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateFrom=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateTo=nodeE.getAttribute(""String_Node_Str"");
      }
      if (dateFrom != null || dateTo != null) {
        node.addTimeSlice(dateFrom,dateTo);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}","private void parseNodes(NodeList nodeListE,String parent) throws Exception {
  for (int i=0; i < nodeListE.getLength(); i++) {
    Element nodeE=(Element)nodeListE.item(i);
    if (!nodeE.getNodeName().equals(""String_Node_Str"")) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeE.getNodeName()),Issue.Level.WARNING));
      return;
    }
    if (parent == null) {
      Progress.progress(progressTicket);
    }
    if (cancel) {
      return;
    }
    String nodeId=nodeE.getAttribute(""String_Node_Str"");
    if (nodeId.isEmpty()) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str""),Issue.Level.SEVERE));
      continue;
    }
    NodeDraft node=container.factory().newNodeDraft();
    node.setId(nodeId);
    if (!nodeE.getAttribute(""String_Node_Str"").isEmpty() && !nodeE.getAttribute(""String_Node_Str"").equals(""String_Node_Str"")) {
      String pid=nodeE.getAttribute(""String_Node_Str"");
      if (!container.nodeExists(pid)) {
        if (unknownParents.containsKey(pid)) {
          unknownParents.get(pid).add(nodeId);
        }
 else {
          List<String> childList=new ArrayList<String>();
          childList.add(nodeId);
          unknownParents.put(pid,childList);
        }
      }
 else {
        node.setParent(container.getNode(pid));
      }
    }
 else     if (parent != null) {
      node.setParent(container.getNode(parent));
    }
    String nodeLabel=nodeE.getAttribute(""String_Node_Str"");
    node.setLabel(nodeLabel);
    Node child=nodeE.getFirstChild();
    if (child != null) {
      do {
        if (child.getNodeName().equals(""String_Node_Str"")) {
          Node childE=child.getFirstChild();
          if (childE != null) {
            do {
              if (childE.getNodeName().equals(""String_Node_Str"")) {
                Element dataE=(Element)childE;
                setNodeData(dataE,node,nodeId);
              }
            }
 while ((childE=childE.getNextSibling()) != null);
          }
        }
      }
 while ((child=child.getNextSibling()) != null);
    }
    Element nodeColor=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeColor != null) {
      String rStr=nodeColor.getAttribute(""String_Node_Str"");
      String gStr=nodeColor.getAttribute(""String_Node_Str"");
      String bStr=nodeColor.getAttribute(""String_Node_Str"");
      int r=(rStr.isEmpty()) ? 0 : Integer.parseInt(rStr);
      int g=(gStr.isEmpty()) ? 0 : Integer.parseInt(gStr);
      int b=(bStr.isEmpty()) ? 0 : Integer.parseInt(bStr);
      node.setColor(new Color(r,g,b));
    }
    Element nodePosition=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodePosition != null) {
      try {
        String xStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!xStr.isEmpty()) {
          float x=Float.parseFloat(xStr);
          node.setX(x);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String yStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!yStr.isEmpty()) {
          float y=Float.parseFloat(yStr);
          node.setY(y);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
      try {
        String zStr=nodePosition.getAttribute(""String_Node_Str"");
        if (!zStr.isEmpty()) {
          float z=Float.parseFloat(zStr);
          node.setZ(z);
        }
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId,""String_Node_Str""),Issue.Level.WARNING));
      }
    }
    Element nodeSize=(Element)nodeE.getElementsByTagName(""String_Node_Str"").item(0);
    if (nodeSize != null) {
      try {
        float size=Float.parseFloat(nodeSize.getAttribute(""String_Node_Str""));
        node.setSize(size);
      }
 catch (      NumberFormatException e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",nodeId),Issue.Level.WARNING));
      }
    }
    if (isDynamicMode) {
      String dateFrom=null;
      String dateTo=null;
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateFrom=nodeE.getAttribute(""String_Node_Str"");
      }
      if (!nodeE.getAttribute(""String_Node_Str"").isEmpty()) {
        dateTo=nodeE.getAttribute(""String_Node_Str"");
      }
      if (dateFrom != null || dateTo != null) {
        node.addTimeSlice(dateFrom,dateTo);
      }
    }
    container.addNode(node);
    Node childNode=nodeE.getFirstChild();
    if (childNode != null) {
      do {
        if (childNode.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childNode.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseNodes(childrenListE,nodeId);
          }
        }
      }
 while ((childNode=childNode.getNextSibling()) != null);
    }
    Node childEdge=nodeE.getFirstChild();
    if (childEdge != null) {
      do {
        if (childEdge.getNodeName().equals(""String_Node_Str"")) {
          Node childE=childEdge.getFirstChild();
          NodeList childrenListE=childE.getChildNodes();
          if (childrenListE != null && childrenListE.getLength() > 0) {
            parseEdges(childrenListE,nodeId);
          }
        }
      }
 while ((childEdge=childEdge.getNextSibling()) != null);
    }
  }
}",0.5474831344058121
190358,"private void clean(){
  this.container=null;
  this.progressTicket=null;
  this.report=null;
  this.nodePropertiesAttributes=null;
  this.edgePropertiesAttributes=null;
  this.optionsAttributes=null;
  this.cancel=false;
  this.isDynamicMode=false;
  this.isDateTypeInteger=false;
  this.unknownParents=null;
}","private void clean(){
  this.container=null;
  this.progressTicket=null;
  this.report=null;
  this.nodePropertiesAttributes=null;
  this.edgePropertiesAttributes=null;
  this.optionsAttributes=null;
  this.cancel=false;
  this.isDynamicMode=false;
  this.isDateTypeFloat=false;
  this.unknownParents=null;
}",0.9805825242718448
190359,"private void setAttributesColumns(NodeList columnListE){
  for (int i=0; i < columnListE.getLength() && !cancel; i++) {
    Element columnE=(Element)columnListE.item(i);
    Progress.progress(progressTicket);
    String colId=columnE.getAttribute(""String_Node_Str"");
    String colTitle=columnE.getAttribute(""String_Node_Str"");
    if (colTitle.isEmpty()) {
      colTitle=colId;
    }
    String colClass=((Element)columnE.getParentNode()).getAttribute(""String_Node_Str"");
    if (colClass.isEmpty() || !(colClass.equals(""String_Node_Str"") || colClass.equals(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
      continue;
    }
    if (colClass.equals(""String_Node_Str"")) {
      NodeProperties prop=properties.getNodeProperty(colTitle);
      if (prop != null) {
        nodePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      EdgeProperties prop=properties.getEdgeProperty(colTitle);
      if (prop != null) {
        edgePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
    String keyType=columnE.getAttribute(""String_Node_Str"");
    AttributeType attributeType=AttributeType.STRING;
    if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.BOOLEAN;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.INT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LONG;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.FLOAT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.DOUBLE;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LIST_STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else {
      if (keepComplexAndEmptyAttributeTypes) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.WARNING));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
        continue;
      }
    }
    NodeList defaultList=columnE.getElementsByTagName(""String_Node_Str"");
    Object defaultValue=null;
    if (defaultList.getLength() > 0) {
      Element defaultE=(Element)defaultList.item(0);
      String defaultValueStr=defaultE.getTextContent();
      try {
        defaultValue=attributeType.parse(defaultValueStr);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    NodeList optionsList=columnE.getElementsByTagName(""String_Node_Str"");
    if (optionsList.getLength() > 0) {
      Element optionE=(Element)optionsList.item(0);
      String optionsValueStr=optionE.getTextContent();
      try {
        StringList optionValues=new StringList(optionsValueStr,""String_Node_Str"");
        optionsAttributes.put(colId,optionValues);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",optionsValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    if (colClass.equals(""String_Node_Str"")) {
      AttributeTable nodeClass=container.getAttributeModel().getNodeTable();
      nodeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      edgeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
  }
}","private void setAttributesColumns(NodeList columnListE){
  for (int i=0; i < columnListE.getLength() && !cancel; i++) {
    Element columnE=(Element)columnListE.item(i);
    Progress.progress(progressTicket);
    String colId=columnE.getAttribute(""String_Node_Str"");
    String colTitle=columnE.getAttribute(""String_Node_Str"");
    if (colTitle.isEmpty()) {
      colTitle=colId;
    }
    String colClass=((Element)columnE.getParentNode()).getAttribute(""String_Node_Str"");
    if (colClass.isEmpty() || !(colClass.equals(""String_Node_Str"") || colClass.equals(""String_Node_Str""))) {
      report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
      continue;
    }
    if (colClass.equals(""String_Node_Str"")) {
      NodeProperties prop=properties.getNodeProperty(colTitle);
      if (prop != null) {
        nodePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      EdgeProperties prop=properties.getEdgeProperty(colTitle);
      if (prop != null) {
        edgePropertiesAttributes.put(colId,prop);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle));
        continue;
      }
    }
    String keyType=columnE.getAttribute(""String_Node_Str"");
    AttributeType attributeType=AttributeType.STRING;
    if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.BOOLEAN;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.INT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LONG;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.FLOAT;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.DOUBLE;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.LIST_STRING;
    }
 else     if (keyType.equals(""String_Node_Str"")) {
      attributeType=AttributeType.STRING;
    }
 else {
      if (keepComplexAndEmptyAttributeTypes) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.WARNING));
      }
 else {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle),Issue.Level.SEVERE));
        continue;
      }
    }
    NodeList defaultList=columnE.getElementsByTagName(""String_Node_Str"");
    Object defaultValue=null;
    if (defaultList.getLength() > 0) {
      Element defaultE=(Element)defaultList.item(0);
      String defaultValueStr=defaultE.getTextContent();
      try {
        defaultValue=attributeType.parse(defaultValueStr);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",defaultValueStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    NodeList optionsList=columnE.getElementsByTagName(""String_Node_Str"");
    if (optionsList.getLength() > 0) {
      Element optionE=(Element)optionsList.item(0);
      String optionsValuesStr=optionE.getTextContent();
      try {
        StringList optionValuesList=new StringList(optionsValuesStr,""String_Node_Str"");
        optionsAttributes.put(colId,optionValuesList);
        report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",optionsValuesStr,colTitle));
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()),Issue.Level.SEVERE));
      }
    }
    if (colClass.equals(""String_Node_Str"")) {
      AttributeTable nodeClass=container.getAttributeModel().getNodeTable();
      nodeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
 else     if (colClass.equals(""String_Node_Str"")) {
      AttributeTable edgeClass=container.getAttributeModel().getEdgeTable();
      edgeClass.addColumn(colId,colTitle,attributeType,AttributeOrigin.DATA,defaultValue);
      report.log(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",colTitle,attributeType.getTypeString()));
    }
  }
}",0.998801089918256
190360,"private void refreshModelData(){
  if (consumerThread.getQueue().remainingCapacity() > 0) {
    consumerThread.execute(new Runnable(){
      public void run(){
        Graph visibleGraph=model.getGraphVisible();
        Graph fullGraph=model.getGraph();
        visibleGraph.readLock();
        fullGraph.readLock();
        final int nodesFull=fullGraph.getNodeCount();
        final int nodesVisible=visibleGraph.getNodeCount();
        final int edgesFull=fullGraph.getEdgeCount();
        final int edgesVisible=visibleGraph.getEdgeCount();
        final GraphType graphType=visibleGraph instanceof DirectedGraph ? GraphType.DIRECTED : visibleGraph instanceof UndirectedGraph ? GraphType.UNDIRECTED : GraphType.MIXED;
        fullGraph.readUnlock();
        visibleGraph.readUnlock();
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            String nodePerc=nodesFull > 0 ? ""String_Node_Str"" + formatter.format(nodesVisible / (double)nodesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            String edgePerc=edgesFull > 0 ? ""String_Node_Str"" + formatter.format(edgesVisible / (double)edgesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            nodeLabel.setText(String.valueOf(nodesVisible) + nodePerc);
            edgeLabel.setText(String.valueOf(edgesVisible) + edgePerc);
            graphTypeLabel.setText(graphType.type);
            double percentage=0.5 * nodesVisible / (double)nodesFull + 0.5 * edgesVisible / (double)edgesFull;
            pieChart.refreshChart(percentage);
          }
        }
);
      }
    }
);
  }
}","private void refreshModelData(){
  if (consumerThread.getQueue().remainingCapacity() > 0) {
    consumerThread.execute(new Runnable(){
      public void run(){
        Graph visibleGraph=model.getGraphVisible();
        Graph fullGraph=model.getGraph();
        final int nodesFull=fullGraph.getNodeCount();
        final int nodesVisible=visibleGraph.getNodeCount();
        final int edgesFull=fullGraph.getEdgeCount();
        final int edgesVisible=visibleGraph.getEdgeCount();
        final GraphType graphType=visibleGraph instanceof DirectedGraph ? GraphType.DIRECTED : visibleGraph instanceof UndirectedGraph ? GraphType.UNDIRECTED : GraphType.MIXED;
        SwingUtilities.invokeLater(new Runnable(){
          public void run(){
            String nodePerc=nodesFull > 0 ? ""String_Node_Str"" + formatter.format(nodesVisible / (double)nodesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            String edgePerc=edgesFull > 0 ? ""String_Node_Str"" + formatter.format(edgesVisible / (double)edgesFull) + ""String_Node_Str"" : ""String_Node_Str"";
            nodeLabel.setText(String.valueOf(nodesVisible) + nodePerc);
            edgeLabel.setText(String.valueOf(edgesVisible) + edgePerc);
            graphTypeLabel.setText(graphType.type);
            double percentage=0.5 * nodesVisible / (double)nodesFull + 0.5 * edgesVisible / (double)edgesFull;
            pieChart.refreshChart(percentage);
          }
        }
);
      }
    }
);
  }
}",0.9571522742254448
190361,"public boolean sendDocument(Document document){
  try {
    TransformerFactory factory=TransformerFactory.newInstance();
    Transformer transformer=factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource source=new DOMSource(document);
    transformer.transform(source,result);
    String xmlString=""String_Node_Str"" + sw.toString();
    URL url=new URL(POST_URL);
    URLConnection con=url.openConnection();
    con.setDoInput(true);
    con.setDoOutput(true);
    con.setUseCaches(false);
    con.setDefaultUseCaches(false);
    OutputStreamWriter writer=new OutputStreamWriter(con.getOutputStream());
    writer.write(xmlString);
    writer.flush();
    writer.close();
    InputStreamReader reader=new InputStreamReader(con.getInputStream());
    StringBuilder buf=new StringBuilder();
    char[] cbuf=new char[2048];
    int num;
    while (-1 != (num=reader.read(cbuf))) {
      buf.append(cbuf,0,num);
    }
    String serverResult=buf.toString();
    System.err.println(""String_Node_Str"" + serverResult);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}","public boolean sendDocument(Document document){
  try {
    TransformerFactory factory=TransformerFactory.newInstance();
    Transformer transformer=factory.newTransformer();
    transformer.setOutputProperty(OutputKeys.INDENT,""String_Node_Str"");
    transformer.setOutputProperty(OutputKeys.ENCODING,""String_Node_Str"");
    StringWriter sw=new StringWriter();
    StreamResult result=new StreamResult(sw);
    DOMSource source=new DOMSource(document);
    transformer.transform(source,result);
    String xmlString=""String_Node_Str"" + URLEncoder.encode(sw.toString(),""String_Node_Str"");
    URL url=new URL(POST_URL);
    URLConnection con=url.openConnection();
    con.setDoInput(true);
    con.setDoOutput(true);
    con.setUseCaches(false);
    con.setDefaultUseCaches(false);
    OutputStreamWriter writer=new OutputStreamWriter(con.getOutputStream());
    writer.write(xmlString);
    writer.flush();
    writer.close();
    InputStreamReader reader=new InputStreamReader(con.getInputStream());
    StringBuilder buf=new StringBuilder();
    char[] cbuf=new char[2048];
    int num;
    while (-1 != (num=reader.read(cbuf))) {
      buf.append(cbuf,0,num);
    }
    String serverResult=buf.toString();
    System.err.println(""String_Node_Str"" + serverResult);
    return true;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}",0.9772472957851548
190362,"private void logMessageLog(Report report){
  System.err.flush();
  System.out.flush();
  String ud=System.getProperty(""String_Node_Str"");
  if (ud == null || ""String_Node_Str"".equals(ud)) {
    return;
  }
  File userDir=new File(ud);
  File directory=new File(new File(userDir,""String_Node_Str""),""String_Node_Str"");
  File messagesLog=new File(directory,""String_Node_Str"");
  String log=""String_Node_Str"";
  try {
    byte[] buffer=new byte[(int)messagesLog.length()];
    BufferedInputStream f=new BufferedInputStream(new FileInputStream(messagesLog));
    f.read(buffer);
    log=new String(buffer);
  }
 catch (  Exception e) {
  }
  report.setLog(log);
}","private void logMessageLog(Report report){
  System.err.flush();
  System.out.flush();
  String ud=System.getProperty(""String_Node_Str"");
  if (ud == null || ""String_Node_Str"".equals(ud)) {
    return;
  }
  Handler[] handlers=Logger.getLogger(""String_Node_Str"").getHandlers();
  handlers[0].flush();
  File userDir=new File(ud);
  File directory=new File(new File(userDir,""String_Node_Str""),""String_Node_Str"");
  File messagesLog=new File(directory,""String_Node_Str"");
  String log=""String_Node_Str"";
  try {
    byte[] buffer=new byte[(int)messagesLog.length()];
    BufferedInputStream f=new BufferedInputStream(new FileInputStream(messagesLog));
    f.read(buffer);
    log=new String(buffer);
  }
 catch (  Exception e) {
  }
  report.setLog(log);
}",0.9327671620665252
190363,"private Element createAttribute(Document document,AttributeColumn column) throws Exception {
  Element attributeE=document.createElement(""String_Node_Str"");
  attributeE.setAttribute(""String_Node_Str"",column.getId());
  attributeE.setAttribute(""String_Node_Str"",column.getTitle());
  attributeE.setAttribute(""String_Node_Str"",column.getType().getTypeString().toLowerCase());
  if (column.getDefaultValue() != null) {
    Element defaultE=document.createElement(""String_Node_Str"");
    Text defaultTextE=document.createTextNode(column.getDefaultValue().toString());
    defaultE.appendChild(defaultTextE);
  }
  return attributeE;
}","private Element createAttribute(Document document,AttributeColumn column) throws Exception {
  Element attributeE=document.createElement(""String_Node_Str"");
  attributeE.setAttribute(""String_Node_Str"",column.getId());
  attributeE.setAttribute(""String_Node_Str"",column.getTitle());
switch (column.getType()) {
case INT:
    attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
  break;
case LIST_STRING:
attributeE.setAttribute(""String_Node_Str"",""String_Node_Str"");
break;
case TIME_INTERVAL:
break;
default :
attributeE.setAttribute(""String_Node_Str"",column.getType().getTypeString().toLowerCase());
break;
}
if (column.getDefaultValue() != null) {
Element defaultE=document.createElement(""String_Node_Str"");
Text defaultTextE=document.createTextNode(column.getDefaultValue().toString());
defaultE.appendChild(defaultTextE);
}
return attributeE;
}",0.7647849462365591
190364,"public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  currentMousePositionX=evt.getX();
  int x=currentMousePositionX;
  double w=getWidth();
  if (x > (int)w)   x=(int)w;
  if (x < 0)   x=0;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null) {
    return;
  }
  double w=getWidth();
  currentMousePositionX=evt.getX();
  if (currentMousePositionX > (int)w) {
    currentMousePositionX=(int)w;
  }
  if (currentMousePositionX < 0) {
    currentMousePositionX=0;
  }
  int x=currentMousePositionX;
  int r=settings.selection.visibleHookWidth;
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (latestMousePositionX != null) {
    delta=x - latestMousePositionX;
  }
  latestMousePositionX=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (w != 0) {
newfrom=sf * (1.0 / w);
newto=st * (1.0 / w);
}
this.repaint();
}",0.9211212516297262
190365,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  if (st == 0) {
    if (model != null) {
      sf=model.getFromFloat() * (double)getWidth();
      st=model.getToFloat() * (double)getWidth();
    }
 else {
      sf=0.0;
      st=(double)getWidth();
    }
  }
  int tmMarginTop=2;
  int tmMarginBottom=4;
  int width=getWidth();
  int height=getHeight();
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min || min == Double.NEGATIVE_INFINITY || max == Double.POSITIVE_INFINITY) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int vhw=settings.selection.visibleHookWidth;
  int sw=(int)st - (int)sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
if (model.getUnit() == DateTime.class) {
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
String str=""String_Node_Str"";
if (model.getUnit() == DateTime.class) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
str=fmt.withLocale(LOCALE).print(d);
}
}
 else {
str=new Double(v).toString();
}
int strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  int width=getWidth();
  int height=getHeight();
  if (st == 0) {
    if (model != null) {
      sf=0.0 * (double)width;
      st=1.0 * (double)width;
      newfrom=sf * (1.0 / width);
      newto=st * (1.0 / width);
    }
  }
  int tmMarginTop=2;
  int tmMarginBottom=4;
  settings.update(width,height);
  Graphics2D g2d=(Graphics2D)g;
  g2d.setBackground(settings.background.top);
  g2d.setPaint(settings.background.paint);
  g2d.fillRect(0,tmMarginTop + 1,width,height - tmMarginBottom - 2);
  if (!this.isEnabled()) {
    return;
  }
  if (model == null) {
    return;
  }
  long min=(long)model.getMinValue();
  long max=(long)model.getMaxValue();
  if (max <= min || min == Double.NEGATIVE_INFINITY || max == Double.POSITIVE_INFINITY) {
    return;
  }
  g2d.setRenderingHints(settings.renderingHints);
  int vhw=settings.selection.visibleHookWidth;
  int sw=(int)st - (int)sf;
  if (highlightedComponent != HighlightedComponent.NONE) {
    g2d.setPaint(settings.selection.mouseOverPaint);
switch (highlightedComponent) {
case LEFT_HOOK:
      g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
    g2d.setPaint(settings.selection.paint);
  g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
break;
case CENTER_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)sf + vhw,tmMarginTop,sw - vhw * 2,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
case RIGHT_HOOK:
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw - vhw,height - tmMarginBottom - 1);
g2d.setPaint(settings.selection.mouseOverPaint);
g2d.fillRect((int)st - vhw,tmMarginTop,vhw,height - tmMarginBottom - 1);
break;
}
}
 else {
g2d.setPaint(settings.selection.paint);
g2d.fillRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
}
if (model.getUnit() == DateTime.class) {
paintUpperRulerForInterval(g2d,new DateTime(new Date(min)),new DateTime(new Date(max)));
}
g2d.setColor(settings.defaultStrokeColor);
g2d.drawRect((int)sf,tmMarginTop,sw,height - tmMarginBottom - 1);
double v=model.getValueFromFloat(currentMousePositionX * (1.0 / width));
v+=model.getMinValue();
if (v != Double.NEGATIVE_INFINITY && v != Double.POSITIVE_INFINITY) {
String str=""String_Node_Str"";
int strw=0;
if (model.getUnit() == DateTime.class) {
DateTime d=new DateTime(new Date((long)v));
if (d != null) {
DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"");
str=fmt.withLocale(LOCALE).print(d);
strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 4;
}
}
 else {
str=new Double(v).toString();
strw=(int)(settings.tip.fontMetrics.getStringBounds(str,null)).getWidth() + 14;
}
int px=currentMousePositionX;
if (px + strw >= width) {
px=width - strw;
}
g2d.setPaint(settings.tip.backgroundColor);
g2d.fillRect(px,1,strw,18);
g2d.setPaint(settings.tip.fontColor);
g2d.drawRect(px,1,strw,18);
g2d.setColor(settings.tip.fontColor);
g2d.drawString(str,px + 2,16);
}
}",0.8975762314308053
190366,"public void setModel(TimelineModel model){
  if (model == null) {
    return;
  }
  if (model != this.model) {
    if (this.model != null) {
    }
    this.model=model;
    sf=model.getFromFloat() * (double)getWidth();
    st=model.getToFloat() * (double)getWidth();
  }
}","public void setModel(TimelineModel model){
  if (model == null) {
    return;
  }
  if (model != this.model) {
    if (this.model != null) {
    }
    this.model=model;
    sf=model.getFromFloat() * (double)getWidth();
    st=model.getToFloat() * (double)getWidth();
    repaint();
  }
}",0.962432915921288
190367,"public EqualBooleanFilter getFilter(){
  EqualBooleanFilter f=new EqualBooleanFilter();
  f.setColumn(column);
  return f;
}","public EqualBooleanFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    NodeEqualBooleanFilter f=new NodeEqualBooleanFilter();
    f.setColumn(column);
    return f;
  }
 else {
    EdgeEqualBooleanFilter f=new EdgeEqualBooleanFilter();
    f.setColumn(column);
    return f;
  }
}",0.423963133640553
190368,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    if (AttributeUtils.getDefault().isStringColumn(c)) {
      EqualStringFilterBuilder b=new EqualStringFilterBuilder(c);
      builders.add(b);
    }
 else     if (AttributeUtils.getDefault().isNumberColumn(c)) {
      EqualNumberFilterBuilder b=new EqualNumberFilterBuilder(c);
      builders.add(b);
    }
 else     if (c.getType().equals(AttributeType.BOOLEAN)) {
      EqualBooleanFilterBuilder b=new EqualBooleanFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7184834123222749
190369,"public AttributeNonNullFilter getFilter(){
  AttributeNonNullFilter f=new AttributeNonNullFilter();
  f.setColumn(column);
  return f;
}","public AttributeNonNullFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    NodeAttributeNonNullFilter f=new NodeAttributeNonNullFilter();
    f.setColumn(column);
    return f;
  }
 else {
    EdgeAttributeNonNullFilter f=new EdgeAttributeNonNullFilter();
    f.setColumn(column);
    return f;
  }
}",0.4291845493562232
190370,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    AttributeNonNullFilterBuilder b=new AttributeNonNullFilterBuilder(c);
    builders.add(b);
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7642928786359077
190371,"public AttributeRangelFilter getFilter(){
  AttributeRangelFilter f=new AttributeRangelFilter(column);
  return f;
}","public AttributeRangeFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodeAttributeRangeFilter(column);
  }
 else {
    return new EdgeAttributeRangeFilter(column);
  }
}",0.5696969696969697
190372,"public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  AttributeColumn[] columns=am.getNodeTable().getColumns();
  for (  AttributeColumn c : columns) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}","public FilterBuilder[] getBuilders(){
  List<FilterBuilder> builders=new ArrayList<FilterBuilder>();
  AttributeModel am=Lookup.getDefault().lookup(AttributeController.class).getModel();
  for (  AttributeColumn c : am.getNodeTable().getColumns()) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  for (  AttributeColumn c : am.getEdgeTable().getColumns()) {
    if (AttributeUtils.getDefault().isNumberColumn(c)) {
      AttributeRangeFilterBuilder b=new AttributeRangeFilterBuilder(c);
      builders.add(b);
    }
  }
  return builders.toArray(new FilterBuilder[0]);
}",0.7453625632377741
190373,"public JPanel getPanel(Filter filter){
  RangeUI ui=Lookup.getDefault().lookup(RangeUI.class);
  if (ui != null) {
    return ui.getPanel((AttributeRangelFilter)filter);
  }
  return null;
}","public JPanel getPanel(Filter filter){
  RangeUI ui=Lookup.getDefault().lookup(RangeUI.class);
  if (ui != null) {
    return ui.getPanel((AttributeRangeFilter)filter);
  }
  return null;
}",0.9973614775725592
190374,"public PartitionFilter getFilter(){
  return new PartitionFilter(partition);
}","public PartitionFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodePartitionFilter(partition);
  }
 else {
    return new EdgePartitionFilter(partition);
  }
}",0.5512367491166078
190375,"public PartitionCountFilter getFilter(){
  return new PartitionCountFilter(partition);
}","public PartitionCountFilter getFilter(){
  if (AttributeUtils.getDefault().isNodeColumn(column)) {
    return new NodePartitionCountFilter(partition);
  }
 else {
    return new EdgePartitionCountFilter(partition);
  }
}",0.5714285714285714
190376,"private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
      }
      stringBuilder.append(""String_Node_Str"");
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
      }
      stringBuilder.append(""String_Node_Str"");
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlock();
  writer.append(stringBuilder);
  Progress.finish(progressTicket);
}","private void exportData(Graph graph,AttributeModel attributeModel) throws Exception {
  Progress.start(progressTicket);
  defaultNodeColumns(graph);
  defaultEdgeColumns(graph);
  attributesNodeColumns(attributeModel);
  attributesEdgeColumns(attributeModel);
  StringBuilder stringBuilder=new StringBuilder();
  stringBuilder.append(""String_Node_Str"");
  for (  NodeColumnsGDF c : defaultNodeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : nodeColumns) {
    if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  graph.readLock();
  if (normalize) {
    calculateMinMax(graph);
  }
  int max=graph.getNodeCount() + graph.getEdgeCount();
  Progress.switchToDeterminate(progressTicket,max);
  for (  Node node : graph.getNodes()) {
    NodeData nodeData=node.getNodeData();
    stringBuilder.append(nodeData.getId());
    stringBuilder.append(""String_Node_Str"");
    for (    NodeColumnsGDF c : defaultNodeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,node);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      if (!c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
        Object val=node.getNodeData().getAttributes().getValue(c.getIndex());
        if (val != null) {
          if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
            String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
            stringBuilder.append(quote);
            stringBuilder.append(val.toString());
            stringBuilder.append(quote);
          }
 else {
            stringBuilder.append(val.toString());
          }
        }
        stringBuilder.append(""String_Node_Str"");
      }
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  stringBuilder.append(""String_Node_Str"");
  for (  EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
    if (c.isEnable()) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      stringBuilder.append(c.getType().toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  for (  AttributeColumn c : edgeColumns) {
    if (c.getOrigin().equals(AttributeOrigin.PROPERTY)) {
      stringBuilder.append(c.getTitle());
      stringBuilder.append(""String_Node_Str"");
      DataTypeGDF dataTypeGDF=getDataTypeGDF(c.getType());
      stringBuilder.append(dataTypeGDF.toString().toUpperCase());
      if (c.getDefaultValue() != null) {
        stringBuilder.append(""String_Node_Str"");
        stringBuilder.append(c.getDefaultValue().toString());
      }
      stringBuilder.append(""String_Node_Str"");
    }
  }
  stringBuilder.setLength(stringBuilder.length() - 1);
  stringBuilder.append(""String_Node_Str"");
  EdgeIterable edgeIterable;
  if (graph.getGraphModel().isHierarchical()) {
    HierarchicalGraph hierarchicalGraph=(HierarchicalGraph)graph;
    edgeIterable=hierarchicalGraph.getEdgesAndMetaEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    stringBuilder.append(edge.getSource().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    stringBuilder.append(edge.getTarget().getNodeData().getId());
    stringBuilder.append(""String_Node_Str"");
    for (    EdgeColumnsGDF c : defaultEdgeColumnsGDFs) {
      if (c.isEnable()) {
        c.writeData(stringBuilder,edge);
        stringBuilder.append(""String_Node_Str"");
      }
    }
    for (    AttributeColumn c : nodeColumns) {
      Object val=edge.getEdgeData().getAttributes().getValue(c.getIndex());
      if (val != null) {
        if (c.getType().equals(AttributeType.STRING) || c.getType().equals(AttributeType.LIST_STRING)) {
          String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
          stringBuilder.append(quote);
          stringBuilder.append(val.toString());
          stringBuilder.append(quote);
        }
 else {
          stringBuilder.append(val.toString());
        }
      }
      stringBuilder.append(""String_Node_Str"");
    }
    stringBuilder.setLength(stringBuilder.length() - 1);
    stringBuilder.append(""String_Node_Str"");
    Progress.progress(progressTicket);
  }
  graph.readUnlock();
  writer.append(stringBuilder);
  Progress.finish(progressTicket);
}",0.5166466844969104
190377,"private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().getTextData().isVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}","private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().getTextData().isVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String quote=""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return exportVisibility;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return false;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}",0.9787819704094506
190378,"private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight());
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String quote=(simpleQuotes) ? ""String_Node_Str"" : ""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(edge.getEdgeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}","private void defaultEdgeColumns(final Graph graph){
  EdgeColumnsGDF labelColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String label=edge.getEdgeData().getLabel();
      if (label != null) {
        String quote=!useQuotes ? ""String_Node_Str"" : simpleQuotes ? ""String_Node_Str"" : ""String_Node_Str"";
        builder.append(quote);
        builder.append(label);
        builder.append(quote);
      }
    }
  }
;
  EdgeColumnsGDF weightColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getWeight());
    }
  }
;
  EdgeColumnsGDF directedColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(graph.isDirected(edge));
    }
  }
;
  EdgeColumnsGDF colorColumn=new EdgeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      String quote=""String_Node_Str"";
      builder.append(quote);
      builder.append((int)(edge.getEdgeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(edge.getEdgeData().b() * 255f));
      builder.append(quote);
    }
  }
;
  EdgeColumnsGDF visibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(true);
    }
  }
;
  EdgeColumnsGDF labelVisibleColumn=new EdgeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Edge edge){
      builder.append(edge.getEdgeData().getTextData().isVisible());
    }
  }
;
  defaultEdgeColumnsGDFs=new EdgeColumnsGDF[6];
  defaultEdgeColumnsGDFs[0]=labelColumn;
  defaultEdgeColumnsGDFs[1]=weightColumn;
  defaultEdgeColumnsGDFs[2]=directedColumn;
  defaultEdgeColumnsGDFs[3]=colorColumn;
  defaultEdgeColumnsGDFs[4]=visibleColumn;
  defaultEdgeColumnsGDFs[5]=labelVisibleColumn;
}",0.9813617344998098
190379,"/** 
 * Refresh the preview applet.
 */
public void refreshPreview(){
  System.out.println(""String_Node_Str"" + sketch);
  sketch.refresh();
}","/** 
 * Refresh the preview applet.
 */
public void refreshPreview(){
  sketch.refresh();
}",0.7844827586206896
190380,"/** 
 * Retreives the workspace graph and builds a preview graph from it. For each build, the supervisors' lists of supervised elements are cleared because the previous preview graph is forgotten.
 * @see PreviewController#buildGraph()
 */
public void buildGraph(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  model.clearSupervisors();
  if (graphModel.isUndirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getUndirectedGraph());
  }
 else   if (graphModel.isDirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getDirectedGraph());
  }
 else   if (graphModel.isMixed()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getMixedGraph());
  }
  model.setUpdateFlag(true);
}","/** 
 * Retreives the workspace graph and builds a preview graph from it. For each build, the supervisors' lists of supervised elements are cleared because the previous preview graph is forgotten.
 * @see PreviewController#buildGraph()
 */
public void buildGraph(){
  GraphModel graphModel=Lookup.getDefault().lookup(GraphController.class).getModel();
  model.clearSupervisors();
  if (graphModel.isUndirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getUndirectedGraphVisible());
  }
 else   if (graphModel.isDirected()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getDirectedGraphVisible());
  }
 else   if (graphModel.isMixed()) {
    previewGraph=factory.createPreviewGraph(model,graphModel.getMixedGraphVisible());
  }
  model.setUpdateFlag(true);
}",0.9866666666666668
190381,"public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty()) {
      f=((Date)formatter.parse(from)).getTime();
    }
    if (to != null && !to.isEmpty()) {
      t=((Date)formatter.parse(to)).getTime();
    }
  }
 catch (  ParseException ex) {
    Exceptions.printStackTrace(ex);
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}","public void pushSlice(Workspace workspace,String from,String to,Edge edge){
  AttributeModel am=workspace.getLookup().lookup(AttributeModel.class);
  AttributeColumn col=null;
  if (am.getEdgeTable().hasColumn(COLUMN_KEY)) {
    col=am.getEdgeTable().getColumn(COLUMN_KEY);
  }
 else {
    col=am.getEdgeTable().addColumn(COLUMN_KEY,COLUMN_TYPE);
  }
  DateFormat formatter=new SimpleDateFormat(DATE_FORMAT);
  double f=Double.NEGATIVE_INFINITY, t=Double.POSITIVE_INFINITY;
  try {
    if (from != null && !from.isEmpty())     f=((Date)formatter.parse(from)).getTime();
    if (to != null && !to.isEmpty())     t=((Date)formatter.parse(to)).getTime();
    if (model.getUnit() == null) {
      model.setUnit(DateTime.class);
    }
  }
 catch (  ParseException ex) {
    try {
      if (from != null)       f=Double.parseDouble(from);
      if (to != null)       t=Double.parseDouble(to);
      if (model.getUnit() == null) {
        model.setUnit(Double.class);
      }
    }
 catch (    NumberFormatException ex2) {
      Exceptions.printStackTrace(ex);
    }
  }
  edge.getEdgeData().getAttributes().setValue(col.getIndex(),new TimeInterval(f,t));
}",0.7453353504790721
190382,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
  setOpaque(enabled);
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
  setOpaque(enabled);
}",0.6146095717884131
190383,"public JComponent getComponent(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT,0,0)){
    @Override public void setEnabled(    boolean enabled){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
      setOpaque(enabled);
    }
  }
;
  panel.add(new HierarchyAddonButton());
  panel.setBackground(Color.WHITE);
  return panel;
}","public JComponent getComponent(){
  JPanel panel=new JPanel(new FlowLayout(FlowLayout.RIGHT,0,0)){
    @Override public void setEnabled(    final boolean enabled){
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          for (          Component c : getComponents()) {
            c.setEnabled(enabled);
          }
        }
      }
);
      setOpaque(enabled);
    }
  }
;
  panel.add(new HierarchyAddonButton());
  panel.setBackground(Color.WHITE);
  return panel;
}",0.798175598631699
190384,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
190385,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
190386,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
  selectionBar.setEnabled(enabled);
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
      selectionBar.setEnabled(enabled);
    }
  }
);
}",0.6247086247086248
190387,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
190388,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
190389,"@Override public void setEnabled(boolean enabled){
  for (  Component c : getComponents()) {
    c.setEnabled(enabled);
  }
}","@Override public void setEnabled(final boolean enabled){
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      Component c : getComponents()) {
        c.setEnabled(enabled);
      }
    }
  }
);
}",0.5552407932011332
190390,"public void execute(GraphModel graphModel){
  cancelled=false;
  Progress.start(progressTicket);
  Progress.setDisplayName(progressTicket,""String_Node_Str"");
  HashMap<Integer,Node> nodeMap=new HashMap<Integer,Node>();
  HashMap<Node,Integer> intMap=new HashMap<Node,Integer>();
  Graph graph=graphModel.getGraph();
  graph.readLock();
  SparseMatrix matrix=new SparseMatrix();
  int nodeId=0;
  for (  Edge e : graph.getEdges()) {
    Node source=e.getSource();
    Node target=e.getTarget();
    Integer sourceId;
    Integer targetId;
    if ((sourceId=intMap.get(source)) == null) {
      sourceId=nodeId++;
      intMap.put(source,sourceId);
      nodeMap.put(sourceId,source);
    }
    if ((targetId=intMap.get(target)) == null) {
      targetId=nodeId++;
      intMap.put(target,targetId);
      nodeMap.put(targetId,target);
    }
    double weight=e.getWeight();
    matrix.add(sourceId,targetId,weight);
    if (cancelled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  matrix=matrix.transpose();
  matrix=run(matrix,maxResidual,gammaExp,loopGain,zeroMax);
  if (cancelled) {
    return;
  }
  Map<Integer,ArrayList<Integer>> map=getClusters(matrix);
  if (cancelled) {
    return;
  }
  int clusterNumber=1;
  List<Cluster> clustersList=new ArrayList<Cluster>();
  Set<ArrayList<Integer>> sortedClusters=new HashSet<ArrayList<Integer>>();
  for (  ArrayList<Integer> c : map.values()) {
    if (!sortedClusters.contains(c)) {
      sortedClusters.add(c);
      Node[] nodes=new Node[c.size()];
      int i=0;
      for (      Integer in : c) {
        Node node=nodeMap.get(in);
        nodes[i]=node;
        i++;
      }
      clustersList.add(new MCLCluster(nodes,clusterNumber));
      clusterNumber++;
    }
    if (cancelled) {
      return;
    }
  }
  clusters=clustersList.toArray(new Cluster[0]);
  Progress.finish(progressTicket);
}","public void execute(GraphModel graphModel){
  cancelled=false;
  Progress.start(progressTicket);
  Progress.setDisplayName(progressTicket,""String_Node_Str"");
  HashMap<Integer,Node> nodeMap=new HashMap<Integer,Node>();
  HashMap<Node,Integer> intMap=new HashMap<Node,Integer>();
  Graph graph=graphModel.getGraphVisible();
  graph.readLock();
  SparseMatrix matrix=new SparseMatrix();
  int nodeId=0;
  for (  Edge e : graph.getEdges()) {
    Node source=e.getSource();
    Node target=e.getTarget();
    Integer sourceId;
    Integer targetId;
    if ((sourceId=intMap.get(source)) == null) {
      sourceId=nodeId++;
      intMap.put(source,sourceId);
      nodeMap.put(sourceId,source);
    }
    if ((targetId=intMap.get(target)) == null) {
      targetId=nodeId++;
      intMap.put(target,targetId);
      nodeMap.put(targetId,target);
    }
    double weight=e.getWeight();
    matrix.add(sourceId,targetId,weight);
    if (cancelled) {
      graph.readUnlockAll();
      return;
    }
  }
  graph.readUnlock();
  matrix=matrix.transpose();
  matrix=run(matrix,maxResidual,gammaExp,loopGain,zeroMax);
  if (cancelled) {
    return;
  }
  Map<Integer,ArrayList<Integer>> map=getClusters(matrix);
  if (cancelled) {
    return;
  }
  int clusterNumber=1;
  List<Cluster> clustersList=new ArrayList<Cluster>();
  Set<ArrayList<Integer>> sortedClusters=new HashSet<ArrayList<Integer>>();
  for (  ArrayList<Integer> c : map.values()) {
    if (!sortedClusters.contains(c)) {
      sortedClusters.add(c);
      Node[] nodes=new Node[c.size()];
      int i=0;
      for (      Integer in : c) {
        Node node=nodeMap.get(in);
        nodes[i]=node;
        i++;
      }
      clustersList.add(new MCLCluster(nodes,clusterNumber));
      clusterNumber++;
    }
    if (cancelled) {
      return;
    }
  }
  clusters=clustersList.toArray(new Cluster[0]);
  Progress.finish(progressTicket);
}",0.9981486379264743
190391,"public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
    System.err.println(""String_Node_Str"" + r.getStackTrace()[i].toString());
  }
  dhns.getWriteLock().lock();
}","public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  dhns.getWriteLock().lock();
}",0.8045007032348804
190392,"public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
    System.err.println(""String_Node_Str"" + r.getStackTrace()[i].toString());
  }
  dhns.getReadLock().lock();
}","public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    Throwable r=new RuntimeException();
    int i=0;
    for (i=0; i < r.getStackTrace().length; i++) {
      if (!r.getStackTrace()[i].toString().startsWith(""String_Node_Str"")) {
        break;
      }
    }
  }
  dhns.getReadLock().lock();
}",0.8910891089108911
190393,"public boolean isAdjacent(Edge edge1,Edge edge2){
  if (edge1 == edge2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  checkEdge(edge1);
  checkEdge(edge2);
  return edge1.getSource() == edge2.getSource() || edge1.getSource() == edge2.getTarget() || edge1.getTarget() == edge2.getSource() || edge1.getTarget() == edge2.getTarget();
}","public boolean isAdjacent(Edge edge1,Edge edge2){
  if (edge1 == edge2) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  AbstractEdge absEdge1=checkEdge(edge1);
  AbstractEdge absEdge2=checkEdge(edge2);
  return absEdge1.getSource(view.getViewId()) == absEdge2.getSource(view.getViewId()) || absEdge1.getSource(view.getViewId()) == absEdge2.getTarget(view.getViewId()) || absEdge1.getTarget(view.getViewId()) == absEdge2.getSource(view.getViewId()) || absEdge1.getTarget(view.getViewId()) == absEdge2.getTarget(view.getViewId());
}",0.720620842572062
190394,"public boolean isSelfLoop(Edge edge){
  checkEdge(edge);
  return edge.getSource() == edge.getTarget();
}","public boolean isSelfLoop(Edge edge){
  AbstractEdge absEdge=checkEdge(edge);
  return absEdge.getSource(view.getViewId()) == absEdge.getTarget(view.getViewId());
}",0.7657992565055762
190395,"public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  checkEdge(edge);
  if (edge.getSource() == node) {
    return edge.getTarget();
  }
 else   if (edge.getTarget() == node) {
    return edge.getSource();
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","public Node getOpposite(Node node,Edge edge){
  checkNode(node);
  AbstractEdge absEdge=checkEdge(edge);
  if (absEdge.getSource(view.getViewId()) == node) {
    return absEdge.getTarget();
  }
 else   if (absEdge.getTarget(view.getViewId()) == node) {
    return absEdge.getSource(view.getViewId());
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.862015503875969
190396,"public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  if (ranking instanceof NodeRanking) {
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}","public void transform(Transformer transformer){
  AbstractTransformer abstractTransformer=(AbstractTransformer)transformer;
  Ranking ranking=abstractTransformer.getRanking();
  RankingResultImpl rankingResult=new RankingResultImpl();
  rankingResult.transformer=transformer;
  rankingResult.ranking=ranking;
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  if (ranking instanceof NodeRanking) {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Node node : graph.getNodes().toArray()) {
      Object rank=ranking.getValue(node);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(node,normalizedValue);
        }
      }
      rankingResult.addResult(node,rank,result);
    }
  }
 else {
    ((AbstractRanking)ranking).setGraph(graph);
    for (    Edge edge : graph.getEdges().toArray()) {
      Object rank=ranking.getValue(edge);
      Object result=null;
      if (rank != null) {
        float normalizedValue=ranking.normalize(rank);
        if (transformer.isInBounds(normalizedValue)) {
          result=transformer.transform(edge,normalizedValue);
        }
      }
      rankingResult.addResult(edge,rank,result);
    }
  }
  rankingEventBus.publishResults(rankingResult);
}",0.96161013790533
190397,"public EdgeRanking[] getEdgeRanking(){
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraph();
  List<Ranking> rankingList=new ArrayList<Ranking>();
  for (  AttributeColumn column : attributeController.getModel().getEdgeTable().getColumns()) {
    if (RankingFactory.isNumberColumn(column)) {
      EdgeRanking r=RankingFactory.getEdgeAttributeRanking(column,graph);
      if (r.getMinimumValue() != null && r.getMaximumValue() != null && !r.getMinimumValue().equals(r.getMaximumValue())) {
        rankingList.add(r);
      }
    }
  }
  return rankingList.toArray(new EdgeRanking[0]);
}","public EdgeRanking[] getEdgeRanking(){
  AttributeController attributeController=Lookup.getDefault().lookup(AttributeController.class);
  Graph graph=Lookup.getDefault().lookup(GraphController.class).getModel().getGraphVisible();
  List<Ranking> rankingList=new ArrayList<Ranking>();
  for (  AttributeColumn column : attributeController.getModel().getEdgeTable().getColumns()) {
    if (RankingFactory.isNumberColumn(column)) {
      EdgeRanking r=RankingFactory.getEdgeAttributeRanking(column,graph);
      if (r.getMinimumValue() != null && r.getMaximumValue() != null && !r.getMinimumValue().equals(r.getMaximumValue())) {
        rankingList.add(r);
      }
    }
  }
  return rankingList.toArray(new EdgeRanking[0]);
}",0.9951422623178348
190398,"public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[1];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      try {
        Node n=nodes[0];
        Color[] colors;
        float[] positions;
        if (heatMapPanel.isUsePalette()) {
          colors=heatMapPanel.getSelectedPalette().getColors();
          positions=heatMapPanel.getSelectedPalette().getPositions();
          dontPaintUnreachable=true;
        }
 else {
          gradientColors=colors=heatMapPanel.getGradientColors();
          gradientPositions=positions=heatMapPanel.getGradientPositions();
          dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
        }
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraph() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraph();
        }
 else {
          return;
        }
        LinearGradient linearGradient=new LinearGradient(colors,positions);
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
        algorithm.compute();
        double maxDistance=algorithm.getMaxDistance();
        if (!dontPaintUnreachable) {
          maxDistance++;
        }
        if (maxDistance > 0) {
          for (          Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
            NodeData node=entry.getKey().getNodeData();
            if (!Double.isInfinite(entry.getValue())) {
              float ratio=(float)(entry.getValue() / maxDistance);
              Color c=linearGradient.getValue(ratio);
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
 else             if (!dontPaintUnreachable) {
              Color c=colors[colors.length - 1];
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
          }
        }
        Color c=colors[0];
        n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  return listeners;
}","public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[1];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      try {
        Node n=nodes[0];
        Color[] colors;
        float[] positions;
        if (heatMapPanel.isUsePalette()) {
          colors=heatMapPanel.getSelectedPalette().getColors();
          positions=heatMapPanel.getSelectedPalette().getPositions();
          dontPaintUnreachable=true;
        }
 else {
          gradientColors=colors=heatMapPanel.getGradientColors();
          gradientPositions=positions=heatMapPanel.getGradientPositions();
          dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
        }
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraphVisible();
        }
 else {
          return;
        }
        LinearGradient linearGradient=new LinearGradient(colors,positions);
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
        algorithm.compute();
        double maxDistance=algorithm.getMaxDistance();
        if (!dontPaintUnreachable) {
          maxDistance++;
        }
        if (maxDistance > 0) {
          for (          Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
            NodeData node=entry.getKey().getNodeData();
            if (!Double.isInfinite(entry.getValue())) {
              float ratio=(float)(entry.getValue() / maxDistance);
              Color c=linearGradient.getValue(ratio);
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
 else             if (!dontPaintUnreachable) {
              Color c=colors[colors.length - 1];
              node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
            }
          }
        }
        Color c=colors[0];
        n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
;
  return listeners;
}",0.9970723546633208
190399,"public void clickNodes(Node[] nodes){
  try {
    Node n=nodes[0];
    Color[] colors;
    float[] positions;
    if (heatMapPanel.isUsePalette()) {
      colors=heatMapPanel.getSelectedPalette().getColors();
      positions=heatMapPanel.getSelectedPalette().getPositions();
      dontPaintUnreachable=true;
    }
 else {
      gradientColors=colors=heatMapPanel.getGradientColors();
      gradientPositions=positions=heatMapPanel.getGradientPositions();
      dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
    }
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraph() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraph();
    }
 else {
      return;
    }
    LinearGradient linearGradient=new LinearGradient(colors,positions);
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
    algorithm.compute();
    double maxDistance=algorithm.getMaxDistance();
    if (!dontPaintUnreachable) {
      maxDistance++;
    }
    if (maxDistance > 0) {
      for (      Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
        NodeData node=entry.getKey().getNodeData();
        if (!Double.isInfinite(entry.getValue())) {
          float ratio=(float)(entry.getValue() / maxDistance);
          Color c=linearGradient.getValue(ratio);
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
 else         if (!dontPaintUnreachable) {
          Color c=colors[colors.length - 1];
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
      }
    }
    Color c=colors[0];
    n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
    heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public void clickNodes(Node[] nodes){
  try {
    Node n=nodes[0];
    Color[] colors;
    float[] positions;
    if (heatMapPanel.isUsePalette()) {
      colors=heatMapPanel.getSelectedPalette().getColors();
      positions=heatMapPanel.getSelectedPalette().getPositions();
      dontPaintUnreachable=true;
    }
 else {
      gradientColors=colors=heatMapPanel.getGradientColors();
      gradientPositions=positions=heatMapPanel.getGradientPositions();
      dontPaintUnreachable=heatMapPanel.isDontPaintUnreachable();
    }
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraphVisible();
    }
 else {
      return;
    }
    LinearGradient linearGradient=new LinearGradient(colors,positions);
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,n);
    algorithm.compute();
    double maxDistance=algorithm.getMaxDistance();
    if (!dontPaintUnreachable) {
      maxDistance++;
    }
    if (maxDistance > 0) {
      for (      Entry<Node,Double> entry : algorithm.getDistances().entrySet()) {
        NodeData node=entry.getKey().getNodeData();
        if (!Double.isInfinite(entry.getValue())) {
          float ratio=(float)(entry.getValue() / maxDistance);
          Color c=linearGradient.getValue(ratio);
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
 else         if (!dontPaintUnreachable) {
          Color c=colors[colors.length - 1];
          node.setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
        }
      }
    }
    Color c=colors[0];
    n.getNodeData().setColor(c.getRed() / 255f,c.getGreen() / 255f,c.getBlue() / 255f);
    heatMapPanel.setStatus(NbBundle.getMessage(HeatMap.class,""String_Node_Str"") + new DecimalFormat(""String_Node_Str"").format(algorithm.getMaxDistance()));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.9965500246426812
190400,"public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[2];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      Node n=nodes[0];
      if (sourceNode == null) {
        sourceNode=n;
        shortestPathPanel.setResult(""String_Node_Str"");
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
 else       if (n != sourceNode) {
        color=shortestPathPanel.getColor();
        float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
        Node targetNode=n;
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraph() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraph();
        }
 else {
          return;
        }
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
        algorithm.compute();
        double distance;
        if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
          targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(targetNode);
          Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
          while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
            predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectEdge(predecessorEdge);
            predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectNode(predecessorEdge.getSource());
            predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
          }
          predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectEdge(predecessorEdge);
          sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(sourceNode);
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
        }
 else {
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        }
        sourceNode=null;
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
    }
  }
;
  listeners[1]=new MouseClickEventListener(){
    public void mouseClick(    int[] positionViewport,    float[] position3d){
      if (sourceNode != null) {
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        sourceNode=null;
      }
 else {
        VizController.getInstance().resetSelection();
      }
    }
  }
;
  return listeners;
}","public ToolEventListener[] getListeners(){
  listeners=new ToolEventListener[2];
  listeners[0]=new NodeClickEventListener(){
    public void clickNodes(    Node[] nodes){
      Node n=nodes[0];
      if (sourceNode == null) {
        sourceNode=n;
        shortestPathPanel.setResult(""String_Node_Str"");
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
 else       if (n != sourceNode) {
        color=shortestPathPanel.getColor();
        float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
        Node targetNode=n;
        GraphController gc=Lookup.getDefault().lookup(GraphController.class);
        DirectedGraph graph=null;
        if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
          graph=(DirectedGraph)gc.getModel().getGraphVisible();
        }
 else {
          return;
        }
        BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
        algorithm.compute();
        double distance;
        if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
          targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(targetNode);
          Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
          while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
            predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectEdge(predecessorEdge);
            predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
            VizController.getInstance().selectNode(predecessorEdge.getSource());
            predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
          }
          predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectEdge(predecessorEdge);
          sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
          VizController.getInstance().selectNode(sourceNode);
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
        }
 else {
          shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        }
        sourceNode=null;
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
      }
    }
  }
;
  listeners[1]=new MouseClickEventListener(){
    public void mouseClick(    int[] positionViewport,    float[] position3d){
      if (sourceNode != null) {
        shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
        sourceNode=null;
      }
 else {
        VizController.getInstance().resetSelection();
      }
    }
  }
;
  return listeners;
}",0.997675962815405
190401,"public void clickNodes(Node[] nodes){
  Node n=nodes[0];
  if (sourceNode == null) {
    sourceNode=n;
    shortestPathPanel.setResult(""String_Node_Str"");
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
 else   if (n != sourceNode) {
    color=shortestPathPanel.getColor();
    float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
    Node targetNode=n;
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraph() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraph();
    }
 else {
      return;
    }
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
    algorithm.compute();
    double distance;
    if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
      targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(targetNode);
      Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
      while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
        predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectEdge(predecessorEdge);
        predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectNode(predecessorEdge.getSource());
        predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
      }
      predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectEdge(predecessorEdge);
      sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(sourceNode);
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
    }
 else {
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
    }
    sourceNode=null;
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
}","public void clickNodes(Node[] nodes){
  Node n=nodes[0];
  if (sourceNode == null) {
    sourceNode=n;
    shortestPathPanel.setResult(""String_Node_Str"");
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
 else   if (n != sourceNode) {
    color=shortestPathPanel.getColor();
    float[] colorArray=new float[]{color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f};
    Node targetNode=n;
    GraphController gc=Lookup.getDefault().lookup(GraphController.class);
    DirectedGraph graph=null;
    if (gc.getModel().getGraphVisible() instanceof DirectedGraph) {
      graph=(DirectedGraph)gc.getModel().getGraphVisible();
    }
 else {
      return;
    }
    BellmanFordShortestPathAlgorithm algorithm=new BellmanFordShortestPathAlgorithm(graph,sourceNode);
    algorithm.compute();
    double distance;
    if ((distance=algorithm.getDistances().get(targetNode)) != Double.POSITIVE_INFINITY) {
      targetNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(targetNode);
      Edge predecessorEdge=algorithm.getPredecessorIncoming(targetNode);
      while (predecessorEdge != null && predecessorEdge.getSource() != sourceNode) {
        predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectEdge(predecessorEdge);
        predecessorEdge.getSource().getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
        VizController.getInstance().selectNode(predecessorEdge.getSource());
        predecessorEdge=algorithm.getPredecessorIncoming(predecessorEdge.getSource());
      }
      predecessorEdge.getEdgeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectEdge(predecessorEdge);
      sourceNode.getNodeData().setColor(colorArray[0],colorArray[1],colorArray[2]);
      VizController.getInstance().selectNode(sourceNode);
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str"",distance));
    }
 else {
      shortestPathPanel.setResult(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
    }
    sourceNode=null;
    shortestPathPanel.setStatus(NbBundle.getMessage(ShortestPath.class,""String_Node_Str""));
  }
}",0.996969696969697
190402,"public void init(){
  PropertyChangeEvent evt=new PropertyChangeEvent(this,""String_Node_Str"",null,null);
  for (  PropertyChangeListener l : listeners) {
    l.propertyChange(evt);
  }
}","public void init(){
  final PropertyChangeEvent evt=new PropertyChangeEvent(this,""String_Node_Str"",null,null);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      for (      PropertyChangeListener l : listeners) {
        l.propertyChange(evt);
      }
    }
  }
);
}",0.7705263157894737
190403,"public double getAttributeValue(int from,int to);","/** 
 * @param from
 * @param to
 * @return
 */
public double getAttributeValue(int from,int to);",0.6712328767123288
190404,"public void setRangeFromRealValues(double from,double to);","/** 
 * Set the range using real values
 * @param from
 * @param to
 */
public void setRangeFromRealValues(double from,double to);",0.6170212765957447
190405,public double getFromFloat();,"/** 
 * @return
 */
public double getFromFloat();",0.7435897435897436
190406,public double getFromValue();,"/** 
 * @return
 */
public double getFromValue();",0.7435897435897436
190407,public double getMaxValue();,"/** 
 * @return
 */
public double getMaxValue();",0.7368421052631579
190408,public void setToValue(double to);,"/** 
 * @param to
 */
public void setToValue(double to);",0.7555555555555555
190409,public void setToFloat(double to);,"/** 
 * @param to
 */
public void setToFloat(double to);",0.7555555555555555
190410,public void addListener(TimelineModelListener listener);,"/** 
 * @param listener
 */
public void addListener(TimelineModelListener listener);",0.8
190411,public String getLastAttributeLabel();,"/** 
 * @return
 */
public String getLastAttributeLabel();",0.7916666666666666
190412,public double getRangeSizeFloat();,"/** 
 * @return
 */
public double getRangeSizeFloat();",0.7727272727272727
190413,public void removeListener(TimelineModelListener listener);,"/** 
 * @param listener
 */
public void removeListener(TimelineModelListener listener);",0.8082191780821918
190414,public double getTotalSize();,"/** 
 * @return
 */
public double getTotalSize();",0.7435897435897436
190415,public void setFromValue(double from);,"/** 
 * @param from
 */
public void setFromValue(double from);",0.76
190416,"public void setRangeFromFloat(double from,double to);","/** 
 * @param from
 * @param to
 */
public void setRangeFromFloat(double from,double to);",0.7412587412587412
190417,public void setMaxValue(double max);,"/** 
 * @param max
 */
public void setMaxValue(double max);",0.7578947368421053
190418,public double getMinValue();,"/** 
 * @return
 */
public double getMinValue();",0.7368421052631579
190419,public double getRangeSizeValue();,"/** 
 * @return
 */
public double getRangeSizeValue();",0.7727272727272727
190420,"public void setMinMax(double min,double max);","/** 
 * @param min
 * @param max
 */
public void setMinMax(double min,double max);",0.7086614173228346
190421,public double getToValue();,"/** 
 * @return
 */
public double getToValue();",0.7297297297297297
190422,"public String getAttributeLabel(int from,int to);","/** 
 * @param from
 * @param to
 * @return
 */
public String getAttributeLabel(int from,int to);",0.6712328767123288
190423,public TimeInterval getTimeInterval();,"/** 
 * @return
 */
public TimeInterval getTimeInterval();",0.7916666666666666
190424,public void setFromFloat(double from);,"/** 
 * @param from
 */
public void setFromFloat(double from);",0.76
190425,public double getToFloat();,"/** 
 * @return
 */
public double getToFloat();",0.7297297297297297
190426,public void setMinValue(double min);,"/** 
 * @param min
 */
public void setMinValue(double min);",0.7578947368421053
190427,"public void mouseDragged(MouseEvent evt){
  int x=evt.getX();
  double w=getWidth();
  int r=settings.selection.visibleHookWidth;
  double sf=(model.getFromFloat() * w);
  double st=(model.getToFloat() * w);
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (mousex != null) {
    delta=x - mousex;
  }
  mousex=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (model != null && w != 0) {
model.setRangeFromFloat(sf * (1.0 / w),st * (1.0 / w));
}
this.repaint();
}","public void mouseDragged(MouseEvent evt){
  if (model == null)   return;
  int x=evt.getX();
  double w=getWidth();
  int r=settings.selection.visibleHookWidth;
  double sf=(model.getFromFloat() * w);
  double st=(model.getToFloat() * w);
  if (currentState == TimelineState.IDLE) {
    if (inRange(x,(int)sf - 1,(int)sf + r + 1)) {
      highlightedComponent=HighlightedComponent.LEFT_HOOK;
      currentState=TimelineState.RESIZE_FROM;
    }
 else     if (inRange(x,(int)sf + r,(int)st - r)) {
      highlightedComponent=HighlightedComponent.CENTER_HOOK;
      currentState=TimelineState.MOVING;
    }
 else     if (inRange(x,(int)st - r - 1,(int)st + 1)) {
      highlightedComponent=HighlightedComponent.RIGHT_HOOK;
      currentState=TimelineState.RESIZE_TO;
    }
  }
  double delta=0;
  if (mousex != null) {
    delta=x - mousex;
  }
  mousex=x;
switch (currentState) {
case RESIZE_FROM:
    if ((sf + delta <= 0)) {
      sf=0;
    }
 else     if (Math.abs(st - sf + delta) > settings.selection.minimalWidth) {
      sf+=delta;
    }
 else {
    }
  break;
case RESIZE_TO:
if ((st + delta >= w)) {
  st=w;
}
 else if (Math.abs((st + delta) - sf) > settings.selection.minimalWidth) {
  st+=delta;
}
break;
case MOVING:
if ((sf + delta <= 0)) {
sf=0;
}
 else if (st + delta >= w) {
st=w;
}
 else {
sf+=delta;
st+=delta;
}
break;
}
if (model != null && w != 0) {
model.setRangeFromFloat(sf * (1.0 / w),st * (1.0 / w));
}
this.repaint();
}",0.9891494574728736
190428,"private void paintSmallGraduations(Graphics2D g2d,int x,int y,int numOfGrads){
  int width=y - x;
  int height=getHeight();
  int leftMargin=x;
  int topMargin=height - settings.informations.fontSize - 2;
  for (int i=1; i < numOfGrads; i++) {
    int xi=leftMargin + i * (width / numOfGrads);
    g2d.drawLine(xi,topMargin,xi,height - settings.informations.textBottomMargin);
  }
}","private void paintSmallGraduations(Graphics2D g2d,int x,int y,int numOfGrads){
  int width=y - x;
  int height=getHeight();
  int leftMargin=x;
  int topMargin=height - settings.informations.fontSize - 2;
  int unitSize=3;
  if (numOfGrads > (width / unitSize)) {
    return;
  }
  for (int i=1; i < numOfGrads; i++) {
    int xi=leftMargin + i * (width / numOfGrads);
    g2d.drawLine(xi,topMargin,xi,height - settings.informations.textBottomMargin);
  }
}",0.9106078665077472
190429,"private void paintUpperRulerForInterval(Graphics2D g2d,DateTime dtFrom,DateTime dtTo){
  g2d.setFont(settings.informations.font);
  g2d.setColor(settings.informations.fontColor);
  int leftMargin=settings.informations.leftMargin;
  int textTopPosition=settings.informations.textTopPosition;
  int width=getWidth();
  int height=getHeight();
  Interval interval=new Interval(dtFrom,dtTo);
  Period p=interval.toPeriod(PeriodType.days());
  int n=p.getDays();
  int unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsShortText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.days());
  n=p.getDays();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getDayOfMonth() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.months());
  n=p.getMonths();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsShortText(),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getMonthOfYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.years());
  n=p.getYears();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i),dtFrom.plusYears(i + 1)).getMonths());
    }
    return;
  }
  int group=10;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=20;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=50;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=100;
  n=p.getYears() / group;
  if (n / 100 < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
  }
  return;
}","private void paintUpperRulerForInterval(Graphics2D g2d,DateTime dtFrom,DateTime dtTo){
  g2d.setFont(settings.informations.font);
  g2d.setColor(settings.informations.fontColor);
  int leftMargin=settings.informations.leftMargin;
  int textTopPosition=settings.informations.textTopPosition;
  int width=getWidth();
  int height=getHeight();
  Interval interval=new Interval(dtFrom,dtTo);
  Period p=interval.toPeriod(PeriodType.days());
  int n=p.getDays();
  int unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusDays(i).dayOfMonth().getAsShortText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.days());
  n=p.getDays();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getDayOfMonth() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Hours.hoursBetween(dtFrom.plusDays(i),dtFrom.plusDays(i + 1)).getHours());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.months());
  n=p.getMonths();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(dtFrom.plusMonths(i).monthOfYear().getAsShortText(LOCALE),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getMonthOfYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Days.daysBetween(dtFrom.plusMonths(i),dtFrom.plusMonths(i + 1)).getDays());
    }
    return;
  }
  p=interval.toPeriod(PeriodType.years());
  n=p.getYears();
  unitSize=(int)(settings.informations.fontMetrics.getStringBounds(""String_Node_Str"",null)).getWidth();
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i),dtFrom.plusYears(i + 1)).getMonths());
    }
    return;
  }
  int group=10;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=20;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=50;
  n=p.getYears() / group;
  if (n < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
    return;
  }
  group=100;
  n=p.getYears() / group;
  if (n / 100 < (width / unitSize)) {
    for (int i=0; i < n; i++) {
      g2d.drawString(""String_Node_Str"" + (dtFrom.getYear() + i * group),leftMargin + 2 + i * (width / n),textTopPosition);
      g2d.drawLine(leftMargin + i * (width / n),2,leftMargin + i * (width / n),height - settings.informations.textBottomMargin);
      paintSmallGraduations(g2d,leftMargin + i * (width / n),leftMargin + (i + 1) * (width / n),Months.monthsBetween(dtFrom.plusYears(i * group),dtFrom.plusYears((i + 1) * group)).getMonths());
    }
  }
  return;
}",0.9983386404541048
190430,"public synchronized void setRangeFromRealValues(double from,double to){
  if (from >= to)   return;
  fromValue=from;
  toValue=to;
  filter.setValue(new Range(from,to));
}","public synchronized void setRangeFromRealValues(double from,double to){
  if (from >= to)   return;
  fromValue=from;
  toValue=to;
  if (filter != null)   filter.setValue(new Range(from,to));
}",0.9398907103825136
190431,"public synchronized void setToValue(double to){
  if (to <= fromValue)   return;
  toValue=to;
}","public synchronized void setToValue(double to){
  toValue=to;
}",0.7924528301886793
190432,"public synchronized void setToFloat(double to){
  if (to <= toFloat)   return;
  toFloat=to;
  setToValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setToFloat(double to){
  toFloat=to;
  setToValue(getMinValue() + getFromFloat() * getTotalSize());
  if (filter != null)   filter.setValue(new Range(getFromValue(),getToValue()));
}",0.3241758241758242
190433,"public synchronized void setFromValue(double from){
  if (from >= toValue)   return;
  fromValue=from;
}","public synchronized void setFromValue(double from){
  fromValue=from;
}",0.8114285714285714
190434,"public synchronized void setMaxValue(double max){
  if (max <= minValue)   return;
  this.maxValue=max;
  setFromValue(getMaxValue() + getToFloat() * getTotalSize());
}","public synchronized void setMaxValue(double max){
  this.maxValue=max;
  setFromValue(getMaxValue() + getToFloat() * getTotalSize());
}",0.8910891089108911
190435,"public synchronized void setFromFloat(double from){
  if (from >= toFloat)   return;
  fromFloat=from;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setFromFloat(double from){
  fromFloat=from;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
  if (filter != null)   filter.setValue(new Range(getFromValue(),getToValue()));
}",0.3264248704663212
190436,"public synchronized void setMinValue(double min){
  if (min >= maxValue)   return;
  this.minValue=min;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}","public synchronized void setMinValue(double min){
  this.minValue=min;
  setFromValue(getMinValue() + getFromFloat() * getTotalSize());
}",0.8925081433224755
190437,"private void afterTaking(){
  WindowManager.getDefault().getMainWindow().setCursor(Cursor.getDefaultCursor());
  if (finishedMessage && file != null) {
    String msg=NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str"",file.getName());
    JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),msg,NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
  }
}","private void afterTaking(){
  WindowManager.getDefault().getMainWindow().setCursor(Cursor.getDefaultCursor());
  if (finishedMessage && file != null) {
    final String msg=NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str"",file.getName());
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        JOptionPane.showMessageDialog(WindowManager.getDefault().getMainWindow(),msg,NbBundle.getMessage(ScreenshotMaker.class,""String_Node_Str""),JOptionPane.INFORMATION_MESSAGE);
      }
    }
);
  }
}",0.8956796628029505
190438,"public void fatalError(Throwable t){
  Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause());
}","public void fatalError(Throwable t){
  Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause() != null ? t.getCause() : t);
}",0.9032258064516128
190439,"public LayoutModelImpl(){
  listeners=new ArrayList<PropertyChangeListener>();
  savedProperties=new HashMap<LayoutPropertyKey,Object>();
  executor=new LongTaskExecutor(true,""String_Node_Str"",5);
  executor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      setRunning(false);
    }
  }
);
  executor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause());
    }
  }
);
}","public LayoutModelImpl(){
  listeners=new ArrayList<PropertyChangeListener>();
  savedProperties=new HashMap<LayoutPropertyKey,Object>();
  executor=new LongTaskExecutor(true,""String_Node_Str"",5);
  executor.setLongTaskListener(new LongTaskListener(){
    public void taskFinished(    LongTask task){
      setRunning(false);
    }
  }
);
  executor.setDefaultErrorHandler(new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      Logger.getLogger(""String_Node_Str"").log(Level.SEVERE,""String_Node_Str"",t.getCause() != null ? t.getCause() : t);
    }
  }
);
}",0.9761273209549072
190440,"public void writeLock(){
  dhns.getWriteLock().lock();
}","public void writeLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    System.err.println(""String_Node_Str"");
  }
  dhns.getWriteLock().lock();
}",0.5410628019323671
190441,"public void readLock(){
  dhns.getReadLock().lock();
}","public void readLock(){
  if (SwingUtilities.isEventDispatchThread()) {
    System.err.println(""String_Node_Str"");
  }
  dhns.getReadLock().lock();
}",0.5320197044334976
190442,"public NodeDataTable(){
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        return pattern.matcher(((ImmutableTreeNode)value).getNode().getNodeData().getLabel()).find();
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
}","public NodeDataTable(){
  outlineTable=new Outline();
  quickFilter=new QuickFilter(){
    public boolean accept(    Object value){
      if (value == null) {
        return false;
      }
      if (value instanceof ImmutableTreeNode) {
        String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
        if (label != null) {
          return pattern.matcher(label).find();
        }
        return false;
      }
      return pattern.matcher(value.toString()).find();
    }
  }
;
  outlineTable.addMouseListener(new PopupAdapter());
}",0.8471275559883155
190443,"public boolean accept(Object value){
  if (value == null) {
    return false;
  }
  if (value instanceof ImmutableTreeNode) {
    return pattern.matcher(((ImmutableTreeNode)value).getNode().getNodeData().getLabel()).find();
  }
  return pattern.matcher(value.toString()).find();
}","public boolean accept(Object value){
  if (value == null) {
    return false;
  }
  if (value instanceof ImmutableTreeNode) {
    String label=((ImmutableTreeNode)value).getNode().getNodeData().getLabel();
    if (label != null) {
      return pattern.matcher(label).find();
    }
    return false;
  }
  return pattern.matcher(value.toString()).find();
}",0.658267716535433
190444,"private void refreshPie(){
  if (model.getSelectedPartition() != null) {
    pieLink.setEnabled(true);
    if (model.isPie()) {
      pieLink.setText(HIDE_PIE);
      partitionPie=new PartitionPie();
      partitionPie.setup(model.getSelectedPartition());
      remove(centerScrollPane);
      add(partitionPie,BorderLayout.CENTER);
      revalidate();
      repaint();
      return;
    }
 else {
      pieLink.setText(SHOW_PIE);
    }
  }
 else {
    pieLink.setText(SHOW_PIE);
    pieLink.setEnabled(false);
  }
  if (!isAncestorOf(centerScrollPane)) {
    remove(partitionPie);
    add(centerScrollPane,BorderLayout.CENTER);
    revalidate();
    repaint();
  }
}","private void refreshPie(){
  if (model.getSelectedPartition() != null) {
    pieLink.setEnabled(true);
    if (model.isPie()) {
      pieLink.setText(HIDE_PIE);
      partitionPie=new PartitionPie();
      SwingUtilities.invokeLater(new Runnable(){
        public void run(){
          partitionPie.setup(model.getSelectedPartition());
          remove(centerScrollPane);
          add(partitionPie,BorderLayout.CENTER);
          revalidate();
          repaint();
        }
      }
);
      return;
    }
 else {
      pieLink.setText(SHOW_PIE);
    }
  }
 else {
    pieLink.setText(SHOW_PIE);
    pieLink.setEnabled(false);
  }
  if (!isAncestorOf(centerScrollPane)) {
    remove(partitionPie);
    add(centerScrollPane,BorderLayout.CENTER);
    revalidate();
    repaint();
  }
}",0.9083390764989664
190445,"private void setSelectedLayout(LayoutBuilder builder){
  controller.setLayout(model.getLayout(builder));
}","private void setSelectedLayout(LayoutBuilder builder){
  controller.setLayout(builder != null ? model.getLayout(builder) : null);
}",0.8945147679324894
190446,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  miniLabels.add(new EdgeMiniLabelB1(this));
  miniLabels.add(new EdgeMiniLabelB2(this));
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected DirectedEdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness,node1,node2,label,labelSize);
  arrows.add(new EdgeArrowB1Out(this));
  arrows.add(new EdgeArrowB2In(this));
  if (node1.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB1(this));
  }
  if (node2.hasLabel()) {
    miniLabels.add(new EdgeMiniLabelB2(this));
  }
}",0.9510703363914372
190447,"/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
}","/** 
 * Constructor.
 * @param parent     the parent graph of the edge
 * @param thickness  the edge's thickness
 * @param node1      the edge's node 1
 * @param node2      the edge's node 2
 * @param label      the edge's label
 * @param labelSize  the edge's label size
 */
protected EdgeImpl(GraphImpl parent,float thickness,NodeImpl node1,NodeImpl node2,String label,float labelSize){
  super(parent,thickness);
  this.node1=node1;
  this.node2=node2;
  direction=new Vector(this.node2.getPosition());
  direction.sub(new Vector(this.node1.getPosition()));
  length=direction.mag();
  direction.normalize();
  genCurves();
  if (null != label) {
    this.label=new EdgeLabelImpl(this,label,labelSize);
  }
 else {
    this.label=null;
  }
}",0.977319587628866
190448,"/** 
 * Constructor.
 * @param parent  the parent graph
 * @param label   the node label
 * @param x       the 'x' position component
 * @param y       the 'y' position component
 * @param radius  the node radius
 * @param r       the red color component
 * @param g       the green color component
 * @param b       the blue color component
 */
public NodeImpl(GraphImpl parent,float x,float y,float radius,String label,float labelSize,float r,float g,float b){
  this.parent=parent;
  this.position=new PointImpl(x,y);
  this.radius=radius;
  this.originalColor=new SimpleColor(r,g,b,0);
  this.label=new NodeLabelImpl(this,label,labelSize);
  this.labelBorder=new NodeLabelBorderImpl(this);
  Vector topLeftVector=new Vector(position);
  topLeftVector.sub(radius,radius,0);
  topLeftPosition=new PointImpl(topLeftVector);
  Vector bottomRightVector=new Vector(position);
  bottomRightVector.add(radius,radius,0);
  bottomRightPosition=new PointImpl(bottomRightVector);
  getNodeSupervisor().addNode(this);
}","/** 
 * Constructor.
 * @param parent  the parent graph
 * @param label   the node label
 * @param x       the 'x' position component
 * @param y       the 'y' position component
 * @param radius  the node radius
 * @param r       the red color component
 * @param g       the green color component
 * @param b       the blue color component
 */
public NodeImpl(GraphImpl parent,float x,float y,float radius,String label,float labelSize,float r,float g,float b){
  this.parent=parent;
  this.position=new PointImpl(x,y);
  this.radius=radius;
  this.originalColor=new SimpleColor(r,g,b,0);
  if (label != null) {
    this.label=new NodeLabelImpl(this,label,labelSize);
    this.labelBorder=new NodeLabelBorderImpl(this);
  }
 else {
    this.label=null;
    this.labelBorder=null;
  }
  Vector topLeftVector=new Vector(position);
  topLeftVector.sub(radius,radius,0);
  topLeftPosition=new PointImpl(topLeftVector);
  Vector bottomRightVector=new Vector(position);
  bottomRightVector.add(radius,radius,0);
  bottomRightPosition=new PointImpl(bottomRightVector);
  getNodeSupervisor().addNode(this);
}",0.9568924680246328
190449,"/** 
 * Colors the given node label border with the node label border colorizer.
 * @param node  the node label border to color
 */
private void colorNodeLabelBorder(NodeLabelBorderImpl nodeLabelBorder){
  nodeLabelBorderColorizer.color(nodeLabelBorder);
}","/** 
 * Colors the given node label border with the node label border colorizer.
 * @param node  the node label border to color
 */
private void colorNodeLabelBorder(NodeLabelBorderImpl nodeLabelBorder){
  if (nodeLabelBorder != null) {
    nodeLabelBorderColorizer.color(nodeLabelBorder);
  }
}",0.9292196007259528
190450,"/** 
 * Updates the node label by shortening its value or by reverting its original one.
 */
private void updateLabelValue(NodeLabelImpl nodeLabel){
  if (shortenLabelsFlag) {
    shortenNodeLabel(nodeLabel);
  }
 else {
    revertLabel(nodeLabel);
  }
}","/** 
 * Updates the node label by shortening its value or by reverting its original one.
 */
private void updateLabelValue(NodeLabelImpl nodeLabel){
  if (nodeLabel != null) {
    if (shortenLabelsFlag) {
      shortenNodeLabel(nodeLabel);
    }
 else {
      revertLabel(nodeLabel);
    }
  }
}",0.8779599271402551
190451,"/** 
 * Colors the given node label with the node label colorizer.
 * @param node  the node label to color
 */
private void colorNodeLabel(NodeLabelImpl nodeLabel){
  nodeLabelColorizer.color(nodeLabel);
}","/** 
 * Colors the given node label with the node label colorizer.
 * @param node  the node label to color
 */
private void colorNodeLabel(NodeLabelImpl nodeLabel){
  if (nodeLabel != null) {
    nodeLabelColorizer.color(nodeLabel);
  }
}",0.9255079006772008
190452,"private void walkFile(BufferedReader reader) throws Exception {
  int cptLine=0;
  while (reader.ready() && !cancel) {
    String line=reader.readLine();
    if (!isComment(line)) {
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length > 0) {
        if (tokens[0].equals(""String_Node_Str"")) {
          parseNodes(tokens);
        }
 else         if (tokens[0].equals(""String_Node_Str"")) {
          parseEdge(tokens,cptLine);
        }
      }
    }
    cptLine++;
  }
}","private void walkFile(BufferedReader reader) throws Exception {
  int cptLine=0;
  int state=0;
  while (reader.ready() && !cancel) {
    String line=reader.readLine();
    if (!isComment(line)) {
      String[] tokens=line.split(""String_Node_Str"");
      if (tokens.length > 0) {
        if (state == 0) {
          if (tokens[0].equals(""String_Node_Str"")) {
            parseNodes(tokens);
          }
 else           if (tokens[0].equals(""String_Node_Str"")) {
            parseEdge(tokens,cptLine);
          }
 else           if (tokens[0].equals(""String_Node_Str"")) {
            state=1;
          }
        }
        if (state == 1) {
          return;
        }
      }
    }
    cptLine++;
  }
}",0.8140116763969975
190453,"/** 
 * Colors the label of the supervised nodes with the node label colorizer.
 */
private void colorNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    colorNodeLabel(n.getLabel());
  }
}","/** 
 * Colors the label of the supervised nodes with the node label colorizer.
 */
private void colorNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    if (n.hasLabel()) {
      colorNodeLabel(n.getLabel());
    }
  }
}",0.9245283018867924
190454,"/** 
 * Shortens the labels of the supervised nodes.
 */
private void shortenNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    shortenNodeLabel(n.getLabel());
  }
}","/** 
 * Shortens the labels of the supervised nodes.
 */
private void shortenNodeLabels(){
  for (  NodeImpl n : supervisedNodes) {
    if (n.hasLabel()) {
      shortenNodeLabel(n.getLabel());
    }
  }
}",0.9153439153439152
190455,"/** 
 * Constructor.
 */
public PreviewControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      updateFlag=true;
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      graphSheet=null;
    }
  }
);
}","/** 
 * Constructor.
 */
public PreviewControllerImpl(){
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    updateFlag=true;
  }
  pc.addWorkspaceListener(new WorkspaceListener(){
    public void initialize(    Workspace workspace){
    }
    public void select(    Workspace workspace){
      updateFlag=true;
    }
    public void unselect(    Workspace workspace){
    }
    public void close(    Workspace workspace){
    }
    public void disable(){
      graphSheet=null;
    }
  }
);
}",0.9367327667610954
190456,"private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  PropertySheet ps=new PropertySheet();
  ps.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(ps,BorderLayout.CENTER);
  PreviewUIController.findInstance();
}","private PreviewSettingsTopComponent(){
  initComponents();
  setName(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  setToolTipText(NbBundle.getMessage(PreviewSettingsTopComponent.class,""String_Node_Str""));
  PropertySheet ps=new PropertySheet();
  ps.setNodes(new Node[]{new PreviewNode()});
  propertiesPanel.add(ps,BorderLayout.CENTER);
  ProjectController pc=Lookup.getDefault().lookup(ProjectController.class);
  if (pc.getCurrentWorkspace() != null) {
    refreshButton.setEnabled(true);
  }
  PreviewUIController.findInstance();
}",0.837782340862423
190457,"@Override public void afterDisplay(GL gl,GLU glu){
  if (vizConfig.isSelectionEnable()) {
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    gl.glOrtho(0,graphDrawable.getViewportWidth(),0,graphDrawable.getViewportHeight(),-1,1);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    currentSelectionArea.drawArea(gl,glu);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPopMatrix();
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPopMatrix();
  }
  graphIO.trigger();
}","@Override public void afterDisplay(GL gl,GLU glu){
  if (vizConfig.isSelectionEnable() && currentSelectionArea != null) {
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    gl.glOrtho(0,graphDrawable.getViewportWidth(),0,graphDrawable.getViewportHeight(),-1,1);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPushMatrix();
    gl.glLoadIdentity();
    currentSelectionArea.drawArea(gl,glu);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glPopMatrix();
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glPopMatrix();
  }
  graphIO.trigger();
}",0.9715302491103204
190458,"public HierarchicalDirectedGraphImplFiltered(Dhns dhns,GraphStructure graphStructure,View view){
  super(dhns,graphStructure);
  this.view=(ViewImpl)view;
}","public HierarchicalDirectedGraphImplFiltered(Dhns dhns,GraphStructure graphStructure,View view){
  super(dhns,graphStructure,view);
  this.delegate=new HierarchicalDirectedGraphImpl(dhns,structure);
}",0.8033707865168539
190459,"@Override public Edge getEdge(Node source,Node target){
  readLock();
  view.checkUpdate();
  AbstractNode sourceNode=checkNode(source);
  AbstractNode targetNode=checkNode(target);
  Predicate<AbstractEdge> edgePredicate=view.getClusteredLayerEdgePredicate();
  AbstractEdge res=sourceNode.getEdgesOutTree().getItem(targetNode.getNumber());
  if (!edgePredicate.evaluate(res)) {
    res=null;
  }
  readUnlock();
  return res;
}","@Override public Edge getEdge(Node source,Node target){
  view.checkUpdate();
  AbstractNode sourceNode=checkNode(source);
  AbstractNode targetNode=checkNode(target);
  Predicate<AbstractEdge> edgePredicate=view.getClusteredLayerEdgePredicate();
  AbstractEdge res=sourceNode.getEdgesOutTree().getItem(targetNode.getNumber());
  if (!edgePredicate.evaluate(res)) {
    res=null;
  }
  return res;
}",0.9565217391304348
190460,"@Override public HierarchicalDirectedGraphImpl copy(Dhns dhns,GraphStructure structure,View view){
  return new HierarchicalDirectedGraphImpl(dhns,structure);
}","@Override public HierarchicalDirectedGraphImplFiltered copy(Dhns dhns,GraphStructure structure,View view){
  return new HierarchicalDirectedGraphImplFiltered(dhns,structure,view);
}",0.93841642228739
190461,"public ImmutableTreeNode wrap(AbstractNodeIterator iterator){
  nodeTree=new SimpleAVLTree();
  TreeNodeImpl root=new TreeNodeImpl(treeStructure.getRoot());
  nodeTree.add(root);
  for (; iterator.hasNext(); ) {
    AbstractNode node=iterator.next();
    TreeNodeImpl n=new TreeNodeImpl(node);
    if (node.parent != null) {
      TreeNodeImpl parent=(TreeNodeImpl)nodeTree.get(node.parent.getNumber());
      n.parent=parent;
      parent.children.add(n);
    }
    nodeTree.add(n);
  }
  for (  AVLItem item : nodeTree) {
    TreeNodeImpl node=(TreeNodeImpl)item;
    node.toArray();
  }
  return root;
}","public ImmutableTreeNode wrap(AbstractNodeIterator iterator){
  nodeTree=new SimpleAVLTree();
  TreeNodeImpl root=new TreeNodeImpl(treeStructure.getRoot());
  nodeTree.add(root);
  for (; iterator.hasNext(); ) {
    AbstractNode node=iterator.next();
    TreeNodeImpl n=new TreeNodeImpl(node);
    if (node.parent != null) {
      TreeNodeImpl parent=(TreeNodeImpl)nodeTree.get(node.parent.getNumber());
      if (parent != null) {
        n.parent=parent;
        parent.children.add(n);
      }
 else {
        n.parent=root;
        root.children.add(n);
      }
    }
    nodeTree.add(n);
  }
  for (  AVLItem item : nodeTree) {
    TreeNodeImpl node=(TreeNodeImpl)item;
    node.toArray();
  }
  return root;
}",0.8917486752460257
190462,"private ViewNodeTree createViewNodeTree(NodePredicate predicate){
  ViewNodeTree viewNodeTree=new ViewNodeTree();
  TreeIterator treeIterator=new TreeIterator(graphStructure.getStructure(),false,(Predicate)predicate);
  for (; treeIterator.hasNext(); ) {
    AbstractNode node=treeIterator.next();
    viewNodeTree.add(node);
  }
  return viewNodeTree;
}","private ViewNodeTree createViewNodeTree(Predicate<AbstractNode> predicate){
  ViewNodeTree viewNodeTree=new ViewNodeTree();
  TreeIterator treeIterator=new TreeIterator(graphStructure.getStructure(),false,predicate);
  for (; treeIterator.hasNext(); ) {
    AbstractNode node=treeIterator.next();
    viewNodeTree.add(node);
  }
  return viewNodeTree;
}",0.958981612446959
190463,"public void filter(Predicate predicate){
  if (hierarchyLayerNodeTree == null) {
    NodePredicate nodePredicate=(NodePredicate)Tautology.instance;
    if (predicate instanceof NodePredicate) {
      nodePredicate=(NodePredicate)predicate;
    }
    hierarchyLayerNodeTree=createViewNodeTree(nodePredicate);
    Predicate<AbstractEdge> edgePredicate=Tautology.instance;
    if (predicate instanceof EdgePredicate) {
      edgePredicate=predicate;
    }
    hierarchyLayerEdgeTree=createViewEdgeTree(edgePredicate,hierarchyLayerNodeTree);
    hierarchyLayerNodeTreePredicate=new HierarchyLayerNodePredicate();
    hierarchyLayerEdgeTreePredicate=new HierarchyLayerEdgePredicate();
  }
 else {
    if (predicate instanceof NodePredicate) {
      filterViewNodeTree(hierarchyLayerNodeTree,(NodePredicate)predicate);
    }
 else {
      filterViewEdgeTree(hierarchyLayerEdgeTree,(EdgePredicate)predicate);
    }
  }
}","public void filter(Predicate predicate){
  if (hierarchyLayerNodeTree == null) {
    Predicate<AbstractNode> nodePredicate=Tautology.instance;
    if (predicate instanceof NodePredicate) {
      nodePredicate=predicate;
    }
    hierarchyLayerNodeTree=createViewNodeTree(nodePredicate);
    Predicate<AbstractEdge> edgePredicate=Tautology.instance;
    if (predicate instanceof EdgePredicate) {
      edgePredicate=predicate;
    }
    hierarchyLayerEdgeTree=createViewEdgeTree(edgePredicate,hierarchyLayerNodeTree);
    hierarchyLayerNodeTreePredicate=new HierarchyLayerNodePredicate();
    hierarchyLayerEdgeTreePredicate=new HierarchyLayerEdgePredicate();
  }
 else {
    if (predicate instanceof NodePredicate) {
      filterViewNodeTree(hierarchyLayerNodeTree,(NodePredicate)predicate);
    }
 else {
      filterViewEdgeTree(hierarchyLayerEdgeTree,(EdgePredicate)predicate);
    }
  }
}",0.7596899224806202
190464,"@Test public void testMetaEdges(){
  Dhns dhns=new Dhns(new DhnsGraphController(),null);
  GraphStructure graphStructure=dhns.getGraphStructure();
  HierarchicalGraph graph=dhns.getHierarchicalDirectedGraph();
  TreeStructure treeStructure=graphStructure.getStructure();
  GraphFactoryImpl factoryImpl=dhns.factory();
  AbstractNode na=factoryImpl.newNode();
  na.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nb=factoryImpl.newNode();
  nb.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nc=factoryImpl.newNode();
  nc.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nd=factoryImpl.newNode();
  nd.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ne=factoryImpl.newNode();
  ne.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nf=factoryImpl.newNode();
  nf.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ng=factoryImpl.newNode();
  ng.getNodeData().setLabel(""String_Node_Str"");
  treeStructure.insertAsChild(na,treeStructure.getRoot());
  treeStructure.insertAsChild(nb,na);
  treeStructure.insertAsChild(ne,na);
  treeStructure.insertAsChild(nc,nb);
  treeStructure.insertAsChild(nd,nb);
  treeStructure.insertAsChild(nf,ne);
  treeStructure.insertAsChild(ng,ne);
  nb.setEnabled(true);
  ne.setEnabled(true);
  AbstractEdge ebe=factoryImpl.newEdge(nb,ne);
  AbstractEdge ecd=factoryImpl.newEdge(nc,nd);
  AbstractEdge egb=factoryImpl.newEdge(ng,nb);
  AbstractEdge efa=factoryImpl.newEdge(nf,na);
  graph.addEdge(ebe);
  graph.addEdge(ecd);
  graph.addEdge(egb);
  graph.addEdge(efa);
  treeStructure.showTreeAsTable();
  Edge[] actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
  graph=dhns.getHierarchicalDirectedGraphVisible();
  ((ViewImpl)graph.getView()).checkUpdate();
  actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
}","@Test public void testMetaEdges(){
  Dhns dhns=new Dhns(new DhnsGraphController(),null);
  GraphStructure graphStructure=dhns.getGraphStructure();
  HierarchicalGraph graph=dhns.getHierarchicalDirectedGraph();
  TreeStructure treeStructure=graphStructure.getStructure();
  GraphFactoryImpl factoryImpl=dhns.factory();
  AbstractNode na=factoryImpl.newNode();
  na.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nb=factoryImpl.newNode();
  nb.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nc=factoryImpl.newNode();
  nc.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nd=factoryImpl.newNode();
  nd.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ne=factoryImpl.newNode();
  ne.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode nf=factoryImpl.newNode();
  nf.getNodeData().setLabel(""String_Node_Str"");
  AbstractNode ng=factoryImpl.newNode();
  ng.getNodeData().setLabel(""String_Node_Str"");
  treeStructure.insertAsChild(na,treeStructure.getRoot());
  treeStructure.insertAsChild(nb,na);
  treeStructure.insertAsChild(ne,na);
  treeStructure.insertAsChild(nc,nb);
  treeStructure.insertAsChild(nd,nb);
  treeStructure.insertAsChild(nf,ne);
  treeStructure.insertAsChild(ng,ne);
  nb.setEnabled(true);
  ne.setEnabled(true);
  AbstractEdge ebe=factoryImpl.newEdge(nb,ne);
  AbstractEdge ecd=factoryImpl.newEdge(nc,nd);
  AbstractEdge egb=factoryImpl.newEdge(ng,nb);
  AbstractEdge efa=factoryImpl.newEdge(nf,na);
  graph.addEdge(ebe);
  graph.addEdge(ecd);
  graph.addEdge(egb);
  graph.addEdge(efa);
  Edge[] actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
  graph=dhns.getHierarchicalDirectedGraphVisible();
  ((ViewImpl)graph.getView()).checkUpdate();
  actual=graph.getMetaEdges().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getSource().getNodeData().getLabel() + ""String_Node_Str"" + actual[i].getTarget().getNodeData().getLabel());
  }
}",0.9917782475922012
190465,"@Before public void setUp(){
  DhnsGraphController controller=new DhnsGraphController();
  dhnsGlobal=new Dhns(controller,null);
  graphGlobal=new HierarchicalDirectedGraphImpl(dhnsGlobal,dhnsGlobal.getGraphStructure());
  nodeMap=new HashMap<String,Node>();
  edgeMap=new HashMap<String,Edge>();
  TreeStructure treeStructure=dhnsGlobal.getGraphStructure().getStructure();
  GraphFactoryImpl factory=dhnsGlobal.factory();
  for (int i=0; i < 10; i++) {
    Node node=factory.newNode();
    node.getNodeData().setLabel(""String_Node_Str"" + i);
    graphGlobal.addNode(node);
    nodeMap.put(node.getNodeData().getLabel(),node);
  }
  Node node0=nodeMap.get(""String_Node_Str"");
  Node node1=nodeMap.get(""String_Node_Str"");
  Node node2=nodeMap.get(""String_Node_Str"");
  Node node3=nodeMap.get(""String_Node_Str"");
  Node node4=nodeMap.get(""String_Node_Str"");
  Node node5=nodeMap.get(""String_Node_Str"");
  Node node6=nodeMap.get(""String_Node_Str"");
  Node node7=nodeMap.get(""String_Node_Str"");
  Node node8=nodeMap.get(""String_Node_Str"");
  AbstractEdge edge1=factory.newEdge(node4,node5,1f,true);
  AbstractEdge edge2=factory.newEdge(node5,node6,4f,true);
  AbstractEdge edge3=factory.newEdge(node6,node5,3f,true);
  AbstractEdge edge4=factory.newEdge(node7,node7,5f,true);
  AbstractEdge edge5=factory.newEdge(node4,node4,2f,true);
  AbstractEdge edge6=factory.newEdge(node2,node1,1f,true);
  AbstractEdge edge7=factory.newEdge(node2,node3,10f,true);
  AbstractEdge edge8=factory.newEdge(node2,node5,12f,true);
  graphGlobal.addEdge(edge1);
  graphGlobal.addEdge(edge2);
  graphGlobal.addEdge(edge3);
  graphGlobal.addEdge(edge4);
  graphGlobal.addEdge(edge5);
  graphGlobal.addEdge(edge6);
  graphGlobal.addEdge(edge7);
  graphGlobal.addEdge(edge8);
  edgeMap.put(""String_Node_Str"",edge1);
  edgeMap.put(""String_Node_Str"",edge2);
  edgeMap.put(""String_Node_Str"",edge3);
  edgeMap.put(""String_Node_Str"",edge4);
  edgeMap.put(""String_Node_Str"",edge5);
  edgeMap.put(""String_Node_Str"",edge6);
  edgeMap.put(""String_Node_Str"",edge7);
  edgeMap.put(""String_Node_Str"",edge8);
}","@Before public void setUp(){
  DhnsGraphController controller=new DhnsGraphController();
  dhnsGlobal=new Dhns(controller,null);
  graphGlobal=new HierarchicalDirectedGraphImplFiltered(dhnsGlobal,dhnsGlobal.getGraphStructure(),dhnsGlobal.getViewManager().getVisibleView());
  nodeMap=new HashMap<String,Node>();
  edgeMap=new HashMap<String,Edge>();
  TreeStructure treeStructure=dhnsGlobal.getGraphStructure().getStructure();
  GraphFactoryImpl factory=dhnsGlobal.factory();
  for (int i=0; i < 10; i++) {
    Node node=factory.newNode();
    node.getNodeData().setLabel(""String_Node_Str"" + i);
    graphGlobal.addNode(node);
    nodeMap.put(node.getNodeData().getLabel(),node);
  }
  Node node0=nodeMap.get(""String_Node_Str"");
  Node node1=nodeMap.get(""String_Node_Str"");
  Node node2=nodeMap.get(""String_Node_Str"");
  Node node3=nodeMap.get(""String_Node_Str"");
  Node node4=nodeMap.get(""String_Node_Str"");
  Node node5=nodeMap.get(""String_Node_Str"");
  Node node6=nodeMap.get(""String_Node_Str"");
  Node node7=nodeMap.get(""String_Node_Str"");
  Node node8=nodeMap.get(""String_Node_Str"");
  AbstractEdge edge1=factory.newEdge(node4,node5,1f,true);
  AbstractEdge edge2=factory.newEdge(node5,node6,4f,true);
  AbstractEdge edge3=factory.newEdge(node6,node5,3f,true);
  AbstractEdge edge4=factory.newEdge(node7,node7,5f,true);
  AbstractEdge edge5=factory.newEdge(node4,node4,2f,true);
  AbstractEdge edge6=factory.newEdge(node2,node1,1f,true);
  AbstractEdge edge7=factory.newEdge(node2,node3,10f,true);
  AbstractEdge edge8=factory.newEdge(node2,node5,12f,true);
  graphGlobal.addEdge(edge1);
  graphGlobal.addEdge(edge2);
  graphGlobal.addEdge(edge3);
  graphGlobal.addEdge(edge4);
  graphGlobal.addEdge(edge5);
  graphGlobal.addEdge(edge6);
  graphGlobal.addEdge(edge7);
  graphGlobal.addEdge(edge8);
  edgeMap.put(""String_Node_Str"",edge1);
  edgeMap.put(""String_Node_Str"",edge2);
  edgeMap.put(""String_Node_Str"",edge3);
  edgeMap.put(""String_Node_Str"",edge4);
  edgeMap.put(""String_Node_Str"",edge5);
  edgeMap.put(""String_Node_Str"",edge6);
  edgeMap.put(""String_Node_Str"",edge7);
  edgeMap.put(""String_Node_Str"",edge8);
}",0.9873659117997616
190466,"@Test public void testFiltering(){
  graphGlobal.getView().addPredicate(new DegreePredicate(3,5));
  Node[] actual=graphGlobal.getNodes().toArray();
  for (int i=0; i < actual.length; i++) {
    System.out.println(actual[i].getId());
  }
}","@Test public void testFiltering(){
}",0.2618181818181818
190467,"@Override public boolean isInOctreeLeaf(Octant leaf){
  NodeData nodeFrom=obj.getSource();
  NodeData nodeTo=obj.getTarget();
  if (octants[0] == leaf) {
    if (octants[0] != ((ModelImpl)nodeFrom.getModel()).getOctants()[0]) {
      return false;
    }
  }
 else {
    if (octants[1] != ((ModelImpl)nodeTo.getModel()).getOctants()[0]) {
      return false;
    }
  }
  return true;
}","@Override public boolean isInOctreeLeaf(Octant leaf){
  NodeData nodeFrom=obj.getSource();
  NodeData nodeTo=obj.getTarget();
  boolean res=true;
  if (octants[0] == leaf) {
    if (octants[0] != ((ModelImpl)nodeFrom.getModel()).getOctants()[0]) {
      res=false;
    }
  }
  if (octants[1] == leaf) {
    if (octants[1] != ((ModelImpl)nodeTo.getModel()).getOctants()[0]) {
      res=false;
    }
  }
  if (octants[0] != leaf && octants[1] != leaf) {
    res=false;
  }
  return res;
}",0.7448275862068966
190468,"@Override public void setOctant(Octant octant){
  if (((ModelImpl)obj.getSource().getModel()).getOctants()[0] == octant) {
    octants[0]=octant;
  }
 else {
    octants[1]=octant;
  }
}","@Override public void setOctant(Octant octant){
  if (((ModelImpl)obj.getSource().getModel()).getOctants()[0] == octant) {
    octants[0]=octant;
  }
  if (((ModelImpl)obj.getTarget().getModel()).getOctants()[0] == octant) {
    octants[1]=octant;
  }
}",0.8291571753986332
190469,"public void displayOctantInfo(GL gl,GLU glu){
  GLUT glut=new GLUT();
  float quantum=size / 2;
  float height=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + objectsCount);
  gl.glPopMatrix();
  int i=0;
  for (  ParamAVLTree<ModelImpl> p : modelClasses) {
    height+=15;
    gl.glPushMatrix();
    gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
    gl.glScalef(0.1f,0.1f,0.1f);
    gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
    glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + (i++) + ""String_Node_Str""+ p.getCount());
    gl.glPopMatrix();
  }
}","public void displayOctantInfo(GL gl,GLU glu){
  GLUT glut=new GLUT();
  float quantum=size / 2;
  float height=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + octantID);
  gl.glPopMatrix();
  height+=15;
  gl.glPushMatrix();
  gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
  gl.glScalef(0.1f,0.1f,0.1f);
  gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
  glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + objectsCount);
  gl.glPopMatrix();
  int i=0;
  for (  ParamAVLTree<ModelImpl> p : modelClasses) {
    height+=15;
    gl.glPushMatrix();
    gl.glTranslatef(posX - quantum,posY + quantum - height,posZ + quantum);
    gl.glScalef(0.1f,0.1f,0.1f);
    gl.glColor4f(0.0f,0.0f,1.0f,1.0f);
    glut.glutStrokeString(GLUT.STROKE_MONO_ROMAN,""String_Node_Str"" + (i++) + ""String_Node_Str""+ p.getCount());
    gl.glPopMatrix();
  }
}",0.8483177054605626
190470,"public void addObject(int classID,ModelImpl obj){
  Octant[] octants=obj.getOctants();
  boolean manualAdd=true;
  for (int i=0; i < octants.length; i++) {
    Octant o=obj.getOctants()[i];
    if (o != null) {
      o.addObject(classID,obj);
      manualAdd=false;
    }
  }
  if (manualAdd) {
    root.addObject(classID,obj);
  }
}","public void addObject(int classID,ModelImpl obj){
  Octant[] octants=obj.getOctants();
  boolean manualAdd=true;
  for (int i=0; i < octants.length; i++) {
    Octant o=octants[i];
    if (o != null) {
      o.addObject(classID,obj);
      manualAdd=false;
    }
  }
  if (manualAdd) {
    root.addObject(classID,obj);
  }
}",0.9680365296803652
190471,"private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  edgeIterable=graph.getEdges();
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}","private void updateEdges(){
}",0.0481327800829875
190472,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}",0.9352818371607516
190473,"@Override public void updateObjectsPosition(){
  int[] classIds=new int[modelClasses.length];
  int i=0;
  for (  ModelClass objClass : modelClasses) {
    if (objClass.isEnabled()) {
      classIds[i]=objClass.getClassId();
    }
 else {
      classIds[i]=-1;
    }
    i++;
  }
  octree.updateObjectsPosition(classIds);
}","@Override public void updateObjectsPosition(){
  for (  ModelClass objClass : modelClasses) {
    if (objClass.isEnabled()) {
      octree.updateObjectsPosition(objClass.getClassId());
    }
  }
}",0.6589595375722543
190474,"@Override public void display(GL gl,GLU glu){
  this.gl=gl;
  this.glu=glu;
  boolean execMouseClick=mouseClick.getAndSet(false);
  boolean execMouseMove=mouseMoved.getAndSet(false);
  boolean execDrag=drag.get() || startDrag.get() || stopDrag.get();
  int pool1Permit=0;
  int pool2Permit=0;
  if (execMouseMove) {
    pool2Permit++;
  }
 else   if (execDrag) {
    pool2Permit++;
  }
  if (execMouseClick) {
    pool2Permit++;
  }
  if (cameraMoved.getAndSet(false)) {
    graphDrawable.setCameraPosition(gl,glu);
    pool1Permit=modelSegments.size();
    engine.getOctree().updateVisibleOctant(gl);
    for (int i=0; i < modelSegments.size(); i++) {
      Runnable r=modelSegments.get(i);
      pool1.execute(r);
    }
  }
  if (execMouseMove) {
    engine.updateSelection(gl,glu);
    pool2.execute(selectionSegment);
  }
 else   if (execDrag) {
    pool2.execute(dragSegment);
  }
  if (execMouseClick) {
    pool2.execute(mouseClickSegment);
  }
  try {
    if (pool1Permit > 0) {
      pool1Semaphore.acquire(pool1Permit);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  engine.beforeDisplay(gl,glu);
  engine.display(gl,glu);
  engine.afterDisplay(gl,glu);
  try {
    if (pool2Permit > 0) {
      pool2Semaphore.acquire(pool2Permit);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","@Override public void display(GL gl,GLU glu){
  if (simpleFPSAnimator.isDisplayCall()) {
    this.gl=gl;
    this.glu=glu;
    boolean execMouseClick=mouseClick.getAndSet(false);
    boolean execMouseMove=mouseMoved.getAndSet(false);
    boolean execDrag=drag.get() || startDrag.get() || stopDrag.get();
    int pool1Permit=0;
    int pool2Permit=0;
    if (execMouseMove) {
      pool2Permit++;
    }
 else     if (execDrag) {
      pool2Permit++;
    }
    if (execMouseClick) {
      pool2Permit++;
    }
    if (cameraMoved.getAndSet(false)) {
      graphDrawable.setCameraPosition(gl,glu);
      pool1Permit=modelSegments.size();
      engine.getOctree().updateVisibleOctant(gl);
      for (int i=0; i < modelSegments.size(); i++) {
        Runnable r=modelSegments.get(i);
        pool1.execute(r);
      }
    }
    if (execMouseMove) {
      engine.updateSelection(gl,glu);
      pool2.execute(selectionSegment);
    }
 else     if (execDrag) {
      pool2.execute(dragSegment);
    }
    if (execMouseClick) {
      pool2.execute(mouseClickSegment);
    }
    try {
      if (pool1Permit > 0) {
        pool1Semaphore.acquire(pool1Permit);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    engine.beforeDisplay(gl,glu);
    engine.display(gl,glu);
    engine.afterDisplay(gl,glu);
    try {
      if (pool2Permit > 0) {
        pool2Semaphore.acquire(pool2Permit);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9184182401140008
190475,"@Override public void display(GL gl,GLU glu,VizModel vizModel){
  if (!selected && vizModel.isHideNonSelectedEdges()) {
    return;
  }
  NodeData nodeFrom=edge.getSource();
  NodeData nodeTo=edge.getTarget();
  float weight=edge.getEdge().getWeight();
  float arrowWidth=ARROW_WIDTH * weight * 2f;
  float arrowHeight=ARROW_HEIGHT * weight * 2f;
  float x2=nodeTo.x();
  float y2=nodeTo.y();
  float x1=nodeFrom.x();
  float y1=nodeFrom.y();
  Vec2f edgeVector=new Vec2f(x2 - x1,y2 - y1);
  edgeVector.normalize();
  double angle=Math.atan2(y2 - y1,x2 - x1);
  float collisionDistance=((ModelImpl)nodeTo.getModel()).getCollisionDistance(angle);
  float targetX=x2 - edgeVector.x() * collisionDistance;
  float targetY=y2 - edgeVector.y() * collisionDistance;
  float baseX=targetX - edgeVector.x() * arrowHeight * 2f;
  float baseY=targetY - edgeVector.y() * arrowHeight * 2f;
  float sideVectorX=y1 - y2;
  float sideVectorY=x2 - x1;
  float norm=(float)Math.sqrt(sideVectorX * sideVectorX + sideVectorY * sideVectorY);
  sideVectorX/=norm;
  sideVectorY/=norm;
  if (!selected) {
    float r;
    float g;
    float b;
    float a;
    if (vizModel.isEdgeHasUniColor()) {
      float[] uni=vizModel.getEdgeUniColor();
      r=uni[0];
      g=uni[1];
      b=uni[2];
      a=uni[3];
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=source.r();
        g=source.g();
        b=source.b();
        a=edge.alpha();
      }
 else {
        g=edge.g();
        b=edge.b();
        a=edge.alpha();
      }
    }
    if (vizModel.getConfig().isLightenNonSelected()) {
      float lightColorFactor=vizModel.getConfig().getLightenNonSelectedFactor();
      a=a - (a - 0.1f) * lightColorFactor;
      gl.glColor4f(r,g,b,a);
    }
 else {
      gl.glColor4f(r,g,b,a);
    }
  }
 else {
    float r=0f;
    float g=0f;
    float b=0f;
    if (vizModel.isEdgeSelectionColor()) {
      ModelImpl m1=(ModelImpl)nodeFrom.getModel();
      ModelImpl m2=(ModelImpl)nodeTo.getModel();
      if (m1.isSelected() && m2.isSelected()) {
        float[] both=vizModel.getEdgeBothSelectionColor();
        r=both[0];
        g=both[1];
        b=both[2];
      }
 else       if (m1.isSelected()) {
        float[] out=vizModel.getEdgeOutSelectionColor();
        r=out[0];
        g=out[1];
        b=out[2];
      }
 else       if (m2.isSelected()) {
        float[] in=vizModel.getEdgeInSelectionColor();
        r=in[0];
        g=in[1];
        b=in[2];
      }
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=0.498f * source.r();
        g=0.498f * source.g();
        b=0.498f * source.b();
      }
 else {
        g=0.498f * edge.g();
        b=0.498f * edge.b();
        r*=0.498f;
      }
    }
    gl.glColor4f(r,g,b,1f);
  }
  gl.glVertex2d(baseX + sideVectorX * arrowWidth,baseY + sideVectorY * arrowWidth);
  gl.glVertex2d(baseX - sideVectorX * arrowWidth,baseY - sideVectorY * arrowWidth);
  gl.glVertex2d(targetX,targetY);
}","@Override public void display(GL gl,GLU glu,VizModel vizModel){
  if (!selected && vizModel.isHideNonSelectedEdges()) {
    return;
  }
  NodeData nodeFrom=edge.getSource();
  NodeData nodeTo=edge.getTarget();
  float weight=edge.getEdge().getWeight();
  float arrowWidth=ARROW_WIDTH * weight * 2f;
  float arrowHeight=ARROW_HEIGHT * weight * 2f;
  float x2=nodeTo.x();
  float y2=nodeTo.y();
  float x1=nodeFrom.x();
  float y1=nodeFrom.y();
  Vec2f edgeVector=new Vec2f(x2 - x1,y2 - y1);
  edgeVector.normalize();
  double angle=Math.atan2(y2 - y1,x2 - x1);
  if (nodeTo.getModel() == null) {
    Logger.getLogger(Arrow2dModel.class.getName()).log(Level.INFO,""String_Node_Str"" + this + ""String_Node_Str""+ edge.getModel());
  }
  float collisionDistance=((ModelImpl)nodeTo.getModel()).getCollisionDistance(angle);
  float targetX=x2 - edgeVector.x() * collisionDistance;
  float targetY=y2 - edgeVector.y() * collisionDistance;
  float baseX=targetX - edgeVector.x() * arrowHeight * 2f;
  float baseY=targetY - edgeVector.y() * arrowHeight * 2f;
  float sideVectorX=y1 - y2;
  float sideVectorY=x2 - x1;
  float norm=(float)Math.sqrt(sideVectorX * sideVectorX + sideVectorY * sideVectorY);
  sideVectorX/=norm;
  sideVectorY/=norm;
  if (!selected) {
    float r;
    float g;
    float b;
    float a;
    if (vizModel.isEdgeHasUniColor()) {
      float[] uni=vizModel.getEdgeUniColor();
      r=uni[0];
      g=uni[1];
      b=uni[2];
      a=uni[3];
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=source.r();
        g=source.g();
        b=source.b();
        a=edge.alpha();
      }
 else {
        g=edge.g();
        b=edge.b();
        a=edge.alpha();
      }
    }
    if (vizModel.getConfig().isLightenNonSelected()) {
      float lightColorFactor=vizModel.getConfig().getLightenNonSelectedFactor();
      a=a - (a - 0.1f) * lightColorFactor;
      gl.glColor4f(r,g,b,a);
    }
 else {
      gl.glColor4f(r,g,b,a);
    }
  }
 else {
    float r=0f;
    float g=0f;
    float b=0f;
    if (vizModel.isEdgeSelectionColor()) {
      ModelImpl m1=(ModelImpl)nodeFrom.getModel();
      ModelImpl m2=(ModelImpl)nodeTo.getModel();
      if (m1.isSelected() && m2.isSelected()) {
        float[] both=vizModel.getEdgeBothSelectionColor();
        r=both[0];
        g=both[1];
        b=both[2];
      }
 else       if (m1.isSelected()) {
        float[] out=vizModel.getEdgeOutSelectionColor();
        r=out[0];
        g=out[1];
        b=out[2];
      }
 else       if (m2.isSelected()) {
        float[] in=vizModel.getEdgeInSelectionColor();
        r=in[0];
        g=in[1];
        b=in[2];
      }
    }
 else {
      r=edge.r();
      if (r == -1f) {
        NodeData source=edge.getSource();
        r=0.498f * source.r();
        g=0.498f * source.g();
        b=0.498f * source.b();
      }
 else {
        g=0.498f * edge.g();
        b=0.498f * edge.b();
        r*=0.498f;
      }
    }
    gl.glColor4f(r,g,b,1f);
  }
  gl.glVertex2d(baseX + sideVectorX * arrowWidth,baseY + sideVectorY * arrowWidth);
  gl.glVertex2d(baseX - sideVectorX * arrowWidth,baseY - sideVectorY * arrowWidth);
  gl.glVertex2d(targetX,targetY);
}",0.9728775477451452
190476,"@Override public Octant[] getOctants(){
  Octant[] oc=((ModelImpl)obj.getModel()).getOctants();
  if (oc[0] == null) {
    oc=this.octants;
  }
  return oc;
}","@Override public Octant[] getOctants(){
  if (obj.getModel() == null) {
    return this.octants;
  }
  Octant[] oc=((ModelImpl)obj.getModel()).getOctants();
  if (oc[0] == null) {
    oc=this.octants;
  }
  return oc;
}",0.8381962864721485
190477,"public void updateObjectsPosition(int[] classIDs){
  Octant[] leavesCopy=leaves.toArray(new Octant[0]);
  for (int i=0; i < classIDs.length; i++) {
    int classID=classIDs[i];
    if (classID == -1) {
      continue;
    }
    for (    Octant o : leavesCopy) {
      if (o.isRequiringUpdatePosition()) {
        for (updatePositionIterator.setNode(o.getTree(classID)); updatePositionIterator.hasNext(); ) {
          ModelImpl obj=updatePositionIterator.next();
          if (!obj.isInOctreeLeaf(o)) {
            o.removeObject(classID,obj);
            obj.resetOctant();
            addObject(classID,obj);
          }
        }
      }
    }
  }
}","public void updateObjectsPosition(int classID){
  for (  Octant o : leaves) {
    if (o.isRequiringUpdatePosition()) {
      for (updatePositionIterator.setNode(o.getTree(classID)); updatePositionIterator.hasNext(); ) {
        ModelImpl obj=updatePositionIterator.next();
        if (!obj.isInOctreeLeaf(o)) {
          o.removeObject(classID,obj);
          obj.resetOctant();
          addObject(classID,obj);
        }
      }
    }
  }
}",0.7422303473491774
190478,"public void cleanDeletedObjects(int classID){
  for (  Octant o : leaves) {
    for (cleanObjectsIterator.setNode(o.getTree(classID)); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      if (!obj.isCacheMatching(cacheMarker)) {
        removeObject(classID,obj);
        obj.resetOctant();
        if (vizController.getVizConfig().isCleanDeletedModels()) {
          obj.getObj().setModel(null);
        }
      }
    }
  }
}","public void cleanDeletedObjects(int classID){
  for (  Octant o : leaves) {
    for (cleanObjectsIterator.setNode(o.getTree(classID)); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      if (!obj.isCacheMatching(cacheMarker)) {
        removeObject(classID,obj);
        obj.resetOctant();
        if (vizController.getVizConfig().isCleanDeletedModels()) {
          obj.cleanModel();
        }
      }
    }
  }
}",0.9770992366412212
190479,"public void resetObjectClass(int classID){
  for (  Octant o : leaves) {
    ParamAVLTree<ModelImpl> tree=o.getTree(classID);
    for (cleanObjectsIterator.setNode(tree); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      obj.resetOctant();
      obj.getObj().setModel(null);
      obj.destroy();
    }
    o.clear(classID);
  }
}","public void resetObjectClass(int classID){
  for (  Octant o : leaves) {
    ParamAVLTree<ModelImpl> tree=o.getTree(classID);
    for (cleanObjectsIterator.setNode(tree); cleanObjectsIterator.hasNext(); ) {
      ModelImpl obj=cleanObjectsIterator.next();
      obj.resetOctant();
      obj.cleanModel();
      obj.destroy();
    }
    o.clear(classID);
  }
}",0.97119341563786
190480,"private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        builder.append(label);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isLabelVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(""String_Node_Str"");
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}","private void defaultNodeColumns(Graph graph){
  NodeColumnsGDF labelColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      String label=node.getNodeData().getLabel();
      if (label != null) {
        builder.append(label);
      }
    }
  }
;
  NodeColumnsGDF visibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(true);
    }
  }
;
  NodeColumnsGDF labelVisibleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isLabelVisible());
    }
  }
;
  NodeColumnsGDF widthColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF heightColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float size=node.getNodeData().getSize();
      if (normalize) {
        size=(size - minSize) / (maxSize - minSize);
      }
      builder.append(size);
    }
  }
;
  NodeColumnsGDF xColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float x=node.getNodeData().x();
      if (normalize && x != 0.0) {
        x=(x - minX) / (maxX - minX);
      }
      builder.append(x);
    }
  }
;
  NodeColumnsGDF yColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.DOUBLE){
    @Override public boolean isEnable(){
      return exportPosition;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      float y=node.getNodeData().y();
      if (normalize && y != 0.0) {
        y=(y - minY) / (maxY - minY);
      }
      builder.append(y);
    }
  }
;
  NodeColumnsGDF colorColumn=new NodeColumnsGDF(""String_Node_Str""){
    @Override public boolean isEnable(){
      return exportColors;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().r() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().g() * 255f));
      builder.append(""String_Node_Str"");
      builder.append((int)(node.getNodeData().b() * 255f));
      builder.append(""String_Node_Str"");
    }
  }
;
  NodeColumnsGDF fixedColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.BOOLEAN){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
      builder.append(node.getNodeData().isFixed());
    }
  }
;
  NodeColumnsGDF styleColumn=new NodeColumnsGDF(""String_Node_Str"",DataTypeGDF.INT){
    @Override public boolean isEnable(){
      return true;
    }
    @Override public void writeData(    StringBuilder builder,    Node node){
    }
  }
;
  defaultNodeColumnsGDFs=new NodeColumnsGDF[10];
  defaultNodeColumnsGDFs[0]=labelColumn;
  defaultNodeColumnsGDFs[1]=visibleColumn;
  defaultNodeColumnsGDFs[2]=labelVisibleColumn;
  defaultNodeColumnsGDFs[3]=widthColumn;
  defaultNodeColumnsGDFs[4]=heightColumn;
  defaultNodeColumnsGDFs[5]=xColumn;
  defaultNodeColumnsGDFs[6]=yColumn;
  defaultNodeColumnsGDFs[7]=colorColumn;
  defaultNodeColumnsGDFs[8]=fixedColumn;
  defaultNodeColumnsGDFs[9]=styleColumn;
}",0.9970894979383944
190481,"public synchronized void mergeTable(AttributeTable table){
  for (  AttributeColumn column : table.getColumns()) {
    AttributeColumn existingCol=getColumn(column.getId(),column.getType());
    if (existingCol == null) {
      addColumn(column.getId(),column.getTitle(),column.getType(),column.getOrigin(),column.getDefaultValue());
    }
  }
}","public synchronized void mergeTable(AttributeTable table){
  for (  AttributeColumn column : table.getColumns()) {
    AttributeColumn existingCol=getColumn(column);
    if (existingCol == null) {
      addColumn(column.getId(),column.getTitle(),column.getType(),column.getOrigin(),column.getDefaultValue());
    }
  }
}",0.6075187969924812
190482,"private Element createNodeColors(Document document,Node n) throws Exception {
  Element colorE=document.createElement(""String_Node_Str"");
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().r() * 255f));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().g() * 255f));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (n.getNodeData().b() * 255f));
  return colorE;
}","private Element createNodeColors(Document document,Node n) throws Exception {
  Element colorE=document.createElement(""String_Node_Str"");
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().r() * 255f)));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().g() * 255f)));
  colorE.setAttribute(""String_Node_Str"",""String_Node_Str"" + (Math.round(n.getNodeData().b() * 255f)));
  return colorE;
}",0.959731543624161
190483,"public GraphCanvas(){
  super();
  glCanvas=new GLCanvas(getCaps());
  super.initDrawable(glCanvas);
  graphComponent=(Component)glCanvas;
  graphComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
}","public GraphCanvas(){
  super();
  glCanvas=new GLCanvas(getCaps());
  super.initDrawable(glCanvas);
  glCanvas.setMinimumSize(new Dimension(0,0));
  graphComponent=(Component)glCanvas;
  graphComponent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
  JPopupMenu.setDefaultLightWeightPopupEnabled(false);
  ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);
}",0.9353507565337
190484,"@Override protected void reshape3DScene(GL gl){
  setCameraPosition(gl,glu);
}","@Override protected void reshape3DScene(GL gl){
  setCameraPosition(gl,glu);
  graphComponent.invalidate();
}",0.8342245989304813
190485,"private void setEdgeData(Element dataE,EdgeDraft edgeDraft,String edgeId){
  String dataKey=dataE.getAttribute(""String_Node_Str"");
  if (dataKey.isEmpty()) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeDraft),Issue.Level.SEVERE));
    return;
  }
  String dataValue=dataE.getAttribute(""String_Node_Str"");
  if (!dataValue.isEmpty()) {
    AttributeColumn column=container.getAttributeManager().getNodeClass().getAttributeColumn(dataKey);
    if (column != null) {
      try {
        Object value=column.getAttributeType().parse(dataValue);
        edgeDraft.addAttributeValue(column,value);
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",dataKey,edgeId,column.getTitle()),Issue.Level.SEVERE));
      }
    }
  }
}","private void setEdgeData(Element dataE,EdgeDraft edgeDraft,String edgeId){
  String dataKey=dataE.getAttribute(""String_Node_Str"");
  if (dataKey.isEmpty()) {
    report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",edgeDraft),Issue.Level.SEVERE));
    return;
  }
  String dataValue=dataE.getAttribute(""String_Node_Str"");
  if (!dataValue.isEmpty()) {
    AttributeColumn column=container.getAttributeManager().getEdgeClass().getAttributeColumn(dataKey);
    if (column != null) {
      try {
        Object value=column.getAttributeType().parse(dataValue);
        edgeDraft.addAttributeValue(column,value);
      }
 catch (      Exception e) {
        report.logIssue(new Issue(NbBundle.getMessage(ImporterGEXF.class,""String_Node_Str"",dataKey,edgeId,column.getTitle()),Issue.Level.SEVERE));
      }
    }
  }
}",0.996437054631829
190486,"public void addEdge(EdgeDraft edgeDraft){
  if (edgeDraft == null) {
    throw new NullPointerException();
  }
  EdgeDraftImpl edgeDraftImpl=(EdgeDraftImpl)edgeDraft;
  if (edgeDraftImpl.getSource() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getTarget() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getSource() == edgeDraftImpl.getTarget() && !parameters.isSelfLoops()) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
switch (parameters.getEdgeDefault()) {
case DIRECTED:
    EdgeDraft.EdgeType type1=edgeDraftImpl.getType();
  if (type1.equals(EdgeDraft.EdgeType.UNDIRECTED)) {
    report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
  }
break;
case UNDIRECTED:
EdgeDraft.EdgeType type2=edgeDraftImpl.getType();
if (type2.equals(EdgeDraft.EdgeType.DIRECTED)) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
}
break;
case MIXED:
break;
}
String id=edgeDraftImpl.getId();
String sourceTargetId=edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId();
if (edgeMap.containsKey(id) || edgeSourceTargetMap.containsKey(sourceTargetId)) {
if (!parameters.isParallelEdges()) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
return;
}
 else {
report.logIssue(new Issue(""String_Node_Str"" + id + ""String_Node_Str"",Level.INFO));
return;
}
}
edgeSourceTargetMap.put(edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId(),edgeDraftImpl);
edgeMap.put(id,edgeDraftImpl);
}","public void addEdge(EdgeDraft edgeDraft){
  if (edgeDraft == null) {
    throw new NullPointerException();
  }
  EdgeDraftImpl edgeDraftImpl=(EdgeDraftImpl)edgeDraft;
  if (edgeDraftImpl.getSource() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getTarget() == null) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getSource() == edgeDraftImpl.getTarget() && !parameters.isSelfLoops()) {
    String message=NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str"");
    report.logIssue(new Issue(message,Level.SEVERE));
    return;
  }
  if (edgeDraftImpl.getType() != null) {
switch (parameters.getEdgeDefault()) {
case DIRECTED:
      EdgeDraft.EdgeType type1=edgeDraftImpl.getType();
    if (type1.equals(EdgeDraft.EdgeType.UNDIRECTED)) {
      report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
    }
  break;
case UNDIRECTED:
EdgeDraft.EdgeType type2=edgeDraftImpl.getType();
if (type2.equals(EdgeDraft.EdgeType.DIRECTED)) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
}
break;
case MIXED:
break;
}
}
String id=edgeDraftImpl.getId();
String sourceTargetId=edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId();
if (edgeMap.containsKey(id) || edgeSourceTargetMap.containsKey(sourceTargetId)) {
if (!parameters.isParallelEdges()) {
report.logIssue(new Issue(NbBundle.getMessage(ImportContainerImpl.class,""String_Node_Str""),Level.WARNING));
return;
}
 else {
report.logIssue(new Issue(""String_Node_Str"" + id + ""String_Node_Str"",Level.INFO));
return;
}
}
edgeSourceTargetMap.put(edgeDraftImpl.getSource().getId() + ""String_Node_Str"" + edgeDraftImpl.getTarget().getId(),edgeDraftImpl);
edgeMap.put(id,edgeDraftImpl);
}",0.986903879416852
190487,"private void updateNodes(){
  Modeler nodeInit=engine.getModelClasses()[AbstractEngine.CLASS_NODE].getCurrentModeler();
  NodeIterable nodeIterable;
  if (vizConfig.isVisualizeTree()) {
    nodeIterable=graph.getHierarchyTree().getNodes();
  }
 else {
    nodeIterable=graph.getClusteredGraph().getNodes();
  }
  for (  Node node : nodeIterable) {
    if (vizConfig.isVisualizeTree()) {
      node.getNodeData().setX(node.getPre() * 5);
      node.getNodeData().setY(node.getPost() * 5);
      if (graph.getClusteredGraph().isInView(node)) {
        node.getNodeData().setR(1f);
        node.getNodeData().setG(0f);
        node.getNodeData().setB(0f);
      }
 else {
        node.getNodeData().setR(0.2f);
        node.getNodeData().setG(0.2f);
        node.getNodeData().setB(0.2f);
      }
    }
    Model obj=node.getNodeData().getModel();
    if (obj == null) {
      obj=nodeInit.initModel(node.getNodeData());
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
      System.out.println(""String_Node_Str"" + obj);
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
    obj.setCacheMarker(cacheMarker);
    if (modeManager.getMode().equals(ModeManager.AVAILABLE_MODES.HIGHLIGHT)) {
      ModelImpl impl=(ModelImpl)obj;
      if (!node.isVisible()) {
        ColorLayer.layerColor(impl,0.8f,0.8f,0.8f);
      }
    }
  }
}","private void updateNodes(){
  Modeler nodeInit=engine.getModelClasses()[AbstractEngine.CLASS_NODE].getCurrentModeler();
  NodeIterable nodeIterable;
  if (vizConfig.isVisualizeTree()) {
    nodeIterable=graph.getHierarchyTree().getNodes();
  }
 else {
    nodeIterable=graph.getClusteredGraph().getNodes();
  }
  for (  Node node : nodeIterable) {
    if (vizConfig.isVisualizeTree()) {
      node.getNodeData().setX(node.getPre() * 5);
      node.getNodeData().setY(node.getPost() * 5);
      if (graph.getClusteredGraph().isInView(node)) {
        node.getNodeData().setR(1f);
        node.getNodeData().setG(0f);
        node.getNodeData().setB(0f);
      }
 else {
        node.getNodeData().setR(0.2f);
        node.getNodeData().setG(0.2f);
        node.getNodeData().setB(0.2f);
      }
    }
    Model obj=node.getNodeData().getModel();
    if (obj == null) {
      obj=nodeInit.initModel(node.getNodeData());
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_NODE,(ModelImpl)obj);
    }
    obj.setCacheMarker(cacheMarker);
    if (modeManager.getMode().equals(ModeManager.AVAILABLE_MODES.HIGHLIGHT)) {
      ModelImpl impl=(ModelImpl)obj;
      if (!node.isVisible()) {
        ColorLayer.layerColor(impl,0.8f,0.8f,0.8f);
      }
    }
  }
}",0.981447799199709
190488,"public void setup(){
  final VizConfig vizConfig=VizController.getInstance().getVizConfig();
  adjustTextCheckbox.setSelected(vizConfig.isAdjustByText());
  final DefaultComboBoxModel comboModel=new DefaultComboBoxModel();
  final ModelClass nodeClass=VizController.getInstance().getModelClassLibrary().getNodeClass();
  for (  Modeler modeler : nodeClass.getModelers()) {
    comboModel.addElement(modeler);
  }
  comboModel.setSelectedItem(nodeClass.getCurrentModeler());
  shapeCombo.setModel(comboModel);
  shapeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeClass.setCurrentModeler((Modeler)comboModel.getSelectedItem());
    }
  }
);
}","public void setup(){
  final VizConfig vizConfig=VizController.getInstance().getVizConfig();
  adjustTextCheckbox.setSelected(vizConfig.isAdjustByText());
  adjustTextCheckbox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      vizConfig.setAdjustByText(adjustTextCheckbox.isSelected());
    }
  }
);
  final DefaultComboBoxModel comboModel=new DefaultComboBoxModel();
  final ModelClass nodeClass=VizController.getInstance().getModelClassLibrary().getNodeClass();
  for (  Modeler modeler : nodeClass.getModelers()) {
    comboModel.addElement(modeler);
  }
  comboModel.setSelectedItem(nodeClass.getCurrentModeler());
  shapeCombo.setModel(comboModel);
  shapeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      nodeClass.setCurrentModeler((Modeler)comboModel.getSelectedItem());
    }
  }
);
}",0.8813559322033898
190489,"public void setSizeFactor(TextDataImpl text,ModelImpl model){
  float factor=textModel.sizeFactor / FACTOR * model.getCameraDistance();
  text.setSizeFactor(factor);
}","public void setSizeFactor(TextDataImpl text,ModelImpl model){
  float factor=FACTOR * textModel.sizeFactor / model.getCameraDistance();
  text.setSizeFactor(factor);
}",0.9461077844311376
190490,"public float getHeight(){
  return (float)line.bounds.getHeight();
}","public float getHeight(){
  return (float)line.bounds.getHeight() * sizeFactor;
}",0.912751677852349
190491,"public float getWidth(){
  return (float)line.bounds.getWidth();
}","public float getWidth(){
  return (float)line.bounds.getWidth() * sizeFactor;
}",0.9103448275862068
190492,"public void beginRendering(){
  renderer.begin3DRendering();
}","public void beginRendering(){
  renderer.beginRendering(drawable.getViewportWidth(),drawable.getViewportHeight());
}",0.6741573033707865
190493,"public void drawText(ModelImpl objectModel){
  Renderable renderable=objectModel.getObj();
  TextDataImpl textData=(TextDataImpl)renderable.getTextData();
  if (textData != null) {
    model.colorMode.textColor(this,textData,objectModel);
    model.sizeMode.setSizeFactor(textData,objectModel);
    String txt=textData.line.text;
    Rectangle2D r=renderer.getBounds(txt);
    textData.line.setBounds(r);
    float posX=renderable.x() + (float)r.getWidth() / -2 * textData.sizeFactor;
    float posY=renderable.y() + (float)r.getHeight() / -2 * textData.sizeFactor;
    float posZ=renderable.getRadius();
    renderer.draw3D(txt,posX,posY,posZ,textData.sizeFactor);
  }
}","public void drawText(ModelImpl objectModel){
  Renderable renderable=objectModel.getObj();
  TextDataImpl textData=(TextDataImpl)renderable.getTextData();
  if (textData != null) {
    model.colorMode.textColor(this,textData,objectModel);
    model.sizeMode.setSizeFactor(textData,objectModel);
    if (textData.sizeFactor * renderer.getCharWidth('a') < PIXEL_LIMIT) {
      return;
    }
    String txt=textData.line.text;
    Rectangle2D r=renderer.getBounds(txt);
    textData.line.setBounds(r);
    float posX=renderable.getModel().getViewportX() + (float)r.getWidth() / -2 * textData.sizeFactor;
    float posY=renderable.getModel().getViewportY() + (float)r.getHeight() / -2 * textData.sizeFactor;
    renderer.draw3D(txt,posX,posY,0,textData.sizeFactor);
  }
}",0.8706536856745479
190494,"public void initArchitecture(){
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  model.colorMode=new UniqueColorMode(model);
  model.sizeMode=sizeModes[1];
  model.font=vizConfig.getLabelFont();
  model.nodeColor=vizConfig.getDefaultNodeLabelColor();
  model.edgeColor=vizConfig.getDefaultEdgeLabelColor();
  model.setSelectedOnly(vizConfig.isShowLabelOnSelectedOnly());
  renderer=new Renderer3D();
  renderer.initRenderer();
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!renderer.getFont().equals(model.getFont())) {
        renderer.setFont(model.getFont());
      }
    }
  }
);
}","public void initArchitecture(){
  vizConfig=VizController.getInstance().getVizConfig();
  drawable=VizController.getInstance().getDrawable();
  model.colorMode=new UniqueColorMode(model);
  model.sizeMode=sizeModes[1];
  model.font=vizConfig.getLabelFont();
  model.nodeColor=vizConfig.getDefaultNodeLabelColor();
  model.edgeColor=vizConfig.getDefaultEdgeLabelColor();
  model.setSelectedOnly(vizConfig.isShowLabelOnSelectedOnly());
  renderer=new Renderer2D();
  renderer.initRenderer();
  model.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      if (!renderer.getFont().equals(model.getFont())) {
        renderer.setFont(model.getFont());
      }
    }
  }
);
}",0.998589562764457
190495,"public void endRendering(){
  renderer.end3DRendering();
}","public void endRendering(){
  renderer.endRendering();
}",0.9824561403508772
190496,"public Dhns newDhns(Workspace workspace){
  Dhns dhns=new Dhns(this);
  workspace.getWorkspaceData().setData(workspaceDataProvider.getWorkspaceDataKey(),dhns);
  dhns.setCentralDynamicGraph(new DynamicGraphImpl(dhns,getClusteredDirectedGraph()));
  return dhns;
}","public Dhns newDhns(Workspace workspace){
  Dhns dhns=new Dhns(this);
  workspace.getWorkspaceData().setData(workspaceDataProvider.getWorkspaceDataKey(),dhns);
  dhns.setCentralDynamicGraph(new DynamicGraphImpl(dhns,getHierarchicalDirectedGraph()));
  return dhns;
}",0.8695652173913043
190497,"public DynamicGraphImpl(Dhns dhns,T graph){
  this.graph=graph;
  this.dhns=dhns;
  FilteredGraph filteredGraph=(FilteredGraph)graph;
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
}","public DynamicGraphImpl(Dhns dhns,T graph){
  this.graph=graph;
  this.dhns=dhns;
  FilteredGraph filteredGraph=(FilteredGraph)graph;
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
  filteredGraph=(FilteredGraph)((ClusteredGraphImpl)graph).getClusteredGraph();
  filteredGraph.addNodePredicate(new DynamicNodePredicate());
  filteredGraph.addEdgePredicate(new DynamicEdgePredicate());
}",0.7174515235457064
190498,"public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  container.setReport(new Report());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      finishGenerate(container);
    }
  }
,taskname,errorHandler);
}","public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
  container.setSource(""String_Node_Str"" + generator.getName());
  container.setReport(new Report());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      finishGenerate(container);
    }
  }
,taskname,errorHandler);
}",0.9842300556586272
190499,"public void doImport(Database database){
  try {
    DatabaseType type=getDatabaseType(database);
    if (type == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    final DatabaseImporter importer=getMatchingImporter(type);
    if (importer == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    DatabaseTypeUI ui=type.getUI();
    if (ui != null) {
      ui.setup(type);
      String title=""String_Node_Str"";
      JPanel panel=ui.getPanel();
      if (panel instanceof ValidationPanel) {
        ValidationPanel validationPanel=(ValidationPanel)panel;
        if (!validationPanel.showOkCancelDialog(title)) {
          return;
        }
      }
 else {
        DialogDescriptor dd=new DialogDescriptor(panel,title);
        if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.CANCEL_OPTION)) {
          return;
        }
      }
      ui.unsetup();
      database=ui.getDatabase();
    }
    final Container container=Lookup.getDefault().lookup(Container.class);
    container.setSource(""String_Node_Str"" + importer.getClass());
    final Report report=new Report();
    container.setReport(report);
    LongTask task=null;
    if (importer instanceof LongTask) {
      task=(LongTask)importer;
    }
    final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
      public void fatalError(      Throwable t){
        NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
        DialogDisplayer.getDefault().notify(ex);
      }
    }
;
    final Database db=database;
    executor.execute(task,new Runnable(){
      public void run(){
        try {
          importer.importData(db,container.getLoader(),report);
          finishImport(container);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          throw new RuntimeException(ex);
        }
      }
    }
,""String_Node_Str"",errorHandler);
  }
 catch (  Exception ex) {
    NotifyDescriptor.Message e=new NotifyDescriptor.Message(ex.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notifyLater(e);
    ex.printStackTrace();
  }
}","public void doImport(Database database){
  try {
    DatabaseType type=getDatabaseType(database);
    if (type == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    final DatabaseImporter importer=getMatchingImporter(type);
    if (importer == null) {
      throw new ImportException(NbBundle.getMessage(getClass(),""String_Node_Str""));
    }
    DatabaseTypeUI ui=type.getUI();
    if (ui != null) {
      ui.setup(type);
      String title=""String_Node_Str"";
      JPanel panel=ui.getPanel();
      if (panel instanceof ValidationPanel) {
        ValidationPanel validationPanel=(ValidationPanel)panel;
        if (!validationPanel.showOkCancelDialog(title)) {
          return;
        }
      }
 else {
        DialogDescriptor dd=new DialogDescriptor(panel,title);
        if (DialogDisplayer.getDefault().notify(dd).equals(NotifyDescriptor.CANCEL_OPTION)) {
          return;
        }
      }
      ui.unsetup();
      database=ui.getDatabase();
    }
    final Container container=Lookup.getDefault().lookup(ContainerFactory.class).newContainer();
    container.setSource(""String_Node_Str"" + importer.getClass());
    final Report report=new Report();
    container.setReport(report);
    LongTask task=null;
    if (importer instanceof LongTask) {
      task=(LongTask)importer;
    }
    final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
      public void fatalError(      Throwable t){
        NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
        DialogDisplayer.getDefault().notify(ex);
      }
    }
;
    final Database db=database;
    executor.execute(task,new Runnable(){
      public void run(){
        try {
          importer.importData(db,container.getLoader(),report);
          finishImport(container);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
          throw new RuntimeException(ex);
        }
      }
    }
,""String_Node_Str"",errorHandler);
  }
 catch (  Exception ex) {
    NotifyDescriptor.Message e=new NotifyDescriptor.Message(ex.getMessage(),NotifyDescriptor.WARNING_MESSAGE);
    DialogDisplayer.getDefault().notifyLater(e);
    ex.printStackTrace();
  }
}",0.992269213278763
190500,"public void generate(ContainerLoader container){
  ContainerLoader.ContainerFactory factory=container.factory();
  for (int i=0; i < numberOfNodes; i++) {
    NodeDraft nodeDraft=factory.newNodeDraft();
    nodeDraft.setLabel(""String_Node_Str"" + i);
    nodeDraft.setId(""String_Node_Str"" + i);
    float from=(float)Math.random();
    float to=(float)(from + (1.0 - from) * Math.random());
    nodeDraft.setDynamicFrom(from);
    nodeDraft.setDynamicTo(to);
    container.addNode(nodeDraft);
  }
  for (int i=0; i < numberOfEdges; i++) {
    EdgeDraft edgeDraft=factory.newEdgeDraft();
    int source=(int)(Math.random() * (numberOfNodes));
    int target=(int)(Math.random() * (numberOfNodes));
    edgeDraft.setSource(container.getNode(""String_Node_Str"" + source));
    edgeDraft.setTarget(container.getNode(""String_Node_Str"" + target));
    container.addEdge(edgeDraft);
  }
}","public void generate(ContainerLoader container){
  ContainerLoader.DraftFactory factory=container.factory();
  for (int i=0; i < numberOfNodes; i++) {
    NodeDraft nodeDraft=factory.newNodeDraft();
    nodeDraft.setLabel(""String_Node_Str"" + i);
    nodeDraft.setId(""String_Node_Str"" + i);
    float from=(float)Math.random();
    float to=(float)(from + (1.0 - from) * Math.random());
    nodeDraft.setDynamicFrom(from);
    nodeDraft.setDynamicTo(to);
    container.addNode(nodeDraft);
  }
  for (int i=0; i < numberOfEdges; i++) {
    EdgeDraft edgeDraft=factory.newEdgeDraft();
    int source=(int)(Math.random() * (numberOfNodes));
    int target=(int)(Math.random() * (numberOfNodes));
    edgeDraft.setSource(container.getNode(""String_Node_Str"" + source));
    edgeDraft.setTarget(container.getNode(""String_Node_Str"" + target));
    container.addEdge(edgeDraft);
  }
}",0.992018244013683
190501,"public void generate(ContainerLoader container){
  ContainerLoader.ContainerFactory factory=container.factory();
  NodeDraft nodeA=factory.newNodeDraft();
  nodeA.setLabel(""String_Node_Str"");
  NodeDraft nodeB=factory.newNodeDraft();
  nodeB.setLabel(""String_Node_Str"");
  NodeDraft nodeC=factory.newNodeDraft();
  nodeC.setLabel(""String_Node_Str"");
  NodeDraft nodeD=factory.newNodeDraft();
  nodeD.setLabel(""String_Node_Str"");
  NodeDraft nodeE=factory.newNodeDraft();
  nodeE.setLabel(""String_Node_Str"");
  NodeDraft nodeF=factory.newNodeDraft();
  nodeF.setLabel(""String_Node_Str"");
  NodeDraft nodeG=factory.newNodeDraft();
  nodeG.setLabel(""String_Node_Str"");
  NodeDraft nodeH=factory.newNodeDraft();
  nodeH.setLabel(""String_Node_Str"");
  nodeA.addChild(nodeC);
  nodeA.addChild(nodeD);
  nodeA.addChild(nodeH);
  nodeB.addChild(nodeD);
  nodeB.addChild(nodeE);
  nodeB.addChild(nodeF);
  nodeB.addChild(nodeG);
  container.addNode(nodeA);
  container.addNode(nodeB);
  container.addNode(nodeC);
  container.addNode(nodeD);
  container.addNode(nodeE);
  container.addNode(nodeF);
  container.addNode(nodeG);
  container.addNode(nodeH);
}","public void generate(ContainerLoader container){
  ContainerLoader.DraftFactory factory=container.factory();
  NodeDraft nodeA=factory.newNodeDraft();
  nodeA.setLabel(""String_Node_Str"");
  NodeDraft nodeB=factory.newNodeDraft();
  nodeB.setLabel(""String_Node_Str"");
  NodeDraft nodeC=factory.newNodeDraft();
  nodeC.setLabel(""String_Node_Str"");
  NodeDraft nodeD=factory.newNodeDraft();
  nodeD.setLabel(""String_Node_Str"");
  NodeDraft nodeE=factory.newNodeDraft();
  nodeE.setLabel(""String_Node_Str"");
  NodeDraft nodeF=factory.newNodeDraft();
  nodeF.setLabel(""String_Node_Str"");
  NodeDraft nodeG=factory.newNodeDraft();
  nodeG.setLabel(""String_Node_Str"");
  NodeDraft nodeH=factory.newNodeDraft();
  nodeH.setLabel(""String_Node_Str"");
  nodeA.addChild(nodeC);
  nodeA.addChild(nodeD);
  nodeA.addChild(nodeH);
  nodeB.addChild(nodeD);
  nodeB.addChild(nodeE);
  nodeB.addChild(nodeF);
  nodeB.addChild(nodeG);
  container.addNode(nodeA);
  container.addNode(nodeB);
  container.addNode(nodeC);
  container.addNode(nodeD);
  container.addNode(nodeE);
  container.addNode(nodeF);
  container.addNode(nodeG);
  container.addNode(nodeH);
}",0.9938757655293088
190502,public ContainerFactory factory();,public DraftFactory factory();,0.8125
190503,"public void executeLayout(){
  layoutRun=new LayoutRun(layout);
}","public void executeLayout(){
  layoutRun=new LayoutRun(layout);
  executor.execute(layoutRun);
}",0.8074534161490683
190504,"@Override public void setGraphController(GraphController graphController){
  super.setGraphController(graphController);
  this.graph=graphController.getUndirectedGraph();
}","@Override public void setGraphController(GraphController graphController){
  super.setGraphController(graphController);
  graph=graphController.getUndirectedGraph();
}",0.9852507374631267
190505,"public RotateLayout(LayoutBuilder layoutBuilder,double angle){
  super(layoutBuilder);
  this.angle=angle;
}","public RotateLayout(LayoutBuilder layoutBuilder,double angle){
  super(layoutBuilder);
  this.angle=angle;
  initialized=false;
}",0.9113924050632912
190506,"public void stopEvent(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void stopEvent(){
  stopButton.setEnabled(false);
  playButton.setEnabled(true);
}",0.5536723163841808
190507,"private void initLayoutController(){
  layoutController=Lookup.getDefault().lookup(LayoutController.class);
}","private void initLayoutController(){
  layoutController=Lookup.getDefault().lookup(LayoutController.class);
  layoutController.addObserver(this);
}",0.8515625
190508,"public void executeEvent(){
  throw new UnsupportedOperationException(""String_Node_Str"");
}","public void executeEvent(){
  stopButton.setEnabled(true);
  playButton.setEnabled(false);
}",0.546448087431694
190509,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
 else {
    dataBridge.reset();
    textManager.initArchitecture();
  }
}",0.8310502283105022
190510,"@Override public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  GraphicalConfiguration graphicalConfiguration=new GraphicalConfiguration();
  graphicalConfiguration.checkGeneralCompatibility(gl);
  resizing=false;
  initConfig(gl);
  init(gl);
}","@Override public void init(GLAutoDrawable drawable){
  GL gl=drawable.getGL();
  GraphicalConfiguration graphicalConfiguration=new GraphicalConfiguration();
  graphicalConfiguration.checkGeneralCompatibility(gl);
  viewport=BufferUtil.newIntBuffer(4);
  resizing=false;
  initConfig(gl);
  init(gl);
}",0.9307282415630552
190511,"public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (!resizing) {
    resizing=true;
    if (viewport.get(2) == width && viewport.get(3) == height) {
      return;
    }
    if (height == 0) {
      height=1;
    }
    if (width == 0) {
      width=1;
    }
    int viewportW=0, viewportH=0, viewportX=width, viewportY=height;
    aspectRatio=(double)width / (double)height;
    viewportH=height;
    viewportW=(int)(height * aspectRatio);
    if (viewportW > width) {
      viewportW=width;
      viewportH=(int)(width * (1 / aspectRatio));
    }
    viewportX=((width - viewportW) / 2);
    viewportY=((height - viewportH) / 2);
    GL gl=drawable.getGL();
    gl.glViewport(viewportX,viewportY,viewportW,viewportH);
    gl.glGetIntegerv(GL.GL_VIEWPORT,viewport);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glLoadIdentity();
    glu.gluPerspective(viewField,aspectRatio,nearDistance,farDistance);
    gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,projMatrix);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    reshape3DScene(drawable.getGL());
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VENDOR));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_RENDERER));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VERSION));
    }
    resizing=false;
  }
}","public void reshape(GLAutoDrawable drawable,int x,int y,int width,int height){
  if (!resizing) {
    if (viewport.get(2) == width && viewport.get(3) == height) {
      return;
    }
    resizing=true;
    if (height == 0) {
      height=1;
    }
    if (width == 0) {
      width=1;
    }
    int viewportW=0, viewportH=0, viewportX=width, viewportY=height;
    aspectRatio=(double)width / (double)height;
    viewportH=height;
    viewportW=(int)(height * aspectRatio);
    if (viewportW > width) {
      viewportW=width;
      viewportH=(int)(width * (1 / aspectRatio));
    }
    viewportX=((width - viewportW) / 2);
    viewportY=((height - viewportH) / 2);
    GL gl=drawable.getGL();
    gl.glViewport(viewportX,viewportY,viewportW,viewportH);
    gl.glGetIntegerv(GL.GL_VIEWPORT,viewport);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glLoadIdentity();
    glu.gluPerspective(viewField,aspectRatio,nearDistance,farDistance);
    gl.glGetDoublev(GL.GL_PROJECTION_MATRIX,projMatrix);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
    reshape3DScene(drawable.getGL());
    if (DEBUG) {
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VENDOR));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_RENDERER));
      System.err.println(""String_Node_Str"" + gl.glGetString(GL.GL_VERSION));
    }
    resizing=false;
  }
}",0.9861415025528812
190512,"private void deleteNode(PreNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,null); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
    }
    edgeProcessor.clearEdges(descendant);
    if (descendant == descendant.getOriginalNode()) {
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        treeStructure.deleteDescendantAndSelf(cn);
        cn=cn.getNext();
      }
    }
 else {
      treeStructure.deleteDescendantAndSelf(descendant.getOriginalNode());
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        if (cn != descendant) {
          treeStructure.deleteDescendantAndSelf(cn);
        }
        cn=cn.getNext();
      }
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}","private void deleteNode(PreNode node){
  for (DescendantAndSelfIterator itr=new DescendantAndSelfIterator(treeStructure,node,null); itr.hasNext(); ) {
    AbstractNode descendant=itr.next();
    if (descendant.isEnabled()) {
      edgeProcessor.clearMetaEdges(descendant);
    }
    edgeProcessor.clearEdges(descendant);
    if (descendant == descendant.getOriginalNode()) {
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        unAttachClones(cn);
        treeStructure.deleteDescendantAndSelf(cn);
        cn=cn.getNext();
      }
    }
 else {
      treeStructure.deleteDescendantAndSelf(descendant.getOriginalNode());
      CloneNode cn=descendant.getOriginalNode().getClones();
      while (cn != null) {
        if (cn != descendant) {
          treeStructure.deleteDescendantAndSelf(cn);
        }
        cn=cn.getNext();
      }
    }
  }
  treeStructure.deleteDescendantAndSelf(node);
}",0.9848484848484848
190513,"public boolean contains(Node node){
  if (node == null) {
    throw new NullPointerException();
  }
  AbstractNode absNode=(AbstractNode)node;
  readLock();
  if (!absNode.isValid()) {
    return false;
  }
  boolean res=false;
  if (nodeProposition.evaluate(absNode) && dhns.getTreeStructure().getTree().contains(absNode)) {
    res=true;
  }
  readUnlock();
  return res;
}","public boolean contains(Node node){
  if (node == null) {
    throw new NullPointerException();
  }
  AbstractNode absNode=(AbstractNode)node;
  readLock();
  boolean res=false;
  if (absNode.isValid()) {
    if (nodeProposition.evaluate(absNode) && dhns.getTreeStructure().getTree().contains(absNode)) {
      res=true;
    }
  }
  readUnlock();
  return res;
}",0.8683853459972863
190514,"@Test public void testCloneRemove(){
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  setUp();
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  DhnsGraphController controller=new DhnsGraphController();
  Dhns dhns=controller.getMainDhns();
  ClusteredDirectedGraphImpl graph=new ClusteredDirectedGraphImpl(dhns,false);
  GraphFactoryImpl factory=controller.factory();
  AbstractNode nodeA=factory.newNode();
  AbstractNode nodeB=factory.newNode();
  AbstractNode nodeC=factory.newNode();
  AbstractNode nodeD=factory.newNode();
  graph.addNode(nodeA);
  graph.addNode(nodeB,nodeA);
  graph.addNode(nodeC,nodeA);
  graph.addNode(nodeD,nodeB);
  graph.addNode(nodeD,nodeC);
  graph.addNode(nodeD,nodeA);
  graph.removeNode(nodeD);
  assertFalse(graph1.contains(nodeD));
  assertEquals(2,((PreNode)nodeA).size);
}","@Test public void testCloneRemove(){
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  setUp();
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertFalse(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertEquals(1,((PreNode)nodeMap.get(""String_Node_Str"")).size);
  assertEquals(2,((PreNode)dhns1.getTreeStructure().root).size);
  assertEquals(2,graph1.getNodeCount());
  DhnsGraphController controller=new DhnsGraphController();
  Dhns dhns=controller.getMainDhns();
  ClusteredDirectedGraphImpl graph=new ClusteredDirectedGraphImpl(dhns,false);
  GraphFactoryImpl factory=controller.factory();
  AbstractNode nodeA=factory.newNode();
  AbstractNode nodeB=factory.newNode();
  AbstractNode nodeC=factory.newNode();
  AbstractNode nodeD=factory.newNode();
  graph.addNode(nodeA);
  graph.addNode(nodeB,nodeA);
  graph.addNode(nodeC,nodeA);
  graph.addNode(nodeD,nodeB);
  graph.addNode(nodeD,nodeC);
  graph.addNode(nodeD,nodeA);
  graph.removeNode(nodeD);
  assertFalse(graph.contains(nodeD));
  assertEquals(2,((PreNode)nodeA).size);
  setUp();
  graph1.addNode(nodeMap.get(""String_Node_Str""),nodeMap.get(""String_Node_Str""));
  AbstractNode cloneAafterE=nodeMap.get(""String_Node_Str"").getOriginalNode().getClones();
  graph1.addNode(cloneAafterE,nodeMap.get(""String_Node_Str""));
  graph1.removeNode(nodeMap.get(""String_Node_Str""));
  assertEquals(2,graph1.getNodeCount());
  assertTrue(graph1.contains(nodeMap.get(""String_Node_Str"")));
  assertTrue(graph1.contains(nodeMap.get(""String_Node_Str"")));
}",0.8473132372214941
190515,"public void logIssue(Issue issue){
  entries.add(new ReportEntry(issue));
  if (criticalException && issue.getLevel().equals(Issue.Level.CRITICAL)) {
    if (issue.getThrowable() != null) {
      throw new RuntimeException(issue.getMessage(),issue.getThrowable());
    }
 else {
      throw new RuntimeException(issue.getMessage());
    }
  }
}","public void logIssue(Issue issue){
  entries.add(new ReportEntry(issue));
  if (issue.getLevel().toInteger() >= exceptionLevel.toInteger()) {
    if (issue.getThrowable() != null) {
      throw new RuntimeException(issue.getMessage(),issue.getThrowable());
    }
 else {
      throw new RuntimeException(issue.getMessage());
    }
  }
}",0.5235294117647059
190516,"private void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (nodeDraft.getX() != 0) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeValues()) {
      row.setValue(val.getColumn(),val.getValue());
    }
  }
}","private void flushToNode(NodeDraftGetter nodeDraft,Node node){
  if (nodeDraft.getColor() != null) {
    node.getNodeData().setR(nodeDraft.getColor().getRed() / 255f);
    node.getNodeData().setG(nodeDraft.getColor().getGreen() / 255f);
    node.getNodeData().setB(nodeDraft.getColor().getBlue() / 255f);
  }
  if (nodeDraft.getLabel() != null) {
    node.getNodeData().setLabel(nodeDraft.getLabel());
  }
  if (nodeDraft.getX() != 0) {
    node.getNodeData().setX(nodeDraft.getX());
  }
 else {
    node.getNodeData().setX((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getY() != 0) {
    node.getNodeData().setY(nodeDraft.getY());
  }
 else {
    node.getNodeData().setY((float)((0.01 + Math.random()) * 1000) - 500);
  }
  if (nodeDraft.getZ() != 0) {
    node.getNodeData().setZ(nodeDraft.getZ());
  }
  if (nodeDraft.getSize() != 0) {
    node.getNodeData().setSize(nodeDraft.getSize());
  }
  if (nodeDraft.getId() != null) {
    node.getNodeData().setId(nodeDraft.getId());
  }
  if (node.getNodeData().getAttributes() != null) {
    AttributeRow row=(AttributeRow)node.getNodeData().getAttributes();
    for (    AttributeValue val : nodeDraft.getAttributeValues()) {
      row.setValue(val.getColumn(),val.getValue());
    }
  }
}",0.9407407407407408
190517,"private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  if (vizConfig.isVisualizeTree()) {
    edgeIterable=graph.getHierarchyTree().getEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}","private void updateEdges(){
  Modeler edgeInit=engine.getModelClasses()[AbstractEngine.CLASS_EDGE].getCurrentModeler();
  Modeler arrowInit=engine.getModelClasses()[AbstractEngine.CLASS_ARROW].getCurrentModeler();
  EdgeIterable edgeIterable;
  if (vizConfig.isVisualizeTree()) {
    edgeIterable=graph.getHierarchyTree().getEdges();
  }
 else {
    edgeIterable=graph.getEdges();
  }
  for (  Edge edge : edgeIterable) {
    Model obj=edge.getEdgeData().getModel();
    if (obj == null) {
      obj=edgeInit.initModel(edge.getEdgeData());
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=arrowInit.initModel(edge.getEdgeData());
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
        ((Edge2dModel)obj).setArrow(arrowObj);
      }
    }
 else     if (!obj.isValid()) {
      engine.addObject(AbstractEngine.CLASS_EDGE,(ModelImpl)obj);
      if (vizConfig.isShowArrows() && !edge.isSelfLoop()) {
        ModelImpl arrowObj=((Edge2dModel)obj).getArrow();
        engine.addObject(AbstractEngine.CLASS_ARROW,arrowObj);
        arrowObj.setCacheMarker(cacheMarker);
      }
    }
    obj.setCacheMarker(cacheMarker);
  }
}",0.9913657770800628
190518,"public void executeLayout(final Layout layout){
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      layout.endAlgo();
    }
  }
);
}","public void executeLayout(final Layout layout){
  System.out.println(""String_Node_Str"");
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      System.out.println(""String_Node_Str"");
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      System.out.println(""String_Node_Str"");
      layout.endAlgo();
    }
  }
);
}",0.8519774011299435
190519,"public LayoutControllerImpl(){
  layouts=new ArrayList<Layout>(Lookup.getDefault().lookupAll(Layout.class));
  executor=Executors.newSingleThreadExecutor();
}","public LayoutControllerImpl(){
  layouts=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
  executor=Executors.newSingleThreadExecutor();
}",0.9575757575757576
190520,"public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  System.out.println(""String_Node_Str"");
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  System.out.println(""String_Node_Str"");
  layout.endAlgo();
}",0.8586206896551725
190521,"public GraphFactoryImpl(IDGen idGen,AttributeRowFactory attributesFactory){
  this.idGen=idGen;
}","public GraphFactoryImpl(IDGen idGen,AttributeRowFactory attributesFactory){
  this.idGen=idGen;
  this.attributesFactory=attributesFactory;
}",0.8151260504201681
190522,"private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}","private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
      t.printStackTrace();
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}",0.9856153436334576
190523,"public void executeLayout(final Layout layout){
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      layout.endAlgo();
    }
  }
);
}","public void executeLayout(final Layout layout){
  System.out.println(""String_Node_Str"");
  executor.execute(new Runnable(){
    public void run(){
      GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
      System.out.println(""String_Node_Str"");
      layout.initAlgo(graphController);
      layout.resetPropertiesValues();
      while (layout.canAlgo()) {
        layout.goAlgo();
      }
      System.out.println(""String_Node_Str"");
      layout.endAlgo();
    }
  }
);
}",0.8519774011299435
190524,"public LayoutControllerImpl(){
  layouts=new ArrayList<Layout>(Lookup.getDefault().lookupAll(Layout.class));
  executor=Executors.newSingleThreadExecutor();
}","public LayoutControllerImpl(){
  layouts=new ArrayList<LayoutBuilder>(Lookup.getDefault().lookupAll(LayoutBuilder.class));
  executor=Executors.newSingleThreadExecutor();
}",0.9575757575757576
190525,"public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","public void run(){
  GraphController graphController=Lookup.getDefault().lookup(GraphController.class);
  System.out.println(""String_Node_Str"");
  layout.initAlgo(graphController);
  layout.resetPropertiesValues();
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  System.out.println(""String_Node_Str"");
  layout.endAlgo();
}",0.8586206896551725
190526,"public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  String taskname=""String_Node_Str"" + generator.getName();
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      Lookup.getDefault().lookup(Processor.class).process(container.getUnloader());
    }
  }
,taskname);
}","public void generate(final Generator generator){
  String title=generator.getName();
  GeneratorUI ui=generator.getUI();
  if (ui != null) {
    ui.setup(generator);
    DialogDescriptor dd=new DialogDescriptor(ui.getPanel(),title);
    Object result=DialogDisplayer.getDefault().notify(dd);
    if (result != NotifyDescriptor.OK_OPTION) {
      return;
    }
    ui.unsetup();
  }
  final Container container=Lookup.getDefault().lookup(Container.class);
  container.setSource(""String_Node_Str"" + generator.getName());
  String taskname=""String_Node_Str"" + generator.getName();
  LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(generator,new Runnable(){
    public void run(){
      generator.generate(container.getLoader());
      Lookup.getDefault().lookup(Processor.class).process(container.getUnloader());
    }
  }
,taskname,errorHandler);
}",0.8556034482758621
190527,"private void importXML(FileObject fileObject,Importer importer,final Container container){
  final Document document=getDocument(fileObject);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        xmlImporter.importData(document,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt());
}","private void importXML(FileObject fileObject,Importer importer,final Container container){
  final Document document=getDocument(fileObject);
  final XMLImporter xmlImporter=(XMLImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        xmlImporter.importData(document,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
);
}",0.8629776021080369
190528,"public void run(){
  try {
    textImporter.importData(reader,container.getLoader(),report);
    finishImport(container);
  }
 catch (  Exception ex) {
    Exceptions.printStackTrace(ex);
  }
}","public void run(){
  try {
    textImporter.importData(reader,container.getLoader(),report);
    finishImport(container);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}",0.911917098445596
190529,"private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        Exceptions.printStackTrace(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt());
}","private void importText(FileObject fileObject,Importer importer,final Container container){
  final BufferedReader reader=getTextReader(fileObject);
  final TextImporter textImporter=(TextImporter)importer;
  final Report report=container.getReport();
  LongTask task=null;
  if (importer instanceof LongTask) {
    task=(LongTask)importer;
  }
  final LongTaskErrorHandler errorHandler=new LongTaskErrorHandler(){
    public void fatalError(    Throwable t){
      NotifyDescriptor.Exception ex=new NotifyDescriptor.Exception(t);
      DialogDisplayer.getDefault().notify(ex);
    }
  }
;
  executor.execute(task,new Runnable(){
    public void run(){
      try {
        textImporter.importData(reader,container.getLoader(),report);
        finishImport(container);
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,""String_Node_Str"" + fileObject.getNameExt(),errorHandler);
}",0.8165829145728644
190530,"public void generate(ContainerLoader container){
  int max=numberOfNodes;
  if (wiringProbability > 0) {
    max+=numberOfNodes - 1;
  }
  progress.start(max);
  int progressUnit=0;
  Random random=new Random();
  NodeDraft[] nodeArray=new NodeDraft[numberOfNodes];
  for (int i=0; i < numberOfNodes && !cancel; i++) {
    NodeDraft nodeDraft=container.factory().newNodeDraft();
    nodeDraft.setId(""String_Node_Str"" + i);
    container.addNode(nodeDraft);
    nodeArray[i]=nodeDraft;
    progress.progress(++progressUnit);
  }
  if (wiringProbability > 0) {
    for (int i=0; i < numberOfNodes - 1 && !cancel; i++) {
      NodeDraft node1=nodeArray[i];
      for (int j=i + 1; j < numberOfNodes && !cancel; j++) {
        NodeDraft node2=nodeArray[j];
        if (random.nextDouble() < wiringProbability) {
          EdgeDraft edgeDraft=container.factory().newEdgeDraft();
          edgeDraft.setSource(node1);
          edgeDraft.setTarget(node2);
          container.addEdge(edgeDraft);
        }
      }
      progress.progress(++progressUnit);
    }
  }
}","public void generate(ContainerLoader container){
  int max=numberOfNodes;
  if (wiringProbability > 0) {
    max+=numberOfNodes - 1;
  }
  Progress.start(progress,max);
  int progressUnit=0;
  Random random=new Random();
  NodeDraft[] nodeArray=new NodeDraft[numberOfNodes];
  for (int i=0; i < numberOfNodes && !cancel; i++) {
    NodeDraft nodeDraft=container.factory().newNodeDraft();
    nodeDraft.setId(""String_Node_Str"" + i);
    container.addNode(nodeDraft);
    nodeArray[i]=nodeDraft;
    Progress.progress(progress,++progressUnit);
  }
  if (wiringProbability > 0) {
    for (int i=0; i < numberOfNodes - 1 && !cancel; i++) {
      NodeDraft node1=nodeArray[i];
      for (int j=i + 1; j < numberOfNodes && !cancel; j++) {
        NodeDraft node2=nodeArray[j];
        if (random.nextDouble() < wiringProbability) {
          EdgeDraft edgeDraft=container.factory().newEdgeDraft();
          edgeDraft.setSource(node1);
          edgeDraft.setTarget(node2);
          container.addEdge(edgeDraft);
        }
      }
      Progress.progress(progress,++progressUnit);
    }
  }
}",0.9771774569166278
190531,"/** 
 * Notify the user about completed workunits and show additional detailed message.
 * @param message details about the status of the task
 * @param workunit a cumulative number of workunits completed so far
 */
public void progress(String message,int workunit){
  if (handle != null) {
    int ratioProgress=(int)(100.0 * workunit / progressTotal);
    if (ratioProgress != progress100) {
      progress100=ratioProgress;
      handle.progress(message,ratioProgress);
    }
  }
}","/** 
 * Notify the user about completed workunits and show additional detailed message.
 * @param message details about the status of the task
 * @param workunit a cumulative number of workunits completed so far
 */
public void progress(String message,int workunit){
  currentUnit=workunit;
  if (handle != null) {
    int ratioProgress=(int)(100.0 * workunit / progressTotal);
    if (ratioProgress != progress100) {
      progress100=ratioProgress;
      handle.progress(message,ratioProgress);
    }
  }
}",0.9758064516129032
190532,"/** 
 * Currently indeterminate task can be switched to show percentage completed.
 * @param workunits workunits total number of workunits that will be processed
 */
public void switchToDeterminate(int workunits){
  if (handle != null) {
    this.progressTotal=workunits;
    handle.switchToDeterminate(workunits);
  }
}","/** 
 * Currently indeterminate task can be switched to show percentage completed.
 * @param workunits workunits total number of workunits that will be processed
 */
public void switchToDeterminate(int workunits){
  if (handle != null) {
    this.progressTotal=workunits;
    handle.switchToDeterminate(100);
  }
}",0.9810725552050472
190533,"public boolean cancel(){
  if (inBackground) {
    if (future.cancel(false)) {
      return true;
    }
  }
  return task.cancel();
}","public boolean cancel(){
  if (inBackground) {
    if (future.cancel(false)) {
      return true;
    }
  }
  if (task != null) {
    return task.cancel();
  }
  return false;
}",0.8580645161290322
190534,"public RunningLongTask(LongTask task,Runnable runnable,String taskName){
  this.task=task;
  this.runnable=runnable;
  this.progress=new ProgressTicket(taskName,new Cancellable(){
    public boolean cancel(){
      LongTaskExecutor.this.cancel();
      return true;
    }
  }
);
  task.setProgressTicket(progress);
}","public RunningLongTask(LongTask task,Runnable runnable,String taskName){
  this.task=task;
  this.runnable=runnable;
  this.progress=new ProgressTicket(taskName,new Cancellable(){
    public boolean cancel(){
      LongTaskExecutor.this.cancel();
      return true;
    }
  }
);
  if (task != null) {
    task.setProgressTicket(progress);
  }
}",0.9575757575757576
190535,"public void execute(LongTask task,Runnable runnable){
  execute(task,runnable,""String_Node_Str"");
}","/** 
 * Execute a long task with cancel and progress support. Task can be <code>null</code>. In this case <code>runnable</code> will be executed normally, but without cancel and progress support.
 * @param task the task to be executed, can be <code>null</code>.
 * @param runnable the runnable to be executed
 * @throws NullPointerException if <code>runnable</code> is null
 * @throws IllegalStateException if a task is still executing at this time
 */
public void execute(LongTask task,Runnable runnable){
  execute(task,runnable,""String_Node_Str"");
}",0.304147465437788
190536,"public void goAlgo(){
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.theta=getBarnesHutTheta();
  QuadTree tree=QuadTree.buildTree(graph,getBarnesHutMaxLevel());
  for (  Node node : graph.getTopNodes()) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    if (layoutData == null) {
      System.out.println(""String_Node_Str"" + graph.getLevel(node));
    }
 else {
      ForceVector f=barnes.calculateForce(data,tree);
      layoutData.add(f);
    }
  }
  AbstractForce edgeForce=getEdgeForce();
  for (  Edge e : graph.getEdges()) {
    if (graph.getLevel(e.getSource()) == 0 && graph.getLevel(e.getTarget()) == 0) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=edgeForce.calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  energy0=energy;
  energy=0;
  Displacement displacement=getDisplacement();
  for (  Node n : graph.getTopNodes()) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getEnergy();
    displacement.moveNode(data,force);
  }
  postAlgo();
}","public void goAlgo(){
  BarnesHut barnes=new BarnesHut(getNodeForce());
  barnes.theta=getBarnesHutTheta();
  QuadTree tree=QuadTree.buildTree(graph,getBarnesHutMaxLevel());
  for (  Node node : graph.getTopNodes()) {
    NodeData data=node.getNodeData();
    ForceVector layoutData=data.getLayoutData();
    if (layoutData == null) {
      System.out.println(""String_Node_Str"" + graph.getLevel(node));
    }
 else {
      ForceVector f=barnes.calculateForce(data,tree);
      layoutData.add(f);
    }
  }
  AbstractForce edgeForce=getEdgeForce();
  int count=0;
  for (  Edge e : getTopEdges(graph)) {
    count++;
    if (graph.getLevel(e.getSource()) == 0 && graph.getLevel(e.getTarget()) == 0) {
      NodeData n1=e.getSource().getNodeData();
      NodeData n2=e.getTarget().getNodeData();
      ForceVector f1=n1.getLayoutData();
      ForceVector f2=n2.getLayoutData();
      ForceVector f=edgeForce.calculateForce(n1,n2);
      f1.add(f);
      f2.subtract(f);
    }
  }
  System.out.println(""String_Node_Str"" + count);
  energy0=energy;
  energy=0;
  Displacement displacement=getDisplacement();
  for (  Node n : graph.getTopNodes()) {
    NodeData data=n.getNodeData();
    ForceVector force=data.getLayoutData();
    energy+=force.getEnergy();
    displacement.moveNode(data,force);
  }
  postAlgo();
}",0.96113074204947
190537,"public void moveNode(NodeData node,ForceVector forceData){
  if (forceData.getNorm() > 1e-3) {
    ForceVector displacement=forceData.normalize();
    displacement.multiply(step);
    float x=node.x();
    float y=node.y();
    node.setX(node.x() + displacement.x());
    node.setY(node.y() + displacement.y());
  }
}","public void moveNode(NodeData node,ForceVector forceData){
  ForceVector displacement=forceData;
  displacement.multiply(step);
  float x=node.x();
  float y=node.y();
  node.setX(node.x() + displacement.x());
  node.setY(node.y() + displacement.y());
}",0.5684210526315789
190538,"public static QuadTree buildTree(ClusteredGraph graph,int maxLevel){
  float minX=Float.NEGATIVE_INFINITY;
  float maxX=Float.POSITIVE_INFINITY;
  float minY=Float.NEGATIVE_INFINITY;
  float maxY=Float.POSITIVE_INFINITY;
  for (  Node node : graph.getNodes(0)) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
  }
  float size=Math.max(maxY - minY,maxX - minX);
  QuadTree tree=new QuadTree(minX,minY,size,maxLevel);
  for (  Node node : graph.getNodes(0)) {
    tree.addNode(node.getNodeData());
  }
  return tree;
}","public static QuadTree buildTree(ClusteredGraph graph,int maxLevel){
  float minX=Float.POSITIVE_INFINITY;
  float maxX=Float.NEGATIVE_INFINITY;
  float minY=Float.POSITIVE_INFINITY;
  float maxY=Float.NEGATIVE_INFINITY;
  for (  Node node : graph.getTopNodes()) {
    minX=Math.min(minX,node.getNodeData().x());
    maxX=Math.max(maxX,node.getNodeData().x());
    minY=Math.min(minY,node.getNodeData().y());
    maxY=Math.max(maxY,node.getNodeData().y());
  }
  float size=Math.max(maxY - minY,maxX - minX);
  QuadTree tree=new QuadTree(minX,minY,size,maxLevel);
  for (  Node node : graph.getTopNodes()) {
    tree.addNode(node.getNodeData());
  }
  return tree;
}",0.9292168674698796
190539,"public void resetPropertiesValues(){
  stepRatio=(float)0.9;
  progress=0;
  converged=false;
  optimalDistance=10;
  step=optimalDistance / 10;
  relativeStrength=(float)0.1;
}","public void resetPropertiesValues(){
  stepRatio=(float)0.9;
  progress=0;
  converged=false;
  optimalDistance=getAverageEdge(graph);
  System.out.println(""String_Node_Str"" + optimalDistance);
  step=(float)optimalDistance / 10000;
  relativeStrength=(float)0.2;
}",0.669683257918552
190540,"private void updateStep(){
  if (energy < energy0) {
    progress++;
    if (progress >= 5) {
      progress=0;
      step/=stepRatio;
    }
  }
 else {
    progress=0;
    step*=stepRatio;
  }
  if (Math.abs(energy - energy0) < optimalDistance * 1e-6) {
    converged=true;
  }
}","private void updateStep(){
  if (energy < energy0) {
    progress++;
    if (progress >= 5) {
      progress=0;
      step/=stepRatio;
    }
  }
 else {
    progress=0;
    step*=stepRatio;
  }
  if (Math.abs((energy - energy0) / energy) < 1e-3) {
    converged=true;
  }
}",0.9041591320072332
190541,"@Override public ForceVector calculateForce(Spatial node1,Spatial node2,float distance){
  ForceVector f=new ForceVector(node2.x() - node1.x(),node2.y() - node1.y());
  f.multiply(forceConstant / distance);
  return f;
}","@Override public ForceVector calculateForce(Spatial node1,Spatial node2,float distance){
  ForceVector f=new ForceVector(node2.x() - node1.x(),node2.y() - node1.y());
  f.multiply(-relativeStrength * optimalDistance * optimalDistance / (distance * distance));
  if (Float.isNaN(f.x()) || Float.isNaN(f.y())) {
    f=new ForceVector(100,100);
  }
  return f;
}",0.687392055267703
190542,"public void initAlgo(GraphController graphController){
  graph=graphController.getClusteredDirectedGraph();
}","public void initAlgo(GraphController graphController){
  graph=graphController.getClusteredDirectedGraph();
  level=1;
  CoarseningStrategy coarsening=getCoarseningStrategy();
  coarsening.coarsen(getGraph());
  layout=getForceLayout();
}",0.6282420749279539
190543,"private void recursiveLayout(int level){
  System.out.println(graph.getLevelSize(0) + ""String_Node_Str"" + graph.getEdgeCount());
  if (graph.getLevelSize(0) > 100) {
    CoarseningStrategy coarsening=getCoarseningStrategy();
    coarsening.coarsen(graph);
    recursiveLayout(level + 1);
    layoutLevel(level);
    coarsening.refine(graph);
  }
  System.out.println(""String_Node_Str"" + level);
}","private void recursiveLayout(int level){
  System.out.println(getGraph().getLevelSize(0) + ""String_Node_Str"" + getGraph().getEdgeCount());
  if (level < 2) {
    CoarseningStrategy coarsening=getCoarseningStrategy();
    coarsening.coarsen(getGraph());
    recursiveLayout(level + 1);
    layoutLevel(level);
    coarsening.refine(getGraph());
  }
  System.out.println(""String_Node_Str"" + level);
}",0.5113350125944585
190544,"public void goAlgo(){
  recursiveLayout(0);
  acabou=true;
}","public void goAlgo(){
  if (layout.canAlgo()) {
    layout.goAlgo();
  }
 else {
    layout.endAlgo();
    if (level > 0) {
      CoarseningStrategy coarsening=getCoarseningStrategy();
      coarsening.refine(getGraph());
      level--;
    }
 else {
      acabou=true;
    }
  }
}",0.252199413489736
190545,"private void layoutLevel(int level){
  YifanHu layout=getForceLayout();
  layout.initAlgo(graph);
  layout.resetPropertiesValues();
  layout.optimalDistance=10000000;
  layout.optimalDistance*=Math.pow(4.0 / 7,level / 2.0);
  System.out.println(""String_Node_Str"" + layout.optimalDistance);
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}","private void layoutLevel(int level){
  YifanHu layout=getForceLayout();
  System.out.println(""String_Node_Str"" + layout.optimalDistance);
  while (layout.canAlgo()) {
    layout.goAlgo();
  }
  layout.endAlgo();
}",0.7370242214532872
190546,"public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      startAnimating();
      requestAnimation=false;
    }
  }
}","public void setInited(){
  if (!inited) {
    inited=true;
    if (requestAnimation) {
      graphDrawable.display();
      startAnimating();
      requestAnimation=false;
    }
  }
}",0.9074626865671642
190547,"@Override public void startAnimating(){
  if (!scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.start();
  }
}","@Override public void startAnimating(){
  if (!scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.start();
    graphIO.startMouseListening();
  }
}",0.8923076923076924
190548,"@Override public void stopAnimating(){
  if (scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.stop();
  }
}","@Override public void stopAnimating(){
  if (scheduler.isAnimating()) {
    System.out.println(""String_Node_Str"");
    scheduler.stop();
    graphIO.stopMouseListening();
  }
}",0.8930817610062893
190549,"@Override protected void init(GL gl){
  System.out.println(""String_Node_Str"");
  graphComponent.setCursor(Cursor.getDefaultCursor());
  engine.initEngine(gl,glu);
  VizController.getInstance().getGraphIO().startMouseListening();
}","@Override protected void init(GL gl){
  System.out.println(""String_Node_Str"");
  graphComponent.setCursor(Cursor.getDefaultCursor());
  engine.initEngine(gl,glu);
}",0.8324873096446701
190550,"private void importFakeGraph(){
  CompleteTreeImporter importer=new CompleteTreeImporter(treeStructure,sightManager.getMainSight());
  importer.importGraph(3,false);
  System.out.println(""String_Node_Str"" + treeStructure.getTreeSize());
  RandomEdgesGenerator reg=new RandomEdgesGenerator(treeStructure);
  reg.generatPhysicalEdges(10);
  freeMode.init();
}","private void importFakeGraph(){
  CompleteTreeImporter importer=new CompleteTreeImporter(treeStructure,sightManager.getMainSight());
  importer.importGraph(5,true);
  System.out.println(""String_Node_Str"" + treeStructure.getTreeSize());
  RandomEdgesGenerator reg=new RandomEdgesGenerator(treeStructure);
  reg.generatPhysicalEdges(300);
  freeMode.init();
}",0.9831932773109244
190551,"public void init(){
  SightImpl sight=sightManager.getMainSight();
  SightTreeIterator enabledNodes=new SightTreeIterator(treeStructure,sight);
  for (; enabledNodes.hasNext(); ) {
    PreNode n=enabledNodes.next();
    NodeImpl ni=n.getNode();
    ni.setX(n.getPre() * 50);
    ni.setY(n.getPost() * 50);
  }
  edgeProcessing.init(sightManager.getMainSight());
  sightManager.getMainSight().getSightCache().reset();
}","public void init(){
  SightImpl sight=sightManager.getMainSight();
  edgeProcessing.init(sightManager.getMainSight());
  sightManager.getMainSight().getSightCache().reset();
}",0.5902192242833052
190552,"public NodeImpl(){
  x=((float)Math.random()) * 2000 - 1000.0f;
  y=((float)Math.random()) * 2000 - 1000.0f;
  r=(float)Math.random();
  g=(float)Math.random();
  b=(float)Math.random();
}","public NodeImpl(){
  x=((float)Math.random()) * 2000 - 1000.0f;
  y=((float)Math.random()) * 2000 - 1000.0f;
  r=(float)Math.random();
  g=(float)Math.random();
  b=(float)Math.random();
  size=((float)Math.random()) * 20 + 10;
}",0.9016786570743404
190553,"private void loadConfig(){
  NB_SUBDIVISIONS=4;
switch (potato.getLevel()) {
case 0:
    RAYON=21f;
  INFLUENCE=0.71f;
RAYON_INFLUENCE_MAX=97f;
break;
case 1:
RAYON=26.5f;
INFLUENCE=0.41f;
RAYON_INFLUENCE_MAX=127.5f;
break;
default :
RAYON=39f;
INFLUENCE=0.2f;
RAYON_INFLUENCE_MAX=179f;
break;
}
INTER=RAYON * Math.sqrt(2.0) / NB_SUBDIVISIONS;
}","private void loadConfig(Node node){
  NB_SUBDIVISIONS=4;
switch (potato.getLevel()) {
case 0:
    RAYON=21f;
  INFLUENCE=0.71f;
RAYON_INFLUENCE_MAX=97f;
break;
case 1:
RAYON=26.5f;
INFLUENCE=0.41f;
RAYON_INFLUENCE_MAX=127.5f;
break;
default :
RAYON=39f;
INFLUENCE=0.2f;
RAYON_INFLUENCE_MAX=179f;
break;
}
INTER=RAYON * Math.sqrt(2.0) / NB_SUBDIVISIONS;
}",0.9871244635193132
190554,"public void renderPotato(PotatoImpl potato){
  this.potato=potato;
  loadConfig();
  triangleBuffer=new ArrayList<float[]>();
  disksBuffer=new ArrayList<float[]>();
  for (  Node node : potato.getContent()) {
    createCircle(node.x(),node.y(),RAYON);
    for (int cote=0; cote < 4; cote++) {
      double origine_i, origine_j, step_i, step_j, sens_i, sens_j;
      int g_tailleGrille=NB_SUBDIVISIONS;
      if (cote == 0) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y();
        step_i=-INTER;
        step_j=INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 1) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 2) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else {
        origine_i=node.x() + RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
      boolean finCote=false;
      while (!finCote) {
        finCote=true;
        boolean bl=false, br=false, tr=false, tl=false;
        double fbl, fbr, ftr, ftl;
        float p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y;
        int actifs;
        for (int k=0; k < g_tailleGrille; k++) {
          int i=0, j=0;
          if (cote == 0 || cote == 1) {
            i=k;
          }
 else {
            j=k;
          }
          double LEFT=left(i,origine_i);
          double BOTTOM=bottom(j,origine_j);
          double RIGHT=right(i + sens_i,origine_i);
          double TOP=top(j + sens_j,origine_j);
          fbl=calculBlob(LEFT,BOTTOM,node);
          if (fbl >= INFLUENCE) {
            bl=true;
          }
 else {
            bl=false;
          }
          fbr=calculBlob(RIGHT,BOTTOM,node);
          if (fbr >= INFLUENCE) {
            br=true;
          }
 else {
            br=false;
          }
          ftr=calculBlob(RIGHT,TOP,node);
          if (ftr >= INFLUENCE) {
            tr=true;
          }
 else {
            tr=false;
          }
          ftl=calculBlob(LEFT,TOP,node);
          if (ftl >= INFLUENCE) {
            tl=true;
          }
 else {
            tl=false;
          }
          if (!bl && !br && !tr&& !tl) {
            continue;
          }
 else           if ((!bl || (bl && fbl == -1)) && (!br || (br && fbr == -1)) && (!tr || (tr && ftr == -1))&& (!tl || (tl && ftl == -1))) {
            continue;
          }
          finCote=false;
          actifs=(bl ? 1 : 0) + (br ? 1 : 0) + (tr ? 1 : 0)+ (tl ? 1 : 0);
          if (actifs == 0) {
            continue;
          }
          float LEFTf=(float)LEFT;
          float TOPf=(float)TOP;
          float RIGHTf=(float)RIGHT;
          float BOTTOMf=(float)BOTTOM;
          p1x=LEFTf;
          p1y=(float)(j * INTER + INTER * inter_lin(fbl,ftl) + origine_j);
          p2x=(float)(i * INTER + INTER * inter_lin(fbl,fbr) + origine_i);
          p2y=BOTTOMf;
          p3x=RIGHTf;
          p3y=(float)(j * INTER + INTER * inter_lin(fbr,ftr) + origine_j);
          p4x=(float)(i * INTER + INTER * inter_lin(ftl,ftr) + origine_i);
          p4y=TOPf;
          if (actifs == 4) {
            createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
          }
 else           if (actifs == 3) {
            if (!bl) {
              createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
              createTriangle(p1x,p1y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
              createTriangle(p1x,p1y,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!br) {
              createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
              createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
              createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!tr) {
              createTriangle(p3x,p3y,p4x,p4y,LEFTf,TOPf);
              createTriangle(p3x,p3y,LEFTf,TOPf,LEFTf,BOTTOMf);
              createTriangle(p3x,p3y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
            }
 else             if (!tl) {
              createTriangle(p4x,p4y,p1x,p1y,LEFTf,BOTTOMf);
              createTriangle(p4x,p4y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
              createTriangle(p4x,p4y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
            }
          }
 else           if (actifs == 2) {
            if (bl == tl) {
              if (bl) {
                createSquare(p2x,p2y,p4x,p4y,LEFTf,TOPf,LEFTf,BOTTOMf);
              }
 else {
                createSquare(p2x,p2y,RIGHTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
              }
            }
 else             if (bl == br) {
              if (bl) {
                createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,p3x,p3y,p1x,p1y);
              }
 else {
                createSquare(p3x,p3y,RIGHTf,TOPf,LEFTf,TOPf,p1x,p1y);
              }
            }
 else {
              if (bl == tr && !bl) {
                createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
                createTriangle(p1x,p1y,RIGHTf,BOTTOMf,p3x,p3y);
                createTriangle(p1x,p1y,p3x,p3y,p4x,p4y);
                createTriangle(p1x,p1y,p4x,p4y,LEFTf,TOPf);
              }
 else {
                createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
                createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
                createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
                createTriangle(LEFTf,BOTTOMf,p4x,p4y,p1x,p1y);
              }
            }
          }
 else           if (actifs == 1) {
            if (bl) {
              createTriangle(p1x,p1y,LEFTf,BOTTOMf,p2x,p2y);
            }
 else             if (br) {
              createTriangle(p2x,p2y,RIGHTf,BOTTOMf,p3x,p3y);
            }
 else             if (tr) {
              createTriangle(p3x,p3y,RIGHTf,TOPf,p4x,p4y);
            }
 else             if (tl) {
              createTriangle(p4x,p4y,LEFTf,TOPf,p1x,p1y);
            }
          }
        }
        origine_i+=step_i;
        origine_j+=step_j;
        g_tailleGrille+=2;
      }
    }
  }
  PotatoDisplay display=new PotatoDisplay(triangleBuffer,disksBuffer);
  potato.setDisplay(display);
}","public void renderPotato(PotatoImpl potato){
  this.potato=potato;
  triangleBuffer=new ArrayList<float[]>();
  disksBuffer=new ArrayList<float[]>();
  for (  Node node : potato.getContent()) {
    loadConfig(node);
    createCircle(node.x(),node.y(),RAYON);
    for (int cote=0; cote < 4; cote++) {
      double origine_i, origine_j, step_i, step_j, sens_i, sens_j;
      int g_tailleGrille=NB_SUBDIVISIONS;
      if (cote == 0) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y();
        step_i=-INTER;
        step_j=INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 1) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else       if (cote == 2) {
        origine_i=node.x() - RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=-INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
 else {
        origine_i=node.x() + RAYON * Math.sqrt(2.0) / 2.0;
        origine_j=node.y() - RAYON * Math.sqrt(2.0) / 2.0;
        step_i=INTER;
        step_j=-INTER;
        sens_i=1;
        sens_j=1;
      }
      boolean finCote=false;
      while (!finCote) {
        finCote=true;
        boolean bl=false, br=false, tr=false, tl=false;
        double fbl, fbr, ftr, ftl;
        float p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y;
        int actifs;
        for (int k=0; k < g_tailleGrille; k++) {
          int i=0, j=0;
          if (cote == 0 || cote == 1) {
            i=k;
          }
 else {
            j=k;
          }
          double LEFT=left(i,origine_i);
          double BOTTOM=bottom(j,origine_j);
          double RIGHT=right(i + sens_i,origine_i);
          double TOP=top(j + sens_j,origine_j);
          fbl=calculBlob(LEFT,BOTTOM,node);
          if (fbl >= INFLUENCE) {
            bl=true;
          }
 else {
            bl=false;
          }
          fbr=calculBlob(RIGHT,BOTTOM,node);
          if (fbr >= INFLUENCE) {
            br=true;
          }
 else {
            br=false;
          }
          ftr=calculBlob(RIGHT,TOP,node);
          if (ftr >= INFLUENCE) {
            tr=true;
          }
 else {
            tr=false;
          }
          ftl=calculBlob(LEFT,TOP,node);
          if (ftl >= INFLUENCE) {
            tl=true;
          }
 else {
            tl=false;
          }
          if (!bl && !br && !tr&& !tl) {
            continue;
          }
 else           if ((!bl || (bl && fbl == -1)) && (!br || (br && fbr == -1)) && (!tr || (tr && ftr == -1))&& (!tl || (tl && ftl == -1))) {
            continue;
          }
          finCote=false;
          actifs=(bl ? 1 : 0) + (br ? 1 : 0) + (tr ? 1 : 0)+ (tl ? 1 : 0);
          if (actifs == 0) {
            continue;
          }
          float LEFTf=(float)LEFT;
          float TOPf=(float)TOP;
          float RIGHTf=(float)RIGHT;
          float BOTTOMf=(float)BOTTOM;
          p1x=LEFTf;
          p1y=(float)(j * INTER + INTER * inter_lin(fbl,ftl) + origine_j);
          p2x=(float)(i * INTER + INTER * inter_lin(fbl,fbr) + origine_i);
          p2y=BOTTOMf;
          p3x=RIGHTf;
          p3y=(float)(j * INTER + INTER * inter_lin(fbr,ftr) + origine_j);
          p4x=(float)(i * INTER + INTER * inter_lin(ftl,ftr) + origine_i);
          p4y=TOPf;
          if (actifs == 4) {
            createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
          }
 else           if (actifs == 3) {
            if (!bl) {
              createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
              createTriangle(p1x,p1y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
              createTriangle(p1x,p1y,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!br) {
              createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
              createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
              createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,LEFTf,TOPf);
            }
 else             if (!tr) {
              createTriangle(p3x,p3y,p4x,p4y,LEFTf,TOPf);
              createTriangle(p3x,p3y,LEFTf,TOPf,LEFTf,BOTTOMf);
              createTriangle(p3x,p3y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
            }
 else             if (!tl) {
              createTriangle(p4x,p4y,p1x,p1y,LEFTf,BOTTOMf);
              createTriangle(p4x,p4y,LEFTf,BOTTOMf,RIGHTf,BOTTOMf);
              createTriangle(p4x,p4y,RIGHTf,BOTTOMf,RIGHTf,TOPf);
            }
          }
 else           if (actifs == 2) {
            if (bl == tl) {
              if (bl) {
                createSquare(p2x,p2y,p4x,p4y,LEFTf,TOPf,LEFTf,BOTTOMf);
              }
 else {
                createSquare(p2x,p2y,RIGHTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
              }
            }
 else             if (bl == br) {
              if (bl) {
                createSquare(LEFTf,BOTTOMf,RIGHTf,BOTTOMf,p3x,p3y,p1x,p1y);
              }
 else {
                createSquare(p3x,p3y,RIGHTf,TOPf,LEFTf,TOPf,p1x,p1y);
              }
            }
 else {
              if (bl == tr && !bl) {
                createTriangle(p1x,p1y,p2x,p2y,RIGHTf,BOTTOMf);
                createTriangle(p1x,p1y,RIGHTf,BOTTOMf,p3x,p3y);
                createTriangle(p1x,p1y,p3x,p3y,p4x,p4y);
                createTriangle(p1x,p1y,p4x,p4y,LEFTf,TOPf);
              }
 else {
                createTriangle(LEFTf,BOTTOMf,p2x,p2y,p3x,p3y);
                createTriangle(LEFTf,BOTTOMf,p3x,p3y,RIGHTf,TOPf);
                createTriangle(LEFTf,BOTTOMf,RIGHTf,TOPf,p4x,p4y);
                createTriangle(LEFTf,BOTTOMf,p4x,p4y,p1x,p1y);
              }
            }
          }
 else           if (actifs == 1) {
            if (bl) {
              createTriangle(p1x,p1y,LEFTf,BOTTOMf,p2x,p2y);
            }
 else             if (br) {
              createTriangle(p2x,p2y,RIGHTf,BOTTOMf,p3x,p3y);
            }
 else             if (tr) {
              createTriangle(p3x,p3y,RIGHTf,TOPf,p4x,p4y);
            }
 else             if (tl) {
              createTriangle(p4x,p4y,LEFTf,TOPf,p1x,p1y);
            }
          }
        }
        origine_i+=step_i;
        origine_j+=step_j;
        g_tailleGrille+=2;
      }
    }
  }
  PotatoDisplay display=new PotatoDisplay(triangleBuffer,disksBuffer);
  potato.setDisplay(display);
  System.out.println(""String_Node_Str"" + potato.getNode().getIndex());
}",0.991494342567304
190555,"public void showTreeAsTable(){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int pre=0;
  for (  PreNode p : tree) {
    System.out.println(p.pre + ""String_Node_Str"" + p.size+ ""String_Node_Str""+ p.level+ ""String_Node_Str""+ p.parent+ ""String_Node_Str""+ p.post+ ""String_Node_Str""+ p.preTrace);
    pre++;
  }
}","public void showTreeAsTable(SightImpl sight){
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  int pre=0;
  for (  PreNode p : tree) {
    boolean enabled=p.isEnabled(sight);
    System.out.println(p.pre + ""String_Node_Str"" + p.size+ ""String_Node_Str""+ p.level+ ""String_Node_Str""+ p.parent+ ""String_Node_Str""+ p.post+ ""String_Node_Str""+ p.preTrace+ ""String_Node_Str""+ enabled);
    pre++;
  }
}",0.8929032258064517
190556,"public void run(){
  while (true) {
    try {
      Transaction txn=Hazelcast.getTransaction();
      txn.begin();
      try {
        Order order=positionSlurperQueue.take();
        PositionPortfolioManager position=null;
        String key=order.instrument.id + ""String_Node_Str"" + order.portfolioManager.id;
        if ((position=(PositionPortfolioManager)portfolioManagerPositionMap.get(key)) == null) {
          position=new PositionPortfolioManager(order.instrument.id,order.portfolioManager.id);
        }
        position.addOrder(order);
        portfolioManagerPositionMap.put(position.getKey(),position);
        txn.commit();
      }
 catch (      Throwable t) {
        t.printStackTrace();
        txn.rollback();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","@Override public void run(){
  for (int i=0; i < 300; i++) {
    double price=(int)(Math.random() * 50) + 1;
    topicFeed.publish(new StockPriceUpdate(StockDatabase.randomPick(),price));
  }
}",0.1536926147704591
190557,"public static void main(String[] args) throws Exception {
  BlockingQueue positionSlurperQueue=Hazelcast.getQueue(""String_Node_Str"");
  Map orderMap=Hazelcast.getMap(""String_Node_Str"");
  Map instrumentMap=Hazelcast.getMap(""String_Node_Str"");
  Map portfolioManagerMap=Hazelcast.getMap(""String_Node_Str"");
  int threads=2;
  ExecutorService threadExecutor=Executors.newFixedThreadPool(threads);
  for (int i=0; i < threads; i++) {
    threadExecutor.execute(new PositionQueueSlurper());
    System.out.println(""String_Node_Str"" + i);
  }
  PortfolioManager pm1=new PortfolioManager(1,""String_Node_Str"");
  PortfolioManager pm2=new PortfolioManager(2,""String_Node_Str"");
  portfolioManagerMap.put(pm1.id,pm1);
  portfolioManagerMap.put(pm2.id,pm1);
  Instrument stock=new Instrument(1,""String_Node_Str"",""String_Node_Str"");
  instrumentMap.put(stock.id,stock);
  List<Order> orders=new ArrayList<Order>();
  int orderId=1;
  orders.add(new Order(orderId++,stock,pm1,10000D,101.00));
  orders.add(new Order(orderId++,stock,pm2,-8000D,101.50));
  orders.add(new Order(orderId++,stock,pm1,-4000D,102.00));
  orders.add(new Order(orderId++,stock,pm2,5000D,101.00));
  for (  Order order : orders) {
    Transaction txn=Hazelcast.getTransaction();
    txn.begin();
    try {
      orderMap.put(order.id,order);
      positionSlurperQueue.put(order);
      txn.commit();
    }
 catch (    Throwable t) {
      txn.rollback();
    }
  }
  Thread.sleep(2000);
  Map entityPositionMap=Hazelcast.getMap(""String_Node_Str"");
  Position p=(Position)entityPositionMap.get(1);
  Instrument i=(Instrument)instrumentMap.get(p.instrumentId);
  System.out.println(i.symbol + ""String_Node_Str"" + p.quantity);
  Map portfolioManagerPositionMap=Hazelcast.getMap(""String_Node_Str"");
  p=(Position)portfolioManagerPositionMap.get(""String_Node_Str"");
  i=(Instrument)instrumentMap.get(p.instrumentId);
  System.out.println(i.symbol + ""String_Node_Str"" + p.quantity);
  p=(Position)portfolioManagerPositionMap.get(""String_Node_Str"");
  i=(Instrument)instrumentMap.get(p.instrumentId);
  System.out.println(i.symbol + ""String_Node_Str"" + p.quantity);
}","public static void main(String[] args){
  new Node().init();
}",0.0549199084668192
190558,"public void onAuthenticationResult(boolean result,String message){
  if (result) {
    TextView username_text=(TextView)findViewById(R.id.account_username), password_text=(TextView)findViewById(R.id.account_password);
    URL url;
    try {
      url=new URL(message);
    }
 catch (    MalformedURLException e) {
      Log.e(getClass().getName(),""String_Node_Str"" + message);
      return;
    }
    String username=username_text.getText().toString().trim();
    String accountName=username + ""String_Node_Str"" + url.getHost();
    Account account=new Account(accountName,AccountAuthenticator.ACCOUNT_TYPE);
    AccountManager accManager=AccountManager.get(this);
    accManager.addAccountExplicitly(account,password_text.getText().toString(),null);
    SharedPreferences appPreferences=PreferenceManager.getDefaultSharedPreferences(this);
    String defaultAccountName=appPreferences.getString(""String_Node_Str"",null);
    if (defaultAccountName == null) {
      SharedPreferences.Editor editor=appPreferences.edit();
      editor.putString(""String_Node_Str"",accountName);
      editor.commit();
    }
    final Intent intent=new Intent();
    intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,AccountAuthenticator.ACCOUNT_TYPE);
    intent.putExtra(AccountManager.KEY_ACCOUNT_NAME,account.name);
    intent.putExtra(AccountManager.KEY_AUTHTOKEN,AccountAuthenticator.ACCOUNT_TYPE);
    accManager.setUserData(account,AccountAuthenticator.KEY_OC_URL,url.toString());
    intent.putExtra(AccountManager.KEY_USERDATA,username);
    accManager.setUserData(account,AccountAuthenticator.KEY_CONTACT_URL,url.toString().replace(AuthUtils.WEBDAV_PATH_2_0,AuthUtils.CARDDAV_PATH_2_0));
    setAccountAuthenticatorResult(intent.getExtras());
    setResult(RESULT_OK,intent);
    Bundle bundle=new Bundle();
    bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
    getContentResolver().startSync(ProviderTableMeta.CONTENT_URI,bundle);
    dismissDialog(0);
    finish();
  }
 else {
    Toast.makeText(this,message,Toast.LENGTH_LONG).show();
    dismissDialog(0);
  }
}","public void onAuthenticationResult(boolean result,String message){
  if (result) {
    TextView username_text=(TextView)findViewById(R.id.account_username), password_text=(TextView)findViewById(R.id.account_password);
    URL url;
    try {
      url=new URL(message);
    }
 catch (    MalformedURLException e) {
      Log.e(getClass().getName(),""String_Node_Str"" + message);
      return;
    }
    String username=username_text.getText().toString().trim();
    String accountName=username + ""String_Node_Str"" + url.getHost();
    Account account=new Account(accountName,AccountAuthenticator.ACCOUNT_TYPE);
    AccountManager accManager=AccountManager.get(this);
    accManager.addAccountExplicitly(account,password_text.getText().toString(),null);
    Account defaultAccount=AuthUtils.getCurrentOwnCloudAccount(this);
    if (defaultAccount == null) {
      SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(this).edit();
      editor.putString(""String_Node_Str"",accountName);
      editor.commit();
    }
    final Intent intent=new Intent();
    intent.putExtra(AccountManager.KEY_ACCOUNT_TYPE,AccountAuthenticator.ACCOUNT_TYPE);
    intent.putExtra(AccountManager.KEY_ACCOUNT_NAME,account.name);
    intent.putExtra(AccountManager.KEY_AUTHTOKEN,AccountAuthenticator.ACCOUNT_TYPE);
    accManager.setUserData(account,AccountAuthenticator.KEY_OC_URL,url.toString());
    intent.putExtra(AccountManager.KEY_USERDATA,username);
    accManager.setUserData(account,AccountAuthenticator.KEY_CONTACT_URL,url.toString().replace(AuthUtils.WEBDAV_PATH_2_0,AuthUtils.CARDDAV_PATH_2_0));
    setAccountAuthenticatorResult(intent.getExtras());
    setResult(RESULT_OK,intent);
    Bundle bundle=new Bundle();
    bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);
    getContentResolver().startSync(ProviderTableMeta.CONTENT_URI,bundle);
    dismissDialog(0);
    finish();
  }
 else {
    Toast.makeText(this,message,Toast.LENGTH_LONG).show();
    dismissDialog(0);
  }
}",0.9245514868518064
190559,"@Override protected Integer doInBackground(Void... params){
  if (!new ShellCommand().canSU()) {
  }
  if (Prefs.getShowNotAokpWarning(activity)) {
    if (!Tools.getROMVersion().startsWith(""String_Node_Str"")) {
      return RESULT_NOT_AOKP;
    }
  }
  return RESULT_OK;
}","@Override protected Integer doInBackground(Void... params){
  if (!new ShellCommand().canSU()) {
    return RESULT_NO_ROOT;
  }
  if (Prefs.getShowNotAokpWarning(activity)) {
    if (!Tools.getROMVersion().startsWith(""String_Node_Str"")) {
      return RESULT_NOT_AOKP;
    }
  }
  return RESULT_OK;
}",0.9528795811518324
190560,"@SuppressWarnings(""String_Node_Str"") public static String notEq(String s){
  return argThat(new Not(new Equals(s)));
}","@SuppressWarnings(""String_Node_Str"") public static String notEq(String s){
  return Matchers.<String>argThat(new Not(new Equals(s)));
}",0.932806324110672
190561,"UserNotFoundException(String loginName){
  this.loginName=loginName;
}","public UserNotFoundException(String loginName){
  this.loginName=loginName;
}",0.9523809523809524
190562,"PageNotFoundException(String projectName,String branchName,String path){
  this.projectName=projectName;
  this.branchName=branchName;
  this.path=path;
}","public PageNotFoundException(String projectName,String branchName,String path){
  this.projectName=projectName;
  this.branchName=branchName;
  this.path=path;
}",0.9777777777777776
190563,"public void broadcastTo(int index,CommandSender to){
  Message message=getMessage(index);
  if (message != null) {
    List<String> messages=message.getMessages();
    List<String> commands=message.getCommands();
    for (int i=0; i < messages.size(); i++) {
      String m=messages.get(i);
      if (to instanceof Player) {
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getDisplayName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getWorld().getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getLocation().getBlock().getBiome().toString());
      }
 else       if (to instanceof ConsoleCommandSender) {
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",to.getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",to.getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",""String_Node_Str"");
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().length + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getOfflinePlayers().length + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.WEEK_OF_MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.WEEK_OF_YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_WEEK) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.HOUR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.HOUR_OF_DAY) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.MINUTE) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.SECOND) + ""String_Node_Str"");
      if (message.isJsonMessage(i) && to instanceof Player) {
        String v=Bukkit.getServer().getClass().getPackage().getName().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[3];
        try {
          Object parsedMessage=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"",String.class).invoke(null,ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),m));
          Object packetPlayOutChat=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getConstructor(Class.forName(""String_Node_Str"" + v + ""String_Node_Str"")).newInstance(parsedMessage);
          Object craftPlayer=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").cast(to);
          Object craftHandle=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"").invoke(craftPlayer);
          Object playerConnection=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getField(""String_Node_Str"").get(craftHandle);
          Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"",Class.forName(""String_Node_Str"" + v + ""String_Node_Str"")).invoke(playerConnection,packetPlayOutChat);
        }
 catch (        Exception ignore) {
        }
      }
 else {
        to.sendMessage(ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),m));
      }
    }
    for (    String command : commands) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),command.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
  }
}","public void broadcastTo(int index,CommandSender to){
  Message message=getMessage(index);
  if (message != null) {
    List<String> messages=message.getMessages();
    List<String> commands=message.getCommands();
    for (int i=0; i < messages.size(); i++) {
      String m=messages.get(i);
      if (to instanceof Player) {
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getDisplayName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getWorld().getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",((Player)to).getLocation().getBlock().getBiome().toString());
      }
 else       if (to instanceof ConsoleCommandSender) {
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",to.getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",to.getName());
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",""String_Node_Str"");
        if (m.contains(""String_Node_Str""))         m=m.replace(""String_Node_Str"",""String_Node_Str"");
      }
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().size() + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Bukkit.getServer().getOfflinePlayers().length + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.WEEK_OF_MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.WEEK_OF_YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_WEEK) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_MONTH) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.DAY_OF_YEAR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.HOUR) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.HOUR_OF_DAY) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.MINUTE) + ""String_Node_Str"");
      if (m.contains(""String_Node_Str""))       m=m.replace(""String_Node_Str"",Calendar.getInstance().get(Calendar.SECOND) + ""String_Node_Str"");
      if (message.isJsonMessage(i) && to instanceof Player) {
        String v=Bukkit.getServer().getClass().getPackage().getName().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")[3];
        try {
          Object parsedMessage=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"",String.class).invoke(null,ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),m));
          Object packetPlayOutChat=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getConstructor(Class.forName(""String_Node_Str"" + v + ""String_Node_Str"")).newInstance(parsedMessage);
          Object craftPlayer=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").cast(to);
          Object craftHandle=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"").invoke(craftPlayer);
          Object playerConnection=Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getField(""String_Node_Str"").get(craftHandle);
          Class.forName(""String_Node_Str"" + v + ""String_Node_Str"").getMethod(""String_Node_Str"",Class.forName(""String_Node_Str"" + v + ""String_Node_Str"")).invoke(playerConnection,packetPlayOutChat);
        }
 catch (        Exception ignore) {
          ignore.printStackTrace();
        }
      }
 else {
        to.sendMessage(ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),m));
      }
    }
    for (    String command : commands) {
      Bukkit.dispatchCommand(Bukkit.getConsoleSender(),command.replaceFirst(""String_Node_Str"",""String_Node_Str""));
    }
  }
}",0.9950546053987224
190564,"public boolean loadConfig(){
  if (!(new File(getDataFolder() + File.separator + ""String_Node_Str"").exists())) {
    saveDefaultConfig();
  }
  try {
    new YamlConfiguration().load(new File(getDataFolder() + File.separator + ""String_Node_Str""));
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    Bukkit.getPluginManager().disablePlugin(this);
    return false;
  }
  reloadConfig();
  MessageLists.clear();
  for (  String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    MessageList list=new MessageList();
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setEnabled(getConfig().getBoolean(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setInterval(getConfig().getInt(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setExpiry(getConfig().getLong(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setRandom(getConfig().getBoolean(""String_Node_Str"" + key + ""String_Node_Str""));
    LinkedList<Message> finalMessages=new LinkedList<Message>();
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str"")) {
      List<String> messages=getConfig().getStringList(""String_Node_Str"" + key + ""String_Node_Str"");
      for (      String m : messages) {
        finalMessages.add(new Message(m));
      }
    }
    list.setMessages(finalMessages);
    MessageLists.setList(key,list);
  }
  MessageLists.schedule();
  saveConfiguration();
  return true;
}","public boolean loadConfig(){
  if (!(new File(getDataFolder() + File.separator + ""String_Node_Str"").exists())) {
    saveDefaultConfig();
  }
  try {
    new YamlConfiguration().load(new File(getDataFolder() + File.separator + ""String_Node_Str""));
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    e.printStackTrace();
    Bukkit.getPluginManager().disablePlugin(this);
    return false;
  }
  reloadConfig();
  MessageLists.clear();
  for (  String key : getConfig().getConfigurationSection(""String_Node_Str"").getKeys(false)) {
    MessageList list=new MessageList();
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setEnabled(getConfig().getBoolean(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setInterval(getConfig().getInt(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setExpiry(getConfig().getLong(""String_Node_Str"" + key + ""String_Node_Str""));
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str""))     list.setRandom(getConfig().getBoolean(""String_Node_Str"" + key + ""String_Node_Str""));
    LinkedList<Message> finalMessages=new LinkedList<Message>();
    if (getConfig().contains(""String_Node_Str"" + key + ""String_Node_Str"")) {
      ArrayList<Object> messages=(ArrayList<Object>)getConfig().getList(""String_Node_Str"" + key + ""String_Node_Str"");
      for (      Object m : messages) {
        if (m instanceof String) {
          finalMessages.add(new Message((String)m));
        }
 else         if (m instanceof Map) {
          Map<String,List<String>> message=(Map<String,List<String>>)m;
          for (          Entry<String,List<String>> entry : message.entrySet()) {
            finalMessages.add(new Message(entry.getKey()));
          }
        }
      }
    }
    list.setMessages(finalMessages);
    MessageLists.setList(key,list);
  }
  MessageLists.schedule();
  saveConfiguration();
  return true;
}",0.905734678808762
190565,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_SUFFIX) public void onSuffixCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (args.length == 1) {
      list.setSuffix(""String_Node_Str"");
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
    }
 else {
      list.setSuffix(StringUtil.concat(args,1,args.length) + ""String_Node_Str"");
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_SUFFIX) public void onSuffixCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (args.length == 1) {
      list.setSuffix(""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      list.setSuffix(""String_Node_Str"" + StringUtil.concat(args,1,args.length));
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.8111254851228978
190566,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_ADD) public void onAddCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (args.length == 1) {
    if (MessageLists.getExactList(args[0]) == null) {
      MessageLists.setList(args[0],new MessageList());
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    MessageList list=MessageLists.getBestList(args[0]);
    if (list != null) {
      if (args.length >= 2) {
        if (args.length >= 3 && StringUtil.isInteger(args[1])) {
          list.addMessage(Integer.valueOf(args[1]),StringUtil.concat(args,2,args.length));
        }
 else {
          list.addMessage(StringUtil.concat(args,1,args.length));
        }
        AutoMessage.getPlugin().saveConfiguration();
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_ADD) public void onAddCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (args.length == 1) {
    if (MessageLists.getExactList(args[0]) == null) {
      MessageLists.setList(args[0],new MessageList());
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    MessageList list=MessageLists.getBestList(args[0]);
    if (list != null) {
      if (args.length >= 2) {
        if (args.length >= 3 && StringUtil.isInteger(args[1])) {
          list.addMessage(Integer.valueOf(args[1]),StringUtil.concat(args,2,args.length));
        }
 else {
          list.addMessage(StringUtil.concat(args,1,args.length));
        }
        AutoMessage.getPlugin().saveConfiguration();
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.9784719290840016
190567,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=2,max=2,permission=Permission.COMMAND_EXPIRY) public void onExpiryCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    try {
      if (StringUtil.isInteger(args[1])) {
        if (Integer.valueOf(args[1]).longValue() >= 0) {
          list.setExpiry(System.currentTimeMillis() + Integer.valueOf(args[1]).longValue());
        }
 else {
          list.setExpiry(Integer.valueOf(-1).longValue());
        }
      }
 else {
        list.setExpiry(System.currentTimeMillis() + StringUtil.parseTime(args[1]));
      }
      if (list.getExpiry() != -1) {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ StringUtil.millisToLongDHMS(list.getExpiry() - System.currentTimeMillis())+ ChatColor.GREEN+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
      AutoMessage.getPlugin().saveConfiguration();
    }
 catch (    NumberFormatException e) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=2,max=2,permission=Permission.COMMAND_EXPIRY) public void onExpiryCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    try {
      if (StringUtil.isInteger(args[1])) {
        if (Integer.valueOf(args[1]).longValue() >= 0) {
          list.setExpiry(System.currentTimeMillis() + Integer.valueOf(args[1]).longValue());
        }
 else {
          list.setExpiry(Integer.valueOf(-1).longValue());
        }
      }
 else {
        list.setExpiry(System.currentTimeMillis() + StringUtil.parseTime(args[1]));
      }
      AutoMessage.getPlugin().saveConfiguration();
      if (list.getExpiry() != -1) {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ StringUtil.millisToLongDHMS(list.getExpiry() - System.currentTimeMillis())+ ChatColor.GREEN+ ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
    }
 catch (    NumberFormatException e) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.9596199524940616
190568,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=2,max=2,permission=Permission.COMMAND_INTERVAL) public void onIntervalCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (StringUtil.isInteger(args[1])) {
      list.setInterval(Integer.valueOf(args[1]));
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ Integer.valueOf(args[1])+ ChatColor.GREEN+ ""String_Node_Str"");
      MessageLists.schedule();
      AutoMessage.getPlugin().saveConfiguration();
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=2,max=2,permission=Permission.COMMAND_INTERVAL) public void onIntervalCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (StringUtil.isInteger(args[1])) {
      list.setInterval(Integer.valueOf(args[1]));
      MessageLists.schedule();
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ Integer.valueOf(args[1])+ ChatColor.GREEN+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.8952745849297573
190569,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_PREFIX) public void onPrefixCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (args.length == 1) {
      list.setPrefix(""String_Node_Str"");
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
    }
 else {
      list.setPrefix(StringUtil.concat(args,1,args.length) + ""String_Node_Str"");
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,permission=Permission.COMMAND_PREFIX) public void onPrefixCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (args.length == 1) {
      list.setPrefix(""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      list.setPrefix(StringUtil.concat(args,1,args.length) + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.8111254851228978
190570,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=1,permission=Permission.COMMAND_ENABLE) public void onEnableCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    list.setEnabled(!(list.isEnabled()));
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ list.isEnabled()+ ChatColor.GREEN+ ""String_Node_Str"");
    AutoMessage.getPlugin().saveConfiguration();
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=1,permission=Permission.COMMAND_ENABLE) public void onEnableCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    list.setEnabled(!(list.isEnabled()));
    AutoMessage.getPlugin().saveConfiguration();
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ list.isEnabled()+ ChatColor.GREEN+ ""String_Node_Str"");
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.8217821782178217
190571,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=3,permission=Permission.COMMAND_EDIT) public void onEditCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (StringUtil.isInteger(args[1])) {
      if (list.editMessage(Integer.valueOf(args[1]),StringUtil.concat(args,2,args.length))) {
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        AutoMessage.getPlugin().saveConfiguration();
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=3,permission=Permission.COMMAND_EDIT) public void onEditCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    if (StringUtil.isInteger(args[1])) {
      if (list.editMessage(Integer.valueOf(args[1]),StringUtil.concat(args,2,args.length))) {
        AutoMessage.getPlugin().saveConfiguration();
        sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.933080808080808
190572,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=3,permission=Permission.COMMAND_REMOVE) public void onRemoveCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (args.length == 1) {
    if (MessageLists.getExactList(args[0]) != null) {
      MessageLists.setList(args[0],null);
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
      AutoMessage.getPlugin().saveConfiguration();
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    MessageList list=MessageLists.getBestList(args[0]);
    if (list != null) {
      if (StringUtil.isInteger(args[1])) {
        if (list.removeMessage(Integer.valueOf(args[1]))) {
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          MessageLists.schedule();
          AutoMessage.getPlugin().saveConfiguration();
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=3,permission=Permission.COMMAND_REMOVE) public void onRemoveCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  if (args.length == 1) {
    if (MessageLists.getExactList(args[0]) != null) {
      MessageLists.setList(args[0],null);
      AutoMessage.getPlugin().saveConfiguration();
      sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    MessageList list=MessageLists.getBestList(args[0]);
    if (list != null) {
      if (StringUtil.isInteger(args[1])) {
        if (list.removeMessage(Integer.valueOf(args[1]))) {
          MessageLists.schedule();
          AutoMessage.getPlugin().saveConfiguration();
          sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
        }
 else {
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
        }
      }
 else {
        sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}",0.8788659793814433
190573,"@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=1,permission=Permission.COMMAND_RANDOM) public void onRandomCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    list.setRandom(!(list.isRandom()));
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ list.isRandom()+ ChatColor.GREEN+ ""String_Node_Str"");
    AutoMessage.getPlugin().saveConfiguration();
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","@BaseCommand(aliases=""String_Node_Str"",desc=""String_Node_Str"",usage=""String_Node_Str"",min=1,max=1,permission=Permission.COMMAND_RANDOM) public void onRandomCmd(CommandSender sender,Command cmd,String commandLabel,String[] args){
  MessageList list=MessageLists.getBestList(args[0]);
  if (list != null) {
    list.setRandom(!(list.isRandom()));
    AutoMessage.getPlugin().saveConfiguration();
    sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.YELLOW+ list.isRandom()+ ChatColor.GREEN+ ""String_Node_Str"");
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}",0.9187396351575456
190574,"public void setCurrentIndex(int currentIndex){
  this.currentIndex=currentIndex;
}","public void setCurrentIndex(int index){
  this.currentIndex=index;
  if (currentIndex >= messages.size() || currentIndex < 0) {
    this.currentIndex=0;
  }
}",0.6166666666666667
190575,"public void broadcastTo(int index,CommandSender to){
  if (getMessage(index) != null) {
    String[] lines=getMessage(index).split(""String_Node_Str"");
    List<String> messages=new ArrayList<String>();
    List<String> commands=new ArrayList<String>();
    for (    String line : lines) {
      if (line.startsWith(""String_Node_Str"")) {
        commands.add(line.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        messages.add(line);
      }
    }
    if (messages.size() >= 1) {
      messages=Arrays.asList((getPrefix() + StringUtils.join(messages.toArray(),""String_Node_Str"") + getSuffix()).split(""String_Node_Str""));
    }
    for (    String message : messages) {
      if (to instanceof Player) {
        message=message.replace(""String_Node_Str"",((Player)to).getName());
        message=message.replace(""String_Node_Str"",((Player)to).getDisplayName());
        message=message.replace(""String_Node_Str"",((Player)to).getWorld().getName());
        message=message.replace(""String_Node_Str"",((Player)to).getLocation().getBlock().getBiome().toString());
        message=message.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().length + ""String_Node_Str"");
        message=message.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      }
 else       if (to instanceof ConsoleCommandSender) {
        message=message.replace(""String_Node_Str"",""String_Node_Str"");
        message=message.replace(""String_Node_Str"",""String_Node_Str"");
        message=message.replace(""String_Node_Str"",""String_Node_Str"");
        message=message.replace(""String_Node_Str"",""String_Node_Str"");
        message=message.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().length + ""String_Node_Str"");
        message=message.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      }
      to.sendMessage(ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),message));
    }
    for (    String command : commands) {
      if (to instanceof ConsoleCommandSender) {
        Bukkit.dispatchCommand(Bukkit.getConsoleSender(),command);
      }
    }
  }
}","public void broadcastTo(int index,CommandSender to){
  if (getMessage(index) != null) {
    String[] lines=getMessage(index).split(""String_Node_Str"");
    List<String> messages=new ArrayList<String>();
    List<String> commands=new ArrayList<String>();
    for (    String line : lines) {
      if (line.startsWith(""String_Node_Str"")) {
        commands.add(line.replaceFirst(""String_Node_Str"",""String_Node_Str""));
      }
 else {
        messages.add(line);
      }
    }
    if (messages.size() >= 1) {
      messages=Arrays.asList((getPrefix() + StringUtils.join(messages.toArray(),""String_Node_Str"") + getSuffix()).split(""String_Node_Str""));
    }
    for (    String message : messages) {
      if (to instanceof Player) {
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",((Player)to).getName());
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",((Player)to).getDisplayName());
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",((Player)to).getWorld().getName());
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",((Player)to).getLocation().getBlock().getBiome().toString());
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().length + ""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      }
 else       if (to instanceof ConsoleCommandSender) {
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",Bukkit.getServer().getOnlinePlayers().length + ""String_Node_Str"");
        if (message.contains(""String_Node_Str""))         message=message.replace(""String_Node_Str"",Bukkit.getServer().getMaxPlayers() + ""String_Node_Str"");
      }
      to.sendMessage(ChatColor.translateAlternateColorCodes(""String_Node_Str"".charAt(0),message));
    }
    for (    String command : commands) {
      if (to instanceof ConsoleCommandSender) {
        Bukkit.dispatchCommand(Bukkit.getConsoleSender(),command);
      }
    }
  }
}",0.8802931596091205
190576,"@Override public void run(){
  if (MessageLists.getExactList(name) != null && AutoMessage.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    MessageList list=MessageLists.getExactList(name);
    if (list.isEnabled() && !(list.isExpired()) && list.getCurrentMessage() != null) {
      if (Bukkit.getServer().getOnlinePlayers().length >= AutoMessage.getPlugin().getConfig().getInt(""String_Node_Str"")) {
        int index=list.getCurrentIndex();
        for (        Player p : Bukkit.getServer().getOnlinePlayers()) {
          if (p.hasPermission(""String_Node_Str"" + name)) {
            list.broadcastTo(index,p);
          }
        }
        if (AutoMessage.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          list.broadcastTo(index,Bukkit.getConsoleSender());
        }
        list.setCurrentIndex(index++);
      }
    }
  }
}","@Override public void run(){
  if (MessageLists.getExactList(name) != null && AutoMessage.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
    MessageList list=MessageLists.getExactList(name);
    if (list.isEnabled() && list.hasMessages() && !(list.isExpired())) {
      if (Bukkit.getServer().getOnlinePlayers().length >= AutoMessage.getPlugin().getConfig().getInt(""String_Node_Str"")) {
        int index=list.isRandom() ? new Random().nextInt(list.getMessages().size()) : list.getCurrentIndex();
        for (        Player p : Bukkit.getServer().getOnlinePlayers()) {
          if (p.hasPermission(""String_Node_Str"" + name)) {
            list.broadcastTo(index,p);
          }
        }
        if (AutoMessage.getPlugin().getConfig().getBoolean(""String_Node_Str"")) {
          list.broadcastTo(index,Bukkit.getConsoleSender());
        }
        list.setCurrentIndex(index + 1);
      }
    }
  }
}",0.9264705882352942
190577,"@Override public Reservation reserveBook(Long bookId){
  Book book=bookStoreDao.getBook(bookId);
  if (book == null) {
    throw new BookNotFoundException(bookId);
  }
  ReservationImpl reservationImpl=new ReservationImpl();
  reservationImpl.setReservationId(counter.incrementAndGet());
  reservationImpl.setBookId(bookId);
  return reservationImpl;
}","@Override public Reservation reserveBook(Long bookId){
  Book book=bookStoreDao.getBook(bookId);
  if (book == null) {
    throw new BookNotFoundException(bookId);
  }
  ReservationImpl reservationImpl=new ReservationImpl();
  reservationImpl.setReservationId(counter.incrementAndGet());
  reservationImpl.setBookId(bookId);
  reservations.put(reservationImpl.getReservationId(),reservationImpl);
  return reservationImpl;
}",0.9072164948453608
190578,"@Override public List<Reservation> getReservations(){
  return new ArrayList<Reservation>(resevations.values());
}","@Override public List<Reservation> getReservations(){
  return new ArrayList<Reservation>(reservations.values());
}",0.9956331877729258
190579,"@Override public void removeReservation(Long reservationId){
  Reservation reservation=getReservation(reservationId);
  resevations.remove(reservation);
}","@Override public void removeReservation(Long reservationId){
  Reservation reservation=getReservation(reservationId);
  reservations.remove(reservation);
}",0.9967637540453076
190580,"@Override public Reservation getReservation(Long reservationId){
  Reservation reservation=resevations.get(reservationId);
  if (reservation == null) {
    throw new ReservationNotFoundException(reservationId);
  }
  return reservation;
}","@Override public Reservation getReservation(Long reservationId){
  Reservation reservation=reservations.get(reservationId);
  if (reservation == null) {
    throw new ReservationNotFoundException(reservationId);
  }
  return reservation;
}",0.9979035639412998
190581,"/** 
 * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
 */
protected void actionPerformed(GuiButton par1GuiButton){
  if (par1GuiButton.enabled) {
    if (par1GuiButton.id == 1) {
      this.mc.displayGuiScreen(null);
    }
 else     if (par1GuiButton.id == 0) {
      this.mc.displayGuiScreen(this.parentGuiScreen);
    }
  }
}","/** 
 * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
 */
protected void actionPerformed(GuiButton par1GuiButton){
  if (par1GuiButton.enabled) {
    if (par1GuiButton.id == 1) {
      this.mc.displayGuiScreen(null);
    }
 else     if (par1GuiButton.id == 0) {
    }
  }
}",0.925
190582,"private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc);
      ct=0;
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
}","private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc);
      ct=0;
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
  mechanics.updateParadoxBar(mc,paradoxLevel);
}",0.9977187788186188
190583,"@Override public void tickEnd(EnumSet<TickType> type,Object... tickData){
  if (type.equals(EnumSet.of(TickType.RENDER))) {
    onRenderTick();
  }
 else   if (type.equals(EnumSet.of(TickType.CLIENT))) {
    Minecraft mc=Minecraft.getMinecraft();
    GuiScreen gui=mc.currentScreen;
    if (gui != null) {
      onTickInGui(mc,gui);
    }
 else {
      onTickInGame(mc);
      PastMechanics mechanics=new PastMechanics();
      if (isInPast) {
        mechanics.drawTimeTicker(mc,text);
      }
      mechanics.updateParadoxBar(mc,paradoxLevel);
    }
  }
}","@Override public void tickEnd(EnumSet<TickType> type,Object... tickData){
  if (type.equals(EnumSet.of(TickType.RENDER))) {
    onRenderTick();
  }
 else   if (type.equals(EnumSet.of(TickType.CLIENT))) {
  }
}",0.5456919060052219
190584,"private void onRenderTick(){
}","private void onRenderTick(){
  Minecraft mc=FMLClientHandler.instance().getClient();
  PastMechanics mechanics=new PastMechanics();
  if (mc.currentScreen == null) {
    if (isInPast) {
      mechanics.drawTimeTicker(mc,text);
    }
    mechanics.updateParadoxBar(mc,paradoxLevel);
  }
}",0.1892744479495268
190585,"private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc);
      ct=0;
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
  mechanics.updateParadoxBar(mc,paradoxLevel);
}","private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc);
      ct=0;
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
}",0.9977187788186188
190586,"@Override public void registerRenderThings(){
  MinecraftForgeClient.preloadTexture(TIME_TRAVELER_BLOCK_TEX);
  MinecraftForgeClient.preloadTexture(TIME_TRAVELER_ITEM_TEX);
}","@Override public void registerRenderThings(){
  MinecraftForgeClient.preloadTexture(TIME_TRAVELER_BLOCK_TEX);
  MinecraftForgeClient.preloadTexture(TIME_TRAVELER_ITEM_TEX);
  DeveloperCapesAPI.getInstance().init(""String_Node_Str"");
}",0.855036855036855
190587,"/** 
 * Sets pathing to a specific point.  
 */
@Override public void setPathToEntity(PathEntity pathentity){
  Minecraft m=ModLoader.getMinecraftInstance();
  MinecraftServer ms=m.getIntegratedServer();
  File locDirectory=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
  File locs=new File(locDirectory + ""String_Node_Str"" + i+ ""String_Node_Str"");
  try {
    if (locs.exists()) {
      reader=new BufferedReader(new FileReader(locs));
      playerX=Integer.parseInt(reader.readLine());
      playerY=Integer.parseInt(reader.readLine());
      playerZ=Integer.parseInt(reader.readLine());
      distFromCoords=this.getDistance(playerX,playerY,playerZ);
      if (distFromCoords >= rangeToPoint) {
        rangeToPoint=(float)distFromCoords + 3;
      }
      pathentity=this.worldObj.getEntityPathToXYZ(this,playerX,playerY,playerZ,rangeToPoint,true,true,false,false);
      super.setPathToEntity(pathentity);
      String special=reader.readLine();
      if (special != null) {
        System.out.println(special);
        if (special.equalsIgnoreCase(""String_Node_Str"")) {
          m.thePlayer.sendChatMessage(""String_Node_Str"");
          this.getJumpHelper().setJumping();
          this.getJumpHelper().doJump();
        }
        if (special.equalsIgnoreCase(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
          super.setPathToEntity(pathentity);
        }
      }
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}","/** 
 * Sets pathing to a specific point.  
 */
@Override public void setPathToEntity(PathEntity pathentity){
  Minecraft m=ModLoader.getMinecraftInstance();
  MinecraftServer ms=m.getIntegratedServer();
  File locDirectory=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
  File locs=new File(locDirectory + ""String_Node_Str"" + i+ ""String_Node_Str"");
  try {
    if (locs.exists()) {
      reader=new BufferedReader(new FileReader(locs));
      playerX=Integer.parseInt(reader.readLine());
      playerY=Integer.parseInt(reader.readLine());
      playerZ=Integer.parseInt(reader.readLine());
      distFromCoords=this.getDistance(playerX,playerY,playerZ);
      if (distFromCoords >= rangeToPoint) {
        rangeToPoint=(float)distFromCoords + 3;
      }
      pathentity=this.worldObj.getEntityPathToXYZ(this,playerX,playerY,playerZ,rangeToPoint,true,true,false,false);
      String special=reader.readLine();
      if (special != null) {
        System.out.println(special);
        if (special.equalsIgnoreCase(""String_Node_Str"")) {
          m.thePlayer.sendChatMessage(""String_Node_Str"");
          this.getJumpHelper().setJumping();
          this.getJumpHelper().doJump();
        }
        if (special.equalsIgnoreCase(""String_Node_Str"")) {
          this.setSneaking(true);
        }
        if (special.equalsIgnoreCase(""String_Node_Str"")) {
          System.out.println(""String_Node_Str"");
          super.setPathToEntity(pathentity);
        }
      }
      super.setPathToEntity(pathentity);
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}",0.9420607579079237
190588,"/** 
 * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
 */
protected void actionPerformed(GuiButton par1GuiButton){
  if (par1GuiButton.enabled) {
    if (par1GuiButton.id == 1) {
      this.mc.displayGuiScreen(null);
    }
 else     if (par1GuiButton.id == 0) {
    }
  }
}","/** 
 * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
 */
protected void actionPerformed(GuiButton par1GuiButton){
  if (par1GuiButton.enabled) {
    if (par1GuiButton.id == 1) {
      this.mc.displayGuiScreen(null);
    }
 else     if (par1GuiButton.id == 0) {
      FutureTravelMechanics mechanics=new FutureTravelMechanics();
      mechanics.expandOres(FMLClientHandler.instance().getClient().theWorld);
    }
  }
}",0.8212083847102343
190589,"private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc,""String_Node_Str"");
      ct=0;
    }
  }
  if (!isInPast) {
    if (mc.thePlayer.isJumping) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc,""String_Node_Str"");
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
}","private void onTickInGame(Minecraft mc){
  ctr++;
  ct++;
  PastMechanics mechanics=new PastMechanics();
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  isInPast=GuiTimeTravel.isInPast;
  if (ct == 20) {
    if (!isInPast) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc,""String_Node_Str"");
      ct=0;
    }
  }
  if (!isInPast) {
    if (mc.thePlayer.isJumping) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc,""String_Node_Str"");
    }
    if (mc.thePlayer.isSneaking()) {
      mechanics.addPlayerLoc(mc.getIntegratedServer(),mc,""String_Node_Str"");
    }
  }
  if (ctr == 20 * 60) {
    if (!isInPast) {
      mechanics.saveTime(mc.getIntegratedServer(),mc,copyFile);
    }
    ctr=0;
  }
  if (!hasRun) {
    hasRun=true;
    mechanics.firstTime(mc.getIntegratedServer(),mc);
  }
  if (isInPast) {
    count++;
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=mc.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      WorldClient w=mc.theWorld;
      EntitySheep es=new EntitySheep(w);
      EntityPig ep=new EntityPig(w);
      EntityCow ec=new EntityCow(w);
      EntityChicken eck=new EntityChicken(w);
      EntitySquid esq=new EntitySquid(w);
      EntityWolf ew=new EntityWolf(w);
      EntityOcelot eo=new EntityOcelot(w);
      EntityBat eb=new EntityBat(w);
      EntityIronGolem ei=new EntityIronGolem(w);
      EntityMooshroom em=new EntityMooshroom(w);
      EntityVillager ev=new EntityVillager(w);
      EntityEnderman ee=new EntityEnderman(w);
      EntityPigZombie ezp=new EntityPigZombie(w);
      EntityBlaze ebl=new EntityBlaze(w);
      EntityCaveSpider ecs=new EntityCaveSpider(w);
      EntityCreeper ecr=new EntityCreeper(w);
      EntityGhast eg=new EntityGhast(w);
      EntityMagmaCube emc=new EntityMagmaCube(w);
      EntitySilverfish esi=new EntitySilverfish(w);
      EntitySkeleton esk=new EntitySkeleton(w);
      EntitySlime esl=new EntitySlime(w);
      EntitySpider esp=new EntitySpider(w);
      EntityWitch ewi=new EntityWitch(w);
      EntityZombie ez=new EntityZombie(w);
      if (!hasInitMobs) {
        prevSheep=w.countEntities(es.getClass());
        prevPig=w.countEntities(ep.getClass());
        prevCow=w.countEntities(ec.getClass());
        prevChick=w.countEntities(eck.getClass());
        prevSqu=w.countEntities(esq.getClass());
        prevWol=w.countEntities(ew.getClass());
        prevOce=w.countEntities(eo.getClass());
        prevBat=w.countEntities(eb.getClass());
        prevGol=w.countEntities(ei.getClass());
        prevMoo=w.countEntities(ei.getClass());
        prevVil=w.countEntities(ev.getClass());
        prevEnd=w.countEntities(ee.getClass());
        prevZpi=w.countEntities(ezp.getClass());
        prevBla=w.countEntities(ebl.getClass());
        prevCsp=w.countEntities(ecs.getClass());
        prevCre=w.countEntities(ecr.getClass());
        prevGha=w.countEntities(eg.getClass());
        prevMag=w.countEntities(emc.getClass());
        prevSil=w.countEntities(esi.getClass());
        prevSke=w.countEntities(esk.getClass());
        prevSli=w.countEntities(esl.getClass());
        prevSpi=w.countEntities(esp.getClass());
        prevWit=w.countEntities(ewi.getClass());
        prevZom=w.countEntities(ez.getClass());
        hasRun=true;
      }
      if (prevSheep > w.countEntities(es.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig > w.countEntities(ep.getClass())) {
        paradoxLevel=paradoxLevel + 8;
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow > w.countEntities(ec.getClass())) {
        paradoxLevel=paradoxLevel + 12;
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick > w.countEntities(eck.getClass())) {
        paradoxLevel=paradoxLevel + 7;
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu > w.countEntities(esq.getClass())) {
        paradoxLevel=paradoxLevel + 2;
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol > w.countEntities(ew.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce > w.countEntities(eo.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat > w.countEntities(eb.getClass())) {
        paradoxLevel++;
        prevBat=w.countEntities(eo.getClass());
      }
      if (prevMoo > w.countEntities(em.getClass())) {
        paradoxLevel=paradoxLevel + 14;
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevGol > w.countEntities(ei.getClass())) {
        paradoxLevel=paradoxLevel + 78;
        prevBat=w.countEntities(ei.getClass());
      }
      if (prevVil > w.countEntities(ev.getClass())) {
        paradoxLevel=paradoxLevel + 55;
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd > w.countEntities(ee.getClass())) {
        paradoxLevel=paradoxLevel + 25;
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi > w.countEntities(ezp.getClass())) {
        paradoxLevel=paradoxLevel + 19;
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla > w.countEntities(ebl.getClass())) {
        paradoxLevel=paradoxLevel + 33;
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp > w.countEntities(ecs.getClass())) {
        paradoxLevel=paradoxLevel + 29;
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre > w.countEntities(ecr.getClass())) {
        paradoxLevel=paradoxLevel + 69;
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha > w.countEntities(eg.getClass())) {
        paradoxLevel=paradoxLevel + 56;
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag > w.countEntities(emc.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil > w.countEntities(esi.getClass())) {
        paradoxLevel=paradoxLevel + 4;
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke > w.countEntities(esk.getClass())) {
        paradoxLevel=paradoxLevel + 34;
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli > w.countEntities(esl.getClass())) {
        paradoxLevel=paradoxLevel + 10;
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi > w.countEntities(esp.getClass())) {
        paradoxLevel=paradoxLevel + 27;
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit > w.countEntities(ewi.getClass())) {
        paradoxLevel=paradoxLevel + 49;
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom > w.countEntities(ez.getClass())) {
        paradoxLevel=paradoxLevel + 20;
        prevZom=w.countEntities(ez.getClass());
      }
      if (prevSheep < w.countEntities(es.getClass())) {
        prevSheep=w.countEntities(es.getClass());
      }
      if (prevPig < w.countEntities(ep.getClass())) {
        prevPig=w.countEntities(ep.getClass());
      }
      if (prevCow < w.countEntities(ec.getClass())) {
        prevCow=w.countEntities(ec.getClass());
      }
      if (prevChick < w.countEntities(eck.getClass())) {
        prevChick=w.countEntities(eck.getClass());
      }
      if (prevSqu < w.countEntities(esq.getClass())) {
        prevSqu=w.countEntities(esq.getClass());
      }
      if (prevWol < w.countEntities(ew.getClass())) {
        prevWol=w.countEntities(ew.getClass());
      }
      if (prevOce < w.countEntities(eo.getClass())) {
        prevOce=w.countEntities(eo.getClass());
      }
      if (prevBat < w.countEntities(eb.getClass())) {
        prevBat=w.countEntities(eb.getClass());
      }
      if (prevGol < w.countEntities(ei.getClass())) {
        prevGol=w.countEntities(ei.getClass());
      }
      if (prevMoo < w.countEntities(em.getClass())) {
        prevMoo=w.countEntities(em.getClass());
      }
      if (prevVil < w.countEntities(ev.getClass())) {
        prevVil=w.countEntities(ev.getClass());
      }
      if (prevEnd < w.countEntities(ee.getClass())) {
        prevEnd=w.countEntities(ee.getClass());
      }
      if (prevZpi < w.countEntities(ezp.getClass())) {
        prevZpi=w.countEntities(ezp.getClass());
      }
      if (prevBla < w.countEntities(ebl.getClass())) {
        prevBla=w.countEntities(ebl.getClass());
      }
      if (prevCsp < w.countEntities(ecs.getClass())) {
        prevCsp=w.countEntities(ecs.getClass());
      }
      if (prevCre < w.countEntities(ecr.getClass())) {
        prevCre=w.countEntities(ecr.getClass());
      }
      if (prevGha < w.countEntities(eg.getClass())) {
        prevGha=w.countEntities(eg.getClass());
      }
      if (prevMag < w.countEntities(emc.getClass())) {
        prevMag=w.countEntities(emc.getClass());
      }
      if (prevSil < w.countEntities(esi.getClass())) {
        prevSil=w.countEntities(esi.getClass());
      }
      if (prevSke < w.countEntities(esk.getClass())) {
        prevSke=w.countEntities(esk.getClass());
      }
      if (prevSli < w.countEntities(esl.getClass())) {
        prevSli=w.countEntities(esl.getClass());
      }
      if (prevSpi < w.countEntities(esp.getClass())) {
        prevSpi=w.countEntities(esp.getClass());
      }
      if (prevWit < w.countEntities(ewi.getClass())) {
        prevWit=w.countEntities(ewi.getClass());
      }
      if (prevZom < w.countEntities(ez.getClass())) {
        prevZom=w.countEntities(ez.getClass());
      }
    }
 else {
      mechanics.returnToPresent(mc,paradoxLevel,mc.getIntegratedServer(),minutes,seconds);
    }
  }
  if (isInPast) {
    if (count == 20) {
      seconds--;
      count=0;
    }
    if (seconds == 0) {
      minutes--;
      seconds=60;
    }
    if (minutes == 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
    }
    if (minutes <= 0 && seconds <= 1) {
      mechanics.outOfTime(mc,mc.getIntegratedServer(),minutes,seconds,text);
    }
  }
}",0.9942835365853658
190590,"private void loadSaves(){
  this.timeList=new ArrayList();
  System.out.println(files);
  for (  File file : files) {
    System.out.println(files.length + ""String_Node_Str"" + file.getName());
    timeList.add(file.getName());
  }
  this.selectedWorld=-1;
}","private void loadSaves(){
  this.timeList=new ArrayList();
  System.out.println(files);
  for (  File file : files) {
    System.out.println(files.length + ""String_Node_Str"" + file.getName());
    if (!file.getName().contains(""String_Node_Str"")) {
      timeList.add(file.getName());
    }
  }
  this.selectedWorld=-1;
}",0.8908145580589255
190591,"/** 
 * Runs once every tick.  Currently handles Paradox Level, Rendering paradox bar, handling Time Zone saving
 */
public boolean onTickInGame(float f,Minecraft minecraft){
  MinecraftServer ms=minecraft.getIntegratedServer();
  ScaledResolution var5=new ScaledResolution(minecraft.gameSettings,minecraft.displayWidth,minecraft.displayHeight);
  int var6=var5.getScaledWidth();
  int var7=var5.getScaledHeight();
  int var8=var7 / var7 + 25;
  int playerX=(int)minecraft.thePlayer.posX;
  int playerY=(int)minecraft.thePlayer.posY;
  int playerZ=(int)minecraft.thePlayer.posZ;
  ctr++;
  count++;
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  GuiTimeTravel gtt=new GuiTimeTravel();
  b=gtt.isInPast;
  GuiIngame gig=new GuiIngame(minecraft);
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
  gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,0,128,8);
  File beginningOfWorld=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
  File playerLoc=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
  if (count == 240) {
    playerLoc(playerLoc,minecraft);
    count=0;
  }
  if (beginningOfWorld.length() == 0) {
    File initWorldGen=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
    initWorldGen.mkdirs();
    File fi=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
    File moveTo=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
    try {
      cf.copyDirectory(fi,moveTo);
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
  if (b) {
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=minecraft.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
      gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,8,paradoxLevel,8);
    }
 else {
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
      gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,8,128,8);
      EntityPlayer ep=minecraft.thePlayer;
      ep.setDead();
      paradoxLevel=0;
      minecraft.statFileWriter.readStat(StatList.leaveGameStat,1);
      minecraft.theWorld.sendQuittingDisconnectingPacket();
      minecraft.loadWorld((WorldClient)null);
      minecraft.displayGuiScreen(new GuiMainMenu());
      File present=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
      File worldFileDest=GuiTimeTravel.staticsource;
      File worldFile=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
      System.out.println(present);
      System.out.println(worldFileDest);
      System.out.println(worldFile);
      try {
        Thread.sleep(3000);
        CopyFile.moveMultipleFiles(worldFile,worldFileDest);
        Thread.sleep(1000);
        CopyFile.moveMultipleFiles(present,worldFile);
        gtt.isInPast=false;
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      minutes=1;
      seconds=30;
    }
  }
  if (b) {
    ct++;
    if (minutes <= 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
      if (seconds <= 0) {
        minecraft.statFileWriter.readStat(StatList.leaveGameStat,1);
        minecraft.theWorld.sendQuittingDisconnectingPacket();
        minecraft.loadWorld((WorldClient)null);
        minecraft.displayGuiScreen(new GuiMainMenu());
        File present=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
        File worldFileDest=GuiTimeTravel.staticsource;
        File worldFile=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
        System.out.println(worldFileDest + ""String_Node_Str"" + gtt.getSaveNumber());
        System.out.println(present);
        System.out.println(worldFileDest);
        System.out.println(worldFile);
        minutes=1;
        seconds=30;
        try {
          Thread.sleep(3000);
          CopyFile.moveMultipleFiles(worldFile,worldFileDest);
          Thread.sleep(1000);
          CopyFile.moveMultipleFiles(present,worldFile);
          gtt.isInPast=false;
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    if (b) {
      if (ct == 20) {
        seconds--;
        ct=0;
        if (seconds == 0) {
          minutes--;
          seconds=60;
          if (minutes == 0) {
            text=""String_Node_Str"" + seconds + ""String_Node_Str"";
          }
        }
      }
    }
    testGUIElement=new GuiButton(0,0,5,text);
    testGUIElement.drawButton(minecraft,0,0);
  }
  if (ctr == 20 * 60) {
    if (!b) {
      WorldInfo we=minecraft.theWorld.getWorldInfo();
      File fil=new File(Minecraft.getMinecraftDir(),""String_Node_Str"" + ms.getWorldName());
      if (!fil.exists()) {
        fil.mkdir();
      }
      int counterstart=new File(Minecraft.getMinecraftDir(),""String_Node_Str"" + ms.getWorldName()).listFiles().length;
      counter=counterstart;
      try {
        WorldInfo worldinfo=minecraft.theWorld.getWorldInfo();
        File fi=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
        File f2=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
        f2.mkdir();
        String fname=ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"";
        counter=counter + 1;
        fname=fname.concat(String.format(""String_Node_Str"",counter));
        File directoryToMoveTo=new File(fname);
        cf=new CopyFile();
        cf.copyDirectory(fi,directoryToMoveTo);
        System.out.println(""String_Node_Str"");
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      ctr=0;
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
  return true;
}","/** 
 * Runs once every tick.  Currently handles Paradox Level, Rendering paradox bar, handling Time Zone saving
 */
public boolean onTickInGame(float f,Minecraft minecraft){
  MinecraftServer ms=minecraft.getIntegratedServer();
  World w=minecraft.theWorld;
  ScaledResolution var5=new ScaledResolution(minecraft.gameSettings,minecraft.displayWidth,minecraft.displayHeight);
  int var6=var5.getScaledWidth();
  int var7=var5.getScaledHeight();
  int var8=var7 / var7 + 25;
  int playerX=(int)minecraft.thePlayer.posX;
  int playerY=(int)minecraft.thePlayer.posY;
  int playerZ=(int)minecraft.thePlayer.posZ;
  ctr++;
  count++;
  text=""String_Node_Str"" + minutes + ""String_Node_Str""+ seconds+ ""String_Node_Str"";
  GuiTimeTravel gtt=new GuiTimeTravel();
  b=gtt.isInPast;
  GuiIngame gig=new GuiIngame(minecraft);
  GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
  gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,0,128,8);
  File beginningOfWorld=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
  File playerLoc=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
  if (count == 240) {
    playerLoc(playerLoc,minecraft);
    count=0;
  }
  if (beginningOfWorld.length() == 0) {
    File initWorldGen=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
    initWorldGen.mkdirs();
    File fi=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
    File moveTo=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
    try {
      cf.copyDirectory(fi,moveTo);
    }
 catch (    IOException ex) {
      ex.printStackTrace();
    }
  }
  if (!b) {
    nonPastChunks=w.chunkProvider.getLoadedChunkCount();
  }
  if (b) {
    pastChunks=w.chunkProvider.getLoadedChunkCount();
    if (pastChunks == nonPastChunks) {
      w.chunkProvider.loadChunk(0,0);
    }
    if (paradoxLevel < 0) {
      paradoxLevel=0;
    }
    if (paradoxLevel <= 128) {
      EntityPlayerSP eps=minecraft.thePlayer;
      if (eps.isPotionActive(Potion.invisibility)) {
        invisPotTime++;
        if (invisPotTime == 10) {
          paradoxLevel=paradoxLevel - 5;
          invisPotTime=0;
        }
      }
      if (eps.isEating()) {
        paradoxLevel++;
        eps.experienceTotal=eps.experienceTotal + 2;
      }
      if (eps.isSneaking()) {
        sneakTime++;
        if (sneakTime == 30) {
          paradoxLevel=paradoxLevel - 2;
          sneakTime=0;
        }
      }
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
      gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,8,paradoxLevel,8);
    }
 else {
      GL11.glBindTexture(GL11.GL_TEXTURE_2D,minecraft.renderEngine.getTexture(""String_Node_Str""));
      gig.drawTexturedModalRect(var6 / 2 - 200,var8,0,8,128,8);
      EntityPlayer ep=minecraft.thePlayer;
      ep.setDead();
      paradoxLevel=0;
      minecraft.statFileWriter.readStat(StatList.leaveGameStat,1);
      minecraft.theWorld.sendQuittingDisconnectingPacket();
      minecraft.loadWorld((WorldClient)null);
      minecraft.displayGuiScreen(new GuiMainMenu());
      File present=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
      File worldFileDest=GuiTimeTravel.staticsource;
      File worldFile=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
      System.out.println(present);
      System.out.println(worldFileDest);
      System.out.println(worldFile);
      try {
        Thread.sleep(3000);
        CopyFile.moveMultipleFiles(worldFile,worldFileDest);
        Thread.sleep(1000);
        CopyFile.moveMultipleFiles(present,worldFile);
        gtt.isInPast=false;
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      minutes=1;
      seconds=30;
    }
  }
  if (b) {
    ct++;
    if (minutes <= 0) {
      text=""String_Node_Str"" + seconds + ""String_Node_Str"";
      if (seconds <= 0) {
        minecraft.statFileWriter.readStat(StatList.leaveGameStat,1);
        minecraft.theWorld.sendQuittingDisconnectingPacket();
        minecraft.loadWorld((WorldClient)null);
        minecraft.displayGuiScreen(new GuiMainMenu());
        File present=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
        File worldFileDest=GuiTimeTravel.staticsource;
        File worldFile=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
        System.out.println(worldFileDest + ""String_Node_Str"" + gtt.getSaveNumber());
        System.out.println(present);
        System.out.println(worldFileDest);
        System.out.println(worldFile);
        minutes=1;
        seconds=30;
        try {
          Thread.sleep(3000);
          CopyFile.moveMultipleFiles(worldFile,worldFileDest);
          Thread.sleep(1000);
          CopyFile.moveMultipleFiles(present,worldFile);
          gtt.isInPast=false;
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
      }
    }
    if (b) {
      if (ct == 20) {
        seconds--;
        ct=0;
        if (seconds == 0) {
          minutes--;
          seconds=60;
          if (minutes == 0) {
            text=""String_Node_Str"" + seconds + ""String_Node_Str"";
          }
        }
      }
    }
    testGUIElement=new GuiButton(0,0,5,text);
    testGUIElement.drawButton(minecraft,0,0);
  }
  if (ctr == 20 * 60) {
    if (!b) {
      WorldInfo we=minecraft.theWorld.getWorldInfo();
      File fil=new File(Minecraft.getMinecraftDir(),""String_Node_Str"" + ms.getWorldName());
      if (!fil.exists()) {
        fil.mkdir();
      }
      int counterstart=new File(Minecraft.getMinecraftDir(),""String_Node_Str"" + ms.getWorldName()).listFiles().length;
      counter=counterstart;
      try {
        WorldInfo worldinfo=minecraft.theWorld.getWorldInfo();
        File fi=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"");
        File f2=new File(ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName());
        f2.mkdir();
        String fname=ModLoader.getMinecraftInstance().getMinecraftDir() + ""String_Node_Str"" + ms.getWorldName()+ ""String_Node_Str"";
        counter=counter + 1;
        fname=fname.concat(String.format(""String_Node_Str"",counter));
        File directoryToMoveTo=new File(fname);
        cf=new CopyFile();
        cf.copyDirectory(fi,directoryToMoveTo);
        System.out.println(""String_Node_Str"");
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
      ctr=0;
    }
 else {
      System.out.println(""String_Node_Str"");
    }
  }
  return true;
}",0.9827288428324698
190592,"public void playerLoc(File destToSave,Minecraft minecraft){
  EntityPlayer ep=minecraft.thePlayer;
  int playerX=(int)ep.posX;
  int playerY=(int)ep.posY;
  int playerZ=(int)ep.posZ;
  System.out.println(playerX + ""String_Node_Str"" + playerY+ ""String_Node_Str""+ playerZ);
  if (!destToSave.exists()) {
    destToSave.mkdirs();
  }
  File nextLoc=new File(destToSave + ""String_Node_Str"" + ((destToSave.listFiles().length) + 1)+ ""String_Node_Str"");
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(nextLoc));
    out.write(Integer.toString(playerX));
    out.newLine();
    out.write(Integer.toString(playerY));
    out.newLine();
    out.write(Integer.toString(playerZ));
    out.flush();
    out.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}","/** 
 * Saves the player location
 * @param destToSave
 * @param minecraft
 */
public void playerLoc(File destToSave,Minecraft minecraft){
  EntityPlayer ep=minecraft.thePlayer;
  int playerX=(int)ep.posX;
  int playerY=(int)ep.posY;
  int playerZ=(int)ep.posZ;
  System.out.println(playerX + ""String_Node_Str"" + playerY+ ""String_Node_Str""+ playerZ);
  if (!destToSave.exists()) {
    destToSave.mkdirs();
  }
  File nextLoc=new File(destToSave + ""String_Node_Str"" + ((destToSave.listFiles().length) + 1)+ ""String_Node_Str"");
  try {
    BufferedWriter out=new BufferedWriter(new FileWriter(nextLoc));
    out.write(Integer.toString(playerX));
    out.newLine();
    out.write(Integer.toString(playerY));
    out.newLine();
    out.write(Integer.toString(playerZ));
    out.flush();
    out.close();
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}",0.9520340012143292
190593,"@Override protected RunnerAndConfigurationSettings createConfigurationByElement(Location location,ConfigurationContext context){
  myPsiElement=location.getPsiElement();
  VirtualFile file=location.getVirtualFile();
  if (file == null) {
    return null;
  }
  Project project=location.getProject();
  ConfigurationFactory configurationFactory=JmeterConfigurationType.getInstance().getConfigurationFactory();
  RunnerAndConfigurationSettings configurationSettings=RunManagerEx.getInstanceEx(project).createConfiguration(file.getNameWithoutExtension(),configurationFactory);
  JmeterRunConfiguration runConfiguration=(JmeterRunConfiguration)configurationSettings.getConfiguration();
  runConfiguration.setTestFile(file.getPath());
  return configurationSettings;
}","@Override protected RunnerAndConfigurationSettings createConfigurationByElement(Location location,ConfigurationContext context){
  myPsiElement=location.getPsiElement();
  VirtualFile file=location.getVirtualFile();
  if (file == null || !JmeterFileType.INSTANCE.equals(file.getFileType())) {
    return null;
  }
  Project project=location.getProject();
  ConfigurationFactory configurationFactory=JmeterConfigurationType.getInstance().getConfigurationFactory();
  RunnerAndConfigurationSettings configurationSettings=RunManagerEx.getInstanceEx(project).createConfiguration(file.getNameWithoutExtension(),configurationFactory);
  JmeterRunConfiguration runConfiguration=(JmeterRunConfiguration)configurationSettings.getConfiguration();
  runConfiguration.setTestFile(file.getPath());
  return configurationSettings;
}",0.965211891208096
190594,"public ArrayList<Wordform> generateInflections(Lexeme lexeme,String lemma){
  String trešāSakne=null, vārds;
  ArrayList<Wordform> inflections=new ArrayList<Wordform>(1);
  if (lexeme.getParadigm().getStems() == 3) {
    trešāSakne=lexeme.getStem(2);
  }
  if (lexeme.getParadigm().getID() == 29 || lexeme.getParadigm().getID() == 25) {
    Ending ending=lexeme.getParadigm().getLemmaEnding();
    for (    Lexeme formLexeme : this.hardcodedForms.get(lemma)) {
      Wordform wf=new Wordform(formLexeme.getStem(0),formLexeme,ending);
      if (wf.isMatchingWeak(AttributeNames.i_Generate,AttributeNames.v_Yes))       inflections.add(wf);
    }
    return inflections;
  }
  for (  Ending ending : lexeme.getParadigm().endings) {
    if (ending.getValue(AttributeNames.i_PartOfSpeech) == null || ending.getValue(AttributeNames.i_PartOfSpeech).equals(lexeme.getValue(AttributeNames.i_PartOfSpeech)) || lexeme.getValue(AttributeNames.i_PartOfSpeech) == null) {
      boolean vispārākāPak=ending.isMatchingStrong(AttributeNames.i_Definiteness,AttributeNames.v_Definite) || ending.isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Adverb);
      boolean properName=lexeme.isMatchingStrong(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
      ArrayList<Variants> celmi=Mijas.MijasLocīšanai(lexeme.getStem(ending.stemID - 1),ending.getMija(),trešāSakne,vispārākāPak,properName);
      for (      Variants celms : celmi) {
        vārds=celms.celms + ending.getEnding();
        vārds=recapitalize(vārds,lemma);
        Wordform locījums=new Wordform(vārds,lexeme,ending);
        locījums.addAttributes(celms);
        boolean validOption=locījums.isMatchingWeak(AttributeNames.i_Generate,AttributeNames.v_Yes);
        if (locījums.isMatchingStrong(AttributeNames.i_NumberSpecial,AttributeNames.v_PlurareTantum) && locījums.isMatchingStrong(AttributeNames.i_Number,AttributeNames.v_Singular))         validOption=false;
        if (locījums.isMatchingStrong(AttributeNames.i_NumberSpecial,AttributeNames.v_SingulareTantum) && locījums.isMatchingStrong(AttributeNames.i_Number,AttributeNames.v_Plural))         validOption=false;
        if (locījums.isMatchingStrong(AttributeNames.i_Declension,AttributeNames.v_InflexibleGenitive) && !locījums.isMatchingStrong(AttributeNames.i_Case,AttributeNames.v_Genitive))         validOption=false;
        if (GenerationBlacklist.blacklist(locījums))         validOption=false;
        if (validOption)         inflections.add(locījums);
      }
    }
  }
  for (  Lexeme formLexeme : this.hardcodedForms.get(lemma)) {
    Ending ending=formLexeme.getParadigm().getLemmaEnding();
    Wordform hardcoded=new Wordform(formLexeme.getStem(0),formLexeme,ending);
    Wordform override=null;
    for (    Wordform form : inflections) {
      if (form.isMatchingWeak(formLexeme)) {
        override=form;
      }
    }
    if (override != null) {
      inflections.remove(override);
    }
    inflections.add(hardcoded);
  }
  return inflections;
}","public ArrayList<Wordform> generateInflections(Lexeme lexeme,String lemma){
  String trešāSakne=null, vārds;
  ArrayList<Wordform> inflections=new ArrayList<Wordform>(1);
  if (lexeme.getParadigm().getStems() == 3) {
    trešāSakne=lexeme.getStem(2);
  }
  if (lexeme.getParadigm().getID() == 29 || lexeme.getParadigm().getID() == 25) {
    Ending ending=lexeme.getParadigm().getLemmaEnding();
    for (    Lexeme formLexeme : this.hardcodedForms.get(lemma)) {
      Wordform wf=new Wordform(formLexeme.getStem(0),formLexeme,ending);
      if (wf.isMatchingWeak(AttributeNames.i_Generate,AttributeNames.v_Yes))       inflections.add(wf);
    }
    return inflections;
  }
  for (  Ending ending : lexeme.getParadigm().endings) {
    if (ending.getValue(AttributeNames.i_PartOfSpeech) == null || ending.getValue(AttributeNames.i_PartOfSpeech).equals(lexeme.getValue(AttributeNames.i_PartOfSpeech)) || lexeme.getValue(AttributeNames.i_PartOfSpeech) == null) {
      boolean vispārākāPak=ending.isMatchingStrong(AttributeNames.i_Definiteness,AttributeNames.v_Definite) || ending.isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Adverb);
      boolean properName=lexeme.isMatchingStrong(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
      ArrayList<Variants> celmi=Mijas.MijasLocīšanai(lexeme.getStem(ending.stemID - 1),ending.getMija(),trešāSakne,vispārākāPak,properName);
      for (      Variants celms : celmi) {
        vārds=celms.celms + ending.getEnding();
        vārds=recapitalize(vārds,lemma);
        Wordform locījums=new Wordform(vārds,lexeme,ending);
        locījums.addAttributes(celms);
        boolean validOption=locījums.isMatchingWeak(AttributeNames.i_Generate,AttributeNames.v_Yes);
        if (locījums.isMatchingStrong(AttributeNames.i_NumberSpecial,AttributeNames.v_PlurareTantum) && locījums.isMatchingStrong(AttributeNames.i_Number,AttributeNames.v_Singular))         validOption=false;
        if (locījums.isMatchingStrong(AttributeNames.i_NumberSpecial,AttributeNames.v_SingulareTantum) && locījums.isMatchingStrong(AttributeNames.i_Number,AttributeNames.v_Plural))         validOption=false;
        if (locījums.isMatchingStrong(AttributeNames.i_Declension,AttributeNames.v_InflexibleGenitive) && !locījums.isMatchingStrong(AttributeNames.i_Case,AttributeNames.v_Genitive))         validOption=false;
        if (GenerationBlacklist.blacklist(locījums))         validOption=false;
        if (validOption)         inflections.add(locījums);
      }
    }
  }
  for (  Lexeme formLexeme : this.hardcodedForms.get(lemma)) {
    Ending ending=formLexeme.getParadigm().getLemmaEnding();
    Wordform hardcoded=new Wordform(formLexeme.getStem(0),formLexeme,ending);
    if (!lexeme.getParadigm().isMatchingWeak(AttributeNames.i_PartOfSpeech,hardcoded.getValue(AttributeNames.i_PartOfSpeech)))     continue;
    Wordform override=null;
    for (    Wordform form : inflections) {
      if (form.isMatchingWeak(formLexeme)) {
        override=form;
      }
    }
    if (override != null) {
      inflections.remove(override);
    }
    inflections.add(hardcoded);
  }
  return inflections;
}",0.9770320899169246
190595,"/** 
 * @param patternBegin	part of the grammar string containing endings for1st and 2nd person
 * @param patternEndint	part of the grammar string containing endings for3rd parson in present and past
 * @param lemmaEnd		required ending for the lemma to apply this rule
 * @param paradigmId	paradigm ID to set if rule matched
 * @param positiveFlags	flags to set if rule pattern and lemma endingmatched
 * @param alwaysFlags	flags to set if rule pattern matched
 */
public VerbRule(String patternBegin,String patternEnd,String lemmaEnd,int paradigmId,String[] positiveFlags,String[] alwaysFlags){
  String[] alwaysFlags3p;
  if (alwaysFlags != null) {
    alwaysFlags3p=Arrays.copyOf(alwaysFlags,alwaysFlags.length + 1);
    alwaysFlags3p[alwaysFlags3p.length - 1]=""String_Node_Str"";
  }
 else   alwaysFlags3p=new String[]{""String_Node_Str""};
  String begin=patternBegin.trim();
  String end=patternEnd.trim();
  String allPersonPattern=begin + ""String_Node_Str"" + end;
  String thirdPersonPattern;
  if (end.endsWith(""String_Node_Str""))   thirdPersonPattern=""String_Node_Str"" + end.substring(0,end.length() - 1) + ""String_Node_Str"";
 else   if (end.endsWith(""String_Node_Str""))   thirdPersonPattern=""String_Node_Str"" + end.substring(0,end.length() - 1) + ""String_Node_Str"";
 else {
    System.err.printf(""String_Node_Str"",allPersonPattern);
    thirdPersonPattern=allPersonPattern;
  }
  allPersonRule=new SimpleRule(allPersonPattern,lemmaEnd,paradigmId,positiveFlags,alwaysFlags);
  thirdPersonRule=new SimpleRule(thirdPersonPattern,lemmaEnd,paradigmId,positiveFlags,alwaysFlags3p);
}","/** 
 * @param patternBegin	part of the grammar string containing endings for1st and 2nd person
 * @param patternEndint	part of the grammar string containing endings for3rd parson in present and past
 * @param lemmaEnd		required ending for the lemma to apply this rule
 * @param paradigmId	paradigm ID to set if rule matched
 * @param positiveFlags	flags to set if rule pattern and lemma endingmatched
 * @param alwaysFlags	flags to set if rule pattern matched
 */
public VerbRule(String patternBegin,String patternEnd,String lemmaEnd,int paradigmId,String[] positiveFlags,String[] alwaysFlags){
  String[] alwaysFlags3p;
  if (alwaysFlags != null) {
    alwaysFlags3p=Arrays.copyOf(alwaysFlags,alwaysFlags.length + 1);
    alwaysFlags3p[alwaysFlags3p.length - 1]=""String_Node_Str"";
  }
 else   alwaysFlags3p=new String[]{""String_Node_Str""};
  String begin=patternBegin.trim();
  String end=patternEnd.trim();
  String allPersonPattern=begin + ""String_Node_Str"" + end;
  String thirdPersonPattern;
  if (end.endsWith(""String_Node_Str""))   thirdPersonPattern=""String_Node_Str"" + end.substring(0,end.length() - 1) + ""String_Node_Str"";
 else   if (end.endsWith(""String_Node_Str""))   thirdPersonPattern=""String_Node_Str"" + end.substring(0,end.length() - 2) + ""String_Node_Str"";
 else {
    System.err.printf(""String_Node_Str"",allPersonPattern);
    thirdPersonPattern=allPersonPattern;
  }
  allPersonRule=new SimpleRule(allPersonPattern,lemmaEnd,paradigmId,positiveFlags,alwaysFlags);
  thirdPersonRule=new SimpleRule(thirdPersonPattern,lemmaEnd,paradigmId,positiveFlags,alwaysFlags3p);
}",0.9993690851735016
190596,"/** 
 * This method contains collection of ending patterns, found in data. These patterns are meant for using on the beginning of the unsegmented grammar string. Thus,e.g., if there was no plural-only nouns with ending -ļas, then there is no rule for processing such words (at least in most cases).
 * @param lemma is used for grammar parsing.
 */
private String processBeginingWithPatterns(String gramText,String lemma){
  gramText=gramText.trim();
  int newBegin=-1;
  for (  SimpleRule s : simpleRulesDirect) {
    if (newBegin != -1)     break;
    newBegin=s.applyDirect(gramText,lemma,paradigm,flags);
  }
  for (  SimpleRule s : simpleRulesOptHyperns) {
    if (newBegin != -1)     break;
    newBegin=s.applyOptHyperns(gramText,lemma,paradigm,flags);
  }
  if (newBegin == -1) {
    if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(2,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(2);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(1,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(1);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
  }
  if (newBegin == -1)   newBegin=esEndingPluralGenUEndingFemRules(gramText,lemma);
  if (newBegin == -1) {
    if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(25);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(7);
        paradigm.add(8);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str""))       paradigm.add(2);
 else       if (lemma.matches(""String_Node_Str""))       paradigm.add(1);
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(2);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(1);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(3);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(3);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(7);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(7);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(1);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(2);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(2);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(14);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(13);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(14);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(13);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(13);
        paradigm.add(14);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(13);
        paradigm.add(14);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(25);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 4) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altLemmas.put(0,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altLemmas.put(0,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
  }
  if (newBegin == -1)   newBegin=aEndingMascRules(gramText,lemma);
  if (newBegin == -1)   newBegin=uEndingMascRules(gramText,lemma);
  if (newBegin == -1)   newBegin=uEndingFemRules(gramText,lemma);
  if (newBegin == -1)   newBegin=singleEndingOnlyRules(gramText,lemma);
  if (newBegin > 0 && newBegin <= gramText.length())   gramText=gramText.substring(newBegin);
 else   if (newBegin > gramText.length()) {
    System.err.printf(""String_Node_Str"",lemma,gramText,newBegin);
  }
  if (gramText.matches(""String_Node_Str""))   gramText=gramText.substring(1);
  return gramText;
}","/** 
 * This method contains collection of ending patterns, found in data. These patterns are meant for using on the beginning of the unsegmented grammar string. Thus,e.g., if there was no plural-only nouns with ending -ļas, then there is no rule for processing such words (at least in most cases).
 * @param lemma is used for grammar parsing.
 */
private String processBeginingWithPatterns(String gramText,String lemma){
  gramText=gramText.trim();
  int newBegin=-1;
  for (  SimpleRule s : simpleRulesDirect) {
    if (newBegin != -1)     break;
    newBegin=s.applyDirect(gramText,lemma,paradigm,flags);
  }
  for (  SimpleRule s : simpleRulesOptHyperns) {
    if (newBegin != -1)     break;
    newBegin=s.applyOptHyperns(gramText,lemma,paradigm,flags);
  }
  if (newBegin == -1) {
    if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(2,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(2);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(3,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(3);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (lemma.endsWith(""String_Node_Str"") && gramText.startsWith(""String_Node_Str"" + lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"")) {
      newBegin=(""String_Node_Str"" + lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"").length();
      Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"");
      HashSet<String> altParams=new HashSet<String>();
      altParams.add(""String_Node_Str"");
      altLemmas.put(1,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
      paradigm.add(1);
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
  }
  if (newBegin == -1)   newBegin=esEndingPluralGenUEndingFemRules(gramText,lemma);
  if (newBegin == -1) {
    if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(25);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(7);
        paradigm.add(8);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str""))       paradigm.add(2);
 else       if (lemma.matches(""String_Node_Str""))       paradigm.add(1);
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(2);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(1);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(3);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(3);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(7);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(7);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(11);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(9);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 1) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(1);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(2);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 2) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altParams.add(""String_Node_Str"");
        altLemmas.put(9,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(2);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(14);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(13);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(14);
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.matches(""String_Node_Str"")) {
        paradigm.add(13);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(13);
        paradigm.add(14);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(13);
        paradigm.add(14);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(25);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.startsWith(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else       if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
      flags.add(""String_Node_Str"");
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        paradigm.add(30);
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.endsWith(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 4) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altLemmas.put(0,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
 else     if (gramText.matches(""String_Node_Str"")) {
      newBegin=""String_Node_Str"".length();
      if (lemma.matches(""String_Node_Str"")) {
        Lemma altLemma=new Lemma(lemma.substring(0,lemma.length() - 3) + ""String_Node_Str"");
        HashSet<String> altParams=new HashSet<String>();
        altParams.add(""String_Node_Str"");
        altLemmas.put(0,new Tuple<Lemma,HashSet<String>>(altLemma,altParams));
        paradigm.add(0);
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
        flags.add(""String_Node_Str"");
      }
 else {
        System.err.printf(""String_Node_Str"",lemma);
        newBegin=0;
      }
    }
  }
  if (newBegin == -1)   newBegin=aEndingMascRules(gramText,lemma);
  if (newBegin == -1)   newBegin=uEndingMascRules(gramText,lemma);
  if (newBegin == -1)   newBegin=uEndingFemRules(gramText,lemma);
  if (newBegin == -1)   newBegin=singleEndingOnlyRules(gramText,lemma);
  if (newBegin > 0 && newBegin <= gramText.length())   gramText=gramText.substring(newBegin);
 else   if (newBegin > gramText.length()) {
    System.err.printf(""String_Node_Str"",lemma,gramText,newBegin);
  }
  if (gramText.matches(""String_Node_Str""))   gramText=gramText.substring(1);
  return gramText;
}",0.9889789024704434
190597,"public Word guessByEnding(String word){
  Word rezultāts=new Word(word);
  for (int i=word.length() - 3; i >= 0; i--) {
    for (    Ending ending : getAllEndings().matchedEndings(word))     if (ending.getEnding().length() == i) {
      if (ending.getParadigm().getName().equals(""String_Node_Str""))       continue;
      ArrayList<Variants> celmi=Mijas.mijuVarianti(ending.stem(word),ending.getMija());
      if (celmi.size() == 0)       continue;
      String celms=celmi.get(0).celms;
      Wordform variants=new Wordform(word,null,ending);
      variants.addAttribute(AttributeNames.i_Source,""String_Node_Str"");
      variants.addAttribute(AttributeNames.i_Guess,AttributeNames.v_Ending);
      Ending pamatforma=ending.getLemmaEnding();
      if (ending.getParadigm().getID() == 4 && !(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")))       continue;
      if (pamatforma != null)       variants.addAttribute(AttributeNames.i_Lemma,celms + pamatforma.getEnding());
      if ((this.guessNouns && ending.getParadigm().isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Noun) && (enableVocative || !variants.isMatchingStrong(AttributeNames.i_Case,AttributeNames.v_Vocative))&& (guessInflexibeNouns || !variants.isMatchingStrong(AttributeNames.i_Declension,AttributeNames.v_NA))) || (this.guessVerbs && ending.getParadigm().isMatchingWeak(AttributeNames.i_PartOfSpeech,AttributeNames.v_Verb)) || (this.guessAdjectives && ending.getParadigm().isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Adjective))|| (this.guessParticibles && variants.isMatchingStrong(AttributeNames.i_Izteiksme,AttributeNames.v_Participle)))       rezultāts.wordforms.add(variants);
    }
    if (rezultāts.isRecognized() && !enableAllGuesses)     break;
  }
  return rezultāts;
}","public Word guessByEnding(String word){
  Word rezultāts=new Word(word);
  for (int i=word.length() - 3; i >= 0; i--) {
    for (    Ending ending : getAllEndings().matchedEndings(word))     if (ending.getEnding().length() == i) {
      if (ending.getParadigm().getName().equals(""String_Node_Str""))       continue;
      ArrayList<Variants> celmi=Mijas.mijuVarianti(ending.stem(word),ending.getMija());
      if (celmi.size() == 0)       continue;
      String celms=celmi.get(0).celms;
      Wordform variants=new Wordform(word,null,ending);
      variants.addAttribute(AttributeNames.i_Source,""String_Node_Str"");
      variants.addAttribute(AttributeNames.i_Guess,AttributeNames.v_Ending);
      Ending pamatforma=ending.getLemmaEnding();
      if (ending.getParadigm().getID() == 4 && !(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")))       continue;
      if (pamatforma != null)       variants.addAttribute(AttributeNames.i_Lemma,celms + pamatforma.getEnding());
      if ((this.guessNouns && ending.getParadigm().isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Noun) && (enableVocative || !variants.isMatchingStrong(AttributeNames.i_Case,AttributeNames.v_Vocative))&& (guessInflexibleNouns || !variants.isMatchingStrong(AttributeNames.i_Declension,AttributeNames.v_NA))) || (this.guessVerbs && ending.getParadigm().isMatchingWeak(AttributeNames.i_PartOfSpeech,AttributeNames.v_Verb)) || (this.guessAdjectives && ending.getParadigm().isMatchingStrong(AttributeNames.i_PartOfSpeech,AttributeNames.v_Adjective))|| (this.guessParticibles && variants.isMatchingStrong(AttributeNames.i_Izteiksme,AttributeNames.v_Participle)))       rezultāts.wordforms.add(variants);
    }
    if (rezultāts.isRecognized() && !enableAllGuesses)     break;
  }
  return rezultāts;
}",0.9997230684021048
190598,"public ArrayList<Wordform> generateInflections(Lexeme lexeme){
  boolean VisPārākāPak=false;
  String trešāSakne=null, vārds;
  ArrayList<Wordform> locījumi=new ArrayList<Wordform>(1);
  if (lexeme.getParadigm().getStems() == 3) {
    trešāSakne=lexeme.getStem(2);
  }
  for (  Ending ending : lexeme.getParadigm().endings) {
    if (ending.getValue(AttributeNames.i_PartOfSpeech) == null || ending.getValue(AttributeNames.i_PartOfSpeech).equals(lexeme.getValue(AttributeNames.i_PartOfSpeech)) || lexeme.getValue(AttributeNames.i_PartOfSpeech) == null) {
      if (ending.isMatchingStrong(AttributeNames.i_Definiteness,AttributeNames.v_Definite)) {
        VisPārākāPak=true;
      }
 else       VisPārākāPak=false;
      ArrayList<Variants> celmi=Mijas.MijasLocīšanai(lexeme.getStem(ending.stemID - 1),ending.getMija(),trešāSakne,VisPārākāPak);
      for (      Variants celms : celmi) {
        if (celms.isMatchingStrong(""String_Node_Str"",""String_Node_Str""))         vārds=celms.celms + ending.getEnding().replace(""String_Node_Str"",""String_Node_Str"");
 else         vārds=celms.celms + ending.getEnding();
        Wordform locījums=new Wordform(vārds,lexeme,ending);
        locījums.addAttributes(celms);
        locījumi.add(locījums);
      }
    }
  }
  return locījumi;
}","private ArrayList<Wordform> generateInflections(Lexeme lexeme){
  boolean VisPārākāPak=false;
  String trešāSakne=null, vārds;
  ArrayList<Wordform> locījumi=new ArrayList<Wordform>(1);
  if (lexeme.getParadigm().getStems() == 3) {
    trešāSakne=lexeme.getStem(2);
  }
  for (  Ending ending : lexeme.getParadigm().endings) {
    if (ending.getValue(AttributeNames.i_PartOfSpeech) == null || ending.getValue(AttributeNames.i_PartOfSpeech).equals(lexeme.getValue(AttributeNames.i_PartOfSpeech)) || lexeme.getValue(AttributeNames.i_PartOfSpeech) == null) {
      if (ending.isMatchingStrong(AttributeNames.i_Definiteness,AttributeNames.v_Definite)) {
        VisPārākāPak=true;
      }
 else       VisPārākāPak=false;
      ArrayList<Variants> celmi=Mijas.MijasLocīšanai(lexeme.getStem(ending.stemID - 1),ending.getMija(),trešāSakne,VisPārākāPak);
      for (      Variants celms : celmi) {
        if (celms.isMatchingStrong(""String_Node_Str"",""String_Node_Str""))         vārds=celms.celms + ending.getEnding().replace(""String_Node_Str"",""String_Node_Str"");
 else         vārds=celms.celms + ending.getEnding();
        Wordform locījums=new Wordform(vārds,lexeme,ending);
        locījums.addAttributes(celms);
        locījumi.add(locījums);
      }
    }
  }
  return locījumi;
}",0.9957014458772958
190599,"public static ArrayList<Variants> MijasLocīšanai(String celms,int mija,String trešāSakne,boolean pieliktVisPārākoPak){
  ArrayList<Variants> varianti=new ArrayList<Variants>(1);
  if (celms.trim().equals(""String_Node_Str""))   return varianti;
  try {
switch (mija) {
case 0:
      varianti.add(new Variants(celms));
    break;
case 1:
  if (celms.endsWith(""String_Node_Str"") || (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str"")) || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str""))|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms));
  }
 else   if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str""))     varianti.add(new Variants(celms.substring(0,celms.length() - 3) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) || (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")))   varianti.add(new Variants(celms));
break;
case 2:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1),""String_Node_Str"",""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
break;
case 3:
varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
varianti.add(new Variants(celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Comparative));
if (pieliktVisPārākoPak) varianti.add(new Variants(""String_Node_Str"" + celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Superlative));
break;
case 4:
varianti.add(new Variants(""String_Node_Str"" + celms));
break;
case 5:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1)));
break;
case 6:
if (celms.endsWith(""String_Node_Str"")) {
if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
}
 else varianti.add(new Variants(celms));
break;
case 7:
if (celms.endsWith(""String_Node_Str"") && trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") && trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
break;
case 8:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms,""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
case 9:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
break;
case 10:
varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
varianti.add(new Variants(celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Comparative));
if (pieliktVisPārākoPak) varianti.add(new Variants(""String_Node_Str"" + celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Superlative));
break;
case 11:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
case 12:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 13:
varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 14:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
}
}
 catch (StringIndexOutOfBoundsException e) {
try {
new PrintWriter(new OutputStreamWriter(System.err,""String_Node_Str"")).printf(""String_Node_Str"",celms,mija);
e.printStackTrace();
}
 catch (UnsupportedEncodingException e1) {
e1.printStackTrace();
}
}
return varianti;
}","public static ArrayList<Variants> MijasLocīšanai(String celms,int mija,String trešāSakne,boolean pieliktVisPārākoPak){
  ArrayList<Variants> varianti=new ArrayList<Variants>(1);
  if (celms.trim().equals(""String_Node_Str""))   return varianti;
  try {
switch (mija) {
case 0:
      varianti.add(new Variants(celms));
    break;
case 1:
  if (celms.endsWith(""String_Node_Str"") || (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str"")) || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str""))|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms));
  }
 else   if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str""))     varianti.add(new Variants(celms.substring(0,celms.length() - 3) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) || (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")))   varianti.add(new Variants(celms));
break;
case 2:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1),""String_Node_Str"",""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
break;
case 3:
varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
varianti.add(new Variants(celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Comparative));
if (pieliktVisPārākoPak) varianti.add(new Variants(""String_Node_Str"" + celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Superlative));
break;
case 4:
varianti.add(new Variants(""String_Node_Str"" + celms));
break;
case 5:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1)));
break;
case 6:
if (celms.endsWith(""String_Node_Str"")) {
if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms + ""String_Node_Str""));
}
 else varianti.add(new Variants(celms));
break;
case 7:
if (celms.endsWith(""String_Node_Str"") && trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") && trešāSakne.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
break;
case 8:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms,""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
case 9:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
break;
case 10:
varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
varianti.add(new Variants(celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Comparative));
if (pieliktVisPārākoPak) varianti.add(new Variants(""String_Node_Str"" + celms + ""String_Node_Str"",AttributeNames.i_Degree,AttributeNames.v_Superlative));
break;
case 11:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
case 12:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else varianti.add(new Variants(""String_Node_Str"" + celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 13:
varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 14:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
}
}
 catch (StringIndexOutOfBoundsException e) {
try {
new PrintWriter(new OutputStreamWriter(System.err,""String_Node_Str"")).printf(""String_Node_Str"",celms,mija);
e.printStackTrace();
}
 catch (UnsupportedEncodingException e1) {
e1.printStackTrace();
}
}
return varianti;
}",0.9952632537802878
190600,"public static ArrayList<Variants> mijuVarianti(String celms,int mija){
  ArrayList<Variants> varianti=new ArrayList<Variants>(1);
  if (celms.trim().equals(""String_Node_Str""))   return varianti;
  try {
switch (mija) {
case 0:
      varianti.add(new Variants(celms));
    break;
case 1:
  if (celms.equalsIgnoreCase(""String_Node_Str"") || celms.equalsIgnoreCase(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str""))|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str""))     varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str""))) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1),""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms));
  }
 else   if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) || (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.equals(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")))   varianti.add(new Variants(celms));
break;
case 2:
varianti.add(new Variants(celms + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 3:
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
 else varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
break;
case 4:
if (celms.startsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(2,celms.length())));
}
break;
case 5:
if (celms.startsWith(""String_Node_Str"") & celms.length() > 3) {
if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 2) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(2,celms.length()) + ""String_Node_Str""));
}
break;
case 6:
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else varianti.add(new Variants(celms));
break;
case 7:
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str""))) varianti.add(new Variants(celms));
break;
case 8:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 9:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) break;
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 10:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1),AttributeNames.i_Degree,AttributeNames.v_Positive));
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
break;
case 11:
varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 12:
if (celms.startsWith(""String_Node_Str"") & celms.length() > 3) {
if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length())));
 else varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
break;
case 13:
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
break;
case 14:
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
varianti.add(new Variants(celms));
}
 else varianti.add(new Variants(celms));
break;
case 15:
varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
break;
}
}
 catch (StringIndexOutOfBoundsException e) {
try {
new PrintStream(System.err,true,""String_Node_Str"").printf(""String_Node_Str"",celms,mija);
e.printStackTrace();
}
 catch (UnsupportedEncodingException e1) {
e1.printStackTrace();
}
}
return varianti;
}","public static ArrayList<Variants> mijuVarianti(String celms,int mija){
  ArrayList<Variants> varianti=new ArrayList<Variants>(1);
  if (celms.trim().equals(""String_Node_Str""))   return varianti;
  try {
switch (mija) {
case 0:
      varianti.add(new Variants(celms));
    break;
case 1:
  if (celms.equalsIgnoreCase(""String_Node_Str"") || celms.equalsIgnoreCase(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str""))|| celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str""))     varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
 else {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
 else     if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str""))) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
    }
  }
 else   if (celms.endsWith(""String_Node_Str"")) {
    if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) {
      varianti.add(new Variants(celms.substring(0,celms.length() - 1),""String_Node_Str"",""String_Node_Str""));
    }
 else     varianti.add(new Variants(celms));
  }
 else   if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")) || (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.equals(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")))   varianti.add(new Variants(celms));
break;
case 2:
varianti.add(new Variants(celms + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 3:
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
 else varianti.add(new Variants(celms,AttributeNames.i_Degree,AttributeNames.v_Positive));
break;
case 4:
if (celms.startsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(2,celms.length())));
}
break;
case 5:
if (celms.startsWith(""String_Node_Str"") & celms.length() > 3) {
if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 2) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms.substring(2,celms.length()) + ""String_Node_Str""));
}
break;
case 6:
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
 else varianti.add(new Variants(celms));
break;
case 7:
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1)));
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"") && !celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (!(celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"") || celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str"")|| celms.endsWith(""String_Node_Str""))) varianti.add(new Variants(celms));
break;
case 8:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 9:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) break;
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
 else varianti.add(new Variants(celms + ""String_Node_Str""));
break;
case 10:
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1),AttributeNames.i_Degree,AttributeNames.v_Positive));
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
break;
case 11:
varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
break;
case 12:
if (celms.startsWith(""String_Node_Str"") & celms.length() > 3) {
if (celms.endsWith(""String_Node_Str"")) {
if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length())));
 else varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(2,celms.length() - 1) + ""String_Node_Str""));
}
break;
case 13:
if (celms.endsWith(""String_Node_Str"")) {
if (celms.startsWith(""String_Node_Str"")) varianti.add(new Variants(celms.substring(3,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Superlative));
 else varianti.add(new Variants(celms.substring(0,celms.length() - 2),AttributeNames.i_Degree,AttributeNames.v_Comparative));
}
break;
case 14:
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
 else if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 2) + ""String_Node_Str""));
varianti.add(new Variants(celms));
}
 else varianti.add(new Variants(celms));
break;
case 15:
varianti.add(new Variants(celms));
if (celms.endsWith(""String_Node_Str"")) {
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
varianti.add(new Variants(celms.substring(0,celms.length() - 1) + ""String_Node_Str""));
}
break;
}
}
 catch (StringIndexOutOfBoundsException e) {
try {
new PrintStream(System.err,true,""String_Node_Str"").printf(""String_Node_Str"",celms,mija);
e.printStackTrace();
}
 catch (UnsupportedEncodingException e1) {
e1.printStackTrace();
}
}
return varianti;
}",0.9957480946650622
190601,"@Before public void defaultsettings(){
  locītājs.enableVocative=false;
  locītājs.enableDiminutive=false;
  locītājs.enablePrefixes=false;
  locītājs.enableGuessing=false;
  locītājs.enableAllGuesses=false;
  locītājs.meklētsalikteņus=false;
}","@Before public void defaultsettings(){
  locītājs.enableVocative=false;
  locītājs.enableDiminutive=false;
  locītājs.enablePrefixes=false;
  locītājs.enableGuessing=false;
  locītājs.enableAllGuesses=false;
  locītājs.meklētsalikteņus=false;
  locītājs.setCacheSize(0);
}",0.9457364341085271
190602,"/** 
 * @param args
 * @throws Exception 
 */
public static void main(String[] args) throws Exception {
  PrintWriter izeja=new PrintWriter(new PrintStream(System.out,true,""String_Node_Str""));
  Analyzer analizators=new Analyzer(""String_Node_Str"");
  analizators.guessNouns=true;
  analizators.guessParticibles=false;
  analizators.guessVerbs=false;
  analizators.guessAdjectives=false;
  analizators.enableDiminutive=false;
  analizators.enablePrefixes=false;
  analizators.enableGuessing=false;
  analizators.meklētsalikteņus=false;
  analizators.guessInflexibeNouns=true;
  BufferedReader ieeja;
  String vārds;
  ieeja=new BufferedReader(new InputStreamReader(new FileInputStream(""String_Node_Str""),""String_Node_Str""));
  while ((vārds=ieeja.readLine()) != null) {
    vārds=vārds.trim();
    Word w=analizators.analyzeLemma(vārds);
    if (irLeksikonā(w)) {
    }
 else {
      w=analizators.guessByEnding(vārds);
      izmestNepareizāsDzimtes(w);
      if (w.wordforms.size() == 0) {
        if (vārds.endsWith(""String_Node_Str"") || vārds.endsWith(""String_Node_Str"") || vārds.endsWith(""String_Node_Str"")|| vārds.endsWith(""String_Node_Str"")) {
          Lexeme jaunais=analizators.createLexeme(vārds,111,""String_Node_Str"");
          jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
          jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        }
 else {
          izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        }
      }
 else       if (w.wordforms.size() == 1) {
        Lexeme jaunais=analizators.createLexeme(vārds,Integer.parseInt(w.wordforms.get(0).getValue(AttributeNames.i_EndingID)),""String_Node_Str"");
        jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
        jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
      }
 else {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w.print(izeja);
      }
    }
  }
  izeja.flush();
  analizators.toXML(""String_Node_Str"");
}","/** 
 * @param args
 * @throws Exception 
 */
public static void main(String[] args) throws Exception {
  PrintWriter izeja=new PrintWriter(new PrintStream(System.out,true,""String_Node_Str""));
  Analyzer analizators=new Analyzer(""String_Node_Str"");
  analizators.guessNouns=true;
  analizators.guessParticibles=false;
  analizators.guessVerbs=false;
  analizators.guessAdjectives=false;
  analizators.enableDiminutive=false;
  analizators.enablePrefixes=false;
  analizators.enableGuessing=false;
  analizators.meklētsalikteņus=false;
  analizators.guessInflexibleNouns=true;
  BufferedReader ieeja;
  String vārds;
  ieeja=new BufferedReader(new InputStreamReader(new FileInputStream(""String_Node_Str""),""String_Node_Str""));
  while ((vārds=ieeja.readLine()) != null) {
    vārds=vārds.trim();
    Word w=analizators.analyzeLemma(vārds);
    if (irLeksikonā(w)) {
    }
 else {
      w=analizators.guessByEnding(vārds);
      izmestNepareizāsDzimtes(w);
      if (w.wordforms.size() == 0) {
        if (vārds.endsWith(""String_Node_Str"") || vārds.endsWith(""String_Node_Str"") || vārds.endsWith(""String_Node_Str"")|| vārds.endsWith(""String_Node_Str"")) {
          Lexeme jaunais=analizators.createLexeme(vārds,111,""String_Node_Str"");
          jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
          jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        }
 else {
          izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        }
      }
 else       if (w.wordforms.size() == 1) {
        Lexeme jaunais=analizators.createLexeme(vārds,Integer.parseInt(w.wordforms.get(0).getValue(AttributeNames.i_EndingID)),""String_Node_Str"");
        jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
        jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
      }
 else {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w.print(izeja);
      }
    }
  }
  izeja.flush();
  analizators.toXML(""String_Node_Str"");
}",0.9997617345723137
190603,"/** 
 * @param args
 * @throws Exception 
 */
public static void main(String[] args) throws Exception {
  PrintWriter izeja=new PrintWriter(new PrintStream(System.out,true,""String_Node_Str""));
  Analyzer analizators=new Analyzer(""String_Node_Str"");
  analizators.guessNouns=true;
  analizators.guessParticibles=false;
  analizators.guessVerbs=false;
  analizators.guessAdjectives=false;
  analizators.enableDiminutive=false;
  analizators.enablePrefixes=false;
  analizators.enableGuessing=false;
  analizators.meklētsalikteņus=false;
  analizators.guessInflexibeNouns=true;
  BufferedReader ieeja;
  String vārds;
  ieeja=new BufferedReader(new InputStreamReader(new FileInputStream(""String_Node_Str""),""String_Node_Str""));
  while ((vārds=ieeja.readLine()) != null) {
    vārds=vārds.trim();
    Word w=analizators.analyzeLemma(vārds);
    if (irLeksikonā(w)) {
      izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
    }
 else {
      w=analizators.guessByEnding(vārds);
      izmestNepareizāsDzimtes(w);
      if (w.wordforms.size() == 0) {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w=analizators.guessByEnding(vārds);
        w.print(izeja);
      }
 else       if (w.wordforms.size() == 1) {
        Lexeme jaunais=analizators.createLexeme(vārds,Integer.parseInt(w.wordforms.get(0).getValue(AttributeNames.i_EndingID)),""String_Node_Str"");
        jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
        jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        jaunais.describe(izeja);
      }
 else {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w.print(izeja);
      }
    }
  }
  izeja.flush();
  analizators.toXML(""String_Node_Str"");
}","/** 
 * @param args
 * @throws Exception 
 */
public static void main(String[] args) throws Exception {
  PrintWriter izeja=new PrintWriter(new PrintStream(System.out,true,""String_Node_Str""));
  Analyzer analizators=new Analyzer(""String_Node_Str"");
  analizators.guessNouns=true;
  analizators.guessParticibles=false;
  analizators.guessVerbs=false;
  analizators.guessAdjectives=false;
  analizators.enableDiminutive=false;
  analizators.enablePrefixes=false;
  analizators.enableGuessing=false;
  analizators.meklētsalikteņus=false;
  analizators.guessInflexibleNouns=true;
  BufferedReader ieeja;
  String vārds;
  ieeja=new BufferedReader(new InputStreamReader(new FileInputStream(""String_Node_Str""),""String_Node_Str""));
  while ((vārds=ieeja.readLine()) != null) {
    vārds=vārds.trim();
    Word w=analizators.analyzeLemma(vārds);
    if (irLeksikonā(w)) {
      izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
    }
 else {
      w=analizators.guessByEnding(vārds);
      izmestNepareizāsDzimtes(w);
      if (w.wordforms.size() == 0) {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w=analizators.guessByEnding(vārds);
        w.print(izeja);
      }
 else       if (w.wordforms.size() == 1) {
        Lexeme jaunais=analizators.createLexeme(vārds,Integer.parseInt(w.wordforms.get(0).getValue(AttributeNames.i_EndingID)),""String_Node_Str"");
        jaunais.addAttribute(AttributeNames.i_NounType,AttributeNames.v_ProperNoun);
        jaunais.addAttribute(AttributeNames.i_Lemma,vārds);
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        jaunais.describe(izeja);
      }
 else {
        izeja.println(""String_Node_Str"" + w.getToken() + ""String_Node_Str"");
        w.print(izeja);
      }
    }
  }
  izeja.flush();
  analizators.toXML(""String_Node_Str"");
}",0.9997306760032318
190604,"public Word analyzeLowercase(String word){
  Word cacheWord=wordCache.get(word);
  if (cacheWord != null)   return cacheWord;
  Word rezultāts=new Word(word);
  for (  Ending ending : getAllEndings().matchedEndings(word)) {
    ArrayList<Variants> celmi=Mijas.mijuVarianti(ending.stem(word),ending.getMija());
    for (    Variants celms : celmi) {
      ArrayList<Lexeme> leksēmas=ending.getEndingLexemes(celms.celms);
      if (leksēmas != null)       for (      Lexeme leksēma : leksēmas) {
        Wordform variants=new Wordform(word,leksēma,ending);
        variants.addAttributes(celms);
        variants.addAttribute(AttributeNames.i_Guess,AttributeNames.v_NoGuess);
        rezultāts.addWordform(variants);
      }
      if (leksēmas == null && enableDiminutive)       guessDeminutive(word,rezultāts,ending,celms);
    }
  }
  filterUnacceptable(rezultāts);
  if (!rezultāts.isRecognized()) {
    if (p_number.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Number);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_fractional.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Number);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_ordinal.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Ordinal);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_abbrev.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Abbreviation);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
  }
  if (!rezultāts.isRecognized() && enablePrefixes)   rezultāts=guessByPrefix(word);
  if (!rezultāts.isRecognized() && enableGuessing)   rezultāts=guessByEnding(word);
  wordCache.put(word,rezultāts);
  return rezultāts;
}","public Word analyzeLowercase(String word){
  Word cacheWord=wordCache.get(word);
  if (cacheWord != null)   return (Word)cacheWord.clone();
  Word rezultāts=new Word(word);
  for (  Ending ending : getAllEndings().matchedEndings(word)) {
    ArrayList<Variants> celmi=Mijas.mijuVarianti(ending.stem(word),ending.getMija());
    for (    Variants celms : celmi) {
      ArrayList<Lexeme> leksēmas=ending.getEndingLexemes(celms.celms);
      if (leksēmas != null)       for (      Lexeme leksēma : leksēmas) {
        Wordform variants=new Wordform(word,leksēma,ending);
        variants.addAttributes(celms);
        variants.addAttribute(AttributeNames.i_Guess,AttributeNames.v_NoGuess);
        rezultāts.addWordform(variants);
      }
      if (leksēmas == null && enableDiminutive)       guessDeminutive(word,rezultāts,ending,celms);
    }
  }
  filterUnacceptable(rezultāts);
  if (!rezultāts.isRecognized()) {
    if (p_number.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Number);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_fractional.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Number);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_ordinal.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Residual);
      wf.addAttribute(AttributeNames.i_ResidualType,AttributeNames.v_Ordinal);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
    if (p_abbrev.matcher(word).matches()) {
      Wordform wf=new Wordform(word);
      wf.addAttribute(AttributeNames.i_PartOfSpeech,AttributeNames.v_Abbreviation);
      wf.addAttribute(AttributeNames.i_Lemma,word);
      wf.addAttribute(AttributeNames.i_Word,word);
      rezultāts.addWordform(wf);
      return rezultāts;
    }
  }
  if (!rezultāts.isRecognized() && enablePrefixes)   rezultāts=guessByPrefix(word);
  if (!rezultāts.isRecognized() && enableGuessing)   rezultāts=guessByEnding(word);
  wordCache.put(word,(Word)rezultāts.clone());
  return rezultāts;
}",0.9948090470893586
190605,"@Before public void defaultsettings(){
  locītājs.defaultSettings();
  locītājs.setCacheSize(0);
}","@Before public void defaultsettings(){
  locītājs.defaultSettings();
  locītājs.setCacheSize(0);
  locītājs.clearCache();
}",0.8868778280542986
190606,"public void show(){
  frame=new JFrame(""String_Node_Str"" + version);
  frame.setResizable(false);
  frame.setLocation(300,300);
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPanel pane=(JPanel)frame.getContentPane();
  pane.setBackground(BG_COLOR);
  GridLayout layout=new GridLayout(9,0);
  pane.setLayout(layout);
  pane.add(getInfoPanel());
  JLabel dirLabel=new JLabel(""String_Node_Str"");
  pane.add(dirLabel);
  pane.setBorder(new EmptyBorder(10,10,10,10));
  JPanel dirPanel=getDirectoryPanel();
  pane.add(dirPanel);
  JLabel fileLabel=new JLabel(""String_Node_Str"");
  pane.add(fileLabel);
  JPanel filePanel=getFilePanel();
  pane.add(filePanel);
  JPanel originalsPanel=getUnknownsPanel();
  pane.add(originalsPanel);
  pane.add(getRunPanel());
  pane.add(getLinkButton(""String_Node_Str"",""String_Node_Str""));
  pane.add(getCreditPanel());
  directoryDialog=getDirectoryChooser();
  fileDialog=getFileChooser();
  frame.pack();
  frame.setVisible(true);
  scanFrame=getScanningFrame();
}","public void show(){
  frame=new JFrame(""String_Node_Str"" + version);
  frame.setResizable(true);
  frame.setLocation(300,300);
  frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  JPanel pane=(JPanel)frame.getContentPane();
  pane.setBackground(BG_COLOR);
  GridLayout layout=new GridLayout(9,0);
  pane.setLayout(layout);
  pane.add(getInfoPanel());
  JLabel dirLabel=new JLabel(""String_Node_Str"");
  pane.add(dirLabel);
  pane.setBorder(new EmptyBorder(10,10,10,10));
  JPanel dirPanel=getDirectoryPanel();
  pane.add(dirPanel);
  JLabel fileLabel=new JLabel(""String_Node_Str"");
  pane.add(fileLabel);
  JPanel filePanel=getFilePanel();
  pane.add(filePanel);
  JPanel originalsPanel=getUnknownsPanel();
  pane.add(originalsPanel);
  pane.add(getRunPanel());
  pane.add(getLinkButton(""String_Node_Str"",""String_Node_Str""));
  pane.add(getCreditPanel());
  directoryDialog=getDirectoryChooser();
  fileDialog=getFileChooser();
  frame.pack();
  frame.setVisible(true);
  frame.setSize(400,300);
  scanFrame=getScanningFrame();
}",0.9839728023312287
190607,"public boolean process(){
  boolean result=true;
  if (this.getFileSize(this.getInputFile()) <= 0) {
    logger.severe(""String_Node_Str"" + this.getInputFile() + ""String_Node_Str"");
    result=false;
  }
 else {
    BufferedReader reader=null;
    try {
      ArrayList<String> outputInfo=new ArrayList<String>();
      int totalLineCount=this.determineCommentsExtractor(this.getInputFile());
      reader=new BufferedReader(new FileReader(this.getInputFile()));
      String line;
      int i=totalLineCount > 0 ? 0 : 1;
      while (((line=reader.readLine()) != null) && (i < totalLineCount)) {
        i++;
        outputInfo.add(line);
      }
      this.setOutputInfo(outputInfo);
    }
 catch (    IOException e) {
      result=false;
      logger.log(Level.WARNING,e.getMessage(),e);
    }
 finally {
      try {
        if (reader != null) {
          reader.close();
        }
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  return result;
}","public boolean process(){
  boolean result=true;
  if (this.getFileSize(this.getInputFile()) <= 0) {
    logger.severe(""String_Node_Str"" + this.getInputFile() + ""String_Node_Str"");
    result=false;
  }
 else {
    BufferedReader reader=null;
    try {
      List<String> outputInfo=new ArrayList<String>();
      int totalLineCount=this.determineCommentsExtractor(this.getInputFile());
      reader=new BufferedReader(new FileReader(this.getInputFile()));
      String line;
      int i=totalLineCount > 0 ? 0 : 1;
      while (((line=reader.readLine()) != null) && (i < totalLineCount)) {
        i++;
        outputInfo.add(line);
      }
      this.setOutputInfo(outputInfo);
    }
 catch (    IOException e) {
      result=false;
      logger.log(Level.WARNING,e.getMessage(),e);
    }
 finally {
      try {
        if (reader != null) {
          reader.close();
        }
      }
 catch (      IOException e) {
        logger.log(Level.SEVERE,e.getMessage(),e);
      }
    }
  }
  return result;
}",0.9975210708973724
190608,"public void setOutputInfo(List<String> outputInfo){
  outputInfo=new ArrayList<String>(outputInfo);
}","public void setOutputInfo(List<String> outputInfo){
  this.outputInfo=outputInfo;
}",0.8478260869565217
190609,"public void setInputInfo(List<String> inputInfo){
  this.inputInfo=new ArrayList<String>(inputInfo);
}","public void setInputInfo(List<String> inputInfo){
  this.inputInfo=inputInfo;
}",0.8729281767955801
190610,"public int hashCode(){
  int myHash=0;
  for (int i=0; i < theFields.length; i++) {
    myHash^=theFields.hashCode();
  }
  return myHash;
}","public int hashCode(){
  int myHash=0;
  for (int i=0; i < theFields.length; i++) {
    myHash^=theFields[i].hashCode();
  }
  return myHash;
}",0.9893992932862192
190611,"public void readExternal(ObjectInput objectInput) throws IOException, ClassNotFoundException {
  theParents=(String[])objectInput.readObject();
  theFields=new MangledField[objectInput.readInt()];
  for (int i=0; i < theFields.length; i++) {
    int myObjectSize=objectInput.readInt();
    int myAnnotSize=objectInput.readInt();
    byte[] myContent=new byte[myObjectSize];
    byte[] myAnnot=new byte[myAnnotSize];
    objectInput.readFully(myContent);
    objectInput.readFully(myAnnot);
    theFields[i]=new MangledField(objectInput.readUTF(),myContent,myAnnot,objectInput.readInt());
  }
  theType=objectInput.readUTF();
  String myCodebase=objectInput.readUTF();
  theCodebase=(myCodebase.length() == 0) ? null : myCodebase;
  isWildcard=objectInput.readBoolean();
  isSnapshot=objectInput.readBoolean();
}","public void readExternal(ObjectInput objectInput) throws IOException, ClassNotFoundException {
  checkIntegrity=integrityEnforced(objectInput);
  theParents=(String[])objectInput.readObject();
  theFields=new MangledField[objectInput.readInt()];
  for (int i=0; i < theFields.length; i++) {
    int myObjectSize=objectInput.readInt();
    int myAnnotSize=objectInput.readInt();
    byte[] myContent=new byte[myObjectSize];
    byte[] myAnnot=new byte[myAnnotSize];
    objectInput.readFully(myContent);
    objectInput.readFully(myAnnot);
    theFields[i]=new MangledField(objectInput.readUTF(),myContent,myAnnot,objectInput.readInt());
  }
  theType=objectInput.readUTF();
  String myCodebase=objectInput.readUTF();
  theCodebase=(myCodebase.length() == 0) ? null : myCodebase;
  isWildcard=objectInput.readBoolean();
  isSnapshot=objectInput.readBoolean();
}",0.9706762417713944
190612,"/** 
 * Runs the schema generator.
 * @param classLoader the schema generator will run in this classLoader. It needs to be able to load annotation processing and JAXB RI classes. Note that JAXB RI classes refer to annotation processing classes. Must not be null.
 * @return exit code. 0 if success.
 */
public static int run(String[] args,ClassLoader classLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  final Options options=new Options();
  if (args.length == 0) {
    usage();
    return -1;
  }
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"")) {
      usage();
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.VERSION.format());
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.FULLVERSION.format());
      return -1;
    }
  }
  try {
    options.parseArguments(args);
  }
 catch (  BadCommandLineException e) {
    System.out.println(e.getMessage());
    System.out.println();
    usage();
    return -1;
  }
  List<String> aptargs=new ArrayList<String>();
  if (options.encoding != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.encoding);
  }
  File jaxbApi=findJaxbApiJar();
  if (jaxbApi != null) {
    if (options.classpath != null) {
      options.classpath=options.classpath + File.pathSeparatorChar + jaxbApi;
    }
 else {
      options.classpath=jaxbApi.getPath();
    }
  }
  aptargs.add(""String_Node_Str"");
  aptargs.add(options.classpath);
  if (options.targetDir != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.targetDir.getPath());
  }
  aptargs.addAll(options.arguments);
  String[] argsarray=aptargs.toArray(new String[aptargs.size()]);
  return compile(argsarray,options.episodeFile) ? 0 : -1;
}","/** 
 * Runs the schema generator.
 * @param classLoader the schema generator will run in this classLoader. It needs to be able to load annotation processing and JAXB RI classes. Note that JAXB RI classes refer to annotation processing classes. Must not be null.
 * @return exit code. 0 if success.
 */
public static int run(String[] args,ClassLoader classLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  final Options options=new Options();
  if (args.length == 0) {
    usage();
    return -1;
  }
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"")) {
      usage();
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.VERSION.format());
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.FULLVERSION.format());
      return -1;
    }
  }
  try {
    options.parseArguments(args);
  }
 catch (  BadCommandLineException e) {
    System.out.println(e.getMessage());
    System.out.println();
    usage();
    return -1;
  }
  Class schemagenRunner=classLoader.loadClass(Runner.class.getName());
  Method compileMethod=schemagenRunner.getDeclaredMethod(""String_Node_Str"",String[].class,File.class);
  List<String> aptargs=new ArrayList<String>();
  if (options.encoding != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.encoding);
  }
  File jaxbApi=findJaxbApiJar();
  if (jaxbApi != null) {
    if (options.classpath != null) {
      options.classpath=options.classpath + File.pathSeparatorChar + jaxbApi;
    }
 else {
      options.classpath=jaxbApi.getPath();
    }
  }
  aptargs.add(""String_Node_Str"");
  aptargs.add(options.classpath);
  if (options.targetDir != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.targetDir.getPath());
  }
  aptargs.addAll(options.arguments);
  String[] argsarray=aptargs.toArray(new String[aptargs.size()]);
  return ((Boolean)compileMethod.invoke(null,argsarray,options.episodeFile)) ? 0 : 1;
}",0.9471794871794872
190613,"public static boolean compile(String[] args,File episode){
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(diagnostics,null,null);
  JavacOptions options=JavacOptions.parse(compiler,fileManager,args);
  List<String> unrecognizedOptions=options.getUnrecognizedOptions();
  if (!unrecognizedOptions.isEmpty())   Logger.getLogger(SchemaGenerator.class.getName()).log(Level.WARNING,""String_Node_Str"" + unrecognizedOptions);
  Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(options.getFiles());
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options.getRecognizedOptions(),options.getClassNames(),compilationUnits);
  com.sun.tools.jxc.ap.SchemaGenerator r=new com.sun.tools.jxc.ap.SchemaGenerator();
  if (episode != null)   r.setEpisodeFile(episode);
  task.setProcessors(Collections.singleton(r));
  return task.call();
}","public static boolean compile(String[] args,File episode) throws Exception {
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(diagnostics,null,null);
  JavacOptions options=JavacOptions.parse(compiler,fileManager,args);
  List<String> unrecognizedOptions=options.getUnrecognizedOptions();
  if (!unrecognizedOptions.isEmpty())   Logger.getLogger(SchemaGenerator.class.getName()).log(Level.WARNING,""String_Node_Str"" + unrecognizedOptions);
  Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromFiles(options.getFiles());
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options.getRecognizedOptions(),options.getClassNames(),compilationUnits);
  com.sun.tools.jxc.ap.SchemaGenerator r=new com.sun.tools.jxc.ap.SchemaGenerator();
  if (episode != null)   r.setEpisodeFile(episode);
  task.setProcessors(Collections.singleton(r));
  return task.call();
}",0.991705069124424
190614,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(processingEnv);
  List<Reference> decls=new ArrayList<Reference>();
  for (  TypeElement d : annotations) {
    if (d.getKind().equals(ElementKind.CLASS))     decls.add(new Reference(d,processingEnv));
  }
  J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,processingEnv);
  if (model == null)   return false;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=processingEnv.getFiler().createResource(StandardLocation.CLASS_PATH,""String_Node_Str"",suggestedFileName).openOutputStream();
          file=file.getAbsoluteFile();
        }
        StreamResult ss=new StreamResult(out);
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
        ss.setSystemId(file.toURL().toExternalForm());
        return ss;
      }
    }
,errorListener);
    if (episodeFile != null) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + episodeFile);
      model.generateEpisodeFile(new StreamResult(episodeFile));
    }
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
  return false;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(processingEnv);
  List<Reference> decls=new ArrayList<Reference>();
  for (  Element element : roundEnv.getRootElements()) {
    if (element.getKind().equals(ElementKind.CLASS))     decls.add(new Reference((TypeElement)element,processingEnv));
  }
  J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,processingEnv);
  if (model == null)   return false;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",suggestedFileName).openOutputStream();
          file=file.getAbsoluteFile();
        }
        StreamResult ss=new StreamResult(out);
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
        ss.setSystemId(file.toURL().toExternalForm());
        return ss;
      }
    }
,errorListener);
    if (episodeFile != null) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + episodeFile);
      model.generateEpisodeFile(new StreamResult(episodeFile));
    }
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
  return false;
}",0.9715909090909092
190615,"public Result createOutput(String namespaceUri,String suggestedFileName) throws IOException {
  File file;
  OutputStream out;
  if (schemaLocations.containsKey(namespaceUri)) {
    file=schemaLocations.get(namespaceUri);
    if (file == null)     return null;
    out=new FileOutputStream(file);
  }
 else {
    file=new File(suggestedFileName);
    out=processingEnv.getFiler().createResource(StandardLocation.CLASS_PATH,""String_Node_Str"",suggestedFileName).openOutputStream();
    file=file.getAbsoluteFile();
  }
  StreamResult ss=new StreamResult(out);
  processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
  ss.setSystemId(file.toURL().toExternalForm());
  return ss;
}","public Result createOutput(String namespaceUri,String suggestedFileName) throws IOException {
  File file;
  OutputStream out;
  if (schemaLocations.containsKey(namespaceUri)) {
    file=schemaLocations.get(namespaceUri);
    if (file == null)     return null;
    out=new FileOutputStream(file);
  }
 else {
    file=new File(suggestedFileName);
    out=processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",suggestedFileName).openOutputStream();
    file=file.getAbsoluteFile();
  }
  StreamResult ss=new StreamResult(out);
  processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
  ss.setSystemId(file.toURL().toExternalForm());
  return ss;
}",0.9957924263674616
190616,"/** 
 * XmlType allows specification of factoryClass and factoryMethod.  There are to be used if no default constructor is found.
 * @return true if the factory method was found. False if not.
 */
private boolean hasFactoryConstructor(XmlType t){
  if (t == null)   return false;
  String method=t.factoryMethod();
  T fClass=reader().getClassValue(t,""String_Node_Str"");
  if (method.length() > 0) {
    if (fClass.equals(nav().ref(XmlType.DEFAULT.class))) {
      fClass=nav().use(clazz);
    }
    for (    M m : nav().getDeclaredMethods(nav().asDecl(fClass))) {
      if (nav().getMethodName(m).equals(method) && nav().getReturnType(m).equals(nav().use(clazz)) && nav().getMethodParameters(m).length == 0 && nav().isStaticMethod(m)) {
        factoryMethod=m;
        break;
      }
    }
    if (factoryMethod == null) {
      builder.reportError(new IllegalAnnotationException(Messages.NO_FACTORY_METHOD.format(nav().getClassName(nav().asDecl(fClass)),method),this));
    }
  }
 else   if (!fClass.equals(nav().ref(XmlType.DEFAULT.class))) {
    builder.reportError(new IllegalAnnotationException(Messages.FACTORY_CLASS_NEEDS_FACTORY_METHOD.format(nav().getClassName(nav().asDecl(fClass))),this));
  }
  return factoryMethod != null;
}","/** 
 * XmlType allows specification of factoryClass and factoryMethod.  There are to be used if no default constructor is found.
 * @return true if the factory method was found. False if not.
 */
private boolean hasFactoryConstructor(XmlType t){
  if (t == null)   return false;
  String method=t.factoryMethod();
  T fClass=reader().getClassValue(t,""String_Node_Str"");
  if (method.length() > 0) {
    if (nav().isSameType(fClass,nav().ref(XmlType.DEFAULT.class))) {
      fClass=nav().use(clazz);
    }
    for (    M m : nav().getDeclaredMethods(nav().asDecl(fClass))) {
      if (nav().getMethodName(m).equals(method) && nav().isSameType(nav().getReturnType(m),nav().use(clazz)) && nav().getMethodParameters(m).length == 0 && nav().isStaticMethod(m)) {
        factoryMethod=m;
        break;
      }
    }
    if (factoryMethod == null) {
      builder.reportError(new IllegalAnnotationException(Messages.NO_FACTORY_METHOD.format(nav().getClassName(nav().asDecl(fClass)),method),this));
    }
  }
 else   if (!nav().isSameType(fClass,nav().ref(XmlType.DEFAULT.class))) {
    builder.reportError(new IllegalAnnotationException(Messages.FACTORY_CLASS_NEEDS_FACTORY_METHOD.format(nav().getClassName(nav().asDecl(fClass))),this));
  }
  return factoryMethod != null;
}",0.9593625498007968
190617,"/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(XmlAccessType at){
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  C c=clazz;
  do {
    collectGetterSetters(clazz,getters,setters);
    c=nav().getSuperClass(c);
  }
 while (shouldRecurseSuperClass(c));
  Set<String> complete=new TreeSet<String>(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,new MethodLocatable<M>(this,getter,nav())) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,new MethodLocatable<M>(this,setter,nav())) : EMPTY_ANNOTATIONS;
    boolean hasAnnotation=hasJAXBAnnotation(ga) || hasJAXBAnnotation(sa);
    boolean isOverriding=false;
    if (!hasAnnotation) {
      isOverriding=(getter != null && nav().isOverriding(getter,c)) && (setter != null && nav().isOverriding(setter,c));
    }
    if ((at == XmlAccessType.PROPERTY && !isOverriding) || (at == XmlAccessType.PUBLIC_MEMBER && isConsideredPublic(getter) && isConsideredPublic(setter) && !isOverriding) || hasAnnotation) {
      if (getter != null && setter != null && !nav().getReturnType(getter).equals(nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r,false);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}","/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(XmlAccessType at){
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  C c=clazz;
  do {
    collectGetterSetters(clazz,getters,setters);
    c=nav().getSuperClass(c);
  }
 while (shouldRecurseSuperClass(c));
  Set<String> complete=new TreeSet<String>(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,new MethodLocatable<M>(this,getter,nav())) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,new MethodLocatable<M>(this,setter,nav())) : EMPTY_ANNOTATIONS;
    boolean hasAnnotation=hasJAXBAnnotation(ga) || hasJAXBAnnotation(sa);
    boolean isOverriding=false;
    if (!hasAnnotation) {
      isOverriding=(getter != null && nav().isOverriding(getter,c)) && (setter != null && nav().isOverriding(setter,c));
    }
    if ((at == XmlAccessType.PROPERTY && !isOverriding) || (at == XmlAccessType.PUBLIC_MEMBER && isConsideredPublic(getter) && isConsideredPublic(setter) && !isOverriding) || hasAnnotation) {
      if (getter != null && setter != null && !nav().isSameType(nav().getReturnType(getter),nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r,false);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}",0.9876051350154936
190618,"private void collectGetterSetters(C c,Map<String,M> getters,Map<String,M> setters){
  C sc=nav().getSuperClass(c);
  if (shouldRecurseSuperClass(sc))   collectGetterSetters(sc,getters,setters);
  Collection<? extends M> methods=nav().getDeclaredMethods(c);
  Map<String,List<M>> allSetters=new LinkedHashMap<String,List<M>>();
  for (  M method : methods) {
    boolean used=false;
    if (nav().isBridgeMethod(method))     continue;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null && arity == 0) {
      getters.put(propName,method);
      used=true;
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null && arity == 1) {
      List<M> propSetters=allSetters.get(propName);
      if (null == propSetters) {
        propSetters=new ArrayList<M>();
        allSetters.put(propName,propSetters);
      }
      propSetters.add(method);
      used=true;
    }
    if (!used)     ensureNoAnnotation(method);
  }
  for (  Map.Entry<String,M> entry : getters.entrySet()) {
    String propName=entry.getKey();
    M getter=entry.getValue();
    List<M> propSetters=allSetters.remove(propName);
    if (null == propSetters) {
      continue;
    }
    T getterType=nav().getReturnType(getter);
    for (    M setter : propSetters) {
      T setterType=nav().getMethodParameters(setter)[0];
      if (setterType.equals(getterType)) {
        setters.put(propName,setter);
        break;
      }
    }
  }
  for (  Map.Entry<String,List<M>> e : allSetters.entrySet()) {
    setters.put(e.getKey(),e.getValue().get(0));
  }
}","private void collectGetterSetters(C c,Map<String,M> getters,Map<String,M> setters){
  C sc=nav().getSuperClass(c);
  if (shouldRecurseSuperClass(sc))   collectGetterSetters(sc,getters,setters);
  Collection<? extends M> methods=nav().getDeclaredMethods(c);
  Map<String,List<M>> allSetters=new LinkedHashMap<String,List<M>>();
  for (  M method : methods) {
    boolean used=false;
    if (nav().isBridgeMethod(method))     continue;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null && arity == 0) {
      getters.put(propName,method);
      used=true;
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null && arity == 1) {
      List<M> propSetters=allSetters.get(propName);
      if (null == propSetters) {
        propSetters=new ArrayList<M>();
        allSetters.put(propName,propSetters);
      }
      propSetters.add(method);
      used=true;
    }
    if (!used)     ensureNoAnnotation(method);
  }
  for (  Map.Entry<String,M> entry : getters.entrySet()) {
    String propName=entry.getKey();
    M getter=entry.getValue();
    List<M> propSetters=allSetters.remove(propName);
    if (null == propSetters) {
      continue;
    }
    T getterType=nav().getReturnType(getter);
    for (    M setter : propSetters) {
      T setterType=nav().getMethodParameters(setter)[0];
      if (nav().isSameType(setterType,getterType)) {
        setters.put(propName,setter);
        break;
      }
    }
  }
  for (  Map.Entry<String,List<M>> e : allSetters.entrySet()) {
    setters.put(e.getKey(),e.getValue().get(0));
  }
}",0.9892897406989852
190619,"/** 
 * Build   {@link EnumConstant}s and discover/report any error in it.
 */
protected void calcConstants(){
  EnumConstantImpl<T,C,F,M> last=null;
  Collection<? extends F> fields=nav().getDeclaredFields(clazz);
  for (  F f : fields) {
    if (nav().getFieldType(f).equals(String.class)) {
      XmlSchemaType schemaTypeAnnotation=builder.reader.getFieldAnnotation(XmlSchemaType.class,f,this);
      if (schemaTypeAnnotation != null) {
        if (""String_Node_Str"".equals(schemaTypeAnnotation.name())) {
          tokenStringType=true;
          break;
        }
      }
      ;
    }
  }
  F[] constants=nav().getEnumConstants(clazz);
  for (int i=constants.length - 1; i >= 0; i--) {
    F constant=constants[i];
    String name=nav().getFieldName(constant);
    XmlEnumValue xev=builder.reader.getFieldAnnotation(XmlEnumValue.class,constant,this);
    String literal;
    if (xev == null)     literal=name;
 else     literal=xev.value();
    last=createEnumConstant(name,literal,constant,last);
  }
  this.firstConstant=last;
}","/** 
 * Build   {@link EnumConstant}s and discover/report any error in it.
 */
protected void calcConstants(){
  EnumConstantImpl<T,C,F,M> last=null;
  Collection<? extends F> fields=nav().getDeclaredFields(clazz);
  for (  F f : fields) {
    if (nav().isSameType(nav().getFieldType(f),nav().ref(String.class))) {
      XmlSchemaType schemaTypeAnnotation=builder.reader.getFieldAnnotation(XmlSchemaType.class,f,this);
      if (schemaTypeAnnotation != null) {
        if (""String_Node_Str"".equals(schemaTypeAnnotation.name())) {
          tokenStringType=true;
          break;
        }
      }
      ;
    }
  }
  F[] constants=nav().getEnumConstants(clazz);
  for (int i=constants.length - 1; i >= 0; i--) {
    F constant=constants[i];
    String name=nav().getFieldName(constant);
    XmlEnumValue xev=builder.reader.getFieldAnnotation(XmlEnumValue.class,constant,this);
    String literal;
    if (xev == null)     literal=name;
 else     literal=xev.value();
    last=createEnumConstant(name,literal,constant,last);
  }
  this.firstConstant=last;
}",0.7977044476327116
190620,"/** 
 * Checks if the given adapter is applicable to the declared property type.
 */
private boolean isApplicable(XmlJavaTypeAdapter jta,T declaredType){
  if (jta == null)   return false;
  T type=reader().getClassValue(jta,""String_Node_Str"");
  if (declaredType.equals(type))   return true;
  T ad=reader().getClassValue(jta,""String_Node_Str"");
  T ba=nav().getBaseClass(ad,nav().asDecl(XmlAdapter.class));
  if (!nav().isParameterizedType(ba))   return true;
  T inMemType=nav().getTypeArgument(ba,1);
  return nav().isSubClassOf(declaredType,inMemType);
}","/** 
 * Checks if the given adapter is applicable to the declared property type.
 */
private boolean isApplicable(XmlJavaTypeAdapter jta,T declaredType){
  if (jta == null)   return false;
  T type=reader().getClassValue(jta,""String_Node_Str"");
  if (nav().isSameType(declaredType,type))   return true;
  T ad=reader().getClassValue(jta,""String_Node_Str"");
  T ba=nav().getBaseClass(ad,nav().asDecl(XmlAdapter.class));
  if (!nav().isParameterizedType(ba))   return true;
  T inMemType=nav().getTypeArgument(ba,1);
  return nav().isSubClassOf(declaredType,inMemType);
}",0.9556737588652482
190621,"private ID calcId(){
  if (seed.hasAnnotation(XmlID.class)) {
    if (!getIndividualType().equals(nav().ref(String.class)))     parent.builder.reportError(new IllegalAnnotationException(Messages.ID_MUST_BE_STRING.format(getName()),seed));
    return ID.ID;
  }
 else   if (seed.hasAnnotation(XmlIDREF.class)) {
    return ID.IDREF;
  }
 else {
    return ID.NONE;
  }
}","private ID calcId(){
  if (seed.hasAnnotation(XmlID.class)) {
    if (!nav().isSameType(getIndividualType(),nav().ref(String.class)))     parent.builder.reportError(new IllegalAnnotationException(Messages.ID_MUST_BE_STRING.format(getName()),seed));
    return ID.ID;
  }
 else   if (seed.hasAnnotation(XmlIDREF.class)) {
    return ID.IDREF;
  }
 else {
    return ID.NONE;
  }
}",0.93048128342246
190622,"/** 
 * Compute   {@link #types}.
 * @param last if true, every  {@link XmlElementRef} must yield at least one type.
 */
private void calcTypes(boolean last){
  XmlElementRef[] ann;
  types=new LinkedHashSet<Element<T,C>>();
  XmlElementRefs refs=seed.readAnnotation(XmlElementRefs.class);
  XmlElementRef ref=seed.readAnnotation(XmlElementRef.class);
  if (refs != null && ref != null) {
    parent.builder.reportError(new IllegalAnnotationException(Messages.MUTUALLY_EXCLUSIVE_ANNOTATIONS.format(nav().getClassName(parent.getClazz()) + '#' + seed.getName(),ref.annotationType().getName(),refs.annotationType().getName()),ref,refs));
  }
  if (refs != null)   ann=refs.value();
 else {
    if (ref != null)     ann=new XmlElementRef[]{ref};
 else     ann=null;
  }
  isRequired=!isCollection();
  if (ann != null) {
    Navigator<T,C,F,M> nav=nav();
    AnnotationReader<T,C,F,M> reader=reader();
    final T defaultType=nav.ref(XmlElementRef.DEFAULT.class);
    final C je=nav.asDecl(JAXBElement.class);
    for (    XmlElementRef r : ann) {
      boolean yield;
      T type=reader.getClassValue(r,""String_Node_Str"");
      if (type.equals(defaultType))       type=nav.erasure(getIndividualType());
      if (nav.getBaseClass(type,je) != null)       yield=addGenericElement(r);
 else       yield=addAllSubtypes(type);
      if (isRequired && !isRequired(r))       isRequired=false;
      if (last && !yield) {
        if (type.equals(nav.ref(JAXBElement.class))) {
          parent.builder.reportError(new IllegalAnnotationException(Messages.NO_XML_ELEMENT_DECL.format(getEffectiveNamespaceFor(r),r.name()),this));
        }
 else {
          parent.builder.reportError(new IllegalAnnotationException(Messages.INVALID_XML_ELEMENT_REF.format(type),this));
        }
        return;
      }
    }
  }
  Iterator<PropertyInfoImpl<T,C,F,M>> i=subTypes.iterator();
  while (i.hasNext()) {
    ReferencePropertyInfoImpl<T,C,F,M> info=(ReferencePropertyInfoImpl<T,C,F,M>)i.next();
    PropertySeed sd=info.seed;
    refs=sd.readAnnotation(XmlElementRefs.class);
    ref=sd.readAnnotation(XmlElementRef.class);
    if (refs != null && ref != null) {
      parent.builder.reportError(new IllegalAnnotationException(Messages.MUTUALLY_EXCLUSIVE_ANNOTATIONS.format(nav().getClassName(parent.getClazz()) + '#' + seed.getName(),ref.annotationType().getName(),refs.annotationType().getName()),ref,refs));
    }
    if (refs != null) {
      ann=refs.value();
    }
 else {
      if (ref != null) {
        ann=new XmlElementRef[]{ref};
      }
 else {
        ann=null;
      }
    }
    if (ann != null) {
      Navigator<T,C,F,M> nav=nav();
      AnnotationReader<T,C,F,M> reader=reader();
      final T defaultType=nav.ref(XmlElementRef.DEFAULT.class);
      final C je=nav.asDecl(JAXBElement.class);
      for (      XmlElementRef r : ann) {
        boolean yield;
        T type=reader.getClassValue(r,""String_Node_Str"");
        if (type.equals(defaultType)) {
          type=nav.erasure(getIndividualType());
        }
        if (nav.getBaseClass(type,je) != null) {
          yield=addGenericElement(r,info);
        }
 else {
          yield=addAllSubtypes(type);
        }
        if (last && !yield) {
          if (type.equals(nav.ref(JAXBElement.class))) {
            parent.builder.reportError(new IllegalAnnotationException(Messages.NO_XML_ELEMENT_DECL.format(getEffectiveNamespaceFor(r),r.name()),this));
          }
 else {
            parent.builder.reportError(new IllegalAnnotationException(Messages.INVALID_XML_ELEMENT_REF.format(),this));
          }
          return;
        }
      }
    }
  }
  types=Collections.unmodifiableSet(types);
}","/** 
 * Compute   {@link #types}.
 * @param last if true, every  {@link XmlElementRef} must yield at least one type.
 */
private void calcTypes(boolean last){
  XmlElementRef[] ann;
  types=new LinkedHashSet<Element<T,C>>();
  XmlElementRefs refs=seed.readAnnotation(XmlElementRefs.class);
  XmlElementRef ref=seed.readAnnotation(XmlElementRef.class);
  if (refs != null && ref != null) {
    parent.builder.reportError(new IllegalAnnotationException(Messages.MUTUALLY_EXCLUSIVE_ANNOTATIONS.format(nav().getClassName(parent.getClazz()) + '#' + seed.getName(),ref.annotationType().getName(),refs.annotationType().getName()),ref,refs));
  }
  if (refs != null)   ann=refs.value();
 else {
    if (ref != null)     ann=new XmlElementRef[]{ref};
 else     ann=null;
  }
  isRequired=!isCollection();
  if (ann != null) {
    Navigator<T,C,F,M> nav=nav();
    AnnotationReader<T,C,F,M> reader=reader();
    final T defaultType=nav.ref(XmlElementRef.DEFAULT.class);
    final C je=nav.asDecl(JAXBElement.class);
    for (    XmlElementRef r : ann) {
      boolean yield;
      T type=reader.getClassValue(r,""String_Node_Str"");
      if (nav().isSameType(type,defaultType))       type=nav.erasure(getIndividualType());
      if (nav.getBaseClass(type,je) != null)       yield=addGenericElement(r);
 else       yield=addAllSubtypes(type);
      if (isRequired && !isRequired(r))       isRequired=false;
      if (last && !yield) {
        if (nav().isSameType(type,nav.ref(JAXBElement.class))) {
          parent.builder.reportError(new IllegalAnnotationException(Messages.NO_XML_ELEMENT_DECL.format(getEffectiveNamespaceFor(r),r.name()),this));
        }
 else {
          parent.builder.reportError(new IllegalAnnotationException(Messages.INVALID_XML_ELEMENT_REF.format(type),this));
        }
        return;
      }
    }
  }
  Iterator<PropertyInfoImpl<T,C,F,M>> i=subTypes.iterator();
  while (i.hasNext()) {
    ReferencePropertyInfoImpl<T,C,F,M> info=(ReferencePropertyInfoImpl<T,C,F,M>)i.next();
    PropertySeed sd=info.seed;
    refs=sd.readAnnotation(XmlElementRefs.class);
    ref=sd.readAnnotation(XmlElementRef.class);
    if (refs != null && ref != null) {
      parent.builder.reportError(new IllegalAnnotationException(Messages.MUTUALLY_EXCLUSIVE_ANNOTATIONS.format(nav().getClassName(parent.getClazz()) + '#' + seed.getName(),ref.annotationType().getName(),refs.annotationType().getName()),ref,refs));
    }
    if (refs != null) {
      ann=refs.value();
    }
 else {
      if (ref != null) {
        ann=new XmlElementRef[]{ref};
      }
 else {
        ann=null;
      }
    }
    if (ann != null) {
      Navigator<T,C,F,M> nav=nav();
      AnnotationReader<T,C,F,M> reader=reader();
      final T defaultType=nav.ref(XmlElementRef.DEFAULT.class);
      final C je=nav.asDecl(JAXBElement.class);
      for (      XmlElementRef r : ann) {
        boolean yield;
        T type=reader.getClassValue(r,""String_Node_Str"");
        if (nav().isSameType(type,defaultType)) {
          type=nav.erasure(getIndividualType());
        }
        if (nav.getBaseClass(type,je) != null) {
          yield=addGenericElement(r,info);
        }
 else {
          yield=addAllSubtypes(type);
        }
        if (last && !yield) {
          if (nav().isSameType(type,nav.ref(JAXBElement.class))) {
            parent.builder.reportError(new IllegalAnnotationException(Messages.NO_XML_ELEMENT_DECL.format(getEffectiveNamespaceFor(r),r.name()),this));
          }
 else {
            parent.builder.reportError(new IllegalAnnotationException(Messages.INVALID_XML_ELEMENT_REF.format(),this));
          }
          return;
        }
      }
    }
  }
  types=Collections.unmodifiableSet(types);
}",0.9814915623298855
190623,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  if (processingEnv.getOptions().containsKey(Const.CONFIG_FILE_OPTION.getValue())) {
    String value=processingEnv.getOptions().get(Const.CONFIG_FILE_OPTION.getValue());
    StringTokenizer st=new StringTokenizer(value,File.pathSeparator);
    if (!st.hasMoreTokens()) {
      errorListener.error(null,Messages.OPERAND_MISSING.format(Const.CONFIG_FILE_OPTION.getValue()));
      return true;
    }
    while (st.hasMoreTokens()) {
      File configFile=new File(st.nextToken());
      if (!configFile.exists()) {
        errorListener.error(null,Messages.NON_EXISTENT_FILE.format());
        continue;
      }
      try {
        ConfigReader configReader=new ConfigReader(processingEnv,(Collection<? extends TypeElement>)roundEnv.getRootElements(),configFile,errorListener);
        Collection<Reference> classesToBeIncluded=configReader.getClassesToBeIncluded();
        J2SJAXBModel model=XJC.createJavaCompiler().bind(classesToBeIncluded,Collections.<QName,Reference>emptyMap(),null,processingEnv);
        SchemaOutputResolver schemaOutputResolver=configReader.getSchemaOutputResolver();
        model.generateSchema(schemaOutputResolver,errorListener);
      }
 catch (      IOException e) {
        errorListener.error(e.getMessage(),e);
      }
catch (      SAXException e) {
      }
    }
  }
  return true;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  if (processingEnv.getOptions().containsKey(Const.CONFIG_FILE_OPTION.getValue())) {
    String value=processingEnv.getOptions().get(Const.CONFIG_FILE_OPTION.getValue());
    StringTokenizer st=new StringTokenizer(value,File.pathSeparator);
    if (!st.hasMoreTokens()) {
      errorListener.error(null,Messages.OPERAND_MISSING.format(Const.CONFIG_FILE_OPTION.getValue()));
      return true;
    }
    while (st.hasMoreTokens()) {
      File configFile=new File(st.nextToken());
      if (!configFile.exists()) {
        errorListener.error(null,Messages.NON_EXISTENT_FILE.format());
        continue;
      }
      try {
        Collection<TypeElement> rootElements=new ArrayList<TypeElement>();
        filterClass(rootElements,roundEnv.getRootElements());
        ConfigReader configReader=new ConfigReader(processingEnv,rootElements,configFile,errorListener);
        Collection<Reference> classesToBeIncluded=configReader.getClassesToBeIncluded();
        J2SJAXBModel model=XJC.createJavaCompiler().bind(classesToBeIncluded,Collections.<QName,Reference>emptyMap(),null,processingEnv);
        SchemaOutputResolver schemaOutputResolver=configReader.getSchemaOutputResolver();
        model.generateSchema(schemaOutputResolver,errorListener);
      }
 catch (      IOException e) {
        errorListener.error(e.getMessage(),e);
      }
catch (      SAXException e) {
      }
    }
  }
  return true;
}",0.9282296650717704
190624,"@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(processingEnv);
  List<Reference> decls=new ArrayList<Reference>();
  for (  Element element : roundEnv.getRootElements()) {
    if (element.getKind().equals(ElementKind.CLASS))     decls.add(new Reference((TypeElement)element,processingEnv));
  }
  J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,processingEnv);
  if (model == null)   return false;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",suggestedFileName).openOutputStream();
          file=file.getAbsoluteFile();
        }
        StreamResult ss=new StreamResult(out);
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
        ss.setSystemId(file.toURL().toExternalForm());
        return ss;
      }
    }
,errorListener);
    if (episodeFile != null) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + episodeFile);
      model.generateEpisodeFile(new StreamResult(episodeFile));
    }
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
  return false;
}","@Override public boolean process(Set<? extends TypeElement> annotations,RoundEnvironment roundEnv){
  final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(processingEnv);
  List<Reference> classes=new ArrayList<Reference>();
  filterClass(classes,roundEnv.getRootElements());
  J2SJAXBModel model=XJC.createJavaCompiler().bind(classes,Collections.<QName,Reference>emptyMap(),null,processingEnv);
  if (model == null)   return false;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT,""String_Node_Str"",suggestedFileName).openOutputStream();
          file=file.getAbsoluteFile();
        }
        StreamResult ss=new StreamResult(out);
        processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + file);
        ss.setSystemId(file.toURL().toExternalForm());
        return ss;
      }
    }
,errorListener);
    if (episodeFile != null) {
      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,""String_Node_Str"" + episodeFile);
      model.generateEpisodeFile(new StreamResult(episodeFile));
    }
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
  return false;
}",0.9450421634195988
190625,"public void error(IllegalAnnotationException e){
  messager.printMessage(Diagnostic.Kind.ERROR,e.toString());
}","public void error(IllegalAnnotationException e){
  String error=e.toString();
  messager.printMessage(Diagnostic.Kind.ERROR,error);
  System.err.println(error);
}",0.7692307692307693
190626,"public ValidatorHandler newValidator(){
synchronized (this) {
    if (schema == null) {
      try {
        schema=SchemaFactory.newInstance(WellKnownNamespace.XML_SCHEMA).newSchema(source);
      }
 catch (      SAXException e) {
        throw new AssertionError(e);
      }
    }
  }
  ValidatorHandler handler=schema.newValidatorHandler();
  fixValidatorBug6246922(handler);
  return handler;
}","public ValidatorHandler newValidator(){
synchronized (this) {
    if (schema == null) {
      try {
        schema=SchemaFactory.newInstance(WellKnownNamespace.XML_SCHEMA).newSchema(source);
      }
 catch (      SAXException e) {
        throw new AssertionError(e);
      }
    }
  }
  ValidatorHandler handler=schema.newValidatorHandler();
  return handler;
}",0.91699604743083
190627,"public XmlOutput createWriter(OutputStream os,String encoding) throws JAXBException {
  if (encoding.equals(""String_Node_Str"")) {
    Encoded[] table=context.getUTF8NameTable();
    final UTF8XmlOutput out;
    if (isFormattedOutput())     out=new IndentingUTF8XmlOutput(os,indent,table);
 else {
      if (c14nSupport)       out=new C14nXmlOutput(os,table,context.c14nSupport);
 else       out=new UTF8XmlOutput(os,table);
    }
    if (header != null)     out.setHeader(header);
    return out;
  }
  try {
    return createWriter(new OutputStreamWriter(os,getJavaEncoding(encoding)),encoding);
  }
 catch (  UnsupportedEncodingException e) {
    throw new MarshalException(Messages.UNSUPPORTED_ENCODING.format(encoding),e);
  }
}","public XmlOutput createWriter(OutputStream os,String encoding) throws JAXBException {
  if (encoding.equals(""String_Node_Str"")) {
    Encoded[] table=context.getUTF8NameTable();
    final UTF8XmlOutput out;
    if (isFormattedOutput())     out=new IndentingUTF8XmlOutput(os,indent,table,escapeHandler);
 else {
      if (c14nSupport)       out=new C14nXmlOutput(os,table,context.c14nSupport,escapeHandler);
 else       out=new UTF8XmlOutput(os,table,escapeHandler);
    }
    if (header != null)     out.setHeader(header);
    return out;
  }
  try {
    return createWriter(new OutputStreamWriter(os,getJavaEncoding(encoding)),encoding);
  }
 catch (  UnsupportedEncodingException e) {
    throw new MarshalException(Messages.UNSUPPORTED_ENCODING.format(encoding),e);
  }
}",0.9721115537848606
190628,"public C14nXmlOutput(OutputStream out,Encoded[] localNames,boolean namedAttributesAreOrdered){
  super(out,localNames);
  this.namedAttributesAreOrdered=namedAttributesAreOrdered;
  for (int i=0; i < staticAttributes.length; i++)   staticAttributes[i]=new StaticAttribute();
}","public C14nXmlOutput(OutputStream out,Encoded[] localNames,boolean namedAttributesAreOrdered,CharacterEscapeHandler escapeHandler){
  super(out,localNames,escapeHandler);
  this.namedAttributesAreOrdered=namedAttributesAreOrdered;
  for (int i=0; i < staticAttributes.length; i++)   staticAttributes[i]=new StaticAttribute();
}",0.9154228855721394
190629,"/** 
 * @param indentStr set to null for no indentation and optimal performance. otherwise the string is used for indentation.
 */
public IndentingUTF8XmlOutput(OutputStream out,String indentStr,Encoded[] localNames){
  super(out,localNames);
  if (indentStr != null) {
    Encoded e=new Encoded(indentStr);
    indent8=new Encoded();
    indent8.ensureSize(e.len * 8);
    unitLen=e.len;
    for (int i=0; i < 8; i++)     System.arraycopy(e.buf,0,indent8.buf,unitLen * i,unitLen);
  }
 else {
    this.indent8=null;
    this.unitLen=0;
  }
}","/** 
 * @param indentStr set to null for no indentation and optimal performance. otherwise the string is used for indentation.
 */
public IndentingUTF8XmlOutput(OutputStream out,String indentStr,Encoded[] localNames,CharacterEscapeHandler escapeHandler){
  super(out,localNames,escapeHandler);
  if (indentStr != null) {
    Encoded e=new Encoded(indentStr);
    indent8=new Encoded();
    indent8.ensureSize(e.len * 8);
    unitLen=e.len;
    for (int i=0; i < 8; i++)     System.arraycopy(e.buf,0,indent8.buf,unitLen * i,unitLen);
  }
 else {
    this.indent8=null;
    this.unitLen=0;
  }
}",0.9550660792951542
190630,"/** 
 * @param localNames local names encoded in UTF-8.
 */
public UTF8XmlOutput(OutputStream out,Encoded[] localNames){
  this.out=out;
  this.localNames=localNames;
  for (int i=0; i < prefixes.length; i++)   prefixes[i]=new Encoded();
}","/** 
 * @param localNames local names encoded in UTF-8.
 */
public UTF8XmlOutput(OutputStream out,Encoded[] localNames,CharacterEscapeHandler escapeHandler){
  this.out=out;
  this.localNames=localNames;
  for (int i=0; i < prefixes.length; i++)   prefixes[i]=new Encoded();
  this.escapeHandler=escapeHandler;
}",0.867513611615245
190631,"private void doText(String value,boolean isAttribute) throws IOException {
  textBuffer.setEscape(value,isAttribute);
  textBuffer.write(this);
}","private void doText(String value,boolean isAttribute) throws IOException {
  if (escapeHandler != null) {
    StringWriter sw=new StringWriter();
    escapeHandler.escape(value.toCharArray(),0,value.length(),isAttribute,sw);
    textBuffer.setEscape(sw.toString(),isAttribute);
  }
 else {
    textBuffer.setEscape(value,isAttribute);
  }
  textBuffer.write(this);
}",0.4892367906066536
190632,"@Override public void childElement(UnmarshallingContext.State state,TagName arg) throws SAXException {
  ChildLoader child=childUnmarshallers.get(arg.uri,arg.local);
  if ((child == null) && (arg.uri.compareTo(""String_Node_Str"") != 0))   child=childUnmarshallers.get(""String_Node_Str"",arg.local);
  if (child == null) {
    child=catchAll;
    if (child == null) {
      super.childElement(state,arg);
      return;
    }
  }
  state.loader=child.loader;
  state.receiver=child.receiver;
}","@Override public void childElement(UnmarshallingContext.State state,TagName arg) throws SAXException {
  ChildLoader child=childUnmarshallers.get(arg.uri,arg.local);
  if (child == null) {
    child=catchAll;
    if (child == null) {
      super.childElement(state,arg);
      return;
    }
  }
  state.loader=child.loader;
  state.receiver=child.receiver;
}",0.6304604486422668
190633,"public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=(size - 1); i >= 0; i--) {
    if (nsUris[i].compareTo(uri) == 0)     return i;
  }
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}","public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=(size - 1); i >= 0; i--) {
    if ((nsUris[i].compareTo(uri) == 0) && (!prefixes[i].equals(""String_Node_Str"")))     return i;
  }
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}",0.7107438016528925
190634,"public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}","public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=(size - 1); i >= 0; i--) {
    if (nsUris[i].compareTo(uri) == 0)     return i;
  }
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}",0.7238421955403087
190635,"public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=(size - 1); i >= 0; i--) {
    if ((nsUris[i].compareTo(uri) == 0) && (!prefixes[i].equals(""String_Node_Str"")))     return i;
  }
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}","public int force(@NotNull String uri,@NotNull String prefix){
  for (int i=(size - 1); i >= 0; i--) {
    if (nsUris[i].compareTo(uri) == 0) {
      prefixes[i]=prefix;
      return i;
    }
  }
  for (int i=size - 1; i >= 0; i--) {
    if (prefixes[i].equals(prefix)) {
      if (nsUris[i].equals(uri))       return i;
 else       break;
    }
  }
  return put(uri,prefix);
}",0.6561679790026247
190636,"/** 
 * Creates a   {@link Transducer} given a reference.Used to implement  {@link RuntimeNonElementRef#getTransducer()}. Shouldn't be called from anywhere else. TODO: this is not the proper place for this class to be in.
 */
public static Transducer createTransducer(RuntimeNonElementRef ref){
  Transducer t=ref.getTarget().getTransducer();
  RuntimePropertyInfo src=ref.getSource();
  ID id=src.id();
  if (id == ID.IDREF)   return RuntimeBuiltinLeafInfoImpl.STRING;
  if (id == ID.ID)   t=new IDTransducerImpl(t);
  MimeType emt=src.getExpectedMimeType();
  if (emt != null)   t=new MimeTypedTransducer(t,emt);
  if (src.inlineBinaryData())   t=new InlineBinaryTransducer(t);
  if (src.getSchemaType() != null)   t=new SchemaTypeTransducer(t,src.getSchemaType());
  return t;
}","/** 
 * Creates a   {@link Transducer} given a reference.Used to implement  {@link RuntimeNonElementRef#getTransducer()}. Shouldn't be called from anywhere else. TODO: this is not the proper place for this class to be in.
 */
public static Transducer createTransducer(RuntimeNonElementRef ref){
  Transducer t=ref.getTarget().getTransducer();
  RuntimePropertyInfo src=ref.getSource();
  ID id=src.id();
  if (id == ID.IDREF)   return RuntimeBuiltinLeafInfoImpl.STRING;
  if (id == ID.ID)   t=new IDTransducerImpl(t);
  MimeType emt=src.getExpectedMimeType();
  if (emt != null)   t=new MimeTypedTransducer(t,emt);
  if (src.inlineBinaryData())   t=new InlineBinaryTransducer(t);
  if (src.getSchemaType() != null) {
    if (src.getSchemaType().equals(createXSSimpleType())) {
      return RuntimeBuiltinLeafInfoImpl.STRING;
    }
    t=new SchemaTypeTransducer(t,src.getSchemaType());
  }
  return t;
}",0.9156769596199524
190637,"public void fromRawValue(JBlock block,String uniqueName,JExpression $var){
  if (getOptions().target.isLaterThan(SpecVersion.V2_2)) {
    block.invoke($target,$setAll).arg($var);
  }
 else {
    block.invoke($target,$setAll).arg($var.invoke(""String_Node_Str"").arg(JExpr.newArray(exposedType,$var.invoke(""String_Node_Str""))));
  }
}","public void fromRawValue(JBlock block,String uniqueName,JExpression $var){
  block.invoke($target,$setAll).arg($var.invoke(""String_Node_Str"").arg(JExpr.newArray(exposedType,$var.invoke(""String_Node_Str""))));
}",0.774074074074074
190638,"ArrayField(ClassOutlineImpl context,CPropertyInfo prop){
  super(context,prop,false);
  if (getOptions().target.isLaterThan(SpecVersion.V2_2)) {
    generateArray();
  }
 else {
    generate();
  }
}","ArrayField(ClassOutlineImpl context,CPropertyInfo prop){
  super(context,prop,false);
  generate();
}",0.6733333333333333
190639,"public void generateAccessors(){
  MethodWriter writer=outline.createMethodWriter();
  Accessor acc=create(JExpr._this());
  JVar $idx, $value;
  JBlock body;
  if (getOptions().target.isLaterThan(SpecVersion.V2_2)) {
    $getAll=writer.declareMethod(exposedType.array(),""String_Node_Str"" + prop.getName(true));
    writer.javadoc().append(prop.javadoc);
    body=$getAll.body();
    body._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.newArray(exposedType,0));
    JVar var=body.decl(exposedType.array(),""String_Node_Str"",JExpr.newArray(implType,acc.ref(true).ref(""String_Node_Str"")));
    body.add(codeModel.ref(System.class).staticInvoke(""String_Node_Str"").arg(acc.ref(true)).arg(JExpr.lit(0)).arg(var).arg(JExpr.lit(0)).arg(acc.ref(true).ref(""String_Node_Str"")));
    body._return(JExpr.direct(""String_Node_Str""));
    List<Object> returnTypes=listPossibleTypes(prop);
    writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
    JMethod $get=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
    $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
    $get.body()._if(acc.ref(true).eq(JExpr._null()))._then()._throw(JExpr._new(codeModel.ref(IndexOutOfBoundsException.class)));
    writer.javadoc().append(prop.javadoc);
    $get.body()._return(acc.ref(true).component($idx));
    writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
    JMethod $getLength=writer.declareMethod(codeModel.INT,""String_Node_Str"" + prop.getName(true) + ""String_Node_Str"");
    $getLength.body()._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.lit(0));
    $getLength.body()._return(acc.ref(true).ref(""String_Node_Str""));
    $setAll=writer.declareMethod(codeModel.VOID,""String_Node_Str"" + prop.getName(true));
    writer.javadoc().append(prop.javadoc);
    $value=writer.addParameter(exposedType.array(),""String_Node_Str"");
    JVar $len=$setAll.body().decl(codeModel.INT,""String_Node_Str"",$value.ref(""String_Node_Str""));
    $setAll.body().assign((JAssignmentTarget)acc.ref(true),JExpr.newArray(codeModel.ref(JAXBElement.class),$len));
    JForLoop _for=$setAll.body()._for();
    JVar $i=_for.init(codeModel.INT,""String_Node_Str"",JExpr.lit(0));
    _for.test(JOp.lt($i,$len));
    _for.update($i.incr());
    _for.body().assign(acc.ref(true).component($i),castToImplType(acc.box($value.component($i))));
    writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
    JMethod $set=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
    $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
    $value=writer.addParameter(exposedType,""String_Node_Str"");
    writer.javadoc().append(prop.javadoc);
    body=$set.body();
    body._return(JExpr.assign(acc.ref(true).component($idx),castToImplType(acc.box($value))));
    writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
  }
 else {
    JType arrayType=exposedType.array();
    $getAll=writer.declareMethod(exposedType.array(),""String_Node_Str"" + prop.getName(true));
    writer.javadoc().append(prop.javadoc);
    body=$getAll.body();
    body._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.newArray(exposedType,0));
    if (primitiveType == null) {
      body._return(JExpr.cast(arrayType,acc.ref(true).invoke(""String_Node_Str"").arg(JExpr.newArray(implType,acc.ref(true).invoke(""String_Node_Str"")))));
    }
 else {
      JVar $r=body.decl(exposedType.array(),""String_Node_Str"",JExpr.newArray(exposedType,acc.ref(true).invoke(""String_Node_Str"")));
      JForLoop loop=body._for();
      JVar $i=loop.init(codeModel.INT,""String_Node_Str"",JExpr.lit(0));
      loop.test($i.lt($r.ref(""String_Node_Str"")));
      loop.update($i.incr());
      loop.body().assign($r.component($i),primitiveType.unwrap(acc.ref(true).invoke(""String_Node_Str"").arg($i)));
      body._return($r);
    }
    List<Object> returnTypes=listPossibleTypes(prop);
    writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
    JMethod $get=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
    $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
    $get.body()._if(acc.ref(true).eq(JExpr._null()))._then()._throw(JExpr._new(codeModel.ref(IndexOutOfBoundsException.class)));
    writer.javadoc().append(prop.javadoc);
    $get.body()._return(acc.unbox(acc.ref(true).invoke(""String_Node_Str"").arg($idx)));
    writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
    JMethod $getLength=writer.declareMethod(codeModel.INT,""String_Node_Str"" + prop.getName(true) + ""String_Node_Str"");
    $getLength.body()._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.lit(0));
    $getLength.body()._return(acc.ref(true).invoke(""String_Node_Str""));
    $setAll=writer.declareMethod(codeModel.VOID,""String_Node_Str"" + prop.getName(true));
    writer.javadoc().append(prop.javadoc);
    $value=writer.addParameter(exposedType.array(),""String_Node_Str"");
    $setAll.body().invoke(acc.ref(false),""String_Node_Str"");
    JVar $len=$setAll.body().decl(codeModel.INT,""String_Node_Str"",$value.ref(""String_Node_Str""));
    JForLoop _for=$setAll.body()._for();
    JVar $i=_for.init(codeModel.INT,""String_Node_Str"",JExpr.lit(0));
    _for.test(JOp.lt($i,$len));
    _for.update($i.incr());
    _for.body().invoke(acc.ref(true),""String_Node_Str"").arg(castToImplType(acc.box($value.component($i))));
    writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
    JMethod $set=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
    $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
    $value=writer.addParameter(exposedType,""String_Node_Str"");
    writer.javadoc().append(prop.javadoc);
    body=$set.body();
    body._return(acc.unbox(acc.ref(true).invoke(""String_Node_Str"").arg($idx).arg(castToImplType(acc.box($value)))));
    writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
  }
}","public void generateAccessors(){
  MethodWriter writer=outline.createMethodWriter();
  Accessor acc=create(JExpr._this());
  JVar $idx, $value;
  JBlock body;
  JType arrayType=exposedType.array();
  $getAll=writer.declareMethod(exposedType.array(),""String_Node_Str"" + prop.getName(true));
  writer.javadoc().append(prop.javadoc);
  body=$getAll.body();
  body._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.newArray(exposedType,0));
  if (primitiveType == null) {
    body._return(JExpr.cast(arrayType,acc.ref(true).invoke(""String_Node_Str"").arg(JExpr.newArray(implType,acc.ref(true).invoke(""String_Node_Str"")))));
  }
 else {
    JVar $r=body.decl(exposedType.array(),""String_Node_Str"",JExpr.newArray(exposedType,acc.ref(true).invoke(""String_Node_Str"")));
    JForLoop loop=body._for();
    JVar $i=loop.init(codeModel.INT,""String_Node_Str"",JExpr.lit(0));
    loop.test($i.lt($r.ref(""String_Node_Str"")));
    loop.update($i.incr());
    loop.body().assign($r.component($i),primitiveType.unwrap(acc.ref(true).invoke(""String_Node_Str"").arg($i)));
    body._return($r);
  }
  List<Object> returnTypes=listPossibleTypes(prop);
  writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
  JMethod $get=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
  $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
  $get.body()._if(acc.ref(true).eq(JExpr._null()))._then()._throw(JExpr._new(codeModel.ref(IndexOutOfBoundsException.class)));
  writer.javadoc().append(prop.javadoc);
  $get.body()._return(acc.unbox(acc.ref(true).invoke(""String_Node_Str"").arg($idx)));
  writer.javadoc().addReturn().append(""String_Node_Str"").append(returnTypes);
  JMethod $getLength=writer.declareMethod(codeModel.INT,""String_Node_Str"" + prop.getName(true) + ""String_Node_Str"");
  $getLength.body()._if(acc.ref(true).eq(JExpr._null()))._then()._return(JExpr.lit(0));
  $getLength.body()._return(acc.ref(true).invoke(""String_Node_Str""));
  $setAll=writer.declareMethod(codeModel.VOID,""String_Node_Str"" + prop.getName(true));
  writer.javadoc().append(prop.javadoc);
  $value=writer.addParameter(exposedType.array(),""String_Node_Str"");
  $setAll.body().invoke(acc.ref(false),""String_Node_Str"");
  JVar $len=$setAll.body().decl(codeModel.INT,""String_Node_Str"",$value.ref(""String_Node_Str""));
  JForLoop _for=$setAll.body()._for();
  JVar $i=_for.init(codeModel.INT,""String_Node_Str"",JExpr.lit(0));
  _for.test(JOp.lt($i,$len));
  _for.update($i.incr());
  _for.body().invoke(acc.ref(true),""String_Node_Str"").arg(castToImplType(acc.box($value.component($i))));
  writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
  JMethod $set=writer.declareMethod(exposedType,""String_Node_Str"" + prop.getName(true));
  $idx=writer.addParameter(codeModel.INT,""String_Node_Str"");
  $value=writer.addParameter(exposedType,""String_Node_Str"");
  writer.javadoc().append(prop.javadoc);
  body=$set.body();
  body._return(acc.unbox(acc.ref(true).invoke(""String_Node_Str"").arg($idx).arg(castToImplType(acc.box($value)))));
  writer.javadoc().addParam($value).append(""String_Node_Str"").append(returnTypes);
}",0.513407455853499
190640,"public void toRawValue(JBlock block,JVar $var){
  if (getOptions().target.isLaterThan(SpecVersion.V2_2)) {
    block.assign($var,$target.invoke($getAll));
  }
 else {
    block.assign($var,codeModel.ref(Arrays.class).staticInvoke(""String_Node_Str"").arg($target.invoke($getAll)));
  }
}","public void toRawValue(JBlock block,JVar $var){
  block.assign($var,codeModel.ref(Arrays.class).staticInvoke(""String_Node_Str"").arg($target.invoke($getAll)));
}",0.7191011235955056
190641,"private boolean isRequired(XmlElementRef ref){
  if (!is2_2)   return false;
  try {
    return ref.required();
  }
 catch (  LinkageError e) {
    is2_2=false;
    throw new Error();
  }
}","/** 
 * Reads the value of   {@code XmlElementRef.required()}. If we are working as 2.1 RI, this defaults to true.
 */
private boolean isRequired(XmlElementRef ref){
  if (!is2_2)   return true;
  try {
    return ref.required();
  }
 catch (  LinkageError e) {
    is2_2=false;
    return true;
  }
}",0.5836734693877551
190642,"public void beginStartTag(int prefix,String localName) throws IOException {
  fiout.writeLowLevelTerminationAndMark();
  int type=EncodingConstants.ELEMENT;
  if (nsContext.getCurrent().count() > 0) {
    final NamespaceContextImpl.Element nse=nsContext.getCurrent();
    fiout.writeLowLevelStartNamespaces();
    for (int i=nse.count() - 1; i >= 0; i--) {
      final String uri=nse.getNsUri(i);
      if (uri.length() == 0 && nse.getBase() == 1)       continue;
      fiout.writeLowLevelNamespace(nse.getPrefix(i),uri);
    }
    fiout.writeLowLevelEndNamespaces();
    type=0;
  }
  final boolean isIndexed=fiout.writeLowLevelStartElement(type,nsContext.getPrefix(prefix),localName,nsContext.getNamespaceURI(prefix));
  if (!isIndexed)   tables.incrementMaxIndexValue();
}","@Override public void beginStartTag(int prefix,String localName) throws IOException {
  fiout.writeLowLevelTerminationAndMark();
  int type=EncodingConstants.ELEMENT;
  if (nsContext.getCurrent().count() > 0) {
    final NamespaceContextImpl.Element nse=nsContext.getCurrent();
    fiout.writeLowLevelStartNamespaces();
    for (int i=nse.count() - 1; i >= 0; i--) {
      final String uri=nse.getNsUri(i);
      if (uri.length() == 0 && nse.getBase() == 1)       continue;
      fiout.writeLowLevelNamespace(nse.getPrefix(i),uri);
    }
    fiout.writeLowLevelEndNamespaces();
    type=0;
  }
  final boolean isIndexed=fiout.writeLowLevelStartElement(type,nsContext.getPrefix(prefix),localName,nsContext.getNamespaceURI(prefix));
  if (!isIndexed)   tables.incrementMaxIndexValue();
}",0.9935897435897436
190643,"public void endStartTag() throws IOException {
  fiout.writeLowLevelEndStartElement();
}","@Override public void endStartTag() throws IOException {
  fiout.writeLowLevelEndStartElement();
}",0.946236559139785
190644,"public void endTag(int prefix,String localName) throws IOException {
  fiout.writeLowLevelEndElement();
}","@Override public void endTag(int prefix,String localName) throws IOException {
  fiout.writeLowLevelEndElement();
}",0.9545454545454546
190645,"public void startDocument(XMLSerializer serializer,boolean fragment,int[] nsUriIndex2prefixIndex,NamespaceContextImpl nsContext) throws IOException, SAXException, XMLStreamException {
  super.startDocument(serializer,fragment,nsUriIndex2prefixIndex,nsContext);
  if (fragment)   fiout.initiateLowLevelWriting();
}","@Override public void startDocument(XMLSerializer serializer,boolean fragment,int[] nsUriIndex2prefixIndex,NamespaceContextImpl nsContext) throws IOException, SAXException, XMLStreamException {
  super.startDocument(serializer,fragment,nsUriIndex2prefixIndex,nsContext);
  if (fragment)   fiout.initiateLowLevelWriting();
}",0.9842767295597484
190646,"public void endDocument(boolean fragment) throws IOException, SAXException, XMLStreamException {
  super.endDocument(fragment);
}","@Override public void endDocument(boolean fragment) throws IOException, SAXException, XMLStreamException {
  super.endDocument(fragment);
}",0.9626865671641792
190647,"public void beginStartTagWithNamespaces(Name name) throws IOException {
  final NamespaceContextImpl.Element nse=nsContext.getCurrent();
  fiout.writeLowLevelStartNamespaces();
  for (int i=nse.count() - 1; i >= 0; i--) {
    final String uri=nse.getNsUri(i);
    if (uri.length() == 0 && nse.getBase() == 1)     continue;
    fiout.writeLowLevelNamespace(nse.getPrefix(i),uri);
  }
  fiout.writeLowLevelEndNamespaces();
  final int qNameIndex=tables.elementIndexes[name.qNameIndex] - tables.indexOffset;
  if (qNameIndex >= 0) {
    fiout.writeLowLevelStartElementIndexed(0,qNameIndex);
  }
 else {
    tables.elementIndexes[name.qNameIndex]=fiout.getNextElementIndex() + tables.indexOffset;
    final int prefix=nsUriIndex2prefixIndex[name.nsUriIndex];
    writeLiteral(EncodingConstants.ELEMENT_LITERAL_QNAME_FLAG,name,nsContext.getPrefix(prefix),nsContext.getNamespaceURI(prefix));
  }
}","public void beginStartTagWithNamespaces(Name name) throws IOException {
  final NamespaceContextImpl.Element nse=nsContext.getCurrent();
  fiout.writeLowLevelStartNamespaces();
  for (int i=nse.count() - 1; i >= 0; i--) {
    final String uri=nse.getNsUri(i);
    if (uri.length() == 0 && nse.getBase() == 1)     continue;
    fiout.writeLowLevelNamespace(nse.getPrefix(i),uri);
  }
  fiout.writeLowLevelEndNamespaces();
  final int prefix=nsUriIndex2prefixIndex[name.nsUriIndex];
  final int qNameIndex=getMappedElementIndex(name,prefix) - tables.indexOffset;
  String prefix1S=nsContext.getPrefix(prefix);
  String uri1S=nsContext.getNamespaceURI(prefix);
  if (qNameIndex >= 0) {
    fiout.writeLowLevelStartElementIndexed(0,qNameIndex);
  }
 else {
    setMappedElementIndex(name,prefix,fiout.getNextElementIndex() + tables.indexOffset);
    writeLiteral(EncodingConstants.ELEMENT_LITERAL_QNAME_FLAG,name,nsContext.getPrefix(prefix),nsContext.getNamespaceURI(prefix));
  }
}",0.7693953986088817
190648,"public void attribute(int prefix,String localName,String value) throws IOException {
  fiout.writeLowLevelStartAttributes();
  boolean isIndexed;
  if (prefix == -1)   isIndexed=fiout.writeLowLevelAttribute(""String_Node_Str"",""String_Node_Str"",localName);
 else   isIndexed=fiout.writeLowLevelAttribute(nsContext.getPrefix(prefix),nsContext.getNamespaceURI(prefix),localName);
  if (!isIndexed)   tables.incrementMaxIndexValue();
  fiout.writeLowLevelAttributeValue(value);
}","@Override public void attribute(int prefix,String localName,String value) throws IOException {
  fiout.writeLowLevelStartAttributes();
  boolean isIndexed;
  if (prefix == -1)   isIndexed=fiout.writeLowLevelAttribute(""String_Node_Str"",""String_Node_Str"",localName);
 else   isIndexed=fiout.writeLowLevelAttribute(nsContext.getPrefix(prefix),nsContext.getNamespaceURI(prefix),localName);
  if (!isIndexed)   tables.incrementMaxIndexValue();
  fiout.writeLowLevelAttributeValue(value);
}",0.9895615866388308
190649,"public void text(String value,boolean needsSeparatingWhitespace) throws IOException {
  if (needsSeparatingWhitespace)   fiout.writeLowLevelText(""String_Node_Str"");
  fiout.writeLowLevelText(value);
}","@Override public void text(String value,boolean needsSeparatingWhitespace) throws IOException {
  if (needsSeparatingWhitespace)   fiout.writeLowLevelText(""String_Node_Str"");
  fiout.writeLowLevelText(value);
}",0.975609756097561
190650,"/** 
 * Create a new set of tables for a JAXB context. <p>
 * @param content the JAXB context.
 * @param initialIndexOffset the initial index offset to calculatethe maximum possible index
 */
TablesPerJAXBContext(JAXBContextImpl context,int initialIndexOffset){
  elementIndexes=new int[context.getNumberOfElementNames()];
  attributeIndexes=new int[context.getNumberOfAttributeNames()];
  localNameIndexes=new int[context.getNumberOfLocalNames()];
  indexOffset=1;
  maxIndex=initialIndexOffset + elementIndexes.length + attributeIndexes.length;
}","/** 
 * Create a new set of tables for a JAXB context. <p>
 * @param content the JAXB context.
 * @param initialIndexOffset the initial index offset to calculatethe maximum possible index
 */
TablesPerJAXBContext(JAXBContextImpl context,int initialIndexOffset){
  elementIndexes=new ElementIndexMap[context.getNumberOfElementNames()];
  attributeIndexes=new int[context.getNumberOfAttributeNames()];
  localNameIndexes=new int[context.getNumberOfLocalNames()];
  indexOffset=1;
  maxIndex=initialIndexOffset + elementIndexes.length + attributeIndexes.length;
}",0.983754512635379
190651,"public JAXBModelImpl bind(){
  SCDBasedBindingSet scdBasedBindingSet=forest.transform(opts.isExtensionMode());
  if (!NO_CORRECTNESS_CHECK) {
    SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    sf.setErrorHandler(new DowngradingErrorHandler(this));
    forest.weakSchemaCorrectnessCheck(sf);
    if (hadError)     return null;
  }
  JCodeModel codeModel=new JCodeModel();
  ModelLoader gl=new ModelLoader(opts,codeModel,this);
  try {
    XSSchemaSet result=gl.createXSOM(forest,scdBasedBindingSet);
    if (result == null)     return null;
    Model model=gl.annotateXMLSchema(result);
    if (model == null)     return null;
    if (hadError)     return null;
    Outline context=model.generateCode(opts,this);
    if (context == null)     return null;
    if (hadError)     return null;
    return new JAXBModelImpl(context);
  }
 catch (  SAXException e) {
    return null;
  }
}","public JAXBModelImpl bind(){
  for (  InputSource is : opts.getBindFiles())   parseSchema(is);
  SCDBasedBindingSet scdBasedBindingSet=forest.transform(opts.isExtensionMode());
  if (!NO_CORRECTNESS_CHECK) {
    SchemaFactory sf=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
    sf.setErrorHandler(new DowngradingErrorHandler(this));
    forest.weakSchemaCorrectnessCheck(sf);
    if (hadError)     return null;
  }
  JCodeModel codeModel=new JCodeModel();
  ModelLoader gl=new ModelLoader(opts,codeModel,this);
  try {
    XSSchemaSet result=gl.createXSOM(forest,scdBasedBindingSet);
    if (result == null)     return null;
    Model model=gl.annotateXMLSchema(result);
    if (model == null)     return null;
    if (hadError)     return null;
    Outline context=model.generateCode(opts,this);
    if (context == null)     return null;
    if (hadError)     return null;
    return new JAXBModelImpl(context);
  }
 catch (  SAXException e) {
    return null;
  }
}",0.9653361344537816
190652,"/** 
 * Returns a list of namespace URIs that should be declared at the root element. <p> By default, the JAXB RI 1.0.x produces namespace declarations only when they are necessary, only at where they are used. Because of this lack of look-ahead, sometimes the marshaller produces a lot of namespace declarations that look redundant to human eyes. For example, <pre><xmp> <?xml version=""1.0""?> <root> <ns1:child xmlns:ns1=""urn:foo""> ... </ns1:child> <ns2:child xmlns:ns2=""urn:foo""> ... </ns2:child> <ns3:child xmlns:ns3=""urn:foo""> ... </ns3:child> ... </root> <xmp></pre> <p> The JAXB RI 2.x mostly doesn't exhibit this behavior any more, as it declares all statically known namespace URIs (those URIs that are used as element/attribute names in JAXB annotations), but it may still declare additional namespaces in the middle of a document, for example when (i) a QName as an attribute/element value requires a new namespace URI, or (ii) DOM nodes as a portion of an object tree requires a new namespace URI. <p> If you know in advance that you are going to use a certain set of namespace URIs, you can override this method and have the marshaller declare those namespace URIs at the root element. <p> For example, by returning <code>new String[]{""urn:foo""}</code>, the marshaller will produce: <pre><xmp> <?xml version=""1.0""?> <root xmlns:ns1=""urn:foo""> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> ... </root> <xmp></pre> <p> To control prefixes assigned to those namespace URIs, use the  {@link #getPreferredPrefix(String,String,boolean)} method. 
 * @return A list of namespace URIs as an array of  {@link String}s. This method can return a length-zero array but not null. None of the array component can be null. To represent the empty namespace, use the empty string <code>""""</code>.
 * @since JAXB RI 1.0.2 
 */
public String[] getPreDeclaredNamespaceUris(){
  return EMPTY_STRING;
}","/** 
 * Returns a list of namespace URIs that should be declared at the root element. <p> By default, the JAXB RI 1.0.x produces namespace declarations only when they are necessary, only at where they are used. Because of this lack of look-ahead, sometimes the marshaller produces a lot of namespace declarations that look redundant to human eyes. For example, <pre><xmp> <?xml version=""1.0""?> <root> <ns1:child xmlns:ns1=""urn:foo""> ... </ns1:child> <ns2:child xmlns:ns2=""urn:foo""> ... </ns2:child> <ns3:child xmlns:ns3=""urn:foo""> ... </ns3:child> ... </root> <xmp></pre> <p> The JAXB RI 2.x mostly doesn't exhibit this behavior any more, as it declares all statically known namespace URIs (those URIs that are used as element/attribute names in JAXB annotations), but it may still declare additional namespaces in the middle of a document, for example when (i) a QName as an attribute/element value requires a new namespace URI, or (ii) DOM nodes as a portion of an object tree requires a new namespace URI. <p> If you know in advance that you are going to use a certain set of namespace URIs, you can override this method and have the marshaller declare those namespace URIs at the root element. <p> For example, by returning <code>new String[]{""urn:foo""}</code>, the marshaller will produce: <pre><xmp> <?xml version=""1.0""?> <root xmlns:ns1=""urn:foo""> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> ... </root> </xmp></pre> <p> To control prefixes assigned to those namespace URIs, use the  {@link #getPreferredPrefix(String,String,boolean)} method. 
 * @return A list of namespace URIs as an array of  {@link String}s. This method can return a length-zero array but not null. None of the array component can be null. To represent the empty namespace, use the empty string <code>""""</code>.
 * @since JAXB RI 1.0.2 
 */
public String[] getPreDeclaredNamespaceUris(){
  return EMPTY_STRING;
}",0.9997412677878396
190653,"/** 
 * Returns a list of namespace URIs that should be declared at the root element. <p> By default, the JAXB RI 1.0.x produces namespace declarations only when they are necessary, only at where they are used. Because of this lack of look-ahead, sometimes the marshaller produces a lot of namespace declarations that look redundant to human eyes. For example, <pre><xmp> <?xml version=""1.0""?> <root> <ns1:child xmlns:ns1=""urn:foo""> ... </ns1:child> <ns2:child xmlns:ns2=""urn:foo""> ... </ns2:child> <ns3:child xmlns:ns3=""urn:foo""> ... </ns3:child> ... </root> <xmp></pre> <p> The JAXB RI 2.x mostly doesn't exhibit this behavior any more, as it declares all statically known namespace URIs (those URIs that are used as element/attribute names in JAXB annotations), but it may still declare additional namespaces in the middle of a document, for example when (i) a QName as an attribute/element value requires a new namespace URI, or (ii) DOM nodes as a portion of an object tree requires a new namespace URI. <p> If you know in advance that you are going to use a certain set of namespace URIs, you can override this method and have the marshaller declare those namespace URIs at the root element. <p> For example, by returning <code>new String[]{""urn:foo""}</code>, the marshaller will produce: <pre><xmp> <?xml version=""1.0""?> <root xmlns:ns1=""urn:foo""> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> ... </root> </xmp></pre> <p> To control prefixes assigned to those namespace URIs, use the  {@link #getPreferredPrefix(String,String,boolean)} method. 
 * @return A list of namespace URIs as an array of  {@link String}s. This method can return a length-zero array but not null. None of the array component can be null. To represent the empty namespace, use the empty string <code>""""</code>.
 * @since JAXB RI 1.0.2 
 */
public String[] getPreDeclaredNamespaceUris(){
  return EMPTY_STRING;
}","/** 
 * Returns a list of namespace URIs that should be declared at the root element. <p> By default, the JAXB RI 1.0.x produces namespace declarations only when they are necessary, only at where they are used. Because of this lack of look-ahead, sometimes the marshaller produces a lot of namespace declarations that look redundant to human eyes. For example, <pre><xmp> <?xml version=""1.0""?> <root> <ns1:child xmlns:ns1=""urn:foo""> ... </ns1:child> <ns2:child xmlns:ns2=""urn:foo""> ... </ns2:child> <ns3:child xmlns:ns3=""urn:foo""> ... </ns3:child> ... </root> </xmp></pre> <p> The JAXB RI 2.x mostly doesn't exhibit this behavior any more, as it declares all statically known namespace URIs (those URIs that are used as element/attribute names in JAXB annotations), but it may still declare additional namespaces in the middle of a document, for example when (i) a QName as an attribute/element value requires a new namespace URI, or (ii) DOM nodes as a portion of an object tree requires a new namespace URI. <p> If you know in advance that you are going to use a certain set of namespace URIs, you can override this method and have the marshaller declare those namespace URIs at the root element. <p> For example, by returning <code>new String[]{""urn:foo""}</code>, the marshaller will produce: <pre><xmp> <?xml version=""1.0""?> <root xmlns:ns1=""urn:foo""> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> <ns1:child> ... </ns1:child> ... </root> </xmp></pre> <p> To control prefixes assigned to those namespace URIs, use the  {@link #getPreferredPrefix(String,String,boolean)} method. 
 * @return A list of namespace URIs as an array of  {@link String}s. This method can return a length-zero array but not null. None of the array component can be null. To represent the empty namespace, use the empty string <code>""""</code>.
 * @since JAXB RI 1.0.2 
 */
public String[] getPreDeclaredNamespaceUris(){
  return EMPTY_STRING;
}",0.99974140160331
190654,"/** 
 * Returns the full file name for the additional generated file.
 * @param imageFileName just the base name of the file name.
 */
protected final File getOutputFile(TagletWriter writer,PackageDoc pkg,String imageFileName){
  File rootDir=new File(writer.configuration().destDirName);
  File pkgDir=new File(rootDir,pkg.name().replace('.','/'));
  File imageFile=new File(pkgDir,imageFileName);
  return imageFile;
}","/** 
 * Returns the full file name for the additional generated file.
 * @param imageFileName just the base name of the file name.
 */
protected final File getOutputFile(TagletWriter writer,PackageDoc pkg,String imageFileName){
  File rootDir=writer.configuration().destDirName.length() == 0 ? new File(""String_Node_Str"") : new File(writer.configuration().destDirName);
  File pkgDir=new File(rootDir,pkg.name().replace('.','/'));
  File imageFile=new File(pkgDir,imageFileName);
  return imageFile;
}",0.9120521172638436
190655,"/** 
 * Parses a   {@link DOMForest} into a {@link XSSchemaSet}.
 */
public XSSchemaSet createXSOM(DOMForest forest,SCDBasedBindingSet scdBasedBindingSet) throws SAXException {
  XSOMParser reader=createXSOMParser(forest);
  for (  String systemId : forest.getRootDocuments()) {
    errorReceiver.pollAbort();
    Document dom=forest.get(systemId);
    if (!dom.getDocumentElement().getNamespaceURI().equals(Const.JAXB_NSURI))     reader.parse(systemId);
  }
  XSSchemaSet result=reader.getResult();
  scdBasedBindingSet.apply(result,errorReceiver);
  return result;
}","/** 
 * Parses a   {@link DOMForest} into a {@link XSSchemaSet}.
 * @return null if the parsing failed.
 */
public XSSchemaSet createXSOM(DOMForest forest,SCDBasedBindingSet scdBasedBindingSet) throws SAXException {
  XSOMParser reader=createXSOMParser(forest);
  for (  String systemId : forest.getRootDocuments()) {
    errorReceiver.pollAbort();
    Document dom=forest.get(systemId);
    if (!dom.getDocumentElement().getNamespaceURI().equals(Const.JAXB_NSURI))     reader.parse(systemId);
  }
  XSSchemaSet result=reader.getResult();
  if (result != null)   scdBasedBindingSet.apply(result,errorReceiver);
  return result;
}",0.9490392648287383
190656,"public void buildChildElementUnmarshallers(UnmarshallerChain chain,QNameMap<ChildLoader> handlers){
  JAXBContextImpl context=chain.context;
  for (  TypeRef<Type,Class> e : prop.getTypes()) {
    JaxBeanInfo bi=context.getOrCreate((RuntimeTypeInfo)e.getTarget());
    Loader l=bi.getLoader(context,true);
    if (e.getDefaultValue() != null)     l=new DefaultValueLoaderDecorator(l,e.getDefaultValue());
    if (nillable || chain.context.allNillable)     l=new XsiNilLoader.Single(l,acc);
    handlers.put(e.getTagName(),new ChildLoader(l,acc));
  }
}","public void buildChildElementUnmarshallers(UnmarshallerChain chain,QNameMap<ChildLoader> handlers){
  JAXBContextImpl context=chain.context;
  for (  TypeRef<Type,Class> e : prop.getTypes()) {
    JaxBeanInfo bi=context.getOrCreate((RuntimeTypeInfo)e.getTarget());
    Loader l=bi.getLoader(context,!Modifier.isFinal(bi.jaxbType.getModifiers()));
    if (e.getDefaultValue() != null)     l=new DefaultValueLoaderDecorator(l,e.getDefaultValue());
    if (nillable || chain.context.allNillable)     l=new XsiNilLoader.Single(l,acc);
    handlers.put(e.getTagName(),new ChildLoader(l,acc));
  }
}",0.9572052401746723
190657,"public XmlOutput createWriter(OutputStream os,String encoding) throws JAXBException {
  if (encoding.equals(""String_Node_Str"")) {
    Encoded[] table=context.getUTF8NameTable();
    if (isFormattedOutput())     return new IndentingUTF8XmlOutput(os,indent,table);
 else {
      if (c14nSupport)       return new C14nXmlOutput(os,table,context.c14nSupport);
 else       return new UTF8XmlOutput(os,table);
    }
  }
  try {
    return createWriter(new OutputStreamWriter(os,getJavaEncoding(encoding)),encoding);
  }
 catch (  UnsupportedEncodingException e) {
    throw new MarshalException(Messages.UNSUPPORTED_ENCODING.format(encoding),e);
  }
}","public XmlOutput createWriter(OutputStream os,String encoding) throws JAXBException {
  if (encoding.equals(""String_Node_Str"")) {
    Encoded[] table=context.getUTF8NameTable();
    final UTF8XmlOutput out;
    if (isFormattedOutput())     out=new IndentingUTF8XmlOutput(os,indent,table);
 else {
      if (c14nSupport)       out=new C14nXmlOutput(os,table,context.c14nSupport);
 else       out=new UTF8XmlOutput(os,table);
    }
    if (header != null)     out.setHeader(header);
    return out;
  }
  try {
    return createWriter(new OutputStreamWriter(os,getJavaEncoding(encoding)),encoding);
  }
 catch (  UnsupportedEncodingException e) {
    throw new MarshalException(Messages.UNSUPPORTED_ENCODING.format(encoding),e);
  }
}",0.6884531590413944
190658,"@Override public void startDocument(XMLSerializer serializer,boolean fragment,int[] nsUriIndex2prefixIndex,NamespaceContextImpl nsContext) throws IOException, SAXException, XMLStreamException {
  super.startDocument(serializer,fragment,nsUriIndex2prefixIndex,nsContext);
  octetBufferIndex=0;
  if (!fragment) {
    write(XML_DECL);
  }
}","@Override public void startDocument(XMLSerializer serializer,boolean fragment,int[] nsUriIndex2prefixIndex,NamespaceContextImpl nsContext) throws IOException, SAXException, XMLStreamException {
  super.startDocument(serializer,fragment,nsUriIndex2prefixIndex,nsContext);
  octetBufferIndex=0;
  if (!fragment) {
    write(XML_DECL);
  }
  if (header != null) {
    textBuffer.set(header);
    textBuffer.write(this);
  }
}",0.8894736842105263
190659,"/** 
 * Creates a new class loader that eventually delegates to the given   {@link ClassLoader}such that XJC can be loaded by using this classloader.
 * @param v Either ""1.0"" or ""2.0"", indicating the version of the -source value.
 */
protected static ClassLoader createProtectiveClassLoader(ClassLoader cl,String v) throws ClassNotFoundException, MalformedURLException {
  if (noHack)   return cl;
  boolean mustang=false;
  if (JAXBContext.class.getClassLoader() == null) {
    mustang=true;
    List mask=new ArrayList(Arrays.asList(maskedPackages));
    mask.add(""String_Node_Str"");
    cl=new MaskingClassLoader(cl,mask);
    URL apiUrl=cl.getResource(""String_Node_Str"");
    if (apiUrl == null)     throw new ClassNotFoundException(""String_Node_Str"");
    cl=new URLClassLoader(new URL[]{ParallelWorldClassLoader.toJarUrl(apiUrl)},cl);
  }
  if (v.equals(""String_Node_Str"")) {
    if (!mustang)     cl=new MaskingClassLoader(cl,maskedPackages);
    cl=new ParallelWorldClassLoader(cl,""String_Node_Str"");
  }
 else {
    if (mustang)     cl=new ParallelWorldClassLoader(cl,""String_Node_Str"");
  }
  return cl;
}","/** 
 * Creates a new class loader that eventually delegates to the given   {@link ClassLoader}such that XJC can be loaded by using this classloader.
 * @param v Either ""1.0"" or ""2.0"", indicating the version of the -source value.
 */
protected static ClassLoader createProtectiveClassLoader(ClassLoader cl,String v) throws ClassNotFoundException, MalformedURLException {
  if (noHack)   return cl;
  boolean mustang=false;
  if (JAXBContext.class.getClassLoader() == null) {
    mustang=true;
    List mask=new ArrayList(Arrays.asList(maskedPackages));
    mask.add(""String_Node_Str"");
    cl=new MaskingClassLoader(cl,mask);
    URL apiUrl=cl.getResource(""String_Node_Str"");
    if (apiUrl == null)     throw new ClassNotFoundException(""String_Node_Str"");
    cl=new URLClassLoader(new URL[]{ParallelWorldClassLoader.toJarUrl(apiUrl)},cl);
  }
  if (v.equals(""String_Node_Str"")) {
    if (!mustang)     cl=new MaskingClassLoader(cl,toolPackages);
    cl=new ParallelWorldClassLoader(cl,""String_Node_Str"");
  }
 else {
    if (mustang)     cl=new ParallelWorldClassLoader(cl,""String_Node_Str"");
  }
  return cl;
}",0.9955116696588868
190660,"/** 
 * Parses an option <code>args[i]</code> and return the number of tokens consumed.
 * @return 0 if the argument is not understood. Returning 0 will let the caller report an error.
 * @exception BadCommandLineException If the callee wants to provide a custom message for an error.
 */
public int parseArgument(String[] args,int i) throws BadCommandLineException {
  if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
    File file=new File(requireArgument(args[i],args,++i));
    try {
      classpaths.add(file.toURL());
    }
 catch (    MalformedURLException e) {
      throw new BadCommandLineException(Messages.format(Messages.NOT_A_VALID_FILENAME,file),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    targetDir=new File(requireArgument(""String_Node_Str"",args,++i));
    if (!targetDir.exists())     throw new BadCommandLineException(Messages.format(Messages.NON_EXISTENT_DIR,targetDir));
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    readOnly=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    defaultPackage=requireArgument(""String_Node_Str"",args,++i);
    if (defaultPackage.length() == 0) {
      packageLevelAnnotations=false;
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    debugMode=true;
    verbose=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    strictCheck=false;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    packageLevelAnnotations=false;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    noFileHeader=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    verbose=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    quiet=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    runtime14=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    automaticNameConflictResolution=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    addFile(requireArgument(""String_Node_Str"",args,++i),bindFiles,""String_Node_Str"");
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.DTD;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.RELAXNG;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.RELAXNG_COMPACT;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.XMLSCHEMA;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.WSDL;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    compatibilityMode=EXTENSION;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    String token=requireArgument(""String_Node_Str"",args,++i);
    target=SpecVersion.parse(token);
    if (target == null)     throw new BadCommandLineException(Messages.format(Messages.ILLEGAL_TARGET_VERSION,token));
  }
  if (args[i].equals(""String_Node_Str"")) {
    if (i == args.length - 1 || args[i + 1].startsWith(""String_Node_Str"")) {
      throw new BadCommandLineException(Messages.format(Messages.MISSING_PROXYFILE));
    }
    File file=new File(args[++i]);
    if (!file.exists()) {
      throw new BadCommandLineException(Messages.format(Messages.NO_SUCH_FILE,file));
    }
    try {
      BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
      parseProxy(in.readLine());
      in.close();
    }
 catch (    IOException e) {
      throw new BadCommandLineException(Messages.format(Messages.FAILED_TO_PARSE,file,e.getMessage()),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    if (i == args.length - 1 || args[i + 1].startsWith(""String_Node_Str"")) {
      throw new BadCommandLineException(Messages.format(Messages.MISSING_PROXY));
    }
    parseProxy(args[++i]);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    proxyHost=requireArgument(""String_Node_Str"",args,++i);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    proxyPort=requireArgument(""String_Node_Str"",args,++i);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    File catalogFile=new File(requireArgument(""String_Node_Str"",args,++i));
    try {
      addCatalog(catalogFile);
    }
 catch (    IOException e) {
      throw new BadCommandLineException(Messages.format(Messages.FAILED_TO_PARSE,catalogFile,e.getMessage()),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    String version=requireArgument(""String_Node_Str"",args,++i);
    if (!version.equals(""String_Node_Str"") && !version.equals(""String_Node_Str""))     throw new BadCommandLineException(Messages.format(Messages.DEFAULT_VERSION));
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    classNameAllocator=new ClassNameAllocator(){
      public String assignClassName(      String packageName,      String className){
        System.out.printf(""String_Node_Str"",packageName,className);
        return className + ""String_Node_Str"";
      }
    }
;
    return 1;
  }
  for (  Plugin plugin : getAllPlugins()) {
    try {
      if (('-' + plugin.getOptionName()).equals(args[i])) {
        activePlugins.add(plugin);
        plugin.onActivated(this);
        pluginURIs.addAll(plugin.getCustomizationURIs());
        int r=plugin.parseArgument(this,args,i);
        if (r != 0)         return r;
 else         return 1;
      }
      int r=plugin.parseArgument(this,args,i);
      if (r != 0)       return r;
    }
 catch (    IOException e) {
      throw new BadCommandLineException(e.getMessage(),e);
    }
  }
  return 0;
}","/** 
 * Parses an option <code>args[i]</code> and return the number of tokens consumed.
 * @return 0 if the argument is not understood. Returning 0 will let the caller report an error.
 * @exception BadCommandLineException If the callee wants to provide a custom message for an error.
 */
public int parseArgument(String[] args,int i) throws BadCommandLineException {
  if (args[i].equals(""String_Node_Str"") || args[i].equals(""String_Node_Str"")) {
    File file=new File(requireArgument(args[i],args,++i));
    try {
      classpaths.add(file.toURL());
    }
 catch (    MalformedURLException e) {
      throw new BadCommandLineException(Messages.format(Messages.NOT_A_VALID_FILENAME,file),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    targetDir=new File(requireArgument(""String_Node_Str"",args,++i));
    if (!targetDir.exists())     throw new BadCommandLineException(Messages.format(Messages.NON_EXISTENT_DIR,targetDir));
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    readOnly=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    defaultPackage=requireArgument(""String_Node_Str"",args,++i);
    if (defaultPackage.length() == 0) {
      packageLevelAnnotations=false;
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    debugMode=true;
    verbose=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    strictCheck=false;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    packageLevelAnnotations=false;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    noFileHeader=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    verbose=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    quiet=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    runtime14=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    automaticNameConflictResolution=true;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    addFile(requireArgument(""String_Node_Str"",args,++i),bindFiles,""String_Node_Str"");
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.DTD;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.RELAXNG;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.RELAXNG_COMPACT;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.XMLSCHEMA;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    schemaLanguage=Language.WSDL;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    compatibilityMode=EXTENSION;
    return 1;
  }
  if (args[i].equals(""String_Node_Str"")) {
    String token=requireArgument(""String_Node_Str"",args,++i);
    target=SpecVersion.parse(token);
    if (target == null)     throw new BadCommandLineException(Messages.format(Messages.ILLEGAL_TARGET_VERSION,token));
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    if (i == args.length - 1 || args[i + 1].startsWith(""String_Node_Str"")) {
      throw new BadCommandLineException(Messages.format(Messages.MISSING_PROXYFILE));
    }
    File file=new File(args[++i]);
    if (!file.exists()) {
      throw new BadCommandLineException(Messages.format(Messages.NO_SUCH_FILE,file));
    }
    try {
      BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),""String_Node_Str""));
      parseProxy(in.readLine());
      in.close();
    }
 catch (    IOException e) {
      throw new BadCommandLineException(Messages.format(Messages.FAILED_TO_PARSE,file,e.getMessage()),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    if (i == args.length - 1 || args[i + 1].startsWith(""String_Node_Str"")) {
      throw new BadCommandLineException(Messages.format(Messages.MISSING_PROXY));
    }
    parseProxy(args[++i]);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    proxyHost=requireArgument(""String_Node_Str"",args,++i);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    proxyPort=requireArgument(""String_Node_Str"",args,++i);
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    File catalogFile=new File(requireArgument(""String_Node_Str"",args,++i));
    try {
      addCatalog(catalogFile);
    }
 catch (    IOException e) {
      throw new BadCommandLineException(Messages.format(Messages.FAILED_TO_PARSE,catalogFile,e.getMessage()),e);
    }
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    String version=requireArgument(""String_Node_Str"",args,++i);
    if (!version.equals(""String_Node_Str"") && !version.equals(""String_Node_Str""))     throw new BadCommandLineException(Messages.format(Messages.DEFAULT_VERSION));
    return 2;
  }
  if (args[i].equals(""String_Node_Str"")) {
    classNameAllocator=new ClassNameAllocator(){
      public String assignClassName(      String packageName,      String className){
        System.out.printf(""String_Node_Str"",packageName,className);
        return className + ""String_Node_Str"";
      }
    }
;
    return 1;
  }
  for (  Plugin plugin : getAllPlugins()) {
    try {
      if (('-' + plugin.getOptionName()).equals(args[i])) {
        activePlugins.add(plugin);
        plugin.onActivated(this);
        pluginURIs.addAll(plugin.getCustomizationURIs());
        int r=plugin.parseArgument(this,args,i);
        if (r != 0)         return r;
 else         return 1;
      }
      int r=plugin.parseArgument(this,args,i);
      if (r != 0)       return r;
    }
 catch (    IOException e) {
      throw new BadCommandLineException(e.getMessage(),e);
    }
  }
  return 0;
}",0.9987649964714184
190661,"private synchronized Class inject(String className,byte[] image){
  Class c=classes.get(className);
  if (c == null) {
    try {
      c=(Class)defineClass.invoke(parent,className.replace('/','.'),image,0,image.length);
      resolveClass.invoke(parent,c);
    }
 catch (    IllegalAccessException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    InvocationTargetException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    SecurityException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    LinkageError e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
    classes.put(className,c);
  }
  return c;
}","private synchronized Class inject(String className,byte[] image){
  if (!loadable)   return null;
  Class c=classes.get(className);
  if (c == null) {
    try {
      c=(Class)defineClass.invoke(parent,className.replace('/','.'),image,0,image.length);
      resolveClass.invoke(parent,c);
    }
 catch (    IllegalAccessException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    InvocationTargetException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    SecurityException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    LinkageError e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
    classes.put(className,c);
  }
  return c;
}",0.9804639804639804
190662,"public ArrayInfoImpl(ModelBuilder<TypeT,ClassDeclT,FieldT,MethodT> builder,Locatable upstream,TypeT arrayType){
  super(builder,upstream);
  this.arrayType=arrayType;
  this.itemType=builder.getTypeInfo(nav().getComponentType(arrayType),this);
  QName n=itemType.getTypeName();
  this.typeName=calcArrayTypeName(n);
}","public ArrayInfoImpl(ModelBuilder<TypeT,ClassDeclT,FieldT,MethodT> builder,Locatable upstream,TypeT arrayType){
  super(builder,upstream);
  this.arrayType=arrayType;
  TypeT componentType=nav().getComponentType(arrayType);
  this.itemType=builder.getTypeInfo(componentType,this);
  QName n=itemType.getTypeName();
  if (n == null) {
    builder.reportError(new IllegalAnnotationException(Messages.ANONYMOUS_ARRAY_ITEM.format(nav().getTypeName(componentType)),this));
    n=new QName(""String_Node_Str"");
  }
  this.typeName=calcArrayTypeName(n);
}",0.6134259259259259
190663,"/** 
 * Computes the type name of the array from that of the item type.
 */
public static final QName calcArrayTypeName(QName n){
  String uri;
  if (n.getNamespaceURI().equals(WellKnownNamespace.XML_SCHEMA)) {
    TODO.checkSpec(""String_Node_Str"");
    uri=""String_Node_Str"";
  }
 else   uri=n.getNamespaceURI();
  return new QName(uri,n.getLocalPart() + ""String_Node_Str"");
}","/** 
 * Computes the type name of the array from that of the item type.
 */
public static QName calcArrayTypeName(QName n){
  String uri;
  if (n.getNamespaceURI().equals(WellKnownNamespace.XML_SCHEMA)) {
    TODO.checkSpec(""String_Node_Str"");
    uri=""String_Node_Str"";
  }
 else   uri=n.getNamespaceURI();
  return new QName(uri,n.getLocalPart() + ""String_Node_Str"");
}",0.9919786096256684
190664,"private XmlSchemaGenerator<Type,Class,Field,Method> createSchemaGenerator(){
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,false,null);
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,!Navigator.REFLECTION.isPrimitive(tr.type),typeInfo);
    }
  }
  return xsdgen;
}","private XmlSchemaGenerator<Type,Class,Field,Method> createSchemaGenerator(){
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,false,null);
    }
 else     if (tr.type == CompositeStructure.class) {
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,!Navigator.REFLECTION.isPrimitive(tr.type),typeInfo);
    }
  }
  return xsdgen;
}",0.9719714964370546
190665,"public CElement complexType(XSComplexType type){
  CElement ci=allow(type,type.getName());
  if (ci != null)   return ci;
  BindInfo bi=builder.getBindInfo(type);
  if (type.isGlobal()) {
    QName tagName=null;
    String className=deriveName(type);
    if (getGlobalBinding().isSimpleMode()) {
      XSElementDecl referer=getSoleElementReferer(type);
      if (referer != null && isCollapsable(referer)) {
        tagName=getName(referer);
        className=deriveName(referer);
      }
    }
    JPackage pkg=selector.getPackage(type.getTargetNamespace());
    return new CClassInfo(model,pkg,className,type.getLocator(),getTypeName(type),tagName,type,bi.toCustomizationList());
  }
 else {
    XSElementDecl element=type.getScope();
    if (element.isGlobal() && isCollapsable(element)) {
      if (builder.getBindInfo(element).get(BIClass.class) != null)       return null;
      return new CClassInfo(model,selector.getClassScope(),deriveName(element),element.getLocator(),null,getName(element),element,bi.toCustomizationList());
    }
    CElement parentType=selector.isBound(element,type);
    String className;
    CClassInfoParent scope;
    if (parentType != null && parentType instanceof CElementInfo && ((CElementInfo)parentType).hasClass()) {
      scope=(CElementInfo)parentType;
      className=""String_Node_Str"";
    }
 else {
      className=builder.getNameConverter().toClassName(element.getName());
      BISchemaBinding sb=builder.getBindInfo(type.getOwnerSchema()).get(BISchemaBinding.class);
      if (sb != null)       className=sb.mangleAnonymousTypeClassName(className);
      scope=selector.getClassScope();
    }
    return new CClassInfo(model,scope,className,type.getLocator(),null,null,type,bi.toCustomizationList());
  }
}","public CElement complexType(XSComplexType type){
  CElement ci=allow(type,type.getName());
  if (ci != null)   return ci;
  BindInfo bi=builder.getBindInfo(type);
  if (type.isGlobal()) {
    QName tagName=null;
    String className=deriveName(type);
    Locator loc=type.getLocator();
    if (getGlobalBinding().isSimpleMode()) {
      XSElementDecl referer=getSoleElementReferer(type);
      if (referer != null && isCollapsable(referer)) {
        tagName=getName(referer);
        className=deriveName(referer);
        loc=referer.getLocator();
      }
    }
    JPackage pkg=selector.getPackage(type.getTargetNamespace());
    return new CClassInfo(model,pkg,className,loc,getTypeName(type),tagName,type,bi.toCustomizationList());
  }
 else {
    XSElementDecl element=type.getScope();
    if (element.isGlobal() && isCollapsable(element)) {
      if (builder.getBindInfo(element).get(BIClass.class) != null)       return null;
      return new CClassInfo(model,selector.getClassScope(),deriveName(element),element.getLocator(),null,getName(element),element,bi.toCustomizationList());
    }
    CElement parentType=selector.isBound(element,type);
    String className;
    CClassInfoParent scope;
    if (parentType != null && parentType instanceof CElementInfo && ((CElementInfo)parentType).hasClass()) {
      scope=(CElementInfo)parentType;
      className=""String_Node_Str"";
    }
 else {
      className=builder.getNameConverter().toClassName(element.getName());
      BISchemaBinding sb=builder.getBindInfo(type.getOwnerSchema()).get(BISchemaBinding.class);
      if (sb != null)       className=sb.mangleAnonymousTypeClassName(className);
      scope=selector.getClassScope();
    }
    return new CClassInfo(model,scope,className,type.getLocator(),null,null,type,bi.toCustomizationList());
  }
}",0.9750210496772382
190666,"/** 
 * Determines the target node of the ""bindings"" element by using the inherited target node, then put the result into the ""result"" map and the ""scd"" map.
 * @param inheritedTarget The current target node. This always exists, even if the user starts specifying targets via SCD (in that case this inherited target is just not going to be used.)
 * @param inheritedSCD If the ancestor &lt;bindings> node specifies @scd to specify the target via SCD, then this parameter represents that context.
 */
private void buildTargetNodeMap(Element bindings,@NotNull Node inheritedTarget,@Nullable SCDBasedBindingSet.Target inheritedSCD,Map<Element,Node> result,SCDBasedBindingSet scdResult){
  Node target=inheritedTarget;
  validate(bindings);
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String schemaLocation=bindings.getAttribute(""String_Node_Str"");
    try {
      schemaLocation=new URL(new URL(forest.getSystemId(bindings.getOwnerDocument())),schemaLocation).toExternalForm();
    }
 catch (    MalformedURLException e) {
    }
    target=forest.get(schemaLocation).getDocumentElement();
    if (target == null) {
      reportError(bindings,Messages.format(Messages.ERR_INCORRECT_SCHEMA_REFERENCE,schemaLocation,EditDistance.findNearest(schemaLocation,forest.listSystemIDs())));
      return;
    }
  }
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String nodeXPath=bindings.getAttribute(""String_Node_Str"");
    NodeList nlst;
    try {
      xpath.setNamespaceContext(new NamespaceContextImpl(bindings));
      nlst=(NodeList)xpath.evaluate(nodeXPath,target,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      reportError(bindings,Messages.format(Messages.ERR_XPATH_EVAL,e.getMessage()),e);
      return;
    }
    if (nlst.getLength() == 0) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TO_NO_TARGET,nodeXPath));
      return;
    }
    if (nlst.getLength() != 1) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TOO_MANY_TARGETS,nodeXPath,nlst.getLength()));
      return;
    }
    Node rnode=nlst.item(0);
    if (!(rnode instanceof Element)) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TO_NON_ELEMENT,nodeXPath));
      return;
    }
    if (!forest.logic.checkIfValidTargetNode(forest,bindings,(Element)rnode)) {
      reportError(bindings,Messages.format(Messages.XPATH_EVAL_TO_NON_SCHEMA_ELEMENT,nodeXPath,rnode.getNodeName()));
      return;
    }
    target=rnode;
  }
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String scdPath=bindings.getAttribute(""String_Node_Str"");
    if (!enableSCD) {
      reportError(bindings,Messages.format(Messages.SCD_NOT_ENABLED));
      enableSCD=true;
    }
    try {
      inheritedSCD=scdResult.createNewTarget(inheritedSCD,bindings,SCD.create(scdPath,new NamespaceContextImpl(bindings)));
    }
 catch (    ParseException e) {
      reportError(bindings,Messages.format(Messages.ERR_SCD_EVAL,e.getMessage()),e);
      return;
    }
  }
  if (inheritedSCD != null)   inheritedSCD.addBinidng(bindings);
 else   result.put(bindings,target);
  Element[] children=DOMUtils.getChildElements(bindings,Const.JAXB_NSURI,""String_Node_Str"");
  for (  Element value : children)   buildTargetNodeMap(value,target,inheritedSCD,result,scdResult);
}","/** 
 * Determines the target node of the ""bindings"" element by using the inherited target node, then put the result into the ""result"" map and the ""scd"" map.
 * @param inheritedTarget The current target node. This always exists, even if the user starts specifying targets via SCD (in that case this inherited target is just not going to be used.)
 * @param inheritedSCD If the ancestor &lt;bindings> node specifies @scd to specify the target via SCD, then this parameter represents that context.
 */
private void buildTargetNodeMap(Element bindings,@NotNull Node inheritedTarget,@Nullable SCDBasedBindingSet.Target inheritedSCD,Map<Element,Node> result,SCDBasedBindingSet scdResult){
  Node target=inheritedTarget;
  validate(bindings);
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String schemaLocation=bindings.getAttribute(""String_Node_Str"");
    try {
      schemaLocation=new URL(new URL(forest.getSystemId(bindings.getOwnerDocument())),schemaLocation).toExternalForm();
    }
 catch (    MalformedURLException e) {
    }
    target=forest.get(schemaLocation);
    if (target == null) {
      reportError(bindings,Messages.format(Messages.ERR_INCORRECT_SCHEMA_REFERENCE,schemaLocation,EditDistance.findNearest(schemaLocation,forest.listSystemIDs())));
      return;
    }
    target=((Document)target).getDocumentElement();
  }
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String nodeXPath=bindings.getAttribute(""String_Node_Str"");
    NodeList nlst;
    try {
      xpath.setNamespaceContext(new NamespaceContextImpl(bindings));
      nlst=(NodeList)xpath.evaluate(nodeXPath,target,XPathConstants.NODESET);
    }
 catch (    XPathExpressionException e) {
      reportError(bindings,Messages.format(Messages.ERR_XPATH_EVAL,e.getMessage()),e);
      return;
    }
    if (nlst.getLength() == 0) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TO_NO_TARGET,nodeXPath));
      return;
    }
    if (nlst.getLength() != 1) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TOO_MANY_TARGETS,nodeXPath,nlst.getLength()));
      return;
    }
    Node rnode=nlst.item(0);
    if (!(rnode instanceof Element)) {
      reportError(bindings,Messages.format(Messages.NO_XPATH_EVAL_TO_NON_ELEMENT,nodeXPath));
      return;
    }
    if (!forest.logic.checkIfValidTargetNode(forest,bindings,(Element)rnode)) {
      reportError(bindings,Messages.format(Messages.XPATH_EVAL_TO_NON_SCHEMA_ELEMENT,nodeXPath,rnode.getNodeName()));
      return;
    }
    target=rnode;
  }
  if (bindings.getAttributeNode(""String_Node_Str"") != null) {
    String scdPath=bindings.getAttribute(""String_Node_Str"");
    if (!enableSCD) {
      reportError(bindings,Messages.format(Messages.SCD_NOT_ENABLED));
      enableSCD=true;
    }
    try {
      inheritedSCD=scdResult.createNewTarget(inheritedSCD,bindings,SCD.create(scdPath,new NamespaceContextImpl(bindings)));
    }
 catch (    ParseException e) {
      reportError(bindings,Messages.format(Messages.ERR_SCD_EVAL,e.getMessage()),e);
      return;
    }
  }
  if (inheritedSCD != null)   inheritedSCD.addBinidng(bindings);
 else   result.put(bindings,target);
  Element[] children=DOMUtils.getChildElements(bindings,Const.JAXB_NSURI,""String_Node_Str"");
  for (  Element value : children)   buildTargetNodeMap(value,target,inheritedSCD,result,scdResult);
}",0.9891028511718168
190667,"/** 
 * Examine the specified element ref and determine if a swaRef attribute needs to be generated
 * @param typeRef
 */
private boolean generateSwaRefAdapter(PropertyInfo<T,C> prop){
  final Adapter<T,C> adapter=prop.getAdapter();
  if (adapter == null)   return false;
  final Object o=navigator.asDecl(SwaRefAdapter.class);
  if (o == null)   return false;
  return (o.equals(adapter.adapterType));
}","/** 
 * Examine the specified element ref and determine if a swaRef attribute needs to be generated
 */
private boolean generateSwaRefAdapter(PropertyInfo<T,C> prop){
  final Adapter<T,C> adapter=prop.getAdapter();
  if (adapter == null)   return false;
  final Object o=navigator.asDecl(SwaRefAdapter.class);
  if (o == null)   return false;
  return (o.equals(adapter.adapterType));
}",0.9772151898734176
190668,"public static void main(String[] args) throws Throwable {
  String v=""String_Node_Str"";
  for (int i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        v=parseVersion(args[i + 1]);
      }
    }
  }
  try {
    ClassLoader cl=createProtectiveClassLoader(XJCFacade.class.getClassLoader(),v);
    Class driver=cl.loadClass(""String_Node_Str"");
    Method mainMethod=driver.getDeclaredMethod(""String_Node_Str"",new Class[]{String[].class});
    try {
      mainMethod.invoke(null,new Object[]{args});
    }
 catch (    IllegalAccessException e) {
      throw e;
    }
catch (    InvocationTargetException e) {
      if (e.getTargetException() != null)       throw e.getTargetException();
    }
  }
 catch (  UnsupportedClassVersionError e) {
    System.err.println(""String_Node_Str"");
  }
}","public static void main(String[] args) throws Throwable {
  String v=""String_Node_Str"";
  for (int i=0; i < args.length; i++) {
    if (args[i].equals(""String_Node_Str"")) {
      if (i + 1 < args.length) {
        v=parseVersion(args[i + 1]);
      }
    }
  }
  try {
    ClassLoader cl=ClassLoaderBuilder.createProtectiveClassLoader(XJCFacade.class.getClassLoader(),v);
    Class driver=cl.loadClass(""String_Node_Str"");
    Method mainMethod=driver.getDeclaredMethod(""String_Node_Str"",new Class[]{String[].class});
    try {
      mainMethod.invoke(null,new Object[]{args});
    }
 catch (    IllegalAccessException e) {
      throw e;
    }
catch (    InvocationTargetException e) {
      if (e.getTargetException() != null)       throw e.getTargetException();
    }
  }
 catch (  UnsupportedClassVersionError e) {
    System.err.println(""String_Node_Str"");
  }
}",0.9889083479276124
190669,"protected ClassLoader createClassLoader() throws ClassNotFoundException, IOException {
  return XJCFacade.createProtectiveClassLoader(XJCTask.class.getClassLoader(),source);
}","protected ClassLoader createClassLoader() throws ClassNotFoundException, IOException {
  return ClassLoaderBuilder.createProtectiveClassLoader(XJCTask.class.getClassLoader(),source);
}",0.9526462395543176
190670,"public ModelBuilder(AnnotationReader<T,C,F,M> reader,Navigator<T,C,F,M> navigator,Map<C,C> subclassReplacements,String defaultNamespaceRemap){
}","public ModelBuilder(AnnotationReader<T,C,F,M> reader,Navigator<T,C,F,M> navigator,Map<C,C> subclassReplacements,String defaultNamespaceRemap,boolean xmlAccessorFactorySupport){
  this.reader=reader;
  this.nav=navigator;
  this.subclassReplacements=subclassReplacements;
  if (defaultNamespaceRemap == null)   defaultNamespaceRemap=""String_Node_Str"";
  this.defaultNsUri=defaultNamespaceRemap;
  this.xmlAccessorFactorySupport=xmlAccessorFactorySupport;
  reader.setErrorHandler(proxyErrorHandler);
  typeInfoSet=createTypeInfoSet();
}",0.4241531664212076
190671,"protected AccessorFactory createAccessorFactory(Class clazz){
}","protected AccessorFactory createAccessorFactory(Class clazz){
  XmlAccessorFactory factoryAnn=null;
  AccessorFactory accFactory=null;
  if (builder.xmlAccessorFactorySupport) {
    factoryAnn=findXmlAccessorFactoryAnnotation(clazz);
    if (factoryAnn != null) {
      try {
        accFactory=factoryAnn.value().newInstance();
      }
 catch (      InstantiationException e) {
        builder.reportError(new IllegalAnnotationException(Messages.ACCESSORFACTORY_INSTANTIATION_EXCEPTION.format(factoryAnn.getClass().getName(),nav().getClassName(clazz)),this));
      }
catch (      IllegalAccessException e) {
        builder.reportError(new IllegalAnnotationException(Messages.ACCESSORFACTORY_ACCESS_EXCEPTION.format(factoryAnn.getClass().getName(),nav().getClassName(clazz)),this));
      }
    }
  }
  if (accFactory == null) {
    accFactory=AccessorFactoryImpl.getInstance();
  }
  return accFactory;
}",0.1298969072164948
190672,"protected XmlAccessorFactory findXmlAccessorFactoryAnnotation(Class clazz){
}","protected XmlAccessorFactory findXmlAccessorFactoryAnnotation(Class clazz){
  XmlAccessorFactory factoryAnn=reader().getClassAnnotation(XmlAccessorFactory.class,clazz,this);
  if (factoryAnn == null) {
    factoryAnn=reader().getPackageAnnotation(XmlAccessorFactory.class,clazz,this);
  }
  return factoryAnn;
}",0.3969072164948453
190673,"@Override public RuntimePropertySeed createAccessorSeed(Method getter,Method setter){
  Accessor acc;
  try {
    acc=accessorFactory.createPropertyAccessor(clazz,getter,setter);
  }
 catch (  JAXBException e) {
    builder.reportError(new IllegalAnnotationException(Messages.CUSTOM_ACCESSORFACTORY_PROPERTY_ERROR.format(nav().getClassName(clazz),e.toString()),this));
    acc=Accessor.ERROR;
  }
  return new RuntimePropertySeed(super.createAccessorSeed(getter,setter),acc);
}","@Override public RuntimePropertySeed createAccessorSeed(Method getter,Method setter){
  Accessor acc;
  try {
    acc=accessorFactory.createPropertyAccessor(clazz,getter,setter);
  }
 catch (  JAXBException e) {
    builder.reportError(new IllegalAnnotationException(Messages.CUSTOM_ACCESSORFACTORY_PROPERTY_ERROR.format(nav().getClassName(clazz),e.toString()),this));
    acc=Accessor.getErrorInstance();
  }
  return new RuntimePropertySeed(super.createAccessorSeed(getter,setter),acc);
}",0.9762150982419856
190674,"@Override protected RuntimePropertySeed createFieldSeed(Field field){
  final boolean readOnly=Modifier.isStatic(field.getModifiers());
  Accessor acc;
  try {
    acc=accessorFactory.createFieldAccessor(clazz,field,readOnly);
  }
 catch (  JAXBException e) {
    builder.reportError(new IllegalAnnotationException(Messages.CUSTOM_ACCESSORFACTORY_FIELD_ERROR.format(nav().getClassName(clazz),e.toString()),this));
    acc=Accessor.ERROR;
  }
  return new RuntimePropertySeed(super.createFieldSeed(field),acc);
}","@Override protected RuntimePropertySeed createFieldSeed(Field field){
  final boolean readOnly=Modifier.isStatic(field.getModifiers());
  Accessor acc;
  try {
    acc=accessorFactory.createFieldAccessor(clazz,field,readOnly);
  }
 catch (  JAXBException e) {
    builder.reportError(new IllegalAnnotationException(Messages.CUSTOM_ACCESSORFACTORY_FIELD_ERROR.format(nav().getClassName(clazz),e.toString()),this));
    acc=Accessor.getErrorInstance();
  }
  return new RuntimePropertySeed(super.createFieldSeed(field),acc);
}",0.9777777777777776
190675,"/** 
 * Creates a   {@link JAXBContextImpl} that includes the specified additional classes.
 */
public JAXBContextImpl createAugmented(Class<?> clazz) throws JAXBException {
  Class[] newList=new Class[classes.length + 1];
  System.arraycopy(classes,0,newList,0,classes.length);
  newList[classes.length]=clazz;
  return new JAXBContextImpl(newList,bridges.keySet(),subclassReplacements,defaultNsUri,c14nSupport,annotaitonReader);
}","/** 
 * Creates a   {@link JAXBContextImpl} that includes the specified additional classes.
 */
public JAXBContextImpl createAugmented(Class<?> clazz) throws JAXBException {
  Class[] newList=new Class[classes.length + 1];
  System.arraycopy(classes,0,newList,0,classes.length);
  newList[classes.length]=clazz;
  return new JAXBContextImpl(newList,bridges.keySet(),subclassReplacements,defaultNsUri,c14nSupport,annotaitonReader,xmlAccessorFactorySupport);
}",0.9707865168539326
190676,"public static JAXBContextImpl getJAXBContext(){
synchronized (AnnotationParserFactoryImpl.class) {
    try {
      if (customizationContext == null)       customizationContext=new JAXBContextImpl(new Class[]{BindInfo.class,BIClass.class,BIConversion.User.class,BIConversion.UserAdapter.class,BIDom.class,BIXDom.class,BIXSubstitutable.class,BIEnum.class,BIEnumMember.class,BIGlobalBinding.class,BIProperty.class,BISchemaBinding.class},Collections.<TypeReference>emptyList(),Collections.<Class,Class>emptyMap(),null,false,null);
      return customizationContext;
    }
 catch (    JAXBException e) {
      throw new AssertionError(e);
    }
  }
}","public static JAXBContextImpl getJAXBContext(){
synchronized (AnnotationParserFactoryImpl.class) {
    try {
      if (customizationContext == null)       customizationContext=new JAXBContextImpl(new Class[]{BindInfo.class,BIClass.class,BIConversion.User.class,BIConversion.UserAdapter.class,BIDom.class,BIXDom.class,BIXSubstitutable.class,BIEnum.class,BIEnumMember.class,BIGlobalBinding.class,BIProperty.class,BISchemaBinding.class},Collections.<TypeReference>emptyList(),Collections.<Class,Class>emptyMap(),null,false,null,false);
      return customizationContext;
    }
 catch (    JAXBException e) {
      throw new AssertionError(e);
    }
  }
}",0.9953703703703703
190677,"public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  if (!isCutting()) {
    checkAndEnable(uri);
    verifyTagName(uri,localName,qName);
    if (needsToBePruned(uri))     startCutting();
  }
  super.startElement(uri,localName,qName,atts);
}","public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {
  if (!isCutting()) {
    if (!uri.equals(""String_Node_Str"")) {
      checkAndEnable(uri);
      verifyTagName(uri,localName,qName);
      if (needsToBePruned(uri))       startCutting();
    }
  }
  super.startElement(uri,localName,qName,atts);
}",0.913312693498452
190678,"private XmlSchemaGenerator<Type,Class,Field,Method> createSchemaGenerator(){
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,false,null);
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,!Navigator.REFLECTION.isPrimitive(tr.type),typeInfo);
    }
  }
  return xsdgen;
}","private XmlSchemaGenerator<Type,Class,Field,Method> createSchemaGenerator(){
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,false,null);
    }
 else     if (tr.type == CompositeStructure.class) {
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,!Navigator.REFLECTION.isPrimitive(tr.type),typeInfo);
    }
  }
  return xsdgen;
}",0.9719714964370546
190679,"/** 
 * Creates a   {@link StAXConnector} from {@link XMLStreamReader}. This method checks if the parser is FI parser and acts accordingly.
 */
public static StAXConnector create(XMLStreamReader reader,XmlVisitor visitor){
  final Class readerClass=reader.getClass();
  if (readerClass == FI_STAX_READER_CLASS && FI_CONNECTOR_CTOR != null) {
    try {
      return FI_CONNECTOR_CTOR.newInstance(reader,visitor);
    }
 catch (    Exception t) {
    }
  }
  boolean isZephyr=readerClass.getName().equals(""String_Node_Str"");
  if (!isZephyr)   visitor=new InterningXmlVisitor(visitor);
  if (STAX_EX_READER_CLASS != null && STAX_EX_READER_CLASS.isAssignableFrom(readerClass)) {
    try {
      return STAX_EX_CONNECTOR_CTOR.newInstance(reader,visitor);
    }
 catch (    Exception t) {
    }
  }
  return new StAXStreamConnector(reader,visitor);
}","/** 
 * Creates a   {@link StAXConnector} from {@link XMLStreamReader}. This method checks if the parser is FI parser and acts accordingly.
 */
public static StAXConnector create(XMLStreamReader reader,XmlVisitor visitor){
  final Class readerClass=reader.getClass();
  if (FI_STAX_READER_CLASS != null && FI_STAX_READER_CLASS.isAssignableFrom(readerClass) && FI_CONNECTOR_CTOR != null) {
    try {
      return FI_CONNECTOR_CTOR.newInstance(reader,visitor);
    }
 catch (    Exception t) {
    }
  }
  boolean isZephyr=readerClass.getName().equals(""String_Node_Str"");
  if (!isZephyr)   visitor=new InterningXmlVisitor(visitor);
  if (STAX_EX_READER_CLASS != null && STAX_EX_READER_CLASS.isAssignableFrom(readerClass)) {
    try {
      return STAX_EX_CONNECTOR_CTOR.newInstance(reader,visitor);
    }
 catch (    Exception t) {
    }
  }
  return new StAXStreamConnector(reader,visitor);
}",0.9556706966033393
190680,"private synchronized Class inject(String className,byte[] image){
  Class c=classes.get(className);
  if (c == null) {
    try {
      c=(Class)defineClass.invoke(parent,className.replace('/','.'),image,0,image.length);
      resolveClass.invoke(parent,c);
    }
 catch (    IllegalAccessException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    InvocationTargetException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    SecurityException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
    classes.put(className,c);
  }
  return c;
}","private synchronized Class inject(String className,byte[] image){
  Class c=classes.get(className);
  if (c == null) {
    try {
      c=(Class)defineClass.invoke(parent,className.replace('/','.'),image,0,image.length);
      resolveClass.invoke(parent,c);
    }
 catch (    IllegalAccessException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    InvocationTargetException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    SecurityException e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
catch (    LinkageError e) {
      logger.log(Level.FINE,""String_Node_Str"" + className,e);
      return null;
    }
    classes.put(className,c);
  }
  return c;
}",0.9221476510067114
190681,"private int hash(Object o){
  if (useIdentity)   return System.identityHashCode(o) % initialHash.length;
 else   return Math.abs(o.hashCode() % initialHash.length);
}","private int hash(Object o){
  return ((useIdentity ? System.identityHashCode(o) : o.hashCode()) & 0x7FFFFFFF) % initialHash.length;
}",0.6354515050167224
190682,"/** 
 * @param typeRefs used to build  {@link Bridge}s. Can be empty.
 * @param c14nSupport {@link #c14nSupport}.
 */
public JAXBContextImpl(Class[] classes,Collection<TypeReference> typeRefs,Map<Class,Class> subclassReplacements,String defaultNsUri,boolean c14nSupport,@Nullable RuntimeAnnotationReader ar) throws JAXBException {
  DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
  if (defaultNsUri == null)   defaultNsUri=""String_Node_Str"";
  if (ar == null)   ar=new RuntimeInlineAnnotationReader();
  if (subclassReplacements == null)   subclassReplacements=Collections.emptyMap();
  if (typeRefs == null)   typeRefs=Collections.emptyList();
  this.annotaitonReader=ar;
  this.subclassReplacements=subclassReplacements;
  this.defaultNsUri=defaultNsUri;
  this.c14nSupport=c14nSupport;
  this.classes=new Class[classes.length];
  System.arraycopy(classes,0,this.classes,0,classes.length);
  RuntimeTypeInfoSet typeSet=getTypeInfoSet();
  elements.put(null,new LinkedHashMap<QName,ElementBeanInfoImpl>());
  for (  RuntimeBuiltinLeafInfo leaf : RuntimeBuiltinLeafInfoImpl.builtinBeanInfos) {
    LeafBeanInfoImpl<?> bi=new LeafBeanInfoImpl(this,leaf);
    beanInfoMap.put(leaf.getClazz(),bi);
    for (    QName t : bi.getTypeNames())     typeMap.put(t,bi);
  }
  for (  RuntimeEnumLeafInfo e : typeSet.enums().values()) {
    JaxBeanInfo<?> bi=getOrCreate(e);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
    if (e.isElement())     rootMap.put(e.getElementName(),bi);
  }
  for (  RuntimeArrayInfo a : typeSet.arrays().values()) {
    JaxBeanInfo<?> ai=getOrCreate(a);
    for (    QName qn : ai.getTypeNames())     typeMap.put(qn,ai);
  }
  for (  RuntimeClassInfo ci : typeSet.beans().values()) {
    ClassBeanInfoImpl<?> bi=getOrCreate(ci);
    if (bi.isElement())     rootMap.put(ci.getElementName(),bi);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
  }
  for (  RuntimeElementInfo n : typeSet.getAllElements()) {
    ElementBeanInfoImpl bi=getOrCreate(n);
    if (n.getScope() == null)     rootMap.put(n.getElementName(),bi);
    RuntimeClassInfo scope=n.getScope();
    Class scopeClazz=scope == null ? null : scope.getClazz();
    Map<QName,ElementBeanInfoImpl> m=elements.get(scopeClazz);
    if (m == null) {
      m=new LinkedHashMap<QName,ElementBeanInfoImpl>();
      elements.put(scopeClazz,m);
    }
    m.put(n.getElementName(),bi);
  }
  beanInfoMap.put(JAXBElement.class,new ElementBeanInfoImpl(this));
  beanInfoMap.put(CompositeStructure.class,new CompositeStructureBeanInfo(this));
  getOrCreate(typeSet.getAnyTypeInfo());
  for (  JaxBeanInfo bi : beanInfos.values())   bi.link(this);
  for (  Map.Entry<Class,Class> e : RuntimeUtil.primitiveToBox.entrySet())   beanInfoMap.put(e.getKey(),beanInfoMap.get(e.getValue()));
  ReflectionNavigator nav=typeSet.getNavigator();
  for (  TypeReference tr : typeRefs) {
    XmlJavaTypeAdapter xjta=tr.get(XmlJavaTypeAdapter.class);
    Adapter<Type,Class> a=null;
    XmlList xl=tr.get(XmlList.class);
    Class erasedType=nav.erasure(tr.type);
    if (xjta != null) {
      a=new Adapter<Type,Class>(xjta.value(),nav);
    }
    if (tr.get(XmlAttachmentRef.class) != null) {
      a=new Adapter<Type,Class>(SwaRefAdapter.class,nav);
    }
    if (a != null) {
      erasedType=nav.erasure(a.defaultType);
    }
    Name name=nameBuilder.createElementName(tr.tagName);
    InternalBridge bridge;
    if (xl == null)     bridge=new BridgeImpl(this,name,getBeanInfo(erasedType,true),tr);
 else     bridge=new BridgeImpl(this,name,new ValueListBeanInfoImpl(this,erasedType),tr);
    if (a != null)     bridge=new BridgeAdapter(bridge,a.adapterType);
    bridges.put(tr,bridge);
  }
  this.nameList=nameBuilder.conclude();
  for (  JaxBeanInfo bi : beanInfos.values())   bi.wrapUp();
  nameBuilder=null;
  beanInfos=null;
}","/** 
 * @param typeRefs used to build  {@link Bridge}s. Can be empty.
 * @param c14nSupport {@link #c14nSupport}.
 */
public JAXBContextImpl(Class[] classes,Collection<TypeReference> typeRefs,Map<Class,Class> subclassReplacements,String defaultNsUri,boolean c14nSupport,@Nullable RuntimeAnnotationReader ar) throws JAXBException {
  DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
  if (defaultNsUri == null)   defaultNsUri=""String_Node_Str"";
  if (ar == null)   ar=new RuntimeInlineAnnotationReader();
  if (subclassReplacements == null)   subclassReplacements=Collections.emptyMap();
  if (typeRefs == null)   typeRefs=Collections.emptyList();
  this.annotaitonReader=ar;
  this.subclassReplacements=subclassReplacements;
  this.defaultNsUri=defaultNsUri;
  this.c14nSupport=c14nSupport;
  this.classes=new Class[classes.length];
  System.arraycopy(classes,0,this.classes,0,classes.length);
  RuntimeTypeInfoSet typeSet=getTypeInfoSet();
  elements.put(null,new LinkedHashMap<QName,ElementBeanInfoImpl>());
  for (  RuntimeBuiltinLeafInfo leaf : RuntimeBuiltinLeafInfoImpl.builtinBeanInfos) {
    LeafBeanInfoImpl<?> bi=new LeafBeanInfoImpl(this,leaf);
    beanInfoMap.put(leaf.getClazz(),bi);
    for (    QName t : bi.getTypeNames())     typeMap.put(t,bi);
  }
  for (  RuntimeEnumLeafInfo e : typeSet.enums().values()) {
    JaxBeanInfo<?> bi=getOrCreate(e);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
    if (e.isElement())     rootMap.put(e.getElementName(),bi);
  }
  for (  RuntimeArrayInfo a : typeSet.arrays().values()) {
    JaxBeanInfo<?> ai=getOrCreate(a);
    for (    QName qn : ai.getTypeNames())     typeMap.put(qn,ai);
  }
  for (  RuntimeClassInfo ci : typeSet.beans().values()) {
    ClassBeanInfoImpl<?> bi=getOrCreate(ci);
    if (bi.isElement())     rootMap.put(ci.getElementName(),bi);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
  }
  for (  RuntimeElementInfo n : typeSet.getAllElements()) {
    ElementBeanInfoImpl bi=getOrCreate(n);
    if (n.getScope() == null)     rootMap.put(n.getElementName(),bi);
    RuntimeClassInfo scope=n.getScope();
    Class scopeClazz=scope == null ? null : scope.getClazz();
    Map<QName,ElementBeanInfoImpl> m=elements.get(scopeClazz);
    if (m == null) {
      m=new LinkedHashMap<QName,ElementBeanInfoImpl>();
      elements.put(scopeClazz,m);
    }
    m.put(n.getElementName(),bi);
  }
  beanInfoMap.put(JAXBElement.class,new ElementBeanInfoImpl(this));
  beanInfoMap.put(CompositeStructure.class,new CompositeStructureBeanInfo(this));
  getOrCreate(typeSet.getAnyTypeInfo());
  for (  JaxBeanInfo bi : beanInfos.values())   bi.link(this);
  for (  Map.Entry<Class,Class> e : RuntimeUtil.primitiveToBox.entrySet())   beanInfoMap.put(e.getKey(),beanInfoMap.get(e.getValue()));
  ReflectionNavigator nav=typeSet.getNavigator();
  for (  TypeReference tr : typeRefs) {
    XmlJavaTypeAdapter xjta=tr.get(XmlJavaTypeAdapter.class);
    Adapter<Type,Class> a=null;
    XmlList xl=tr.get(XmlList.class);
    Class erasedType=nav.erasure(tr.type);
    if (xjta != null) {
      a=new Adapter<Type,Class>(xjta.value(),nav);
    }
    if (tr.get(XmlAttachmentRef.class) != null) {
      a=new Adapter<Type,Class>(SwaRefAdapter.class,nav);
      hasSwaRef=true;
    }
    if (a != null) {
      erasedType=nav.erasure(a.defaultType);
    }
    Name name=nameBuilder.createElementName(tr.tagName);
    InternalBridge bridge;
    if (xl == null)     bridge=new BridgeImpl(this,name,getBeanInfo(erasedType,true),tr);
 else     bridge=new BridgeImpl(this,name,new ValueListBeanInfoImpl(this,erasedType),tr);
    if (a != null)     bridge=new BridgeAdapter(bridge,a.adapterType);
    bridges.put(tr,bridge);
  }
  this.nameList=nameBuilder.conclude();
  for (  JaxBeanInfo bi : beanInfos.values())   bi.wrapUp();
  nameBuilder=null;
  beanInfos=null;
}",0.9971554176364108
190683,"public Class<? extends JAXBElement> getType(){
  return JAXBElement.class;
}","public Class<? extends JAXBElement> getType(){
  return (Class<? extends JAXBElement>)super.getType();
}",0.7888888888888889
190684,"public final JAXBElement createInstance(UnmarshallingContext context){
  return createInstanceFromValue(null);
}","public final JAXBElement createInstance(UnmarshallingContext context) throws IllegalAccessException, InvocationTargetException, InstantiationException {
  return createInstanceFromValue(null);
}",0.7320261437908496
190685,"public final JAXBElement createInstanceFromValue(Object o){
  return new JAXBElement(tagName,expectedType,scope,o);
}","public final JAXBElement createInstanceFromValue(Object o) throws IllegalAccessException, InvocationTargetException, InstantiationException {
  if (constructor == null)   return new JAXBElement(tagName,expectedType,scope,o);
 else   return constructor.newInstance(o);
}",0.6062176165803109
190686,"/** 
 * The constructor for the sole instanceof   {@link JaxBeanInfo} forhandling user-created  {@link JAXBElement}. Such   {@link JaxBeanInfo} is used only for marshalling.This is a hack.
 */
protected ElementBeanInfoImpl(final JAXBContextImpl grammar){
  super(grammar,null,JAXBElement.class,true,false,true);
  tagName=null;
  expectedType=null;
  scope=null;
  this.property=new Property<JAXBElement>(){
    public void reset(    JAXBElement o){
      throw new UnsupportedOperationException();
    }
    public void serializeBody(    JAXBElement e,    XMLSerializer target,    Object outerPeer) throws SAXException, IOException, XMLStreamException {
      Class scope=e.getScope();
      if (e.isGlobalScope())       scope=null;
      QName n=e.getName();
      ElementBeanInfoImpl bi=grammar.getElement(scope,n);
      if (bi == null) {
        JaxBeanInfo tbi;
        try {
          tbi=grammar.getBeanInfo(e.getDeclaredType(),true);
        }
 catch (        JAXBException x) {
          target.reportError(null,x);
          return;
        }
        Object value=e.getValue();
        target.startElement(n.getNamespaceURI(),n.getLocalPart(),n.getPrefix(),null);
        if (value == null) {
          target.writeXsiNilTrue();
        }
 else {
          target.childAsXsiType(value,""String_Node_Str"",tbi);
        }
        target.endElement();
      }
 else {
        try {
          bi.property.serializeBody(e,target,e);
        }
 catch (        AccessorException x) {
          target.reportError(null,x);
        }
      }
    }
    public void serializeURIs(    JAXBElement o,    XMLSerializer target){
    }
    public boolean hasSerializeURIAction(){
      return false;
    }
    public String getIdValue(    JAXBElement o){
      return null;
    }
    public PropertyKind getKind(){
      return PropertyKind.ELEMENT;
    }
    public void buildChildElementUnmarshallers(    UnmarshallerChain chain,    QNameMap<ChildLoader> handlers){
    }
    public Accessor getElementPropertyAccessor(    String nsUri,    String localName){
      throw new UnsupportedOperationException();
    }
    public void wrapUp(){
    }
  }
;
}","/** 
 * The constructor for the sole instanceof   {@link JaxBeanInfo} forhandling user-created  {@link JAXBElement}. Such   {@link JaxBeanInfo} is used only for marshalling.This is a hack.
 */
protected ElementBeanInfoImpl(final JAXBContextImpl grammar){
  super(grammar,null,JAXBElement.class,true,false,true);
  tagName=null;
  expectedType=null;
  scope=null;
  constructor=null;
  this.property=new Property<JAXBElement>(){
    public void reset(    JAXBElement o){
      throw new UnsupportedOperationException();
    }
    public void serializeBody(    JAXBElement e,    XMLSerializer target,    Object outerPeer) throws SAXException, IOException, XMLStreamException {
      Class scope=e.getScope();
      if (e.isGlobalScope())       scope=null;
      QName n=e.getName();
      ElementBeanInfoImpl bi=grammar.getElement(scope,n);
      if (bi == null) {
        JaxBeanInfo tbi;
        try {
          tbi=grammar.getBeanInfo(e.getDeclaredType(),true);
        }
 catch (        JAXBException x) {
          target.reportError(null,x);
          return;
        }
        Object value=e.getValue();
        target.startElement(n.getNamespaceURI(),n.getLocalPart(),n.getPrefix(),null);
        if (value == null) {
          target.writeXsiNilTrue();
        }
 else {
          target.childAsXsiType(value,""String_Node_Str"",tbi);
        }
        target.endElement();
      }
 else {
        try {
          bi.property.serializeBody(e,target,e);
        }
 catch (        AccessorException x) {
          target.reportError(null,x);
        }
      }
    }
    public void serializeURIs(    JAXBElement o,    XMLSerializer target){
    }
    public boolean hasSerializeURIAction(){
      return false;
    }
    public String getIdValue(    JAXBElement o){
      return null;
    }
    public PropertyKind getKind(){
      return PropertyKind.ELEMENT;
    }
    public void buildChildElementUnmarshallers(    UnmarshallerChain chain,    QNameMap<ChildLoader> handlers){
    }
    public Accessor getElementPropertyAccessor(    String nsUri,    String localName){
      throw new UnsupportedOperationException();
    }
    public void wrapUp(){
    }
  }
;
}",0.9953682260305696
190687,"public void set(BeanT bean,Object value) throws AccessorException {
  if (value != null) {
    value=ebi.createInstanceFromValue(value);
  }
  acc.set(bean,(ValueT)value);
}","public void set(BeanT bean,Object value) throws AccessorException {
  if (value != null) {
    try {
      value=ebi.createInstanceFromValue(value);
    }
 catch (    IllegalAccessException e) {
      throw new AccessorException(e);
    }
catch (    InvocationTargetException e) {
      throw new AccessorException(e);
    }
catch (    InstantiationException e) {
      throw new AccessorException(e);
    }
  }
  acc.set(bean,(ValueT)value);
}",0.5607779578606159
190688,"@Override public Accessor getElementPropertyAccessor(String nsUri,String localName){
  JaxBeanInfo bi=expectedElements.get(nsUri,localName);
  if (bi != null) {
    if (bi instanceof ElementBeanInfoImpl) {
      final ElementBeanInfoImpl ebi=(ElementBeanInfoImpl)bi;
      return new Accessor<BeanT,Object>(ebi.expectedType){
        public Object get(        BeanT bean) throws AccessorException {
          ValueT r=acc.get(bean);
          if (r instanceof JAXBElement) {
            return ((JAXBElement)r).getValue();
          }
 else           return r;
        }
        public void set(        BeanT bean,        Object value) throws AccessorException {
          if (value != null) {
            value=ebi.createInstanceFromValue(value);
          }
          acc.set(bean,(ValueT)value);
        }
      }
;
    }
 else {
      return acc;
    }
  }
 else   return null;
}","@Override public Accessor getElementPropertyAccessor(String nsUri,String localName){
  JaxBeanInfo bi=expectedElements.get(nsUri,localName);
  if (bi != null) {
    if (bi instanceof ElementBeanInfoImpl) {
      final ElementBeanInfoImpl ebi=(ElementBeanInfoImpl)bi;
      return new Accessor<BeanT,Object>(ebi.expectedType){
        public Object get(        BeanT bean) throws AccessorException {
          ValueT r=acc.get(bean);
          if (r instanceof JAXBElement) {
            return ((JAXBElement)r).getValue();
          }
 else           return r;
        }
        public void set(        BeanT bean,        Object value) throws AccessorException {
          if (value != null) {
            try {
              value=ebi.createInstanceFromValue(value);
            }
 catch (            IllegalAccessException e) {
              throw new AccessorException(e);
            }
catch (            InvocationTargetException e) {
              throw new AccessorException(e);
            }
catch (            InstantiationException e) {
              throw new AccessorException(e);
            }
          }
          acc.set(bean,(ValueT)value);
        }
      }
;
    }
 else {
      return acc;
    }
  }
 else   return null;
}",0.8310588235294117
190689,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    flushText();
    int len=atts.getLength();
    serializer.startElement(namespaceURI,localName,getPrefix(qName),null);
    for (int i=0; i < prefixMap.size(); i+=2) {
      serializer.getNamespaceContext().force(prefixMap.get(i + 1),prefixMap.get(i));
    }
    for (int i=0; i < len; i++) {
      String qname=atts.getQName(i);
      if (qname.startsWith(""String_Node_Str""))       continue;
      String prefix=getPrefix(qname);
      serializer.getNamespaceContext().declareNamespace(atts.getURI(i),prefix,true);
    }
    serializer.endNamespaceDecls(null);
    for (int i=0; i < len; i++) {
      if (atts.getQName(i).startsWith(""String_Node_Str""))       continue;
      serializer.attribute(atts.getURI(i),atts.getLocalName(i),atts.getValue(i));
    }
    prefixMap.clear();
    serializer.endAttributes();
  }
 catch (  IOException e) {
    throw new SAXException2(e);
  }
catch (  XMLStreamException e) {
    throw new SAXException2(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    flushText();
    int len=atts.getLength();
    String p=getPrefix(qName);
    if (containsPrefixMapping(p,namespaceURI))     serializer.startElementForce(namespaceURI,localName,p,null);
 else     serializer.startElement(namespaceURI,localName,p,null);
    for (int i=0; i < prefixMap.size(); i+=2) {
      serializer.getNamespaceContext().force(prefixMap.get(i + 1),prefixMap.get(i));
    }
    for (int i=0; i < len; i++) {
      String qname=atts.getQName(i);
      if (qname.startsWith(""String_Node_Str""))       continue;
      String prefix=getPrefix(qname);
      serializer.getNamespaceContext().declareNamespace(atts.getURI(i),prefix,true);
    }
    serializer.endNamespaceDecls(null);
    for (int i=0; i < len; i++) {
      if (atts.getQName(i).startsWith(""String_Node_Str""))       continue;
      serializer.attribute(atts.getURI(i),atts.getLocalName(i),atts.getValue(i));
    }
    prefixMap.clear();
    serializer.endAttributes();
  }
 catch (  IOException e) {
    throw new SAXException2(e);
  }
catch (  XMLStreamException e) {
    throw new SAXException2(e);
  }
}",0.8965819456617002
190690,"/** 
 * Sets the target version of the compilation
 */
public void setTarget(String version){
  options.target=Options.Target.parse(version);
  if (options.target == null)   throw new BuildException(version + ""String_Node_Str"");
}","/** 
 * Sets the target version of the compilation
 */
public void setTarget(String version){
  options.target=SpecVersion.parse(version);
  if (options.target == null)   throw new BuildException(version + ""String_Node_Str"");
}",0.9452954048140044
190691,"protected InternalBridge(JAXBRIContext context){
  super(context);
}","protected InternalBridge(JAXBContextImpl context){
  super(context);
}",0.9565217391304348
190692,"/** 
 * Applies the additional binding customizations.
 */
public void apply(XSSchemaSet schema,ErrorReceiver errorReceiver){
  if (topLevel != null) {
    this.errorReceiver=errorReceiver;
    UnmarshallerImpl u=BindInfo.getJAXBContext().createUnmarshaller();
    this.unmarshaller=u.getUnmarshallerHandler();
    ValidatorHandler v=BindInfo.bindingFileSchema.newValidator();
    v.setErrorHandler(errorReceiver);
    loader=new ForkContentHandler(v,unmarshaller);
    topLevel.apply(schema.getSchemas());
    this.loader=null;
    this.unmarshaller=null;
    this.errorReceiver=null;
  }
}","/** 
 * Applies the additional binding customizations.
 */
public void apply(XSSchemaSet schema,ErrorReceiver errorReceiver){
  if (topLevel != null) {
    this.errorReceiver=errorReceiver;
    UnmarshallerImpl u=BindInfo.getJAXBContext().createUnmarshaller();
    this.unmarshaller=u.getUnmarshallerHandler();
    ValidatorHandler v=BindInfo.bindingFileSchema.newValidator();
    v.setErrorHandler(errorReceiver);
    loader=new ForkContentHandler(v,unmarshaller);
    topLevel.applyAll(schema.getSchemas());
    this.loader=null;
    this.unmarshaller=null;
    this.errorReceiver=null;
  }
}",0.9974683544303796
190693,"/** 
 * Gets the   {@link JAXBRIContext} to which this object belongs.
 * @since 2.1
 */
public final @NotNull JAXBRIContext getContext(){
  return context;
}","/** 
 * Gets the   {@link JAXBRIContext} to which this object belongs.
 * @since 2.1
 */
public @NotNull JAXBRIContext getContext(){
  return context;
}",0.9806451612903224
190694,"protected Bridge(JAXBRIContext context){
  this.context=context;
}","protected Bridge(JAXBContextImpl context){
  this.context=context;
}",0.9552238805970148
190695,"protected InternalBridge(JAXBContextImpl context){
  super(context);
}","protected InternalBridge(JAXBRIContext context){
  super(context);
}",0.9565217391304348
190696,"public void endDTD() throws SAXException {
  for (  Element e : elements.values())   e.bind();
  if (errorReceiver.hadError())   return;
  processInterfaceDeclarations();
  model.serialVersionUID=bindInfo.getSerialVersionUID();
  model.rootClass=bindInfo.getSuperClass();
  model.rootInterface=bindInfo.getSuperInterface();
  processConstructorDeclarations();
}","public void endDTD() throws SAXException {
  for (  Element e : elements.values())   e.bind();
  if (errorReceiver.hadError())   return;
  processInterfaceDeclarations();
  model.serialVersionUID=bindInfo.getSerialVersionUID();
  if (model.serialVersionUID != null)   model.serializable=true;
  model.rootClass=bindInfo.getSuperClass();
  model.rootInterface=bindInfo.getSuperInterface();
  processConstructorDeclarations();
}",0.9174078780177892
190697,"protected Bridge(JAXBContextImpl context){
  this.context=context;
}","protected Bridge(JAXBRIContext context){
  this.context=context;
}",0.9552238805970148
190698,"/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 */
private Tree handleElementProp(final ElementPropertyInfo<T,C> ep){
  if (ep.isValueList()) {
    return new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        TypeRef<T,C> t=ep.getTypes().get(0);
        LocalElement e=parent.element();
        QName tn=t.getTagName();
        e.name(tn.getLocalPart());
        List lst=e.simpleType().list();
        writeTypeRef(lst,t,""String_Node_Str"");
        elementFormDefault.writeForm(e,tn);
        writeOccurs(e,isOptional,repeated);
      }
    }
;
  }
  ArrayList<Tree> children=new ArrayList<Tree>();
  for (  final TypeRef<T,C> t : ep.getTypes()) {
    children.add(new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        LocalElement e=parent.element();
        QName tn=t.getTagName();
        if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
          e.ref(tn);
        }
 else {
          e.name(tn.getLocalPart());
          writeTypeRef(e,t,""String_Node_Str"");
          elementFormDefault.writeForm(e,tn);
        }
        if (t.isNillable()) {
          e.nillable(true);
        }
        if (t.getDefaultValue() != null)         e._default(t.getDefaultValue());
        writeOccurs(e,isOptional,repeated);
      }
    }
);
  }
  final Tree choice=Tree.makeGroup(GroupKind.CHOICE,children).makeOptional(!ep.isRequired()).makeRepeated(ep.isCollection());
  final QName ename=ep.getXmlName();
  if (ename != null) {
    return new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        LocalElement e=parent.element();
        if (ename.getNamespaceURI().length() > 0) {
          if (!ename.getNamespaceURI().equals(uri)) {
            e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
            return;
          }
        }
        e.name(ename.getLocalPart());
        elementFormDefault.writeForm(e,ename);
        if (ep.isCollectionNillable()) {
          e.nillable(true);
        }
        writeOccurs(e,true,repeated);
        ComplexType p=e.complexType();
        choice.write(p);
      }
    }
;
  }
 else {
    return choice;
  }
}","/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 */
private Tree handleElementProp(final ElementPropertyInfo<T,C> ep){
  if (ep.isValueList()) {
    return new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        TypeRef<T,C> t=ep.getTypes().get(0);
        LocalElement e=parent.element();
        e.block();
        QName tn=t.getTagName();
        e.name(tn.getLocalPart());
        List lst=e.simpleType().list();
        writeTypeRef(lst,t,""String_Node_Str"");
        elementFormDefault.writeForm(e,tn);
        writeOccurs(e,isOptional || !ep.isRequired(),repeated);
      }
    }
;
  }
  ArrayList<Tree> children=new ArrayList<Tree>();
  for (  final TypeRef<T,C> t : ep.getTypes()) {
    children.add(new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        LocalElement e=parent.element();
        QName tn=t.getTagName();
        if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
          e.ref(tn);
        }
 else {
          e.name(tn.getLocalPart());
          writeTypeRef(e,t,""String_Node_Str"");
          elementFormDefault.writeForm(e,tn);
        }
        if (t.isNillable()) {
          e.nillable(true);
        }
        if (t.getDefaultValue() != null)         e._default(t.getDefaultValue());
        writeOccurs(e,isOptional,repeated);
      }
    }
);
  }
  final Tree choice=Tree.makeGroup(GroupKind.CHOICE,children).makeOptional(!ep.isRequired()).makeRepeated(ep.isCollection());
  final QName ename=ep.getXmlName();
  if (ename != null) {
    return new Tree.Term(){
      protected void write(      ContentModelContainer parent,      boolean isOptional,      boolean repeated){
        LocalElement e=parent.element();
        if (ename.getNamespaceURI().length() > 0) {
          if (!ename.getNamespaceURI().equals(uri)) {
            e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
            return;
          }
        }
        e.name(ename.getLocalPart());
        elementFormDefault.writeForm(e,ename);
        if (ep.isCollectionNillable()) {
          e.nillable(true);
        }
        writeOccurs(e,true,repeated);
        ComplexType p=e.complexType();
        choice.write(p);
      }
    }
;
  }
 else {
    return choice;
  }
}",0.9924608544364972
190699,"public void elementDecl(XSElementDecl decl){
  QName n=BGMBuilder.getName(decl);
  if (elementNames.add(n)) {
    CElement elementBean=Ring.get(ClassSelector.class).bindToType(decl,null);
    if (elementBean == null)     refs.add(new XmlTypeRef(decl));
 else {
      if (elementBean instanceof CClassInfo)       refs.add(new CClassInfoRef(decl,(CClassInfo)elementBean));
 else       refs.add(new CElementInfoRef(decl,(CElementInfo)elementBean));
    }
  }
}","public void elementDecl(XSElementDecl decl){
  QName n=BGMBuilder.getName(decl);
  if (elementNames.add(n)) {
    CElement elementBean=Ring.get(ClassSelector.class).bindToType(decl,null);
    if (elementBean == null)     refs.add(new XmlTypeRef(decl));
 else {
      if (elementBean instanceof CClass)       refs.add(new CClassRef(decl,(CClass)elementBean));
 else       refs.add(new CElementInfoRef(decl,(CElementInfo)elementBean));
    }
  }
}",0.7427937915742794
190700,"public CEnumLeafInfo(Model model,QName typeName,CClassInfoParent container,String shortName,CNonElement base,Collection<CEnumConstant> _members,XSComponent source,CCustomizations customizations,Locator _sourceLocator){
  this.model=model;
  this.parent=container;
  this.shortName=shortName;
  this.base=base;
  this.members=_members;
  this.source=source;
  if (customizations == null)   customizations=CCustomizations.EMPTY;
  this.customizations=customizations;
  this.sourceLocator=_sourceLocator;
  this.typeName=typeName;
  for (  CEnumConstant mem : members)   mem.setParent(this);
  model.add(this);
}","public CEnumLeafInfo(Model model,QName typeName,CClassInfoParent container,String shortName,CNonElement base,Collection<CEnumConstant> _members,XSComponent source,CCustomizations customizations,Locator _sourceLocator){
  this.model=model;
  this.parent=container;
  this.shortName=model.allocator.assignClassName(parent,shortName);
  this.base=base;
  this.members=_members;
  this.source=source;
  if (customizations == null)   customizations=CCustomizations.EMPTY;
  this.customizations=customizations;
  this.sourceLocator=_sourceLocator;
  this.typeName=typeName;
  for (  CEnumConstant mem : members)   mem.setParent(this);
  model.add(this);
}",0.9538950715421304
190701,"/** 
 * Writes out the episode file.
 */
public void writeEpisodeFile(XmlSerializer out){
  Bindings root=TXW.create(Bindings.class,out);
  if (namespaces.containsKey(""String_Node_Str""))   root._namespace(WellKnownNamespace.JAXB,""String_Node_Str"");
  root.version(""String_Node_Str"");
  for (  Map.Entry<String,Namespace> e : namespaces.entrySet()) {
    Bindings group=root.bindings();
    String prefix;
    String tns=e.getKey();
    if (!tns.equals(""String_Node_Str"")) {
      group._namespace(tns,""String_Node_Str"");
      prefix=""String_Node_Str"";
    }
 else {
      prefix=""String_Node_Str"";
    }
    group.scd(""String_Node_Str"" + (tns.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""));
    group.schemaBindings().map(false);
    for (    ClassInfo<T,C> ci : e.getValue().classes) {
      if (ci.getTypeName() == null)       continue;
      Bindings child=group.bindings();
      child.scd('~' + prefix + ci.getTypeName().getLocalPart());
      child.klass().ref(ci.getName());
      if (ci.isElement()) {
        child=group.bindings();
        child.scd(prefix + ci.getElementName().getLocalPart());
        child.klass().ref(ci.getName());
      }
    }
    for (    EnumLeafInfo<T,C> en : e.getValue().enums) {
      if (en.getTypeName() == null)       continue;
      Bindings child=group.bindings();
      child.scd('~' + prefix + en.getTypeName().getLocalPart());
      child.klass().ref(navigator.getClassName(en.getClazz()));
    }
    group.commit(true);
  }
  root.commit();
}","/** 
 * Writes out the episode file.
 */
public void writeEpisodeFile(XmlSerializer out){
  Bindings root=TXW.create(Bindings.class,out);
  if (namespaces.containsKey(""String_Node_Str""))   root._namespace(WellKnownNamespace.JAXB,""String_Node_Str"");
  root.version(""String_Node_Str"");
  for (  Map.Entry<String,Namespace> e : namespaces.entrySet()) {
    Bindings group=root.bindings();
    String prefix;
    String tns=e.getKey();
    if (!tns.equals(""String_Node_Str"")) {
      group._namespace(tns,""String_Node_Str"");
      prefix=""String_Node_Str"";
    }
 else {
      prefix=""String_Node_Str"";
    }
    group.scd(""String_Node_Str"" + (tns.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""));
    group.schemaBindings().map(false);
    for (    ClassInfo<T,C> ci : e.getValue().classes) {
      if (ci.getTypeName() == null)       continue;
      if (ci.getTypeName().getNamespaceURI().equals(tns)) {
        Bindings child=group.bindings();
        child.scd('~' + prefix + ci.getTypeName().getLocalPart());
        child.klass().ref(ci.getName());
      }
      if (ci.isElement() && ci.getElementName().getNamespaceURI().equals(tns)) {
        Bindings child=group.bindings();
        child.scd(prefix + ci.getElementName().getLocalPart());
        child.klass().ref(ci.getName());
      }
    }
    for (    EnumLeafInfo<T,C> en : e.getValue().enums) {
      if (en.getTypeName() == null)       continue;
      Bindings child=group.bindings();
      child.scd('~' + prefix + en.getTypeName().getLocalPart());
      child.klass().ref(navigator.getClassName(en.getClazz()));
    }
    group.commit(true);
  }
  root.commit();
}",0.956989247311828
190702,"/** 
 * Picks one document at random and returns it.
 */
public Document getOneDocument(){
  return core.values().iterator().next();
}","/** 
 * Picks one document at random and returns it.
 */
public Document getOneDocument(){
  for (  Document dom : core.values()) {
    if (!dom.getDocumentElement().getNamespaceURI().equals(Const.JAXB_NSURI))     return dom;
  }
  throw new AssertionError();
}",0.5569620253164557
190703,"public String getNamespaceURI(String prefix){
  Node parent=e;
  String namespace=null;
  if (prefix.equals(""String_Node_Str"")) {
    namespace=WellKnownNamespace.XML_NAMESPACE_URI;
  }
 else {
    int type;
    while ((null != parent) && (null == namespace) && (((type=parent.getNodeType()) == Node.ELEMENT_NODE) || (type == Node.ENTITY_REFERENCE_NODE))) {
      if (type == Node.ELEMENT_NODE) {
        if (parent.getNodeName().indexOf(prefix + ':') == 0)         return parent.getNamespaceURI();
        NamedNodeMap nnm=parent.getAttributes();
        for (int i=0; i < nnm.getLength(); i++) {
          Node attr=nnm.item(i);
          String aname=attr.getNodeName();
          boolean isPrefix=aname.startsWith(""String_Node_Str"");
          if (isPrefix || aname.equals(""String_Node_Str"")) {
            int index=aname.indexOf(':');
            String p=isPrefix ? aname.substring(index + 1) : ""String_Node_Str"";
            if (p.equals(prefix)) {
              namespace=attr.getNodeValue();
              break;
            }
          }
        }
      }
      parent=parent.getParentNode();
    }
  }
  return namespace;
}","public String getNamespaceURI(String prefix){
  Node parent=e;
  String namespace=null;
  final String prefixColon=prefix + ':';
  if (prefix.equals(""String_Node_Str"")) {
    namespace=WellKnownNamespace.XML_NAMESPACE_URI;
  }
 else {
    int type;
    while ((null != parent) && (null == namespace) && (((type=parent.getNodeType()) == Node.ELEMENT_NODE) || (type == Node.ENTITY_REFERENCE_NODE))) {
      if (type == Node.ELEMENT_NODE) {
        if (parent.getNodeName().startsWith(prefixColon))         return parent.getNamespaceURI();
        NamedNodeMap nnm=parent.getAttributes();
        for (int i=0; i < nnm.getLength(); i++) {
          Node attr=nnm.item(i);
          String aname=attr.getNodeName();
          boolean isPrefix=aname.startsWith(""String_Node_Str"");
          if (isPrefix || aname.equals(""String_Node_Str"")) {
            int index=aname.indexOf(':');
            String p=isPrefix ? aname.substring(index + 1) : ""String_Node_Str"";
            if (p.equals(prefix)) {
              namespace=attr.getNodeValue();
              break;
            }
          }
        }
      }
      parent=parent.getParentNode();
    }
  }
  if (prefix.equals(""String_Node_Str""))   return ""String_Node_Str"";
  return namespace;
}",0.4242424242424242
190704,"private static String calculateRelativePath(String uri,String base){
  if (base == null) {
    return null;
  }
  if (uri.startsWith(base)) {
    return uri.substring(base.length());
  }
 else {
    return ""String_Node_Str"" + calculateRelativePath(uri,getParentUriPath(base));
  }
}","private static String calculateRelativePath(String uri,String base,boolean fileUrl){
  boolean onWindows=File.pathSeparatorChar == ';';
  if (base == null) {
    return null;
  }
  if ((fileUrl && onWindows && startsWithIgnoreCase(uri,base)) || uri.startsWith(base)) {
    return uri.substring(base.length());
  }
 else {
    return ""String_Node_Str"" + calculateRelativePath(uri,getParentUriPath(base),fileUrl);
  }
}",0.7839771101573677
190705,"public void set(BeanT bean,OnWireValueT o) throws AccessorException {
  if (o == null)   core.set(bean,null);
 else {
    XmlAdapter<OnWireValueT,InMemValueT> a=getAdapter();
    try {
      core.set(bean,a.unmarshal(o));
    }
 catch (    Exception e) {
      throw new AccessorException(e);
    }
  }
}","public void set(BeanT bean,OnWireValueT o) throws AccessorException {
  XmlAdapter<OnWireValueT,InMemValueT> a=getAdapter();
  try {
    core.set(bean,a.unmarshal(o));
  }
 catch (  Exception e) {
    throw new AccessorException(e);
  }
}",0.8782287822878229
190706,"public OnWireValueT get(BeanT bean) throws AccessorException {
  InMemValueT v=core.get(bean);
  if (v == null)   return null;
  XmlAdapter<OnWireValueT,InMemValueT> a=getAdapter();
  try {
    return a.marshal(v);
  }
 catch (  Exception e) {
    throw new AccessorException(e);
  }
}","public OnWireValueT get(BeanT bean) throws AccessorException {
  InMemValueT v=core.get(bean);
  XmlAdapter<OnWireValueT,InMemValueT> a=getAdapter();
  try {
    return a.marshal(v);
  }
 catch (  Exception e) {
    throw new AccessorException(e);
  }
}",0.9405204460966544
190707,"/** 
 * Returns an union of two   {@link ElementSet}s. This method performs better if lhs is bigger than rhs
 */
public static ElementSet union(ElementSet lhs,ElementSet rhs){
  if (lhs.contains(rhs))   return lhs;
  return new MultiValueSet(lhs,rhs);
}","/** 
 * Returns an union of two   {@link ElementSet}s. This method performs better if lhs is bigger than rhs
 */
public static ElementSet union(ElementSet lhs,ElementSet rhs){
  if (lhs.contains(rhs))   return lhs;
  if (lhs == ElementSet.EMPTY_SET)   return rhs;
  if (rhs == ElementSet.EMPTY_SET)   return lhs;
  return new MultiValueSet(lhs,rhs);
}",0.8377483443708609
190708,"public void process(){
  List<Reference> decls=new ArrayList<Reference>();
  for (  TypeDeclaration d : env.getTypeDeclarations())   decls.add(new Reference(d,env));
  J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,env);
  if (model == null)   return;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=env.getFiler().createBinaryFile(Filer.Location.CLASS_TREE,""String_Node_Str"",file);
        }
        StreamResult ss=new StreamResult(out);
        env.getMessager().printNotice(""String_Node_Str"" + file);
        ss.setSystemId(file.getPath());
        return ss;
      }
    }
,errorListener);
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
}","public void process(){
  List<Reference> decls=new ArrayList<Reference>();
  for (  TypeDeclaration d : env.getTypeDeclarations()) {
    if (d instanceof ClassDeclaration)     decls.add(new Reference(d,env));
  }
  J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,env);
  if (model == null)   return;
  try {
    model.generateSchema(new SchemaOutputResolver(){
      public Result createOutput(      String namespaceUri,      String suggestedFileName) throws IOException {
        File file;
        OutputStream out;
        if (schemaLocations.containsKey(namespaceUri)) {
          file=schemaLocations.get(namespaceUri);
          if (file == null)           return null;
          out=new FileOutputStream(file);
        }
 else {
          file=new File(suggestedFileName);
          out=env.getFiler().createBinaryFile(Filer.Location.CLASS_TREE,""String_Node_Str"",file);
        }
        StreamResult ss=new StreamResult(out);
        env.getMessager().printNotice(""String_Node_Str"" + file);
        ss.setSystemId(file.getPath());
        return ss;
      }
    }
,errorListener);
  }
 catch (  IOException e) {
    errorListener.error(e.getMessage(),e);
  }
}",0.9803593815294608
190709,"public AnnotationProcessor getProcessorFor(Set<AnnotationTypeDeclaration> atds,final AnnotationProcessorEnvironment env){
  return new AnnotationProcessor(){
    final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(env);
    public void process(){
      List<Reference> decls=new ArrayList<Reference>();
      for (      TypeDeclaration d : env.getTypeDeclarations())       decls.add(new Reference(d,env));
      J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,env);
      if (model == null)       return;
      try {
        model.generateSchema(new SchemaOutputResolver(){
          public Result createOutput(          String namespaceUri,          String suggestedFileName) throws IOException {
            File file;
            OutputStream out;
            if (schemaLocations.containsKey(namespaceUri)) {
              file=schemaLocations.get(namespaceUri);
              if (file == null)               return null;
              out=new FileOutputStream(file);
            }
 else {
              file=new File(suggestedFileName);
              out=env.getFiler().createBinaryFile(Filer.Location.CLASS_TREE,""String_Node_Str"",file);
            }
            StreamResult ss=new StreamResult(out);
            env.getMessager().printNotice(""String_Node_Str"" + file);
            ss.setSystemId(file.getPath());
            return ss;
          }
        }
,errorListener);
      }
 catch (      IOException e) {
        errorListener.error(e.getMessage(),e);
      }
    }
  }
;
}","public AnnotationProcessor getProcessorFor(Set<AnnotationTypeDeclaration> atds,final AnnotationProcessorEnvironment env){
  return new AnnotationProcessor(){
    final ErrorReceiverImpl errorListener=new ErrorReceiverImpl(env);
    public void process(){
      List<Reference> decls=new ArrayList<Reference>();
      for (      TypeDeclaration d : env.getTypeDeclarations()) {
        if (d instanceof ClassDeclaration)         decls.add(new Reference(d,env));
      }
      J2SJAXBModel model=XJC.createJavaCompiler().bind(decls,Collections.<QName,Reference>emptyMap(),null,env);
      if (model == null)       return;
      try {
        model.generateSchema(new SchemaOutputResolver(){
          public Result createOutput(          String namespaceUri,          String suggestedFileName) throws IOException {
            File file;
            OutputStream out;
            if (schemaLocations.containsKey(namespaceUri)) {
              file=schemaLocations.get(namespaceUri);
              if (file == null)               return null;
              out=new FileOutputStream(file);
            }
 else {
              file=new File(suggestedFileName);
              out=env.getFiler().createBinaryFile(Filer.Location.CLASS_TREE,""String_Node_Str"",file);
            }
            StreamResult ss=new StreamResult(out);
            env.getMessager().printNotice(""String_Node_Str"" + file);
            ss.setSystemId(file.getPath());
            return ss;
          }
        }
,errorListener);
      }
 catch (      IOException e) {
        errorListener.error(e.getMessage(),e);
      }
    }
  }
;
}",0.9825562955915002
190710,"public Expression modelGroup(XSModelGroup group){
  XSModelGroup.Compositor comp=group.getCompositor();
  if (comp == XSModelGroup.CHOICE) {
    Expression e=null;
    for (    XSParticle p : group.getChildren()) {
      if (e == null)       e=particle(p);
 else       e=new Choice(e,particle(p));
    }
    return e;
  }
 else {
    Expression e=null;
    for (    XSParticle p : group.getChildren()) {
      if (e == null)       e=particle(p);
 else       e=new Sequence(e,particle(p));
    }
    return e;
  }
}","public Expression modelGroup(XSModelGroup group){
  XSModelGroup.Compositor comp=group.getCompositor();
  if (comp == XSModelGroup.CHOICE) {
    Expression e=Expression.EPSILON;
    for (    XSParticle p : group.getChildren()) {
      if (e == null)       e=particle(p);
 else       e=new Choice(e,particle(p));
    }
    return e;
  }
 else {
    Expression e=Expression.EPSILON;
    for (    XSParticle p : group.getChildren()) {
      if (e == null)       e=particle(p);
 else       e=new Sequence(e,particle(p));
    }
    return e;
  }
}",0.9583333333333334
190711,"/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired()) {
      occurs.minOccurs(0);
    }
  }
}","/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection())   occurs.maxOccurs(""String_Node_Str"");
  if (!ep.isRequired())   occurs.minOccurs(0);
}",0.9784112345420248
190712,"@XmlElement(name=""String_Node_Str"") private void setGlobalConversions(GlobalConversion[] convs){
  for (  GlobalConversion u : convs) {
    globalConversions.put(u.xmlType,u);
  }
}","@XmlElement(name=""String_Node_Str"") private void setGlobalConversions(GlobalStandardConversion[] convs){
  for (  GlobalStandardConversion u : convs) {
    globalConversions.put(u.xmlType,u);
  }
}",0.9576719576719576
190713,"/** 
 * Write the XML declaration at the beginning of the document. Pass the event on down the filter chain for further processing.
 * @exception org.xml.sax.SAXException If there is an errorwriting the XML declaration, or if a handler further down the filter chain raises an exception.
 * @see org.xml.sax.ContentHandler#startDocument()
 */
public void startDocument() throws SAXException {
  try {
    reset();
    if (writeXmlDecl) {
      String e=""String_Node_Str"";
      if (encoding != null)       e=""String_Node_Str"" + encoding + '\""';
      write(""String_Node_Str"" + e + ""String_Node_Str"");
    }
    if (header != null)     write(header);
    super.startDocument();
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}","/** 
 * Write the XML declaration at the beginning of the document. Pass the event on down the filter chain for further processing.
 * @exception org.xml.sax.SAXException If there is an errorwriting the XML declaration, or if a handler further down the filter chain raises an exception.
 * @see org.xml.sax.ContentHandler#startDocument()
 */
public void startDocument() throws SAXException {
  try {
    reset();
    if (writeXmlDecl) {
      String e=""String_Node_Str"";
      if (encoding != null)       e=""String_Node_Str"" + encoding + '\""';
      writeXmlDecl(""String_Node_Str"" + e + ""String_Node_Str"");
    }
    if (header != null)     write(header);
    super.startDocument();
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}",0.9953114534494308
190714,"/** 
 * Write a newline at the end of the document. Pass the event on down the filter chain for further processing.
 * @exception org.xml.sax.SAXException If there is an errorwriting the newline, or if a handler further down the filter chain raises an exception.
 * @see org.xml.sax.ContentHandler#endDocument()
 */
public void endDocument() throws SAXException {
  try {
    write('\n');
    super.endDocument();
    flush();
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}","/** 
 * Write a newline at the end of the document. Pass the event on down the filter chain for further processing.
 * @exception org.xml.sax.SAXException If there is an errorwriting the newline, or if a handler further down the filter chain raises an exception.
 * @see org.xml.sax.ContentHandler#endDocument()
 */
public void endDocument() throws SAXException {
  try {
    super.endDocument();
    flush();
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}",0.9824922760041196
190715,"/** 
 * Write a raw string.
 */
private void write(String s) throws IOException {
  output.write(s);
}","/** 
 * Write a raw string.
 */
protected final void write(String s) throws IOException {
  output.write(s);
}",0.9339622641509434
190716,"public boolean isRequired(){
  return !mul.isOptional();
}","public boolean isRequired(){
  return mul.min > 0;
}",0.8545454545454545
190717,"/** 
 * Static field reference. 
 */
public final JFieldRef staticRef(JVar field){
  return staticRef(field.name());
}","/** 
 * Static field reference. 
 */
public final JFieldRef staticRef(JVar field){
  return new JFieldRef(this,field);
}",0.8907563025210085
190718,"JFieldRef(JGenerable object,String name,boolean explicitThis){
  this.explicitThis=explicitThis;
  this.object=object;
  if (name.indexOf('.') >= 0)   throw new IllegalArgumentException(""String_Node_Str"" + name);
  this.name=name;
}","JFieldRef(JGenerable object,JVar var,boolean explicitThis){
  this.explicitThis=explicitThis;
  this.object=object;
  this.var=var;
}",0.6794520547945205
190719,"public void generate(JFormatter f){
  if (object != null) {
    f.g(object).p('.').p(name);
  }
 else {
    if (explicitThis) {
      f.p(""String_Node_Str"").p(name);
    }
 else {
      f.id(name);
    }
  }
}","public void generate(JFormatter f){
  String name=this.name;
  if (name == null)   name=var.name();
  if (object != null) {
    f.g(object).p('.').p(name);
  }
 else {
    if (explicitThis) {
      f.p(""String_Node_Str"").p(name);
    }
 else {
      f.id(name);
    }
  }
}",0.8672199170124482
190720,"/** 
 * We can only have one   {@link XmlAnyElement} property,so all the wildcards need to be treated as one node.
 */
public Expression wildcard(XSWildcard wc){
  if (wildcard == null)   wildcard=new GWildcardElement();
  return wildcard;
}","/** 
 * We can only have one   {@link XmlAnyElement} property,so all the wildcards need to be treated as one node.
 */
public Expression wildcard(XSWildcard wc){
  if (wildcard == null)   wildcard=new GWildcardElement();
  wildcard.particles.add(current);
  return wildcard;
}",0.874274661508704
190721,"/** 
 * Returns true if the array contains a JAXB annotation.
 */
private static boolean hasJAXBAnnotation(Annotation[] annotations){
  for (  Annotation a : annotations)   if (isJAXBAnnotation(a))   return true;
  return false;
}","/** 
 * Returns true if the array contains a JAXB annotation.
 */
private static boolean hasJAXBAnnotation(Annotation[] annotations){
  return getSomeJAXBAnnotation(annotations) != null;
}",0.7894736842105263
190722,"/** 
 * Returns a   {@link ClassInfo} for the given bean.<p> This method is almost like refinement of  {@link #getTypeInfo(Object)} exceptour C cannot derive from T.
 * @return null if the specified type is not bound by JAXB or otherwise unknown to this set.
 */
public NonElement<TypeT,ClassDeclT> getClassInfo(ClassDeclT type){
  LeafInfo<TypeT,ClassDeclT> l=builtins.get(nav.use(type));
  if (l != null)   return l;
  l=enums.get(type);
  if (l != null)   return l;
  return beans.get(type);
}","/** 
 * Returns a   {@link ClassInfo} for the given bean.<p> This method is almost like refinement of  {@link #getTypeInfo(Object)} exceptour C cannot derive from T.
 * @return null if the specified type is not bound by JAXB or otherwise unknown to this set.
 */
public NonElement<TypeT,ClassDeclT> getClassInfo(ClassDeclT type){
  LeafInfo<TypeT,ClassDeclT> l=builtins.get(nav.use(type));
  if (l != null)   return l;
  l=enums.get(type);
  if (l != null)   return l;
  if (nav.asDecl(Object.class).equals(type))   return anyType;
  return beans.get(type);
}",0.9402843601895736
190723,"/** 
 * Runs the schema generator.
 * @param classLoader the schema generator will run in this classLoader. It needs to be able to load APT and JAXB RI classes. Note that JAXB RI classes refer to APT classes. Must not be null.
 * @return exit code. 0 if success.
 */
public static int run(String[] args,ClassLoader classLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  final Options options=new Options();
  if (args.length == 0) {
    usage();
    return -1;
  }
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"")) {
      usage();
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.VERSION.format());
      return -1;
    }
  }
  try {
    options.parseArguments(args);
  }
 catch (  BadCommandLineException e) {
    System.out.println(e.getMessage());
    System.out.println();
    usage();
    return -1;
  }
  Class schemagenRunner=classLoader.loadClass(Runner.class.getName());
  Method mainMethod=schemagenRunner.getDeclaredMethod(""String_Node_Str"",String[].class);
  List<String> aptargs=new ArrayList<String>();
  if (hasClass(options.arguments))   aptargs.add(""String_Node_Str"");
  if (options.classpath != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.classpath);
  }
  if (options.targetDir != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.targetDir.getPath());
  }
  aptargs.addAll(options.arguments);
  String[] argsarray=aptargs.toArray(new String[aptargs.size()]);
  return (Integer)mainMethod.invoke(null,new Object[]{argsarray});
}","/** 
 * Runs the schema generator.
 * @param classLoader the schema generator will run in this classLoader. It needs to be able to load APT and JAXB RI classes. Note that JAXB RI classes refer to APT classes. Must not be null.
 * @return exit code. 0 if success.
 */
public static int run(String[] args,ClassLoader classLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {
  final Options options=new Options();
  if (args.length == 0) {
    usage();
    return -1;
  }
  for (  String arg : args) {
    if (arg.equals(""String_Node_Str"")) {
      usage();
      return -1;
    }
    if (arg.equals(""String_Node_Str"")) {
      System.out.println(Messages.VERSION.format());
      return -1;
    }
  }
  try {
    options.parseArguments(args);
  }
 catch (  BadCommandLineException e) {
    System.out.println(e.getMessage());
    System.out.println();
    usage();
    return -1;
  }
  Class schemagenRunner=classLoader.loadClass(Runner.class.getName());
  Method mainMethod=schemagenRunner.getDeclaredMethod(""String_Node_Str"",String[].class);
  List<String> aptargs=new ArrayList<String>();
  if (hasClass(options.arguments))   aptargs.add(""String_Node_Str"");
  File jaxbApi=findJaxbApiJar();
  if (jaxbApi != null) {
    if (options.classpath != null) {
      options.classpath=options.classpath + File.pathSeparatorChar + jaxbApi;
    }
 else {
      options.classpath=jaxbApi.getPath();
    }
  }
  aptargs.add(""String_Node_Str"");
  aptargs.add(options.classpath);
  if (options.targetDir != null) {
    aptargs.add(""String_Node_Str"");
    aptargs.add(options.targetDir.getPath());
  }
  aptargs.addAll(options.arguments);
  String[] argsarray=aptargs.toArray(new String[aptargs.size()]);
  return (Integer)mainMethod.invoke(null,new Object[]{argsarray});
}",0.9097242380261248
190724,"public void declare(JFormatter f){
  if (jdoc != null)   f.g(jdoc);
  if (annotations != null) {
    for (    JAnnotationUse a : annotations)     f.g(a).nl();
  }
  super.declare(f);
  f.g(mods);
  if (!isConstructor())   f.g(type);
  f.id(name).p('(').i();
  boolean first=true;
  for (  JVar var : params) {
    if (!first)     f.p(',');
    if (var.isAnnotated())     f.nl();
    f.b(var);
    first=false;
  }
  if (hasVarArgs()) {
    if (!first)     f.p(',');
    f.g(varParam.type());
    f.p(""String_Node_Str"");
    f.id(varParam.name());
  }
  f.o().p(')');
  if (_throws != null && !_throws.isEmpty()) {
    f.nl().i().p(""String_Node_Str"").g(_throws).nl().o();
  }
  if (defaultValue != null) {
    f.p(""String_Node_Str"");
    f.g(defaultValue);
  }
  if (body != null) {
    f.s(body);
  }
 else   if (!outer.isInterface() && !outer.isAnnotationTypeDeclaration() && !mods.isAbstract()&& !mods.isNative()) {
    f.s(new JBlock());
  }
 else {
    f.p(';').nl();
  }
}","public void declare(JFormatter f){
  if (jdoc != null)   f.g(jdoc);
  if (annotations != null) {
    for (    JAnnotationUse a : annotations)     f.g(a).nl();
  }
  super.declare(f);
  f.g(mods);
  if (!isConstructor())   f.g(type);
  f.id(name).p('(').i();
  boolean first=true;
  for (  JVar var : params) {
    if (!first)     f.p(',');
    if (var.isAnnotated())     f.nl();
    f.b(var);
    first=false;
  }
  if (hasVarArgs()) {
    if (!first)     f.p(',');
    f.g(varParam.type().elementType());
    f.p(""String_Node_Str"");
    f.id(varParam.name());
  }
  f.o().p(')');
  if (_throws != null && !_throws.isEmpty()) {
    f.nl().i().p(""String_Node_Str"").g(_throws).nl().o();
  }
  if (defaultValue != null) {
    f.p(""String_Node_Str"");
    f.g(defaultValue);
  }
  if (body != null) {
    f.s(body);
  }
 else   if (!outer.isInterface() && !outer.isAnnotationTypeDeclaration() && !mods.isAbstract()&& !mods.isNative()) {
    f.s(new JBlock());
  }
 else {
    f.p(';').nl();
  }
}",0.9928861788617886
190725,"public JType elementType(){
  throw new IllegalArgumentException(""String_Node_Str"");
}","/** 
 * If this is an array, returns the component type of the array. (T of T[])
 */
public JType elementType(){
  throw new IllegalArgumentException(""String_Node_Str"");
}",0.669260700389105
190726,"/** 
 * Returns true if the symbol represented by the short name is ""importable"".
 */
public boolean collisions(JDefinedClass enclosingClass){
  if (classes.size() > 1)   return true;
  if (id && classes.size() != 0)   return true;
  for (  JClass c : classes) {
    if (c._package() == javaLang) {
      Iterator itr=enclosingClass._package().classes();
      while (itr.hasNext()) {
        JDefinedClass n=(JDefinedClass)itr.next();
        if (n.name().equals(c.name()))         return true;
      }
    }
  }
  return false;
}","/** 
 * Returns true if the symbol represented by the short name is ""importable"".
 */
public boolean collisions(JDefinedClass enclosingClass){
  if (classes.size() > 1)   return true;
  if (id && classes.size() != 0)   return true;
  for (  JClass c : classes) {
    if (c._package() == javaLang) {
      Iterator itr=enclosingClass._package().classes();
      while (itr.hasNext()) {
        JDefinedClass n=(JDefinedClass)itr.next();
        if (n.name().equals(c.name()))         return true;
      }
    }
    if (c.outer() != null)     return true;
  }
  return false;
}",0.9602169981916816
190727,"/** 
 * Print a type name. <p> In the collecting mode we use this information to decide what types to import and what not to.
 */
public JFormatter t(JClass type){
switch (mode) {
case PRINTING:
    if (importedClasses.contains(type)) {
      p(type.name());
    }
 else {
      p(type.fullName());
    }
  break;
case COLLECTING:
final String shortName=type.name();
if (collectedReferences.containsKey(shortName)) {
collectedReferences.get(shortName).add(type);
}
 else {
ReferenceList tl=new ReferenceList();
tl.add(type);
collectedReferences.put(shortName,tl);
}
break;
}
return this;
}","/** 
 * Print a type name. <p> In the collecting mode we use this information to decide what types to import and what not to.
 */
public JFormatter t(JClass type){
switch (mode) {
case PRINTING:
    if (importedClasses.contains(type)) {
      p(type.name());
    }
 else {
      if (type.outer() != null)       t(type.outer()).p('.').p(type.name());
 else       p(type.fullName());
    }
  break;
case COLLECTING:
final String shortName=type.name();
if (collectedReferences.containsKey(shortName)) {
collectedReferences.get(shortName).add(type);
}
 else {
ReferenceList tl=new ReferenceList();
tl.add(type);
collectedReferences.put(shortName,tl);
}
break;
}
return this;
}",0.9341792228390168
190728,"public boolean run(Outline outline,Options opt,ErrorHandler errorHandler){
  for (  ClassOutline ci : outline.getClasses()) {
    JDefinedClass impl=ci.implClass;
    if (ci.getSuperClass() == null) {
      JVar $loc=impl.field(JMod.PROTECTED,Locator.class,fieldName);
      $loc.annotate(XmlLocation.class);
      impl._implements(Locatable.class);
      impl.method(JMod.PUBLIC,Locator.class,""String_Node_Str"").body()._return($loc);
    }
  }
  return true;
}","public boolean run(Outline outline,Options opt,ErrorHandler errorHandler){
  for (  ClassOutline ci : outline.getClasses()) {
    JDefinedClass impl=ci.implClass;
    if (ci.getSuperClass() == null) {
      JVar $loc=impl.field(JMod.PROTECTED,Locator.class,fieldName);
      $loc.annotate(XmlLocation.class);
      $loc.annotate(XmlTransient.class);
      impl._implements(Locatable.class);
      impl.method(JMod.PUBLIC,Locator.class,""String_Node_Str"").body()._return($loc);
    }
  }
  return true;
}",0.9574247144340602
190729,"public void generatedFile(String fileName){
  message(fileName);
}","public void generatedFile(String fileName,int count,int total){
  message(fileName);
}",0.868421052631579
190730,"public ProgressCodeWriter(CodeWriter output,XJCListener progress){
  super(output);
  this.progress=progress;
  if (progress == null)   throw new IllegalArgumentException();
}","public ProgressCodeWriter(CodeWriter output,XJCListener progress,int totalFileCount){
  super(output);
  this.progress=progress;
  this.totalFileCount=totalFileCount;
  if (progress == null)   throw new IllegalArgumentException();
}",0.85995085995086
190731,"private void report(JPackage pkg,String fileName){
  String name=pkg.name().replace('.',File.separatorChar);
  if (name.length() != 0)   name+=File.separatorChar;
  name+=fileName;
  progress.generatedFile(name);
}","private void report(JPackage pkg,String fileName){
  String name=pkg.name().replace('.',File.separatorChar);
  if (name.length() != 0)   name+=File.separatorChar;
  name+=fileName;
  progress.generatedFile(name,current++,totalFileCount);
}",0.9448123620309052
190732,"/** 
 * Called for each file generated by XJC. <p> XJC may generate not only source files but also resources files. The file name includes the path portions that correspond with the package name. <p> When generating files into a directory, file names will be relative to the output directory. When generating files into a zip file, file names will be those in the zip file.
 * @param fileName file names like ""org/acme/foo/Foo.java"" or ""org/acme/foo/jaxb.properties"".
 */
public void generatedFile(String fileName){
}","/** 
 * Called for each file generated by XJC. <p> XJC may generate not only source files but also resources files. The file name includes the path portions that correspond with the package name. <p> When generating files into a directory, file names will be relative to the output directory. When generating files into a zip file, file names will be those in the zip file.
 * @param fileName file names like ""org/acme/foo/Foo.java"" or ""org/acme/foo/jaxb.properties"".
 * @since 2.0.1
 */
public void generatedFile(String fileName,int current,int total){
  generatedFile(fileName);
}",0.940855323020928
190733,"/** 
 * Wraps the annotation into a proxy so that the returned object will also implement  {@link Locatable}.
 */
public static <A extends Annotation>A create(A annotation,Locatable parentSourcePos){
  if (annotation == null)   return null;
  Class<? extends Annotation> type=annotation.annotationType();
  if (quicks.containsKey(type)) {
    return (A)quicks.get(type).newInstance(parentSourcePos,annotation);
  }
  return (A)Proxy.newProxyInstance(LocatableAnnotation.class.getClassLoader(),new Class[]{type,Locatable.class},new LocatableAnnotation(annotation,parentSourcePos));
}","/** 
 * Wraps the annotation into a proxy so that the returned object will also implement  {@link Locatable}.
 */
public static <A extends Annotation>A create(A annotation,Locatable parentSourcePos){
  if (annotation == null)   return null;
  Class<? extends Annotation> type=annotation.annotationType();
  if (quicks.containsKey(type)) {
    return (A)quicks.get(type).newInstance(parentSourcePos,annotation);
  }
  ClassLoader cl=LocatableAnnotation.class.getClassLoader();
  try {
    Class loadableT=Class.forName(type.getName(),false,cl);
    if (loadableT != type)     return annotation;
    return (A)Proxy.newProxyInstance(cl,new Class[]{type,Locatable.class},new LocatableAnnotation(annotation,parentSourcePos));
  }
 catch (  ClassNotFoundException e) {
    return annotation;
  }
}",0.7860262008733624
190734,"private void indentEndTag() throws IOException {
  depth--;
  if (!seenText)   printIndent();
  seenText=false;
}","private void indentEndTag() throws IOException {
  depth--;
  if (!closeStartTagPending && !seenText)   printIndent();
  seenText=false;
}",0.900398406374502
190735,"private void indentStartTag() throws IOException {
  if (!seenText)   printIndent();
  depth++;
  seenText=false;
}","private void indentStartTag() throws IOException {
  closeStartTag();
  if (!seenText)   printIndent();
  depth++;
  seenText=false;
}",0.923694779116466
190736,"public void beginStartTag(Name name) throws IOException {
  int base=pushNsDecls();
  write('<');
  writeName(name);
  writeNsDecls(base);
}","public void beginStartTag(Name name) throws IOException {
  closeStartTag();
  int base=pushNsDecls();
  write('<');
  writeName(name);
  writeNsDecls(base);
}",0.9364548494983278
190737,"public void endStartTag() throws IOException {
  write('>');
}","public void endStartTag() throws IOException {
  closeStartTagPending=true;
}",0.8057553956834532
190738,"public void endTag(int prefix,String localName) throws IOException {
  write(CLOSE_TAG);
  writeName(prefix,localName);
  write('>');
}","public void endTag(int prefix,String localName) throws IOException {
  if (closeStartTagPending) {
    write(EMPTY_TAG);
    closeStartTagPending=false;
  }
 else {
    write(CLOSE_TAG);
    writeName(prefix,localName);
    write('>');
  }
}",0.7180851063829787
190739,"/** 
 * Writes the given byte[] as base64 encoded binary to the output. <p> Being defined on this class allows this method to access the buffer directly, which translates to a better performance.
 */
public void text(byte[] data,int dataLen) throws IOException {
  int start=0;
  while (dataLen > 0) {
    int batchSize=Math.min(((octetBuffer.length - octetBufferIndex) / 4) * 3,dataLen);
    octetBufferIndex=DatatypeConverterImpl._printBase64Binary(data,start,batchSize,octetBuffer,octetBufferIndex);
    if (batchSize < dataLen)     flushBuffer();
    start+=batchSize;
    dataLen-=batchSize;
  }
}","/** 
 * Writes the given byte[] as base64 encoded binary to the output. <p> Being defined on this class allows this method to access the buffer directly, which translates to a better performance.
 */
public void text(byte[] data,int dataLen) throws IOException {
  closeStartTag();
  int start=0;
  while (dataLen > 0) {
    int batchSize=Math.min(((octetBuffer.length - octetBufferIndex) / 4) * 3,dataLen);
    octetBufferIndex=DatatypeConverterImpl._printBase64Binary(data,start,batchSize,octetBuffer,octetBufferIndex);
    if (batchSize < dataLen)     flushBuffer();
    start+=batchSize;
    dataLen-=batchSize;
  }
}",0.9844644317252658
190740,"private QName calcXmlName(String uri,String local){
  TODO.checkSpec();
  if (local.length() == 0 || local.equals(""String_Node_Str""))   local=seed.getName();
  if (uri.equals(""String_Node_Str"")) {
    XmlSchema xs=reader().getPackageAnnotation(XmlSchema.class,parent.getClazz(),this);
    if (xs != null) {
switch (xs.elementFormDefault()) {
case QUALIFIED:
        uri=parent.getTypeName().getNamespaceURI();
      if (uri.length() == 0)       uri=parent.builder.defaultNsUri;
    break;
case UNQUALIFIED:
case UNSET:
  uri=""String_Node_Str"";
}
}
 else {
uri=""String_Node_Str"";
}
}
return new QName(uri.intern(),local.intern());
}","private QName calcXmlName(String uri,String local){
  TODO.checkSpec();
  if (local.length() == 0 || local.equals(""String_Node_Str""))   local=seed.getName();
  if (uri.equals(""String_Node_Str"")) {
    XmlSchema xs=reader().getPackageAnnotation(XmlSchema.class,parent.getClazz(),this);
    if (xs != null) {
switch (xs.elementFormDefault()) {
case QUALIFIED:
        QName typeName=parent.getTypeName();
      if (typeName != null)       uri=typeName.getNamespaceURI();
 else       uri=xs.namespace();
    if (uri.length() == 0)     uri=parent.builder.defaultNsUri;
  break;
case UNQUALIFIED:
case UNSET:
uri=""String_Node_Str"";
}
}
 else {
uri=""String_Node_Str"";
}
}
return new QName(uri.intern(),local.intern());
}",0.9234200743494424
190741,"/** 
 * Gets the XML type name of the class.
 * @return null if the object doesn't have an explicit type name (AKA anonymous.)
 */
QName getTypeName();","/** 
 * Gets the primary XML type name of the class. <p> A Java type can be mapped to multiple XML types, but one of them is considered ""primary"" and used when we generate a schema.
 * @return null if the object doesn't have an explicit type name (AKA anonymous.)
 */
QName getTypeName();",0.6879271070615034
190742,"public CompositeStructureBeanInfo(JAXBContextImpl context){
  super(context,null,CompositeStructure.class,null,false,true,false);
}","public CompositeStructureBeanInfo(JAXBContextImpl context){
  super(context,null,CompositeStructure.class,false,true,false);
}",0.980544747081712
190743,"/** 
 * The constructor for the sole instanceof   {@link JaxBeanInfo} forhandling user-created  {@link JAXBElement}. Such   {@link JaxBeanInfo} is used only for marshalling.This is a hack.
 */
protected ElementBeanInfoImpl(final JAXBContextImpl grammar){
  super(grammar,null,JAXBElement.class,null,true,false,true);
  tagName=null;
  expectedType=null;
  scope=null;
  this.property=new Property<JAXBElement>(){
    public void reset(    JAXBElement o){
      throw new UnsupportedOperationException();
    }
    public void serializeBody(    JAXBElement e,    XMLSerializer target,    Object outerPeer) throws SAXException, IOException, XMLStreamException {
      Class scope=e.getScope();
      if (e.isGlobalScope())       scope=null;
      QName n=e.getName();
      ElementBeanInfoImpl bi=grammar.getElement(scope,n);
      if (bi == null) {
        JaxBeanInfo tbi;
        try {
          tbi=grammar.getBeanInfo(e.getDeclaredType(),true);
        }
 catch (        JAXBException x) {
          target.reportError(null,x);
          return;
        }
        Object value=e.getValue();
        target.startElement(n.getNamespaceURI(),n.getLocalPart(),n.getPrefix(),null);
        if (value == null) {
          target.writeXsiNilTrue();
        }
 else {
          target.childAsXsiType(value,""String_Node_Str"",tbi);
        }
        target.endElement();
      }
 else {
        try {
          bi.property.serializeBody(e,target,e);
        }
 catch (        AccessorException x) {
          target.reportError(null,x);
        }
      }
    }
    public void serializeURIs(    JAXBElement o,    XMLSerializer target){
    }
    public boolean hasSerializeURIAction(){
      return false;
    }
    public String getIdValue(    JAXBElement o){
      return null;
    }
    public PropertyKind getKind(){
      return PropertyKind.ELEMENT;
    }
    public void buildChildElementUnmarshallers(    UnmarshallerChain chain,    QNameMap<ChildLoader> handlers){
    }
    public Accessor getElementPropertyAccessor(    String nsUri,    String localName){
      throw new UnsupportedOperationException();
    }
    public void wrapUp(){
    }
  }
;
}","/** 
 * The constructor for the sole instanceof   {@link JaxBeanInfo} forhandling user-created  {@link JAXBElement}. Such   {@link JaxBeanInfo} is used only for marshalling.This is a hack.
 */
protected ElementBeanInfoImpl(final JAXBContextImpl grammar){
  super(grammar,null,JAXBElement.class,true,false,true);
  tagName=null;
  expectedType=null;
  scope=null;
  this.property=new Property<JAXBElement>(){
    public void reset(    JAXBElement o){
      throw new UnsupportedOperationException();
    }
    public void serializeBody(    JAXBElement e,    XMLSerializer target,    Object outerPeer) throws SAXException, IOException, XMLStreamException {
      Class scope=e.getScope();
      if (e.isGlobalScope())       scope=null;
      QName n=e.getName();
      ElementBeanInfoImpl bi=grammar.getElement(scope,n);
      if (bi == null) {
        JaxBeanInfo tbi;
        try {
          tbi=grammar.getBeanInfo(e.getDeclaredType(),true);
        }
 catch (        JAXBException x) {
          target.reportError(null,x);
          return;
        }
        Object value=e.getValue();
        target.startElement(n.getNamespaceURI(),n.getLocalPart(),n.getPrefix(),null);
        if (value == null) {
          target.writeXsiNilTrue();
        }
 else {
          target.childAsXsiType(value,""String_Node_Str"",tbi);
        }
        target.endElement();
      }
 else {
        try {
          bi.property.serializeBody(e,target,e);
        }
 catch (        AccessorException x) {
          target.reportError(null,x);
        }
      }
    }
    public void serializeURIs(    JAXBElement o,    XMLSerializer target){
    }
    public boolean hasSerializeURIAction(){
      return false;
    }
    public String getIdValue(    JAXBElement o){
      return null;
    }
    public PropertyKind getKind(){
      return PropertyKind.ELEMENT;
    }
    public void buildChildElementUnmarshallers(    UnmarshallerChain chain,    QNameMap<ChildLoader> handlers){
    }
    public Accessor getElementPropertyAccessor(    String nsUri,    String localName){
      throw new UnsupportedOperationException();
    }
    public void wrapUp(){
    }
  }
;
}",0.9988380199860564
190744,"/** 
 * @param typeRefs used to build  {@link Bridge}s. Can be empty.
 * @param c14nSupport {@link #c14nSupport}.
 */
public JAXBContextImpl(Class[] classes,Collection<TypeReference> typeRefs,String defaultNsUri,boolean c14nSupport) throws JAXBException {
}","/** 
 * @param typeRefs used to build  {@link Bridge}s. Can be empty.
 * @param c14nSupport {@link #c14nSupport}.
 */
public JAXBContextImpl(Class[] classes,Collection<TypeReference> typeRefs,String defaultNsUri,boolean c14nSupport) throws JAXBException {
  if (defaultNsUri == null)   defaultNsUri=""String_Node_Str"";
  this.defaultNsUri=defaultNsUri;
  this.c14nSupport=c14nSupport;
  this.classes=new Class[classes.length];
  System.arraycopy(classes,0,this.classes,0,classes.length);
  RuntimeTypeInfoSet typeSet=getTypeInfoSet();
  elements.put(null,new LinkedHashMap<QName,ElementBeanInfoImpl>());
  for (  RuntimeBuiltinLeafInfo leaf : RuntimeBuiltinLeafInfoImpl.builtinBeanInfos) {
    LeafBeanInfoImpl<?> bi=new LeafBeanInfoImpl(this,leaf);
    beanInfoMap.put(leaf.getClazz(),bi);
    for (    QName t : bi.getTypeNames())     typeMap.put(t,bi);
  }
  for (  RuntimeEnumLeafInfo e : typeSet.enums().values()) {
    JaxBeanInfo<?> bi=getOrCreate(e);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
    if (e.isElement())     rootMap.put(e.getElementName(),bi);
  }
  for (  RuntimeArrayInfo a : typeSet.arrays().values()) {
    JaxBeanInfo<?> ai=getOrCreate(a);
    for (    QName qn : ai.getTypeNames())     typeMap.put(qn,ai);
  }
  for (  RuntimeClassInfo ci : typeSet.beans().values()) {
    ClassBeanInfoImpl<?> bi=getOrCreate(ci);
    if (bi.isElement())     rootMap.put(ci.getElementName(),bi);
    for (    QName qn : bi.getTypeNames())     typeMap.put(qn,bi);
  }
  for (  RuntimeElementInfo n : typeSet.getAllElements()) {
    ElementBeanInfoImpl bi=getOrCreate(n);
    if (n.getScope() == null)     rootMap.put(n.getElementName(),bi);
    RuntimeClassInfo scope=n.getScope();
    Class scopeClazz=scope == null ? null : scope.getClazz();
    Map<QName,ElementBeanInfoImpl> m=elements.get(scopeClazz);
    if (m == null) {
      m=new LinkedHashMap<QName,ElementBeanInfoImpl>();
      elements.put(scopeClazz,m);
    }
    m.put(n.getElementName(),bi);
  }
  beanInfoMap.put(JAXBElement.class,new ElementBeanInfoImpl(this));
  beanInfoMap.put(CompositeStructure.class,new CompositeStructureBeanInfo(this));
  getOrCreate(typeSet.getAnyTypeInfo());
  for (  JaxBeanInfo bi : beanInfos.values())   bi.link(this);
  for (  Map.Entry<Class,Class> e : RuntimeUtil.primitiveToBox.entrySet())   beanInfoMap.put(e.getKey(),beanInfoMap.get(e.getValue()));
  ReflectionNavigator nav=typeSet.getNavigator();
  for (  TypeReference tr : typeRefs) {
    XmlJavaTypeAdapter xjta=tr.get(XmlJavaTypeAdapter.class);
    Adapter<Type,Class> a=null;
    XmlList xl=tr.get(XmlList.class);
    Class erasedType=nav.erasure(tr.type);
    if (xjta != null) {
      a=new Adapter<Type,Class>(xjta.value(),nav);
    }
    if (tr.get(XmlAttachmentRef.class) != null) {
      a=new Adapter<Type,Class>(SwaRefAdapter.class,nav);
    }
    if (a != null) {
      erasedType=nav.erasure(a.defaultType);
    }
    Name name=nameBuilder.createElementName(tr.tagName);
    InternalBridge bridge;
    if (xl == null)     bridge=new BridgeImpl(this,name,getBeanInfo(erasedType,true),tr);
 else     bridge=new BridgeImpl(this,name,new ValueListBeanInfoImpl(this,erasedType),tr);
    if (a != null)     bridge=new BridgeAdapter(bridge,a.adapterType);
    bridges.put(tr,bridge);
  }
  this.nameList=nameBuilder.conclude();
  for (  JaxBeanInfo bi : beanInfos.values())   bi.wrapUp();
  nameBuilder=null;
  beanInfos=null;
}",0.1396739130434782
190745,"protected JaxBeanInfo(JAXBContextImpl grammar,RuntimeTypeInfo rti,Class<BeanT> jaxbType,QName typeName,boolean isElement,boolean isImmutable,boolean hasLifecycleEvents){
  grammar.beanInfos.put(rti,this);
  this.jaxbType=jaxbType;
  this.typeName=typeName;
  this.flag=(short)((isElement ? FLAG_IS_ELEMENT : 0) | (isImmutable ? FLAG_IS_IMMUTABLE : 0) | (hasLifecycleEvents ? FLAG_HAS_LIFECYCLE_EVENTS : 0));
}","private JaxBeanInfo(JAXBContextImpl grammar,RuntimeTypeInfo rti,Class<BeanT> jaxbType,Object typeName,boolean isElement,boolean isImmutable,boolean hasLifecycleEvents){
  grammar.beanInfos.put(rti,this);
  this.jaxbType=jaxbType;
  this.typeName=typeName;
  this.flag=(short)((isElement ? FLAG_IS_ELEMENT : 0) | (isImmutable ? FLAG_IS_IMMUTABLE : 0) | (hasLifecycleEvents ? FLAG_HAS_LIFECYCLE_EVENTS : 0));
}",0.9718482252141984
190746,"public Void onReference(CReferencePropertyInfo p){
  countURI(propUriCountMap,p.getXmlName());
  return null;
}","public Void onReference(CReferencePropertyInfo p){
  for (  CElement e : p.getElements()) {
    countURI(propUriCountMap,e.getElementName());
  }
  return null;
}",0.7912087912087912
190747,"/** 
 * Compute the most common namespace URI in this package (to put into   {@link XmlSchema#namespace()} and what valuewe should put into  {@link XmlSchema#elementFormDefault()}. This method is called after   {@link #classes} field is filled up.
 */
public void calcDefaultValues(){
  if (!_model.isPackageLevelAnnotations()) {
    mostUsedNamespaceURI=""String_Node_Str"";
    elementFormDefault=XmlNsForm.UNQUALIFIED;
    return;
  }
  CPropertyVisitor<Void> propVisitor=new CPropertyVisitor<Void>(){
    public Void onElement(    CElementPropertyInfo p){
      countURI(propUriCountMap,p.getXmlName());
      return null;
    }
    public Void onReference(    CReferencePropertyInfo p){
      countURI(propUriCountMap,p.getXmlName());
      return null;
    }
    public Void onAttribute(    CAttributePropertyInfo p){
      return null;
    }
    public Void onValue(    CValuePropertyInfo p){
      return null;
    }
  }
;
  for (  ClassOutlineImpl co : classes) {
    CClassInfo ci=co.target;
    countURI(uriCountMap,ci.getTypeName());
    countURI(uriCountMap,ci.getElementName());
    for (    CPropertyInfo p : ci.getProperties())     p.accept(propVisitor);
  }
  mostUsedNamespaceURI=getMostUsedURI(uriCountMap);
  elementFormDefault=getFormDefault();
  if (!mostUsedNamespaceURI.equals(""String_Node_Str"") || elementFormDefault == XmlNsForm.QUALIFIED) {
    XmlSchemaWriter w=_package.annotate2(XmlSchemaWriter.class);
    if (!mostUsedNamespaceURI.equals(""String_Node_Str""))     w.namespace(mostUsedNamespaceURI);
    if (elementFormDefault == XmlNsForm.QUALIFIED)     w.elementFormDefault(elementFormDefault);
  }
}","/** 
 * Compute the most common namespace URI in this package (to put into   {@link XmlSchema#namespace()} and what valuewe should put into  {@link XmlSchema#elementFormDefault()}. This method is called after   {@link #classes} field is filled up.
 */
public void calcDefaultValues(){
  if (!_model.isPackageLevelAnnotations()) {
    mostUsedNamespaceURI=""String_Node_Str"";
    elementFormDefault=XmlNsForm.UNQUALIFIED;
    return;
  }
  CPropertyVisitor<Void> propVisitor=new CPropertyVisitor<Void>(){
    public Void onElement(    CElementPropertyInfo p){
      for (      CTypeRef tr : p.getTypes()) {
        countURI(propUriCountMap,tr.getTagName());
      }
      return null;
    }
    public Void onReference(    CReferencePropertyInfo p){
      for (      CElement e : p.getElements()) {
        countURI(propUriCountMap,e.getElementName());
      }
      return null;
    }
    public Void onAttribute(    CAttributePropertyInfo p){
      return null;
    }
    public Void onValue(    CValuePropertyInfo p){
      return null;
    }
  }
;
  for (  ClassOutlineImpl co : classes) {
    CClassInfo ci=co.target;
    countURI(uriCountMap,ci.getTypeName());
    countURI(uriCountMap,ci.getElementName());
    for (    CPropertyInfo p : ci.getProperties())     p.accept(propVisitor);
  }
  mostUsedNamespaceURI=getMostUsedURI(uriCountMap);
  elementFormDefault=getFormDefault();
  if (!mostUsedNamespaceURI.equals(""String_Node_Str"") || elementFormDefault == XmlNsForm.QUALIFIED) {
    XmlSchemaWriter w=_package.annotate2(XmlSchemaWriter.class);
    if (!mostUsedNamespaceURI.equals(""String_Node_Str""))     w.namespace(mostUsedNamespaceURI);
    if (elementFormDefault == XmlNsForm.QUALIFIED)     w.elementFormDefault(elementFormDefault);
  }
}",0.9559041136430896
190748,"/** 
 * pull the uri out of the specified QName and keep track of it in the specified hash map
 * @param qname
 */
private void countURI(HashMap<String,Integer> map,QName qname){
  if (qname == null)   return;
  String uri=qname.getNamespaceURI();
  if (map.containsKey(uri)) {
    map.put(uri,map.get(uri).intValue() + 1);
  }
 else {
    map.put(uri,1);
  }
}","/** 
 * pull the uri out of the specified QName and keep track of it in the specified hash map
 * @param qname
 */
private void countURI(HashMap<String,Integer> map,QName qname){
  if (qname == null)   return;
  String uri=qname.getNamespaceURI();
  if (map.containsKey(uri)) {
    map.put(uri,map.get(uri) + 1);
  }
 else {
    map.put(uri,1);
  }
}",0.9845288326300984
190749,"public Void onElement(CElementPropertyInfo p){
  countURI(propUriCountMap,p.getXmlName());
  return null;
}","public Void onElement(CElementPropertyInfo p){
  for (  CTypeRef tr : p.getTypes()) {
    countURI(propUriCountMap,tr.getTagName());
  }
  return null;
}",0.7923076923076923
190750,"/** 
 * Calculate the element form defaulting. Compare the most frequently used property URI to the most frequently used element/type URI.  If they match, then return QUALIFIED
 * @return
 */
private XmlNsForm getFormDefault(){
  if (getMostUsedURI(propUriCountMap).equals(""String_Node_Str""))   return XmlNsForm.UNQUALIFIED;
 else   return XmlNsForm.QUALIFIED;
}","/** 
 * Calculate the element form defaulting. Compare the most frequently used property URI to the most frequently used element/type URI.  If they match, then return QUALIFIED
 */
private XmlNsForm getFormDefault(){
  if (getMostUsedURI(propUriCountMap).equals(""String_Node_Str""))   return XmlNsForm.UNQUALIFIED;
 else   return XmlNsForm.QUALIFIED;
}",0.9845722300140252
190751,"/** 
 * Annotate the element property 'field'
 */
private void annotateElement(JAnnotatable field){
  CElementPropertyInfo ep=(CElementPropertyInfo)prop;
  List<CTypeRef> types=ep.getTypes();
  QName eName=ep.getXmlName();
  if (ep.isValueList()) {
    field.annotate(XmlList.class);
  }
  if (eName != null) {
    XmlElementWrapperWriter xcw=field.annotate2(XmlElementWrapperWriter.class);
    xcw.name(eName.getLocalPart()).namespace(eName.getNamespaceURI());
  }
  if (types.size() == 1) {
    CTypeRef t=types.get(0);
    writeXmlElementAnnotation(field,t,resolve(t,IMPLEMENTATION),false);
  }
 else {
    for (    CTypeRef t : types) {
      writeXmlElementAnnotation(field,t,resolve(t,IMPLEMENTATION),true);
    }
    xesw=null;
  }
}","/** 
 * Annotate the element property 'field'
 */
private void annotateElement(JAnnotatable field){
}",0.2401902497027348
190752,"/** 
 * XJC never uses the wrapper element. Always return null.
 */
public QName getXmlName(){
  return null;
}","/** 
 * XJC never uses the wrapper element. Always return null.
 */
@Deprecated public QName getXmlName(){
  return null;
}",0.9487179487179488
190753,"/** 
 * We'll never use a wrapper element in XJC. Always return null.
 */
public QName getXmlName(){
  return null;
}","/** 
 * We'll never use a wrapper element in XJC. Always return null.
 */
@Deprecated public QName getXmlName(){
  return null;
}",0.951219512195122
190754,"public void complexType(XSComplexType ct){
  getCurrentBean().setBaseClass(selector.bindToType(ct,false));
}","public void complexType(XSComplexType ct){
  CClassInfo ctBean=selector.bindToType(ct,false);
  if (getCurrentBean() != ctBean)   getCurrentBean().setBaseClass(ctBean);
}",0.5899280575539568
190755,"public Binding(XSComponent sc,CTypeInfo bean){
  this.sc=sc;
  this.bean=bean;
  if (!(bean instanceof CClassInfo))   built=true;
}","public Binding(XSComponent sc,CTypeInfo bean){
  this.sc=sc;
  this.bean=bean;
}",0.7582938388625592
190756,"void build(){
  if (built)   return;
  built=true;
  CClassInfo bean=(CClassInfo)this.bean;
  for (  String reservedClassName : reservedClassNames) {
    if (bean.getName().equals(reservedClassName)) {
      getErrorReporter().error(sc.getLocator(),Messages.ERR_RESERVED_CLASS_NAME,reservedClassName);
      break;
    }
  }
  if (needValueConstructor(sc)) {
    bean.addConstructor(""String_Node_Str"");
  }
  if (sc instanceof XSElementDecl) {
    XSElementDecl e=(XSElementDecl)sc;
    bean.isRootElement=e.isGlobal();
  }
  if (bean.javadoc == null)   addSchemaFragmentJavadoc(bean,sc);
  if (builder.getGlobalBinding().getFlattenClasses() == LocalScoping.NESTED)   pushClassScope(bean);
 else   pushClassScope(bean.parent());
  XSComponent oldRoot=currentRoot;
  CClassInfo oldBean=currentBean;
  currentRoot=sc;
  currentBean=bean;
  sc.visit(Ring.get(BindRed.class));
  currentBean=oldBean;
  currentRoot=oldRoot;
  popClassScope();
  BIProperty prop=builder.getBindInfo(sc).get(BIProperty.class);
  if (prop != null)   prop.markAsAcknowledged();
}","void build(){
  if (!(this.bean instanceof CClassInfo))   return;
  CClassInfo bean=(CClassInfo)this.bean;
  if (!built.add(bean))   return;
  for (  String reservedClassName : reservedClassNames) {
    if (bean.getName().equals(reservedClassName)) {
      getErrorReporter().error(sc.getLocator(),Messages.ERR_RESERVED_CLASS_NAME,reservedClassName);
      break;
    }
  }
  if (needValueConstructor(sc)) {
    bean.addConstructor(""String_Node_Str"");
  }
  if (bean.javadoc == null)   addSchemaFragmentJavadoc(bean,sc);
  if (builder.getGlobalBinding().getFlattenClasses() == LocalScoping.NESTED)   pushClassScope(bean);
 else   pushClassScope(bean.parent());
  XSComponent oldRoot=currentRoot;
  CClassInfo oldBean=currentBean;
  currentRoot=sc;
  currentBean=bean;
  sc.visit(Ring.get(BindRed.class));
  currentBean=oldBean;
  currentRoot=oldRoot;
  popClassScope();
  BIProperty prop=builder.getBindInfo(sc).get(BIProperty.class);
  if (prop != null)   prop.markAsAcknowledged();
}",0.8802747791952895
190757,"public CElement elementDecl(XSElementDecl decl){
  CElement r=allow(decl,decl.getName());
  if (r == null) {
    QName tagName=new QName(decl.getTargetNamespace(),decl.getName());
    CCustomizations custs=builder.getBindInfo(decl).toCustomizationList();
    if (decl.isGlobal()) {
      if (isCollapsable(decl)) {
        r=new CClassInfo(model,selector.getClassScope(),deriveName(decl),decl.getLocator(),null,tagName,decl,custs);
      }
 else {
        String className=null;
        if (getGlobalBinding().isGenerateElementClass())         className=deriveName(decl);
        CElementInfo cei=new CElementInfo(model,tagName,selector.getClassScope(),className,custs,decl.getLocator());
        selector.boundElements.put(decl,cei);
        stb.refererStack.push(decl);
        cei.initContentType(selector.bindToType(decl.getType()),decl,decl.getDefaultValue());
        stb.refererStack.pop();
        r=cei;
      }
    }
  }
  XSElementDecl top=decl.getSubstAffiliation();
  if (top != null) {
    CElement topci=selector.bindToType(top);
    if (r instanceof CClassInfo && topci instanceof CClassInfo)     ((CClassInfo)r).setBaseClass((CClassInfo)topci);
    if (r instanceof CElementInfo && topci instanceof CElementInfo)     ((CElementInfo)r).setSubstitutionHead((CElementInfo)topci);
  }
  TODO.checkSpec();
  return r;
}","public CElement elementDecl(XSElementDecl decl){
  CElement r=allow(decl,decl.getName());
  if (r == null) {
    QName tagName=new QName(decl.getTargetNamespace(),decl.getName());
    CCustomizations custs=builder.getBindInfo(decl).toCustomizationList();
    if (decl.isGlobal()) {
      if (isCollapsable(decl)) {
        return selector.bindToType(decl.getType().asComplexType(),true);
      }
 else {
        String className=null;
        if (getGlobalBinding().isGenerateElementClass())         className=deriveName(decl);
        CElementInfo cei=new CElementInfo(model,tagName,selector.getClassScope(),className,custs,decl.getLocator());
        selector.boundElements.put(decl,cei);
        stb.refererStack.push(decl);
        cei.initContentType(selector.bindToType(decl.getType()),decl,decl.getDefaultValue());
        stb.refererStack.pop();
        r=cei;
      }
    }
  }
  XSElementDecl top=decl.getSubstAffiliation();
  if (top != null) {
    CElement topci=selector.bindToType(top);
    if (r instanceof CClassInfo && topci instanceof CClassInfo)     ((CClassInfo)r).setBaseClass((CClassInfo)topci);
    if (r instanceof CElementInfo && topci instanceof CElementInfo)     ((CElementInfo)r).setSubstitutionHead((CElementInfo)topci);
  }
  TODO.checkSpec();
  return r;
}",0.9373567608861728
190758,"/** 
 * If only one   {@link XSElementDecl} is refering to {@link XSType}, return that element, otherwise null.
 */
private @Nullable XSElementDecl getSoleElementReferer(@NotNull XSType t){
  Set<XSComponent> referer=builder.getReferer(t);
  if (referer.size() != 1)   return null;
  XSComponent r=referer.iterator().next();
  if (r instanceof XSElementDecl)   return (XSElementDecl)r;
 else   return null;
}","/** 
 * If only one global   {@link XSElementDecl} is refering to {@link XSType}, return that element, otherwise null.
 */
private @Nullable XSElementDecl getSoleElementReferer(@NotNull XSType t){
  Set<XSComponent> referer=builder.getReferer(t);
  XSElementDecl sole=null;
  for (  XSComponent r : referer) {
    if (r instanceof XSElementDecl) {
      XSElementDecl x=(XSElementDecl)r;
      if (!x.isGlobal())       continue;
      if (sole == null)       sole=x;
 else       return null;
    }
 else {
      return null;
    }
  }
  return sole;
}",0.5151199165797706
190759,"public CElement complexType(XSComplexType type){
  CElement ci=allow(type,type.getName());
  if (ci != null)   return ci;
  BindInfo bi=builder.getBindInfo(type);
  if (type.isGlobal()) {
    if (getGlobalBinding().isSimpleMode()) {
      XSElementDecl referer=getSoleElementReferer(type);
      if (referer != null && isCollapsable(referer)) {
        return null;
      }
    }
    JPackage pkg=selector.getPackage(type.getTargetNamespace());
    return new CClassInfo(model,pkg,deriveName(type),type.getLocator(),getTypeName(type),null,type,bi.toCustomizationList());
  }
 else {
    CElement parentType=selector.isBound(type.getScope());
    String className;
    CClassInfoParent scope;
    if (parentType != null && isCollapsable(type.getScope()))     return null;
    if (parentType != null && parentType instanceof CElementInfo && ((CElementInfo)parentType).hasClass()) {
      scope=parentType;
      className=""String_Node_Str"";
    }
 else {
      className=builder.getNameConverter().toClassName(type.getScope().getName());
      BISchemaBinding sb=builder.getBindInfo(type.getOwnerSchema()).get(BISchemaBinding.class);
      if (sb != null)       className=sb.mangleAnonymousTypeClassName(className);
      scope=selector.getClassScope();
    }
    return new CClassInfo(model,scope,className,type.getLocator(),null,null,type,bi.toCustomizationList());
  }
}","public CElement complexType(XSComplexType type){
  CElement ci=allow(type,type.getName());
  if (ci != null)   return ci;
  BindInfo bi=builder.getBindInfo(type);
  if (type.isGlobal()) {
    QName tagName=null;
    String className=deriveName(type);
    if (getGlobalBinding().isSimpleMode()) {
      XSElementDecl referer=getSoleElementReferer(type);
      if (referer != null && isCollapsable(referer)) {
        tagName=new QName(referer.getTargetNamespace(),referer.getName());
        className=deriveName(referer);
      }
    }
    JPackage pkg=selector.getPackage(type.getTargetNamespace());
    return new CClassInfo(model,pkg,className,type.getLocator(),getTypeName(type),tagName,type,bi.toCustomizationList());
  }
 else {
    XSElementDecl element=type.getScope();
    if (element.isGlobal() && isCollapsable(element)) {
      return new CClassInfo(model,selector.getClassScope(),deriveName(element),element.getLocator(),null,new QName(element.getTargetNamespace(),element.getName()),element,bi.toCustomizationList());
    }
    CElement parentType=selector.isBound(element);
    String className;
    CClassInfoParent scope;
    if (parentType != null && parentType instanceof CElementInfo && ((CElementInfo)parentType).hasClass()) {
      scope=parentType;
      className=""String_Node_Str"";
    }
 else {
      className=builder.getNameConverter().toClassName(element.getName());
      BISchemaBinding sb=builder.getBindInfo(type.getOwnerSchema()).get(BISchemaBinding.class);
      if (sb != null)       className=sb.mangleAnonymousTypeClassName(className);
      scope=selector.getClassScope();
    }
    return new CClassInfo(model,scope,className,type.getLocator(),null,null,type,bi.toCustomizationList());
  }
}",0.7672469374597034
190760,"/** 
 * Recursively visit ancestors and build up   {@link NamespaceSupport} oject.
 */
private void buildNamespaceSupport(NamespaceSupport nss,Node node){
  if (node.getNodeType() != Node.ELEMENT_NODE)   return;
  buildNamespaceSupport(nss,node.getParentNode());
  nss.pushContext();
  NamedNodeMap atts=node.getAttributes();
  for (int i=0; i < atts.getLength(); i++) {
    Attr a=(Attr)atts.item(i);
    if (""String_Node_Str"".equals(a.getPrefix())) {
      nss.declarePrefix(a.getLocalName(),a.getValue());
      continue;
    }
    if (""String_Node_Str"".equals(a.getName())) {
      nss.declarePrefix(""String_Node_Str"",a.getValue());
      continue;
    }
  }
}","/** 
 * Recursively visit ancestors and build up   {@link NamespaceSupport} oject.
 */
private void buildNamespaceSupport(NamespaceSupport nss,Node node){
  if (node == null || node.getNodeType() != Node.ELEMENT_NODE)   return;
  buildNamespaceSupport(nss,node.getParentNode());
  nss.pushContext();
  NamedNodeMap atts=node.getAttributes();
  for (int i=0; i < atts.getLength(); i++) {
    Attr a=(Attr)atts.item(i);
    if (""String_Node_Str"".equals(a.getPrefix())) {
      nss.declarePrefix(a.getLocalName(),a.getValue());
      continue;
    }
    if (""String_Node_Str"".equals(a.getName())) {
      nss.declarePrefix(""String_Node_Str"",a.getValue());
      continue;
    }
  }
}",0.988095238095238
190761,"public void setEntityResolver(EntityResolver entityResolver){
  forest.setEntityResolver(entityResolver);
}","public void setEntityResolver(EntityResolver entityResolver){
  forest.setEntityResolver(entityResolver);
  opts.entityResolver=entityResolver;
}",0.8492063492063492
190762,"/** 
 * This method can be called after   {@link #startDocument} is calledbut before the marshalling begins, to set the currently in-scope namespace bindings. <p> This method is useful to avoid redundant namespace declarations when the marshalling is producing a sub-document.
 */
public void addInscopeBinding(String nsUri,String prefix){
  nsContext.declareNsUri(nsUri,prefix,false);
}","/** 
 * This method can be called after   {@link #startDocument} is calledbut before the marshalling begins, to set the currently in-scope namespace bindings. <p> This method is useful to avoid redundant namespace declarations when the marshalling is producing a sub-document.
 */
public void addInscopeBinding(String nsUri,String prefix){
  nsContext.put(nsUri,prefix);
}",0.9670619235836628
190763,"public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    flushText();
    int len=atts.getLength();
    serializer.startElement(namespaceURI,localName,getPrefix(qName),null);
    for (int i=0; i < len; i++) {
      String qname=atts.getQName(i);
      if (qname.startsWith(""String_Node_Str""))       continue;
      String prefix=getPrefix(qname);
      serializer.getNamespaceContext().declareNamespace(atts.getURI(i),prefix,true);
    }
    for (int i=0; i < prefixMap.size(); i+=2) {
      String prefix=(String)prefixMap.get(i);
      serializer.getNamespaceContext().declareNamespace((String)prefixMap.get(i + 1),prefix,prefix.length() != 0);
    }
    serializer.endNamespaceDecls(null);
    for (int i=0; i < len; i++) {
      if (atts.getQName(i).startsWith(""String_Node_Str""))       continue;
      serializer.attribute(atts.getURI(i),atts.getLocalName(i),atts.getValue(i));
    }
    prefixMap.clear();
    serializer.endAttributes();
  }
 catch (  IOException e) {
    throw new SAXException2(e);
  }
catch (  XMLStreamException e) {
    throw new SAXException2(e);
  }
}","public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {
  try {
    flushText();
    int len=atts.getLength();
    serializer.startElement(namespaceURI,localName,getPrefix(qName),null);
    for (int i=0; i < len; i++) {
      String qname=atts.getQName(i);
      if (qname.startsWith(""String_Node_Str""))       continue;
      String prefix=getPrefix(qname);
      serializer.getNamespaceContext().declareNamespace(atts.getURI(i),prefix,true);
    }
    for (int i=0; i < prefixMap.size(); i+=2) {
      serializer.getNamespaceContext().put(prefixMap.get(i + 1),prefixMap.get(i));
    }
    serializer.endNamespaceDecls(null);
    for (int i=0; i < len; i++) {
      if (atts.getQName(i).startsWith(""String_Node_Str""))       continue;
      serializer.attribute(atts.getURI(i),atts.getLocalName(i),atts.getValue(i));
    }
    prefixMap.clear();
    serializer.endAttributes();
  }
 catch (  IOException e) {
    throw new SAXException2(e);
  }
catch (  XMLStreamException e) {
    throw new SAXException2(e);
  }
}",0.9252925292529252
190764,"/** 
 * Puts this new binding into the declared prefixes list without doing any duplicate check. <p> Most of the time   {@link #declareNsUri(String,String,boolean)} shall be used.
 * @param prefix if null, an unique prefix is allocated.
 * @return the index of this new binding.
 */
public int put(String uri,String prefix){
  if (size == nsUris.length) {
    String[] u=new String[nsUris.length * 2];
    String[] p=new String[prefixes.length * 2];
    System.arraycopy(nsUris,0,u,0,nsUris.length);
    System.arraycopy(prefixes,0,p,0,prefixes.length);
    nsUris=u;
    prefixes=p;
  }
  if (prefix == null) {
    if (size == 1)     prefix=""String_Node_Str"";
 else     prefix=new StringBuilder(5).append(""String_Node_Str"").append(size).toString();
  }
  nsUris[size]=uri;
  prefixes[size]=prefix;
  return size++;
}","/** 
 * {@inheritDoc}.
 * @param prefix if null, an unique prefix is allocated.
 */
public int put(@NotNull String uri,@Nullable String prefix){
  if (size == nsUris.length) {
    String[] u=new String[nsUris.length * 2];
    String[] p=new String[prefixes.length * 2];
    System.arraycopy(nsUris,0,u,0,nsUris.length);
    System.arraycopy(prefixes,0,p,0,prefixes.length);
    nsUris=u;
    prefixes=p;
  }
  if (prefix == null) {
    if (size == 1)     prefix=""String_Node_Str"";
 else     prefix=new StringBuilder(5).append(""String_Node_Str"").append(size).toString();
  }
  nsUris[size]=uri;
  prefixes[size]=prefix;
  return size++;
}",0.7427785419532325
190765,"private void startElement(){
  nse=nse.push();
  if (!seenRoot) {
    String[] knownUris=nameList.namespaceURIs;
    for (int i=0; i < knownUris.length; i++)     knownUri2prefixIndexMap[i]=nsContext.declareNsUri(knownUris[i],null,false);
    String[] uris=nsContext.getPrefixMapper().getPreDeclaredNamespaceUris();
    if (uris != null) {
      for (      String uri : uris) {
        if (uri != null)         nsContext.declareNsUri(uri,null,false);
      }
    }
    String[] pairs=nsContext.getPrefixMapper().getPreDeclaredNamespaceUris2();
    if (pairs != null) {
      for (int i=0; i < pairs.length; i++) {
        String prefix=pairs[i];
        String nsUri=pairs[i + 1];
        if (prefix != null && nsUri != null)         nsContext.put(nsUri,prefix);
      }
    }
    if (schemaLocation != null || noNsSchemaLocation != null) {
      nsContext.declareNsUri(WellKnownNamespace.XML_SCHEMA_INSTANCE,""String_Node_Str"",true);
    }
  }
  nsContext.collectionMode=true;
  textHasAlreadyPrinted=false;
}","private void startElement(){
  nse=nse.push();
  if (!seenRoot) {
    String[] knownUris=nameList.namespaceURIs;
    for (int i=0; i < knownUris.length; i++)     knownUri2prefixIndexMap[i]=nsContext.declareNsUri(knownUris[i],null,false);
    String[] uris=nsContext.getPrefixMapper().getPreDeclaredNamespaceUris();
    if (uris != null) {
      for (      String uri : uris) {
        if (uri != null)         nsContext.declareNsUri(uri,null,false);
      }
    }
    String[] pairs=nsContext.getPrefixMapper().getPreDeclaredNamespaceUris2();
    if (pairs != null) {
      for (int i=0; i < pairs.length; i+=2) {
        String prefix=pairs[i];
        String nsUri=pairs[i + 1];
        if (prefix != null && nsUri != null)         nsContext.put(nsUri,prefix);
      }
    }
    if (schemaLocation != null || noNsSchemaLocation != null) {
      nsContext.declareNsUri(WellKnownNamespace.XML_SCHEMA_INSTANCE,""String_Node_Str"",true);
    }
  }
  nsContext.collectionMode=true;
  textHasAlreadyPrinted=false;
}",0.9985126425384234
190766,"/** 
 * Receives the root element and determines how to start unmarshalling.
 */
public void childElement(UnmarshallingContext.State state,TagName ea){
  UnmarshallingContext context=state.getContext();
  QName qn=new QName(ea.uri,ea.local);
  state.prev.target=new JAXBElement(qn,context.expectedType.jaxbType,null,null);
  state.receiver=this;
  state.loader=context.expectedType.getLoader(null,true);
}","/** 
 * Receives the root element and determines how to start unmarshalling.
 */
public void childElement(UnmarshallingContext.State state,TagName ea){
  UnmarshallingContext context=state.getContext();
  QName qn=new QName(ea.uri,ea.local);
  state.prev.target=new JAXBElement(qn,context.expectedType.jaxbType,null,null);
  state.receiver=this;
  state.loader=new XsiNilLoader(context.expectedType.getLoader(null,true));
}",0.9782608695652174
190767,"public JDefinedClass createClass(JClassContainer parent,int mod,String name,Locator source,ClassType kind){
  try {
    if (parent.isClass())     mod|=JMod.STATIC;
    JDefinedClass r=parent._class(mod,name,kind);
    r.metadata=source;
    return r;
  }
 catch (  JClassAlreadyExistsException e) {
    JDefinedClass cls=e.getExistingClass();
    errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CLASSNAME_COLLISION,cls.fullName()),(Locator)cls.metadata));
    errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CLASSNAME_COLLISION_SOURCE,name),source));
    if (!name.equals(cls.name())) {
      errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CASE_SENSITIVITY_COLLISION,name,cls.name()),null));
    }
    try {
      return parent._class(""String_Node_Str"" + (ticketMaster++));
    }
 catch (    JClassAlreadyExistsException ee) {
      return ee.getExistingClass();
    }
  }
}","public JDefinedClass createClass(JClassContainer parent,int mod,String name,Locator source,ClassType kind){
  try {
    if (parent.isClass() && kind == ClassType.CLASS)     mod|=JMod.STATIC;
    JDefinedClass r=parent._class(mod,name,kind);
    r.metadata=source;
    return r;
  }
 catch (  JClassAlreadyExistsException e) {
    JDefinedClass cls=e.getExistingClass();
    errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CLASSNAME_COLLISION,cls.fullName()),(Locator)cls.metadata));
    errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CLASSNAME_COLLISION_SOURCE,name),source));
    if (!name.equals(cls.name())) {
      errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_CASE_SENSITIVITY_COLLISION,name,cls.name()),null));
    }
    try {
      return parent._class(""String_Node_Str"" + (ticketMaster++));
    }
 catch (    JClassAlreadyExistsException ee) {
      return ee.getExistingClass();
    }
  }
}",0.9859007832898172
190768,"/** 
 * Derived classes can use this method to implement   {@link #calcDrilldown}.
 */
protected List<Property> buildDrilldown(CClassInfo typeBean){
  List<Property> result=new ArrayList<Property>();
  for (  CPropertyInfo p : typeBean.getProperties()) {
    if (p instanceof CElementPropertyInfo) {
      CElementPropertyInfo ep=(CElementPropertyInfo)p;
      List<? extends CTypeRef> ref=ep.getTypes();
      if (ref.size() != 1)       return null;
      result.add(createPropertyImpl(ep,ref.get(0).getTagName()));
    }
 else     if (p instanceof ReferencePropertyInfo) {
      CReferencePropertyInfo rp=(CReferencePropertyInfo)p;
      Collection<CElement> elements=rp.getElements();
      if (elements.size() != 1)       return null;
      CElement ref=elements.iterator().next();
      if (ref instanceof ClassInfo) {
        result.add(createPropertyImpl(rp,ref.getElementName()));
      }
 else {
        CElementInfo eref=(CElementInfo)ref;
        if (!eref.getSubstitutionMembers().isEmpty())         return null;
        ElementAdapter fr;
        if (rp.isCollection())         fr=new ElementCollectionAdapter(parent.outline.getField(rp),eref);
 else         fr=new ElementSingleAdapter(parent.outline.getField(rp),eref);
        result.add(new PropertyImpl(this,fr,eref.getElementName()));
      }
    }
 else     return null;
  }
  return result;
}","/** 
 * Derived classes can use this method to implement   {@link #calcDrilldown}.
 */
protected List<Property> buildDrilldown(CClassInfo typeBean){
  List<Property> result=new ArrayList<Property>();
  for (; typeBean != null; typeBean=typeBean.getBaseClass()) {
    for (    CPropertyInfo p : typeBean.getProperties()) {
      if (p instanceof CElementPropertyInfo) {
        CElementPropertyInfo ep=(CElementPropertyInfo)p;
        List<? extends CTypeRef> ref=ep.getTypes();
        if (ref.size() != 1)         return null;
        result.add(createPropertyImpl(ep,ref.get(0).getTagName()));
      }
 else       if (p instanceof ReferencePropertyInfo) {
        CReferencePropertyInfo rp=(CReferencePropertyInfo)p;
        Collection<CElement> elements=rp.getElements();
        if (elements.size() != 1)         return null;
        CElement ref=elements.iterator().next();
        if (ref instanceof ClassInfo) {
          result.add(createPropertyImpl(rp,ref.getElementName()));
        }
 else {
          CElementInfo eref=(CElementInfo)ref;
          if (!eref.getSubstitutionMembers().isEmpty())           return null;
          ElementAdapter fr;
          if (rp.isCollection())           fr=new ElementCollectionAdapter(parent.outline.getField(rp),eref);
 else           fr=new ElementSingleAdapter(parent.outline.getField(rp),eref);
          result.add(new PropertyImpl(this,fr,eref.getElementName()));
        }
      }
 else       return null;
    }
  }
  return result;
}",0.8930949877322117
190769,"/** 
 * All the marshal method invocation eventually comes down to this call.
 */
private void write(Object obj,XmlOutput out,Runnable postInitAction) throws JAXBException {
  try {
    if (obj == null)     throw new IllegalArgumentException(Messages.NOT_MARSHALLABLE.format());
    if (schema != null) {
      ValidatorHandler validator=schema.newValidatorHandler();
      validator.setErrorHandler(new FatalAdapter(serializer));
      XMLFilterImpl f=new XMLFilterImpl(){
        public void startPrefixMapping(        String prefix,        String uri) throws SAXException {
          super.startPrefixMapping(prefix.intern(),uri.intern());
        }
      }
;
      f.setContentHandler(validator);
      out=new ForkXmlOutput(new SAXOutput(f),out);
    }
    try {
      prewrite(out,isFragment(),postInitAction);
      serializer.childAsRoot(obj);
      postwrite(out);
    }
 catch (    SAXException e) {
      throw new MarshalException(e);
    }
catch (    IOException e) {
      throw new MarshalException(e);
    }
catch (    XMLStreamException e) {
      throw new MarshalException(e);
    }
 finally {
      serializer.close();
    }
  }
  finally {
    cleanUp();
  }
}","/** 
 * All the marshal method invocation eventually comes down to this call.
 */
private void write(Object obj,XmlOutput out,Runnable postInitAction) throws JAXBException {
  try {
    if (obj == null)     throw new IllegalArgumentException(Messages.NOT_MARSHALLABLE.format());
    if (schema != null) {
      ValidatorHandler validator=schema.newValidatorHandler();
      validator.setErrorHandler(new FatalAdapter(serializer));
      XMLFilterImpl f=new XMLFilterImpl(){
        public void startPrefixMapping(        String prefix,        String uri) throws SAXException {
          super.startPrefixMapping(prefix.intern(),uri.intern());
        }
      }
;
      f.setContentHandler(validator);
      out=new ForkXmlOutput(new SAXOutput(f){
        @Override public void startDocument(        XMLSerializer serializer,        boolean fragment,        int[] nsUriIndex2prefixIndex,        NamespaceContextImpl nsContext) throws SAXException, IOException, XMLStreamException {
          super.startDocument(serializer,false,nsUriIndex2prefixIndex,nsContext);
        }
        @Override public void endDocument(        boolean fragment) throws SAXException, IOException, XMLStreamException {
          super.endDocument(false);
        }
      }
,out);
    }
    try {
      prewrite(out,isFragment(),postInitAction);
      serializer.childAsRoot(obj);
      postwrite(out);
    }
 catch (    SAXException e) {
      throw new MarshalException(e);
    }
catch (    IOException e) {
      throw new MarshalException(e);
    }
catch (    XMLStreamException e) {
      throw new MarshalException(e);
    }
 finally {
      serializer.close();
    }
  }
  finally {
    cleanUp();
  }
}",0.6215556330659225
190770,"private void handleEndElement(EndElement event) throws SAXException {
  if (!seenText && context.expectText()) {
    visitor.text(""String_Node_Str"");
  }
  QName qName=event.getName();
  tagName.uri=fixNull(qName.getNamespaceURI());
  tagName.local=qName.getLocalPart();
  visitor.endElement(tagName);
  for (Iterator i=event.getNamespaces(); i.hasNext(); ) {
    String prefix=fixNull((String)i.next());
    visitor.endPrefixMapping(prefix);
  }
  seenText=false;
}","private void handleEndElement(EndElement event) throws SAXException {
  if (!seenText && context.expectText()) {
    visitor.text(""String_Node_Str"");
  }
  QName qName=event.getName();
  tagName.uri=fixNull(qName.getNamespaceURI());
  tagName.local=qName.getLocalPart();
  visitor.endElement(tagName);
  for (Iterator<Namespace> i=event.getNamespaces(); i.hasNext(); ) {
    String prefix=fixNull(i.next().getPrefix());
    visitor.endPrefixMapping(prefix);
  }
  seenText=false;
}",0.9123548046462512
190771,"@Override protected void generatePackageFiles(ClassTree classtree) throws Exception {
  PackageDoc[] packages=configuration.packages;
  if (packages.length > 1) {
    PackageIndexFrameWriter.generate(configuration);
  }
  PackageDoc prev=null, next;
  for (int i=0; i < packages.length; i++) {
    next=(i + 1 < packages.length && packages[i + 1].name().length() > 0) ? packages[i + 1] : null;
    next=(i + 2 < packages.length && next == null) ? packages[i + 2] : next;
    AbstractBuilder packageSummaryBuilder;
    if (containsArchDocTag(packages[i])) {
      packageSummaryBuilder=CustomPackageSummaryBuilder.getInstance(configuration,packages[i],new CustomPackageWriterImpl(ConfigurationImpl.getInstance(),packages[i],prev,next));
    }
 else {
      packageSummaryBuilder=configuration.getBuilderFactory().getPackageSummaryBuilder(packages[i],prev,next);
    }
    packageSummaryBuilder.build();
    prev=packages[i];
  }
}","@Override protected void generatePackageFiles(ClassTree classtree) throws Exception {
  PackageDoc[] packages=configuration.packages;
  if (packages.length > 1) {
    PackageIndexFrameWriter.generate(configuration);
  }
  PackageDoc prev=null, next;
  for (int i=0; i < packages.length; i++) {
    PackageFrameWriter.generate(configuration,packages[i]);
    next=(i + 1 < packages.length && packages[i + 1].name().length() > 0) ? packages[i + 1] : null;
    next=(i + 2 < packages.length && next == null) ? packages[i + 2] : next;
    AbstractBuilder packageSummaryBuilder;
    if (containsArchDocTag(packages[i])) {
      packageSummaryBuilder=CustomPackageSummaryBuilder.getInstance(configuration,packages[i],new CustomPackageWriterImpl(ConfigurationImpl.getInstance(),packages[i],prev,next));
    }
 else {
      packageSummaryBuilder=configuration.getBuilderFactory().getPackageSummaryBuilder(packages[i],prev,next);
    }
    packageSummaryBuilder.build();
    prev=packages[i];
  }
}",0.9687174139728884
190772,"/** 
 * @param assoc non-null if the marshaller is working inside  {@link BinderImpl}.
 */
public MarshallerImpl(JAXBContextImpl c,AssociationMap assoc){
  DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
  context=c;
  this.assoc=assoc;
  serializer=new XMLSerializer(this);
  c14nSupport=context.c14nSupport;
  try {
    setEventHandler(this);
  }
 catch (  JAXBException e) {
    throw new AssertionError(e);
  }
}","/** 
 * @param assoc non-null if the marshaller is working inside  {@link BinderImpl}.
 */
public MarshallerImpl(JAXBContextImpl c,AssociationMap assoc){
  DatatypeConverter.setDatatypeConverter(DatatypeConverterImpl.theInstance);
  context=c;
  serializer=new XMLSerializer(this);
  c14nSupport=context.c14nSupport;
  try {
    setEventHandler(this);
  }
 catch (  JAXBException e) {
    throw new AssertionError(e);
  }
}",0.976905311778291
190773,"/** 
 * Creates   {@link XmlOutput} from the given {@link Result} object.
 */
final XmlOutput createXmlOutput(Result result) throws JAXBException {
  if (result instanceof SAXResult)   return new SAXOutput(((SAXResult)result).getHandler());
  if (result instanceof DOMResult) {
    final Node node=((DOMResult)result).getNode();
    if (node == null) {
      Document doc=JAXBContextImpl.createDom();
      ((DOMResult)result).setNode(doc);
      return new SAXOutput(new SAX2DOMEx(doc));
    }
 else {
      return new SAXOutput(new SAX2DOMEx(node));
    }
  }
  if (result instanceof StreamResult) {
    StreamResult sr=(StreamResult)result;
    if (sr.getWriter() != null)     return createWriter(sr.getWriter());
 else     if (sr.getOutputStream() != null)     return createWriter(sr.getOutputStream());
 else     if (sr.getSystemId() != null) {
      String fileURL=sr.getSystemId();
      if (fileURL.startsWith(""String_Node_Str"")) {
        if (fileURL.substring(8).indexOf(""String_Node_Str"") > 0)         fileURL=fileURL.substring(8);
 else         fileURL=fileURL.substring(7);
      }
      try {
        return createWriter(new FileOutputStream(fileURL));
      }
 catch (      IOException e) {
        throw new MarshalException(e);
      }
    }
  }
  throw new MarshalException(Messages.UNSUPPORTED_RESULT.format());
}","/** 
 * Creates   {@link XmlOutput} from the given {@link Result} object.
 */
final XmlOutput createXmlOutput(Result result) throws JAXBException {
}",0.2012153950033761
190774,"/** 
 * All the marshal method invocation eventually comes down to this call.
 */
private void write(Object obj,XmlOutput out,Runnable postInitAction) throws JAXBException {
  if (obj == null)   throw new IllegalArgumentException(Messages.NOT_MARSHALLABLE.format());
  if (schema != null) {
    ValidatorHandler validator=schema.newValidatorHandler();
    validator.setErrorHandler(new FatalAdapter(serializer));
    XMLFilterImpl f=new XMLFilterImpl(){
      public void startPrefixMapping(      String prefix,      String uri) throws SAXException {
        super.startPrefixMapping(prefix.intern(),uri.intern());
      }
    }
;
    f.setContentHandler(validator);
    out=new ForkXmlOutput(new SAXOutput(f),out);
  }
  try {
    prewrite(out,isFragment(),postInitAction);
    serializer.childAsRoot(obj);
    postwrite(out);
  }
 catch (  SAXException e) {
    throw new MarshalException(e);
  }
catch (  IOException e) {
    throw new MarshalException(e);
  }
catch (  XMLStreamException e) {
    throw new MarshalException(e);
  }
 finally {
    serializer.close();
  }
}","/** 
 * All the marshal method invocation eventually comes down to this call.
 */
private void write(Object obj,XmlOutput out,Runnable postInitAction) throws JAXBException {
  try {
    if (obj == null)     throw new IllegalArgumentException(Messages.NOT_MARSHALLABLE.format());
    if (schema != null) {
      ValidatorHandler validator=schema.newValidatorHandler();
      validator.setErrorHandler(new FatalAdapter(serializer));
      XMLFilterImpl f=new XMLFilterImpl(){
        public void startPrefixMapping(        String prefix,        String uri) throws SAXException {
          super.startPrefixMapping(prefix.intern(),uri.intern());
        }
      }
;
      f.setContentHandler(validator);
      out=new ForkXmlOutput(new SAXOutput(f),out);
    }
    try {
      prewrite(out,isFragment(),postInitAction);
      serializer.childAsRoot(obj);
      postwrite(out);
    }
 catch (    SAXException e) {
      throw new MarshalException(e);
    }
catch (    IOException e) {
      throw new MarshalException(e);
    }
catch (    XMLStreamException e) {
      throw new MarshalException(e);
    }
 finally {
      serializer.close();
    }
  }
  finally {
    cleanUp();
  }
}",0.9392999556933984
190775,"public String toPackageName(String s){
  return toMixedCaseName(toWordList(s),false);
}","/** 
 * Computes a Java package name from a namespace URI, as specified in the spec.
 * @return null if it fails to derive a package name.
 */
public String toPackageName(String nsUri){
  int idx=nsUri.indexOf(':');
  String scheme=""String_Node_Str"";
  if (idx >= 0) {
    scheme=nsUri.substring(0,idx);
    if (scheme.equalsIgnoreCase(""String_Node_Str"") || scheme.equalsIgnoreCase(""String_Node_Str""))     nsUri=nsUri.substring(idx + 1);
  }
  ArrayList<String> tokens=tokenize(nsUri,""String_Node_Str"");
  if (tokens.size() == 0) {
    return null;
  }
  if (tokens.size() > 1) {
    String lastToken=tokens.get(tokens.size() - 1);
    idx=lastToken.lastIndexOf('.');
    if (idx > 0) {
      lastToken=lastToken.substring(0,idx);
      tokens.set(tokens.size() - 1,lastToken);
    }
  }
  String domain=tokens.get(0);
  idx=domain.indexOf(':');
  if (idx >= 0)   domain=domain.substring(0,idx);
  ArrayList<String> r=reverse(tokenize(domain,scheme.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str""));
  if (r.get(r.size() - 1).equalsIgnoreCase(""String_Node_Str"")) {
    r.remove(r.size() - 1);
  }
  tokens.addAll(1,r);
  tokens.remove(0);
  for (int i=0; i < tokens.size(); i++) {
    String token=tokens.get(i);
    token=removeIllegalIdentifierChars(token);
    if (!NameUtil.isJavaIdentifier(token)) {
      token='_' + token;
    }
    tokens.set(i,token.toLowerCase());
  }
  return combine(tokens,'.');
}",0.0699669966996699
190776,"/** 
 * Computes the namespace URI -> package name conversion as specified by the JAXB spec.
 * @param namespaceUri Namespace URI. Can be empty, but must not be null.
 * @return A Java package name (e.g., ""foo.bar""). """" to represent the root package. This method returns null if the method fails to derive the package name (there are certain namespace URIs with which this algorithm does not work --- such as "":::"" as the URI.)
 */
public static String getDefaultPackageName(String namespaceUri){
  if (namespaceUri == null)   throw new IllegalArgumentException();
  return Util.getPackageNameFromNamespaceURI(namespaceUri);
}","/** 
 * Computes the namespace URI -> package name conversion as specified by the JAXB spec.
 * @param namespaceUri Namespace URI. Can be empty, but must not be null.
 * @return A Java package name (e.g., ""foo.bar""). """" to represent the root package. This method returns null if the method fails to derive the package name (there are certain namespace URIs with which this algorithm does not work --- such as "":::"" as the URI.)
 */
public static String getDefaultPackageName(String namespaceUri){
  if (namespaceUri == null)   throw new IllegalArgumentException();
  return NameConverter.standard.toPackageName(namespaceUri);
}",0.9608938547486032
190777,"/** 
 * Gets the Java package to which classes from this namespace should go. <p> Usually, the getOuterClass method should be used to determine where to put a class.
 */
public JPackage getPackage(String targetNamespace){
  XSSchema s=Ring.get(XSSchemaSet.class).getSchema(targetNamespace);
  BISchemaBinding sb=builder.getBindInfo(s).get(BISchemaBinding.class);
  String name=null;
  if (builder.defaultPackage1 != null)   name=builder.defaultPackage1;
  if (name == null && sb != null && sb.getPackageName() != null)   name=sb.getPackageName();
  if (name == null && builder.defaultPackage2 != null)   name=builder.defaultPackage2;
  if (name == null)   name=Util.getPackageNameFromNamespaceURI(targetNamespace);
  if (name == null)   name=""String_Node_Str"";
  if (checkedPackageNames.add(name)) {
    if (!JJavaName.isJavaPackageName(name))     getErrorReporter().error(s.getLocator(),Messages.ERR_INCORRECT_PACKAGE_NAME,targetNamespace,name);
  }
  return Ring.get(JCodeModel.class)._package(name);
}","/** 
 * Gets the Java package to which classes from this namespace should go. <p> Usually, the getOuterClass method should be used to determine where to put a class.
 */
public JPackage getPackage(String targetNamespace){
  XSSchema s=Ring.get(XSSchemaSet.class).getSchema(targetNamespace);
  BISchemaBinding sb=builder.getBindInfo(s).get(BISchemaBinding.class);
  String name=null;
  if (builder.defaultPackage1 != null)   name=builder.defaultPackage1;
  if (name == null && sb != null && sb.getPackageName() != null)   name=sb.getPackageName();
  if (name == null && builder.defaultPackage2 != null)   name=builder.defaultPackage2;
  if (name == null)   name=builder.getNameConverter().toPackageName(targetNamespace);
  if (name == null)   name=""String_Node_Str"";
  if (checkedPackageNames.add(name)) {
    if (!JJavaName.isJavaPackageName(name))     getErrorReporter().error(s.getLocator(),Messages.ERR_INCORRECT_PACKAGE_NAME,targetNamespace,name);
  }
  return Ring.get(JCodeModel.class)._package(name);
}",0.96274217585693
190778,"public void addGlobalElement(TypeRef<T,C> tref){
  elementDecls.put(tref.getTagName().getLocalPart(),new ElementWithType(false,tref.getTarget()));
}","public void addGlobalElement(TypeRef<T,C> tref){
  elementDecls.put(tref.getTagName().getLocalPart(),new ElementWithType(false,tref.getTarget()));
  addDependencyTo(tref.getTarget().getTypeName());
}",0.8530259365994236
190779,"private void addDependencyTo(QName qname){
  if (qname == null)   return;
  String nsUri=qname.getNamespaceURI();
  if (uri.equals(nsUri) || nsUri.equals(XML_SCHEMA))   return;
  depends.add(getNamespace(nsUri));
}","private void addDependencyTo(@Nullable QName qname){
  if (qname == null)   return;
  String nsUri=qname.getNamespaceURI();
  if (uri.equals(nsUri) || nsUri.equals(XML_SCHEMA))   return;
  depends.add(getNamespace(nsUri));
}",0.9771689497716894
190780,"public Class loadClass(String s){
  return null;
}","protected synchronized Class loadClass(String name,boolean resolve) throws ClassNotFoundException {
  if (matchesPrefix(name))   throw new ClassNotFoundException();
  return super.loadClass(name,resolve);
}",0.0703125
190781,"protected MaskingClassLoader(ClassLoader parent){
  super(parent);
}","public MaskingClassLoader(ClassLoader parent,List prefixList){
  super(parent);
  this.prefixList=(String[])prefixList.toArray(new String[prefixList.size()]);
}",0.5350877192982456
190782,"protected ParallelWorldClassLoader(ClassLoader parent,String prefix){
  super(parent);
  this.prefix=prefix;
  packagePrefixes=getPackagePrefixes();
}","protected ParallelWorldClassLoader(ClassLoader parent,String prefix){
  super(parent);
  this.prefix=prefix;
}",0.8461538461538461
190783,"protected URL findResource(String name){
  return getParent().getResource(prefix.concat(name));
}","protected URL findResource(String name){
  return getParent().getResource(prefix + '/' + name);
}",0.9072164948453608
190784,"protected Enumeration findResources(String name) throws IOException {
  return getParent().getResources(prefix.concat(name));
}","protected Enumeration findResources(String name) throws IOException {
  return getParent().getResources(prefix + '.' + name);
}",0.937007874015748
190785,"public void execute() throws BuildException {
  ClassLoader cl;
  Class driver;
  try {
    if (source.equals(""String_Node_Str"")) {
      cl=XJCTask.class.getClassLoader();
      driver=cl.loadClass(""String_Node_Str"");
    }
 else {
      cl=new ParallelWorldClassLoader(MaskingClassLoader.class.getClassLoader(),source);
      driver=cl.loadClass(""String_Node_Str"");
    }
    Task t=(Task)driver.newInstance();
    t.setProject(getProject());
    t.setTaskName(getTaskName());
    root.configure(t);
    t.execute();
  }
 catch (  UnsupportedClassVersionError e) {
    throw new BuildException(""String_Node_Str"");
  }
catch (  ClassNotFoundException e) {
    throw new BuildException(e);
  }
catch (  InstantiationException e) {
    throw new BuildException(e);
  }
catch (  IllegalAccessException e) {
    throw new BuildException(e);
  }
}","public void execute() throws BuildException {
  ClassLoader cl;
  Class driver;
  try {
    if (source.equals(""String_Node_Str"")) {
      cl=XJCTask.class.getClassLoader();
      driver=cl.loadClass(""String_Node_Str"");
    }
 else {
      cl=new ParallelWorldClassLoader(new MaskingClassLoader(getClass().getClassLoader(),maskedPackages),source);
      driver=cl.loadClass(""String_Node_Str"");
    }
    Task t=(Task)driver.newInstance();
    t.setProject(getProject());
    t.setTaskName(getTaskName());
    root.configure(t);
    t.execute();
  }
 catch (  UnsupportedClassVersionError e) {
    throw new BuildException(""String_Node_Str"");
  }
catch (  ClassNotFoundException e) {
    throw new BuildException(e);
  }
catch (  InstantiationException e) {
    throw new BuildException(e);
  }
catch (  IllegalAccessException e) {
    throw new BuildException(e);
  }
}",0.978375219170076
190786,"private void generateInternalGetter(){
  internalGetter=outline.implClass.method(JMod.PROTECTED,listT,""String_Node_Str"" + prop.getName(true));
  if (!eagerInstanciation) {
    fixNullRef(internalGetter.body());
  }
 else {
    field.init(newCoreList());
  }
  internalGetter.body()._return(field);
}","private void generateInternalGetter(){
  internalGetter=outline.implClass.method(JMod.PROTECTED,listT,""String_Node_Str"" + prop.getName(true));
  if (!eagerInstanciation) {
    fixNullRef(internalGetter.body());
  }
  internalGetter.body()._return(field);
}",0.7927927927927928
190787,"protected final void generate(){
  field=outline.implClass.field(JMod.PROTECTED,getCoreListType(),prop.getName(false));
  annotate(field);
  generateAccessors();
}","protected final void generate(){
  field=outline.implClass.field(JMod.PROTECTED,listT,prop.getName(false));
  if (eagerInstanciation)   field.init(newCoreList());
  annotate(field);
  generateAccessors();
}",0.7317073170731707
190788,"/** 
 * Performs the schema correctness check by using JAXP 1.3. <p> This is ""weak"", because   {@link SchemaFactory#newSchema(Source[])}doesn't handle inclusions very correctly (it ends up parsing it from its original source, not in this tree), and because it doesn't handle two documents for the same namespace very well. <p> We should eventually fix JAXP (and Xerces), but meanwhile this weaker and potentially wrong correctness check is still better than nothing when used inside JAX-WS (JAXB CLI and Ant does a better job of checking this.) <p> To receive errors, use   {@link SchemaFactory#setErrorHandler(ErrorHandler)}.
 */
public void weakSchemaCorrectnessCheck(SchemaFactory sf){
  SAXSource[] sources=new SAXSource[getRootDocuments().size()];
  int i=0;
  for (  String systemId : getRootDocuments()) {
    sources[i]=createSAXSource(systemId);
    try {
      sources[i].getXMLReader().setFeature(""String_Node_Str"",true);
    }
 catch (    SAXException e) {
      throw new AssertionError(e);
    }
  }
  try {
    sf.newSchema(sources);
  }
 catch (  SAXException e) {
  }
}","/** 
 * Performs the schema correctness check by using JAXP 1.3. <p> This is ""weak"", because   {@link SchemaFactory#newSchema(Source[])}doesn't handle inclusions very correctly (it ends up parsing it from its original source, not in this tree), and because it doesn't handle two documents for the same namespace very well. <p> We should eventually fix JAXP (and Xerces), but meanwhile this weaker and potentially wrong correctness check is still better than nothing when used inside JAX-WS (JAXB CLI and Ant does a better job of checking this.) <p> To receive errors, use   {@link SchemaFactory#setErrorHandler(ErrorHandler)}.
 */
public void weakSchemaCorrectnessCheck(SchemaFactory sf){
  SAXSource[] sources=new SAXSource[getRootDocuments().size()];
  int i=0;
  for (  String systemId : getRootDocuments()) {
    sources[i]=createSAXSource(systemId);
    try {
      sources[i].getXMLReader().setFeature(""String_Node_Str"",true);
    }
 catch (    SAXException e) {
      throw new AssertionError(e);
    }
    i++;
  }
  try {
    sf.newSchema(sources);
  }
 catch (  SAXException e) {
  }
}",0.9958734525447044
190789,"public static final void handleGenericException(Exception e,boolean canRecover) throws SAXException {
  reportError(e.getMessage(),e,canRecover);
}","public static void handleGenericException(Exception e,boolean canRecover) throws SAXException {
  reportError(e.getMessage(),e,canRecover);
}",0.9791666666666666
190790,"public static final void reportError(String msg,Exception nested,boolean canRecover) throws SAXException {
  UnmarshallingContext context=UnmarshallingContext.getInstance();
  context.handleEvent(new ValidationEventImpl(canRecover ? ValidationEvent.ERROR : ValidationEvent.FATAL_ERROR,msg,context.getLocator().getLocation(),nested),canRecover);
}","public static void reportError(String msg,Exception nested,boolean canRecover) throws SAXException {
  UnmarshallingContext context=UnmarshallingContext.getInstance();
  context.handleEvent(new ValidationEventImpl(canRecover ? ValidationEvent.ERROR : ValidationEvent.FATAL_ERROR,msg,context.getLocator().getLocation(),nested),canRecover);
}",0.9912536443148688
190791,"/** 
 * This method is called by the generated derived class when a datatype parse method throws an exception.
 */
protected static final void handleParseConversionException(UnmarshallingContext.State state,Exception e) throws SAXException {
  if (e instanceof RuntimeException)   throw (RuntimeException)e;
  state.getContext().handleError(e);
}","/** 
 * This method is called by the generated derived class when a datatype parse method throws an exception.
 */
protected static void handleParseConversionException(UnmarshallingContext.State state,Exception e) throws SAXException {
  state.getContext().handleError(e);
}",0.8838709677419355
190792,"public JClass getAdapterClass(JCodeModel cm){
  if (adapterClass1 == null)   adapterClass1=cm.ref(adapterClass2);
  return adapterClass1;
}","public JClass getAdapterClass(Outline o){
  if (adapterClass1 == null)   adapterClass1=o.getCodeModel().ref(adapterClass2);
  return adapterType.toType(o,Aspect.EXPOSED);
}",0.7717041800643086
190793,"public JExpression createConstant(Outline outline,XmlString lexical){
  if (isCollection())   return null;
  if (adapter == null)   return coreType.createConstant(outline,lexical);
  JExpression cons=coreType.createConstant(outline,lexical);
  Class<? extends XmlAdapter> atype=adapter.getAdapterIfKnown();
  if (cons instanceof JStringLiteral && atype != null) {
    JStringLiteral scons=(JStringLiteral)cons;
    XmlAdapter a=ClassFactory.create(atype);
    try {
      Object value=a.unmarshal(scons.str);
      if (value instanceof String) {
        return JExpr.lit((String)value);
      }
    }
 catch (    Exception e) {
    }
  }
  return JExpr._new(adapter.getAdapterClass(outline.getCodeModel())).invoke(""String_Node_Str"").arg(cons);
}","public JExpression createConstant(Outline outline,XmlString lexical){
  if (isCollection())   return null;
  if (adapter == null)   return coreType.createConstant(outline,lexical);
  JExpression cons=coreType.createConstant(outline,lexical);
  Class<? extends XmlAdapter> atype=adapter.getAdapterIfKnown();
  if (cons instanceof JStringLiteral && atype != null) {
    JStringLiteral scons=(JStringLiteral)cons;
    XmlAdapter a=ClassFactory.create(atype);
    try {
      Object value=a.unmarshal(scons.str);
      if (value instanceof String) {
        return JExpr.lit((String)value);
      }
    }
 catch (    Exception e) {
    }
  }
  return JExpr._new(adapter.getAdapterClass(outline)).invoke(""String_Node_Str"").arg(cons);
}",0.9898305084745764
190794,"/** 
 * Performs the schema correctness check by using JAXP 1.3. <p> This is ""weak"", because   {@link SchemaFactory#newSchema(Source[])}doesn't handle inclusions very correctly (it ends up parsing it from its original source, not in this tree), and because it doesn't handle two documents for the same namespace very well. <p> We should eventually fix JAXP (and Xerces), but meanwhile this weaker and potentially wrong correctness check is still better than nothing when used inside JAX-WS (JAXB CLI and Ant does a better job of checking this.) <p> To receive errors, use   {@link SchemaFactory#setErrorHandler(ErrorHandler)}.
 */
public void weakSchemaCorrectnessCheck(SchemaFactory sf){
  SAXSource[] sources=new SAXSource[getRootDocuments().size()];
  int i=0;
  for (  String systemId : getRootDocuments()) {
    sources[i]=createSAXSource(systemId);
    try {
      sources[i].getXMLReader().setFeature(""String_Node_Str"",true);
    }
 catch (    SAXException e) {
      throw new AssertionError(e);
    }
    i++;
  }
  try {
    sf.newSchema(sources);
  }
 catch (  SAXException e) {
  }
}","/** 
 * Performs the schema correctness check by using JAXP 1.3. <p> This is ""weak"", because   {@link SchemaFactory#newSchema(Source[])}doesn't handle inclusions very correctly (it ends up parsing it from its original source, not in this tree), and because it doesn't handle two documents for the same namespace very well. <p> We should eventually fix JAXP (and Xerces), but meanwhile this weaker and potentially wrong correctness check is still better than nothing when used inside JAX-WS (JAXB CLI and Ant does a better job of checking this.) <p> To receive errors, use   {@link SchemaFactory#setErrorHandler(ErrorHandler)}.
 */
public void weakSchemaCorrectnessCheck(SchemaFactory sf){
  List<SAXSource> sources=new ArrayList<SAXSource>();
  for (  String systemId : getRootDocuments()) {
    Document dom=get(systemId);
    if (dom.getDocumentElement().getNamespaceURI().equals(Const.JAXB_NSURI))     continue;
    SAXSource ss=createSAXSource(systemId);
    try {
      ss.getXMLReader().setFeature(""String_Node_Str"",true);
    }
 catch (    SAXException e) {
      throw new AssertionError(e);
    }
    sources.add(ss);
  }
  try {
    sf.newSchema(sources.toArray(new SAXSource[0]));
  }
 catch (  SAXException e) {
  }
}",0.8166953528399311
190795,"private void handleCharacters(){
  if (context.expectText()) {
    if (firstCIIChunk && fastInfosetStreamReader.getTextAlgorithmBytes() == null) {
      buffer.append(fastInfosetStreamReader.getTextCharacters(),fastInfosetStreamReader.getTextStart(),fastInfosetStreamReader.getTextLength());
      firstCIIChunk=false;
    }
 else     if (firstCIIChunk && fastInfosetStreamReader.getTextAlgorithmIndex() == EncodingAlgorithmIndexes.BASE64) {
      firstCIIChunk=false;
      hasBase64Data=true;
      base64Data.set(fastInfosetStreamReader.getTextAlgorithmBytesClone(),""String_Node_Str"");
      return;
    }
 else {
      if (hasBase64Data) {
        buffer.append(base64Data);
        hasBase64Data=false;
      }
      buffer.append(fastInfosetStreamReader.getTextCharacters(),fastInfosetStreamReader.getTextStart(),fastInfosetStreamReader.getTextLength());
    }
  }
}","private void handleCharacters(){
  if (context.expectText()) {
    if (firstCIIChunk && fastInfosetStreamReader.getTextAlgorithmBytes() == null) {
      buffer.append(fastInfosetStreamReader.getTextCharacters(),fastInfosetStreamReader.getTextStart(),fastInfosetStreamReader.getTextLength());
      firstCIIChunk=false;
    }
 else     if (firstCIIChunk && fastInfosetStreamReader.getTextAlgorithmIndex() == EncodingAlgorithmIndexes.BASE64) {
      firstCIIChunk=false;
      hasBase64Data=true;
      base64Data.set(fastInfosetStreamReader.getTextAlgorithmBytesClone(),null);
      return;
    }
 else {
      if (hasBase64Data) {
        buffer.append(base64Data);
        hasBase64Data=false;
      }
      buffer.append(fastInfosetStreamReader.getTextCharacters(),fastInfosetStreamReader.getTextStart(),fastInfosetStreamReader.getTextLength());
    }
  }
}",0.9878682842287696
190796,"public TypeUse getTypeUse(XSSimpleType owner){
  if (typeUse != null)   return typeUse;
  JCodeModel cm=getCodeModel();
  typeUse=TypeUseFactory.adapt(CBuiltinLeafInfo.STRING,new CAdapter(cm.ref(adapter)));
  return typeUse;
}","public TypeUse getTypeUse(XSSimpleType owner){
  if (typeUse != null)   return typeUse;
  JCodeModel cm=getCodeModel();
  JDefinedClass a;
  try {
    a=cm._class(adapter);
    a.hide();
    a._extends(cm.ref(XmlAdapter.class).narrow(String.class).narrow(cm.ref(type)));
  }
 catch (  JClassAlreadyExistsException e) {
    a=e.getExistingClass();
  }
  typeUse=TypeUseFactory.adapt(CBuiltinLeafInfo.STRING,new CAdapter(a));
  return typeUse;
}",0.6307922272047832
190797,"@Override protected void handleCharacters() throws XMLStreamException, SAXException {
  if (context.expectText()) {
    CharSequence pcdata=in.getPCDATA();
    if (pcdata instanceof org.jvnet.staxex.Base64Data) {
      org.jvnet.staxex.Base64Data bd=(org.jvnet.staxex.Base64Data)pcdata;
      binary.set(bd.get(),bd.getDataLen(),bd.getMimeType());
      visitor.text(binary);
    }
 else {
      buffer.append(pcdata);
    }
  }
}","@Override protected void handleCharacters() throws XMLStreamException, SAXException {
  if (context.expectText()) {
    CharSequence pcdata=in.getPCDATA();
    if (pcdata instanceof org.jvnet.staxex.Base64Data) {
      org.jvnet.staxex.Base64Data bd=(org.jvnet.staxex.Base64Data)pcdata;
      binary.set(bd.get(),bd.getDataLen(),bd.getMimeType());
      visitor.text(binary);
      textReported=true;
    }
 else {
      buffer.append(pcdata);
    }
  }
}",0.9717514124293786
190798,"private void processText(boolean ignorable) throws SAXException {
  if (context.expectText() && (!ignorable || !WhiteSpaceProcessor.isWhiteSpace(buffer)))   visitor.text(buffer);
  buffer.setLength(0);
}","private void processText(boolean ignorable) throws SAXException {
  if (context.expectText() && (!ignorable || !WhiteSpaceProcessor.isWhiteSpace(buffer))) {
    if (textReported) {
      textReported=false;
    }
 else {
      visitor.text(buffer);
    }
  }
  buffer.setLength(0);
}",0.8353909465020576
190799,"/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  boolean allNillable=true;
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
 else {
      allNillable=false;
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired() && !allNillable) {
      occurs.minOccurs(0);
    }
  }
}","/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    if (canBeDirectElementRef(t,tn) || (!tn.getNamespaceURI().equals(uri) && tn.getNamespaceURI().length() > 0)) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired()) {
      occurs.minOccurs(0);
    }
  }
}",0.9831060451862406
190800,"public void generateSchema(SchemaOutputResolver outputResolver) throws IOException {
  if (outputResolver == null) {
    throw new IOException(Messages.NULL_OUTPUT_RESOLVER.format());
  }
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,null);
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,typeInfo);
    }
  }
  xsdgen.write(outputResolver);
}","public void generateSchema(SchemaOutputResolver outputResolver) throws IOException {
  if (outputResolver == null) {
    throw new IOException(Messages.NULL_OUTPUT_RESOLVER.format());
  }
  RuntimeTypeInfoSet tis;
  try {
    tis=getTypeInfoSet();
  }
 catch (  IllegalAnnotationsException e) {
    throw new AssertionError(e);
  }
  XmlSchemaGenerator<Type,Class,Field,Method> xsdgen=new XmlSchemaGenerator<Type,Class,Field,Method>(tis.getNavigator(),tis);
  Set<QName> rootTagNames=new HashSet<QName>();
  for (  RuntimeElementInfo ei : tis.getAllElements()) {
    rootTagNames.add(ei.getElementName());
  }
  for (  RuntimeClassInfo ci : tis.beans().values()) {
    if (ci.isElement())     rootTagNames.add(ci.asElement().getElementName());
  }
  for (  TypeReference tr : bridges.keySet()) {
    if (rootTagNames.contains(tr.tagName))     continue;
    if (tr.type == void.class || tr.type == Void.class) {
      xsdgen.add(tr.tagName,false,null);
    }
 else {
      NonElement<Type,Class> typeInfo=getXmlType(tis,tr);
      xsdgen.add(tr.tagName,Navigator.REFLECTION.isPrimitive(tr.type),typeInfo);
    }
  }
  xsdgen.write(outputResolver);
}",0.9750889679715302
190801,"public ElementWithType(NonElement<T,C> type){
  this.type=type;
}","public ElementWithType(boolean nillable,NonElement<T,C> type){
  this.type=type;
  this.nillable=nillable;
}",0.7514450867052023
190802,"public void addGlobalElement(TypeRef<T,C> tref){
  elementDecls.put(tref.getTagName().getLocalPart(),new ElementWithType(tref.getTarget()));
}","public void addGlobalElement(TypeRef<T,C> tref){
  elementDecls.put(tref.getTagName().getLocalPart(),new ElementWithType(false,tref.getTarget()));
}",0.9793103448275862
190803,"/** 
 * Adds an additional element declaration.
 * @param tagName The name of the element declaration to be added.
 * @param type The type this element refers to. Can be null, in which case the element refers to an empty anonymous complex type.
 */
public void add(QName tagName,NonElement<T,C> type){
  if (type != null && type.getType() == navigator.ref(CompositeStructure.class))   return;
  Namespace n=getNamespace(tagName.getNamespaceURI());
  n.elementDecls.put(tagName.getLocalPart(),n.new ElementWithType(type));
  if (type != null)   n.addDependencyTo(type.getTypeName());
}","/** 
 * Adds an additional element declaration.
 * @param tagName The name of the element declaration to be added.
 * @param type The type this element refers to. Can be null, in which case the element refers to an empty anonymous complex type.
 */
public void add(QName tagName,boolean isNillable,NonElement<T,C> type){
  if (type != null && type.getType() == navigator.ref(CompositeStructure.class))   return;
  Namespace n=getNamespace(tagName.getNamespaceURI());
  n.elementDecls.put(tagName.getLocalPart(),n.new ElementWithType(isNillable,type));
  if (type != null)   n.addDependencyTo(type.getTypeName());
}",0.9749582637729548
190804,"public void writeTo(String localName,Schema schema){
  TopLevelElement e=schema.element().name(localName);
  if (type != null) {
    if (!navigator.isPrimitive(type.getType()))     e.nillable(true);
    writeTypeRef(e,type,""String_Node_Str"");
  }
 else {
    e.complexType();
  }
  e.commit();
}","public void writeTo(String localName,Schema schema){
  TopLevelElement e=schema.element().name(localName);
  if (nillable)   e.nillable(true);
  if (type != null) {
    writeTypeRef(e,type,""String_Node_Str"");
  }
 else {
    e.complexType();
  }
  e.commit();
}",0.8093525179856115
190805,"public void generateSchema(SchemaOutputResolver outputResolver,ErrorListener errorListener) throws IOException {
  XmlSchemaGenerator<TypeMirror,TypeDeclaration,FieldDeclaration,MethodDeclaration> xsdgen=new XmlSchemaGenerator<TypeMirror,TypeDeclaration,FieldDeclaration,MethodDeclaration>(types.getNavigator(),types);
  for (  Map.Entry<QName,Reference> e : additionalElementDecls.entrySet()) {
    Reference value=e.getValue();
    if (value != null) {
      NonElement<TypeMirror,TypeDeclaration> typeInfo=refMap.get(value);
      if (typeInfo == null)       throw new IllegalArgumentException(e.getValue() + ""String_Node_Str"");
      xsdgen.add(e.getKey(),typeInfo);
    }
 else {
      xsdgen.add(e.getKey(),null);
    }
  }
  xsdgen.write(outputResolver);
}","public void generateSchema(SchemaOutputResolver outputResolver,ErrorListener errorListener) throws IOException {
  XmlSchemaGenerator<TypeMirror,TypeDeclaration,FieldDeclaration,MethodDeclaration> xsdgen=new XmlSchemaGenerator<TypeMirror,TypeDeclaration,FieldDeclaration,MethodDeclaration>(types.getNavigator(),types);
  for (  Map.Entry<QName,Reference> e : additionalElementDecls.entrySet()) {
    Reference value=e.getValue();
    if (value != null) {
      NonElement<TypeMirror,TypeDeclaration> typeInfo=refMap.get(value);
      if (typeInfo == null)       throw new IllegalArgumentException(e.getValue() + ""String_Node_Str"");
      xsdgen.add(e.getKey(),value.type instanceof PrimitiveType,typeInfo);
    }
 else {
      xsdgen.add(e.getKey(),false,null);
    }
  }
  xsdgen.write(outputResolver);
}",0.9732142857142856
190806,"@Override public void startElement(UnmarshallingContext.State state,TagName ea){
  state.getContext().startScope(1);
}","@Override public void startElement(UnmarshallingContext.State state,TagName ea){
  state.getContext().startScope(1);
  state.target=state.prev.target;
}",0.8740740740740741
190807,"/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(AccessType at){
  TODO.checkSpec();
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  Collection<? extends M> methods=nav().getDeclaredMethods(clazz);
  for (  M method : methods) {
    boolean used=false;
    if (nav().isBridgeMethod(method))     continue;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null) {
      if (arity == 0) {
        getters.put(propName,method);
        used=true;
      }
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null) {
      if (arity == 1) {
        setters.put(propName,method);
        used=true;
      }
    }
    if (!used)     ensureNoAnnotation(method);
  }
  Set<String> complete=new TreeSet<String>();
  complete.addAll(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,this) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,this) : EMPTY_ANNOTATIONS;
    boolean getterHasAnnotation=hasJAXBAnnotation(ga);
    boolean setterHasAnnotation=hasJAXBAnnotation(sa);
    if (at == AccessType.PROPERTY || (at == AccessType.PUBLIC_MEMBER && (getter == null || nav().isPublicMethod(getter)) && (setter == null || nav().isPublicMethod(setter))) || getterHasAnnotation || setterHasAnnotation) {
      if (getter != null && setter != null && !nav().getReturnType(getter).equals(nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}","/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(AccessType at){
  TODO.checkSpec();
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  Collection<? extends M> methods=nav().getDeclaredMethods(clazz);
  for (  M method : methods) {
    boolean used=false;
    if (nav().isBridgeMethod(method))     continue;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null) {
      if (arity == 0) {
        getters.put(propName,method);
        used=true;
      }
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null) {
      if (arity == 1) {
        setters.put(propName,method);
        used=true;
      }
    }
    if (!used)     ensureNoAnnotation(method);
  }
  Set<String> complete=new TreeSet<String>();
  complete.addAll(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,new MethodLocatable<M>(this,getter,nav())) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,new MethodLocatable<M>(this,setter,nav())) : EMPTY_ANNOTATIONS;
    boolean getterHasAnnotation=hasJAXBAnnotation(ga);
    boolean setterHasAnnotation=hasJAXBAnnotation(sa);
    if (at == AccessType.PROPERTY || (at == AccessType.PUBLIC_MEMBER && (getter == null || nav().isPublicMethod(getter)) && (setter == null || nav().isPublicMethod(setter))) || getterHasAnnotation || setterHasAnnotation) {
      if (getter != null && setter != null && !nav().getReturnType(getter).equals(nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}",0.9837192474674384
190808,"/** 
 * Generate the simplest XmlElement annotation possible taking all semantic optimizations into account.  This method is essentially equivalent to: xew.name(ctype.getTagName().getLocalPart()) .namespace(ctype.getTagName().getNamespaceURI()) .type(jtype) .defaultValue(ctype.getDefaultValue());
 * @param field
 * @param ctype
 * @param jtype
 * @param checkWrapper true if the method might need to generate XmlElements
 */
private void writeXmlElementAnnotation(JAnnotatable field,CTypeRef ctype,JType jtype,boolean checkWrapper){
  XmlElementWriter xew=null;
  XmlNsForm formDefault=parent()._package().getElementFormDefault();
  String mostUsedURI=parent()._package().getMostUsedNamespaceURI();
  String propName=prop.getName(false);
  String generatedName=ctype.getTagName().getLocalPart();
  if (!generatedName.equals(propName)) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.name(generatedName);
  }
  String generatedNS=ctype.getTagName().getNamespaceURI();
  if (((formDefault == XmlNsForm.QUALIFIED) && !generatedNS.equals(mostUsedURI)) || ((formDefault == XmlNsForm.UNQUALIFIED) && !generatedNS.equals(""String_Node_Str""))) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.namespace(generatedNS);
  }
  if (!jtype.equals(exposedType) || (parent().parent().getModel().options.runtime14 && prop.isCollection())) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.type(jtype);
  }
  final String defaultValue=ctype.getDefaultValue();
  if (defaultValue != null) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.defaultValue(defaultValue);
  }
  if (ctype.isNillable()) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.nillable(true);
  }
}","/** 
 * Generate the simplest XmlElement annotation possible taking all semantic optimizations into account.  This method is essentially equivalent to: xew.name(ctype.getTagName().getLocalPart()) .namespace(ctype.getTagName().getNamespaceURI()) .type(jtype) .defaultValue(ctype.getDefaultValue());
 * @param field
 * @param ctype
 * @param jtype
 * @param checkWrapper true if the method might need to generate XmlElements
 */
private void writeXmlElementAnnotation(JAnnotatable field,CTypeRef ctype,JType jtype,boolean checkWrapper){
  XmlElementWriter xew=null;
  XmlNsForm formDefault=parent()._package().getElementFormDefault();
  String mostUsedURI=parent()._package().getMostUsedNamespaceURI();
  String propName=prop.getName(false);
  String generatedName=ctype.getTagName().getLocalPart();
  if (!generatedName.equals(propName)) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.name(generatedName);
  }
  String generatedNS=ctype.getTagName().getNamespaceURI();
  if (((formDefault == XmlNsForm.QUALIFIED) && !generatedNS.equals(mostUsedURI)) || ((formDefault == XmlNsForm.UNQUALIFIED) && !generatedNS.equals(""String_Node_Str""))) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.namespace(generatedNS);
  }
  CElementPropertyInfo ep=(CElementPropertyInfo)prop;
  if (ep.isRequired() && exposedType.isReference()) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.required(true);
  }
  if (ep.isRequired() && !prop.isCollection())   jtype=jtype.unboxify();
  if (!jtype.equals(exposedType) || (parent().parent().getModel().options.runtime14 && prop.isCollection())) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.type(jtype);
  }
  final String defaultValue=ctype.getDefaultValue();
  if (defaultValue != null) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.defaultValue(defaultValue);
  }
  if (ctype.isNillable()) {
    if (xew == null)     xew=getXew(checkWrapper,field);
    xew.nillable(true);
  }
}",0.928915018706574
190809,"/** 
 * The same as   {@link #create0} but with an error handling to makethe instanciation error fatal.
 */
public static <T>T create(Class<T> clazz){
  try {
    return create0(clazz);
  }
 catch (  InstantiationException e) {
    logger.log(Level.INFO,""String_Node_Str"" + clazz,e);
    throw new InstantiationError(e.toString());
  }
catch (  IllegalAccessException e) {
    logger.log(Level.INFO,""String_Node_Str"" + clazz,e);
    throw new IllegalAccessError(e.toString());
  }
catch (  InvocationTargetException e) {
    Throwable target=e.getTargetException();
    if (target instanceof RuntimeException)     throw (RuntimeException)target;
    if (target instanceof Error)     throw (Error)target;
    throw new IllegalStateException(target);
  }
}","/** 
 * Call a method in the factory class to get the object.
 */
public static Object create(final Method method) throws IllegalAccessException, InvocationTargetException, InstantiationException {
  return AccessController.doPrivileged(new PrivilegedAction(){
    public Object run(){
      Object cons=null;
      Throwable errorMsg=null;
      try {
        cons=method.invoke(null,emptyObject);
      }
 catch (      InvocationTargetException ive) {
        Throwable target=ive.getTargetException();
        if (target instanceof RuntimeException)         throw (RuntimeException)target;
        if (target instanceof Error)         throw (Error)target;
        throw new IllegalStateException(target);
      }
catch (      IllegalAccessException e) {
        logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),e);
        throw new IllegalAccessError(e.toString());
      }
catch (      IllegalArgumentException iae) {
        logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),iae);
        errorMsg=iae;
      }
catch (      NullPointerException npe) {
        logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),npe);
        errorMsg=npe;
      }
catch (      ExceptionInInitializerError eie) {
        logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),eie);
        errorMsg=eie;
      }
      if (errorMsg != null) {
        NoSuchMethodError exp;
        exp=new NoSuchMethodError(errorMsg.getMessage());
        exp.initCause(errorMsg);
        throw exp;
      }
      return cons;
    }
  }
);
}",0.193985599322321
190810,"public Constructor<T> run(){
  Constructor<T> cons;
  try {
    cons=clazz.getDeclaredConstructor(emptyClass);
  }
 catch (  NoSuchMethodException e) {
    logger.log(Level.INFO,""String_Node_Str"" + clazz,e);
    NoSuchMethodError exp;
    if (clazz.getDeclaringClass() != null && !Modifier.isStatic(clazz.getModifiers())) {
      exp=new NoSuchMethodError(Messages.NO_DEFAULT_CONSTRUCTOR_IN_INNER_CLASS.format(clazz.getName()));
    }
 else {
      exp=new NoSuchMethodError(e.getMessage());
    }
    exp.initCause(e);
    throw exp;
  }
  int classMod=clazz.getModifiers();
  if (!Modifier.isPublic(classMod) || !Modifier.isPublic(cons.getModifiers())) {
    try {
      cons.setAccessible(true);
    }
 catch (    SecurityException e) {
      logger.log(Level.FINE,""String_Node_Str"" + clazz + ""String_Node_Str"",e);
      throw e;
    }
  }
  return cons;
}","public Object run(){
  Object cons=null;
  Throwable errorMsg=null;
  try {
    cons=method.invoke(null,emptyObject);
  }
 catch (  InvocationTargetException ive) {
    Throwable target=ive.getTargetException();
    if (target instanceof RuntimeException)     throw (RuntimeException)target;
    if (target instanceof Error)     throw (Error)target;
    throw new IllegalStateException(target);
  }
catch (  IllegalAccessException e) {
    logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),e);
    throw new IllegalAccessError(e.toString());
  }
catch (  IllegalArgumentException iae) {
    logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),iae);
    errorMsg=iae;
  }
catch (  NullPointerException npe) {
    logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),npe);
    errorMsg=npe;
  }
catch (  ExceptionInInitializerError eie) {
    logger.log(Level.INFO,""String_Node_Str"" + method.getReturnType().getName(),eie);
    errorMsg=eie;
  }
  if (errorMsg != null) {
    NoSuchMethodError exp;
    exp=new NoSuchMethodError(errorMsg.getMessage());
    exp.initCause(errorMsg);
    throw exp;
  }
  return cons;
}",0.1536203522504892
190811,"/** 
 * A   {@link ClassInfo} can be referenced by {@link XmlIDREF} ifit has an ID property.
 */
public boolean canBeReferencedByIDREF(){
  for (  PropertyInfo<T,C> p : getProperties()) {
    if (p.id() == ID.ID)     return true;
  }
  return false;
}","/** 
 * A   {@link ClassInfo} can be referenced by {@link XmlIDREF} ifit has an ID property.
 */
public boolean canBeReferencedByIDREF(){
  for (  PropertyInfo<T,C> p : getProperties()) {
    if (p.id() == ID.ID)     return true;
  }
  ClassInfoImpl<T,C,F,M> base=getBaseClass();
  if (base != null)   return base.canBeReferencedByIDREF();
 else   return false;
}",0.7785016286644951
190812,"private void processText(boolean ignorable) throws SAXException {
  firstCIIChunk=true;
  if (context.expectText() && (!ignorable || !WhiteSpaceProcessor.isWhiteSpace(buffer))) {
    if (!hasBase64Data) {
      visitor.text(buffer);
      buffer.setLength(0);
    }
 else {
      visitor.text(base64Data);
      hasBase64Data=false;
    }
  }
}","private void processText(boolean ignorable) throws SAXException {
  firstCIIChunk=true;
  if (context.expectText() && (!ignorable || !WhiteSpaceProcessor.isWhiteSpace(buffer))) {
    if (!hasBase64Data) {
      visitor.text(buffer);
    }
 else {
      visitor.text(base64Data);
      hasBase64Data=false;
    }
  }
  buffer.setLength(0);
}",0.9269005847953216
190813,"/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    com.sun.xml.bind.v2.schemagen.xmlschema.List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  boolean allNillable=true;
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    boolean useElementRef=false;
    if (t.getTarget() instanceof Element) {
      Element te=(Element)t.getTarget();
      QName targetTagName=te.getElementName();
      useElementRef=targetTagName != null && targetTagName.equals(tn);
    }
    if (t.isNillable() || t.getDefaultValue() != null)     useElementRef=false;
    if (useElementRef) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
 else {
      allNillable=false;
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired() && !allNillable) {
      occurs.minOccurs(0);
    }
  }
}","/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<T,C> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef<T,C> t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    elementFormDefault.writeForm(e,tn);
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
      }
      elementFormDefault.writeForm(e,ename);
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  boolean allNillable=true;
  for (  TypeRef<T,C> t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    boolean useElementRef=false;
    if (t.getTarget() instanceof Element) {
      Element te=(Element)t.getTarget();
      QName targetTagName=te.getElementName();
      useElementRef=targetTagName != null && targetTagName.equals(tn);
    }
    if (t.isNillable() || t.getDefaultValue() != null)     useElementRef=false;
    if (useElementRef) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      elementFormDefault.writeForm(e,tn);
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
 else {
      allNillable=false;
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired() && !allNillable) {
      occurs.minOccurs(0);
    }
  }
}",0.9927272727272728
190814,"public ClassInfoImpl<T,C,F,M> getScope(){
  TODO.checkSpec(""String_Node_Str"");
  return null;
}","/** 
 * When a bean binds to an element, it's always through   {@link XmlRootElement}, so this method always return null.
 * @deprecated you shouldn't be invoking this method on  {@link ClassInfoImpl}.
 */
public ClassInfoImpl<T,C,F,M> getScope(){
  return null;
}",0.2618384401114206
190815,"/** 
 * @param clazz
 * @param type clazz and type should both point to the enum class that this  {@link EnumLeafInfo} represents.Because of the type parameterization we have to take them separately.
 */
public EnumLeafInfoImpl(ModelBuilder<T,C,F,M> builder,Locatable upstream,C clazz,T type){
  super(builder,upstream);
  this.clazz=clazz;
  this.type=type;
  typeName=parseTypeName(clazz);
  XmlEnum xe=builder.reader.getClassAnnotation(XmlEnum.class,clazz,this);
  if (xe != null) {
    T base=builder.reader.getClassValue(xe,""String_Node_Str"");
    baseType=builder.getTypeInfo(base,this);
  }
 else {
    baseType=builder.getTypeInfo(builder.nav.ref(String.class),this);
  }
}","/** 
 * @param clazz
 * @param type clazz and type should both point to the enum class that this  {@link EnumLeafInfo} represents.Because of the type parameterization we have to take them separately.
 */
public EnumLeafInfoImpl(ModelBuilder<T,C,F,M> builder,Locatable upstream,C clazz,T type){
  super(builder,upstream);
  this.clazz=clazz;
  this.type=type;
  elementName=parseElementName(clazz);
  typeName=parseTypeName(clazz);
  XmlEnum xe=builder.reader.getClassAnnotation(XmlEnum.class,clazz,this);
  if (xe != null) {
    T base=builder.reader.getClassValue(xe,""String_Node_Str"");
    baseType=builder.getTypeInfo(base,this);
  }
 else {
    baseType=builder.getTypeInfo(builder.nav.ref(String.class),this);
  }
}",0.9721627408993576
190816,"public Iterator<? extends EnumConstantImpl<T,C,F,M>> iterator(){
  return new Iterator<EnumConstantImpl<T,C,F,M>>(){
    private EnumConstantImpl<T,C,F,M> next=firstConstant;
    public boolean hasNext(){
      return next != null;
    }
    public EnumConstantImpl<T,C,F,M> next(){
      EnumConstantImpl<T,C,F,M> r=next;
      next=next.next;
      return r;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}","public Iterator<EnumConstantImpl<T,C,F,M>> iterator(){
  return new Iterator<EnumConstantImpl<T,C,F,M>>(){
    private EnumConstantImpl<T,C,F,M> next=firstConstant;
    public boolean hasNext(){
      return next != null;
    }
    public EnumConstantImpl<T,C,F,M> next(){
      EnumConstantImpl<T,C,F,M> r=next;
      next=next.next;
      return r;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}",0.9888888888888888
190817,"private boolean addAllSubtypes(T type){
  Navigator<T,C,F,M> nav=nav();
  NonElement<T,C> t=parent.builder.getClassInfo(nav.asDecl(type),this);
  if (!(t instanceof ClassInfo))   return false;
  boolean result=false;
  ClassInfo<T,C> c=(ClassInfo<T,C>)t;
  if (c != null && c.isElement()) {
    types.add(c.asElement());
    result=true;
  }
  for (  ClassInfo<T,C> ci : parent.owner.beans().values()) {
    if (ci.isElement() && nav.isSubClassOf(ci.getType(),type)) {
      types.add(ci.asElement());
      result=true;
    }
  }
  for (  ElementInfo<T,C> ei : parent.owner.getElementMappings(null).values()) {
    if (nav.isSubClassOf(ei.getType(),type)) {
      types.add(ei);
      result=true;
    }
  }
  return result;
}","private boolean addAllSubtypes(T type){
  Navigator<T,C,F,M> nav=nav();
  NonElement<T,C> t=parent.builder.getClassInfo(nav.asDecl(type),this);
  if (!(t instanceof ClassInfo))   return false;
  boolean result=false;
  ClassInfo<T,C> c=(ClassInfo<T,C>)t;
  if (c.isElement()) {
    types.add(c.asElement());
    result=true;
  }
  for (  ClassInfo<T,C> ci : parent.owner.beans().values()) {
    if (ci.isElement() && nav.isSubClassOf(ci.getType(),type)) {
      types.add(ci.asElement());
      result=true;
    }
  }
  for (  ElementInfo<T,C> ei : parent.owner.getElementMappings(null).values()) {
    if (nav.isSubClassOf(ei.getType(),type)) {
      types.add(ei);
      result=true;
    }
  }
  return result;
}",0.4344205412907703
190818,"public final XmlNsForm getAttributeFormDefault(String nsUri){
  for (  ClassInfoImpl<TypeT,ClassDeclT,FieldT,MethodT> ci : beans().values()) {
    XmlSchema xs=reader.getPackageAnnotation(XmlSchema.class,ci.getClazz(),null);
    if (xs == null)     continue;
    if (!xs.namespace().equals(nsUri))     continue;
    XmlNsForm xnf=xs.attributeFormDefault();
    if (xnf != XmlNsForm.UNSET)     return xnf;
  }
  return XmlNsForm.UNQUALIFIED;
}","public final XmlNsForm getAttributeFormDefault(String nsUri){
  for (  ClassInfoImpl<TypeT,ClassDeclT,FieldT,MethodT> ci : beans().values()) {
    XmlSchema xs=reader.getPackageAnnotation(XmlSchema.class,ci.getClazz(),null);
    if (xs == null)     continue;
    if (!xs.namespace().equals(nsUri))     continue;
    XmlNsForm xnf=xs.attributeFormDefault();
    if (xnf != XmlNsForm.UNSET)     return xnf;
  }
  return XmlNsForm.UNSET;
}",0.9886104783599088
190819,"public final XmlNsForm getElementFormDefault(String nsUri){
  for (  ClassInfoImpl<TypeT,ClassDeclT,FieldT,MethodT> ci : beans().values()) {
    XmlSchema xs=reader.getPackageAnnotation(XmlSchema.class,ci.getClazz(),null);
    if (xs == null)     continue;
    if (!xs.namespace().equals(nsUri))     continue;
    XmlNsForm xnf=xs.elementFormDefault();
    if (xnf != XmlNsForm.UNSET)     return xnf;
  }
  return XmlNsForm.UNQUALIFIED;
}","public final XmlNsForm getElementFormDefault(String nsUri){
  for (  ClassInfoImpl<TypeT,ClassDeclT,FieldT,MethodT> ci : beans().values()) {
    XmlSchema xs=reader.getPackageAnnotation(XmlSchema.class,ci.getClazz(),null);
    if (xs == null)     continue;
    if (!xs.namespace().equals(nsUri))     continue;
    XmlNsForm xnf=xs.elementFormDefault();
    if (xnf != XmlNsForm.UNSET)     return xnf;
  }
  return XmlNsForm.UNSET;
}",0.9885057471264368
190820,"/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(AccessType at){
  TODO.checkSpec();
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  Collection<? extends M> methods=nav().getDeclaredMethods(clazz);
  for (  M method : methods) {
    boolean used=false;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null) {
      if (arity == 0) {
        getters.put(propName,method);
        used=true;
      }
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null) {
      if (arity == 1) {
        setters.put(propName,method);
        used=true;
      }
    }
    if (!used)     ensureNoAnnotation(method);
  }
  Set<String> complete=new TreeSet<String>();
  complete.addAll(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,this) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,this) : EMPTY_ANNOTATIONS;
    boolean getterHasAnnotation=hasJAXBAnnotation(ga);
    boolean setterHasAnnotation=hasJAXBAnnotation(sa);
    if (at == AccessType.PROPERTY || (at == AccessType.PUBLIC_MEMBER && (getter == null || nav().isPublicMethod(getter)) && (setter == null || nav().isPublicMethod(setter))) || getterHasAnnotation || setterHasAnnotation) {
      if (getter != null && setter != null && !nav().getReturnType(getter).equals(nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}","/** 
 * Adds properties that consists of accessors.
 */
private void findGetterSetterProperties(AccessType at){
  TODO.checkSpec();
  Map<String,M> getters=new LinkedHashMap<String,M>();
  Map<String,M> setters=new LinkedHashMap<String,M>();
  Collection<? extends M> methods=nav().getDeclaredMethods(clazz);
  for (  M method : methods) {
    boolean used=false;
    if (nav().isBridgeMethod(method))     continue;
    String name=nav().getMethodName(method);
    int arity=nav().getMethodParameters(method).length;
    if (nav().isStaticMethod(method)) {
      ensureNoAnnotation(method);
      continue;
    }
    String propName=getPropertyNameFromGetMethod(name);
    if (propName != null) {
      if (arity == 0) {
        getters.put(propName,method);
        used=true;
      }
    }
    propName=getPropertyNameFromSetMethod(name);
    if (propName != null) {
      if (arity == 1) {
        setters.put(propName,method);
        used=true;
      }
    }
    if (!used)     ensureNoAnnotation(method);
  }
  Set<String> complete=new TreeSet<String>();
  complete.addAll(getters.keySet());
  complete.retainAll(setters.keySet());
  resurrect(getters,complete);
  resurrect(setters,complete);
  for (  String name : complete) {
    M getter=getters.get(name);
    M setter=setters.get(name);
    Annotation[] ga=getter != null ? reader().getAllMethodAnnotations(getter,this) : EMPTY_ANNOTATIONS;
    Annotation[] sa=setter != null ? reader().getAllMethodAnnotations(setter,this) : EMPTY_ANNOTATIONS;
    boolean getterHasAnnotation=hasJAXBAnnotation(ga);
    boolean setterHasAnnotation=hasJAXBAnnotation(sa);
    if (at == AccessType.PROPERTY || (at == AccessType.PUBLIC_MEMBER && (getter == null || nav().isPublicMethod(getter)) && (setter == null || nav().isPublicMethod(setter))) || getterHasAnnotation || setterHasAnnotation) {
      if (getter != null && setter != null && !nav().getReturnType(getter).equals(nav().getMethodParameters(setter)[0])) {
        builder.reportError(new IllegalAnnotationException(Messages.GETTER_SETTER_INCOMPATIBLE_TYPE.format(nav().getTypeName(nav().getReturnType(getter)),nav().getTypeName(nav().getMethodParameters(setter)[0])),new MethodLocatable<M>(this,getter,nav()),new MethodLocatable<M>(this,setter,nav())));
        continue;
      }
      Annotation[] r;
      if (ga.length == 0) {
        r=sa;
      }
 else       if (sa.length == 0) {
        r=ga;
      }
 else {
        r=new Annotation[ga.length + sa.length];
        System.arraycopy(ga,0,r,0,ga.length);
        System.arraycopy(sa,0,r,ga.length,sa.length);
      }
      addProperty(createAccessorSeed(getter,setter),r);
    }
  }
  getters.keySet().removeAll(complete);
  setters.keySet().removeAll(complete);
}",0.990373935579415
190821,"/** 
 * Encodes a byte array into another byte array by first doing base64 encoding then encoding the result in ASCII. The caller must supply a big enough buffer.
 * @return the value of  {@code ptr+((len+2)/3)*4}, which is the new offset in the output buffer where the further bytes should be placed.
 */
public static int _printBase64Binary(byte[] input,int offset,int len,byte[] out,int ptr){
  byte[] buf=out;
  int max=len + offset;
  for (int i=offset; i < max; i+=3) {
switch (len - i) {
case 1:
      buf[ptr++]=encodeByte(input[i] >> 2);
    buf[ptr++]=encodeByte(((input[i]) & 0x3) << 4);
  buf[ptr++]='=';
buf[ptr++]='=';
break;
case 2:
buf[ptr++]=encodeByte(input[i] >> 2);
buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));
buf[ptr++]=encodeByte((input[i + 1] & 0xF) << 2);
buf[ptr++]='=';
break;
default :
buf[ptr++]=encodeByte(input[i] >> 2);
buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));
buf[ptr++]=encodeByte(((input[i + 1] & 0xF) << 2) | ((input[i + 2] >> 6) & 0x3));
buf[ptr++]=encodeByte(input[i + 2] & 0x3F);
break;
}
}
return ptr;
}","/** 
 * Encodes a byte array into another byte array by first doing base64 encoding then encoding the result in ASCII. The caller must supply a big enough buffer.
 * @return the value of  {@code ptr+((len+2)/3)*4}, which is the new offset in the output buffer where the further bytes should be placed.
 */
public static int _printBase64Binary(byte[] input,int offset,int len,byte[] out,int ptr){
  byte[] buf=out;
  int max=len + offset;
  for (int i=offset; i < max; i+=3) {
switch (max - i) {
case 1:
      buf[ptr++]=encodeByte(input[i] >> 2);
    buf[ptr++]=encodeByte(((input[i]) & 0x3) << 4);
  buf[ptr++]='=';
buf[ptr++]='=';
break;
case 2:
buf[ptr++]=encodeByte(input[i] >> 2);
buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));
buf[ptr++]=encodeByte((input[i + 1] & 0xF) << 2);
buf[ptr++]='=';
break;
default :
buf[ptr++]=encodeByte(input[i] >> 2);
buf[ptr++]=encodeByte(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));
buf[ptr++]=encodeByte(((input[i + 1] & 0xF) << 2) | ((input[i + 2] >> 6) & 0x3));
buf[ptr++]=encodeByte(input[i + 2] & 0x3F);
break;
}
}
return ptr;
}",0.9973045822102424
190822,"/** 
 * Returns a class loader that can load classes from JDK tools.jar.
 */
private static URL getToolsJar() throws ToolsJarNotFoundException {
  File jreHome=new File(System.getProperty(""String_Node_Str""));
  File toolsJar=new File(jreHome.getParent(),""String_Node_Str"");
  if (!toolsJar.exists()) {
    throw new ToolsJarNotFoundException(toolsJar);
  }
  try {
    return toolsJar.toURL();
  }
 catch (  MalformedURLException e) {
    throw new AssertionError(e);
  }
}","/** 
 * Returns a class loader that can load classes from JDK tools.jar.
 * @param parent
 */
private static URL[] getToolsJar(ClassLoader parent) throws ToolsJarNotFoundException {
  try {
    parent.loadClass(""String_Node_Str"");
    parent.loadClass(""String_Node_Str"");
    return new URL[0];
  }
 catch (  ClassNotFoundException e) {
  }
  File jreHome=new File(System.getProperty(""String_Node_Str""));
  File toolsJar=new File(jreHome.getParent(),""String_Node_Str"");
  if (!toolsJar.exists()) {
    throw new ToolsJarNotFoundException(toolsJar);
  }
  try {
    return new URL[]{toolsJar.toURL()};
  }
 catch (  MalformedURLException e) {
    throw new AssertionError(e);
  }
}",0.4388551604509974
190823,"/** 
 * @param packagePrefixes The package prefixes that are forced to resolve within this class loader.
 * @param parent The parent class loader to delegate to.
 */
public APTClassLoader(ClassLoader parent,String[] packagePrefixes) throws ToolsJarNotFoundException {
  super(new URL[]{getToolsJar()},parent);
  this.packagePrefixes=packagePrefixes;
}","/** 
 * @param packagePrefixes The package prefixes that are forced to resolve within this class loader.
 * @param parent The parent class loader to delegate to.
 */
public APTClassLoader(ClassLoader parent,String[] packagePrefixes) throws ToolsJarNotFoundException {
  super(getToolsJar(parent),parent);
  if (getURLs().length == 0)   this.packagePrefixes=new String[0];
 else   this.packagePrefixes=packagePrefixes;
}",0.7324675324675325
190824,"/** 
 * Writes the given byte[] as base64 encoded binary to the output. <p> Being defined on this class allows this method to access the buffer directly, which translates to a better performance.
 */
public void text(byte[] data,int dataLen) throws IOException {
  int start=0;
  while (dataLen > 0) {
    int batchSize=Math.min(((_octetBuffer.length - _octetBufferIndex) / 4) * 3,dataLen);
    _octetBufferIndex=DatatypeConverterImpl._printBase64Binary(data,start,batchSize,_octetBuffer,_octetBufferIndex);
    start+=batchSize;
    dataLen-=batchSize;
    if (_octetBufferIndex == _octetBuffer.length)     flushBuffer();
  }
}","/** 
 * Writes the given byte[] as base64 encoded binary to the output. <p> Being defined on this class allows this method to access the buffer directly, which translates to a better performance.
 */
public void text(byte[] data,int dataLen) throws IOException {
  int start=0;
  while (dataLen > 0) {
    int batchSize=Math.min(((_octetBuffer.length - _octetBufferIndex) / 4) * 3,dataLen);
    _octetBufferIndex=DatatypeConverterImpl._printBase64Binary(data,start,batchSize,_octetBuffer,_octetBufferIndex);
    start+=batchSize;
    dataLen-=batchSize;
    if (batchSize < dataLen)     flushBuffer();
  }
}",0.9522267206477733
190825,"public void text(Pcdata value,boolean needsSeparatingWhitespace) throws IOException, SAXException, XMLStreamException {
  if (needsSeparatingWhitespace)   out.writeCharacters(""String_Node_Str"");
  int len=value.length();
  if (len < buf.length) {
    value.writeTo(buf,len);
    out.writeCharacters(buf,0,len);
  }
 else {
    out.writeCharacters(value.toString());
  }
}","public void text(Pcdata value,boolean needsSeparatingWhitespace) throws IOException, SAXException, XMLStreamException {
  if (needsSeparatingWhitespace)   out.writeCharacters(""String_Node_Str"");
  int len=value.length();
  if (len < buf.length) {
    value.writeTo(buf,0);
    out.writeCharacters(buf,0,len);
  }
 else {
    out.writeCharacters(value.toString());
  }
}",0.9945945945945946
190826,"public Accessor getElementPropertyAccessor(String nsUri,String localName){
  if (wrapperTagName != null) {
    if (wrapperTagName.equals(nsUri,localName))     return acc;
  }
 else {
    for (    TagAndType tt : typeMap.values()) {
      if (tt.tagName.equals(nsUri,localName))       return new NullSafeAccessor(acc);
    }
  }
  return null;
}","public Accessor getElementPropertyAccessor(String nsUri,String localName){
  if (wrapperTagName != null) {
    if (wrapperTagName.equals(nsUri,localName))     return acc;
  }
 else {
    for (    TagAndType tt : typeMap.values()) {
      if (tt.tagName.equals(nsUri,localName))       return new NullSafeAccessor(acc,lister);
    }
  }
  return null;
}",0.9899280575539569
190827,"public NullSafeAccessor(Accessor<B,V> core){
  super(core.getValueType());
  this.core=core;
  this.implClass=ClassFactory.inferImplClass(getValueType(),ClassFactory.COLLECTION_IMPL_CLASSES);
}","public NullSafeAccessor(Accessor<B,V> core,Lister lister){
  super(core.getValueType());
  this.core=core;
  this.lister=lister;
}",0.6934984520123839
190828,"public V get(B bean) throws AccessorException {
  V v=core.get(bean);
  if (v == null) {
    try {
      v=ClassFactory.create0(implClass);
    }
 catch (    IllegalAccessException e) {
      throw new AccessorException(e);
    }
catch (    InvocationTargetException e) {
      throw new AccessorException(e);
    }
catch (    InstantiationException e) {
      throw new AccessorException(e);
    }
  }
  return v;
}","public V get(B bean) throws AccessorException {
  V v=core.get(bean);
  if (v == null) {
    Object pack=lister.startPacking(bean,core);
    lister.endPacking(pack,bean,core);
    v=core.get(bean);
  }
  return v;
}",0.3137876386687797
190829,"public TypeReference(QName tagName,Type type,Annotation... annotations){
  this.tagName=tagName;
  this.type=type;
  this.annotations=annotations;
  if (tagName == null || type == null || annotations == null)   throw new IllegalArgumentException();
}","public TypeReference(QName tagName,Type type,Annotation... annotations){
  if (tagName == null || type == null || annotations == null)   throw new IllegalArgumentException();
  this.tagName=new QName(tagName.getNamespaceURI().intern(),tagName.getLocalPart().intern(),tagName.getPrefix());
  this.type=type;
  this.annotations=annotations;
}",0.5966101694915255
190830,"protected void link(){
  super.link();
  for (  TypeRefImpl<TypeT,ClassDeclT> ref : getTypes()) {
    ref.link();
  }
  if (isValueList()) {
    for (    TypeRefImpl<TypeT,ClassDeclT> ref : types) {
      if (!ref.getTarget().isSimpleType()) {
        parent.builder.reportError(new IllegalAnnotationException(Messages.XMLLIST_NEEDS_SIMPLETYPE.format(nav().getTypeName(ref.getTarget().getType())),this));
        break;
      }
    }
  }
}","protected void link(){
  super.link();
  for (  TypeRefImpl<TypeT,ClassDeclT> ref : getTypes()) {
    ref.link();
  }
  if (isValueList()) {
    if (id() != ID.IDREF) {
      for (      TypeRefImpl<TypeT,ClassDeclT> ref : types) {
        if (!ref.getTarget().isSimpleType()) {
          parent.builder.reportError(new IllegalAnnotationException(Messages.XMLLIST_NEEDS_SIMPLETYPE.format(nav().getTypeName(ref.getTarget().getType())),this));
          break;
        }
      }
    }
  }
}",0.9092872570194384
190831,"/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<TypeT,ClassDeclT> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    com.sun.xml.bind.v2.schemagen.xmlschema.List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    if (tn.getNamespaceURI().length() > 0)     e.form(""String_Node_Str"");
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
 else {
          e.form(""String_Node_Str"");
        }
      }
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  boolean allNillable=true;
  for (  TypeRef t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    writeTypeRef(e,t,""String_Node_Str"");
    if (t.isNillable()) {
      e.nillable(true);
    }
 else {
      allNillable=false;
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
    if (tn.getNamespaceURI().length() > 0)     e.form(""String_Node_Str"");
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired() && !allNillable) {
      occurs.minOccurs(0);
    }
  }
}","/** 
 * Generate the proper schema fragment for the given element property into the specified schema compositor. The element property may or may not represent a collection and it may or may not be wrapped.
 * @param ep the element property
 * @param compositor the schema compositor (sequence or all)
 */
private void handleElementProp(ElementPropertyInfo<TypeT,ClassDeclT> ep,ExplicitGroup compositor){
  QName ename=ep.getXmlName();
  Occurs occurs=null;
  if (ep.isValueList()) {
    TypeRef t=ep.getTypes().get(0);
    LocalElement e=compositor.element();
    QName tn=t.getTagName();
    e.name(tn.getLocalPart());
    com.sun.xml.bind.v2.schemagen.xmlschema.List lst=e.simpleType().list();
    writeTypeRef(lst,t,""String_Node_Str"");
    if (tn.getNamespaceURI().length() > 0)     e.form(""String_Node_Str"");
    return;
  }
  if (ep.isCollection()) {
    if (ename != null) {
      LocalElement e=compositor.element();
      if (ename.getNamespaceURI().length() > 0) {
        if (!ename.getNamespaceURI().equals(this.uri)) {
          e.ref(new QName(ename.getNamespaceURI(),ename.getLocalPart()));
          return;
        }
 else {
          e.form(""String_Node_Str"");
        }
      }
      ComplexType p=e.name(ename.getLocalPart()).complexType();
      if (ep.isCollectionNillable()) {
        e.nillable(true);
      }
 else {
        e.minOccurs(0);
      }
      if (ep.getTypes().size() == 1) {
        compositor=p.sequence();
      }
 else {
        compositor=p.choice();
        occurs=compositor;
      }
    }
 else {
      if (ep.getTypes().size() > 1) {
        compositor=compositor.choice();
        occurs=compositor;
      }
    }
  }
 else {
    if (ep.getTypes().size() > 1) {
      compositor=compositor.choice();
      occurs=compositor;
    }
  }
  boolean allNillable=true;
  for (  TypeRef t : ep.getTypes()) {
    LocalElement e=compositor.element();
    if (occurs == null)     occurs=e;
    QName tn=t.getTagName();
    boolean useElementRef=false;
    if (t.getTarget() instanceof Element) {
      Element te=(Element)t.getTarget();
      QName targetTagName=te.getElementName();
      useElementRef=targetTagName != null && targetTagName.equals(tn);
    }
    if (t.isNillable() || t.getDefaultValue() != null)     useElementRef=false;
    if (useElementRef) {
      e.ref(tn);
    }
 else {
      e.name(tn.getLocalPart());
      writeTypeRef(e,t,""String_Node_Str"");
      if (tn.getNamespaceURI().length() > 0)       e.form(""String_Node_Str"");
    }
    if (t.isNillable()) {
      e.nillable(true);
    }
 else {
      allNillable=false;
    }
    if (t.getDefaultValue() != null)     e._default(t.getDefaultValue());
  }
  if (ep.isCollection()) {
    occurs.maxOccurs(""String_Node_Str"");
    occurs.minOccurs(0);
  }
 else {
    if (!ep.isRequired() && !allNillable) {
      occurs.minOccurs(0);
    }
  }
}",0.8633797515995484
190832,"/** 
 * Writes a type attribute (if the referenced type is a global type) or writes out the definition of the anonymous type in place (if the referenced type is not a global type.)
 * @param th the TXW interface to which the attribute will be written.
 * @param type type to be referenced.
 * @param refAttName The name of the attribute used when referencing a type by QName.
 */
private void writeTypeRef(TypeHost th,NonElement<TypeT,ClassDeclT> type,String refAttName){
  if (type.getTypeName() == null) {
    if (type instanceof ClassInfo) {
      depth++;
      for (int i=0; i < depth; i++)       System.out.print(""String_Node_Str"");
      System.out.println(((ClassInfo<TypeT,ClassDeclT>)type).getClazz());
      writeClass((ClassInfo<TypeT,ClassDeclT>)type,th);
      depth--;
    }
 else {
      writeEnum((EnumLeafInfo<TypeT,ClassDeclT>)type,(SimpleTypeHost)th);
    }
  }
 else {
    th._attribute(refAttName,type.getTypeName());
  }
}","/** 
 * Writes a type attribute (if the referenced type is a global type) or writes out the definition of the anonymous type in place (if the referenced type is not a global type.)
 * @param th the TXW interface to which the attribute will be written.
 * @param type type to be referenced.
 * @param refAttName The name of the attribute used when referencing a type by QName.
 */
private void writeTypeRef(TypeHost th,NonElement<TypeT,ClassDeclT> type,String refAttName){
  if (type.getTypeName() == null) {
    if (type instanceof ClassInfo) {
      writeClass((ClassInfo<TypeT,ClassDeclT>)type,th);
    }
 else {
      writeEnum((EnumLeafInfo<TypeT,ClassDeclT>)type,(SimpleTypeHost)th);
    }
  }
 else {
    th._attribute(refAttName,type.getTypeName());
  }
}",0.7018160515524312
190833,"/** 
 * Marshals one attribute.
 * @see JaxBeanInfo#serializeAttributes(Object,XMLSerializer)
 */
public void serializeAttributes(BeanT o,XMLSerializer w) throws SAXException, AccessorException, IOException, XMLStreamException {
  if (xacc.hasValue(o))   w.attribute(attName,xacc.print(o).toString());
}","/** 
 * Marshals one attribute.
 * @see JaxBeanInfo#serializeAttributes(Object,XMLSerializer)
 */
public void serializeAttributes(BeanT o,XMLSerializer w) throws SAXException, AccessorException, IOException, XMLStreamException {
  CharSequence value=xacc.print(o);
  if (value != null)   w.attribute(attName,value.toString());
}",0.8684627575277337
190834,"public void serializeURIs(BeanT o,XMLSerializer w) throws AccessorException, SAXException {
  if (xacc.hasValue(o))   xacc.declareNamespace(o,w);
}","public void serializeURIs(BeanT o,XMLSerializer w) throws AccessorException, SAXException {
  xacc.declareNamespace(o,w);
}",0.9111111111111112
190835,"public final void serializeBody(BeanT o,XMLSerializer w,Object outerPeer) throws SAXException, AccessorException, IOException, XMLStreamException {
  if (xacc.hasValue(o)) {
    w.text(xacc.print(o),fieldName);
  }
}","public final void serializeBody(BeanT o,XMLSerializer w,Object outerPeer) throws SAXException, AccessorException, IOException, XMLStreamException {
  CharSequence value=xacc.print(o);
  if (value != null)   w.text(value,fieldName);
}",0.7928730512249443
190836,"public void declareNamespace(BeanT bean,XMLSerializer w) throws AccessorException {
  xducer.declareNamespace(acc.get(bean),w);
}","public void declareNamespace(BeanT bean,XMLSerializer w) throws AccessorException {
  Object o=acc.get(bean);
  if (o != null)   xducer.declareNamespace(o,w);
}",0.8027681660899654
190837,"protected PropertyInfoImpl(ClassInfoImpl<T,C,F,M> parent,PropertySeed<T,C,F,M> spi){
  this.seed=spi;
  this.parent=parent;
  this.id=calcId();
  MimeType mt=Util.calcExpectedMediaType(seed,parent.builder);
  if (mt != null && !kind().canHaveXmlMimeType) {
    parent.builder.reportError(new IllegalAnnotationException(Messages.ILLEGAL_ANNOTATION.format(XmlMimeType.class.getName()),seed.readAnnotation(XmlMimeType.class)));
    mt=null;
  }
  this.expectedMimeType=mt;
  this.inlineBinary=seed.hasAnnotation(XmlInlineBinaryData.class);
  this.schemaType=Util.calcSchemaType(reader(),seed,parent.clazz,getIndividualType(),this);
  T t=seed.getRawType();
  if (nav().isSubClassOf(t,nav().ref(Collection.class)) || nav().isArrayButNotByteArray(t))   this.isCollection=true;
 else   this.isCollection=false;
  XmlJavaTypeAdapter xjta=getApplicableAdapter(getIndividualType());
  if (xjta == null) {
    XmlAttachmentRef xsa=seed.readAnnotation(XmlAttachmentRef.class);
    if (xsa != null) {
      adapter=new Adapter<T,C>(nav().asDecl(SwaRefAdapter.class),nav());
    }
 else {
      adapter=null;
    }
  }
 else {
    adapter=new Adapter<T,C>(xjta,reader(),nav());
  }
}","protected PropertyInfoImpl(ClassInfoImpl<T,C,F,M> parent,PropertySeed<T,C,F,M> spi){
  this.seed=spi;
  this.parent=parent;
  this.id=calcId();
  MimeType mt=Util.calcExpectedMediaType(seed,parent.builder);
  if (mt != null && !kind().canHaveXmlMimeType) {
    parent.builder.reportError(new IllegalAnnotationException(Messages.ILLEGAL_ANNOTATION.format(XmlMimeType.class.getName()),seed.readAnnotation(XmlMimeType.class)));
    mt=null;
  }
  this.expectedMimeType=mt;
  this.inlineBinary=seed.hasAnnotation(XmlInlineBinaryData.class);
  this.schemaType=Util.calcSchemaType(reader(),seed,parent.clazz,getIndividualType(),this);
  T t=seed.getRawType();
  this.isCollection=nav().isSubClassOf(t,nav().ref(Collection.class)) || nav().isArrayButNotByteArray(t);
  XmlJavaTypeAdapter xjta=getApplicableAdapter(getIndividualType());
  if (xjta == null) {
    XmlAttachmentRef xsa=seed.readAnnotation(XmlAttachmentRef.class);
    if (xsa != null) {
      adapter=new Adapter<T,C>(nav().asDecl(SwaRefAdapter.class),nav());
    }
 else {
      adapter=null;
    }
  }
 else {
    adapter=new Adapter<T,C>(xjta,reader(),nav());
  }
}",0.9647058823529412
190838,"/** 
 * Checks if the given adapter is applicable to the declared property type.
 */
private boolean isApplicable(XmlJavaTypeAdapter jta,T declaredType){
  if (jta == null)   return false;
  T type=reader().getClassValue(jta,""String_Node_Str"");
  if (declaredType.equals(type))   return true;
  return false;
}","/** 
 * Checks if the given adapter is applicable to the declared property type.
 */
private boolean isApplicable(XmlJavaTypeAdapter jta,T declaredType){
  if (jta == null)   return false;
  T type=reader().getClassValue(jta,""String_Node_Str"");
  return declaredType.equals(type);
}",0.929054054054054
190839,"private XmlJavaTypeAdapter getApplicableAdapter(T type){
  XmlJavaTypeAdapter jta=seed.readAnnotation(XmlJavaTypeAdapter.class);
  if (jta != null)   return jta;
  XmlJavaTypeAdapters jtas=reader().getPackageAnnotation(XmlJavaTypeAdapters.class,parent.clazz,seed);
  if (jtas != null) {
    for (    XmlJavaTypeAdapter xjta : jtas.value()) {
      if (isApplicable(xjta,type))       return xjta;
    }
  }
  jta=reader().getPackageAnnotation(XmlJavaTypeAdapter.class,parent.clazz,seed);
  if (isApplicable(jta,type))   return jta;
  C refType=nav().asDecl(seed.getRawType());
  if (refType != null) {
    jta=reader().getClassAnnotation(XmlJavaTypeAdapter.class,refType,seed);
    if (isApplicable(jta,type))     return jta;
  }
  return null;
}","private XmlJavaTypeAdapter getApplicableAdapter(T type){
  XmlJavaTypeAdapter jta=seed.readAnnotation(XmlJavaTypeAdapter.class);
  if (jta != null)   return jta;
  XmlJavaTypeAdapters jtas=reader().getPackageAnnotation(XmlJavaTypeAdapters.class,parent.clazz,seed);
  if (jtas != null) {
    for (    XmlJavaTypeAdapter xjta : jtas.value()) {
      if (isApplicable(xjta,type))       return xjta;
    }
  }
  jta=reader().getPackageAnnotation(XmlJavaTypeAdapter.class,parent.clazz,seed);
  if (isApplicable(jta,type))   return jta;
  C refType=nav().asDecl(seed.getRawType());
  if (refType != null) {
    jta=reader().getClassAnnotation(XmlJavaTypeAdapter.class,refType,seed);
    if (jta != null)     return jta;
  }
  return null;
}",0.977687626774848
190840,"private final QName calcXmlName(String uri,String local){
  TODO.checkSpec();
  if (local.length() == 0 || local.equals(""String_Node_Str""))   local=seed.getName();
  if (uri.equals(""String_Node_Str"")) {
    XmlSchema xs=reader().getPackageAnnotation(XmlSchema.class,parent.getClazz(),this);
    if (xs != null) {
switch (xs.elementFormDefault()) {
case QUALIFIED:
        uri=parent.getTypeName().getNamespaceURI();
      if (uri.length() == 0)       uri=parent.builder.defaultNsUri;
    break;
case UNQUALIFIED:
case UNSET:
  uri=""String_Node_Str"";
}
}
 else {
uri=""String_Node_Str"";
}
}
return new QName(uri.intern(),local.intern());
}","private QName calcXmlName(String uri,String local){
  TODO.checkSpec();
  if (local.length() == 0 || local.equals(""String_Node_Str""))   local=seed.getName();
  if (uri.equals(""String_Node_Str"")) {
    XmlSchema xs=reader().getPackageAnnotation(XmlSchema.class,parent.getClazz(),this);
    if (xs != null) {
switch (xs.elementFormDefault()) {
case QUALIFIED:
        uri=parent.getTypeName().getNamespaceURI();
      if (uri.length() == 0)       uri=parent.builder.defaultNsUri;
    break;
case UNQUALIFIED:
case UNSET:
  uri=""String_Node_Str"";
}
}
 else {
uri=""String_Node_Str"";
}
}
return new QName(uri.intern(),local.intern());
}",0.995268138801262
190841,"/** 
 * @param coreList A concrete class that implements the List interface. An instance of this class will be used to store data for this field.
 */
protected UntypedListField(ClassOutlineImpl context,CPropertyInfo prop,JClass coreList){
  super(context,prop,!coreList.name().equals(""String_Node_Str""));
  this.coreList=coreList.narrow(exposedType.boxify());
  generate();
}","/** 
 * @param coreList A concrete class that implements the List interface. An instance of this class will be used to store data for this field.
 */
protected UntypedListField(ClassOutlineImpl context,CPropertyInfo prop,JClass coreList){
  super(context,prop,!coreList.fullName().equals(""String_Node_Str""));
  this.coreList=coreList.narrow(exposedType.boxify());
  generate();
}",0.9920424403183024
190842,"/** 
 * Builds DOMForest and performs the internalization.
 * @throws SAXException when a fatal happe
 */
public DOMForest buildDOMForest(InternalizationLogic logic) throws SAXException {
  DOMForest forest=new DOMForest(logic);
  forest.setErrorHandler(errorReceiver);
  if (opt.entityResolver != null)   forest.setEntityResolver(opt.entityResolver);
  for (  InputSource value : opt.getGrammars())   forest.parse(value,true);
  for (  InputSource value : opt.getBindFiles()) {
    Element root=forest.parse(value,true).getDocumentElement();
    if (!root.getNamespaceURI().equals(Const.JAXB_NSURI) || !root.getLocalName().equals(""String_Node_Str""))     errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_NOT_A_BINDING_FILE,root.getNamespaceURI(),root.getLocalName()),null,value.getSystemId(),-1,-1));
  }
  forest.transform();
  return forest;
}","/** 
 * Builds DOMForest and performs the internalization.
 * @throws SAXException when a fatal happe
 */
public DOMForest buildDOMForest(InternalizationLogic logic) throws SAXException {
  DOMForest forest=new DOMForest(logic);
  forest.setErrorHandler(errorReceiver);
  if (opt.entityResolver != null)   forest.setEntityResolver(opt.entityResolver);
  for (  InputSource value : opt.getGrammars())   forest.parse(value,true);
  for (  InputSource value : opt.getBindFiles()) {
    Document dom=forest.parse(value,true);
    if (dom == null)     continue;
    Element root=dom.getDocumentElement();
    if (!root.getNamespaceURI().equals(Const.JAXB_NSURI) || !root.getLocalName().equals(""String_Node_Str""))     errorReceiver.error(new SAXParseException(Messages.format(Messages.ERR_NOT_A_BINDING_FILE,root.getNamespaceURI(),root.getLocalName()),null,value.getSystemId(),-1,-1));
  }
  forest.transform();
  return forest;
}",0.9413735343383584
190843,"Bitmap hunt() throws IOException {
  Bitmap bitmap;
  if (!skipMemoryCache) {
    bitmap=cache.get(key);
    if (bitmap != null) {
      stats.dispatchCacheHit();
      loadedFrom=MEMORY;
      return bitmap;
    }
  }
  bitmap=decode(data);
  if (bitmap != null) {
    stats.dispatchBitmapDecoded(bitmap);
    if (data.needsTransformation()) {
synchronized (DECODE_LOCK) {
        if (data.needsMatrixTransform() || exifRotation != 0) {
          bitmap=transformResult(data,bitmap,exifRotation);
        }
        if (data.hasCustomTransformations()) {
          bitmap=applyCustomTransformations(data.transformations,bitmap);
        }
      }
      stats.dispatchBitmapTransformed(bitmap);
    }
  }
  return bitmap;
}","Bitmap hunt() throws IOException {
  Bitmap bitmap;
  if (!skipMemoryCache) {
    bitmap=cache.get(key);
    if (bitmap != null) {
      stats.dispatchCacheHit();
      loadedFrom=MEMORY;
      return bitmap;
    }
  }
  bitmap=decode(data);
  if (bitmap != null) {
    stats.dispatchBitmapDecoded(bitmap);
    if (data.needsTransformation() || exifRotation != 0) {
synchronized (DECODE_LOCK) {
        if (data.needsMatrixTransform() || exifRotation != 0) {
          bitmap=transformResult(data,bitmap,exifRotation);
        }
        if (data.hasCustomTransformations()) {
          bitmap=applyCustomTransformations(data.transformations,bitmap);
        }
      }
      stats.dispatchBitmapTransformed(bitmap);
    }
  }
  return bitmap;
}",0.985665529010239
190844,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  Bundle extras=intent.getExtras();
  if (ACTION_AIRPLANE_MODE_CHANGED.equals(action)) {
    dispatchAirplaneModeChange(extras.getBoolean(EXTRA_AIRPLANE_STATE,false));
  }
 else   if (CONNECTIVITY_ACTION.equals(action)) {
    dispatchNetworkStateChange(connectivityManager.getActiveNetworkInfo());
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (null == intent) {
    return;
  }
  String action=intent.getAction();
  Bundle extras=intent.getExtras();
  if (ACTION_AIRPLANE_MODE_CHANGED.equals(action)) {
    dispatchAirplaneModeChange(extras.getBoolean(EXTRA_AIRPLANE_STATE,false));
  }
 else   if (CONNECTIVITY_ACTION.equals(action)) {
    dispatchNetworkStateChange(connectivityManager.getActiveNetworkInfo());
  }
}",0.9527186761229316
190845,"static Bitmap transformResult(Request data,Bitmap result,int exifRotation){
  int inWidth=result.getWidth();
  int inHeight=result.getHeight();
  int drawX=0;
  int drawY=0;
  int drawWidth=inWidth;
  int drawHeight=inHeight;
  Matrix matrix=new Matrix();
  if (data.needsMatrixTransform()) {
    int targetWidth=data.targetWidth;
    int targetHeight=data.targetHeight;
    float targetRotation=data.rotationDegrees;
    if (targetRotation != 0) {
      if (data.hasRotationPivot) {
        matrix.setRotate(targetRotation,data.rotationPivotX,data.rotationPivotY);
      }
 else {
        matrix.setRotate(targetRotation);
      }
    }
    if (data.centerCrop) {
      float widthRatio=targetWidth / (float)inWidth;
      float heightRatio=targetHeight / (float)inHeight;
      float scale;
      if (widthRatio > heightRatio) {
        scale=widthRatio;
        int newSize=(int)Math.ceil(inHeight * (heightRatio / widthRatio));
        drawY=(inHeight - newSize) / 2;
        drawHeight=newSize;
      }
 else {
        scale=heightRatio;
        int newSize=(int)Math.ceil(inWidth * (widthRatio / heightRatio));
        drawX=(inWidth - newSize) / 2;
        drawWidth=newSize;
      }
      matrix.preScale(scale,scale);
    }
 else     if (data.centerInside) {
      float widthRatio=targetWidth / (float)inWidth;
      float heightRatio=targetHeight / (float)inHeight;
      float scale=widthRatio < heightRatio ? widthRatio : heightRatio;
      matrix.preScale(scale,scale);
    }
 else     if (targetWidth != 0 && targetHeight != 0 && (targetWidth != inWidth || targetHeight != inHeight)) {
      float sx=targetWidth / (float)inWidth;
      float sy=targetHeight / (float)inHeight;
      matrix.preScale(sx,sy);
    }
  }
  if (exifRotation != 0) {
    matrix.preRotate(exifRotation);
  }
  Bitmap newResult=Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,false);
  if (newResult != result) {
    result.recycle();
    result=newResult;
  }
  return result;
}","static Bitmap transformResult(Request data,Bitmap result,int exifRotation){
  int inWidth=result.getWidth();
  int inHeight=result.getHeight();
  int drawX=0;
  int drawY=0;
  int drawWidth=inWidth;
  int drawHeight=inHeight;
  Matrix matrix=new Matrix();
  if (data.needsMatrixTransform()) {
    int targetWidth=data.targetWidth;
    int targetHeight=data.targetHeight;
    float targetRotation=data.rotationDegrees;
    if (targetRotation != 0) {
      if (data.hasRotationPivot) {
        matrix.setRotate(targetRotation,data.rotationPivotX,data.rotationPivotY);
      }
 else {
        matrix.setRotate(targetRotation);
      }
    }
    if (data.centerCrop) {
      float widthRatio=targetWidth / (float)inWidth;
      float heightRatio=targetHeight / (float)inHeight;
      float scale;
      if (widthRatio > heightRatio) {
        scale=widthRatio;
        int newSize=(int)Math.ceil(inHeight * (heightRatio / widthRatio));
        drawY=(inHeight - newSize) / 2;
        drawHeight=newSize;
      }
 else {
        scale=heightRatio;
        int newSize=(int)Math.ceil(inWidth * (widthRatio / heightRatio));
        drawX=(inWidth - newSize) / 2;
        drawWidth=newSize;
      }
      matrix.preScale(scale,scale);
    }
 else     if (data.centerInside) {
      float widthRatio=targetWidth / (float)inWidth;
      float heightRatio=targetHeight / (float)inHeight;
      float scale=widthRatio < heightRatio ? widthRatio : heightRatio;
      matrix.preScale(scale,scale);
    }
 else     if (targetWidth != 0 && targetHeight != 0 && (targetWidth != inWidth || targetHeight != inHeight)) {
      float sx=targetWidth / (float)inWidth;
      float sy=targetHeight / (float)inHeight;
      matrix.preScale(sx,sy);
    }
  }
  if (exifRotation != 0) {
    matrix.preRotate(exifRotation);
  }
  Bitmap newResult=Bitmap.createBitmap(result,drawX,drawY,drawWidth,drawHeight,matrix,true);
  if (newResult != result) {
    result.recycle();
    result=newResult;
  }
  return result;
}",0.9982398793060095
190846,"private void drawDebugIndicator(Canvas canvas){
  canvas.save();
  canvas.rotate(45);
  DEBUG_PAINT.setColor(WHITE);
  canvas.drawRect(0,-10 * density,7.5f * density,10 * density,DEBUG_PAINT);
  DEBUG_PAINT.setColor(loadedFrom.debugColor);
  canvas.drawRect(0,-9 * density,6.5f * density,9 * density,DEBUG_PAINT);
  canvas.restore();
}","private void drawDebugIndicator(Canvas canvas){
  DEBUG_PAINT.setColor(WHITE);
  Path path=getTrianglePath(new Point(0,0),(int)(16 * density));
  canvas.drawPath(path,DEBUG_PAINT);
  DEBUG_PAINT.setColor(loadedFrom.debugColor);
  path=getTrianglePath(new Point(0,0),(int)(15 * density));
  canvas.drawPath(path,DEBUG_PAINT);
}",0.5537065052950075
190847,"Bitmap resolveRequest(Request request) throws IOException {
  Bitmap bitmap=loadFromCache(request);
  if (bitmap == null) {
    stats.cacheMiss();
    try {
      bitmap=loadFromType(request);
    }
 catch (    OutOfMemoryError e) {
      throw new IOException(""String_Node_Str"" + request,e);
    }
    if (bitmap != null && !request.skipCache) {
      cache.set(request.key,bitmap);
    }
  }
 else {
    stats.cacheHit();
  }
  return bitmap;
}","Bitmap resolveRequest(Request request) throws IOException {
  Bitmap bitmap=loadFromCache(request);
  if (bitmap == null) {
    stats.cacheMiss();
    try {
      bitmap=loadFromType(request);
    }
 catch (    OutOfMemoryError e) {
      throw new IOException(""String_Node_Str"" + request).initCause(e);
    }
    if (bitmap != null && !request.skipCache) {
      cache.set(request.key,bitmap);
    }
  }
 else {
    stats.cacheHit();
  }
  return bitmap;
}",0.9856035437430788
190848,"static int calculateDiskCacheSize(File dir){
  StatFs statFs=new StatFs(dir.getAbsolutePath());
  int available=statFs.getBlockCount() * statFs.getBlockSize();
  int size=available / 50;
  return Math.max(Math.min(size,MAX_DISK_CACHE_SIZE),MIN_DISK_CACHE_SIZE);
}","static int calculateDiskCacheSize(File dir){
  int size=0;
  try {
    StatFs statFs=new StatFs(dir.getAbsolutePath());
    int available=statFs.getBlockCount() * statFs.getBlockSize();
    size=available / 50;
  }
 catch (  IllegalArgumentException e) {
    size=MIN_DISK_CACHE_SIZE;
  }
  return Math.max(Math.min(size,MAX_DISK_CACHE_SIZE),MIN_DISK_CACHE_SIZE);
}",0.7834394904458599
190849,"private Bitmap transformResult(Request request,Bitmap result){
  List<Transformation> transformations=request.transformations;
  if (!transformations.isEmpty()) {
    for (int i=0, count=transformations.size(); i < count; i++) {
      Transformation t=transformations.get(i);
      result=t.transform(result);
      if (result == null) {
        throw new NullPointerException(""String_Node_Str"" + t.key() + ""String_Node_Str"");
      }
    }
  }
  return result;
}","Bitmap transformResult(Request request,Bitmap result){
  List<Transformation> transformations=request.transformations;
  if (!transformations.isEmpty()) {
    for (int i=0, count=transformations.size(); i < count; i++) {
      Transformation t=transformations.get(i);
      result=t.transform(result);
      if (result == null) {
        throw new NullPointerException(""String_Node_Str"" + t.key() + ""String_Node_Str""+ request.path+ ""String_Node_Str""+ i+ ""String_Node_Str""+ request.transformationKeys());
      }
    }
  }
  return result;
}",0.9072781655034896
190850,"@Test public void reloadsTransformedBitmapFromCache() throws Exception {
  ImageView target=mock(ImageView.class);
  Transformation transformation=mock(Transformation.class);
  when(transformation.transform(any(Bitmap.class))).thenReturn(bitmap1);
  when(transformation.toString()).thenReturn(""String_Node_Str"");
  List<Transformation> transformations=new ArrayList<Transformation>(1);
  transformations.add(transformation);
  when(cache.get(Utils.createKey(URI_1,transformations,null))).thenReturn(bitmap1);
  Picasso picasso=create(LOADER_ANSWER,BITMAP1_ANSWER);
  picasso.load(URI_1).transform(transformation).into(target);
  executor.flush();
  verify(loader,never()).load(URI_1,false);
  assertThat(picasso.targetsToRequests).isEmpty();
}","@Test public void reloadsTransformedBitmapFromCache() throws Exception {
  ImageView target=mock(ImageView.class);
  Transformation transformation=mock(Transformation.class);
  when(transformation.transform(any(Bitmap.class))).thenReturn(bitmap1);
  when(transformation.key()).thenReturn(""String_Node_Str"");
  List<Transformation> transformations=new ArrayList<Transformation>(1);
  transformations.add(transformation);
  when(cache.get(Utils.createKey(URI_1,transformations,null))).thenReturn(bitmap1);
  Picasso picasso=create(LOADER_ANSWER,BITMAP1_ANSWER);
  picasso.load(URI_1).transform(transformation).into(target);
  executor.flush();
  verify(loader,never()).load(URI_1,false);
  assertThat(picasso.targetsToRequests).isEmpty();
}",0.9925725860904794
190851,"@Test public void doesNotDecodeAgainIfBitmapWithTransformationsAlreadyInCache() throws Exception {
  ImageView target1=mock(ImageView.class);
  ImageView target2=mock(ImageView.class);
  Transformation transformation=mock(Transformation.class);
  when(transformation.transform(any(Bitmap.class))).thenReturn(bitmap1);
  when(transformation.toString()).thenReturn(""String_Node_Str"");
  List<Transformation> transformations=new ArrayList<Transformation>(1);
  transformations.add(transformation);
  String key=Utils.createKey(URI_1,transformations,null);
  Picasso picasso=create(LOADER_ANSWER,BITMAP1_ANSWER);
  picasso.load(URI_1).transform(transformation).into(target1);
  picasso.load(URI_1).transform(transformation).into(target2);
  executor.executeFirst();
  when(cache.get(key)).thenReturn(bitmap1);
  executor.flush();
  verify(target1).setImageBitmap(bitmap1);
  verify(target2).setImageBitmap(bitmap1);
  verify(picasso.loader,times(1)).load(URI_1,false);
  assertThat(picasso.targetsToRequests).isEmpty();
}","@Test public void doesNotDecodeAgainIfBitmapWithTransformationsAlreadyInCache() throws Exception {
  ImageView target1=mock(ImageView.class);
  ImageView target2=mock(ImageView.class);
  Transformation transformation=mock(Transformation.class);
  when(transformation.transform(any(Bitmap.class))).thenReturn(bitmap1);
  when(transformation.key()).thenReturn(""String_Node_Str"");
  List<Transformation> transformations=new ArrayList<Transformation>(1);
  transformations.add(transformation);
  String key=Utils.createKey(URI_1,transformations,null);
  Picasso picasso=create(LOADER_ANSWER,BITMAP1_ANSWER);
  picasso.load(URI_1).transform(transformation).into(target1);
  picasso.load(URI_1).transform(transformation).into(target2);
  executor.executeFirst();
  when(cache.get(key)).thenReturn(bitmap1);
  executor.flush();
  verify(target1).setImageBitmap(bitmap1);
  verify(target2).setImageBitmap(bitmap1);
  verify(picasso.loader,times(1)).load(URI_1,false);
  assertThat(picasso.targetsToRequests).isEmpty();
}",0.9945786101527846
190852,"static Bitmap applyDebugColorFilter(Bitmap source,int loadedFrom){
  int color=RequestMetrics.getColorCodeForCacheHit(loadedFrom);
  ColorFilter filter=new LightingColorFilter(color,1);
  Paint paint=new Paint();
  paint.setColorFilter(filter);
  Bitmap result=source.copy(source.getConfig(),true);
  Canvas canvas=new Canvas(result);
  canvas.drawBitmap(result,0,0,paint);
  return result;
}","static Bitmap applyDebugColorFilter(Bitmap source,int loadedFrom){
  int color=RequestMetrics.getColorCodeForCacheHit(loadedFrom);
  ColorFilter filter=new LightingColorFilter(color,1);
  Paint paint=new Paint();
  paint.setColorFilter(filter);
  Bitmap output=Bitmap.createBitmap(source.getWidth(),source.getHeight(),source.getConfig());
  Canvas canvas=new Canvas(output);
  canvas.drawBitmap(source,0,0,paint);
  return output;
}",0.8592233009708737
190853,"private Picasso create(Answer loaderAnswer,Answer decoderAnswer) throws Exception {
  Picasso picasso=new Picasso.Builder().loader(loader).executor(executor).memoryCache(cache).debug().build();
  picasso=spy(picasso);
  doAnswer(loaderAnswer).when(loader).load(anyString(),anyBoolean());
  doAnswer(decoderAnswer).when(picasso).decodeStream(any(InputStream.class),any(Options.class));
  return picasso;
}","private Picasso create(Answer loaderAnswer,Answer decoderAnswer) throws Exception {
  Picasso picasso=new Picasso.Builder().loader(loader).executor(executor).memoryCache(cache).build();
  picasso=spy(picasso);
  doAnswer(loaderAnswer).when(loader).load(anyString(),anyBoolean());
  doAnswer(decoderAnswer).when(picasso).decodeStream(any(InputStream.class),any(Options.class));
  return picasso;
}",0.5675
190854,"public KmlPolygon createRegularPolygon(){
  List<LatLng> outerCoordinates=new ArrayList<LatLng>();
  outerCoordinates.add(new LatLng(10,10));
  outerCoordinates.add(new LatLng(20,20));
  outerCoordinates.add(new LatLng(30,30));
  outerCoordinates.add(new LatLng(10,10));
  List<List<LatLng>> innerCoordinates=new ArrayList<List<LatLng>>();
  List<LatLng> innerHole=new ArrayList<LatLng>();
  innerHole.add(new LatLng(20,20));
  innerHole.add(new LatLng(10,10));
  innerHole.add(new LatLng(20,20));
  innerCoordinates.add(innerHole);
  return new KmlPolygon(outerCoordinates,innerCoordinates);
}","public KmlPolygon createRegularPolygon(){
  ArrayList<LatLng> outerCoordinates=new ArrayList<LatLng>();
  outerCoordinates.add(new LatLng(10,10));
  outerCoordinates.add(new LatLng(20,20));
  outerCoordinates.add(new LatLng(30,30));
  outerCoordinates.add(new LatLng(10,10));
  ArrayList<ArrayList<LatLng>> innerCoordinates=new ArrayList<ArrayList<LatLng>>();
  ArrayList<LatLng> innerHole=new ArrayList<LatLng>();
  innerHole.add(new LatLng(20,20));
  innerHole.add(new LatLng(10,10));
  innerHole.add(new LatLng(20,20));
  innerCoordinates.add(innerHole);
  return new KmlPolygon(outerCoordinates,innerCoordinates);
}",0.9398186314921682
190855,"public KmlPolygon createRegularPolygon(){
  ArrayList<LatLng> outerCoordinates=new ArrayList<LatLng>();
  outerCoordinates.add(new LatLng(10,10));
  outerCoordinates.add(new LatLng(20,20));
  outerCoordinates.add(new LatLng(30,30));
  outerCoordinates.add(new LatLng(10,10));
  ArrayList<ArrayList<LatLng>> innerCoordinates=new ArrayList<ArrayList<LatLng>>();
  ArrayList<LatLng> innerHole=new ArrayList<LatLng>();
  innerHole.add(new LatLng(20,20));
  innerHole.add(new LatLng(10,10));
  innerHole.add(new LatLng(20,20));
  innerCoordinates.add(innerHole);
  return new KmlPolygon(outerCoordinates,innerCoordinates);
}","public KmlPolygon createRegularPolygon(){
  List<LatLng> outerCoordinates=new ArrayList<LatLng>();
  outerCoordinates.add(new LatLng(10,10));
  outerCoordinates.add(new LatLng(20,20));
  outerCoordinates.add(new LatLng(30,30));
  outerCoordinates.add(new LatLng(10,10));
  List<List<LatLng>> innerCoordinates=new ArrayList<List<LatLng>>();
  List<LatLng> innerHole=new ArrayList<LatLng>();
  innerHole.add(new LatLng(20,20));
  innerHole.add(new LatLng(10,10));
  innerHole.add(new LatLng(20,20));
  innerCoordinates.add(innerHole);
  return new KmlPolygon(outerCoordinates,innerCoordinates);
}",0.5638911788953009
190856,"/** 
 * Creates tile.
 * @param x    X coordinate of tile.
 * @param y    Y coordinate of tile.
 * @param zoom Zoom level.
 * @return image in Tile format
 */
public Tile getTile(int x,int y,int zoom){
  double tileWidth=WORLD_WIDTH / Math.pow(2,zoom);
  double padding=tileWidth * mRadius / TILE_DIM;
  double tileWidthPadded=tileWidth + 2 * padding;
  double bucketWidth=tileWidthPadded / (TILE_DIM + mRadius * 2);
  double minX=x * tileWidth - padding;
  double maxX=(x + 1) * tileWidth + padding + SIGMA;
  double minY=y * tileWidth - padding;
  double maxY=(y + 1) * tileWidth + padding + SIGMA;
  double xOffset=0;
  Collection<WeightedLatLng> wrappedPoints=new ArrayList<WeightedLatLng>();
  if (minX < 0) {
    Bounds overlapBounds=new Bounds(minX + WORLD_WIDTH,WORLD_WIDTH,minY,maxY);
    xOffset=-WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
 else   if (maxX > WORLD_WIDTH) {
    Bounds overlapBounds=new Bounds(0,maxX - WORLD_WIDTH,minY,maxY);
    xOffset=WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
  Bounds tileBounds=new Bounds(minX,maxX,minY,maxY);
  Bounds paddedBounds=new Bounds(mBounds.minX - padding,mBounds.maxX + padding,mBounds.minY - padding,mBounds.maxY + padding);
  if (!tileBounds.intersects(paddedBounds)) {
    return TileProvider.NO_TILE;
  }
  Collection<WeightedLatLng> points=mTree.search(tileBounds);
  if (points.isEmpty()) {
    return TileProvider.NO_TILE;
  }
  double[][] intensity=new double[TILE_DIM + mRadius * 2][TILE_DIM + mRadius * 2];
  for (  WeightedLatLng w : points) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  for (  WeightedLatLng w : wrappedPoints) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x + xOffset - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  double[][] convolved=convolve(intensity,mKernel);
  Bitmap bitmap=colorize(convolved,mColorMap,mMaxIntensity[zoom]);
  return convertBitmap(bitmap);
}","/** 
 * Creates tile.
 * @param x    X coordinate of tile.
 * @param y    Y coordinate of tile.
 * @param zoom Zoom level.
 * @return image in Tile format
 */
public Tile getTile(int x,int y,int zoom){
  double tileWidth=WORLD_WIDTH / Math.pow(2,zoom);
  double padding=tileWidth * mRadius / TILE_DIM;
  double tileWidthPadded=tileWidth + 2 * padding;
  double bucketWidth=tileWidthPadded / (TILE_DIM + mRadius * 2);
  double minX=x * tileWidth - padding;
  double maxX=(x + 1) * tileWidth + padding;
  double minY=y * tileWidth - padding;
  double maxY=(y + 1) * tileWidth + padding;
  double xOffset=0;
  Collection<WeightedLatLng> wrappedPoints=new ArrayList<WeightedLatLng>();
  if (minX < 0) {
    Bounds overlapBounds=new Bounds(minX + WORLD_WIDTH,WORLD_WIDTH,minY,maxY);
    xOffset=-WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
 else   if (maxX > WORLD_WIDTH) {
    Bounds overlapBounds=new Bounds(0,maxX - WORLD_WIDTH,minY,maxY);
    xOffset=WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
  Bounds tileBounds=new Bounds(minX,maxX,minY,maxY);
  Bounds paddedBounds=new Bounds(mBounds.minX - padding,mBounds.maxX + padding,mBounds.minY - padding,mBounds.maxY + padding);
  if (!tileBounds.intersects(paddedBounds)) {
    return TileProvider.NO_TILE;
  }
  Collection<WeightedLatLng> points=mTree.search(tileBounds);
  if (points.isEmpty()) {
    return TileProvider.NO_TILE;
  }
  double[][] intensity=new double[TILE_DIM + mRadius * 2][TILE_DIM + mRadius * 2];
  for (  WeightedLatLng w : points) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  for (  WeightedLatLng w : wrappedPoints) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x + xOffset - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  double[][] convolved=convolve(intensity,mKernel);
  Bitmap bitmap=colorize(convolved,mColorMap,mMaxIntensity[zoom]);
  return convertBitmap(bitmap);
}",0.9962335216572504
190857,"/** 
 * Helper function for quadtree creation
 * @param points Collection of WeightedLatLng to calculate bounds for
 * @return Bounds that enclose the listed WeightedLatLng points
 */
static Bounds getBounds(Collection<WeightedLatLng> points){
  Iterator<WeightedLatLng> iter=points.iterator();
  WeightedLatLng first=iter.next();
  double minX=first.getPoint().x;
  double maxX=first.getPoint().x + SIGMA;
  double minY=first.getPoint().y;
  double maxY=first.getPoint().y + SIGMA;
  while (iter.hasNext()) {
    WeightedLatLng l=iter.next();
    double x=l.getPoint().x;
    double y=l.getPoint().y;
    if (x < minX)     minX=x;
    if (x + SIGMA > maxX)     maxX=x + SIGMA;
    if (y < minY)     minY=y;
    if (y + SIGMA > maxY)     maxY=y + SIGMA;
  }
  return new Bounds(minX,maxX,minY,maxY);
}","/** 
 * Helper function for quadtree creation
 * @param points Collection of WeightedLatLng to calculate bounds for
 * @return Bounds that enclose the listed WeightedLatLng points
 */
static Bounds getBounds(Collection<WeightedLatLng> points){
  Iterator<WeightedLatLng> iter=points.iterator();
  WeightedLatLng first=iter.next();
  double minX=first.getPoint().x;
  double maxX=first.getPoint().x;
  double minY=first.getPoint().y;
  double maxY=first.getPoint().y;
  while (iter.hasNext()) {
    WeightedLatLng l=iter.next();
    double x=l.getPoint().x;
    double y=l.getPoint().y;
    if (x < minX)     minX=x;
    if (x > maxX)     maxX=x;
    if (y < minY)     minY=y;
    if (y > maxY)     maxY=y;
  }
  return new Bounds(minX,maxX,minY,maxY);
}",0.9691119691119692
190858,"/** 
 * Creates tile.
 * @param x    X coordinate of tile.
 * @param y    Y coordinate of tile.
 * @param zoom Zoom level.
 * @return image in Tile format
 */
public Tile getTile(int x,int y,int zoom){
  double tileWidth=WORLD_WIDTH / Math.pow(2,zoom);
  double padding=tileWidth * mRadius / TILE_DIM;
  double tileWidthPadded=tileWidth + 2 * padding;
  double bucketWidth=tileWidthPadded / (TILE_DIM + mRadius * 2);
  double minX=x * tileWidth - padding;
  double maxX=(x + 1) * tileWidth + padding + SIGMA;
  double minY=y * tileWidth - padding;
  double maxY=(y + 1) * tileWidth + padding + SIGMA;
  double xOffset=0;
  Collection<WeightedLatLng> wrappedPoints=new ArrayList<WeightedLatLng>();
  if (minX < 0) {
    Bounds overlapBounds=new Bounds(minX + WORLD_WIDTH,WORLD_WIDTH,minY,maxY);
    xOffset=-WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
 else   if (maxX > WORLD_WIDTH) {
    Bounds overlapBounds=new Bounds(0,maxX - WORLD_WIDTH,minY,maxY);
    xOffset=WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
  Bounds tileBounds=new Bounds(minX,maxX,minY,maxY);
  Bounds paddedBounds=new Bounds(mBounds.minX - padding,mBounds.maxX + padding,mBounds.minY - padding,mBounds.maxY + padding);
  if (!tileBounds.intersects(paddedBounds)) {
    return TileProvider.NO_TILE;
  }
  Collection<WeightedLatLng> points=mTree.search(tileBounds);
  if (points.isEmpty()) {
    return TileProvider.NO_TILE;
  }
  double[][] intensity=new double[TILE_DIM + mRadius * 2][TILE_DIM + mRadius * 2];
  for (  WeightedLatLng w : points) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  for (  WeightedLatLng w : wrappedPoints) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x + xOffset - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  double[][] convolved=convolve(intensity,mKernel);
  Bitmap bitmap=colorize(convolved,mColorMap,mMaxIntensity[zoom]);
  return convertBitmap(bitmap);
}","/** 
 * Creates tile.
 * @param x    X coordinate of tile.
 * @param y    Y coordinate of tile.
 * @param zoom Zoom level.
 * @return image in Tile format
 */
public Tile getTile(int x,int y,int zoom){
  double tileWidth=WORLD_WIDTH / Math.pow(2,zoom);
  double padding=tileWidth * mRadius / TILE_DIM;
  double tileWidthPadded=tileWidth + 2 * padding;
  double bucketWidth=tileWidthPadded / (TILE_DIM + mRadius * 2);
  double minX=x * tileWidth - padding;
  double maxX=(x + 1) * tileWidth + padding;
  double minY=y * tileWidth - padding;
  double maxY=(y + 1) * tileWidth + padding;
  double xOffset=0;
  Collection<WeightedLatLng> wrappedPoints=new ArrayList<WeightedLatLng>();
  if (minX < 0) {
    Bounds overlapBounds=new Bounds(minX + WORLD_WIDTH,WORLD_WIDTH,minY,maxY);
    xOffset=-WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
 else   if (maxX > WORLD_WIDTH) {
    Bounds overlapBounds=new Bounds(0,maxX - WORLD_WIDTH,minY,maxY);
    xOffset=WORLD_WIDTH;
    wrappedPoints=mTree.search(overlapBounds);
  }
  Bounds tileBounds=new Bounds(minX,maxX,minY,maxY);
  Bounds paddedBounds=new Bounds(mBounds.minX - padding,mBounds.maxX + padding,mBounds.minY - padding,mBounds.maxY + padding);
  if (!tileBounds.intersects(paddedBounds)) {
    return TileProvider.NO_TILE;
  }
  Collection<WeightedLatLng> points=mTree.search(tileBounds);
  if (points.isEmpty()) {
    return TileProvider.NO_TILE;
  }
  double[][] intensity=new double[TILE_DIM + mRadius * 2][TILE_DIM + mRadius * 2];
  for (  WeightedLatLng w : points) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  for (  WeightedLatLng w : wrappedPoints) {
    Point p=w.getPoint();
    int bucketX=(int)((p.x + xOffset - minX) / bucketWidth);
    int bucketY=(int)((p.y - minY) / bucketWidth);
    intensity[bucketX][bucketY]+=w.getIntensity();
  }
  double[][] convolved=convolve(intensity,mKernel);
  Bitmap bitmap=colorize(convolved,mColorMap,mMaxIntensity[zoom]);
  return convertBitmap(bitmap);
}",0.9962335216572504
190859,"/** 
 * Helper function for quadtree creation
 * @param points Collection of WeightedLatLng to calculate bounds for
 * @return Bounds that enclose the listed WeightedLatLng points
 */
static Bounds getBounds(Collection<WeightedLatLng> points){
  Iterator<WeightedLatLng> iter=points.iterator();
  WeightedLatLng first=iter.next();
  double minX=first.getPoint().x;
  double maxX=first.getPoint().x + SIGMA;
  double minY=first.getPoint().y;
  double maxY=first.getPoint().y + SIGMA;
  while (iter.hasNext()) {
    WeightedLatLng l=iter.next();
    double x=l.getPoint().x;
    double y=l.getPoint().y;
    if (x < minX)     minX=x;
    if (x + SIGMA > maxX)     maxX=x + SIGMA;
    if (y < minY)     minY=y;
    if (y + SIGMA > maxY)     maxY=y + SIGMA;
  }
  return new Bounds(minX,maxX,minY,maxY);
}","/** 
 * Helper function for quadtree creation
 * @param points Collection of WeightedLatLng to calculate bounds for
 * @return Bounds that enclose the listed WeightedLatLng points
 */
static Bounds getBounds(Collection<WeightedLatLng> points){
  Iterator<WeightedLatLng> iter=points.iterator();
  WeightedLatLng first=iter.next();
  double minX=first.getPoint().x;
  double maxX=first.getPoint().x;
  double minY=first.getPoint().y;
  double maxY=first.getPoint().y;
  while (iter.hasNext()) {
    WeightedLatLng l=iter.next();
    double x=l.getPoint().x;
    double y=l.getPoint().y;
    if (x < minX)     minX=x;
    if (x > maxX)     maxX=x;
    if (y < minY)     minY=y;
    if (y > maxY)     maxY=y;
  }
  return new Bounds(minX,maxX,minY,maxY);
}",0.9691119691119692
190860,"/** 
 * Gets array of maximum intensity values to use with the heatmap for each zoom level This is the value that the highest color on the color map corresponds to
 * @param radius radius of the heatmap
 * @return array of maximum intensities
 */
private double[] getMaxIntensities(int radius){
  double[] maxIntensityArray=new double[MAX_ZOOM_LEVEL];
  for (int i=DEFAULT_MIN_ZOOM; i < DEFAULT_MAX_ZOOM; i++) {
    maxIntensityArray[i]=getMaxValue(mData,mBounds,radius,(int)(SCREEN_SIZE * Math.pow(2,i - 3)));
    if (i == DEFAULT_MIN_ZOOM) {
      for (int j=0; j < i; j++)       maxIntensityArray[j]=maxIntensityArray[i];
    }
  }
  for (int i=DEFAULT_MIN_ZOOM; i < MAX_ZOOM_LEVEL; i++) {
    maxIntensityArray[i]=maxIntensityArray[DEFAULT_MAX_ZOOM - 1];
  }
  return maxIntensityArray;
}","/** 
 * Gets array of maximum intensity values to use with the heatmap for each zoom level This is the value that the highest color on the color map corresponds to
 * @param radius radius of the heatmap
 * @return array of maximum intensities
 */
private double[] getMaxIntensities(int radius){
  double[] maxIntensityArray=new double[MAX_ZOOM_LEVEL];
  for (int i=DEFAULT_MIN_ZOOM; i < DEFAULT_MAX_ZOOM; i++) {
    maxIntensityArray[i]=getMaxValue(mData,mBounds,radius,(int)(SCREEN_SIZE * Math.pow(2,i - 3)));
    if (i == DEFAULT_MIN_ZOOM) {
      for (int j=0; j < i; j++)       maxIntensityArray[j]=maxIntensityArray[i];
    }
  }
  for (int i=DEFAULT_MAX_ZOOM; i < MAX_ZOOM_LEVEL; i++) {
    maxIntensityArray[i]=maxIntensityArray[DEFAULT_MAX_ZOOM - 1];
  }
  return maxIntensityArray;
}",0.9974747474747476
190861,"@Override public Set<? extends Cluster<T>> getClusters(double zoom){
  final int discreteZoom=(int)zoom;
  final double zoomSpecificSpan=MAX_DISTANCE_AT_ZOOM / Math.pow(2,discreteZoom) / 256;
  final Set<QuadItem<T>> visitedCandidates=new HashSet<QuadItem<T>>();
  final Set<Cluster<T>> results=new HashSet<Cluster<T>>();
  final Map<QuadItem<T>,Double> distanceToCluster=new HashMap<QuadItem<T>,Double>();
  final Map<QuadItem<T>,StaticCluster<T>> itemToCluster=new HashMap<QuadItem<T>,StaticCluster<T>>();
  for (  QuadItem<T> candidate : mItems) {
    if (visitedCandidates.contains(candidate)) {
      continue;
    }
    Bounds searchBounds=createBoundsFromSpan(candidate.getPoint(),zoomSpecificSpan);
    Collection<QuadItem<T>> clusterItems;
synchronized (mQuadTree) {
      clusterItems=mQuadTree.search(searchBounds);
    }
    if (clusterItems.size() == 1) {
      results.add(candidate);
      visitedCandidates.add(candidate);
      distanceToCluster.put(candidate,0d);
      continue;
    }
    StaticCluster<T> cluster=new StaticCluster<T>(candidate.mClusterItem.getPosition());
    results.add(cluster);
    for (    QuadItem<T> clusterItem : clusterItems) {
      Double existingDistance=distanceToCluster.get(clusterItem);
      double distance=distanceSquared(clusterItem.getPoint(),candidate.getPoint());
      if (existingDistance != null) {
        if (existingDistance < distance) {
          continue;
        }
        itemToCluster.get(clusterItem).remove(clusterItem.mClusterItem);
      }
      distanceToCluster.put(clusterItem,distance);
      cluster.add(clusterItem.mClusterItem);
      itemToCluster.put(clusterItem,cluster);
    }
    visitedCandidates.addAll(clusterItems);
  }
  return results;
}","@Override public Set<? extends Cluster<T>> getClusters(double zoom){
  final int discreteZoom=(int)zoom;
  final double zoomSpecificSpan=MAX_DISTANCE_AT_ZOOM / Math.pow(2,discreteZoom) / 256;
  final Set<QuadItem<T>> visitedCandidates=new HashSet<QuadItem<T>>();
  final Set<Cluster<T>> results=new HashSet<Cluster<T>>();
  final Map<QuadItem<T>,Double> distanceToCluster=new HashMap<QuadItem<T>,Double>();
  final Map<QuadItem<T>,StaticCluster<T>> itemToCluster=new HashMap<QuadItem<T>,StaticCluster<T>>();
synchronized (mQuadTree) {
    for (    QuadItem<T> candidate : mItems) {
      if (visitedCandidates.contains(candidate)) {
        continue;
      }
      Bounds searchBounds=createBoundsFromSpan(candidate.getPoint(),zoomSpecificSpan);
      Collection<QuadItem<T>> clusterItems;
      clusterItems=mQuadTree.search(searchBounds);
      if (clusterItems.size() == 1) {
        results.add(candidate);
        visitedCandidates.add(candidate);
        distanceToCluster.put(candidate,0d);
        continue;
      }
      StaticCluster<T> cluster=new StaticCluster<T>(candidate.mClusterItem.getPosition());
      results.add(cluster);
      for (      QuadItem<T> clusterItem : clusterItems) {
        Double existingDistance=distanceToCluster.get(clusterItem);
        double distance=distanceSquared(clusterItem.getPoint(),candidate.getPoint());
        if (existingDistance != null) {
          if (existingDistance < distance) {
            continue;
          }
          itemToCluster.get(clusterItem).remove(clusterItem.mClusterItem);
        }
        distanceToCluster.put(clusterItem,distance);
        cluster.add(clusterItem.mClusterItem);
        itemToCluster.put(clusterItem,cluster);
      }
      visitedCandidates.addAll(clusterItems);
    }
  }
  return results;
}",0.8909710391822828
190862,"@Override public Set<? extends Cluster<T>> getClusters(double zoom){
  final int discreteZoom=(int)zoom;
  final double zoomSpecificSpan=MAX_DISTANCE_AT_ZOOM / Math.pow(2,discreteZoom) / 256;
  final Set<QuadItem<T>> visitedCandidates=new HashSet<QuadItem<T>>();
  final Set<Cluster<T>> results=new HashSet<Cluster<T>>();
  final Map<QuadItem<T>,Double> distanceToCluster=new HashMap<QuadItem<T>,Double>();
  final Map<QuadItem<T>,StaticCluster<T>> itemToCluster=new HashMap<QuadItem<T>,StaticCluster<T>>();
  for (  QuadItem<T> candidate : mItems) {
    if (visitedCandidates.contains(candidate)) {
      continue;
    }
    Bounds searchBounds=createBoundsFromSpan(candidate.getPoint(),zoomSpecificSpan);
    Collection<QuadItem<T>> clusterItems;
synchronized (mQuadTree) {
      clusterItems=mQuadTree.search(searchBounds);
    }
    if (clusterItems.size() == 1) {
      results.add(candidate);
      visitedCandidates.add(candidate);
      distanceToCluster.put(candidate,0d);
      continue;
    }
    StaticCluster<T> cluster=new StaticCluster<T>(candidate.mClusterItem.getPosition());
    results.add(cluster);
    for (    QuadItem<T> clusterItem : clusterItems) {
      Double existingDistance=distanceToCluster.get(clusterItem);
      double distance=distanceSquared(clusterItem.getPoint(),candidate.getPoint());
      if (existingDistance != null) {
        if (existingDistance < distance) {
          continue;
        }
        itemToCluster.get(clusterItem).remove(clusterItem.mClusterItem);
      }
      distanceToCluster.put(clusterItem,distance);
      cluster.add(clusterItem.mClusterItem);
      itemToCluster.put(clusterItem,cluster);
    }
    visitedCandidates.addAll(clusterItems);
  }
  return results;
}","@Override public Set<? extends Cluster<T>> getClusters(double zoom){
  final int discreteZoom=(int)zoom;
  final double zoomSpecificSpan=MAX_DISTANCE_AT_ZOOM / Math.pow(2,discreteZoom) / 256;
  final Set<QuadItem<T>> visitedCandidates=new HashSet<QuadItem<T>>();
  final Set<Cluster<T>> results=new HashSet<Cluster<T>>();
  final Map<QuadItem<T>,Double> distanceToCluster=new HashMap<QuadItem<T>,Double>();
  final Map<QuadItem<T>,StaticCluster<T>> itemToCluster=new HashMap<QuadItem<T>,StaticCluster<T>>();
synchronized (mQuadTree) {
    for (    QuadItem<T> candidate : mItems) {
      if (visitedCandidates.contains(candidate)) {
        continue;
      }
      Bounds searchBounds=createBoundsFromSpan(candidate.getPoint(),zoomSpecificSpan);
      Collection<QuadItem<T>> clusterItems;
      clusterItems=mQuadTree.search(searchBounds);
      if (clusterItems.size() == 1) {
        results.add(candidate);
        visitedCandidates.add(candidate);
        distanceToCluster.put(candidate,0d);
        continue;
      }
      StaticCluster<T> cluster=new StaticCluster<T>(candidate.mClusterItem.getPosition());
      results.add(cluster);
      for (      QuadItem<T> clusterItem : clusterItems) {
        Double existingDistance=distanceToCluster.get(clusterItem);
        double distance=distanceSquared(clusterItem.getPoint(),candidate.getPoint());
        if (existingDistance != null) {
          if (existingDistance < distance) {
            continue;
          }
          itemToCluster.get(clusterItem).remove(clusterItem.mClusterItem);
        }
        distanceToCluster.put(clusterItem,distance);
        cluster.add(clusterItem.mClusterItem);
        itemToCluster.put(clusterItem,cluster);
      }
      visitedCandidates.addAll(clusterItems);
    }
  }
  return results;
}",0.8909710391822828
190863,"@Override protected void startDemo(){
  getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(SYDNEY,16));
  double[] kernel=HeatmapUtil.generateKernel(5,1.5);
  Log.e(""String_Node_Str"",Arrays.toString(kernel));
  double[][] grid=new double[5][5];
  grid[2][2]=2;
  grid[2][1]=1;
  grid[1][2]=1;
  grid[2][3]=1;
  grid[3][2]=1;
  double[] testKernel={0.5,1,0.5};
  double[][] convolved=HeatmapUtil.convolve(grid,testKernel);
  printGrid(convolved);
  int[] colorMapTest=HeatmapUtil.generateColorMap(HeatmapConstants.DEFAULT_HEATMAP_GRADIENT,101,1);
  Log.e(""String_Node_Str"",Arrays.toString(colorMapTest));
  Bitmap colorMap=Bitmap.createBitmap(256,256,Bitmap.Config.ARGB_8888);
  int colours[]=new int[256 * 256];
  int i, j, count=0;
  for (i=0; i < 256; i++) {
    for (j=0; j < 256; j++) {
      if (j < colorMapTest.length)       colours[count]=colorMapTest[j];
 else       colours[count]=colorMapTest[colorMapTest.length - 1];
      count++;
    }
  }
  colorMap.setPixels(colours,0,256,0,0,256,256);
  BitmapDescriptor image=BitmapDescriptorFactory.fromBitmap(colorMap);
  LatLng northeast=new LatLng(-33.865429,151.196766);
  LatLng southwest=new LatLng(-33.866209,151.195216);
  LatLngBounds bounds=new LatLngBounds(southwest,northeast);
  getMap().addGroundOverlay(new GroundOverlayOptions().image(image).positionFromBounds(bounds));
}","@Override protected void startDemo(){
  getMap().moveCamera(CameraUpdateFactory.newLatLngZoom(SYDNEY,16));
  double[] kernel=HeatmapUtil.generateKernel(5,1.5);
  Log.e(""String_Node_Str"",Arrays.toString(kernel));
  double[][] grid=new double[5][5];
  grid[2][2]=2;
  grid[2][1]=1;
  grid[1][2]=1;
  grid[2][3]=1;
  grid[3][2]=1;
  double[] testKernel={0.5,1,0.5};
  double[][] convolved=HeatmapUtil.convolve(grid,testKernel);
  printGrid(convolved);
  int[] colorMapTest=HeatmapUtil.generateColorMap(HeatmapConstants.DEFAULT_HEATMAP_GRADIENT,102,1);
  Log.e(""String_Node_Str"",Arrays.toString(colorMapTest));
  Bitmap colorMap=Bitmap.createBitmap(256,256,Bitmap.Config.ARGB_8888);
  int colours[]=new int[256 * 256];
  int i, j, count=0;
  for (i=0; i < 256; i++) {
    for (j=0; j < 256; j++) {
      if (j < colorMapTest.length)       colours[count]=colorMapTest[j];
 else       colours[count]=colorMapTest[colorMapTest.length - 1];
      count++;
    }
  }
  colorMap.setPixels(colours,0,256,0,0,256,256);
  BitmapDescriptor image=BitmapDescriptorFactory.fromBitmap(colorMap);
  LatLng northeast=new LatLng(-33.865429,151.196766);
  LatLng southwest=new LatLng(-33.866209,151.195216);
  LatLngBounds bounds=new LatLngBounds(southwest,northeast);
  getMap().addGroundOverlay(new GroundOverlayOptions().image(image).positionFromBounds(bounds));
}",0.9992565055762082
190864,"/** 
 * Generates the color map to use with a provided gradient.
 * @param gradient Array of colors (int format)
 * @param size Number of elements in the color map
 * @param opacity Overall opacity of entire image: every individual alpha value will bemultiplied by this opacity.
 * @return the generated color map based on the gradient
 */
public static int[] generateColorMap(int[] gradient,int size,double opacity){
  int[] values=new int[gradient.length];
  int[] colors=new int[gradient.length];
  int interval=(size - 1) / (gradient.length - 1);
  int i;
  for (i=0; i < gradient.length; i++) {
    values[i]=i * interval;
    colors[i]=gradient[i];
  }
  Log.e(""String_Node_Str"",Arrays.toString(values));
  int[] colorMap=new int[size];
  int lowColorStop=0;
  for (i=0; i < size; i++) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ lowColorStop);
    if (i > values[lowColorStop + 1])     lowColorStop++;
    if (lowColorStop < values.length - 1) {
      colorMap[i]=interpolateColor(interval * lowColorStop,i,interval * (lowColorStop + 1),colors[lowColorStop],colors[lowColorStop + 1]);
    }
 else {
      colorMap[i]=colors[colors.length - 1];
    }
    if (opacity != 1) {
      int c=colorMap[i];
      colorMap[i]=Color.argb((int)(Color.alpha(c) * opacity),Color.red(c),Color.green(c),Color.blue(c));
    }
  }
  return colorMap;
}","/** 
 * Generates the color map to use with a provided gradient.
 * @param gradient Array of colors (int format)
 * @param size Number of elements in the color map
 * @param opacity Overall opacity of entire image: every individual alpha value will bemultiplied by this opacity.
 * @return the generated color map based on the gradient
 */
public static int[] generateColorMap(int[] gradient,int size,double opacity){
  int[] values=new int[gradient.length];
  int[] colors=new int[gradient.length];
  int interval=(size - 1) / (gradient.length - 1);
  int i;
  for (i=0; i < gradient.length; i++) {
    values[i]=i * interval;
    colors[i]=gradient[i];
  }
  Log.e(""String_Node_Str"",Arrays.toString(values));
  int[] colorMap=new int[size];
  int lowColorStop=0;
  for (i=0; i < size; i++) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + i + ""String_Node_Str""+ lowColorStop);
    if (lowColorStop + 1 < values.length) {
      if (i > values[lowColorStop + 1])       lowColorStop++;
    }
    if (lowColorStop < values.length - 1) {
      if (i > values[lowColorStop + 1])       lowColorStop++;
      colorMap[i]=interpolateColor(interval * lowColorStop,i,interval * (lowColorStop + 1),colors[lowColorStop],colors[lowColorStop + 1]);
    }
 else {
      colorMap[i]=colors[colors.length - 1];
    }
    if (opacity != 1) {
      int c=colorMap[i];
      colorMap[i]=Color.argb((int)(Color.alpha(c) * opacity),Color.red(c),Color.green(c),Color.blue(c));
    }
  }
  return colorMap;
}",0.9488795518207284
190865,"public Bounds(double minX,double maxX,double minY,double maxY){
  this.minX=minX;
  this.minY=minY;
  this.maxX=maxX;
  this.maxY=maxY;
  midX=(minX + maxX) / 2;
  midY=(minY + minY) / 2;
}","public Bounds(double minX,double maxX,double minY,double maxY){
  this.minX=minX;
  this.minY=minY;
  this.maxX=maxX;
  this.maxY=maxY;
  midX=(minX + maxX) / 2;
  midY=(minY + maxY) / 2;
}",0.9894179894179894
190866,"@Override public void add(T item){
  Node node=new Node(item);
  int index=Collections.binarySearch(mPoints,node);
  mPoints.add(index,node);
}","@Override public void add(T item){
  int size=mPoints.size();
  Node node=new Node(item);
  int index=Collections.binarySearch(mPoints,node);
  if (index < 0) {
    if (-index - 1 < mPoints.size())     mPoints.add(-index - 1,node);
 else     mPoints.add(node);
  }
 else {
    mPoints.add(index + 1,node);
  }
}",0.5550660792951542
190867,"private void search(Bounds searchBounds,Bounds currBounds,int location,int depth,Collection<T> results){
  if (searchBounds.contains(currBounds)) {
    Node node=new Node(location);
    int index=Collections.binarySearch(mPoints,node);
    for (; mPoints.get(index).location < location + (mBase ^ depth); index++) {
      results.add(mPoints.get(index).t);
    }
  }
 else   if (searchBounds.intersects(currBounds) && depth > 0) {
    search(searchBounds,new Bounds(currBounds.minX,currBounds.midX,currBounds.minY,currBounds.midY),location + mQuadrant.TOP_LEFT.getValue() * (mBase ^ depth),depth - 1,results);
    search(searchBounds,new Bounds(currBounds.midX,currBounds.maxX,currBounds.minY,currBounds.midY),location + mQuadrant.TOP_RIGHT.getValue() * (mBase ^ depth),depth - 1,results);
    search(searchBounds,new Bounds(currBounds.minX,currBounds.midX,currBounds.midY,currBounds.maxY),location + mQuadrant.BOTTOM_LEFT.getValue() * (mBase ^ depth),depth - 1,results);
    search(searchBounds,new Bounds(currBounds.midX,currBounds.maxX,currBounds.midY,currBounds.maxY),location + mQuadrant.BOTTOM_RIGHT.getValue() * (mBase ^ depth),depth - 1,results);
  }
 else   if (searchBounds.intersects(currBounds)) {
    Node node=new Node(location);
    int index=Collections.binarySearch(mPoints,node);
    for (; mPoints.get(index).location < location + (mBase ^ depth); index++) {
      if (searchBounds.contains(mPoints.get(index).t.getPoint().x,mPoints.get(index).t.getPoint().y)) {
        results.add(mPoints.get(index).t);
      }
    }
  }
}","private void search(Bounds searchBounds,Bounds currBounds,int location,int depth,Collection<T> results){
  for (  Node node : mPoints) {
    if (searchBounds.contains(node.t.getPoint().x,node.t.getPoint().y))     results.add(node.t);
  }
}",0.1503084688726864
190868,"@Override public boolean remove(T item){
  Node node=new Node(item);
  int index=Collections.binarySearch(mPoints,node);
  if (mPoints.get(index) == node) {
    mPoints.remove(index);
    return true;
  }
  return false;
}","@Override public boolean remove(T item){
  Node node=new Node(item);
  int index=Collections.binarySearch(mPoints,node);
  if (index >= 0) {
    while (index < mPoints.size() && mPoints.get(index).location == node.location && mPoints.get(index).t != item) {
      index++;
    }
    if (mPoints.get(index).t == item) {
      mPoints.remove(index);
      return true;
    }
  }
  return false;
}",0.6948051948051948
190869,"@Override public void onConnectedToRoom(Room room){
  Log.d(TAG,""String_Node_Str"");
  mParticipants=room.getParticipants();
  mMyId=room.getParticipantId(Games.Players.getCurrentPlayerId(mGoogleApiClient));
  mRoomId=room.getRoomId();
  Log.d(TAG,""String_Node_Str"" + mRoomId);
  Log.d(TAG,""String_Node_Str"" + mMyId);
  Log.d(TAG,""String_Node_Str"");
}","@Override public void onConnectedToRoom(Room room){
  Log.d(TAG,""String_Node_Str"");
  mParticipants=room.getParticipants();
  mMyId=room.getParticipantId(Games.Players.getCurrentPlayerId(mGoogleApiClient));
  if (mRoomId == null)   mRoomId=room.getRoomId();
  Log.d(TAG,""String_Node_Str"" + mRoomId);
  Log.d(TAG,""String_Node_Str"" + mMyId);
  Log.d(TAG,""String_Node_Str"");
}",0.9681881051175656
190870,"@Override public void onInvitationRemoved(String invitationId){
  if (mIncomingInvitationId != null) {
    if (mIncomingInvitationId.equals(invitationId)) {
      mIncomingInvitationId=null;
      switchToScreen(mCurScreen);
    }
  }
}","@Override public void onInvitationRemoved(String invitationId){
  if (mIncomingInvitationId.equals(invitationId) && mIncomingInvitationId != null) {
    mIncomingInvitationId=null;
    switchToScreen(mCurScreen);
  }
}",0.7577092511013216
190871,"@Override public void onRoomCreated(int statusCode,Room room){
  Log.d(TAG,""String_Node_Str"" + statusCode + ""String_Node_Str""+ room+ ""String_Node_Str"");
  if (statusCode != GamesStatusCodes.STATUS_OK) {
    Log.e(TAG,""String_Node_Str"" + statusCode);
    showGameError();
    return;
  }
  showWaitingRoom(room);
}","@Override public void onRoomCreated(int statusCode,Room room){
  Log.d(TAG,""String_Node_Str"" + statusCode + ""String_Node_Str""+ room+ ""String_Node_Str"");
  if (statusCode != GamesStatusCodes.STATUS_OK) {
    Log.e(TAG,""String_Node_Str"" + statusCode);
    showGameError();
    return;
  }
  mRoomId=room.getRoomId();
  showWaitingRoom(room);
}",0.9571865443425076
190872,"/** 
 * Attempts to resolve a connection failure. This will usually involve starting a UI flow that lets the user give the appropriate consents necessary for sign-in to work.
 */
void resolveConnectionResult(){
  if (mExpectingResolution) {
    debugLog(""String_Node_Str"");
    return;
  }
  if (mActivity == null) {
    debugLog(""String_Node_Str"");
    return;
  }
  debugLog(""String_Node_Str"" + mConnectionResult);
  if (mConnectionResult.hasResolution()) {
    debugLog(""String_Node_Str"");
    try {
      mExpectingResolution=true;
      mConnectionResult.startResolutionForResult(mActivity,RC_RESOLVE);
    }
 catch (    SendIntentException e) {
      debugLog(""String_Node_Str"");
      connect();
    }
  }
 else {
    debugLog(""String_Node_Str"");
    giveUp(new SignInFailureReason(mConnectionResult.getErrorCode()));
  }
}","/** 
 * Attempts to resolve a connection failure. This will usually involve starting a UI flow that lets the user give the appropriate consents necessary for sign-in to work.
 */
void resolveConnectionResult(){
  if (mExpectingResolution) {
    debugLog(""String_Node_Str"");
    return;
  }
  if (mActivity == null) {
    debugLog(""String_Node_Str"");
    return;
  }
  debugLog(""String_Node_Str"" + mConnectionResult);
  if (mConnectionResult.hasResolution()) {
    debugLog(""String_Node_Str"");
    try {
      mExpectingResolution=true;
      mConnectionResult.startResolutionForResult(mActivity,RC_RESOLVE);
    }
 catch (    SendIntentException e) {
      debugLog(""String_Node_Str"");
      connect();
    }
  }
 else {
    debugLog(""String_Node_Str"");
    giveUp(new SignInFailureReason(mConnectionResult.getErrorCode()));
    mConnectionResult=null;
  }
}",0.9834123222748816
190873,"void startConnections(){
  if (!checkState(TYPE_GAMEHELPER_BUG,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",STATE_DISCONNECTED)) {
    return;
  }
  debugLog(""String_Node_Str"");
  setState(STATE_CONNECTING);
  mInvitationId=null;
  connectNextClient();
}","void startConnections(){
  if (!checkState(TYPE_GAMEHELPER_BUG,""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",STATE_DISCONNECTED)) {
    return;
  }
  debugLog(""String_Node_Str"");
  setState(STATE_CONNECTING);
  mInvitationId=null;
  mTurnBasedMatch=null;
  connectNextClient();
}",0.9566787003610108
190874,"/** 
 * Called when we successfully obtain a connection to a client. 
 */
@Override public void onConnected(Bundle connectionHint){
  mTurnBasedMatch=null;
  debugLog(""String_Node_Str"" + mClientCurrentlyConnecting);
  mConnectedClients|=mClientCurrentlyConnecting;
  debugLog(""String_Node_Str"" + mConnectedClients);
  if (mClientCurrentlyConnecting == CLIENT_GAMES && connectionHint != null) {
    debugLog(""String_Node_Str"");
    Invitation inv=connectionHint.getParcelable(GamesClient.EXTRA_INVITATION);
    if (inv != null && inv.getInvitationId() != null) {
      debugLog(""String_Node_Str"");
      mInvitationId=inv.getInvitationId();
      debugLog(""String_Node_Str"" + mInvitationId);
    }
    debugLog(""String_Node_Str"");
    TurnBasedMatch match=connectionHint.getParcelable(GamesClient.EXTRA_TURN_BASED_MATCH);
    if (match != null) {
      mTurnBasedMatch=match;
    }
  }
  connectNextClient();
}","/** 
 * Called when we successfully obtain a connection to a client. 
 */
@Override public void onConnected(Bundle connectionHint){
  debugLog(""String_Node_Str"" + mClientCurrentlyConnecting);
  mConnectedClients|=mClientCurrentlyConnecting;
  debugLog(""String_Node_Str"" + mConnectedClients);
  if (mClientCurrentlyConnecting == CLIENT_GAMES && connectionHint != null) {
    debugLog(""String_Node_Str"");
    Invitation inv=connectionHint.getParcelable(GamesClient.EXTRA_INVITATION);
    if (inv != null && inv.getInvitationId() != null) {
      debugLog(""String_Node_Str"");
      mInvitationId=inv.getInvitationId();
      debugLog(""String_Node_Str"" + mInvitationId);
    }
    debugLog(""String_Node_Str"");
    mTurnBasedMatch=connectionHint.getParcelable(GamesClient.EXTRA_TURN_BASED_MATCH);
  }
  connectNextClient();
}",0.9230769230769232
190875,"/** 
 * Handle activity result. Call this method from your Activity's onActivityResult callback. If the activity result pertains to the sign-in process, processes it appropriately.
 */
public void onActivityResult(int requestCode,int responseCode,Intent intent){
  if (requestCode == RC_RESOLVE) {
    mExpectingActivityResult=false;
    debugLog(""String_Node_Str"" + requestCode + ""String_Node_Str""+ responseCode);
    if (responseCode == Activity.RESULT_OK) {
      debugLog(""String_Node_Str"");
      connectCurrentClient();
    }
 else {
      debugLog(""String_Node_Str"");
      giveUp();
    }
  }
}","/** 
 * Handle activity result. Call this method from your Activity's onActivityResult callback. If the activity result pertains to the sign-in process, processes it appropriately.
 */
public void onActivityResult(int requestCode,int responseCode,Intent intent){
  if (requestCode == RC_RESOLVE) {
    mExpectingActivityResult=false;
    debugLog(""String_Node_Str"" + requestCode + ""String_Node_Str""+ responseCode);
    if (responseCode == Activity.RESULT_OK) {
      debugLog(""String_Node_Str"");
      connectCurrentClient();
    }
 else     if (responseCode == Activity.RESULT_CANCELED) {
      mAutoSignIn=false;
      mConnectionResult=null;
      mUserInitiatedSignIn=false;
      dismissDialog();
    }
 else {
      debugLog(""String_Node_Str"");
      giveUp();
    }
  }
}",0.8724637681159421
190876,"/** 
 * This method takes a temperature in Celsius or Fahrenheit and converts it to the other value.
 * @param source the temperature to convert from
 * @return the converted temperature.
 */
public Temperature convert(Temperature source){
  if (source.getScale() == CELSIUS) {
    if (source.getTemperature() < Temperature.ABSOLUTE_ZERO_C) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
 else     if (source.getTemperature() == Temperature.ABSOLUTE_ZERO_C) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
    return new Temperature((source.getTemperature() * 9 / 5) + 32,FARENHEIT);
  }
 else   if (source.getScale() == FARENHEIT) {
    if (source.getTemperature() < Temperature.ABSOLUTE_ZERO_F) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
 else     if (source.getTemperature() == Temperature.ABSOLUTE_ZERO_F) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
    return new Temperature((source.getTemperature() - 32) * 5 / 9,CELSIUS);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * This method takes a temperature in Celsius or Fahrenheit and converts it to the other value.
 * @param source the temperature to convert from
 * @return the converted temperature.
 */
public Temperature convert(Temperature source){
  if (source.getScale() == CELSIUS) {
    if (source.getTemperature() < Temperature.ABSOLUTE_ZERO_C) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
 else     if (source.getTemperature() == Temperature.ABSOLUTE_ZERO_C) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
    return new Temperature((source.getTemperature() * 9 / 5) + 32,FAHRENHEIT);
  }
 else   if (source.getScale() == FAHRENHEIT) {
    if (source.getTemperature() < Temperature.ABSOLUTE_ZERO_F) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
 else     if (source.getTemperature() == Temperature.ABSOLUTE_ZERO_F) {
      FacesContext.getCurrentInstance().addMessage(null,new FacesMessage(""String_Node_Str""));
    }
    return new Temperature((source.getTemperature() - 32) * 5 / 9,CELSIUS);
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9991869918699188
190877,"public void register(){
  try {
    memberRegistration.register(newMember);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
    initNewMember();
  }
 catch (  Exception e) {
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_ERROR,""String_Node_Str"",""String_Node_Str""));
  }
}","public void register(){
  try {
    memberRegistration.register(newMember);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
    initNewMember();
  }
 catch (  Exception e) {
    String errorMessage=getRootErrorMessage(e);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_ERROR,errorMessage,""String_Node_Str""));
  }
}",0.8975356679636836
190878,"public void register() throws Exception {
  memberRegistration.register(newMember);
  facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
  initNewMember();
}","public void register() throws Exception {
  try {
    memberRegistration.register(newMember);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
    initNewMember();
  }
 catch (  Exception e) {
    String errorMessage=getRootErrorMessage(e);
    FacesMessage m=new FacesMessage(FacesMessage.SEVERITY_ERROR,errorMessage,""String_Node_Str"");
    facesContext.addMessage(null,m);
  }
}",0.6556390977443609
190879,"public void register() throws Exception {
  memberRegistration.register(newMember);
  facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
  initNewMember();
}","public void register() throws Exception {
  try {
    memberRegistration.register(newMember);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_INFO,""String_Node_Str"",""String_Node_Str""));
    initNewMember();
  }
 catch (  Exception e) {
    String errorMessage=getRootErrorMessage(e);
    facesContext.addMessage(null,new FacesMessage(FacesMessage.SEVERITY_ERROR,errorMessage,""String_Node_Str""));
  }
}",0.6780715396578538
190880,"public static void main(String[] args) throws Exception {
  ConnectionFactory connectionFactory=null;
  Connection connection=null;
  Session session=null;
  MessageProducer producer=null;
  MessageConsumer consumer=null;
  Destination destination=null;
  TextMessage message=null;
  Context context=null;
  try {
    final Properties env=new Properties();
    env.put(Context.INITIAL_CONTEXT_FACTORY,INITIAL_CONTEXT_FACTORY);
    env.put(Context.PROVIDER_URL,System.getProperty(Context.PROVIDER_URL,PROVIDER_URL));
    env.put(Context.SECURITY_PRINCIPAL,System.getProperty(""String_Node_Str"",DEFAULT_USERNAME));
    env.put(Context.SECURITY_CREDENTIALS,System.getProperty(""String_Node_Str"",DEFAULT_PASSWORD));
    context=new InitialContext(env);
    String connectionFactoryString=System.getProperty(""String_Node_Str"",DEFAULT_CONNECTION_FACTORY);
    log.info(""String_Node_Str"" + connectionFactoryString + ""String_Node_Str"");
    connectionFactory=(ConnectionFactory)context.lookup(connectionFactoryString);
    log.info(""String_Node_Str"" + connectionFactoryString + ""String_Node_Str"");
    String destinationString=System.getProperty(""String_Node_Str"",DEFAULT_DESTINATION);
    log.info(""String_Node_Str"" + destinationString + ""String_Node_Str"");
    destination=(Destination)context.lookup(destinationString);
    log.info(""String_Node_Str"" + destinationString + ""String_Node_Str"");
    connection=connectionFactory.createConnection(System.getProperty(""String_Node_Str"",DEFAULT_USERNAME),System.getProperty(""String_Node_Str"",DEFAULT_PASSWORD));
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    producer=session.createProducer(destination);
    consumer=session.createConsumer(destination);
    connection.start();
    int count=Integer.parseInt(System.getProperty(""String_Node_Str"",DEFAULT_MESSAGE_COUNT));
    String content=System.getProperty(""String_Node_Str"",DEFAULT_MESSAGE);
    log.info(""String_Node_Str"" + count + ""String_Node_Str""+ content);
    for (int i=0; i < count; i++) {
      message=session.createTextMessage(content);
      producer.send(message);
    }
    for (int i=0; i < count; i++) {
      message=(TextMessage)consumer.receive(5000);
      log.info(""String_Node_Str"" + message.getText());
    }
  }
  finally {
    if (context != null) {
      context.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
}","public static void main(String[] args) throws Exception {
  ConnectionFactory connectionFactory=null;
  Connection connection=null;
  Session session=null;
  MessageProducer producer=null;
  MessageConsumer consumer=null;
  Destination destination=null;
  TextMessage message=null;
  Context context=null;
  try {
    final Properties env=new Properties();
    env.put(Context.INITIAL_CONTEXT_FACTORY,INITIAL_CONTEXT_FACTORY);
    env.put(Context.PROVIDER_URL,System.getProperty(Context.PROVIDER_URL,PROVIDER_URL));
    env.put(Context.SECURITY_PRINCIPAL,System.getProperty(""String_Node_Str"",DEFAULT_USERNAME));
    env.put(Context.SECURITY_CREDENTIALS,System.getProperty(""String_Node_Str"",DEFAULT_PASSWORD));
    context=new InitialContext(env);
    String connectionFactoryString=System.getProperty(""String_Node_Str"",DEFAULT_CONNECTION_FACTORY);
    log.info(""String_Node_Str"" + connectionFactoryString + ""String_Node_Str"");
    connectionFactory=(ConnectionFactory)context.lookup(connectionFactoryString);
    log.info(""String_Node_Str"" + connectionFactoryString + ""String_Node_Str"");
    String destinationString=System.getProperty(""String_Node_Str"",DEFAULT_DESTINATION);
    log.info(""String_Node_Str"" + destinationString + ""String_Node_Str"");
    destination=(Destination)context.lookup(destinationString);
    log.info(""String_Node_Str"" + destinationString + ""String_Node_Str"");
    connection=connectionFactory.createConnection(System.getProperty(""String_Node_Str"",DEFAULT_USERNAME),System.getProperty(""String_Node_Str"",DEFAULT_PASSWORD));
    session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    producer=session.createProducer(destination);
    consumer=session.createConsumer(destination);
    connection.start();
    int count=Integer.parseInt(System.getProperty(""String_Node_Str"",DEFAULT_MESSAGE_COUNT));
    String content=System.getProperty(""String_Node_Str"",DEFAULT_MESSAGE);
    log.info(""String_Node_Str"" + count + ""String_Node_Str""+ content);
    for (int i=0; i < count; i++) {
      message=session.createTextMessage(content);
      producer.send(message);
    }
    for (int i=0; i < count; i++) {
      message=(TextMessage)consumer.receive(5000);
      log.info(""String_Node_Str"" + message.getText());
    }
  }
 catch (  Exception e) {
    log.severe(e.getMessage());
    throw e;
  }
 finally {
    if (context != null) {
      context.close();
    }
    if (connection != null) {
      connection.close();
    }
  }
}",0.9849453495566096
190881,"public T parse(InputStream is) throws Exception {
  StringBuffer xmlFile=new StringBuffer();
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  while ((line=bufferedReader.readLine()) != null) {
    xmlFile.append(line);
  }
  String xml=xmlFile.toString();
  try {
    SchemaFactory sf=SchemaFactory.newInstance(""String_Node_Str"");
    Schema schema=sf.newSchema(schemaURL);
    Validator validator=schema.newValidator();
    Source source=new StreamSource(new CharArrayReader(xml.toCharArray()));
    validator.validate(source);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(xml.getBytes());
  T result=parseInternal(bais);
  return result;
}","public T parse(InputStream is) throws Exception {
  StringBuffer xmlFile=new StringBuffer();
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(is));
  String line=null;
  while ((line=bufferedReader.readLine()) != null) {
    xmlFile.append(line);
  }
  String xml=xmlFile.toString();
  try {
    SchemaFactory sf=SchemaFactory.newInstance(""String_Node_Str"");
    Schema schema=sf.newSchema(schemaURL);
    Validator validator=schema.newValidator();
    Source source=new StreamSource(new CharArrayReader(xml.toCharArray()));
    validator.validate(source);
  }
 catch (  Exception e) {
    this.errorHolder.addErrorMessage(""String_Node_Str"",e);
    return null;
  }
  ByteArrayInputStream bais=new ByteArrayInputStream(xml.getBytes());
  T result=parseInternal(bais);
  return result;
}",0.776796973518285
190882,"/** 
 * Action method invoked from UploadServlet once it parses request with 'multipart/form-data' form data and fetches uploaded file.<br> This method expects file to be passed as   {@link InputStream}.
 * @param stringBuffer
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public void parseUpload(InputStream is){
  try {
    this.catalog=this.xmlParser.parse(is);
  }
 catch (  Exception e) {
    errorHolder.addErrorMessage(""String_Node_Str"",e);
    return;
  }
}","/** 
 * Action method invoked from UploadServlet once it parses request with 'multipart/form-data' form data and fetches uploaded file.<br> This method expects file to be passed as   {@link InputStream}.
 * @param stringBuffer
 * @throws IOException
 */
@SuppressWarnings(""String_Node_Str"") public void parseUpload(InputStream is){
  try {
    this.errorHolder.clear();
    this.catalog=this.xmlParser.parse(is);
  }
 catch (  Exception e) {
    this.errorHolder.addErrorMessage(""String_Node_Str"",e);
    return;
  }
}",0.965034965034965
190883,"public void addErrorMessage(String msg,Throwable t){
  Error error=new Error(msg,t);
  this.errorsList.add(error);
}","@Override public void addErrorMessage(String msg,Throwable t){
  Error error=new Error(msg,t);
  this.errorsList.add(error);
}",0.9586776859504132
190884,"public int getErrorCount(){
  return this.errorsList.size();
}","@Override public int getErrorCount(){
  return this.errorsList.size();
}",0.9253731343283582
190885,"public List<Error> getErrorMessages(){
  return this.errorsList;
}","@Override public List<Error> getErrorMessages(){
  return new ArrayList<Error>(this.errorsList);
}",0.8048780487804879
190886,"public String getException(){
  if (this.t != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PrintStream ps=new PrintStream(baos);
    this.t.printStackTrace(ps);
    String stackTrace=new String(baos.toByteArray());
    return stackTrace;
  }
 else {
    return null;
  }
}","public String getException(){
  if (this.t != null) {
    return this.t.getMessage();
  }
  return null;
}",0.4740740740740741
190887,"public void setListening(boolean listening){
  if (listening == mBatteryListening) {
    return;
  }
  mBatteryListening=listening;
  if (mBatteryListening) {
    TunerService.get(getContext()).addTunable(this,STATUS_BAR_SHOW_BATTERY_PERCENT);
    mBatteryController.addStateChangedCallback(this);
  }
 else {
    mBatteryController.removeStateChangedCallback(this);
    TunerService.get(getContext()).removeTunable(this);
  }
}","public void setListening(boolean listening){
  if (listening == mBatteryListening) {
    return;
  }
  mBatteryListening=listening;
  if (mBatteryListening) {
    TunerService.get(getContext()).addTunable(this,STATUS_BAR_SHOW_BATTERY_PERCENT,STATUS_BAR_BATTERY_STYLE);
    mBatteryController.addStateChangedCallback(this);
  }
 else {
    mBatteryController.removeStateChangedCallback(this);
    TunerService.get(getContext()).removeTunable(this);
  }
}",0.9716231555051078
190888,"@Override public void onTuningChanged(String key,String newValue){
  if (key.equals(STATUS_BAR_SHOW_BATTERY_PERCENT)) {
    mShowBatteryText=newValue == null ? false : Integer.parseInt(newValue) == 2;
    updateVisibilities();
  }
}","@Override public void onTuningChanged(String key,String newValue){
switch (key) {
case STATUS_BAR_SHOW_BATTERY_PERCENT:
    mShowBatteryText=newValue != null && Integer.parseInt(newValue) == 2;
  break;
case STATUS_BAR_BATTERY_STYLE:
if (newValue != null) {
  final int value=Integer.parseInt(newValue);
  if (value == BatteryMeterDrawable.BATTERY_STYLE_TEXT) {
    mForceBatteryText=true;
  }
 else   if (value == BatteryMeterDrawable.BATTERY_STYLE_HIDDEN) {
    mForceBatteryText=false;
  }
 else {
    mForceBatteryText=null;
  }
}
break;
}
updateVisibilities();
}",0.4831038798498123
190889,"private void updateVisibilities(){
  if (mMultiUserSwitch.getParent() != this && !mKeyguardUserSwitcherShowing) {
    if (mMultiUserSwitch.getParent() != null) {
      getOverlay().remove(mMultiUserSwitch);
    }
    addView(mMultiUserSwitch,0);
  }
 else   if (mMultiUserSwitch.getParent() == this && mKeyguardUserSwitcherShowing) {
    removeView(mMultiUserSwitch);
  }
  if (mKeyguardUserSwitcher == null) {
    if (mUserSwitcherController != null && mUserSwitcherController.getSwitchableUserCount() > 1) {
      mMultiUserSwitch.setVisibility(View.VISIBLE);
    }
 else {
      mMultiUserSwitch.setVisibility(View.GONE);
    }
  }
  mBatteryLevel.setVisibility(mBatteryCharging || mShowBatteryText ? View.VISIBLE : View.GONE);
}","private void updateVisibilities(){
  if (mMultiUserSwitch.getParent() != this && !mKeyguardUserSwitcherShowing) {
    if (mMultiUserSwitch.getParent() != null) {
      getOverlay().remove(mMultiUserSwitch);
    }
    addView(mMultiUserSwitch,0);
  }
 else   if (mMultiUserSwitch.getParent() == this && mKeyguardUserSwitcherShowing) {
    removeView(mMultiUserSwitch);
  }
  if (mKeyguardUserSwitcher == null) {
    if (mUserSwitcherController != null && mUserSwitcherController.getSwitchableUserCount() > 1) {
      mMultiUserSwitch.setVisibility(View.VISIBLE);
    }
 else {
      mMultiUserSwitch.setVisibility(View.GONE);
    }
  }
  if (mForceBatteryText != null) {
    mBatteryLevel.setVisibility(mForceBatteryText ? View.VISIBLE : View.GONE);
  }
 else {
    mBatteryLevel.setVisibility(mBatteryCharging || mShowBatteryText ? View.VISIBLE : View.GONE);
  }
}",0.8859649122807017
190890,"IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){
  IBackupAgent agent=null;
synchronized (mAgentConnectLock) {
    mConnecting=true;
    mConnectedAgent=null;
    try {
      if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) {
        Slog.d(TAG,""String_Node_Str"" + app);
        long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL;
        while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) {
          try {
            mAgentConnectLock.wait(5000);
          }
 catch (          InterruptedException e) {
            Slog.w(TAG,""String_Node_Str"" + e);
            mActivityManager.clearPendingBackup();
            return null;
          }
        }
        if (mConnecting == true) {
          Slog.w(TAG,""String_Node_Str"" + app);
          mActivityManager.clearPendingBackup();
          return null;
        }
        if (DEBUG)         Slog.i(TAG,""String_Node_Str"" + mConnectedAgent);
        agent=mConnectedAgent;
      }
    }
 catch (    RemoteException e) {
    }
  }
  return agent;
}","IBackupAgent bindToAgentSynchronous(ApplicationInfo app,int mode){
  IBackupAgent agent=null;
synchronized (mAgentConnectLock) {
    mConnecting=true;
    mConnectedAgent=null;
    try {
      if (mActivityManager.bindBackupAgent(app.packageName,mode,UserHandle.USER_OWNER)) {
        Slog.d(TAG,""String_Node_Str"" + app);
        long timeoutMark=System.currentTimeMillis() + TIMEOUT_INTERVAL;
        while (mConnecting && mConnectedAgent == null && (System.currentTimeMillis() < timeoutMark)) {
          try {
            mAgentConnectLock.wait(5000);
          }
 catch (          InterruptedException e) {
            Slog.w(TAG,""String_Node_Str"" + e);
            mConnecting=false;
            mConnectedAgent=null;
          }
        }
        if (mConnecting == true) {
          Slog.w(TAG,""String_Node_Str"" + app);
          mConnectedAgent=null;
        }
        if (DEBUG)         Slog.i(TAG,""String_Node_Str"" + mConnectedAgent);
        agent=mConnectedAgent;
      }
    }
 catch (    RemoteException e) {
    }
  }
  if (agent == null) {
    try {
      mActivityManager.clearPendingBackup();
    }
 catch (    RemoteException e) {
    }
  }
  return agent;
}",0.8560140474100087
190891,"void computeShownFrameLocked(){
  final boolean selfTransformation=mHasLocalTransformation;
  Transformation attachedTransformation=(mAttachedWinAnimator != null && mAttachedWinAnimator.mHasLocalTransformation) ? mAttachedWinAnimator.mTransformation : null;
  Transformation appTransformation=(mAppAnimator != null && mAppAnimator.hasTransformation) ? mAppAnimator.transformation : null;
  final WindowState wallpaperTarget=mWallpaperControllerLocked.getWallpaperTarget();
  if (mIsWallpaper && wallpaperTarget != null && mService.mAnimateWallpaperWithTarget) {
    final WindowStateAnimator wallpaperAnimator=wallpaperTarget.mWinAnimator;
    if (wallpaperAnimator.mHasLocalTransformation && wallpaperAnimator.mAnimation != null && !wallpaperAnimator.mAnimation.getDetachWallpaper()) {
      attachedTransformation=wallpaperAnimator.mTransformation;
      if (DEBUG_WALLPAPER && attachedTransformation != null) {
        Slog.v(TAG,""String_Node_Str"" + attachedTransformation);
      }
    }
    final AppWindowAnimator wpAppAnimator=wallpaperTarget.mAppToken == null ? null : wallpaperTarget.mAppToken.mAppAnimator;
    if (wpAppAnimator != null && wpAppAnimator.hasTransformation && wpAppAnimator.animation != null && !wpAppAnimator.animation.getDetachWallpaper()) {
      appTransformation=wpAppAnimator.transformation;
      if (DEBUG_WALLPAPER && appTransformation != null) {
        Slog.v(TAG,""String_Node_Str"" + appTransformation);
      }
    }
  }
  final int displayId=mWin.getDisplayId();
  final ScreenRotationAnimation screenRotationAnimation=mAnimator.getScreenRotationAnimationLocked(displayId);
  final boolean screenAnimation=screenRotationAnimation != null && screenRotationAnimation.isAnimating();
  mHasClipRect=false;
  if (selfTransformation || attachedTransformation != null || appTransformation != null || screenAnimation) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    if (screenAnimation && screenRotationAnimation.isRotating()) {
      final float w=frame.width();
      final float h=frame.height();
      if (w >= 1 && h >= 1) {
        tmpMatrix.setScale(1 + 2 / w,1 + 2 / h,w / 2,h / 2);
      }
 else {
        tmpMatrix.reset();
      }
    }
 else {
      tmpMatrix.reset();
    }
    tmpMatrix.postScale(mWin.mGlobalScale,mWin.mGlobalScale);
    if (selfTransformation) {
      tmpMatrix.postConcat(mTransformation.getMatrix());
    }
    if (attachedTransformation != null) {
      tmpMatrix.postConcat(attachedTransformation.getMatrix());
    }
    if (appTransformation != null) {
      tmpMatrix.postConcat(appTransformation.getMatrix());
    }
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    if (screenAnimation) {
      tmpMatrix.postConcat(screenRotationAnimation.getEnterTransformation().getMatrix());
    }
    if (mService.mAccessibilityController != null && displayId == DEFAULT_DISPLAY) {
      MagnificationSpec spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(mWin);
      applyMagnificationSpec(spec,tmpMatrix);
    }
    mHaveMatrix=true;
    tmpMatrix.getValues(tmpFloats);
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    mWin.mShownPosition.set((int)x,(int)y);
    mShownAlpha=mAlpha;
    if (!mService.mLimitedAlphaCompositing || (!PixelFormat.formatHasAlpha(mWin.mAttrs.format) || (mWin.isIdentityMatrix(mDsDx,mDtDx,mDsDy,mDtDy) && x == frame.left && y == frame.top))) {
      if (selfTransformation) {
        mShownAlpha*=mTransformation.getAlpha();
      }
      if (attachedTransformation != null) {
        mShownAlpha*=attachedTransformation.getAlpha();
      }
      if (appTransformation != null) {
        mShownAlpha*=appTransformation.getAlpha();
        if (appTransformation.hasClipRect()) {
          mClipRect.set(appTransformation.getClipRect());
          mHasClipRect=true;
          if (mWin.layoutInParentFrame()) {
            mClipRect.offset((mWin.mContainingFrame.left - mWin.mFrame.left),mWin.mContainingFrame.top - mWin.mFrame.top);
          }
        }
      }
      if (screenAnimation) {
        mShownAlpha*=screenRotationAnimation.getEnterTransformation().getAlpha();
      }
    }
 else {
    }
    if ((DEBUG_SURFACE_TRACE || WindowManagerService.localLOGV) && (mShownAlpha == 1.0 || mShownAlpha == 0.0))     Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mAlpha+ ""String_Node_Str""+ (selfTransformation ? mTransformation.getAlpha() : ""String_Node_Str"")+ ""String_Node_Str""+ (attachedTransformation == null ? ""String_Node_Str"" : attachedTransformation.getAlpha())+ ""String_Node_Str""+ (appTransformation == null ? ""String_Node_Str"" : appTransformation.getAlpha())+ ""String_Node_Str""+ (screenAnimation ? screenRotationAnimation.getEnterTransformation().getAlpha() : ""String_Node_Str""));
    return;
  }
 else   if (mIsWallpaper && mService.mWindowPlacerLocked.mWallpaperActionPending) {
    return;
  }
 else   if (mWin.isDragResizeChanged()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mAlpha);
  MagnificationSpec spec=null;
  if (mService.mAccessibilityController != null && displayId == DEFAULT_DISPLAY) {
    spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(mWin);
  }
  if (spec != null) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    tmpMatrix.setScale(mWin.mGlobalScale,mWin.mGlobalScale);
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    applyMagnificationSpec(spec,tmpMatrix);
    tmpMatrix.getValues(tmpFloats);
    mHaveMatrix=true;
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    mWin.mShownPosition.set((int)x,(int)y);
    mShownAlpha=mAlpha;
  }
 else {
    mWin.mShownPosition.set(mWin.mFrame.left,mWin.mFrame.top);
    if (mWin.mXOffset != 0 || mWin.mYOffset != 0) {
      mWin.mShownPosition.offset(mWin.mXOffset,mWin.mYOffset);
    }
    mShownAlpha=mAlpha;
    mHaveMatrix=false;
    mDsDx=mWin.mGlobalScale;
    mDtDx=0;
    mDsDy=0;
    mDtDy=mWin.mGlobalScale;
  }
}","void computeShownFrameLocked(){
  final boolean selfTransformation=mHasLocalTransformation;
  Transformation attachedTransformation=(mAttachedWinAnimator != null && mAttachedWinAnimator.mHasLocalTransformation) ? mAttachedWinAnimator.mTransformation : null;
  Transformation appTransformation=(mAppAnimator != null && mAppAnimator.hasTransformation) ? mAppAnimator.transformation : null;
  final WindowState wallpaperTarget=mWallpaperControllerLocked.getWallpaperTarget();
  if (mIsWallpaper && wallpaperTarget != null && mService.mAnimateWallpaperWithTarget) {
    final WindowStateAnimator wallpaperAnimator=wallpaperTarget.mWinAnimator;
    if (wallpaperAnimator.mHasLocalTransformation && wallpaperAnimator.mAnimation != null && !wallpaperAnimator.mAnimation.getDetachWallpaper()) {
      attachedTransformation=wallpaperAnimator.mTransformation;
      if (DEBUG_WALLPAPER && attachedTransformation != null) {
        Slog.v(TAG,""String_Node_Str"" + attachedTransformation);
      }
    }
    final AppWindowAnimator wpAppAnimator=wallpaperTarget.mAppToken == null ? null : wallpaperTarget.mAppToken.mAppAnimator;
    if (wpAppAnimator != null && wpAppAnimator.hasTransformation && wpAppAnimator.animation != null && !wpAppAnimator.animation.getDetachWallpaper()) {
      appTransformation=wpAppAnimator.transformation;
      if (DEBUG_WALLPAPER && appTransformation != null) {
        Slog.v(TAG,""String_Node_Str"" + appTransformation);
      }
    }
  }
  final int displayId=mWin.getDisplayId();
  final ScreenRotationAnimation screenRotationAnimation=mAnimator.getScreenRotationAnimationLocked(displayId);
  final boolean screenAnimation=screenRotationAnimation != null && screenRotationAnimation.isAnimating();
  mHasClipRect=false;
  if (selfTransformation || attachedTransformation != null || appTransformation != null || screenAnimation) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    if (screenAnimation && screenRotationAnimation.isRotating()) {
      final float w=frame.width();
      final float h=frame.height();
      if (w >= 1 && h >= 1) {
        tmpMatrix.setScale(1 + 2 / w,1 + 2 / h,w / 2,h / 2);
      }
 else {
        tmpMatrix.reset();
      }
    }
 else {
      tmpMatrix.reset();
    }
    tmpMatrix.postScale(mWin.mGlobalScale,mWin.mGlobalScale);
    if (selfTransformation) {
      tmpMatrix.postConcat(mTransformation.getMatrix());
    }
    if (attachedTransformation != null) {
      tmpMatrix.postConcat(attachedTransformation.getMatrix());
    }
    if (appTransformation != null) {
      tmpMatrix.postConcat(appTransformation.getMatrix());
    }
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    if (screenAnimation) {
      tmpMatrix.postConcat(screenRotationAnimation.getEnterTransformation().getMatrix());
    }
    if (mService.mAccessibilityController != null && displayId == DEFAULT_DISPLAY) {
      MagnificationSpec spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(mWin);
      applyMagnificationSpec(spec,tmpMatrix);
    }
    mHaveMatrix=true;
    tmpMatrix.getValues(tmpFloats);
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    mWin.mShownPosition.set(Math.round(x),Math.round(y));
    mShownAlpha=mAlpha;
    if (!mService.mLimitedAlphaCompositing || (!PixelFormat.formatHasAlpha(mWin.mAttrs.format) || (mWin.isIdentityMatrix(mDsDx,mDtDx,mDsDy,mDtDy) && x == frame.left && y == frame.top))) {
      if (selfTransformation) {
        mShownAlpha*=mTransformation.getAlpha();
      }
      if (attachedTransformation != null) {
        mShownAlpha*=attachedTransformation.getAlpha();
      }
      if (appTransformation != null) {
        mShownAlpha*=appTransformation.getAlpha();
        if (appTransformation.hasClipRect()) {
          mClipRect.set(appTransformation.getClipRect());
          mHasClipRect=true;
          if (mWin.layoutInParentFrame()) {
            mClipRect.offset((mWin.mContainingFrame.left - mWin.mFrame.left),mWin.mContainingFrame.top - mWin.mFrame.top);
          }
        }
      }
      if (screenAnimation) {
        mShownAlpha*=screenRotationAnimation.getEnterTransformation().getAlpha();
      }
    }
 else {
    }
    if ((DEBUG_SURFACE_TRACE || WindowManagerService.localLOGV) && (mShownAlpha == 1.0 || mShownAlpha == 0.0))     Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mAlpha+ ""String_Node_Str""+ (selfTransformation ? mTransformation.getAlpha() : ""String_Node_Str"")+ ""String_Node_Str""+ (attachedTransformation == null ? ""String_Node_Str"" : attachedTransformation.getAlpha())+ ""String_Node_Str""+ (appTransformation == null ? ""String_Node_Str"" : appTransformation.getAlpha())+ ""String_Node_Str""+ (screenAnimation ? screenRotationAnimation.getEnterTransformation().getAlpha() : ""String_Node_Str""));
    return;
  }
 else   if (mIsWallpaper && mService.mWindowPlacerLocked.mWallpaperActionPending) {
    return;
  }
 else   if (mWin.isDragResizeChanged()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mAlpha);
  MagnificationSpec spec=null;
  if (mService.mAccessibilityController != null && displayId == DEFAULT_DISPLAY) {
    spec=mService.mAccessibilityController.getMagnificationSpecForWindowLocked(mWin);
  }
  if (spec != null) {
    final Rect frame=mWin.mFrame;
    final float tmpFloats[]=mService.mTmpFloats;
    final Matrix tmpMatrix=mWin.mTmpMatrix;
    tmpMatrix.setScale(mWin.mGlobalScale,mWin.mGlobalScale);
    tmpMatrix.postTranslate(frame.left + mWin.mXOffset,frame.top + mWin.mYOffset);
    applyMagnificationSpec(spec,tmpMatrix);
    tmpMatrix.getValues(tmpFloats);
    mHaveMatrix=true;
    mDsDx=tmpFloats[Matrix.MSCALE_X];
    mDtDx=tmpFloats[Matrix.MSKEW_Y];
    mDsDy=tmpFloats[Matrix.MSKEW_X];
    mDtDy=tmpFloats[Matrix.MSCALE_Y];
    float x=tmpFloats[Matrix.MTRANS_X];
    float y=tmpFloats[Matrix.MTRANS_Y];
    mWin.mShownPosition.set(Math.round(x),Math.round(y));
    mShownAlpha=mAlpha;
  }
 else {
    mWin.mShownPosition.set(mWin.mFrame.left,mWin.mFrame.top);
    if (mWin.mXOffset != 0 || mWin.mYOffset != 0) {
      mWin.mShownPosition.offset(mWin.mXOffset,mWin.mYOffset);
    }
    mShownAlpha=mAlpha;
    mHaveMatrix=false;
    mDsDx=mWin.mGlobalScale;
    mDtDx=0;
    mDsDy=0;
    mDtDy=mWin.mGlobalScale;
  }
}",0.994803606908146
190892,"private static void performEmergencyCall(Context context){
  Intent intent=new Intent(Intent.ACTION_CALL_EMERGENCY);
  intent.setData(getPhoneUri(context));
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(intent);
}","private static void performEmergencyCall(Context context){
  Intent intent=new Intent(Intent.ACTION_CALL_EMERGENCY);
  intent.setData(getPhoneUri(context));
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivityAsUser(intent,UserHandle.CURRENT);
}",0.9230769230769232
190893,"/** 
 * {@hide} 
 */
private int getPhoneTypeFromNetworkType(int phoneId){
  String mode=getTelephonyProperty(phoneId,""String_Node_Str"",null);
  if (mode != null) {
    return TelephonyManager.getPhoneType(Integer.parseInt(mode));
  }
  return TelephonyManager.PHONE_TYPE_NONE;
}","/** 
 * {@hide} 
 */
private int getPhoneTypeFromNetworkType(int phoneId){
  String mode=getTelephonyProperty(phoneId,""String_Node_Str"",null);
  if (mode != null && !mode.isEmpty()) {
    return TelephonyManager.getPhoneType(Integer.parseInt(mode));
  }
  return TelephonyManager.PHONE_TYPE_NONE;
}",0.9670710571923744
190894,"/** 
 * {@hide} 
 */
private int getPhoneTypeFromProperty(int phoneId){
  String type=getTelephonyProperty(phoneId,TelephonyProperties.CURRENT_ACTIVE_PHONE,null);
  if (type == null || type.equals(""String_Node_Str"")) {
    return getPhoneTypeFromNetworkType(phoneId);
  }
  return Integer.parseInt(type);
}","/** 
 * {@hide} 
 */
private int getPhoneTypeFromProperty(int phoneId){
  String type=getTelephonyProperty(phoneId,TelephonyProperties.CURRENT_ACTIVE_PHONE,null);
  if (type == null || type.isEmpty()) {
    return getPhoneTypeFromNetworkType(phoneId);
  }
  return Integer.parseInt(type);
}",0.9496644295302014
190895,"@Override public void onCreate(){
  super.onCreate();
  setTheme(R.style.systemui_theme);
  SystemUIFactory.createFromConfig(this);
  if (Process.myUserHandle().equals(UserHandle.SYSTEM)) {
    IntentFilter filter=new IntentFilter(Intent.ACTION_BOOT_COMPLETED);
    filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
    registerReceiver(new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        if (mBootCompleted)         return;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"");
        unregisterReceiver(this);
        mBootCompleted=true;
        if (mServicesStarted) {
          final int N=mServices.length;
          for (int i=0; i < N; i++) {
            mServices[i].onBootCompleted();
          }
        }
      }
    }
,filter);
  }
 else {
    startServicesIfNeeded(SERVICES_PER_USER);
  }
}","@Override public void onCreate(){
  super.onCreate();
  setTheme(R.style.systemui_theme);
  SystemUIFactory.createFromConfig(this);
  if (Process.myUserHandle().equals(UserHandle.SYSTEM)) {
    IntentFilter filter=new IntentFilter(Intent.ACTION_BOOT_COMPLETED);
    filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
    registerReceiver(new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        if (mBootCompleted)         return;
        if (DEBUG)         Log.v(TAG,""String_Node_Str"");
        unregisterReceiver(this);
        mBootCompleted=true;
        if (mServicesStarted) {
          final int N=mServices.length;
          for (int i=0; i < N; i++) {
            mServices[i].onBootCompleted();
          }
        }
      }
    }
,filter);
  }
 else {
    String processName=ActivityThread.currentProcessName();
    ApplicationInfo info=getApplicationInfo();
    if (processName != null && processName.startsWith(info.processName + ""String_Node_Str"")) {
      return;
    }
    startServicesIfNeeded(SERVICES_PER_USER);
  }
}",0.8875379939209727
190896,"private static void performEmergencyCall(Context context){
  Intent intent=new Intent(Intent.ACTION_CALL_EMERGENCY);
  intent.setData(getPhoneUri(context));
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(intent);
}","private static void performEmergencyCall(Context context){
  Intent intent=new Intent(Intent.ACTION_CALL_EMERGENCY);
  intent.setData(getPhoneUri(context));
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivityAsUser(intent,UserHandle.CURRENT);
}",0.9230769230769232
190897,"/** 
 * Filter extras to only basic types.
 * @hide
 */
public void removeUnsafeExtras(){
  if (mExtras != null) {
    mExtras.filterValues();
  }
}","/** 
 * Filter extras to only basic types.
 * @hide
 */
public void removeUnsafeExtras(){
  if (mExtras != null) {
    mExtras=mExtras.filterValues();
  }
}",0.9736842105263158
190898,"/** 
 * Filter values in Bundle to only basic types.
 * @hide
 */
public void filterValues(){
  unparcel();
  if (mMap != null) {
    for (int i=mMap.size() - 1; i >= 0; i--) {
      Object value=mMap.valueAt(i);
      if (PersistableBundle.isValidType(value)) {
        continue;
      }
      if (value instanceof Bundle) {
        ((Bundle)value).filterValues();
      }
      if (value.getClass().getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      mMap.removeAt(i);
    }
  }
  mFlags|=FLAG_HAS_FDS_KNOWN;
  mFlags&=~FLAG_HAS_FDS;
}","/** 
 * Filter values in Bundle to only basic types.
 * @hide
 */
public Bundle filterValues(){
  unparcel();
  Bundle bundle=this;
  if (mMap != null) {
    ArrayMap<String,Object> map=mMap;
    for (int i=map.size() - 1; i >= 0; i--) {
      Object value=map.valueAt(i);
      if (PersistableBundle.isValidType(value)) {
        continue;
      }
      if (value instanceof Bundle) {
        Bundle newBundle=((Bundle)value).filterValues();
        if (newBundle != value) {
          if (map == mMap) {
            bundle=new Bundle(this);
            map=bundle.mMap;
          }
          map.setValueAt(i,newBundle);
        }
        continue;
      }
      if (value.getClass().getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      if (map == mMap) {
        bundle=new Bundle(this);
        map=bundle.mMap;
      }
      map.removeAt(i);
    }
  }
  mFlags|=FLAG_HAS_FDS_KNOWN;
  mFlags&=~FLAG_HAS_FDS;
  return bundle;
}",0.6428571428571429
190899,"/** 
 * Filter extras to only basic types.
 * @hide
 */
public void removeUnsafeExtras(){
  if (mExtras != null) {
    mExtras.filterValues();
  }
}","/** 
 * Filter extras to only basic types.
 * @hide
 */
public void removeUnsafeExtras(){
  if (mExtras != null) {
    mExtras=mExtras.filterValues();
  }
}",0.9736842105263158
190900,"/** 
 * Filter values in Bundle to only basic types.
 * @hide
 */
public void filterValues(){
  unparcel();
  if (mMap != null) {
    for (int i=mMap.size() - 1; i >= 0; i--) {
      Object value=mMap.valueAt(i);
      if (PersistableBundle.isValidType(value)) {
        continue;
      }
      if (value instanceof Bundle) {
        ((Bundle)value).filterValues();
      }
      if (value.getClass().getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      mMap.removeAt(i);
    }
  }
  mFlags|=FLAG_HAS_FDS_KNOWN;
  mFlags&=~FLAG_HAS_FDS;
}","/** 
 * Filter values in Bundle to only basic types.
 * @hide
 */
public Bundle filterValues(){
  unparcel();
  Bundle bundle=this;
  if (mMap != null) {
    ArrayMap<String,Object> map=mMap;
    for (int i=map.size() - 1; i >= 0; i--) {
      Object value=map.valueAt(i);
      if (PersistableBundle.isValidType(value)) {
        continue;
      }
      if (value instanceof Bundle) {
        Bundle newBundle=((Bundle)value).filterValues();
        if (newBundle != value) {
          if (map == mMap) {
            bundle=new Bundle(this);
            map=bundle.mMap;
          }
          map.setValueAt(i,newBundle);
        }
        continue;
      }
      if (value.getClass().getName().startsWith(""String_Node_Str"")) {
        continue;
      }
      if (map == mMap) {
        bundle=new Bundle(this);
        map=bundle.mMap;
      }
      map.removeAt(i);
    }
  }
  mFlags|=FLAG_HAS_FDS_KNOWN;
  mFlags&=~FLAG_HAS_FDS;
  return bundle;
}",0.6428571428571429
190901,"@Override public int getMaxExpandHeight(ExpandableView view){
  int maxContentHeight=view.getMaxContentHeight();
  if (view.isSummaryWithChildren()) {
    mGroupExpandedForMeasure=true;
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    row.setForceUnlocked(true);
    mAmbientState.setLayoutHeight(mMaxLayoutHeight);
    mStackScrollAlgorithm.getStackScrollState(mAmbientState,mCurrentStackScrollState);
    mAmbientState.setLayoutHeight(getLayoutHeight());
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    mGroupExpandedForMeasure=false;
    row.setForceUnlocked(false);
    int height=mCurrentStackScrollState.getViewStateForView(view).height;
    return Math.min(height,maxContentHeight);
  }
  return maxContentHeight;
}","@Override public int getMaxExpandHeight(ExpandableView view){
  int maxContentHeight=view.getMaxContentHeight();
  if (view.isSummaryWithChildren() && view.getParent() == this) {
    mGroupExpandedForMeasure=true;
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    row.setForceUnlocked(true);
    mAmbientState.setLayoutHeight(mMaxLayoutHeight);
    mStackScrollAlgorithm.getStackScrollState(mAmbientState,mCurrentStackScrollState);
    mAmbientState.setLayoutHeight(getLayoutHeight());
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    mGroupExpandedForMeasure=false;
    row.setForceUnlocked(false);
    StackViewState viewState=mCurrentStackScrollState.getViewStateForView(view);
    if (viewState != null) {
      return Math.min(viewState.height,maxContentHeight);
    }
  }
  return maxContentHeight;
}",0.9322033898305084
190902,"private void updateEmergencyAffordanceNeeded(){
synchronized (mLock) {
    mEmergencyAffordanceNeeded=mSimNeedsEmergencyAffordance || mNetworkNeedsEmergencyAffordance;
    Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.EMERGENCY_AFFORDANCE_NEEDED,mEmergencyAffordanceNeeded ? 1 : 0);
    if (mEmergencyAffordanceNeeded) {
      stopScanning();
    }
  }
}","private void updateEmergencyAffordanceNeeded(){
synchronized (mLock) {
    mEmergencyAffordanceNeeded=mVoiceCapable && (mSimNeedsEmergencyAffordance || mNetworkNeedsEmergencyAffordance);
    Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.EMERGENCY_AFFORDANCE_NEEDED,mEmergencyAffordanceNeeded ? 1 : 0);
    if (mEmergencyAffordanceNeeded) {
      stopScanning();
    }
  }
}",0.9754204398447608
190903,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) {
    mTelephonyManager=mContext.getSystemService(TelephonyManager.class);
    mSubscriptionManager=SubscriptionManager.from(mContext);
    HandlerThread thread=new HandlerThread(TAG);
    thread.start();
    mHandler=new MyHandler(thread.getLooper());
    mHandler.obtainMessage(INITIALIZE_STATE).sendToTarget();
    startScanning();
    IntentFilter filter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    mContext.registerReceiver(mAirplaneModeReceiver,filter);
    mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionChangedListener);
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) {
    mTelephonyManager=mContext.getSystemService(TelephonyManager.class);
    mVoiceCapable=mTelephonyManager.isVoiceCapable();
    if (!mVoiceCapable) {
      updateEmergencyAffordanceNeeded();
      return;
    }
    mSubscriptionManager=SubscriptionManager.from(mContext);
    HandlerThread thread=new HandlerThread(TAG);
    thread.start();
    mHandler=new MyHandler(thread.getLooper());
    mHandler.obtainMessage(INITIALIZE_STATE).sendToTarget();
    startScanning();
    IntentFilter filter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    mContext.registerReceiver(mAirplaneModeReceiver,filter);
    mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionChangedListener);
  }
}",0.9041468388851122
190904,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190905,"@Override public int getMaxExpandHeight(ExpandableView view){
  int maxContentHeight=view.getMaxContentHeight();
  if (view.isSummaryWithChildren()) {
    mGroupExpandedForMeasure=true;
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    row.setForceUnlocked(true);
    mAmbientState.setLayoutHeight(mMaxLayoutHeight);
    mStackScrollAlgorithm.getStackScrollState(mAmbientState,mCurrentStackScrollState);
    mAmbientState.setLayoutHeight(getLayoutHeight());
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    mGroupExpandedForMeasure=false;
    row.setForceUnlocked(false);
    int height=mCurrentStackScrollState.getViewStateForView(view).height;
    return Math.min(height,maxContentHeight);
  }
  return maxContentHeight;
}","@Override public int getMaxExpandHeight(ExpandableView view){
  int maxContentHeight=view.getMaxContentHeight();
  if (view.isSummaryWithChildren() && view.getParent() == this) {
    mGroupExpandedForMeasure=true;
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    row.setForceUnlocked(true);
    mAmbientState.setLayoutHeight(mMaxLayoutHeight);
    mStackScrollAlgorithm.getStackScrollState(mAmbientState,mCurrentStackScrollState);
    mAmbientState.setLayoutHeight(getLayoutHeight());
    mGroupManager.toggleGroupExpansion(row.getStatusBarNotification());
    mGroupExpandedForMeasure=false;
    row.setForceUnlocked(false);
    StackViewState viewState=mCurrentStackScrollState.getViewStateForView(view);
    if (viewState != null) {
      return Math.min(viewState.height,maxContentHeight);
    }
  }
  return maxContentHeight;
}",0.9322033898305084
190906,"private void updateEmergencyAffordanceNeeded(){
synchronized (mLock) {
    mEmergencyAffordanceNeeded=mSimNeedsEmergencyAffordance || mNetworkNeedsEmergencyAffordance;
    Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.EMERGENCY_AFFORDANCE_NEEDED,mEmergencyAffordanceNeeded ? 1 : 0);
    if (mEmergencyAffordanceNeeded) {
      stopScanning();
    }
  }
}","private void updateEmergencyAffordanceNeeded(){
synchronized (mLock) {
    mEmergencyAffordanceNeeded=mVoiceCapable && (mSimNeedsEmergencyAffordance || mNetworkNeedsEmergencyAffordance);
    Settings.Global.putInt(mContext.getContentResolver(),Settings.Global.EMERGENCY_AFFORDANCE_NEEDED,mEmergencyAffordanceNeeded ? 1 : 0);
    if (mEmergencyAffordanceNeeded) {
      stopScanning();
    }
  }
}",0.9754204398447608
190907,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) {
    mTelephonyManager=mContext.getSystemService(TelephonyManager.class);
    mSubscriptionManager=SubscriptionManager.from(mContext);
    HandlerThread thread=new HandlerThread(TAG);
    thread.start();
    mHandler=new MyHandler(thread.getLooper());
    mHandler.obtainMessage(INITIALIZE_STATE).sendToTarget();
    startScanning();
    IntentFilter filter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    mContext.registerReceiver(mAirplaneModeReceiver,filter);
    mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionChangedListener);
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_THIRD_PARTY_APPS_CAN_START) {
    mTelephonyManager=mContext.getSystemService(TelephonyManager.class);
    mVoiceCapable=mTelephonyManager.isVoiceCapable();
    if (!mVoiceCapable) {
      updateEmergencyAffordanceNeeded();
      return;
    }
    mSubscriptionManager=SubscriptionManager.from(mContext);
    HandlerThread thread=new HandlerThread(TAG);
    thread.start();
    mHandler=new MyHandler(thread.getLooper());
    mHandler.obtainMessage(INITIALIZE_STATE).sendToTarget();
    startScanning();
    IntentFilter filter=new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
    mContext.registerReceiver(mAirplaneModeReceiver,filter);
    mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionChangedListener);
  }
}",0.9041468388851122
190908,"public void setBarState(int statusBarState,boolean keyguardFadingAway,boolean goingToFullShade){
  int oldState=mStatusBarState;
  boolean keyguardShowing=statusBarState == StatusBarState.KEYGUARD;
  setKeyguardStatusViewVisibility(statusBarState,keyguardFadingAway,goingToFullShade);
  setKeyguardBottomAreaVisibility(statusBarState,goingToFullShade);
  mStatusBarState=statusBarState;
  mKeyguardShowing=keyguardShowing;
  mQsContainer.setKeyguardShowing(mKeyguardShowing);
  if (goingToFullShade || (oldState == StatusBarState.KEYGUARD && statusBarState == StatusBarState.SHADE_LOCKED)) {
    animateKeyguardStatusBarOut();
    long delay=mStatusBarState == StatusBarState.SHADE_LOCKED ? 0 : mStatusBar.calculateGoingToFullShadeDelay();
    mQsContainer.animateHeaderSlidingIn(delay);
  }
 else   if (oldState == StatusBarState.SHADE_LOCKED && statusBarState == StatusBarState.KEYGUARD) {
    animateKeyguardStatusBarIn(StackStateAnimator.ANIMATION_DURATION_STANDARD);
    mQsContainer.animateHeaderSlidingOut();
  }
 else {
    mKeyguardStatusBar.setAlpha(1f);
    mKeyguardStatusBar.setVisibility(keyguardShowing ? View.VISIBLE : View.INVISIBLE);
    if (keyguardShowing && oldState != mStatusBarState) {
      mKeyguardBottomArea.onKeyguardShowingChanged();
    }
  }
  if (keyguardShowing) {
    updateDozingVisibilities(false);
  }
  resetVerticalPanelPosition();
  updateQsState();
}","public void setBarState(int statusBarState,boolean keyguardFadingAway,boolean goingToFullShade){
  int oldState=mStatusBarState;
  boolean keyguardShowing=statusBarState == StatusBarState.KEYGUARD;
  setKeyguardStatusViewVisibility(statusBarState,keyguardFadingAway,goingToFullShade);
  setKeyguardBottomAreaVisibility(statusBarState,goingToFullShade);
  mStatusBarState=statusBarState;
  mKeyguardShowing=keyguardShowing;
  mQsContainer.setKeyguardShowing(mKeyguardShowing);
  if (oldState == StatusBarState.KEYGUARD && (goingToFullShade || statusBarState == StatusBarState.SHADE_LOCKED)) {
    animateKeyguardStatusBarOut();
    long delay=mStatusBarState == StatusBarState.SHADE_LOCKED ? 0 : mStatusBar.calculateGoingToFullShadeDelay();
    mQsContainer.animateHeaderSlidingIn(delay);
  }
 else   if (oldState == StatusBarState.SHADE_LOCKED && statusBarState == StatusBarState.KEYGUARD) {
    animateKeyguardStatusBarIn(StackStateAnimator.ANIMATION_DURATION_STANDARD);
    mQsContainer.animateHeaderSlidingOut();
  }
 else {
    mKeyguardStatusBar.setAlpha(1f);
    mKeyguardStatusBar.setVisibility(keyguardShowing ? View.VISIBLE : View.INVISIBLE);
    if (keyguardShowing && oldState != mStatusBarState) {
      mKeyguardBottomArea.onKeyguardShowingChanged();
      mQsContainer.hideImmediately();
    }
  }
  if (keyguardShowing) {
    updateDozingVisibilities(false);
  }
  resetVerticalPanelPosition();
  updateQsState();
}",0.9716513111268604
190909,"/** 
 * Update the background bounds to the new desired bounds
 */
private void updateBackgroundBounds(){
  mBackgroundBounds.left=(int)getX();
  mBackgroundBounds.right=(int)(getX() + getWidth());
  if (!mIsExpanded) {
    mBackgroundBounds.top=0;
    mBackgroundBounds.bottom=0;
  }
  ActivatableNotificationView firstView=mFirstVisibleBackgroundChild;
  int top=0;
  if (firstView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(firstView);
    if (mAnimateNextBackgroundTop || mTopAnimator == null && mCurrentBounds.top == finalTranslationY || mTopAnimator != null && mEndAnimationRect.top == finalTranslationY) {
      top=finalTranslationY;
    }
 else {
      top=(int)firstView.getTranslationY();
    }
  }
  ActivatableNotificationView lastView=mLastVisibleBackgroundChild;
  int bottom=0;
  if (lastView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(lastView);
    int finalHeight=StackStateAnimator.getFinalActualHeight(lastView);
    int finalBottom=finalTranslationY + finalHeight;
    finalBottom=Math.min(finalBottom,getHeight());
    if (mAnimateNextBackgroundBottom || mBottomAnimator == null && mCurrentBounds.bottom == finalBottom || mBottomAnimator != null && mEndAnimationRect.bottom == finalBottom) {
      bottom=finalBottom;
    }
 else {
      bottom=(int)(lastView.getTranslationY() + lastView.getActualHeight());
      bottom=Math.min(bottom,getHeight());
    }
  }
 else {
    top=mTopPadding;
    bottom=top;
  }
  if (mPhoneStatusBar.getBarState() != StatusBarState.KEYGUARD) {
    top=(int)Math.max(mTopPadding + mStackTranslation,top);
  }
 else {
    top=Math.max(0,top);
  }
  mBackgroundBounds.top=top;
  mBackgroundBounds.bottom=Math.min(getHeight(),Math.max(bottom,top));
}","/** 
 * Update the background bounds to the new desired bounds
 */
private void updateBackgroundBounds(){
  mBackgroundBounds.left=(int)getX();
  mBackgroundBounds.right=(int)(getX() + getWidth());
  if (!mIsExpanded) {
    mBackgroundBounds.top=0;
    mBackgroundBounds.bottom=0;
    return;
  }
  ActivatableNotificationView firstView=mFirstVisibleBackgroundChild;
  int top=0;
  if (firstView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(firstView);
    if (mAnimateNextBackgroundTop || mTopAnimator == null && mCurrentBounds.top == finalTranslationY || mTopAnimator != null && mEndAnimationRect.top == finalTranslationY) {
      top=finalTranslationY;
    }
 else {
      top=(int)firstView.getTranslationY();
    }
  }
  ActivatableNotificationView lastView=mLastVisibleBackgroundChild;
  int bottom=0;
  if (lastView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(lastView);
    int finalHeight=StackStateAnimator.getFinalActualHeight(lastView);
    int finalBottom=finalTranslationY + finalHeight;
    finalBottom=Math.min(finalBottom,getHeight());
    if (mAnimateNextBackgroundBottom || mBottomAnimator == null && mCurrentBounds.bottom == finalBottom || mBottomAnimator != null && mEndAnimationRect.bottom == finalBottom) {
      bottom=finalBottom;
    }
 else {
      bottom=(int)(lastView.getTranslationY() + lastView.getActualHeight());
      bottom=Math.min(bottom,getHeight());
    }
  }
 else {
    top=mTopPadding;
    bottom=top;
  }
  if (mPhoneStatusBar.getBarState() != StatusBarState.KEYGUARD) {
    top=(int)Math.max(mTopPadding + mStackTranslation,top);
  }
 else {
    top=Math.max(0,top);
  }
  mBackgroundBounds.top=top;
  mBackgroundBounds.bottom=Math.min(getHeight(),Math.max(bottom,top));
}",0.9966405375139976
190910,"/** 
 * Update the background bounds to the new desired bounds
 */
private void updateBackgroundBounds(){
  mBackgroundBounds.left=(int)getX();
  mBackgroundBounds.right=(int)(getX() + getWidth());
  if (!mIsExpanded) {
    mBackgroundBounds.top=0;
    mBackgroundBounds.bottom=0;
  }
  ActivatableNotificationView firstView=mFirstVisibleBackgroundChild;
  int top=0;
  if (firstView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(firstView);
    if (mAnimateNextBackgroundTop || mTopAnimator == null && mCurrentBounds.top == finalTranslationY || mTopAnimator != null && mEndAnimationRect.top == finalTranslationY) {
      top=finalTranslationY;
    }
 else {
      top=(int)firstView.getTranslationY();
    }
  }
  ActivatableNotificationView lastView=mLastVisibleBackgroundChild;
  int bottom=0;
  if (lastView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(lastView);
    int finalHeight=StackStateAnimator.getFinalActualHeight(lastView);
    int finalBottom=finalTranslationY + finalHeight;
    finalBottom=Math.min(finalBottom,getHeight());
    if (mAnimateNextBackgroundBottom || mBottomAnimator == null && mCurrentBounds.bottom == finalBottom || mBottomAnimator != null && mEndAnimationRect.bottom == finalBottom) {
      bottom=finalBottom;
    }
 else {
      bottom=(int)(lastView.getTranslationY() + lastView.getActualHeight());
      bottom=Math.min(bottom,getHeight());
    }
  }
 else {
    top=mTopPadding;
    bottom=top;
  }
  if (mPhoneStatusBar.getBarState() != StatusBarState.KEYGUARD) {
    top=(int)Math.max(mTopPadding + mStackTranslation,top);
  }
 else {
    top=Math.max(0,top);
  }
  mBackgroundBounds.top=top;
  mBackgroundBounds.bottom=Math.min(getHeight(),Math.max(bottom,top));
}","/** 
 * Update the background bounds to the new desired bounds
 */
private void updateBackgroundBounds(){
  mBackgroundBounds.left=(int)getX();
  mBackgroundBounds.right=(int)(getX() + getWidth());
  if (!mIsExpanded) {
    mBackgroundBounds.top=0;
    mBackgroundBounds.bottom=0;
    return;
  }
  ActivatableNotificationView firstView=mFirstVisibleBackgroundChild;
  int top=0;
  if (firstView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(firstView);
    if (mAnimateNextBackgroundTop || mTopAnimator == null && mCurrentBounds.top == finalTranslationY || mTopAnimator != null && mEndAnimationRect.top == finalTranslationY) {
      top=finalTranslationY;
    }
 else {
      top=(int)firstView.getTranslationY();
    }
  }
  ActivatableNotificationView lastView=mLastVisibleBackgroundChild;
  int bottom=0;
  if (lastView != null) {
    int finalTranslationY=(int)StackStateAnimator.getFinalTranslationY(lastView);
    int finalHeight=StackStateAnimator.getFinalActualHeight(lastView);
    int finalBottom=finalTranslationY + finalHeight;
    finalBottom=Math.min(finalBottom,getHeight());
    if (mAnimateNextBackgroundBottom || mBottomAnimator == null && mCurrentBounds.bottom == finalBottom || mBottomAnimator != null && mEndAnimationRect.bottom == finalBottom) {
      bottom=finalBottom;
    }
 else {
      bottom=(int)(lastView.getTranslationY() + lastView.getActualHeight());
      bottom=Math.min(bottom,getHeight());
    }
  }
 else {
    top=mTopPadding;
    bottom=top;
  }
  if (mPhoneStatusBar.getBarState() != StatusBarState.KEYGUARD) {
    top=(int)Math.max(mTopPadding + mStackTranslation,top);
  }
 else {
    top=Math.max(0,top);
  }
  mBackgroundBounds.top=top;
  mBackgroundBounds.bottom=Math.min(getHeight(),Math.max(bottom,top));
}",0.9966405375139976
190911,"public void setBarState(int statusBarState,boolean keyguardFadingAway,boolean goingToFullShade){
  int oldState=mStatusBarState;
  boolean keyguardShowing=statusBarState == StatusBarState.KEYGUARD;
  setKeyguardStatusViewVisibility(statusBarState,keyguardFadingAway,goingToFullShade);
  setKeyguardBottomAreaVisibility(statusBarState,goingToFullShade);
  mStatusBarState=statusBarState;
  mKeyguardShowing=keyguardShowing;
  mQsContainer.setKeyguardShowing(mKeyguardShowing);
  if (goingToFullShade || (oldState == StatusBarState.KEYGUARD && statusBarState == StatusBarState.SHADE_LOCKED)) {
    animateKeyguardStatusBarOut();
    long delay=mStatusBarState == StatusBarState.SHADE_LOCKED ? 0 : mStatusBar.calculateGoingToFullShadeDelay();
    mQsContainer.animateHeaderSlidingIn(delay);
  }
 else   if (oldState == StatusBarState.SHADE_LOCKED && statusBarState == StatusBarState.KEYGUARD) {
    animateKeyguardStatusBarIn(StackStateAnimator.ANIMATION_DURATION_STANDARD);
    mQsContainer.animateHeaderSlidingOut();
  }
 else {
    mKeyguardStatusBar.setAlpha(1f);
    mKeyguardStatusBar.setVisibility(keyguardShowing ? View.VISIBLE : View.INVISIBLE);
    if (keyguardShowing && oldState != mStatusBarState) {
      mKeyguardBottomArea.onKeyguardShowingChanged();
    }
  }
  if (keyguardShowing) {
    updateDozingVisibilities(false);
  }
  resetVerticalPanelPosition();
  updateQsState();
}","public void setBarState(int statusBarState,boolean keyguardFadingAway,boolean goingToFullShade){
  int oldState=mStatusBarState;
  boolean keyguardShowing=statusBarState == StatusBarState.KEYGUARD;
  setKeyguardStatusViewVisibility(statusBarState,keyguardFadingAway,goingToFullShade);
  setKeyguardBottomAreaVisibility(statusBarState,goingToFullShade);
  mStatusBarState=statusBarState;
  mKeyguardShowing=keyguardShowing;
  mQsContainer.setKeyguardShowing(mKeyguardShowing);
  if (oldState == StatusBarState.KEYGUARD && (goingToFullShade || statusBarState == StatusBarState.SHADE_LOCKED)) {
    animateKeyguardStatusBarOut();
    long delay=mStatusBarState == StatusBarState.SHADE_LOCKED ? 0 : mStatusBar.calculateGoingToFullShadeDelay();
    mQsContainer.animateHeaderSlidingIn(delay);
  }
 else   if (oldState == StatusBarState.SHADE_LOCKED && statusBarState == StatusBarState.KEYGUARD) {
    animateKeyguardStatusBarIn(StackStateAnimator.ANIMATION_DURATION_STANDARD);
    mQsContainer.animateHeaderSlidingOut();
  }
 else {
    mKeyguardStatusBar.setAlpha(1f);
    mKeyguardStatusBar.setVisibility(keyguardShowing ? View.VISIBLE : View.INVISIBLE);
    if (keyguardShowing && oldState != mStatusBarState) {
      mKeyguardBottomArea.onKeyguardShowingChanged();
      mQsContainer.hideImmediately();
    }
  }
  if (keyguardShowing) {
    updateDozingVisibilities(false);
  }
  resetVerticalPanelPosition();
  updateQsState();
}",0.9716513111268604
190912,"public void readSummaryFromParcel(Parcel in) throws ParcelFormatException {
  final int version=in.readInt();
  if (version != VERSION) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
    return;
  }
  readHistory(in,true);
  mStartCount=in.readInt();
  mUptime=in.readLong();
  mRealtime=in.readLong();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mOnBatteryTimeBase.readSummaryFromParcel(in);
  mOnBatteryScreenOffTimeBase.readSummaryFromParcel(in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mEstimatedBatteryCapacity=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mDailyDischargeStepTracker.readFromParcel(in);
  mDailyChargeStepTracker.readFromParcel(in);
  mDischargeCounter.readSummaryFromParcelLocked(in);
  mDischargeScreenOffCounter.readSummaryFromParcelLocked(in);
  int NPKG=in.readInt();
  if (NPKG > 0) {
    mDailyPackageChanges=new ArrayList<>(NPKG);
    while (NPKG > 0) {
      NPKG--;
      PackageChange pc=new PackageChange();
      pc.mPackageName=in.readString();
      pc.mUpdate=in.readInt() != 0;
      pc.mVersionCode=in.readInt();
      mDailyPackageChanges.add(pc);
    }
  }
 else {
    mDailyPackageChanges=null;
  }
  mDailyStartTime=in.readLong();
  mNextMinDailyDeadline=in.readLong();
  mNextMaxDailyDeadline=in.readLong();
  mStartCount++;
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].readSummaryFromParcelLocked(in);
  }
  mInteractive=false;
  mInteractiveTimer.readSummaryFromParcelLocked(in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer.readSummaryFromParcelLocked(in);
  mLongestLightIdleTime=in.readLong();
  mLongestFullIdleTime=in.readLong();
  mDeviceIdleModeLightTimer.readSummaryFromParcelLocked(in);
  mDeviceIdleModeFullTimer.readSummaryFromParcelLocked(in);
  mDeviceLightIdlingTimer.readSummaryFromParcelLocked(in);
  mDeviceIdlingTimer.readSummaryFromParcelLocked(in);
  mPhoneOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mPhoneSignalScanningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
    mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActivePerAppTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActiveAdjustedTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownCount.readSummaryFromParcelLocked(in);
  mWifiRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mWifiOn=false;
  mWifiOnTimer.readSummaryFromParcelLocked(in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mWifiActivity.readSummaryFromParcel(in);
  mBluetoothActivity.readSummaryFromParcel(in);
  mModemActivity.readSummaryFromParcel(in);
  mHasWifiReporting=in.readInt() != 0;
  mHasBluetoothReporting=in.readInt() != 0;
  mHasModemReporting=in.readInt() != 0;
  mNumConnectivityChange=mLoadedNumConnectivityChange=in.readInt();
  mFlashlightOnNesting=0;
  mFlashlightOnTimer.readSummaryFromParcelLocked(in);
  mCameraOnNesting=0;
  mCameraOnTimer.readSummaryFromParcelLocked(in);
  mBluetoothScanNesting=0;
  mBluetoothScanTimer.readSummaryFromParcelLocked(in);
  int NKW=in.readInt();
  if (NKW > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NKW);
  }
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String kwltName=in.readString();
      getKernelWakelockTimerLocked(kwltName).readSummaryFromParcelLocked(in);
    }
  }
  int NWR=in.readInt();
  if (NWR > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NWR);
  }
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      getWakeupReasonTimerLocked(reasonName).readSummaryFromParcelLocked(in);
    }
  }
  final int NU=in.readInt();
  if (NU > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NU);
  }
  for (int iu=0; iu < NU; iu++) {
    int uid=in.readInt();
    Uid u=new Uid(this,uid);
    mUidStats.put(uid,u);
    u.mWifiRunning=false;
    if (in.readInt() != 0) {
      u.mWifiRunningTimer.readSummaryFromParcelLocked(in);
    }
    u.mFullWifiLockOut=false;
    if (in.readInt() != 0) {
      u.mFullWifiLockTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiScanStarted=false;
    if (in.readInt() != 0) {
      u.mWifiScanTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiBatchedScanBinStarted=Uid.NO_BATCHED_SCAN_STARTED;
    for (int i=0; i < Uid.NUM_WIFI_BATCHED_SCAN_BINS; i++) {
      if (in.readInt() != 0) {
        u.makeWifiBatchedScanBin(i,null);
        u.mWifiBatchedScanTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    u.mWifiMulticastEnabled=false;
    if (in.readInt() != 0) {
      u.mWifiMulticastTimer.readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createAudioTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createVideoTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createFlashlightTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createCameraTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createForegroundActivityTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createBluetoothScanTimerLocked().readSummaryFromParcelLocked(in);
    }
    u.mProcessState=ActivityManager.PROCESS_STATE_NONEXISTENT;
    for (int i=0; i < Uid.NUM_PROCESS_STATE; i++) {
      if (in.readInt() != 0) {
        u.makeProcessState(i,null);
        u.mProcessStateTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      u.createVibratorOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      if (u.mUserActivityCounters == null) {
        u.initUserActivityLocked();
      }
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        u.mUserActivityCounters[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      if (u.mNetworkByteActivityCounters == null) {
        u.initNetworkActivityLocked();
      }
      for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
        u.mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
        u.mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
      }
      u.mMobileRadioActiveTime.readSummaryFromParcelLocked(in);
      u.mMobileRadioActiveCount.readSummaryFromParcelLocked(in);
    }
    u.mUserCpuTime.readSummaryFromParcelLocked(in);
    u.mSystemCpuTime.readSummaryFromParcelLocked(in);
    u.mCpuPower.readSummaryFromParcelLocked(in);
    if (in.readInt() != 0) {
      final int numClusters=in.readInt();
      if (mPowerProfile != null && mPowerProfile.getNumCpuClusters() != numClusters) {
        throw new ParcelFormatException(""String_Node_Str"");
      }
      u.mCpuClusterSpeed=new LongSamplingCounter[numClusters][];
      for (int cluster=0; cluster < numClusters; cluster++) {
        if (in.readInt() != 0) {
          final int NSB=in.readInt();
          if (mPowerProfile != null && mPowerProfile.getNumSpeedStepsInCpuCluster(cluster) != NSB) {
            throw new ParcelFormatException(""String_Node_Str"" + NSB);
          }
          u.mCpuClusterSpeed[cluster]=new LongSamplingCounter[NSB];
          for (int speed=0; speed < NSB; speed++) {
            if (in.readInt() != 0) {
              u.mCpuClusterSpeed[cluster][speed]=new LongSamplingCounter(mOnBatteryTimeBase);
              u.mCpuClusterSpeed[cluster][speed].readSummaryFromParcelLocked(in);
            }
          }
        }
 else {
          u.mCpuClusterSpeed[cluster]=null;
        }
      }
    }
 else {
      u.mCpuClusterSpeed=null;
    }
    if (in.readInt() != 0) {
      u.mMobileRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mMobileRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mMobileRadioApWakeupCount=null;
    }
    if (in.readInt() != 0) {
      u.mWifiRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mWifiRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mWifiRadioApWakeupCount=null;
    }
    int NW=in.readInt();
    if (NW > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NW);
    }
    for (int iw=0; iw < NW; iw++) {
      String wlName=in.readString();
      u.readWakeSummaryFromParcelLocked(wlName,in);
    }
    int NS=in.readInt();
    if (NS > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NS);
    }
    for (int is=0; is < NS; is++) {
      String name=in.readString();
      u.readSyncSummaryFromParcelLocked(name,in);
    }
    int NJ=in.readInt();
    if (NJ > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NJ);
    }
    for (int ij=0; ij < NJ; ij++) {
      String name=in.readString();
      u.readJobSummaryFromParcelLocked(name,in);
    }
    int NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int is=0; is < NP; is++) {
      int seNumber=in.readInt();
      if (in.readInt() != 0) {
        u.getSensorTimerLocked(seNumber,true).readSummaryFromParcelLocked(in);
      }
    }
    NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String procName=in.readString();
      Uid.Proc p=u.getProcessStatsLocked(procName);
      p.mUserTime=p.mLoadedUserTime=in.readLong();
      p.mSystemTime=p.mLoadedSystemTime=in.readLong();
      p.mForegroundTime=p.mLoadedForegroundTime=in.readLong();
      p.mStarts=p.mLoadedStarts=in.readInt();
      p.mNumCrashes=p.mLoadedNumCrashes=in.readInt();
      p.mNumAnrs=p.mLoadedNumAnrs=in.readInt();
      p.readExcessivePowerFromParcelLocked(in);
    }
    NP=in.readInt();
    if (NP > 10000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String pkgName=in.readString();
      Uid.Pkg p=u.getPackageStatsLocked(pkgName);
      final int NWA=in.readInt();
      if (NWA > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NWA);
      }
      p.mWakeupAlarms.clear();
      for (int iwa=0; iwa < NWA; iwa++) {
        String tag=in.readString();
        Counter c=new Counter(mOnBatteryTimeBase);
        c.readSummaryFromParcelLocked(in);
        p.mWakeupAlarms.put(tag,c);
      }
      NS=in.readInt();
      if (NS > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NS);
      }
      for (int is=0; is < NS; is++) {
        String servName=in.readString();
        Uid.Pkg.Serv s=u.getServiceStatsLocked(pkgName,servName);
        s.mStartTime=s.mLoadedStartTime=in.readLong();
        s.mStarts=s.mLoadedStarts=in.readInt();
        s.mLaunches=s.mLoadedLaunches=in.readInt();
      }
    }
  }
}","public void readSummaryFromParcel(Parcel in) throws ParcelFormatException {
  final int version=in.readInt();
  if (version != VERSION) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
    return;
  }
  readHistory(in,true);
  mStartCount=in.readInt();
  mUptime=in.readLong();
  mRealtime=in.readLong();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mOnBatteryTimeBase.readSummaryFromParcel(in);
  mOnBatteryScreenOffTimeBase.readSummaryFromParcel(in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mEstimatedBatteryCapacity=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mDailyDischargeStepTracker.readFromParcel(in);
  mDailyChargeStepTracker.readFromParcel(in);
  mDischargeCounter.readSummaryFromParcelLocked(in);
  mDischargeScreenOffCounter.readSummaryFromParcelLocked(in);
  int NPKG=in.readInt();
  if (NPKG > 0) {
    mDailyPackageChanges=new ArrayList<>(NPKG);
    while (NPKG > 0) {
      NPKG--;
      PackageChange pc=new PackageChange();
      pc.mPackageName=in.readString();
      pc.mUpdate=in.readInt() != 0;
      pc.mVersionCode=in.readInt();
      mDailyPackageChanges.add(pc);
    }
  }
 else {
    mDailyPackageChanges=null;
  }
  mDailyStartTime=in.readLong();
  mNextMinDailyDeadline=in.readLong();
  mNextMaxDailyDeadline=in.readLong();
  mStartCount++;
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].readSummaryFromParcelLocked(in);
  }
  mInteractive=false;
  mInteractiveTimer.readSummaryFromParcelLocked(in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer.readSummaryFromParcelLocked(in);
  mLongestLightIdleTime=in.readLong();
  mLongestFullIdleTime=in.readLong();
  mDeviceIdleModeLightTimer.readSummaryFromParcelLocked(in);
  mDeviceIdleModeFullTimer.readSummaryFromParcelLocked(in);
  mDeviceLightIdlingTimer.readSummaryFromParcelLocked(in);
  mDeviceIdlingTimer.readSummaryFromParcelLocked(in);
  mPhoneOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mPhoneSignalScanningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
    mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActivePerAppTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActiveAdjustedTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownCount.readSummaryFromParcelLocked(in);
  mWifiRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mWifiOn=false;
  mWifiOnTimer.readSummaryFromParcelLocked(in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mWifiActivity.readSummaryFromParcel(in);
  mBluetoothActivity.readSummaryFromParcel(in);
  mModemActivity.readSummaryFromParcel(in);
  mHasWifiReporting=in.readInt() != 0;
  mHasBluetoothReporting=in.readInt() != 0;
  mHasModemReporting=in.readInt() != 0;
  mNumConnectivityChange=mLoadedNumConnectivityChange=in.readInt();
  mFlashlightOnNesting=0;
  mFlashlightOnTimer.readSummaryFromParcelLocked(in);
  mCameraOnNesting=0;
  mCameraOnTimer.readSummaryFromParcelLocked(in);
  mBluetoothScanNesting=0;
  mBluetoothScanTimer.readSummaryFromParcelLocked(in);
  int NKW=in.readInt();
  if (NKW > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NKW);
  }
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String kwltName=in.readString();
      getKernelWakelockTimerLocked(kwltName).readSummaryFromParcelLocked(in);
    }
  }
  int NWR=in.readInt();
  if (NWR > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NWR);
  }
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      getWakeupReasonTimerLocked(reasonName).readSummaryFromParcelLocked(in);
    }
  }
  final int NU=in.readInt();
  if (NU > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NU);
  }
  for (int iu=0; iu < NU; iu++) {
    int uid=in.readInt();
    Uid u=new Uid(this,uid);
    mUidStats.put(uid,u);
    u.mWifiRunning=false;
    if (in.readInt() != 0) {
      u.mWifiRunningTimer.readSummaryFromParcelLocked(in);
    }
    u.mFullWifiLockOut=false;
    if (in.readInt() != 0) {
      u.mFullWifiLockTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiScanStarted=false;
    if (in.readInt() != 0) {
      u.mWifiScanTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiBatchedScanBinStarted=Uid.NO_BATCHED_SCAN_STARTED;
    for (int i=0; i < Uid.NUM_WIFI_BATCHED_SCAN_BINS; i++) {
      if (in.readInt() != 0) {
        u.makeWifiBatchedScanBin(i,null);
        u.mWifiBatchedScanTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    u.mWifiMulticastEnabled=false;
    if (in.readInt() != 0) {
      u.mWifiMulticastTimer.readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createAudioTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createVideoTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createFlashlightTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createCameraTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createForegroundActivityTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createBluetoothScanTimerLocked().readSummaryFromParcelLocked(in);
    }
    u.mProcessState=ActivityManager.PROCESS_STATE_NONEXISTENT;
    for (int i=0; i < Uid.NUM_PROCESS_STATE; i++) {
      if (in.readInt() != 0) {
        u.makeProcessState(i,null);
        u.mProcessStateTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      u.createVibratorOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      if (u.mUserActivityCounters == null) {
        u.initUserActivityLocked();
      }
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        u.mUserActivityCounters[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      if (u.mNetworkByteActivityCounters == null) {
        u.initNetworkActivityLocked();
      }
      for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
        u.mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
        u.mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
      }
      u.mMobileRadioActiveTime.readSummaryFromParcelLocked(in);
      u.mMobileRadioActiveCount.readSummaryFromParcelLocked(in);
    }
    u.mUserCpuTime.readSummaryFromParcelLocked(in);
    u.mSystemCpuTime.readSummaryFromParcelLocked(in);
    u.mCpuPower.readSummaryFromParcelLocked(in);
    if (in.readInt() != 0) {
      final int numClusters=in.readInt();
      if (mPowerProfile != null && mPowerProfile.getNumCpuClusters() != numClusters) {
        throw new ParcelFormatException(""String_Node_Str"");
      }
      u.mCpuClusterSpeed=new LongSamplingCounter[numClusters][];
      for (int cluster=0; cluster < numClusters; cluster++) {
        if (in.readInt() != 0) {
          final int NSB=in.readInt();
          if (mPowerProfile != null && mPowerProfile.getNumSpeedStepsInCpuCluster(cluster) != NSB) {
            throw new ParcelFormatException(""String_Node_Str"" + NSB);
          }
          u.mCpuClusterSpeed[cluster]=new LongSamplingCounter[NSB];
          for (int speed=0; speed < NSB; speed++) {
            if (in.readInt() != 0) {
              u.mCpuClusterSpeed[cluster][speed]=new LongSamplingCounter(mOnBatteryTimeBase);
              u.mCpuClusterSpeed[cluster][speed].readSummaryFromParcelLocked(in);
            }
          }
        }
 else {
          u.mCpuClusterSpeed[cluster]=null;
        }
      }
    }
 else {
      u.mCpuClusterSpeed=null;
    }
    if (in.readInt() != 0) {
      u.mMobileRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mMobileRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mMobileRadioApWakeupCount=null;
    }
    if (in.readInt() != 0) {
      u.mWifiRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mWifiRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mWifiRadioApWakeupCount=null;
    }
    int NW=in.readInt();
    if (NW > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NW);
    }
    for (int iw=0; iw < NW; iw++) {
      String wlName=in.readString();
      u.readWakeSummaryFromParcelLocked(wlName,in);
    }
    int NS=in.readInt();
    if (NS > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NS);
    }
    for (int is=0; is < NS; is++) {
      String name=in.readString();
      u.readSyncSummaryFromParcelLocked(name,in);
    }
    int NJ=in.readInt();
    if (NJ > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NJ);
    }
    for (int ij=0; ij < NJ; ij++) {
      String name=in.readString();
      u.readJobSummaryFromParcelLocked(name,in);
    }
    int NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int is=0; is < NP; is++) {
      int seNumber=in.readInt();
      if (in.readInt() != 0) {
        u.getSensorTimerLocked(seNumber,true).readSummaryFromParcelLocked(in);
      }
    }
    NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String procName=in.readString();
      Uid.Proc p=u.getProcessStatsLocked(procName);
      p.mUserTime=p.mLoadedUserTime=in.readLong();
      p.mSystemTime=p.mLoadedSystemTime=in.readLong();
      p.mForegroundTime=p.mLoadedForegroundTime=in.readLong();
      p.mStarts=p.mLoadedStarts=in.readInt();
      p.mNumCrashes=p.mLoadedNumCrashes=in.readInt();
      p.mNumAnrs=p.mLoadedNumAnrs=in.readInt();
      p.readExcessivePowerFromParcelLocked(in);
    }
    NP=in.readInt();
    if (NP > 10000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String pkgName=in.readString();
      Uid.Pkg p=u.getPackageStatsLocked(pkgName);
      final int NWA=in.readInt();
      if (NWA > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NWA);
      }
      p.mWakeupAlarms.clear();
      for (int iwa=0; iwa < NWA; iwa++) {
        String tag=in.readString();
        Counter c=new Counter(mOnBatteryTimeBase);
        c.readSummaryFromParcelLocked(in);
        p.mWakeupAlarms.put(tag,c);
      }
      NS=in.readInt();
      if (NS > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NS);
      }
      for (int is=0; is < NS; is++) {
        String servName=in.readString();
        Uid.Pkg.Serv s=u.getServiceStatsLocked(pkgName,servName);
        s.mStartTime=s.mLoadedStartTime=in.readLong();
        s.mStarts=s.mLoadedStarts=in.readInt();
        s.mLaunches=s.mLoadedLaunches=in.readInt();
      }
    }
  }
}",0.9966071572824944
190913,"public void readSummaryFromParcel(Parcel in) throws ParcelFormatException {
  final int version=in.readInt();
  if (version != VERSION) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
    return;
  }
  readHistory(in,true);
  mStartCount=in.readInt();
  mUptime=in.readLong();
  mRealtime=in.readLong();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mOnBatteryTimeBase.readSummaryFromParcel(in);
  mOnBatteryScreenOffTimeBase.readSummaryFromParcel(in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mEstimatedBatteryCapacity=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mDailyDischargeStepTracker.readFromParcel(in);
  mDailyChargeStepTracker.readFromParcel(in);
  mDischargeCounter.readSummaryFromParcelLocked(in);
  mDischargeScreenOffCounter.readSummaryFromParcelLocked(in);
  int NPKG=in.readInt();
  if (NPKG > 0) {
    mDailyPackageChanges=new ArrayList<>(NPKG);
    while (NPKG > 0) {
      NPKG--;
      PackageChange pc=new PackageChange();
      pc.mPackageName=in.readString();
      pc.mUpdate=in.readInt() != 0;
      pc.mVersionCode=in.readInt();
      mDailyPackageChanges.add(pc);
    }
  }
 else {
    mDailyPackageChanges=null;
  }
  mDailyStartTime=in.readLong();
  mNextMinDailyDeadline=in.readLong();
  mNextMaxDailyDeadline=in.readLong();
  mStartCount++;
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].readSummaryFromParcelLocked(in);
  }
  mInteractive=false;
  mInteractiveTimer.readSummaryFromParcelLocked(in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer.readSummaryFromParcelLocked(in);
  mLongestLightIdleTime=in.readLong();
  mLongestFullIdleTime=in.readLong();
  mDeviceIdleModeLightTimer.readSummaryFromParcelLocked(in);
  mDeviceIdleModeFullTimer.readSummaryFromParcelLocked(in);
  mDeviceLightIdlingTimer.readSummaryFromParcelLocked(in);
  mDeviceIdlingTimer.readSummaryFromParcelLocked(in);
  mPhoneOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mPhoneSignalScanningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
    mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActivePerAppTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActiveAdjustedTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownCount.readSummaryFromParcelLocked(in);
  mWifiRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mWifiOn=false;
  mWifiOnTimer.readSummaryFromParcelLocked(in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mWifiActivity.readSummaryFromParcel(in);
  mBluetoothActivity.readSummaryFromParcel(in);
  mModemActivity.readSummaryFromParcel(in);
  mHasWifiReporting=in.readInt() != 0;
  mHasBluetoothReporting=in.readInt() != 0;
  mHasModemReporting=in.readInt() != 0;
  mNumConnectivityChange=mLoadedNumConnectivityChange=in.readInt();
  mFlashlightOnNesting=0;
  mFlashlightOnTimer.readSummaryFromParcelLocked(in);
  mCameraOnNesting=0;
  mCameraOnTimer.readSummaryFromParcelLocked(in);
  mBluetoothScanNesting=0;
  mBluetoothScanTimer.readSummaryFromParcelLocked(in);
  int NKW=in.readInt();
  if (NKW > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NKW);
  }
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String kwltName=in.readString();
      getKernelWakelockTimerLocked(kwltName).readSummaryFromParcelLocked(in);
    }
  }
  int NWR=in.readInt();
  if (NWR > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NWR);
  }
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      getWakeupReasonTimerLocked(reasonName).readSummaryFromParcelLocked(in);
    }
  }
  final int NU=in.readInt();
  if (NU > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NU);
  }
  for (int iu=0; iu < NU; iu++) {
    int uid=in.readInt();
    Uid u=new Uid(this,uid);
    mUidStats.put(uid,u);
    u.mWifiRunning=false;
    if (in.readInt() != 0) {
      u.mWifiRunningTimer.readSummaryFromParcelLocked(in);
    }
    u.mFullWifiLockOut=false;
    if (in.readInt() != 0) {
      u.mFullWifiLockTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiScanStarted=false;
    if (in.readInt() != 0) {
      u.mWifiScanTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiBatchedScanBinStarted=Uid.NO_BATCHED_SCAN_STARTED;
    for (int i=0; i < Uid.NUM_WIFI_BATCHED_SCAN_BINS; i++) {
      if (in.readInt() != 0) {
        u.makeWifiBatchedScanBin(i,null);
        u.mWifiBatchedScanTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    u.mWifiMulticastEnabled=false;
    if (in.readInt() != 0) {
      u.mWifiMulticastTimer.readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createAudioTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createVideoTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createFlashlightTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createCameraTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createForegroundActivityTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createBluetoothScanTimerLocked().readSummaryFromParcelLocked(in);
    }
    u.mProcessState=ActivityManager.PROCESS_STATE_NONEXISTENT;
    for (int i=0; i < Uid.NUM_PROCESS_STATE; i++) {
      if (in.readInt() != 0) {
        u.makeProcessState(i,null);
        u.mProcessStateTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      u.createVibratorOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      if (u.mUserActivityCounters == null) {
        u.initUserActivityLocked();
      }
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        u.mUserActivityCounters[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      if (u.mNetworkByteActivityCounters == null) {
        u.initNetworkActivityLocked();
      }
      for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
        u.mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
        u.mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
      }
      u.mMobileRadioActiveTime.readSummaryFromParcelLocked(in);
      u.mMobileRadioActiveCount.readSummaryFromParcelLocked(in);
    }
    u.mUserCpuTime.readSummaryFromParcelLocked(in);
    u.mSystemCpuTime.readSummaryFromParcelLocked(in);
    u.mCpuPower.readSummaryFromParcelLocked(in);
    if (in.readInt() != 0) {
      final int numClusters=in.readInt();
      if (mPowerProfile != null && mPowerProfile.getNumCpuClusters() != numClusters) {
        throw new ParcelFormatException(""String_Node_Str"");
      }
      u.mCpuClusterSpeed=new LongSamplingCounter[numClusters][];
      for (int cluster=0; cluster < numClusters; cluster++) {
        if (in.readInt() != 0) {
          final int NSB=in.readInt();
          if (mPowerProfile != null && mPowerProfile.getNumSpeedStepsInCpuCluster(cluster) != NSB) {
            throw new ParcelFormatException(""String_Node_Str"" + NSB);
          }
          u.mCpuClusterSpeed[cluster]=new LongSamplingCounter[NSB];
          for (int speed=0; speed < NSB; speed++) {
            if (in.readInt() != 0) {
              u.mCpuClusterSpeed[cluster][speed]=new LongSamplingCounter(mOnBatteryTimeBase);
              u.mCpuClusterSpeed[cluster][speed].readSummaryFromParcelLocked(in);
            }
          }
        }
 else {
          u.mCpuClusterSpeed[cluster]=null;
        }
      }
    }
 else {
      u.mCpuClusterSpeed=null;
    }
    if (in.readInt() != 0) {
      u.mMobileRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mMobileRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mMobileRadioApWakeupCount=null;
    }
    if (in.readInt() != 0) {
      u.mWifiRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mWifiRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mWifiRadioApWakeupCount=null;
    }
    int NW=in.readInt();
    if (NW > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NW);
    }
    for (int iw=0; iw < NW; iw++) {
      String wlName=in.readString();
      u.readWakeSummaryFromParcelLocked(wlName,in);
    }
    int NS=in.readInt();
    if (NS > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NS);
    }
    for (int is=0; is < NS; is++) {
      String name=in.readString();
      u.readSyncSummaryFromParcelLocked(name,in);
    }
    int NJ=in.readInt();
    if (NJ > 100) {
      throw new ParcelFormatException(""String_Node_Str"" + NJ);
    }
    for (int ij=0; ij < NJ; ij++) {
      String name=in.readString();
      u.readJobSummaryFromParcelLocked(name,in);
    }
    int NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int is=0; is < NP; is++) {
      int seNumber=in.readInt();
      if (in.readInt() != 0) {
        u.getSensorTimerLocked(seNumber,true).readSummaryFromParcelLocked(in);
      }
    }
    NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String procName=in.readString();
      Uid.Proc p=u.getProcessStatsLocked(procName);
      p.mUserTime=p.mLoadedUserTime=in.readLong();
      p.mSystemTime=p.mLoadedSystemTime=in.readLong();
      p.mForegroundTime=p.mLoadedForegroundTime=in.readLong();
      p.mStarts=p.mLoadedStarts=in.readInt();
      p.mNumCrashes=p.mLoadedNumCrashes=in.readInt();
      p.mNumAnrs=p.mLoadedNumAnrs=in.readInt();
      p.readExcessivePowerFromParcelLocked(in);
    }
    NP=in.readInt();
    if (NP > 10000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String pkgName=in.readString();
      Uid.Pkg p=u.getPackageStatsLocked(pkgName);
      final int NWA=in.readInt();
      if (NWA > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NWA);
      }
      p.mWakeupAlarms.clear();
      for (int iwa=0; iwa < NWA; iwa++) {
        String tag=in.readString();
        Counter c=new Counter(mOnBatteryTimeBase);
        c.readSummaryFromParcelLocked(in);
        p.mWakeupAlarms.put(tag,c);
      }
      NS=in.readInt();
      if (NS > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NS);
      }
      for (int is=0; is < NS; is++) {
        String servName=in.readString();
        Uid.Pkg.Serv s=u.getServiceStatsLocked(pkgName,servName);
        s.mStartTime=s.mLoadedStartTime=in.readLong();
        s.mStarts=s.mLoadedStarts=in.readInt();
        s.mLaunches=s.mLoadedLaunches=in.readInt();
      }
    }
  }
}","public void readSummaryFromParcel(Parcel in) throws ParcelFormatException {
  final int version=in.readInt();
  if (version != VERSION) {
    Slog.w(""String_Node_Str"",""String_Node_Str"" + version + ""String_Node_Str""+ VERSION+ ""String_Node_Str"");
    return;
  }
  readHistory(in,true);
  mStartCount=in.readInt();
  mUptime=in.readLong();
  mRealtime=in.readLong();
  mStartClockTime=in.readLong();
  mStartPlatformVersion=in.readString();
  mEndPlatformVersion=in.readString();
  mOnBatteryTimeBase.readSummaryFromParcel(in);
  mOnBatteryScreenOffTimeBase.readSummaryFromParcel(in);
  mDischargeUnplugLevel=in.readInt();
  mDischargePlugLevel=in.readInt();
  mDischargeCurrentLevel=in.readInt();
  mCurrentBatteryLevel=in.readInt();
  mEstimatedBatteryCapacity=in.readInt();
  mLowDischargeAmountSinceCharge=in.readInt();
  mHighDischargeAmountSinceCharge=in.readInt();
  mDischargeAmountScreenOnSinceCharge=in.readInt();
  mDischargeAmountScreenOffSinceCharge=in.readInt();
  mDischargeStepTracker.readFromParcel(in);
  mChargeStepTracker.readFromParcel(in);
  mDailyDischargeStepTracker.readFromParcel(in);
  mDailyChargeStepTracker.readFromParcel(in);
  mDischargeCounter.readSummaryFromParcelLocked(in);
  mDischargeScreenOffCounter.readSummaryFromParcelLocked(in);
  int NPKG=in.readInt();
  if (NPKG > 0) {
    mDailyPackageChanges=new ArrayList<>(NPKG);
    while (NPKG > 0) {
      NPKG--;
      PackageChange pc=new PackageChange();
      pc.mPackageName=in.readString();
      pc.mUpdate=in.readInt() != 0;
      pc.mVersionCode=in.readInt();
      mDailyPackageChanges.add(pc);
    }
  }
 else {
    mDailyPackageChanges=null;
  }
  mDailyStartTime=in.readLong();
  mNextMinDailyDeadline=in.readLong();
  mNextMaxDailyDeadline=in.readLong();
  mStartCount++;
  mScreenState=Display.STATE_UNKNOWN;
  mScreenOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_SCREEN_BRIGHTNESS_BINS; i++) {
    mScreenBrightnessTimer[i].readSummaryFromParcelLocked(in);
  }
  mInteractive=false;
  mInteractiveTimer.readSummaryFromParcelLocked(in);
  mPhoneOn=false;
  mPowerSaveModeEnabledTimer.readSummaryFromParcelLocked(in);
  mLongestLightIdleTime=in.readLong();
  mLongestFullIdleTime=in.readLong();
  mDeviceIdleModeLightTimer.readSummaryFromParcelLocked(in);
  mDeviceIdleModeFullTimer.readSummaryFromParcelLocked(in);
  mDeviceLightIdlingTimer.readSummaryFromParcelLocked(in);
  mDeviceIdlingTimer.readSummaryFromParcelLocked(in);
  mPhoneOnTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < SignalStrength.NUM_SIGNAL_STRENGTH_BINS; i++) {
    mPhoneSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mPhoneSignalScanningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_DATA_CONNECTION_TYPES; i++) {
    mPhoneDataConnectionsTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
    mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
    mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
  }
  mMobileRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mMobileRadioActiveTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActivePerAppTimer.readSummaryFromParcelLocked(in);
  mMobileRadioActiveAdjustedTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownTime.readSummaryFromParcelLocked(in);
  mMobileRadioActiveUnknownCount.readSummaryFromParcelLocked(in);
  mWifiRadioPowerState=DataConnectionRealTimeInfo.DC_POWER_STATE_LOW;
  mWifiOn=false;
  mWifiOnTimer.readSummaryFromParcelLocked(in);
  mGlobalWifiRunning=false;
  mGlobalWifiRunningTimer.readSummaryFromParcelLocked(in);
  for (int i=0; i < NUM_WIFI_STATES; i++) {
    mWifiStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SUPPL_STATES; i++) {
    mWifiSupplStateTimer[i].readSummaryFromParcelLocked(in);
  }
  for (int i=0; i < NUM_WIFI_SIGNAL_STRENGTH_BINS; i++) {
    mWifiSignalStrengthsTimer[i].readSummaryFromParcelLocked(in);
  }
  mWifiActivity.readSummaryFromParcel(in);
  mBluetoothActivity.readSummaryFromParcel(in);
  mModemActivity.readSummaryFromParcel(in);
  mHasWifiReporting=in.readInt() != 0;
  mHasBluetoothReporting=in.readInt() != 0;
  mHasModemReporting=in.readInt() != 0;
  mNumConnectivityChange=mLoadedNumConnectivityChange=in.readInt();
  mFlashlightOnNesting=0;
  mFlashlightOnTimer.readSummaryFromParcelLocked(in);
  mCameraOnNesting=0;
  mCameraOnTimer.readSummaryFromParcelLocked(in);
  mBluetoothScanNesting=0;
  mBluetoothScanTimer.readSummaryFromParcelLocked(in);
  int NKW=in.readInt();
  if (NKW > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NKW);
  }
  for (int ikw=0; ikw < NKW; ikw++) {
    if (in.readInt() != 0) {
      String kwltName=in.readString();
      getKernelWakelockTimerLocked(kwltName).readSummaryFromParcelLocked(in);
    }
  }
  int NWR=in.readInt();
  if (NWR > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NWR);
  }
  for (int iwr=0; iwr < NWR; iwr++) {
    if (in.readInt() != 0) {
      String reasonName=in.readString();
      getWakeupReasonTimerLocked(reasonName).readSummaryFromParcelLocked(in);
    }
  }
  final int NU=in.readInt();
  if (NU > 10000) {
    throw new ParcelFormatException(""String_Node_Str"" + NU);
  }
  for (int iu=0; iu < NU; iu++) {
    int uid=in.readInt();
    Uid u=new Uid(this,uid);
    mUidStats.put(uid,u);
    u.mWifiRunning=false;
    if (in.readInt() != 0) {
      u.mWifiRunningTimer.readSummaryFromParcelLocked(in);
    }
    u.mFullWifiLockOut=false;
    if (in.readInt() != 0) {
      u.mFullWifiLockTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiScanStarted=false;
    if (in.readInt() != 0) {
      u.mWifiScanTimer.readSummaryFromParcelLocked(in);
    }
    u.mWifiBatchedScanBinStarted=Uid.NO_BATCHED_SCAN_STARTED;
    for (int i=0; i < Uid.NUM_WIFI_BATCHED_SCAN_BINS; i++) {
      if (in.readInt() != 0) {
        u.makeWifiBatchedScanBin(i,null);
        u.mWifiBatchedScanTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    u.mWifiMulticastEnabled=false;
    if (in.readInt() != 0) {
      u.mWifiMulticastTimer.readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createAudioTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createVideoTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createFlashlightTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createCameraTurnedOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createForegroundActivityTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      u.createBluetoothScanTimerLocked().readSummaryFromParcelLocked(in);
    }
    u.mProcessState=ActivityManager.PROCESS_STATE_NONEXISTENT;
    for (int i=0; i < Uid.NUM_PROCESS_STATE; i++) {
      if (in.readInt() != 0) {
        u.makeProcessState(i,null);
        u.mProcessStateTimer[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      u.createVibratorOnTimerLocked().readSummaryFromParcelLocked(in);
    }
    if (in.readInt() != 0) {
      if (u.mUserActivityCounters == null) {
        u.initUserActivityLocked();
      }
      for (int i=0; i < Uid.NUM_USER_ACTIVITY_TYPES; i++) {
        u.mUserActivityCounters[i].readSummaryFromParcelLocked(in);
      }
    }
    if (in.readInt() != 0) {
      if (u.mNetworkByteActivityCounters == null) {
        u.initNetworkActivityLocked();
      }
      for (int i=0; i < NUM_NETWORK_ACTIVITY_TYPES; i++) {
        u.mNetworkByteActivityCounters[i].readSummaryFromParcelLocked(in);
        u.mNetworkPacketActivityCounters[i].readSummaryFromParcelLocked(in);
      }
      u.mMobileRadioActiveTime.readSummaryFromParcelLocked(in);
      u.mMobileRadioActiveCount.readSummaryFromParcelLocked(in);
    }
    u.mUserCpuTime.readSummaryFromParcelLocked(in);
    u.mSystemCpuTime.readSummaryFromParcelLocked(in);
    u.mCpuPower.readSummaryFromParcelLocked(in);
    if (in.readInt() != 0) {
      final int numClusters=in.readInt();
      if (mPowerProfile != null && mPowerProfile.getNumCpuClusters() != numClusters) {
        throw new ParcelFormatException(""String_Node_Str"");
      }
      u.mCpuClusterSpeed=new LongSamplingCounter[numClusters][];
      for (int cluster=0; cluster < numClusters; cluster++) {
        if (in.readInt() != 0) {
          final int NSB=in.readInt();
          if (mPowerProfile != null && mPowerProfile.getNumSpeedStepsInCpuCluster(cluster) != NSB) {
            throw new ParcelFormatException(""String_Node_Str"" + NSB);
          }
          u.mCpuClusterSpeed[cluster]=new LongSamplingCounter[NSB];
          for (int speed=0; speed < NSB; speed++) {
            if (in.readInt() != 0) {
              u.mCpuClusterSpeed[cluster][speed]=new LongSamplingCounter(mOnBatteryTimeBase);
              u.mCpuClusterSpeed[cluster][speed].readSummaryFromParcelLocked(in);
            }
          }
        }
 else {
          u.mCpuClusterSpeed[cluster]=null;
        }
      }
    }
 else {
      u.mCpuClusterSpeed=null;
    }
    if (in.readInt() != 0) {
      u.mMobileRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mMobileRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mMobileRadioApWakeupCount=null;
    }
    if (in.readInt() != 0) {
      u.mWifiRadioApWakeupCount=new LongSamplingCounter(mOnBatteryTimeBase);
      u.mWifiRadioApWakeupCount.readSummaryFromParcelLocked(in);
    }
 else {
      u.mWifiRadioApWakeupCount=null;
    }
    int NW=in.readInt();
    if (NW > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NW);
    }
    for (int iw=0; iw < NW; iw++) {
      String wlName=in.readString();
      u.readWakeSummaryFromParcelLocked(wlName,in);
    }
    int NS=in.readInt();
    if (NS > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NS);
    }
    for (int is=0; is < NS; is++) {
      String name=in.readString();
      u.readSyncSummaryFromParcelLocked(name,in);
    }
    int NJ=in.readInt();
    if (NJ > (MAX_WAKELOCKS_PER_UID + 1)) {
      throw new ParcelFormatException(""String_Node_Str"" + NJ);
    }
    for (int ij=0; ij < NJ; ij++) {
      String name=in.readString();
      u.readJobSummaryFromParcelLocked(name,in);
    }
    int NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int is=0; is < NP; is++) {
      int seNumber=in.readInt();
      if (in.readInt() != 0) {
        u.getSensorTimerLocked(seNumber,true).readSummaryFromParcelLocked(in);
      }
    }
    NP=in.readInt();
    if (NP > 1000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String procName=in.readString();
      Uid.Proc p=u.getProcessStatsLocked(procName);
      p.mUserTime=p.mLoadedUserTime=in.readLong();
      p.mSystemTime=p.mLoadedSystemTime=in.readLong();
      p.mForegroundTime=p.mLoadedForegroundTime=in.readLong();
      p.mStarts=p.mLoadedStarts=in.readInt();
      p.mNumCrashes=p.mLoadedNumCrashes=in.readInt();
      p.mNumAnrs=p.mLoadedNumAnrs=in.readInt();
      p.readExcessivePowerFromParcelLocked(in);
    }
    NP=in.readInt();
    if (NP > 10000) {
      throw new ParcelFormatException(""String_Node_Str"" + NP);
    }
    for (int ip=0; ip < NP; ip++) {
      String pkgName=in.readString();
      Uid.Pkg p=u.getPackageStatsLocked(pkgName);
      final int NWA=in.readInt();
      if (NWA > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NWA);
      }
      p.mWakeupAlarms.clear();
      for (int iwa=0; iwa < NWA; iwa++) {
        String tag=in.readString();
        Counter c=new Counter(mOnBatteryTimeBase);
        c.readSummaryFromParcelLocked(in);
        p.mWakeupAlarms.put(tag,c);
      }
      NS=in.readInt();
      if (NS > 1000) {
        throw new ParcelFormatException(""String_Node_Str"" + NS);
      }
      for (int is=0; is < NS; is++) {
        String servName=in.readString();
        Uid.Pkg.Serv s=u.getServiceStatsLocked(pkgName,servName);
        s.mStartTime=s.mLoadedStartTime=in.readLong();
        s.mStarts=s.mLoadedStarts=in.readInt();
        s.mLaunches=s.mLoadedLaunches=in.readInt();
      }
    }
  }
}",0.9966071572824944
190914,"int onShellCommand(Shell shell,String cmd){
  PrintWriter pw=shell.getOutPrintWriter();
  if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          stepIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(stateToString(mState));
        }
 else         if (""String_Node_Str"".equals(arg)) {
          stepLightIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(lightStateToString(mLightState));
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          if (!mDeepEnabled) {
            pw.println(""String_Node_Str"");
            return -1;
          }
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curState=mState;
          while (curState != STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curState == mState) {
              pw.print(""String_Node_Str"");
              pw.println(stateToString(mState));
              exitForceIdleLocked();
              return -1;
            }
            curState=mState;
          }
          pw.println(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(arg)) {
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curLightState=mLightState;
          while (curLightState != LIGHT_STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curLightState == mLightState) {
              pw.print(""String_Node_Str"");
              pw.println(lightStateToString(mLightState));
              exitForceIdleLocked();
              return -1;
            }
            curLightState=mLightState;
          }
          pw.println(""String_Node_Str"");
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        mForceIdle=true;
        becomeInactiveIfAppropriateLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        exitForceIdleLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      String arg=shell.getNextArg();
      if (arg != null) {
        long token=Binder.clearCallingIdentity();
        try {
switch (arg) {
case ""String_Node_Str"":
            pw.println(lightStateToString(mLightState));
          break;
case ""String_Node_Str"":
        pw.println(stateToString(mState));
      break;
case ""String_Node_Str"":
    pw.println(mForceIdle);
  break;
case ""String_Node_Str"":
pw.println(mScreenOn);
break;
case ""String_Node_Str"":
pw.println(mCharging);
break;
case ""String_Node_Str"":
pw.println(mNetworkConnected);
break;
default :
pw.println(""String_Node_Str"" + arg);
break;
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
pw.println(""String_Node_Str"");
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeActive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mDeepEnabled) {
mDeepEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mLightEnabled) {
mLightEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeActive) {
becomeActiveLocked((arg == null ? ""String_Node_Str"" : arg) + ""String_Node_Str"",Process.myUid());
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeInactive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mDeepEnabled) {
mDeepEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mLightEnabled) {
mLightEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeInactive) {
becomeInactiveIfAppropriateLocked();
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
synchronized (this) {
String arg=shell.getNextArg();
if (arg == null || ""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled && mLightEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mLightEnabled ? ""String_Node_Str"" : 0);
}
 else {
pw.println(""String_Node_Str"" + arg);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
long token=Binder.clearCallingIdentity();
try {
String arg=shell.getNextArg();
if (arg != null) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
do {
if (arg.length() < 1 || (arg.charAt(0) != '-' && arg.charAt(0) != '+' && arg.charAt(0) != '=')) {
pw.println(""String_Node_Str"" + arg);
return -1;
}
char op=arg.charAt(0);
String pkg=arg.substring(1);
if (op == '+') {
if (addPowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
 else {
pw.println(""String_Node_Str"" + pkg);
}
}
 else if (op == '-') {
if (removePowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
}
 else {
pw.println(getPowerSaveWhitelistAppInternal(pkg));
}
}
 while ((arg=shell.getNextArg()) != null);
}
 else {
synchronized (this) {
for (int j=0; j < mPowerSaveWhitelistAppsExceptIdle.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistAppsExceptIdle.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistAppsExceptIdle.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistApps.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistUserApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistUserApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistUserApps.valueAt(j));
}
}
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String opt;
while ((opt=shell.getNextOption()) != null) {
if (""String_Node_Str"".equals(opt)) {
opt=shell.getNextArg();
if (opt == null) {
pw.println(""String_Node_Str"");
return -1;
}
shell.userId=Integer.parseInt(opt);
}
}
String arg=shell.getNextArg();
if (arg != null) {
try {
addPowerSaveTempWhitelistAppChecked(arg,10000L,shell.userId,""String_Node_Str"");
}
 catch (RemoteException re) {
pw.println(""String_Node_Str"" + re);
}
}
 else {
dumpTempWhitelistSchedule(pw,false);
}
}
 else {
return shell.handleDefaultCommands(cmd);
}
return 0;
}","int onShellCommand(Shell shell,String cmd){
  PrintWriter pw=shell.getOutPrintWriter();
  if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          stepIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(stateToString(mState));
        }
 else         if (""String_Node_Str"".equals(arg)) {
          stepLightIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(lightStateToString(mLightState));
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          if (!mDeepEnabled) {
            pw.println(""String_Node_Str"");
            return -1;
          }
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curState=mState;
          while (curState != STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curState == mState) {
              pw.print(""String_Node_Str"");
              pw.println(stateToString(mState));
              exitForceIdleLocked();
              return -1;
            }
            curState=mState;
          }
          pw.println(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(arg)) {
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curLightState=mLightState;
          while (curLightState != LIGHT_STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curLightState == mLightState) {
              pw.print(""String_Node_Str"");
              pw.println(lightStateToString(mLightState));
              exitForceIdleLocked();
              return -1;
            }
            curLightState=mLightState;
          }
          pw.println(""String_Node_Str"");
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        mForceIdle=true;
        becomeInactiveIfAppropriateLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        exitForceIdleLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      String arg=shell.getNextArg();
      if (arg != null) {
        long token=Binder.clearCallingIdentity();
        try {
switch (arg) {
case ""String_Node_Str"":
            pw.println(lightStateToString(mLightState));
          break;
case ""String_Node_Str"":
        pw.println(stateToString(mState));
      break;
case ""String_Node_Str"":
    pw.println(mForceIdle);
  break;
case ""String_Node_Str"":
pw.println(mScreenOn);
break;
case ""String_Node_Str"":
pw.println(mCharging);
break;
case ""String_Node_Str"":
pw.println(mNetworkConnected);
break;
default :
pw.println(""String_Node_Str"" + arg);
break;
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
pw.println(""String_Node_Str"");
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeActive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mDeepEnabled) {
mDeepEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mLightEnabled) {
mLightEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeActive) {
becomeActiveLocked((arg == null ? ""String_Node_Str"" : arg) + ""String_Node_Str"",Process.myUid());
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeInactive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mDeepEnabled) {
mDeepEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mLightEnabled) {
mLightEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeInactive) {
becomeInactiveIfAppropriateLocked();
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
synchronized (this) {
String arg=shell.getNextArg();
if (arg == null || ""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled && mLightEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mLightEnabled ? ""String_Node_Str"" : 0);
}
 else {
pw.println(""String_Node_Str"" + arg);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String arg=shell.getNextArg();
if (arg != null) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
long token=Binder.clearCallingIdentity();
try {
do {
if (arg.length() < 1 || (arg.charAt(0) != '-' && arg.charAt(0) != '+' && arg.charAt(0) != '=')) {
pw.println(""String_Node_Str"" + arg);
return -1;
}
char op=arg.charAt(0);
String pkg=arg.substring(1);
if (op == '+') {
if (addPowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
 else {
pw.println(""String_Node_Str"" + pkg);
}
}
 else if (op == '-') {
if (removePowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
}
 else {
pw.println(getPowerSaveWhitelistAppInternal(pkg));
}
}
 while ((arg=shell.getNextArg()) != null);
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
synchronized (this) {
for (int j=0; j < mPowerSaveWhitelistAppsExceptIdle.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistAppsExceptIdle.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistAppsExceptIdle.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistApps.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistUserApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistUserApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistUserApps.valueAt(j));
}
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String opt;
while ((opt=shell.getNextOption()) != null) {
if (""String_Node_Str"".equals(opt)) {
opt=shell.getNextArg();
if (opt == null) {
pw.println(""String_Node_Str"");
return -1;
}
shell.userId=Integer.parseInt(opt);
}
}
String arg=shell.getNextArg();
if (arg != null) {
try {
addPowerSaveTempWhitelistAppChecked(arg,10000L,shell.userId,""String_Node_Str"");
}
 catch (RemoteException re) {
pw.println(""String_Node_Str"" + re);
}
}
 else {
dumpTempWhitelistSchedule(pw,false);
}
}
 else {
return shell.handleDefaultCommands(cmd);
}
return 0;
}",0.9884849853240008
190915,"private void updateScrollability(){
  boolean scrollable=getScrollRange() > 0;
  if (scrollable != mScrollable) {
    mScrollable=scrollable;
    setFocusable(scrollable);
  }
}","private void updateScrollability(){
  boolean scrollable=getScrollRange() > 0;
  if (scrollable != mScrollable) {
    mScrollable=scrollable;
    setFocusable(scrollable);
    updateForwardAndBackwardScrollability();
  }
}",0.8872180451127819
190916,"private void updateForcedScroll(){
  if (mForcedScroll != null && (!mForcedScroll.hasFocus() || !mForcedScroll.isAttachedToWindow())) {
    mForcedScroll=null;
  }
  if (mForcedScroll != null) {
    ExpandableView expandableView=(ExpandableView)mForcedScroll;
    int positionInLinearLayout=getPositionInLinearLayout(expandableView);
    int targetScroll=targetScrollForView(expandableView,positionInLinearLayout);
    int outOfViewScroll=positionInLinearLayout + expandableView.getIntrinsicHeight();
    targetScroll=Math.max(0,Math.min(targetScroll,getScrollRange()));
    if (mOwnScrollY < targetScroll || outOfViewScroll < mOwnScrollY) {
      mOwnScrollY=targetScroll;
    }
  }
}","private void updateForcedScroll(){
  if (mForcedScroll != null && (!mForcedScroll.hasFocus() || !mForcedScroll.isAttachedToWindow())) {
    mForcedScroll=null;
  }
  if (mForcedScroll != null) {
    ExpandableView expandableView=(ExpandableView)mForcedScroll;
    int positionInLinearLayout=getPositionInLinearLayout(expandableView);
    int targetScroll=targetScrollForView(expandableView,positionInLinearLayout);
    int outOfViewScroll=positionInLinearLayout + expandableView.getIntrinsicHeight();
    targetScroll=Math.max(0,Math.min(targetScroll,getScrollRange()));
    if (mOwnScrollY < targetScroll || outOfViewScroll < mOwnScrollY) {
      setOwnScrollY(targetScroll);
    }
  }
}",0.9774217042971596
190917,"/** 
 * Perform a scroll downward and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll downwards, has to be negative.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollDown(int deltaY){
  deltaY=Math.min(deltaY,0);
  float currentBottomAmount=getCurrentOverScrollAmount(false);
  float newBottomAmount=currentBottomAmount + deltaY;
  if (currentBottomAmount > 0) {
    setOverScrollAmount(newBottomAmount,false,false);
  }
  float scrollAmount=newBottomAmount < 0 ? newBottomAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY < 0) {
    float currentTopPixels=getCurrentOverScrolledPixels(true);
    setOverScrolledPixels(currentTopPixels - newScrollY,true,false);
    mOwnScrollY=0;
    scrollAmount=0.0f;
  }
  return scrollAmount;
}","/** 
 * Perform a scroll downward and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll downwards, has to be negative.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollDown(int deltaY){
  deltaY=Math.min(deltaY,0);
  float currentBottomAmount=getCurrentOverScrollAmount(false);
  float newBottomAmount=currentBottomAmount + deltaY;
  if (currentBottomAmount > 0) {
    setOverScrollAmount(newBottomAmount,false,false);
  }
  float scrollAmount=newBottomAmount < 0 ? newBottomAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY < 0) {
    float currentTopPixels=getCurrentOverScrolledPixels(true);
    setOverScrolledPixels(currentTopPixels - newScrollY,true,false);
    setOwnScrollY(0);
    scrollAmount=0.0f;
  }
  return scrollAmount;
}",0.996011396011396
190918,"private void updateScrollStateForAddedChildren(){
  if (mChildrenToAddAnimated.isEmpty()) {
    return;
  }
  for (int i=0; i < getChildCount(); i++) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (mChildrenToAddAnimated.contains(child)) {
      int startingPosition=getPositionInLinearLayout(child);
      int padding=child.getIncreasedPaddingAmount() == 1.0f ? mIncreasedPaddingBetweenElements : mPaddingBetweenElements;
      int childHeight=getIntrinsicHeight(child) + padding;
      if (startingPosition < mOwnScrollY) {
        mOwnScrollY+=childHeight;
      }
    }
  }
  clampScrollPosition();
}","private void updateScrollStateForAddedChildren(){
  if (mChildrenToAddAnimated.isEmpty()) {
    return;
  }
  for (int i=0; i < getChildCount(); i++) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (mChildrenToAddAnimated.contains(child)) {
      int startingPosition=getPositionInLinearLayout(child);
      int padding=child.getIncreasedPaddingAmount() == 1.0f ? mIncreasedPaddingBetweenElements : mPaddingBetweenElements;
      int childHeight=getIntrinsicHeight(child) + padding;
      if (startingPosition < mOwnScrollY) {
        setOwnScrollY(mOwnScrollY + childHeight);
      }
    }
  }
  clampScrollPosition();
}",0.984126984126984
190919,"/** 
 * Updates the scroll position when a child was removed
 * @param removedChild the removed child
 */
private void updateScrollStateForRemovedChild(ExpandableView removedChild){
  int startingPosition=getPositionInLinearLayout(removedChild);
  int padding=(int)NotificationUtils.interpolate(mPaddingBetweenElements,mIncreasedPaddingBetweenElements,removedChild.getIncreasedPaddingAmount());
  int childHeight=getIntrinsicHeight(removedChild) + padding;
  int endPosition=startingPosition + childHeight;
  if (endPosition <= mOwnScrollY) {
    mOwnScrollY-=childHeight;
  }
 else   if (startingPosition < mOwnScrollY) {
    mOwnScrollY=startingPosition;
  }
}","/** 
 * Updates the scroll position when a child was removed
 * @param removedChild the removed child
 */
private void updateScrollStateForRemovedChild(ExpandableView removedChild){
  int startingPosition=getPositionInLinearLayout(removedChild);
  int padding=(int)NotificationUtils.interpolate(mPaddingBetweenElements,mIncreasedPaddingBetweenElements,removedChild.getIncreasedPaddingAmount());
  int childHeight=getIntrinsicHeight(removedChild) + padding;
  int endPosition=startingPosition + childHeight;
  if (endPosition <= mOwnScrollY) {
    setOwnScrollY(mOwnScrollY - childHeight);
  }
 else   if (startingPosition < mOwnScrollY) {
    setOwnScrollY(startingPosition);
  }
}",0.9560685033507074
190920,"/** 
 * Fling the scroll view
 * @param velocityY The initial velocity in the Y direction. Positivenumbers mean that the finger/cursor is moving down the screen, which means we want to scroll towards the top.
 */
private void fling(int velocityY){
  if (getChildCount() > 0) {
    int scrollRange=getScrollRange();
    float topAmount=getCurrentOverScrollAmount(true);
    float bottomAmount=getCurrentOverScrollAmount(false);
    if (velocityY < 0 && topAmount > 0) {
      mOwnScrollY-=(int)topAmount;
      mDontReportNextOverScroll=true;
      setOverScrollAmount(0,true,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(true) * mOverflingDistance + topAmount;
    }
 else     if (velocityY > 0 && bottomAmount > 0) {
      mOwnScrollY+=bottomAmount;
      setOverScrollAmount(0,false,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(false) * mOverflingDistance + bottomAmount;
    }
 else {
      mMaxOverScroll=0.0f;
    }
    int minScrollY=Math.max(0,scrollRange);
    if (mExpandedInThisMotion) {
      minScrollY=Math.min(minScrollY,mMaxScrollAfterExpand);
    }
    mScroller.fling(mScrollX,mOwnScrollY,1,velocityY,0,0,0,minScrollY,0,mExpandedInThisMotion && mOwnScrollY >= 0 ? 0 : Integer.MAX_VALUE / 2);
    postInvalidateOnAnimation();
  }
}","/** 
 * Fling the scroll view
 * @param velocityY The initial velocity in the Y direction. Positivenumbers mean that the finger/cursor is moving down the screen, which means we want to scroll towards the top.
 */
private void fling(int velocityY){
  if (getChildCount() > 0) {
    int scrollRange=getScrollRange();
    float topAmount=getCurrentOverScrollAmount(true);
    float bottomAmount=getCurrentOverScrollAmount(false);
    if (velocityY < 0 && topAmount > 0) {
      setOwnScrollY(mOwnScrollY - (int)topAmount);
      mDontReportNextOverScroll=true;
      setOverScrollAmount(0,true,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(true) * mOverflingDistance + topAmount;
    }
 else     if (velocityY > 0 && bottomAmount > 0) {
      setOwnScrollY((int)(mOwnScrollY + bottomAmount));
      setOverScrollAmount(0,false,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(false) * mOverflingDistance + bottomAmount;
    }
 else {
      mMaxOverScroll=0.0f;
    }
    int minScrollY=Math.max(0,scrollRange);
    if (mExpandedInThisMotion) {
      minScrollY=Math.min(minScrollY,mMaxScrollAfterExpand);
    }
    mScroller.fling(mScrollX,mOwnScrollY,1,velocityY,0,0,0,minScrollY,0,mExpandedInThisMotion && mOwnScrollY >= 0 ? 0 : Integer.MAX_VALUE / 2);
    postInvalidateOnAnimation();
  }
}",0.9823772028496438
190921,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  if (!mIsExpanded) {
    mOwnScrollY=0;
    mPhoneStatusBar.resetUserExpandedStates();
    clearTemporaryViews(this);
    for (int i=0; i < getChildCount(); i++) {
      ExpandableView child=(ExpandableView)getChildAt(i);
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        clearTemporaryViews(row.getChildrenContainer());
      }
    }
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  if (!mIsExpanded) {
    setOwnScrollY(0);
    mPhoneStatusBar.resetUserExpandedStates();
    clearTemporaryViews(this);
    for (int i=0; i < getChildCount(); i++) {
      ExpandableView child=(ExpandableView)getChildAt(i);
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        clearTemporaryViews(row.getChildrenContainer());
      }
    }
  }
}",0.3411167512690355
190922,"@Override protected void onOverScrolled(int scrollX,int scrollY,boolean clampedX,boolean clampedY){
  if (!mScroller.isFinished()) {
    final int oldX=mScrollX;
    final int oldY=mOwnScrollY;
    mScrollX=scrollX;
    mOwnScrollY=scrollY;
    if (clampedY) {
      springBack();
    }
 else {
      onScrollChanged(mScrollX,mOwnScrollY,oldX,oldY);
      invalidateParentIfNeeded();
      updateChildren();
      float overScrollTop=getCurrentOverScrollAmount(true);
      if (mOwnScrollY < 0) {
        notifyOverscrollTopListener(-mOwnScrollY,isRubberbanded(true));
      }
 else {
        notifyOverscrollTopListener(overScrollTop,isRubberbanded(true));
      }
    }
  }
 else {
    customScrollTo(scrollY);
    scrollTo(scrollX,mScrollY);
  }
}","@Override protected void onOverScrolled(int scrollX,int scrollY,boolean clampedX,boolean clampedY){
  if (!mScroller.isFinished()) {
    final int oldX=mScrollX;
    final int oldY=mOwnScrollY;
    mScrollX=scrollX;
    setOwnScrollY(scrollY);
    if (clampedY) {
      springBack();
    }
 else {
      onScrollChanged(mScrollX,mOwnScrollY,oldX,oldY);
      invalidateParentIfNeeded();
      updateChildren();
      float overScrollTop=getCurrentOverScrollAmount(true);
      if (mOwnScrollY < 0) {
        notifyOverscrollTopListener(-mOwnScrollY,isRubberbanded(true));
      }
 else {
        notifyOverscrollTopListener(overScrollTop,isRubberbanded(true));
      }
    }
  }
 else {
    customScrollTo(scrollY);
    scrollTo(scrollX,mScrollY);
  }
}",0.9860279441117764
190923,"private void clampScrollPosition(){
  int scrollRange=getScrollRange();
  if (scrollRange < mOwnScrollY) {
    mOwnScrollY=scrollRange;
  }
}","private void clampScrollPosition(){
  int scrollRange=getScrollRange();
  if (scrollRange < mOwnScrollY) {
    setOwnScrollY(scrollRange);
  }
}",0.975438596491228
190924,"private void customScrollTo(int y){
  mOwnScrollY=y;
  updateChildren();
}","private void customScrollTo(int y){
  setOwnScrollY(y);
  updateChildren();
}",0.9536423841059604
190925,"public void resetScrollPosition(){
  mScroller.abortAnimation();
  mOwnScrollY=0;
}","public void resetScrollPosition(){
  mScroller.abortAnimation();
  setOwnScrollY(0);
}",0.9585798816568049
190926,"private void springBack(){
  int scrollRange=getScrollRange();
  boolean overScrolledTop=mOwnScrollY <= 0;
  boolean overScrolledBottom=mOwnScrollY >= scrollRange;
  if (overScrolledTop || overScrolledBottom) {
    boolean onTop;
    float newAmount;
    if (overScrolledTop) {
      onTop=true;
      newAmount=-mOwnScrollY;
      mOwnScrollY=0;
      mDontReportNextOverScroll=true;
    }
 else {
      onTop=false;
      newAmount=mOwnScrollY - scrollRange;
      mOwnScrollY=scrollRange;
    }
    setOverScrollAmount(newAmount,onTop,false);
    setOverScrollAmount(0.0f,onTop,true);
    mScroller.forceFinished(true);
  }
}","private void springBack(){
  int scrollRange=getScrollRange();
  boolean overScrolledTop=mOwnScrollY <= 0;
  boolean overScrolledBottom=mOwnScrollY >= scrollRange;
  if (overScrolledTop || overScrolledBottom) {
    boolean onTop;
    float newAmount;
    if (overScrolledTop) {
      onTop=true;
      newAmount=-mOwnScrollY;
      setOwnScrollY(0);
      mDontReportNextOverScroll=true;
    }
 else {
      onTop=false;
      newAmount=mOwnScrollY - scrollRange;
      setOwnScrollY(scrollRange);
    }
    setOverScrollAmount(newAmount,onTop,false);
    setOverScrollAmount(0.0f,onTop,true);
    mScroller.forceFinished(true);
  }
}",0.9889064976228208
190927,"private void updateScrollPositionOnExpandInBottom(ExpandableView view){
  if (view instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    if (row.isUserLocked() && row != getFirstChildNotGone()) {
      if (row.isSummaryWithChildren()) {
        return;
      }
      float endPosition=row.getTranslationY() + row.getActualHeight();
      if (row.isChildInGroup()) {
        endPosition+=row.getNotificationParent().getTranslationY();
      }
      int stackEnd=getStackEndPosition();
      if (endPosition > stackEnd) {
        mOwnScrollY+=endPosition - stackEnd;
        mDisallowScrollingInThisMotion=true;
      }
    }
  }
}","private void updateScrollPositionOnExpandInBottom(ExpandableView view){
  if (view instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    if (row.isUserLocked() && row != getFirstChildNotGone()) {
      if (row.isSummaryWithChildren()) {
        return;
      }
      float endPosition=row.getTranslationY() + row.getActualHeight();
      if (row.isChildInGroup()) {
        endPosition+=row.getNotificationParent().getTranslationY();
      }
      int stackEnd=getStackEndPosition();
      if (endPosition > stackEnd) {
        setOwnScrollY((int)(mOwnScrollY + endPosition - stackEnd));
        mDisallowScrollingInThisMotion=true;
      }
    }
  }
}",0.982078853046595
190928,"@Override public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfoInternal(info);
  final int scrollRange=getScrollRange();
  if (scrollRange > 0) {
    info.setScrollable(true);
    if (mScrollY > 0) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_UP);
    }
    if (mScrollY < scrollRange) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_DOWN);
    }
  }
  info.setClassName(ScrollView.class.getName());
}","@Override public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfoInternal(info);
  if (mScrollable) {
    info.setScrollable(true);
    if (mBackwardScrollable) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_UP);
    }
    if (mForwardScrollable) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_DOWN);
    }
  }
  info.setClassName(ScrollView.class.getName());
}",0.8530050687907313
190929,"/** 
 * Perform a scroll upwards and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll upwards, has to be positive.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollUp(int deltaY,int range){
  deltaY=Math.max(deltaY,0);
  float currentTopAmount=getCurrentOverScrollAmount(true);
  float newTopAmount=currentTopAmount - deltaY;
  if (currentTopAmount > 0) {
    setOverScrollAmount(newTopAmount,true,false);
  }
  float scrollAmount=newTopAmount < 0 ? -newTopAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY > range) {
    if (!mExpandedInThisMotion) {
      float currentBottomPixels=getCurrentOverScrolledPixels(false);
      setOverScrolledPixels(currentBottomPixels + newScrollY - range,false,false);
    }
    mOwnScrollY=range;
    scrollAmount=0.0f;
  }
  return scrollAmount;
}","/** 
 * Perform a scroll upwards and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll upwards, has to be positive.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollUp(int deltaY,int range){
  deltaY=Math.max(deltaY,0);
  float currentTopAmount=getCurrentOverScrollAmount(true);
  float newTopAmount=currentTopAmount - deltaY;
  if (currentTopAmount > 0) {
    setOverScrollAmount(newTopAmount,true,false);
  }
  float scrollAmount=newTopAmount < 0 ? -newTopAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY > range) {
    if (!mExpandedInThisMotion) {
      float currentBottomPixels=getCurrentOverScrolledPixels(false);
      setOverScrolledPixels(currentBottomPixels + newScrollY - range,false,false);
    }
    setOwnScrollY(range);
    scrollAmount=0.0f;
  }
  return scrollAmount;
}",0.996230479267636
190930,"private void updateScrollability(){
  boolean scrollable=getScrollRange() > 0;
  if (scrollable != mScrollable) {
    mScrollable=scrollable;
    setFocusable(scrollable);
  }
}","private void updateScrollability(){
  boolean scrollable=getScrollRange() > 0;
  if (scrollable != mScrollable) {
    mScrollable=scrollable;
    setFocusable(scrollable);
    updateForwardAndBackwardScrollability();
  }
}",0.8872180451127819
190931,"private void updateForcedScroll(){
  if (mForcedScroll != null && (!mForcedScroll.hasFocus() || !mForcedScroll.isAttachedToWindow())) {
    mForcedScroll=null;
  }
  if (mForcedScroll != null) {
    ExpandableView expandableView=(ExpandableView)mForcedScroll;
    int positionInLinearLayout=getPositionInLinearLayout(expandableView);
    int targetScroll=targetScrollForView(expandableView,positionInLinearLayout);
    int outOfViewScroll=positionInLinearLayout + expandableView.getIntrinsicHeight();
    targetScroll=Math.max(0,Math.min(targetScroll,getScrollRange()));
    if (mOwnScrollY < targetScroll || outOfViewScroll < mOwnScrollY) {
      mOwnScrollY=targetScroll;
    }
  }
}","private void updateForcedScroll(){
  if (mForcedScroll != null && (!mForcedScroll.hasFocus() || !mForcedScroll.isAttachedToWindow())) {
    mForcedScroll=null;
  }
  if (mForcedScroll != null) {
    ExpandableView expandableView=(ExpandableView)mForcedScroll;
    int positionInLinearLayout=getPositionInLinearLayout(expandableView);
    int targetScroll=targetScrollForView(expandableView,positionInLinearLayout);
    int outOfViewScroll=positionInLinearLayout + expandableView.getIntrinsicHeight();
    targetScroll=Math.max(0,Math.min(targetScroll,getScrollRange()));
    if (mOwnScrollY < targetScroll || outOfViewScroll < mOwnScrollY) {
      setOwnScrollY(targetScroll);
    }
  }
}",0.9774217042971596
190932,"/** 
 * Perform a scroll downward and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll downwards, has to be negative.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollDown(int deltaY){
  deltaY=Math.min(deltaY,0);
  float currentBottomAmount=getCurrentOverScrollAmount(false);
  float newBottomAmount=currentBottomAmount + deltaY;
  if (currentBottomAmount > 0) {
    setOverScrollAmount(newBottomAmount,false,false);
  }
  float scrollAmount=newBottomAmount < 0 ? newBottomAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY < 0) {
    float currentTopPixels=getCurrentOverScrolledPixels(true);
    setOverScrolledPixels(currentTopPixels - newScrollY,true,false);
    mOwnScrollY=0;
    scrollAmount=0.0f;
  }
  return scrollAmount;
}","/** 
 * Perform a scroll downward and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll downwards, has to be negative.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollDown(int deltaY){
  deltaY=Math.min(deltaY,0);
  float currentBottomAmount=getCurrentOverScrollAmount(false);
  float newBottomAmount=currentBottomAmount + deltaY;
  if (currentBottomAmount > 0) {
    setOverScrollAmount(newBottomAmount,false,false);
  }
  float scrollAmount=newBottomAmount < 0 ? newBottomAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY < 0) {
    float currentTopPixels=getCurrentOverScrolledPixels(true);
    setOverScrolledPixels(currentTopPixels - newScrollY,true,false);
    setOwnScrollY(0);
    scrollAmount=0.0f;
  }
  return scrollAmount;
}",0.996011396011396
190933,"private void updateScrollStateForAddedChildren(){
  if (mChildrenToAddAnimated.isEmpty()) {
    return;
  }
  for (int i=0; i < getChildCount(); i++) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (mChildrenToAddAnimated.contains(child)) {
      int startingPosition=getPositionInLinearLayout(child);
      int padding=child.getIncreasedPaddingAmount() == 1.0f ? mIncreasedPaddingBetweenElements : mPaddingBetweenElements;
      int childHeight=getIntrinsicHeight(child) + padding;
      if (startingPosition < mOwnScrollY) {
        mOwnScrollY+=childHeight;
      }
    }
  }
  clampScrollPosition();
}","private void updateScrollStateForAddedChildren(){
  if (mChildrenToAddAnimated.isEmpty()) {
    return;
  }
  for (int i=0; i < getChildCount(); i++) {
    ExpandableView child=(ExpandableView)getChildAt(i);
    if (mChildrenToAddAnimated.contains(child)) {
      int startingPosition=getPositionInLinearLayout(child);
      int padding=child.getIncreasedPaddingAmount() == 1.0f ? mIncreasedPaddingBetweenElements : mPaddingBetweenElements;
      int childHeight=getIntrinsicHeight(child) + padding;
      if (startingPosition < mOwnScrollY) {
        setOwnScrollY(mOwnScrollY + childHeight);
      }
    }
  }
  clampScrollPosition();
}",0.984126984126984
190934,"/** 
 * Updates the scroll position when a child was removed
 * @param removedChild the removed child
 */
private void updateScrollStateForRemovedChild(ExpandableView removedChild){
  int startingPosition=getPositionInLinearLayout(removedChild);
  int padding=(int)NotificationUtils.interpolate(mPaddingBetweenElements,mIncreasedPaddingBetweenElements,removedChild.getIncreasedPaddingAmount());
  int childHeight=getIntrinsicHeight(removedChild) + padding;
  int endPosition=startingPosition + childHeight;
  if (endPosition <= mOwnScrollY) {
    mOwnScrollY-=childHeight;
  }
 else   if (startingPosition < mOwnScrollY) {
    mOwnScrollY=startingPosition;
  }
}","/** 
 * Updates the scroll position when a child was removed
 * @param removedChild the removed child
 */
private void updateScrollStateForRemovedChild(ExpandableView removedChild){
  int startingPosition=getPositionInLinearLayout(removedChild);
  int padding=(int)NotificationUtils.interpolate(mPaddingBetweenElements,mIncreasedPaddingBetweenElements,removedChild.getIncreasedPaddingAmount());
  int childHeight=getIntrinsicHeight(removedChild) + padding;
  int endPosition=startingPosition + childHeight;
  if (endPosition <= mOwnScrollY) {
    setOwnScrollY(mOwnScrollY - childHeight);
  }
 else   if (startingPosition < mOwnScrollY) {
    setOwnScrollY(startingPosition);
  }
}",0.9560685033507074
190935,"/** 
 * Fling the scroll view
 * @param velocityY The initial velocity in the Y direction. Positivenumbers mean that the finger/cursor is moving down the screen, which means we want to scroll towards the top.
 */
private void fling(int velocityY){
  if (getChildCount() > 0) {
    int scrollRange=getScrollRange();
    float topAmount=getCurrentOverScrollAmount(true);
    float bottomAmount=getCurrentOverScrollAmount(false);
    if (velocityY < 0 && topAmount > 0) {
      mOwnScrollY-=(int)topAmount;
      mDontReportNextOverScroll=true;
      setOverScrollAmount(0,true,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(true) * mOverflingDistance + topAmount;
    }
 else     if (velocityY > 0 && bottomAmount > 0) {
      mOwnScrollY+=bottomAmount;
      setOverScrollAmount(0,false,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(false) * mOverflingDistance + bottomAmount;
    }
 else {
      mMaxOverScroll=0.0f;
    }
    int minScrollY=Math.max(0,scrollRange);
    if (mExpandedInThisMotion) {
      minScrollY=Math.min(minScrollY,mMaxScrollAfterExpand);
    }
    mScroller.fling(mScrollX,mOwnScrollY,1,velocityY,0,0,0,minScrollY,0,mExpandedInThisMotion && mOwnScrollY >= 0 ? 0 : Integer.MAX_VALUE / 2);
    postInvalidateOnAnimation();
  }
}","/** 
 * Fling the scroll view
 * @param velocityY The initial velocity in the Y direction. Positivenumbers mean that the finger/cursor is moving down the screen, which means we want to scroll towards the top.
 */
private void fling(int velocityY){
  if (getChildCount() > 0) {
    int scrollRange=getScrollRange();
    float topAmount=getCurrentOverScrollAmount(true);
    float bottomAmount=getCurrentOverScrollAmount(false);
    if (velocityY < 0 && topAmount > 0) {
      setOwnScrollY(mOwnScrollY - (int)topAmount);
      mDontReportNextOverScroll=true;
      setOverScrollAmount(0,true,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(true) * mOverflingDistance + topAmount;
    }
 else     if (velocityY > 0 && bottomAmount > 0) {
      setOwnScrollY((int)(mOwnScrollY + bottomAmount));
      setOverScrollAmount(0,false,false);
      mMaxOverScroll=Math.abs(velocityY) / 1000f * getRubberBandFactor(false) * mOverflingDistance + bottomAmount;
    }
 else {
      mMaxOverScroll=0.0f;
    }
    int minScrollY=Math.max(0,scrollRange);
    if (mExpandedInThisMotion) {
      minScrollY=Math.min(minScrollY,mMaxScrollAfterExpand);
    }
    mScroller.fling(mScrollX,mOwnScrollY,1,velocityY,0,0,0,minScrollY,0,mExpandedInThisMotion && mOwnScrollY >= 0 ? 0 : Integer.MAX_VALUE / 2);
    postInvalidateOnAnimation();
  }
}",0.9823772028496438
190936,"public void onExpansionStopped(){
  mIsExpansionChanging=false;
  if (!mIsExpanded) {
    mOwnScrollY=0;
    mPhoneStatusBar.resetUserExpandedStates();
    clearTemporaryViews(this);
    for (int i=0; i < getChildCount(); i++) {
      ExpandableView child=(ExpandableView)getChildAt(i);
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        clearTemporaryViews(row.getChildrenContainer());
      }
    }
  }
}","public void onExpansionStopped(){
  mIsExpansionChanging=false;
  if (!mIsExpanded) {
    setOwnScrollY(0);
    mPhoneStatusBar.resetUserExpandedStates();
    clearTemporaryViews(this);
    for (int i=0; i < getChildCount(); i++) {
      ExpandableView child=(ExpandableView)getChildAt(i);
      if (child instanceof ExpandableNotificationRow) {
        ExpandableNotificationRow row=(ExpandableNotificationRow)child;
        clearTemporaryViews(row.getChildrenContainer());
      }
    }
  }
}",0.3411167512690355
190937,"@Override protected void onOverScrolled(int scrollX,int scrollY,boolean clampedX,boolean clampedY){
  if (!mScroller.isFinished()) {
    final int oldX=mScrollX;
    final int oldY=mOwnScrollY;
    mScrollX=scrollX;
    mOwnScrollY=scrollY;
    if (clampedY) {
      springBack();
    }
 else {
      onScrollChanged(mScrollX,mOwnScrollY,oldX,oldY);
      invalidateParentIfNeeded();
      updateChildren();
      float overScrollTop=getCurrentOverScrollAmount(true);
      if (mOwnScrollY < 0) {
        notifyOverscrollTopListener(-mOwnScrollY,isRubberbanded(true));
      }
 else {
        notifyOverscrollTopListener(overScrollTop,isRubberbanded(true));
      }
    }
  }
 else {
    customScrollTo(scrollY);
    scrollTo(scrollX,mScrollY);
  }
}","@Override protected void onOverScrolled(int scrollX,int scrollY,boolean clampedX,boolean clampedY){
  if (!mScroller.isFinished()) {
    final int oldX=mScrollX;
    final int oldY=mOwnScrollY;
    mScrollX=scrollX;
    setOwnScrollY(scrollY);
    if (clampedY) {
      springBack();
    }
 else {
      onScrollChanged(mScrollX,mOwnScrollY,oldX,oldY);
      invalidateParentIfNeeded();
      updateChildren();
      float overScrollTop=getCurrentOverScrollAmount(true);
      if (mOwnScrollY < 0) {
        notifyOverscrollTopListener(-mOwnScrollY,isRubberbanded(true));
      }
 else {
        notifyOverscrollTopListener(overScrollTop,isRubberbanded(true));
      }
    }
  }
 else {
    customScrollTo(scrollY);
    scrollTo(scrollX,mScrollY);
  }
}",0.9860279441117764
190938,"private void clampScrollPosition(){
  int scrollRange=getScrollRange();
  if (scrollRange < mOwnScrollY) {
    mOwnScrollY=scrollRange;
  }
}","private void clampScrollPosition(){
  int scrollRange=getScrollRange();
  if (scrollRange < mOwnScrollY) {
    setOwnScrollY(scrollRange);
  }
}",0.975438596491228
190939,"private void customScrollTo(int y){
  mOwnScrollY=y;
  updateChildren();
}","private void customScrollTo(int y){
  setOwnScrollY(y);
  updateChildren();
}",0.9536423841059604
190940,"public void resetScrollPosition(){
  mScroller.abortAnimation();
  mOwnScrollY=0;
}","public void resetScrollPosition(){
  mScroller.abortAnimation();
  setOwnScrollY(0);
}",0.9585798816568049
190941,"private void springBack(){
  int scrollRange=getScrollRange();
  boolean overScrolledTop=mOwnScrollY <= 0;
  boolean overScrolledBottom=mOwnScrollY >= scrollRange;
  if (overScrolledTop || overScrolledBottom) {
    boolean onTop;
    float newAmount;
    if (overScrolledTop) {
      onTop=true;
      newAmount=-mOwnScrollY;
      mOwnScrollY=0;
      mDontReportNextOverScroll=true;
    }
 else {
      onTop=false;
      newAmount=mOwnScrollY - scrollRange;
      mOwnScrollY=scrollRange;
    }
    setOverScrollAmount(newAmount,onTop,false);
    setOverScrollAmount(0.0f,onTop,true);
    mScroller.forceFinished(true);
  }
}","private void springBack(){
  int scrollRange=getScrollRange();
  boolean overScrolledTop=mOwnScrollY <= 0;
  boolean overScrolledBottom=mOwnScrollY >= scrollRange;
  if (overScrolledTop || overScrolledBottom) {
    boolean onTop;
    float newAmount;
    if (overScrolledTop) {
      onTop=true;
      newAmount=-mOwnScrollY;
      setOwnScrollY(0);
      mDontReportNextOverScroll=true;
    }
 else {
      onTop=false;
      newAmount=mOwnScrollY - scrollRange;
      setOwnScrollY(scrollRange);
    }
    setOverScrollAmount(newAmount,onTop,false);
    setOverScrollAmount(0.0f,onTop,true);
    mScroller.forceFinished(true);
  }
}",0.9889064976228208
190942,"private void updateScrollPositionOnExpandInBottom(ExpandableView view){
  if (view instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    if (row.isUserLocked() && row != getFirstChildNotGone()) {
      if (row.isSummaryWithChildren()) {
        return;
      }
      float endPosition=row.getTranslationY() + row.getActualHeight();
      if (row.isChildInGroup()) {
        endPosition+=row.getNotificationParent().getTranslationY();
      }
      int stackEnd=getStackEndPosition();
      if (endPosition > stackEnd) {
        mOwnScrollY+=endPosition - stackEnd;
        mDisallowScrollingInThisMotion=true;
      }
    }
  }
}","private void updateScrollPositionOnExpandInBottom(ExpandableView view){
  if (view instanceof ExpandableNotificationRow) {
    ExpandableNotificationRow row=(ExpandableNotificationRow)view;
    if (row.isUserLocked() && row != getFirstChildNotGone()) {
      if (row.isSummaryWithChildren()) {
        return;
      }
      float endPosition=row.getTranslationY() + row.getActualHeight();
      if (row.isChildInGroup()) {
        endPosition+=row.getNotificationParent().getTranslationY();
      }
      int stackEnd=getStackEndPosition();
      if (endPosition > stackEnd) {
        setOwnScrollY((int)(mOwnScrollY + endPosition - stackEnd));
        mDisallowScrollingInThisMotion=true;
      }
    }
  }
}",0.982078853046595
190943,"@Override public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfoInternal(info);
  final int scrollRange=getScrollRange();
  if (scrollRange > 0) {
    info.setScrollable(true);
    if (mScrollY > 0) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_UP);
    }
    if (mScrollY < scrollRange) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_DOWN);
    }
  }
  info.setClassName(ScrollView.class.getName());
}","@Override public void onInitializeAccessibilityNodeInfoInternal(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfoInternal(info);
  if (mScrollable) {
    info.setScrollable(true);
    if (mBackwardScrollable) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_BACKWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_UP);
    }
    if (mForwardScrollable) {
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_FORWARD);
      info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SCROLL_DOWN);
    }
  }
  info.setClassName(ScrollView.class.getName());
}",0.8530050687907313
190944,"/** 
 * Perform a scroll upwards and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll upwards, has to be positive.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollUp(int deltaY,int range){
  deltaY=Math.max(deltaY,0);
  float currentTopAmount=getCurrentOverScrollAmount(true);
  float newTopAmount=currentTopAmount - deltaY;
  if (currentTopAmount > 0) {
    setOverScrollAmount(newTopAmount,true,false);
  }
  float scrollAmount=newTopAmount < 0 ? -newTopAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY > range) {
    if (!mExpandedInThisMotion) {
      float currentBottomPixels=getCurrentOverScrolledPixels(false);
      setOverScrolledPixels(currentBottomPixels + newScrollY - range,false,false);
    }
    mOwnScrollY=range;
    scrollAmount=0.0f;
  }
  return scrollAmount;
}","/** 
 * Perform a scroll upwards and adapt the overscroll amounts accordingly
 * @param deltaY The amount to scroll upwards, has to be positive.
 * @return The amount of scrolling to be performed by the scroller,not handled by the overScroll amount.
 */
private float overScrollUp(int deltaY,int range){
  deltaY=Math.max(deltaY,0);
  float currentTopAmount=getCurrentOverScrollAmount(true);
  float newTopAmount=currentTopAmount - deltaY;
  if (currentTopAmount > 0) {
    setOverScrollAmount(newTopAmount,true,false);
  }
  float scrollAmount=newTopAmount < 0 ? -newTopAmount : 0.0f;
  float newScrollY=mOwnScrollY + scrollAmount;
  if (newScrollY > range) {
    if (!mExpandedInThisMotion) {
      float currentBottomPixels=getCurrentOverScrolledPixels(false);
      setOverScrolledPixels(currentBottomPixels + newScrollY - range,false,false);
    }
    setOwnScrollY(range);
    scrollAmount=0.0f;
  }
  return scrollAmount;
}",0.996230479267636
190945,"int onShellCommand(Shell shell,String cmd){
  PrintWriter pw=shell.getOutPrintWriter();
  if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          stepIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(stateToString(mState));
        }
 else         if (""String_Node_Str"".equals(arg)) {
          stepLightIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(lightStateToString(mLightState));
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          if (!mDeepEnabled) {
            pw.println(""String_Node_Str"");
            return -1;
          }
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curState=mState;
          while (curState != STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curState == mState) {
              pw.print(""String_Node_Str"");
              pw.println(stateToString(mState));
              exitForceIdleLocked();
              return -1;
            }
            curState=mState;
          }
          pw.println(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(arg)) {
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curLightState=mLightState;
          while (curLightState != LIGHT_STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curLightState == mLightState) {
              pw.print(""String_Node_Str"");
              pw.println(lightStateToString(mLightState));
              exitForceIdleLocked();
              return -1;
            }
            curLightState=mLightState;
          }
          pw.println(""String_Node_Str"");
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        mForceIdle=true;
        becomeInactiveIfAppropriateLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        exitForceIdleLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      String arg=shell.getNextArg();
      if (arg != null) {
        long token=Binder.clearCallingIdentity();
        try {
switch (arg) {
case ""String_Node_Str"":
            pw.println(lightStateToString(mLightState));
          break;
case ""String_Node_Str"":
        pw.println(stateToString(mState));
      break;
case ""String_Node_Str"":
    pw.println(mForceIdle);
  break;
case ""String_Node_Str"":
pw.println(mScreenOn);
break;
case ""String_Node_Str"":
pw.println(mCharging);
break;
case ""String_Node_Str"":
pw.println(mNetworkConnected);
break;
default :
pw.println(""String_Node_Str"" + arg);
break;
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
pw.println(""String_Node_Str"");
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeActive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mDeepEnabled) {
mDeepEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mLightEnabled) {
mLightEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeActive) {
becomeActiveLocked((arg == null ? ""String_Node_Str"" : arg) + ""String_Node_Str"",Process.myUid());
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeInactive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mDeepEnabled) {
mDeepEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mLightEnabled) {
mLightEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeInactive) {
becomeInactiveIfAppropriateLocked();
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
synchronized (this) {
String arg=shell.getNextArg();
if (arg == null || ""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled && mLightEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mLightEnabled ? ""String_Node_Str"" : 0);
}
 else {
pw.println(""String_Node_Str"" + arg);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
long token=Binder.clearCallingIdentity();
try {
String arg=shell.getNextArg();
if (arg != null) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
do {
if (arg.length() < 1 || (arg.charAt(0) != '-' && arg.charAt(0) != '+' && arg.charAt(0) != '=')) {
pw.println(""String_Node_Str"" + arg);
return -1;
}
char op=arg.charAt(0);
String pkg=arg.substring(1);
if (op == '+') {
if (addPowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
 else {
pw.println(""String_Node_Str"" + pkg);
}
}
 else if (op == '-') {
if (removePowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
}
 else {
pw.println(getPowerSaveWhitelistAppInternal(pkg));
}
}
 while ((arg=shell.getNextArg()) != null);
}
 else {
synchronized (this) {
for (int j=0; j < mPowerSaveWhitelistAppsExceptIdle.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistAppsExceptIdle.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistAppsExceptIdle.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistApps.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistUserApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistUserApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistUserApps.valueAt(j));
}
}
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String opt;
while ((opt=shell.getNextOption()) != null) {
if (""String_Node_Str"".equals(opt)) {
opt=shell.getNextArg();
if (opt == null) {
pw.println(""String_Node_Str"");
return -1;
}
shell.userId=Integer.parseInt(opt);
}
}
String arg=shell.getNextArg();
if (arg != null) {
try {
addPowerSaveTempWhitelistAppChecked(arg,10000L,shell.userId,""String_Node_Str"");
}
 catch (RemoteException re) {
pw.println(""String_Node_Str"" + re);
}
}
 else {
dumpTempWhitelistSchedule(pw,false);
}
}
 else {
return shell.handleDefaultCommands(cmd);
}
return 0;
}","int onShellCommand(Shell shell,String cmd){
  PrintWriter pw=shell.getOutPrintWriter();
  if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          stepIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(stateToString(mState));
        }
 else         if (""String_Node_Str"".equals(arg)) {
          stepLightIdleStateLocked(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.println(lightStateToString(mLightState));
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      String arg=shell.getNextArg();
      try {
        if (arg == null || ""String_Node_Str"".equals(arg)) {
          if (!mDeepEnabled) {
            pw.println(""String_Node_Str"");
            return -1;
          }
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curState=mState;
          while (curState != STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curState == mState) {
              pw.print(""String_Node_Str"");
              pw.println(stateToString(mState));
              exitForceIdleLocked();
              return -1;
            }
            curState=mState;
          }
          pw.println(""String_Node_Str"");
        }
 else         if (""String_Node_Str"".equals(arg)) {
          mForceIdle=true;
          becomeInactiveIfAppropriateLocked();
          int curLightState=mLightState;
          while (curLightState != LIGHT_STATE_IDLE) {
            stepIdleStateLocked(""String_Node_Str"");
            if (curLightState == mLightState) {
              pw.print(""String_Node_Str"");
              pw.println(lightStateToString(mLightState));
              exitForceIdleLocked();
              return -1;
            }
            curLightState=mLightState;
          }
          pw.println(""String_Node_Str"");
        }
 else {
          pw.println(""String_Node_Str"" + arg);
        }
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        mForceIdle=true;
        becomeInactiveIfAppropriateLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      long token=Binder.clearCallingIdentity();
      try {
        exitForceIdleLocked();
        pw.print(""String_Node_Str"");
        pw.print(lightStateToString(mLightState));
        pw.print(""String_Node_Str"");
        pw.println(stateToString(mState));
      }
  finally {
        Binder.restoreCallingIdentity(token);
      }
    }
  }
 else   if (""String_Node_Str"".equals(cmd)) {
    getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
      String arg=shell.getNextArg();
      if (arg != null) {
        long token=Binder.clearCallingIdentity();
        try {
switch (arg) {
case ""String_Node_Str"":
            pw.println(lightStateToString(mLightState));
          break;
case ""String_Node_Str"":
        pw.println(stateToString(mState));
      break;
case ""String_Node_Str"":
    pw.println(mForceIdle);
  break;
case ""String_Node_Str"":
pw.println(mScreenOn);
break;
case ""String_Node_Str"":
pw.println(mCharging);
break;
case ""String_Node_Str"":
pw.println(mNetworkConnected);
break;
default :
pw.println(""String_Node_Str"" + arg);
break;
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
pw.println(""String_Node_Str"");
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeActive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mDeepEnabled) {
mDeepEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (mLightEnabled) {
mLightEnabled=false;
becomeActive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeActive) {
becomeActiveLocked((arg == null ? ""String_Node_Str"" : arg) + ""String_Node_Str"",Process.myUid());
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
synchronized (this) {
long token=Binder.clearCallingIdentity();
String arg=shell.getNextArg();
try {
boolean becomeInactive=false;
boolean valid=false;
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mDeepEnabled) {
mDeepEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (arg == null || ""String_Node_Str"".equals(arg) || ""String_Node_Str"".equals(arg)) {
valid=true;
if (!mLightEnabled) {
mLightEnabled=true;
becomeInactive=true;
pw.println(""String_Node_Str"");
}
}
if (becomeInactive) {
becomeInactiveIfAppropriateLocked();
}
if (!valid) {
pw.println(""String_Node_Str"" + arg);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
synchronized (this) {
String arg=shell.getNextArg();
if (arg == null || ""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled && mLightEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mDeepEnabled ? ""String_Node_Str"" : 0);
}
 else if (""String_Node_Str"".equals(arg)) {
pw.println(mLightEnabled ? ""String_Node_Str"" : 0);
}
 else {
pw.println(""String_Node_Str"" + arg);
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String arg=shell.getNextArg();
if (arg != null) {
getContext().enforceCallingOrSelfPermission(android.Manifest.permission.DEVICE_POWER,null);
long token=Binder.clearCallingIdentity();
try {
do {
if (arg.length() < 1 || (arg.charAt(0) != '-' && arg.charAt(0) != '+' && arg.charAt(0) != '=')) {
pw.println(""String_Node_Str"" + arg);
return -1;
}
char op=arg.charAt(0);
String pkg=arg.substring(1);
if (op == '+') {
if (addPowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
 else {
pw.println(""String_Node_Str"" + pkg);
}
}
 else if (op == '-') {
if (removePowerSaveWhitelistAppInternal(pkg)) {
pw.println(""String_Node_Str"" + pkg);
}
}
 else {
pw.println(getPowerSaveWhitelistAppInternal(pkg));
}
}
 while ((arg=shell.getNextArg()) != null);
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
 else {
synchronized (this) {
for (int j=0; j < mPowerSaveWhitelistAppsExceptIdle.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistAppsExceptIdle.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistAppsExceptIdle.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistApps.valueAt(j));
}
for (int j=0; j < mPowerSaveWhitelistUserApps.size(); j++) {
pw.print(""String_Node_Str"");
pw.print(mPowerSaveWhitelistUserApps.keyAt(j));
pw.print(""String_Node_Str"");
pw.println(mPowerSaveWhitelistUserApps.valueAt(j));
}
}
}
}
 else if (""String_Node_Str"".equals(cmd)) {
String opt;
while ((opt=shell.getNextOption()) != null) {
if (""String_Node_Str"".equals(opt)) {
opt=shell.getNextArg();
if (opt == null) {
pw.println(""String_Node_Str"");
return -1;
}
shell.userId=Integer.parseInt(opt);
}
}
String arg=shell.getNextArg();
if (arg != null) {
try {
addPowerSaveTempWhitelistAppChecked(arg,10000L,shell.userId,""String_Node_Str"");
}
 catch (RemoteException re) {
pw.println(""String_Node_Str"" + re);
}
}
 else {
dumpTempWhitelistSchedule(pw,false);
}
}
 else {
return shell.handleDefaultCommands(cmd);
}
return 0;
}",0.9884849853240008
190946,"private int calculatePanelHeightQsExpanded(){
  float notificationHeight=mNotificationStackScroller.getHeight() - mNotificationStackScroller.getEmptyBottomMargin() - mNotificationStackScroller.getTopPadding();
  if (mNotificationStackScroller.getNotGoneChildCount() == 0 && mShadeEmpty) {
    notificationHeight=mNotificationStackScroller.getEmptyShadeViewHeight() + mNotificationStackScroller.getBottomStackPeekSize() + mNotificationStackScroller.getBottomStackSlowDownHeight();
  }
  int maxQsHeight=mQsMaxExpansionHeight;
  if (mQsSizeChangeAnimator != null) {
    maxQsHeight=(int)mQsSizeChangeAnimator.getAnimatedValue();
  }
  float totalHeight=Math.max(maxQsHeight,mStatusBarState == StatusBarState.KEYGUARD ? mClockPositionResult.stackScrollerPadding - mTopPaddingAdjustment : 0) + notificationHeight;
  if (totalHeight > mNotificationStackScroller.getHeight()) {
    float fullyCollapsedHeight=maxQsHeight + mNotificationStackScroller.getLayoutMinHeight();
    totalHeight=Math.max(fullyCollapsedHeight,mNotificationStackScroller.getHeight());
  }
  return (int)totalHeight;
}","private int calculatePanelHeightQsExpanded(){
  float notificationHeight=mNotificationStackScroller.getHeight() - mNotificationStackScroller.getEmptyBottomMargin() - mNotificationStackScroller.getTopPadding();
  if (mNotificationStackScroller.getNotGoneChildCount() == 0 && mShadeEmpty) {
    notificationHeight=mNotificationStackScroller.getEmptyShadeViewHeight() + mNotificationStackScroller.getBottomStackPeekSize() + mNotificationStackScroller.getBottomStackSlowDownHeight();
  }
  int maxQsHeight=mQsMaxExpansionHeight;
  if (mQsSizeChangeAnimator != null) {
    maxQsHeight=(int)mQsSizeChangeAnimator.getAnimatedValue();
  }
  float totalHeight=Math.max(maxQsHeight,mStatusBarState == StatusBarState.KEYGUARD ? mClockPositionResult.stackScrollerPadding - mTopPaddingAdjustment : 0) + notificationHeight + mNotificationStackScroller.getTopPaddingOverflow();
  if (totalHeight > mNotificationStackScroller.getHeight()) {
    float fullyCollapsedHeight=maxQsHeight + mNotificationStackScroller.getLayoutMinHeight();
    totalHeight=Math.max(fullyCollapsedHeight,mNotificationStackScroller.getHeight());
  }
  return (int)totalHeight;
}",0.9761583445793972
190947,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  mKeyguardStatusView.setPivotX(getWidth() / 2);
  mKeyguardStatusView.setPivotY((FONT_HEIGHT - CAP_HEIGHT) / 2048f * mClockView.getTextSize());
  int oldMaxHeight=mQsMaxExpansionHeight;
  mQsMinExpansionHeight=mKeyguardShowing ? 0 : mQsContainer.getQsMinExpansionHeight();
  mQsMaxExpansionHeight=mQsContainer.getDesiredHeight();
  positionClockAndNotifications();
  if (mQsExpanded && mQsFullyExpanded) {
    mQsExpansionHeight=mQsMaxExpansionHeight;
    requestScrollerTopPaddingUpdate(false);
    requestPanelHeightUpdate();
    if (mQsMaxExpansionHeight != oldMaxHeight) {
      startQsSizeChangeAnimation(oldMaxHeight,mQsMaxExpansionHeight);
    }
  }
 else   if (!mQsExpanded) {
    setQsExpansion(mQsMinExpansionHeight + mLastOverscroll);
  }
  updateStackHeight(getExpandedHeight());
  updateHeader();
  if (mQsSizeChangeAnimator == null) {
    mQsContainer.setHeightOverride(mQsContainer.getDesiredHeight());
  }
  updateMaxHeadsUpTranslation();
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  mKeyguardStatusView.setPivotX(getWidth() / 2);
  mKeyguardStatusView.setPivotY((FONT_HEIGHT - CAP_HEIGHT) / 2048f * mClockView.getTextSize());
  int oldMaxHeight=mQsMaxExpansionHeight;
  mQsMinExpansionHeight=mKeyguardShowing ? 0 : mQsContainer.getQsMinExpansionHeight();
  mQsMaxExpansionHeight=mQsContainer.getDesiredHeight();
  positionClockAndNotifications();
  if (mQsExpanded && mQsFullyExpanded) {
    mQsExpansionHeight=mQsMaxExpansionHeight;
    requestScrollerTopPaddingUpdate(false);
    requestPanelHeightUpdate();
    if (mQsMaxExpansionHeight != oldMaxHeight) {
      startQsSizeChangeAnimation(oldMaxHeight,mQsMaxExpansionHeight);
    }
  }
 else   if (!mQsExpanded) {
    setQsExpansion(mQsMinExpansionHeight + mLastOverscroll);
  }
  updateExpandedHeight(getExpandedHeight());
  updateHeader();
  if (mQsSizeChangeAnimator == null) {
    mQsContainer.setHeightOverride(mQsContainer.getDesiredHeight());
  }
  updateMaxHeadsUpTranslation();
}",0.9940774487471526
190948,"@Override protected void onHeightUpdated(float expandedHeight){
  if (!mQsExpanded || mQsExpandImmediate || mIsExpanding && mQsExpandedWhenExpandingStarted) {
    positionClockAndNotifications();
  }
  if (mQsExpandImmediate || mQsExpanded && !mQsTracking && mQsExpansionAnimator == null && !mQsExpansionFromOverscroll) {
    float t;
    if (mKeyguardShowing) {
      t=expandedHeight / getMaxPanelHeight();
    }
 else {
      float panelHeightQsCollapsed=mNotificationStackScroller.getIntrinsicPadding() + mNotificationStackScroller.getLayoutMinHeight();
      float panelHeightQsExpanded=calculatePanelHeightQsExpanded();
      t=(expandedHeight - panelHeightQsCollapsed) / (panelHeightQsExpanded - panelHeightQsCollapsed);
    }
    setQsExpansion(mQsMinExpansionHeight + t * (getTempQsMaxExpansion() - mQsMinExpansionHeight));
  }
  updateStackHeight(expandedHeight);
  updateHeader();
  updateUnlockIcon();
  updateNotificationTranslucency();
  updatePanelExpanded();
  mNotificationStackScroller.setShadeExpanded(!isFullyCollapsed());
  if (DEBUG) {
    invalidate();
  }
}","@Override protected void onHeightUpdated(float expandedHeight){
  if (!mQsExpanded || mQsExpandImmediate || mIsExpanding && mQsExpandedWhenExpandingStarted) {
    positionClockAndNotifications();
  }
  if (mQsExpandImmediate || mQsExpanded && !mQsTracking && mQsExpansionAnimator == null && !mQsExpansionFromOverscroll) {
    float t;
    if (mKeyguardShowing) {
      t=expandedHeight / getMaxPanelHeight();
    }
 else {
      float panelHeightQsCollapsed=mNotificationStackScroller.getIntrinsicPadding() + mNotificationStackScroller.getLayoutMinHeight();
      float panelHeightQsExpanded=calculatePanelHeightQsExpanded();
      t=(expandedHeight - panelHeightQsCollapsed) / (panelHeightQsExpanded - panelHeightQsCollapsed);
    }
    setQsExpansion(mQsMinExpansionHeight + t * (getTempQsMaxExpansion() - mQsMinExpansionHeight));
  }
  updateExpandedHeight(expandedHeight);
  updateHeader();
  updateUnlockIcon();
  updateNotificationTranslucency();
  updatePanelExpanded();
  mNotificationStackScroller.setShadeExpanded(!isFullyCollapsed());
  if (DEBUG) {
    invalidate();
  }
}",0.9939953810623556
190949,"@Override public void onHeightChanged(ExpandableView view,boolean needsAnimation){
  if (view == null && mQsExpanded) {
    return;
  }
  requestPanelHeightUpdate();
}","@Override public void onHeightChanged(ExpandableView view,boolean needsAnimation){
  if (view == null && mQsExpanded) {
    return;
  }
  ExpandableView firstChildNotGone=mNotificationStackScroller.getFirstChildNotGone();
  ExpandableNotificationRow firstRow=firstChildNotGone instanceof ExpandableNotificationRow ? (ExpandableNotificationRow)firstChildNotGone : null;
  if (firstRow != null && (view == firstRow || (firstRow.getNotificationParent() == firstRow))) {
    requestScrollerTopPaddingUpdate(false);
  }
  requestPanelHeightUpdate();
}",0.4684431977559607
190950,"/** 
 * Positions the clock and notifications dynamically depending on how many notifications are showing.
 */
private void positionClockAndNotifications(){
  boolean animate=mNotificationStackScroller.isAddOrRemoveAnimationPending();
  int stackScrollerPadding;
  if (mStatusBarState != StatusBarState.KEYGUARD) {
    int bottom=mQsContainer.getHeader().getHeight();
    stackScrollerPadding=mStatusBarState == StatusBarState.SHADE ? bottom + mQsPeekHeight : mKeyguardStatusBar.getHeight();
    mTopPaddingAdjustment=0;
  }
 else {
    mClockPositionAlgorithm.setup(mStatusBar.getMaxKeyguardNotifications(),getMaxPanelHeight(),getExpandedHeight(),mNotificationStackScroller.getNotGoneChildCount(),getHeight(),mKeyguardStatusView.getHeight(),mEmptyDragAmount);
    mClockPositionAlgorithm.run(mClockPositionResult);
    if (animate || mClockAnimator != null) {
      startClockAnimation(mClockPositionResult.clockY);
    }
 else {
      mKeyguardStatusView.setY(mClockPositionResult.clockY);
    }
    updateClock(mClockPositionResult.clockAlpha,mClockPositionResult.clockScale);
    stackScrollerPadding=mClockPositionResult.stackScrollerPadding;
    mTopPaddingAdjustment=mClockPositionResult.stackScrollerPaddingAdjustment;
  }
  mNotificationStackScroller.setIntrinsicPadding(stackScrollerPadding);
  requestScrollerTopPaddingUpdate(animate);
}","/** 
 * Positions the clock and notifications dynamically depending on how many notifications are showing.
 */
private void positionClockAndNotifications(){
  boolean animate=mNotificationStackScroller.isAddOrRemoveAnimationPending();
  int stackScrollerPadding;
  if (mStatusBarState != StatusBarState.KEYGUARD) {
    stackScrollerPadding=mQsContainer.getHeader().getHeight() + mQsPeekHeight;
    mTopPaddingAdjustment=0;
  }
 else {
    mClockPositionAlgorithm.setup(mStatusBar.getMaxKeyguardNotifications(),getMaxPanelHeight(),getExpandedHeight(),mNotificationStackScroller.getNotGoneChildCount(),getHeight(),mKeyguardStatusView.getHeight(),mEmptyDragAmount);
    mClockPositionAlgorithm.run(mClockPositionResult);
    if (animate || mClockAnimator != null) {
      startClockAnimation(mClockPositionResult.clockY);
    }
 else {
      mKeyguardStatusView.setY(mClockPositionResult.clockY);
    }
    updateClock(mClockPositionResult.clockAlpha,mClockPositionResult.clockScale);
    stackScrollerPadding=mClockPositionResult.stackScrollerPadding;
    mTopPaddingAdjustment=mClockPositionResult.stackScrollerPaddingAdjustment;
  }
  mNotificationStackScroller.setIntrinsicPadding(stackScrollerPadding);
  requestScrollerTopPaddingUpdate(animate);
}",0.939183987682833
190951,"private void updateQsState(){
  mQsContainer.setExpanded(mQsExpanded);
  mNotificationStackScroller.setScrollingEnabled(mStatusBarState != StatusBarState.KEYGUARD && (!mQsExpanded || mQsExpansionFromOverscroll));
  updateEmptyShadeView();
  mQsNavbarScrim.setVisibility(mStatusBarState == StatusBarState.SHADE && mQsExpanded && !mStackScrollerOverscrolling && mQsScrimEnabled ? View.VISIBLE : View.INVISIBLE);
  if (mKeyguardUserSwitcher != null && mQsExpanded && !mStackScrollerOverscrolling) {
    mKeyguardUserSwitcher.hideIfNotSimple(true);
  }
}","private void updateQsState(){
  mQsContainer.setExpanded(mQsExpanded);
  mNotificationStackScroller.setQsExpanded(mQsExpanded);
  mNotificationStackScroller.setScrollingEnabled(mStatusBarState != StatusBarState.KEYGUARD && (!mQsExpanded || mQsExpansionFromOverscroll));
  updateEmptyShadeView();
  mQsNavbarScrim.setVisibility(mStatusBarState == StatusBarState.SHADE && mQsExpanded && !mStackScrollerOverscrolling && mQsScrimEnabled ? View.VISIBLE : View.INVISIBLE);
  if (mKeyguardUserSwitcher != null && mQsExpanded && !mStackScrollerOverscrolling) {
    mKeyguardUserSwitcher.hideIfNotSimple(true);
  }
}",0.9507346585998272
190952,"public int getInnerHeight(){
  return mLayoutHeight - mTopPadding;
}","public int getInnerHeight(){
  return Math.max(mLayoutHeight - mTopPadding,mLayoutMinHeight);
}",0.8343558282208589
190953,"private void snapToGear(View animView,float velocity){
  final float snapBackThreshold=getSpaceForGear(animView);
  final float target=mCurrIconRow.isIconOnLeft() ? snapBackThreshold : -snapBackThreshold;
  mGearExposedView=mTranslatingParentView;
  if (animView instanceof ExpandableNotificationRow) {
    MetricsLogger.action(mContext,MetricsEvent.ACTION_REVEAL_GEAR,((ExpandableNotificationRow)animView).getStatusBarNotification().getPackageName());
  }
  if (mCurrIconRow != null) {
    mCurrIconRow.setSnapping(true);
    setSnappedToGear(true);
  }
  onDragCancelled(animView);
  if (mPhoneStatusBar.getBarState() == StatusBarState.KEYGUARD) {
    mHandler.removeCallbacks(mFalsingCheck);
    mHandler.postDelayed(mFalsingCheck,COVER_GEAR_DELAY);
  }
  super.snapChild(animView,target,velocity);
}","private void snapToGear(View animView,float velocity){
  final float snapBackThreshold=getSpaceForGear(animView);
  final float target=mCurrIconRow.isIconOnLeft() ? snapBackThreshold : -snapBackThreshold;
  mGearExposedView=mTranslatingParentView;
  if (animView instanceof ExpandableNotificationRow) {
    MetricsLogger.action(mContext,MetricsEvent.ACTION_REVEAL_GEAR,((ExpandableNotificationRow)animView).getStatusBarNotification().getPackageName());
  }
  if (mCurrIconRow != null) {
    mCurrIconRow.setSnapping(true);
    setSnappedToGear(true);
  }
  onDragCancelled(animView);
  if (isAntiFalsingNeeded()) {
    mHandler.removeCallbacks(mFalsingCheck);
    mHandler.postDelayed(mFalsingCheck,COVER_GEAR_DELAY);
  }
  super.snapChild(animView,target,velocity);
}",0.9522597071928708
190954,"@Override public void onHeightChanged(ExpandableView view,boolean needsAnimation){
  updateContentHeight();
  updateScrollPositionOnExpandInBottom(view);
  clampScrollPosition();
  notifyHeightChangeListener(view);
  if (needsAnimation) {
    ExpandableNotificationRow row=view instanceof ExpandableNotificationRow ? (ExpandableNotificationRow)view : null;
    requestAnimationOnViewResize(row);
  }
  requestChildrenUpdate();
}","@Override public void onHeightChanged(ExpandableView view,boolean needsAnimation){
  updateContentHeight();
  updateScrollPositionOnExpandInBottom(view);
  clampScrollPosition();
  notifyHeightChangeListener(view);
  ExpandableNotificationRow row=view instanceof ExpandableNotificationRow ? (ExpandableNotificationRow)view : null;
  if (row != null && (row == mFirstVisibleBackgroundChild || row.getNotificationParent() == mFirstVisibleBackgroundChild)) {
    updateAlgorithmLayoutMinHeight();
  }
  if (needsAnimation) {
    requestAnimationOnViewResize(row);
  }
  requestChildrenUpdate();
}",0.7874632713026445
190955,"private int findDarkAnimationOriginIndex(@Nullable PointF screenLocation){
  if (screenLocation == null || screenLocation.y < mTopPadding + mTopPaddingOverflow) {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_ABOVE;
  }
  if (screenLocation.y > getBottomMostNotificationBottom()) {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_BELOW;
  }
  View child=getClosestChildAtRawPosition(screenLocation.x,screenLocation.y);
  if (child != null) {
    return getNotGoneIndex(child);
  }
 else {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_ABOVE;
  }
}","private int findDarkAnimationOriginIndex(@Nullable PointF screenLocation){
  if (screenLocation == null || screenLocation.y < mTopPadding) {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_ABOVE;
  }
  if (screenLocation.y > getBottomMostNotificationBottom()) {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_BELOW;
  }
  View child=getClosestChildAtRawPosition(screenLocation.x,screenLocation.y);
  if (child != null) {
    return getNotGoneIndex(child);
  }
 else {
    return AnimationEvent.DARK_ANIMATION_ORIGIN_INDEX_ABOVE;
  }
}",0.9802867383512543
190956,"/** 
 * Updates the top padding of the notifications, taking   {@link #getIntrinsicPadding()} intoaccount.
 * @param qsHeight the top padding imposed by the quick settings panel
 * @param animate whether to animate the change
 * @param ignoreIntrinsicPadding if true, {@link #getIntrinsicPadding()} is ignored and{@code qsHeight} is the final top padding
 */
public void updateTopPadding(float qsHeight,boolean animate,boolean ignoreIntrinsicPadding){
  float start=qsHeight;
  float stackHeight=getHeight() - start;
  int minStackHeight=getLayoutMinHeight();
  if (stackHeight <= minStackHeight) {
    float overflow=minStackHeight - stackHeight;
    stackHeight=minStackHeight;
    start=getHeight() - stackHeight;
    mTopPaddingOverflow=overflow;
  }
 else {
    mTopPaddingOverflow=0;
  }
  setTopPadding(ignoreIntrinsicPadding ? (int)start : clampPadding((int)start),animate);
  setStackHeight(mLastSetStackHeight);
}","/** 
 * Updates the top padding of the notifications, taking   {@link #getIntrinsicPadding()} intoaccount.
 * @param qsHeight the top padding imposed by the quick settings panel
 * @param animate whether to animate the change
 * @param ignoreIntrinsicPadding if true, {@link #getIntrinsicPadding()} is ignored and{@code qsHeight} is the final top padding
 */
public void updateTopPadding(float qsHeight,boolean animate,boolean ignoreIntrinsicPadding){
  int topPadding=(int)qsHeight;
  int minStackHeight=getLayoutMinHeight();
  if (topPadding + minStackHeight > getHeight()) {
    mTopPaddingOverflow=topPadding + minStackHeight - getHeight();
  }
 else {
    mTopPaddingOverflow=0;
  }
  setTopPadding(ignoreIntrinsicPadding ? topPadding : clampPadding(topPadding),animate);
  setExpandedHeight(mExpandedHeight);
}",0.7211040828062104
190957,"public int getLayoutMinHeight(){
  int firstChildMinHeight=getFirstChildIntrinsicHeight();
  return Math.min(firstChildMinHeight + mBottomStackPeekSize + mBottomStackSlowDownHeight,mMaxLayoutHeight - mTopPadding);
}","public int getLayoutMinHeight(){
  int firstChildMinHeight=getFirstChildIntrinsicHeight();
  return Math.min(firstChildMinHeight + mBottomStackPeekSize + mBottomStackSlowDownHeight,mMaxLayoutHeight - mIntrinsicPadding);
}",0.9724770642201837
190958,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  float centerX=getWidth() / 2.0f;
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    float width=child.getMeasuredWidth();
    float height=child.getMeasuredHeight();
    child.layout((int)(centerX - width / 2.0f),0,(int)(centerX + width / 2.0f),(int)height);
  }
  setMaxLayoutHeight(getHeight());
  updateContentHeight();
  clampScrollPosition();
  requestChildrenUpdate();
  updateFirstAndLastBackgroundViews();
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  float centerX=getWidth() / 2.0f;
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    float width=child.getMeasuredWidth();
    float height=child.getMeasuredHeight();
    child.layout((int)(centerX - width / 2.0f),0,(int)(centerX + width / 2.0f),(int)height);
  }
  setMaxLayoutHeight(getHeight());
  updateContentHeight();
  clampScrollPosition();
  requestChildrenUpdate();
  updateFirstAndLastBackgroundViews();
  updateAlgorithmLayoutMinHeight();
}",0.966542750929368
190959,"@Override public boolean isAntiFalsingNeeded(){
  return mPhoneStatusBar.getBarState() == StatusBarState.KEYGUARD;
}","@Override public boolean isAntiFalsingNeeded(){
  return onKeyguard();
}",0.723404255319149
190960,"/** 
 * @return the position from where the appear transition ends when expanding.Measured in absolute height.
 */
private float getAppearEndPosition(){
  int firstItemHeight=mTrackingHeadsUp || mHeadsUpManager.hasPinnedHeadsUp() ? mHeadsUpManager.getTopHeadsUpPinnedHeight() + mBottomStackPeekSize + mBottomStackSlowDownHeight : getLayoutMinHeight();
  return firstItemHeight + mTopPadding + mTopPaddingOverflow;
}","/** 
 * @return the position from where the appear transition ends when expanding.Measured in absolute height.
 */
private float getAppearEndPosition(){
  int firstItemHeight=mTrackingHeadsUp || mHeadsUpManager.hasPinnedHeadsUp() ? mHeadsUpManager.getTopHeadsUpPinnedHeight() + mBottomStackPeekSize + mBottomStackSlowDownHeight : getLayoutMinHeight();
  return firstItemHeight + (onKeyguard() ? mTopPadding : mIntrinsicPadding);
}",0.9325443786982248
190961,"private void updateAlgorithmHeightAndPadding(){
  mAmbientState.setLayoutHeight(getLayoutHeight());
  mAmbientState.setTopPadding(mTopPadding);
}","private void updateAlgorithmHeightAndPadding(){
  mAmbientState.setLayoutHeight(getLayoutHeight());
  updateAlgorithmLayoutMinHeight();
  mAmbientState.setTopPadding(mTopPadding);
}",0.8895705521472392
190962,"/** 
 * @return The translation at the beginning when expanding.Measured relative to the resting position.
 */
private float getExpandTranslationStart(){
  int startPosition=mTrackingHeadsUp || mHeadsUpManager.hasPinnedHeadsUp() ? 0 : -getFirstChildIntrinsicHeight();
  return startPosition - mTopPadding;
}","/** 
 * @return The translation at the beginning when expanding.Measured relative to the resting position.
 */
private float getExpandTranslationStart(){
  int startPosition=0;
  if (!mTrackingHeadsUp && !mHeadsUpManager.hasPinnedHeadsUp()) {
    startPosition=-Math.min(getFirstChildIntrinsicHeight(),mMaxLayoutHeight - mIntrinsicPadding - mBottomStackSlowDownHeight- mBottomStackPeekSize);
  }
  return startPosition - mTopPadding;
}",0.8005390835579514
190963,"private boolean onScrollTouch(MotionEvent ev){
  if (!isScrollingEnabled()) {
    return false;
  }
  if (ev.getY() < mQsContainer.getBottom()) {
    return false;
  }
  mForcedScroll=null;
  initVelocityTrackerIfNotExists();
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      if (getChildCount() == 0 || !isInContentBounds(ev)) {
        return false;
      }
      boolean isBeingDragged=!mScroller.isFinished();
      setIsBeingDragged(isBeingDragged);
      if (!mScroller.isFinished()) {
        mScroller.forceFinished(true);
      }
      mLastMotionY=(int)ev.getY();
      mDownX=(int)ev.getX();
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
if (activePointerIndex == -1) {
  Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
  break;
}
final int y=(int)ev.getY(activePointerIndex);
final int x=(int)ev.getX(activePointerIndex);
int deltaY=mLastMotionY - y;
final int xDiff=Math.abs(x - mDownX);
final int yDiff=Math.abs(deltaY);
if (!mIsBeingDragged && yDiff > mTouchSlop && yDiff > xDiff) {
setIsBeingDragged(true);
if (deltaY > 0) {
deltaY-=mTouchSlop;
}
 else {
deltaY+=mTouchSlop;
}
}
if (mIsBeingDragged) {
mLastMotionY=y;
int range=getScrollRange();
if (mExpandedInThisMotion) {
range=Math.min(range,mMaxScrollAfterExpand);
}
float scrollAmount;
if (deltaY < 0) {
scrollAmount=overScrollDown(deltaY);
}
 else {
scrollAmount=overScrollUp(deltaY,range);
}
if (scrollAmount != 0.0f) {
overScrollBy(0,(int)scrollAmount,0,mOwnScrollY,0,range,0,getHeight() / 2,true);
}
}
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (shouldOverScrollFling(initialVelocity)) {
onOverScrollFling(true,initialVelocity);
}
 else {
if (getChildCount() > 0) {
if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
float currentOverScrollTop=getCurrentOverScrollAmount(true);
if (currentOverScrollTop == 0.0f || initialVelocity > 0) {
fling(-initialVelocity);
}
 else {
onOverScrollFling(false,initialVelocity);
}
}
 else {
if (mScroller.springBack(mScrollX,mOwnScrollY,0,0,0,getScrollRange())) {
postInvalidateOnAnimation();
}
}
}
}
mActivePointerId=INVALID_POINTER;
endDrag();
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springBack(mScrollX,mOwnScrollY,0,0,0,getScrollRange())) {
postInvalidateOnAnimation();
}
mActivePointerId=INVALID_POINTER;
endDrag();
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int index=ev.getActionIndex();
mLastMotionY=(int)ev.getY(index);
mDownX=(int)ev.getX(index);
mActivePointerId=ev.getPointerId(index);
break;
}
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionY=(int)ev.getY(ev.findPointerIndex(mActivePointerId));
mDownX=(int)ev.getX(ev.findPointerIndex(mActivePointerId));
break;
}
return true;
}","private boolean onScrollTouch(MotionEvent ev){
  if (!isScrollingEnabled()) {
    return false;
  }
  if (ev.getY() < mQsContainer.getBottom() && !mIsBeingDragged) {
    return false;
  }
  mForcedScroll=null;
  initVelocityTrackerIfNotExists();
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      if (getChildCount() == 0 || !isInContentBounds(ev)) {
        return false;
      }
      boolean isBeingDragged=!mScroller.isFinished();
      setIsBeingDragged(isBeingDragged);
      if (!mScroller.isFinished()) {
        mScroller.forceFinished(true);
      }
      mLastMotionY=(int)ev.getY();
      mDownX=(int)ev.getX();
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
if (activePointerIndex == -1) {
  Log.e(TAG,""String_Node_Str"" + mActivePointerId + ""String_Node_Str"");
  break;
}
final int y=(int)ev.getY(activePointerIndex);
final int x=(int)ev.getX(activePointerIndex);
int deltaY=mLastMotionY - y;
final int xDiff=Math.abs(x - mDownX);
final int yDiff=Math.abs(deltaY);
if (!mIsBeingDragged && yDiff > mTouchSlop && yDiff > xDiff) {
setIsBeingDragged(true);
if (deltaY > 0) {
deltaY-=mTouchSlop;
}
 else {
deltaY+=mTouchSlop;
}
}
if (mIsBeingDragged) {
mLastMotionY=y;
int range=getScrollRange();
if (mExpandedInThisMotion) {
range=Math.min(range,mMaxScrollAfterExpand);
}
float scrollAmount;
if (deltaY < 0) {
scrollAmount=overScrollDown(deltaY);
}
 else {
scrollAmount=overScrollUp(deltaY,range);
}
if (scrollAmount != 0.0f) {
overScrollBy(0,(int)scrollAmount,0,mOwnScrollY,0,range,0,getHeight() / 2,true);
}
}
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)velocityTracker.getYVelocity(mActivePointerId);
if (shouldOverScrollFling(initialVelocity)) {
onOverScrollFling(true,initialVelocity);
}
 else {
if (getChildCount() > 0) {
if ((Math.abs(initialVelocity) > mMinimumVelocity)) {
float currentOverScrollTop=getCurrentOverScrollAmount(true);
if (currentOverScrollTop == 0.0f || initialVelocity > 0) {
fling(-initialVelocity);
}
 else {
onOverScrollFling(false,initialVelocity);
}
}
 else {
if (mScroller.springBack(mScrollX,mOwnScrollY,0,0,0,getScrollRange())) {
postInvalidateOnAnimation();
}
}
}
}
mActivePointerId=INVALID_POINTER;
endDrag();
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
if (mScroller.springBack(mScrollX,mOwnScrollY,0,0,0,getScrollRange())) {
postInvalidateOnAnimation();
}
mActivePointerId=INVALID_POINTER;
endDrag();
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int index=ev.getActionIndex();
mLastMotionY=(int)ev.getY(index);
mDownX=(int)ev.getX(index);
mActivePointerId=ev.getPointerId(index);
break;
}
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionY=(int)ev.getY(ev.findPointerIndex(mActivePointerId));
mDownX=(int)ev.getX(ev.findPointerIndex(mActivePointerId));
break;
}
return true;
}",0.9968404423380728
190964,"@Override protected Layout makeSingleLayout(int wantWidth,BoringLayout.Metrics boring,int ellipsisWidth,Layout.Alignment alignment,boolean shouldEllipsize,TextUtils.TruncateAt effectiveEllipsize,boolean useSaved){
  CharSequence text=getText() == null ? ""String_Node_Str"" : getText();
  StaticLayout.Builder builder=StaticLayout.Builder.obtain(text,0,text.length(),getPaint(),wantWidth).setAlignment(alignment).setTextDirection(getTextDirectionHeuristic()).setLineSpacing(getLineSpacingExtra(),getLineSpacingMultiplier()).setIncludePad(getIncludeFontPadding()).setEllipsize(shouldEllipsize ? effectiveEllipsize : null).setEllipsizedWidth(ellipsisWidth).setBreakStrategy(Layout.BREAK_STRATEGY_HIGH_QUALITY).setHyphenationFrequency(Layout.HYPHENATION_FREQUENCY_FULL);
  int endMargin=getContext().getResources().getDimensionPixelSize(R.dimen.notification_content_picture_margin);
  int[] margins=null;
  if (mIndentLines > 0) {
    margins=new int[mIndentLines + 1];
    for (int i=0; i < mIndentLines; i++) {
      margins[i]=endMargin;
    }
  }
  if (getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
    builder.setIndents(margins,null);
  }
 else {
    builder.setIndents(null,margins);
  }
  return builder.build();
}","@Override protected Layout makeSingleLayout(int wantWidth,BoringLayout.Metrics boring,int ellipsisWidth,Layout.Alignment alignment,boolean shouldEllipsize,TextUtils.TruncateAt effectiveEllipsize,boolean useSaved){
  CharSequence text=getText() == null ? ""String_Node_Str"" : getText();
  StaticLayout.Builder builder=StaticLayout.Builder.obtain(text,0,text.length(),getPaint(),wantWidth).setAlignment(alignment).setTextDirection(getTextDirectionHeuristic()).setLineSpacing(getLineSpacingExtra(),getLineSpacingMultiplier()).setIncludePad(getIncludeFontPadding()).setEllipsize(shouldEllipsize ? effectiveEllipsize : null).setEllipsizedWidth(ellipsisWidth).setBreakStrategy(Layout.BREAK_STRATEGY_HIGH_QUALITY).setHyphenationFrequency(Layout.HYPHENATION_FREQUENCY_FULL);
  int endMargin=getContext().getResources().getDimensionPixelSize(R.dimen.notification_content_picture_margin);
  int[] margins=null;
  if (mIndentLines > 0) {
    margins=new int[mIndentLines + 1];
    for (int i=0; i < mIndentLines; i++) {
      margins[i]=endMargin;
    }
  }
  if (mResolvedDirection == LAYOUT_DIRECTION_RTL) {
    builder.setIndents(margins,null);
  }
 else {
    builder.setIndents(null,margins);
  }
  return builder.build();
}",0.9917898193760264
190965,"/** 
 * Fades the background when the dimmed state changes.
 */
private void fadeDimmedBackground(){
  mBackgroundDimmed.animate().cancel();
  mBackgroundNormal.animate().cancel();
  if (mActivated) {
    updateBackground();
    return;
  }
  if (!shouldHideBackground()) {
    if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
  }
  float startAlpha=mDimmed ? 1f : 0;
  float endAlpha=mDimmed ? 0 : 1f;
  int duration=BACKGROUND_ANIMATION_LENGTH_MS;
  if (mBackgroundAnimator != null) {
    startAlpha=(Float)mBackgroundAnimator.getAnimatedValue();
    duration=(int)mBackgroundAnimator.getCurrentPlayTime();
    mBackgroundAnimator.removeAllListeners();
    mBackgroundAnimator.cancel();
    if (duration <= 0) {
      updateBackground();
      return;
    }
  }
  mBackgroundNormal.setAlpha(startAlpha);
  mBackgroundAnimator=ObjectAnimator.ofFloat(mBackgroundNormal,View.ALPHA,startAlpha,endAlpha);
  mBackgroundAnimator.setInterpolator(Interpolators.FAST_OUT_SLOW_IN);
  mBackgroundAnimator.setDuration(duration);
  mBackgroundAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      updateBackground();
      mBackgroundAnimator=null;
    }
  }
);
  mBackgroundAnimator.addUpdateListener(mBackgroundVisibilityUpdater);
  mBackgroundAnimator.start();
}","/** 
 * Fades the background when the dimmed state changes.
 */
private void fadeDimmedBackground(){
  mBackgroundDimmed.animate().cancel();
  mBackgroundNormal.animate().cancel();
  if (mActivated) {
    updateBackground();
    return;
  }
  if (!shouldHideBackground()) {
    if (mDimmed) {
      mBackgroundDimmed.setVisibility(View.VISIBLE);
    }
 else {
      mBackgroundNormal.setVisibility(View.VISIBLE);
    }
  }
  float startAlpha=mDimmed ? 1f : 0;
  float endAlpha=mDimmed ? 0 : 1f;
  int duration=BACKGROUND_ANIMATION_LENGTH_MS;
  if (mBackgroundAnimator != null) {
    startAlpha=(Float)mBackgroundAnimator.getAnimatedValue();
    duration=(int)mBackgroundAnimator.getCurrentPlayTime();
    mBackgroundAnimator.removeAllListeners();
    mBackgroundAnimator.cancel();
    if (duration <= 0) {
      updateBackground();
      return;
    }
  }
  mBackgroundNormal.setAlpha(startAlpha);
  mBackgroundAnimator=ObjectAnimator.ofFloat(mBackgroundNormal,View.ALPHA,startAlpha,endAlpha);
  mBackgroundAnimator.setInterpolator(Interpolators.FAST_OUT_SLOW_IN);
  mBackgroundAnimator.setDuration(duration);
  mBackgroundAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      updateBackground();
      mBackgroundAnimator=null;
      if (mFadeInFromDarkAnimator == null) {
        mDimmedBackgroundFadeInAmount=-1;
      }
    }
  }
);
  mBackgroundAnimator.addUpdateListener(mBackgroundVisibilityUpdater);
  mBackgroundAnimator.start();
}",0.9675213675213676
190966,"private void deleteDocuments(final Selection selected){
  Metrics.logUserAction(getContext(),Metrics.USER_ACTION_DELETE);
  assert(!selected.isEmpty());
  final DocumentInfo srcParent=getDisplayState().stack.peek();
  new GetDocumentsTask(){
    @Override void onDocumentsReady(    final List<DocumentInfo> docs){
      TextView message=(TextView)mInflater.inflate(R.layout.dialog_delete_confirmation,null);
      message.setText(generateDeleteMessage(docs));
      new AlertDialog.Builder(getActivity()).setView(message).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          if (mActionMode != null) {
            mActionMode.finish();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
          mAdapter.hide(selected.getAll());
          FileOperations.delete(getActivity(),docs,srcParent,getDisplayState().stack);
        }
      }
).setNegativeButton(android.R.string.no,null).show();
    }
  }
.execute(selected);
}","private void deleteDocuments(final Selection selected){
  Metrics.logUserAction(getContext(),Metrics.USER_ACTION_DELETE);
  if (selected.isEmpty()) {
    return;
  }
  final DocumentInfo srcParent=getDisplayState().stack.peek();
  new GetDocumentsTask(){
    @Override void onDocumentsReady(    final List<DocumentInfo> docs){
      TextView message=(TextView)mInflater.inflate(R.layout.dialog_delete_confirmation,null);
      message.setText(generateDeleteMessage(docs));
      new AlertDialog.Builder(getActivity()).setView(message).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          if (mActionMode != null) {
            mActionMode.finish();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
          mAdapter.hide(selected.getAll());
          FileOperations.delete(getActivity(),docs,srcParent,getDisplayState().stack);
        }
      }
).setNegativeButton(android.R.string.no,null).show();
    }
  }
.execute(selected);
}",0.9863400847856808
190967,"@Override public void notifyListeners(SignalCallback callback){
  if (mConfig.readIconsFromXml) {
    generateIconGroup();
  }
  MobileIconGroup icons=getIcons();
  String contentDescription=getStringIfExists(getContentDescription());
  String dataContentDescription=getStringIfExists(icons.mDataContentDescription);
  final boolean dataDisabled=mCurrentState.iconGroup == TelephonyIcons.DATA_DISABLED && mCurrentState.userSetup;
  boolean showDataIcon=false;
  if (mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon=mCurrentState.dataConnected;
  }
 else {
    showDataIcon=mCurrentState.dataConnected || mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming() || dataDisabled;
  }
  IconState statusIcon=new IconState(mCurrentState.enabled && !mCurrentState.airplaneMode,getCurrentIconId(),contentDescription);
  int qsTypeIcon=0;
  IconState qsIcon=null;
  String description=null;
  if (mCurrentState.dataSim) {
    qsTypeIcon=showDataIcon ? icons.mQsDataType : 0;
    qsIcon=new IconState(mCurrentState.enabled && !mCurrentState.isEmergency,getQsCurrentIconId(),contentDescription);
    description=mCurrentState.isEmergency ? null : mCurrentState.networkName;
  }
  boolean activityIn=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityIn;
  boolean activityOut=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityOut;
  if (!mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon&=mCurrentState.isDefault || (mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming()) || dataDisabled;
  }
  showDataIcon&=(mStyle == STATUS_BAR_STYLE_ANDROID_DEFAULT || mStyle == STATUS_BAR_STYLE_EXTENDED);
  int typeIcon=showDataIcon ? icons.mDataType : 0;
  int dataActivityId=showMobileActivity() ? 0 : icons.mActivityId;
  int mobileActivityId=showMobileActivity() ? icons.mActivityId : 0;
  int dataNetworkTypeInRoamingId=0;
  if (mStyle == STATUS_BAR_STYLE_EXTENDED && isRoaming()) {
    dataNetworkTypeInRoamingId=mCurrentState.dataConnected ? typeIcon : 0;
    typeIcon=TelephonyIcons.ROAMING_ICON;
    qsTypeIcon=mCurrentState.dataConnected ? qsTypeIcon : 0;
  }
  if (callback instanceof SignalCallbackExtended) {
    ((SignalCallbackExtended)callback).setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId(),dataNetworkTypeInRoamingId,getEmbmsIconId(),getImsIconId(),isImsRegisteredInWifi());
  }
 else {
    callback.setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId());
  }
  CallbackHandler callbackHandler=(CallbackHandler)callback;
  callbackHandler.post(new Runnable(){
    @Override public void run(){
      mNetworkController.updateNetworkLabelView();
    }
  }
);
}","@Override public void notifyListeners(SignalCallback callback){
  if (mConfig.readIconsFromXml) {
    generateIconGroup();
  }
  MobileIconGroup icons=getIcons();
  String contentDescription=getStringIfExists(getContentDescription());
  String dataContentDescription=getStringIfExists(icons.mDataContentDescription);
  final boolean dataDisabled=mCurrentState.iconGroup == TelephonyIcons.DATA_DISABLED && mCurrentState.userSetup;
  boolean showDataIcon=false;
  if (mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon=mCurrentState.dataConnected;
  }
 else {
    showDataIcon=mCurrentState.dataConnected || mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming() || dataDisabled;
  }
  IconState statusIcon=new IconState(mCurrentState.enabled && !mCurrentState.airplaneMode,getCurrentIconId(),contentDescription);
  int qsTypeIcon=0;
  IconState qsIcon=null;
  String description=null;
  if (mCurrentState.dataSim) {
    qsTypeIcon=showDataIcon ? icons.mQsDataType : 0;
    qsIcon=new IconState(mCurrentState.enabled && !mCurrentState.isEmergency,getQsCurrentIconId(),contentDescription);
    description=mCurrentState.isEmergency ? null : mCurrentState.networkName;
  }
  boolean activityIn=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityIn;
  boolean activityOut=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityOut;
  if (!mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon&=mCurrentState.isDefault || (mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming()) || dataDisabled;
  }
  showDataIcon&=(mStyle == STATUS_BAR_STYLE_ANDROID_DEFAULT || mStyle == STATUS_BAR_STYLE_EXTENDED);
  int typeIcon=showDataIcon ? icons.mDataType : 0;
  int dataActivityId=showMobileActivity() ? 0 : icons.mActivityId;
  int mobileActivityId=showMobileActivity() ? icons.mActivityId : 0;
  int dataNetworkTypeInRoamingId=0;
  if (mStyle == STATUS_BAR_STYLE_EXTENDED && isRoaming()) {
    dataNetworkTypeInRoamingId=mCurrentState.dataConnected ? typeIcon : 0;
    typeIcon=TelephonyIcons.ROAMING_ICON;
    qsTypeIcon=mCurrentState.dataConnected ? qsTypeIcon : 0;
  }
  if (callback instanceof SignalCallbackExtended) {
    ((SignalCallbackExtended)callback).setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId(),dataNetworkTypeInRoamingId,getEmbmsIconId(),getImsIconId(),isImsRegisteredInWifi());
    CallbackHandler callbackHandler=(CallbackHandler)callback;
    callbackHandler.post(new Runnable(){
      @Override public void run(){
        mNetworkController.updateNetworkLabelView();
      }
    }
);
  }
 else {
    callback.setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId());
  }
}",0.90955091714105
190968,"@Override public void notifyListeners(SignalCallback callback){
  if (mConfig.readIconsFromXml) {
    generateIconGroup();
  }
  MobileIconGroup icons=getIcons();
  String contentDescription=getStringIfExists(getContentDescription());
  String dataContentDescription=getStringIfExists(icons.mDataContentDescription);
  final boolean dataDisabled=mCurrentState.iconGroup == TelephonyIcons.DATA_DISABLED && mCurrentState.userSetup;
  boolean showDataIcon=false;
  if (mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon=mCurrentState.dataConnected;
  }
 else {
    showDataIcon=mCurrentState.dataConnected || mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming() || dataDisabled;
  }
  IconState statusIcon=new IconState(mCurrentState.enabled && !mCurrentState.airplaneMode,getCurrentIconId(),contentDescription);
  int qsTypeIcon=0;
  IconState qsIcon=null;
  String description=null;
  if (mCurrentState.dataSim) {
    qsTypeIcon=showDataIcon ? icons.mQsDataType : 0;
    qsIcon=new IconState(mCurrentState.enabled && !mCurrentState.isEmergency,getQsCurrentIconId(),contentDescription);
    description=mCurrentState.isEmergency ? null : mCurrentState.networkName;
  }
  boolean activityIn=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityIn;
  boolean activityOut=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityOut;
  if (!mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon&=mCurrentState.isDefault || (mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming()) || dataDisabled;
  }
  showDataIcon&=(mStyle == STATUS_BAR_STYLE_ANDROID_DEFAULT || mStyle == STATUS_BAR_STYLE_EXTENDED);
  int typeIcon=showDataIcon ? icons.mDataType : 0;
  int dataActivityId=showMobileActivity() ? 0 : icons.mActivityId;
  int mobileActivityId=showMobileActivity() ? icons.mActivityId : 0;
  int dataNetworkTypeInRoamingId=0;
  if (mStyle == STATUS_BAR_STYLE_EXTENDED && isRoaming()) {
    dataNetworkTypeInRoamingId=mCurrentState.dataConnected ? typeIcon : 0;
    typeIcon=TelephonyIcons.ROAMING_ICON;
    qsTypeIcon=mCurrentState.dataConnected ? qsTypeIcon : 0;
  }
  if (callback instanceof SignalCallbackExtended) {
    ((SignalCallbackExtended)callback).setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId(),dataNetworkTypeInRoamingId,getEmbmsIconId(),getImsIconId(),isImsRegisteredInWifi());
  }
 else {
    callback.setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId());
  }
  CallbackHandler callbackHandler=(CallbackHandler)callback;
  callbackHandler.post(new Runnable(){
    @Override public void run(){
      mNetworkController.updateNetworkLabelView();
    }
  }
);
}","@Override public void notifyListeners(SignalCallback callback){
  if (mConfig.readIconsFromXml) {
    generateIconGroup();
  }
  MobileIconGroup icons=getIcons();
  String contentDescription=getStringIfExists(getContentDescription());
  String dataContentDescription=getStringIfExists(icons.mDataContentDescription);
  final boolean dataDisabled=mCurrentState.iconGroup == TelephonyIcons.DATA_DISABLED && mCurrentState.userSetup;
  boolean showDataIcon=false;
  if (mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon=mCurrentState.dataConnected;
  }
 else {
    showDataIcon=mCurrentState.dataConnected || mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming() || dataDisabled;
  }
  IconState statusIcon=new IconState(mCurrentState.enabled && !mCurrentState.airplaneMode,getCurrentIconId(),contentDescription);
  int qsTypeIcon=0;
  IconState qsIcon=null;
  String description=null;
  if (mCurrentState.dataSim) {
    qsTypeIcon=showDataIcon ? icons.mQsDataType : 0;
    qsIcon=new IconState(mCurrentState.enabled && !mCurrentState.isEmergency,getQsCurrentIconId(),contentDescription);
    description=mCurrentState.isEmergency ? null : mCurrentState.networkName;
  }
  boolean activityIn=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityIn;
  boolean activityOut=mCurrentState.dataConnected && !mCurrentState.carrierNetworkChangeMode && mCurrentState.activityOut;
  if (!mContext.getResources().getBoolean(R.bool.show_roaming_and_network_icons)) {
    showDataIcon&=mCurrentState.isDefault || (mCurrentState.iconGroup == TelephonyIcons.ROAMING || isRoaming()) || dataDisabled;
  }
  showDataIcon&=(mStyle == STATUS_BAR_STYLE_ANDROID_DEFAULT || mStyle == STATUS_BAR_STYLE_EXTENDED);
  int typeIcon=showDataIcon ? icons.mDataType : 0;
  int dataActivityId=showMobileActivity() ? 0 : icons.mActivityId;
  int mobileActivityId=showMobileActivity() ? icons.mActivityId : 0;
  int dataNetworkTypeInRoamingId=0;
  if (mStyle == STATUS_BAR_STYLE_EXTENDED && isRoaming()) {
    dataNetworkTypeInRoamingId=mCurrentState.dataConnected ? typeIcon : 0;
    typeIcon=TelephonyIcons.ROAMING_ICON;
    qsTypeIcon=mCurrentState.dataConnected ? qsTypeIcon : 0;
  }
  if (callback instanceof SignalCallbackExtended) {
    ((SignalCallbackExtended)callback).setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId(),dataNetworkTypeInRoamingId,getEmbmsIconId(),getImsIconId(),isImsRegisteredInWifi());
    CallbackHandler callbackHandler=(CallbackHandler)callback;
    callbackHandler.post(new Runnable(){
      @Override public void run(){
        mNetworkController.updateNetworkLabelView();
      }
    }
);
  }
 else {
    callback.setMobileDataIndicators(statusIcon,qsIcon,typeIcon,qsTypeIcon,activityIn,activityOut,dataActivityId,mobileActivityId,icons.mStackedDataIcon,icons.mStackedVoiceIcon,dataContentDescription,description,icons.mIsWide,mSubscriptionInfo.getSubscriptionId());
  }
}",0.90955091714105
190969,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190970,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190971,"private void deleteDocuments(final Selection selected){
  Metrics.logUserAction(getContext(),Metrics.USER_ACTION_DELETE);
  assert(!selected.isEmpty());
  final DocumentInfo srcParent=getDisplayState().stack.peek();
  new GetDocumentsTask(){
    @Override void onDocumentsReady(    final List<DocumentInfo> docs){
      TextView message=(TextView)mInflater.inflate(R.layout.dialog_delete_confirmation,null);
      message.setText(generateDeleteMessage(docs));
      new AlertDialog.Builder(getActivity()).setView(message).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          if (mActionMode != null) {
            mActionMode.finish();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
          mAdapter.hide(selected.getAll());
          FileOperations.delete(getActivity(),docs,srcParent,getDisplayState().stack);
        }
      }
).setNegativeButton(android.R.string.no,null).show();
    }
  }
.execute(selected);
}","private void deleteDocuments(final Selection selected){
  Metrics.logUserAction(getContext(),Metrics.USER_ACTION_DELETE);
  if (selected.isEmpty()) {
    return;
  }
  final DocumentInfo srcParent=getDisplayState().stack.peek();
  new GetDocumentsTask(){
    @Override void onDocumentsReady(    final List<DocumentInfo> docs){
      TextView message=(TextView)mInflater.inflate(R.layout.dialog_delete_confirmation,null);
      message.setText(generateDeleteMessage(docs));
      new AlertDialog.Builder(getActivity()).setView(message).setPositiveButton(android.R.string.yes,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          if (mActionMode != null) {
            mActionMode.finish();
          }
 else {
            Log.w(TAG,""String_Node_Str"");
          }
          mAdapter.hide(selected.getAll());
          FileOperations.delete(getActivity(),docs,srcParent,getDisplayState().stack);
        }
      }
).setNegativeButton(android.R.string.no,null).show();
    }
  }
.execute(selected);
}",0.9863400847856808
190972,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190973,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190974,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190975,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190976,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190977,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190978,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190979,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190980,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
@RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED) public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9773519163763066
190981,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190982,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190983,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190984,"/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_ADMIN}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}","/** 
 * Confirm passkey for   {@link #PAIRING_VARIANT_PASSKEY_CONFIRMATION} pairing.<p>Requires  {@link android.Manifest.permission#BLUETOOTH_PRIVILEGED}.
 * @return true confirmation has been sent outfalse for error
 */
public boolean setPairingConfirmation(boolean confirm){
  if (sService == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return sService.setPairingConfirmation(this,confirm);
  }
 catch (  RemoteException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return false;
}",0.9873663751214772
190985,"public boolean getAccessibilityFocusClickPointInScreenNotLocked(Point outPoint){
  AccessibilityNodeInfo focus=getAccessibilityFocusNotLocked();
  if (focus == null) {
    return false;
  }
synchronized (mLock) {
    Rect boundsInScreen=mTempRect;
    focus.getBoundsInScreen(boundsInScreen);
    Rect windowBounds=mTempRect1;
    getWindowBounds(focus.getWindowId(),windowBounds);
    if (!boundsInScreen.intersect(windowBounds)) {
      return false;
    }
    MagnificationSpec spec=getCompatibleMagnificationSpecLocked(focus.getWindowId());
    if (spec != null && !spec.isNop()) {
      boundsInScreen.offset((int)-spec.offsetX,(int)-spec.offsetY);
      boundsInScreen.scale(1 / spec.scale);
    }
    Point screenSize=mTempPoint;
    mDefaultDisplay.getRealSize(screenSize);
    if (!boundsInScreen.intersect(0,0,screenSize.x,screenSize.y)) {
      return false;
    }
    outPoint.set(boundsInScreen.centerX(),boundsInScreen.centerY());
  }
  return true;
}","public boolean getAccessibilityFocusClickPointInScreenNotLocked(Point outPoint){
  AccessibilityNodeInfo focus=getAccessibilityFocusNotLocked();
  if (focus == null) {
    return false;
  }
synchronized (mLock) {
    Rect boundsInScreen=mTempRect;
    focus.getBoundsInScreen(boundsInScreen);
    MagnificationSpec spec=getCompatibleMagnificationSpecLocked(focus.getWindowId());
    if (spec != null && !spec.isNop()) {
      boundsInScreen.offset((int)-spec.offsetX,(int)-spec.offsetY);
      boundsInScreen.scale(1 / spec.scale);
    }
    Rect windowBounds=mTempRect1;
    getWindowBounds(focus.getWindowId(),windowBounds);
    if (!boundsInScreen.intersect(windowBounds)) {
      return false;
    }
    Point screenSize=mTempPoint;
    mDefaultDisplay.getRealSize(screenSize);
    if (!boundsInScreen.intersect(0,0,screenSize.x,screenSize.y)) {
      return false;
    }
    outPoint.set(boundsInScreen.centerX(),boundsInScreen.centerY());
  }
  return true;
}",0.7461139896373057
190986,"/** 
 * Initialize or update the local profile objects. If a UUID was previously present but has been removed, we print a warning but don't remove the profile object as it might be referenced elsewhere, or the UUID might come back and we don't want multiple copies of the profile objects.
 * @param uuids
 */
void updateLocalProfiles(ParcelUuid[] uuids){
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.AudioSource)) {
    if (mA2dpProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mA2dpProfile=new A2dpProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mA2dpProfile,A2dpProfile.NAME,BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mA2dpProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.AudioSink)) {
    if (mA2dpSinkProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mA2dpSinkProfile=new A2dpSinkProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mA2dpSinkProfile,A2dpSinkProfile.NAME,BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mA2dpSinkProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.Handsfree_AG) || BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.HSP_AG)) {
    if (mHeadsetProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mHeadsetProfile=new HeadsetProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mHeadsetProfile,HeadsetProfile.NAME,BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mHeadsetProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.Handsfree)) {
    if (mHfpClientProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mHfpClientProfile=new HfpClientProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mHfpClientProfile,HfpClientProfile.NAME,BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mHfpClientProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
 else {
    Log.d(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.ObexObjectPush)) {
    if (mOppProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mOppProfile=new OppProfile();
      mProfileNameMap.put(OppProfile.NAME,mOppProfile);
    }
  }
 else   if (mOppProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (mUsePbapPce) {
    if (mPbapClientProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mPbapClientProfile=new PbapClientProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mPbapClientProfile,PbapClientProfile.NAME,BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mPbapClientProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  mEventManager.registerProfileIntentReceiver();
}","/** 
 * Initialize or update the local profile objects. If a UUID was previously present but has been removed, we print a warning but don't remove the profile object as it might be referenced elsewhere, or the UUID might come back and we don't want multiple copies of the profile objects.
 * @param uuids
 */
void updateLocalProfiles(ParcelUuid[] uuids){
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.AudioSource)) {
    if (mA2dpProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mA2dpProfile=new A2dpProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mA2dpProfile,A2dpProfile.NAME,BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mA2dpProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.AudioSink)) {
    if (mA2dpSinkProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mA2dpSinkProfile=new A2dpSinkProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mA2dpSinkProfile,A2dpSinkProfile.NAME,BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mA2dpSinkProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.Handsfree_AG) || BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.HSP_AG)) {
    if (mHeadsetProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mHeadsetProfile=new HeadsetProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mHeadsetProfile,HeadsetProfile.NAME,BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mHeadsetProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.Handsfree)) {
    if (mHfpClientProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mHfpClientProfile=new HfpClientProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mHfpClientProfile,HfpClientProfile.NAME,BluetoothHeadsetClient.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mHfpClientProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
 else {
    Log.d(TAG,""String_Node_Str"");
  }
  if (BluetoothUuid.isUuidPresent(uuids,BluetoothUuid.ObexObjectPush)) {
    if (mOppProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mOppProfile=new OppProfile();
      mProfileNameMap.put(OppProfile.NAME,mOppProfile);
    }
  }
 else   if (mOppProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  if (mUsePbapPce) {
    if (mPbapClientProfile == null) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mPbapClientProfile=new PbapClientProfile(mContext,mLocalAdapter,mDeviceManager,this);
      addProfile(mPbapClientProfile,PbapClientProfile.NAME,BluetoothPbapClient.ACTION_CONNECTION_STATE_CHANGED);
    }
  }
 else   if (mPbapClientProfile != null) {
    Log.w(TAG,""String_Node_Str"");
  }
  mEventManager.setDefaultReceiverHandler();
}",0.993975903614458
190987,"public boolean getAccessibilityFocusClickPointInScreenNotLocked(Point outPoint){
  AccessibilityNodeInfo focus=getAccessibilityFocusNotLocked();
  if (focus == null) {
    return false;
  }
synchronized (mLock) {
    Rect boundsInScreen=mTempRect;
    focus.getBoundsInScreen(boundsInScreen);
    Rect windowBounds=mTempRect1;
    getWindowBounds(focus.getWindowId(),windowBounds);
    if (!boundsInScreen.intersect(windowBounds)) {
      return false;
    }
    MagnificationSpec spec=getCompatibleMagnificationSpecLocked(focus.getWindowId());
    if (spec != null && !spec.isNop()) {
      boundsInScreen.offset((int)-spec.offsetX,(int)-spec.offsetY);
      boundsInScreen.scale(1 / spec.scale);
    }
    Point screenSize=mTempPoint;
    mDefaultDisplay.getRealSize(screenSize);
    if (!boundsInScreen.intersect(0,0,screenSize.x,screenSize.y)) {
      return false;
    }
    outPoint.set(boundsInScreen.centerX(),boundsInScreen.centerY());
  }
  return true;
}","public boolean getAccessibilityFocusClickPointInScreenNotLocked(Point outPoint){
  AccessibilityNodeInfo focus=getAccessibilityFocusNotLocked();
  if (focus == null) {
    return false;
  }
synchronized (mLock) {
    Rect boundsInScreen=mTempRect;
    focus.getBoundsInScreen(boundsInScreen);
    MagnificationSpec spec=getCompatibleMagnificationSpecLocked(focus.getWindowId());
    if (spec != null && !spec.isNop()) {
      boundsInScreen.offset((int)-spec.offsetX,(int)-spec.offsetY);
      boundsInScreen.scale(1 / spec.scale);
    }
    Rect windowBounds=mTempRect1;
    getWindowBounds(focus.getWindowId(),windowBounds);
    if (!boundsInScreen.intersect(windowBounds)) {
      return false;
    }
    Point screenSize=mTempPoint;
    mDefaultDisplay.getRealSize(screenSize);
    if (!boundsInScreen.intersect(0,0,screenSize.x,screenSize.y)) {
      return false;
    }
    outPoint.set(boundsInScreen.centerX(),boundsInScreen.centerY());
  }
  return true;
}",0.7461139896373057
190988,"static void updateDataType(int slot,int type,boolean showAtLeast3G,boolean show4GforLte,boolean hspaDistinguishable,int inet){
  log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,type,inet) + ""String_Node_Str""+ String.valueOf(showAtLeast3G)+ ""String_Node_Str""+ String.valueOf(show4GforLte)+ ""String_Node_Str""+ String.valueOf(hspaDistinguishable));
  String resName=mDataTypeArray[slot];
  int resId=mRes.getIdentifier(resName,null,NS);
  String[] dataTypeArray=mRes.getStringArray(resId);
  log(TAG,""String_Node_Str"" + resName + ""String_Node_Str""+ resId);
switch (type) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
    if (!showAtLeast3G) {
      mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
      mSelectedQSDataTypeIcon[slot]=0;
      mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
      mSelectedDataActivityIndex[slot]=0;
      mSelectedSignalStreagthIndex[slot]=0;
      break;
    }
 else {
    }
case TelephonyManager.NETWORK_TYPE_EDGE:
  if (!showAtLeast3G) {
    mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
    mSelectedQSDataTypeIcon[slot]=QS_DATA_E;
    mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
    mSelectedDataActivityIndex[slot]=DATA_TYPE_E;
    mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_E;
    break;
  }
 else {
  }
case TelephonyManager.NETWORK_TYPE_UMTS:
case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_UMTS;
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
if (type == TelephonyManager.NETWORK_TYPE_HSPA && MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=ICON_H_PLUS;
mSelectedQSDataTypeIcon[slot]=QS_DATA_H_PLUS;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_H;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_H;
}
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_HSPAP:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
if (mRes.getBoolean(R.bool.config_show4gForHspap) || mRes.getBoolean(R.bool.show_network_indicators)) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[3],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_CDMA;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_1xRTT:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_1X;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
case TelephonyManager.NETWORK_TYPE_EHRPD:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
break;
case TelephonyManager.NETWORK_TYPE_LTE:
case TelephonyManager.NETWORK_TYPE_LTE_CA:
if (!show4GforLte || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_LTE;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE_PLUS;
}
 else {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE;
}
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[1],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[2],null,NS);
}
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[1];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
break;
case TelephonyManager.NETWORK_TYPE_GPRS:
case TelephonyManager.NETWORK_TYPE_GSM:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
default :
mSelectedDataActivityIndex[slot]=DATA_TYPE_UNKNOWN;
mSelectedDataTypeIcon[slot]=0;
mSelectedQSDataTypeIcon[slot]=0;
mSelectedDataTypeDesc[slot]=""String_Node_Str"";
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
break;
}
log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,mSelectedDataTypeIcon[slot],mSelectedDataActivityIndex[slot]));
}","static void updateDataType(int slot,int type,boolean showAtLeast3G,boolean show4GforLte,boolean hspaDistinguishable,int inet){
  log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,type,inet) + ""String_Node_Str""+ String.valueOf(showAtLeast3G)+ ""String_Node_Str""+ String.valueOf(show4GforLte)+ ""String_Node_Str""+ String.valueOf(hspaDistinguishable));
  String resName=mDataTypeArray[slot];
  int resId=mRes.getIdentifier(resName,null,NS);
  String[] dataTypeArray=mRes.getStringArray(resId);
  log(TAG,""String_Node_Str"" + resName + ""String_Node_Str""+ resId);
switch (type) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
    if (!showAtLeast3G) {
      mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
      mSelectedQSDataTypeIcon[slot]=0;
      mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
      mSelectedDataActivityIndex[slot]=0;
      mSelectedSignalStreagthIndex[slot]=0;
      break;
    }
 else {
    }
case TelephonyManager.NETWORK_TYPE_EDGE:
  if (!showAtLeast3G) {
    mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
    mSelectedQSDataTypeIcon[slot]=QS_DATA_E;
    mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
    mSelectedDataActivityIndex[slot]=DATA_TYPE_E;
    mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_E;
    break;
  }
 else {
  }
case TelephonyManager.NETWORK_TYPE_UMTS:
case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_UMTS;
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
if (type == TelephonyManager.NETWORK_TYPE_HSPA && MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=ICON_H_PLUS;
mSelectedQSDataTypeIcon[slot]=QS_DATA_H_PLUS;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_H;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_H;
}
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_HSPAP:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
if (mRes.getBoolean(R.bool.config_show4gForHspap) || mRes.getBoolean(R.bool.show_network_indicators)) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[3],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_CDMA;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_1xRTT:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_1X;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
case TelephonyManager.NETWORK_TYPE_EHRPD:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
break;
case TelephonyManager.NETWORK_TYPE_LTE:
case TelephonyManager.NETWORK_TYPE_LTE_CA:
if (!show4GforLte || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_LTE;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE_PLUS;
}
 else {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE;
}
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
 else {
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G_PLUS;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[2],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G_PLUS;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[1],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[1];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
break;
case TelephonyManager.NETWORK_TYPE_GPRS:
case TelephonyManager.NETWORK_TYPE_GSM:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
default :
mSelectedDataActivityIndex[slot]=DATA_TYPE_UNKNOWN;
mSelectedDataTypeIcon[slot]=0;
mSelectedQSDataTypeIcon[slot]=0;
mSelectedDataTypeDesc[slot]=""String_Node_Str"";
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
break;
}
log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,mSelectedDataTypeIcon[slot],mSelectedDataActivityIndex[slot]));
}",0.9740629997913914
190989,"static void updateDataType(int slot,int type,boolean showAtLeast3G,boolean show4GforLte,boolean hspaDistinguishable,int inet){
  log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,type,inet) + ""String_Node_Str""+ String.valueOf(showAtLeast3G)+ ""String_Node_Str""+ String.valueOf(show4GforLte)+ ""String_Node_Str""+ String.valueOf(hspaDistinguishable));
  String resName=mDataTypeArray[slot];
  int resId=mRes.getIdentifier(resName,null,NS);
  String[] dataTypeArray=mRes.getStringArray(resId);
  log(TAG,""String_Node_Str"" + resName + ""String_Node_Str""+ resId);
switch (type) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
    if (!showAtLeast3G) {
      mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
      mSelectedQSDataTypeIcon[slot]=0;
      mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
      mSelectedDataActivityIndex[slot]=0;
      mSelectedSignalStreagthIndex[slot]=0;
      break;
    }
 else {
    }
case TelephonyManager.NETWORK_TYPE_EDGE:
  if (!showAtLeast3G) {
    mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
    mSelectedQSDataTypeIcon[slot]=QS_DATA_E;
    mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
    mSelectedDataActivityIndex[slot]=DATA_TYPE_E;
    mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_E;
    break;
  }
 else {
  }
case TelephonyManager.NETWORK_TYPE_UMTS:
case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_UMTS;
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
if (type == TelephonyManager.NETWORK_TYPE_HSPA && MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=ICON_H_PLUS;
mSelectedQSDataTypeIcon[slot]=QS_DATA_H_PLUS;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_H;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_H;
}
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_HSPAP:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
if (mRes.getBoolean(R.bool.config_show4gForHspap) || mRes.getBoolean(R.bool.show_network_indicators)) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[3],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_CDMA;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_1xRTT:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_1X;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
case TelephonyManager.NETWORK_TYPE_EHRPD:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
break;
case TelephonyManager.NETWORK_TYPE_LTE:
case TelephonyManager.NETWORK_TYPE_LTE_CA:
if (!show4GforLte || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_LTE;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE_PLUS;
}
 else {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE;
}
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[1],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[2],null,NS);
}
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[1];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
break;
case TelephonyManager.NETWORK_TYPE_GPRS:
case TelephonyManager.NETWORK_TYPE_GSM:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
default :
mSelectedDataActivityIndex[slot]=DATA_TYPE_UNKNOWN;
mSelectedDataTypeIcon[slot]=0;
mSelectedQSDataTypeIcon[slot]=0;
mSelectedDataTypeDesc[slot]=""String_Node_Str"";
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
break;
}
log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,mSelectedDataTypeIcon[slot],mSelectedDataActivityIndex[slot]));
}","static void updateDataType(int slot,int type,boolean showAtLeast3G,boolean show4GforLte,boolean hspaDistinguishable,int inet){
  log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,type,inet) + ""String_Node_Str""+ String.valueOf(showAtLeast3G)+ ""String_Node_Str""+ String.valueOf(show4GforLte)+ ""String_Node_Str""+ String.valueOf(hspaDistinguishable));
  String resName=mDataTypeArray[slot];
  int resId=mRes.getIdentifier(resName,null,NS);
  String[] dataTypeArray=mRes.getStringArray(resId);
  log(TAG,""String_Node_Str"" + resName + ""String_Node_Str""+ resId);
switch (type) {
case TelephonyManager.NETWORK_TYPE_UNKNOWN:
    if (!showAtLeast3G) {
      mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
      mSelectedQSDataTypeIcon[slot]=0;
      mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
      mSelectedDataActivityIndex[slot]=0;
      mSelectedSignalStreagthIndex[slot]=0;
      break;
    }
 else {
    }
case TelephonyManager.NETWORK_TYPE_EDGE:
  if (!showAtLeast3G) {
    mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
    mSelectedQSDataTypeIcon[slot]=QS_DATA_E;
    mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
    mSelectedDataActivityIndex[slot]=DATA_TYPE_E;
    mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_E;
    break;
  }
 else {
  }
case TelephonyManager.NETWORK_TYPE_UMTS:
case TelephonyManager.NETWORK_TYPE_TD_SCDMA:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_UMTS;
break;
case TelephonyManager.NETWORK_TYPE_HSDPA:
case TelephonyManager.NETWORK_TYPE_HSUPA:
case TelephonyManager.NETWORK_TYPE_HSPA:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
if (type == TelephonyManager.NETWORK_TYPE_HSPA && MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=ICON_H_PLUS;
mSelectedQSDataTypeIcon[slot]=QS_DATA_H_PLUS;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_H;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_H;
}
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_HSPAP:
if (hspaDistinguishable || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_HP;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_H;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_HP;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
if (mRes.getBoolean(R.bool.config_show4gForHspap) || mRes.getBoolean(R.bool.show_network_indicators)) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[3],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
case TelephonyManager.NETWORK_TYPE_CDMA:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_CDMA;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_1xRTT:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_1X;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_1X;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_1X;
break;
}
 else {
}
case TelephonyManager.NETWORK_TYPE_EVDO_0:
case TelephonyManager.NETWORK_TYPE_EVDO_A:
case TelephonyManager.NETWORK_TYPE_EVDO_B:
case TelephonyManager.NETWORK_TYPE_EHRPD:
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
break;
case TelephonyManager.NETWORK_TYPE_LTE:
case TelephonyManager.NETWORK_TYPE_LTE_CA:
if (!show4GforLte || MobileSignalController.isCarrierOneSupported()) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_LTE;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE_PLUS;
}
 else {
mSelectedQSDataTypeIcon[slot]=QS_DATA_LTE;
}
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
 else {
if (type == TelephonyManager.NETWORK_TYPE_LTE_CA) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G_PLUS;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[2],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G_PLUS;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_4G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[1],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_4G;
}
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[1];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_4G;
}
break;
case TelephonyManager.NETWORK_TYPE_GPRS:
case TelephonyManager.NETWORK_TYPE_GSM:
if (!showAtLeast3G) {
mSelectedDataActivityIndex[slot]=DATA_TYPE_G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(dataTypeArray[type],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_G;
mSelectedDataTypeDesc[slot]=mDataTypeDescriptionArray[type];
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
}
 else {
mSelectedDataActivityIndex[slot]=DATA_TYPE_3G;
mSelectedDataTypeIcon[slot]=mRes.getIdentifier(mDataTypeGenerationArray[0],null,NS);
mSelectedQSDataTypeIcon[slot]=QS_DATA_3G;
mSelectedDataTypeDesc[slot]=mDataTypeGenerationDescArray[0];
;
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_3G;
}
break;
default :
mSelectedDataActivityIndex[slot]=DATA_TYPE_UNKNOWN;
mSelectedDataTypeIcon[slot]=0;
mSelectedQSDataTypeIcon[slot]=0;
mSelectedDataTypeDesc[slot]=""String_Node_Str"";
mSelectedSignalStreagthIndex[slot]=SIGNAL_STRENGTH_TYPE_G;
break;
}
log(TAG,""String_Node_Str"" + String.format(""String_Node_Str"",slot,mSelectedDataTypeIcon[slot],mSelectedDataActivityIndex[slot]));
}",0.9740629997913914
190990,"private boolean shouldForceHide(WindowState win){
  final WindowState imeTarget=mService.mInputMethodTarget;
  final boolean showImeOverKeyguard=imeTarget != null && imeTarget.isVisibleNow() && ((imeTarget.getAttrs().flags & FLAG_SHOW_WHEN_LOCKED) != 0 || !mPolicy.canBeForceHidden(imeTarget,imeTarget.mAttrs));
  final WindowState winShowWhenLocked=(WindowState)mPolicy.getWinShowWhenLockedLw();
  final AppWindowToken appShowWhenLocked=winShowWhenLocked == null ? null : winShowWhenLocked.mAppToken;
  boolean allowWhenLocked=false;
  allowWhenLocked|=(win.mIsImWindow || imeTarget == win) && showImeOverKeyguard;
  allowWhenLocked|=(win.mAttrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0;
  allowWhenLocked|=win.mAttachedWindow != null && (win.mAttachedWindow.mAttrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0;
  if (appShowWhenLocked != null) {
    allowWhenLocked|=appShowWhenLocked == win.mAppToken || (win.mAttrs.privateFlags & PRIVATE_FLAG_SYSTEM_ERROR) != 0;
  }
  allowWhenLocked|=(win.mAttrs.flags & FLAG_DISMISS_KEYGUARD) != 0 && mPolicy.canShowDismissingWindowWhileLockedLw();
  boolean keyguardOn=mPolicy.isKeyguardShowingOrOccluded() && mForceHiding != KEYGUARD_ANIMATING_OUT;
  boolean hideDockDivider=win.mAttrs.type == TYPE_DOCK_DIVIDER && win.getDisplayContent().getDockedStackLocked() == null;
  return keyguardOn && !allowWhenLocked && (win.getDisplayId() == Display.DEFAULT_DISPLAY) || hideDockDivider;
}","private boolean shouldForceHide(WindowState win){
  final WindowState imeTarget=mService.mInputMethodTarget;
  final boolean showImeOverKeyguard=imeTarget != null && imeTarget.isVisibleNow() && ((imeTarget.getAttrs().flags & FLAG_SHOW_WHEN_LOCKED) != 0 || !mPolicy.canBeForceHidden(imeTarget,imeTarget.mAttrs));
  final WindowState winShowWhenLocked=getWinShowWhenLockedOrAnimating();
  final AppWindowToken appShowWhenLocked=winShowWhenLocked == null ? null : winShowWhenLocked.mAppToken;
  boolean allowWhenLocked=false;
  allowWhenLocked|=(win.mIsImWindow || imeTarget == win) && showImeOverKeyguard;
  allowWhenLocked|=(win.mAttrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0 && win.mTurnOnScreen;
  if (appShowWhenLocked != null) {
    allowWhenLocked|=appShowWhenLocked == win.mAppToken || (win.mAttrs.flags & FLAG_SHOW_WHEN_LOCKED) != 0 || (win.mAttrs.privateFlags & PRIVATE_FLAG_SYSTEM_ERROR) != 0;
  }
  allowWhenLocked|=(win.mAttrs.flags & FLAG_DISMISS_KEYGUARD) != 0 && mPolicy.canShowDismissingWindowWhileLockedLw();
  boolean keyguardOn=mPolicy.isKeyguardShowingOrOccluded() && mForceHiding != KEYGUARD_ANIMATING_OUT;
  boolean hideDockDivider=win.mAttrs.type == TYPE_DOCK_DIVIDER && win.getDisplayContent().getDockedStackLocked() == null;
  return keyguardOn && !allowWhenLocked && (win.getDisplayId() == Display.DEFAULT_DISPLAY) || hideDockDivider;
}",0.8854354897000362
190991,"private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  final boolean keyguardGoingAwayToShade=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_TO_SHADE) != 0;
  final boolean keyguardGoingAwayNoAnimation=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_NO_WINDOW_ANIMATIONS) != 0;
  final boolean keyguardGoingAwayWithWallpaper=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_WITH_WALLPAPER) != 0;
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
          winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      orAnimating(nowAnimating);
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,keyguardGoingAwayToShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime(),STACK_CLIP_BEFORE_ANIM);
            winAnimator.mKeyguardGoingAwayAnimation=true;
            winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!keyguardGoingAwayNoAnimation) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,keyguardGoingAwayToShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a,STACK_CLIP_BEFORE_ANIM);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !keyguardGoingAwayNoAnimation) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(keyguardGoingAwayToShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
}","private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  final boolean keyguardGoingAwayToShade=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_TO_SHADE) != 0;
  final boolean keyguardGoingAwayNoAnimation=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_NO_WINDOW_ANIMATIONS) != 0;
  final boolean keyguardGoingAwayWithWallpaper=(mKeyguardGoingAwayFlags & KEYGUARD_GOING_AWAY_FLAG_WITH_WALLPAPER) != 0;
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
          winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      orAnimating(nowAnimating);
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,keyguardGoingAwayToShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime(),STACK_CLIP_BEFORE_ANIM);
            winAnimator.mKeyguardGoingAwayAnimation=true;
            winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!keyguardGoingAwayNoAnimation) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,keyguardGoingAwayToShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a,STACK_CLIP_BEFORE_ANIM);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          winAnimator.mKeyguardGoingAwayWithWallpaper=keyguardGoingAwayWithWallpaper;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !keyguardGoingAwayNoAnimation) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(keyguardGoingAwayToShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
  final WindowState winShowWhenLocked=(WindowState)mPolicy.getWinShowWhenLockedLw();
  if (winShowWhenLocked != null) {
    mLastShowWinWhenLocked=winShowWhenLocked;
  }
}",0.9915279577394598
190992,"public PackageManagerService(Context context,Installer installer,boolean factoryTest,boolean onlyCore){
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,SystemClock.uptimeMillis());
  if (mSdkVersion <= 0) {
    Slog.w(TAG,""String_Node_Str"");
  }
  mContext=context;
  mFactoryTest=factoryTest;
  mOnlyCore=onlyCore;
  mMetrics=new DisplayMetrics();
  mSettings=new Settings(mPackages);
  mSettings.addSharedUserLPw(""String_Node_Str"",Process.SYSTEM_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",RADIO_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",LOG_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",NFC_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",BLUETOOTH_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",SHELL_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  String separateProcesses=SystemProperties.get(""String_Node_Str"");
  if (separateProcesses != null && separateProcesses.length() > 0) {
    if (""String_Node_Str"".equals(separateProcesses)) {
      mDefParseFlags=PackageParser.PARSE_IGNORE_PROCESSES;
      mSeparateProcesses=null;
      Slog.w(TAG,""String_Node_Str"");
    }
 else {
      mDefParseFlags=0;
      mSeparateProcesses=separateProcesses.split(""String_Node_Str"");
      Slog.w(TAG,""String_Node_Str"" + separateProcesses);
    }
  }
 else {
    mDefParseFlags=0;
    mSeparateProcesses=null;
  }
  mInstaller=installer;
  mPackageDexOptimizer=new PackageDexOptimizer(installer,mInstallLock,context,""String_Node_Str"");
  mMoveCallbacks=new MoveCallbacks(FgThread.get().getLooper());
  mOnPermissionChangeListeners=new OnPermissionChangeListeners(FgThread.get().getLooper());
  getDefaultDisplayMetrics(context,mMetrics);
  SystemConfig systemConfig=SystemConfig.getInstance();
  mGlobalGids=systemConfig.getGlobalGids();
  mSystemPermissions=systemConfig.getSystemPermissions();
  mAvailableFeatures=systemConfig.getAvailableFeatures();
  mProtectedPackages=new ProtectedPackages(mContext);
synchronized (mInstallLock) {
synchronized (mPackages) {
      mHandlerThread=new ServiceThread(TAG,Process.THREAD_PRIORITY_BACKGROUND,true);
      mHandlerThread.start();
      mHandler=new PackageHandler(mHandlerThread.getLooper());
      mProcessLoggingHandler=new ProcessLoggingHandler();
      Watchdog.getInstance().addThread(mHandler,WATCHDOG_TIMEOUT);
      mDefaultPermissionPolicy=new DefaultPermissionGrantPolicy(this);
      File dataDir=Environment.getDataDirectory();
      mAppInstallDir=new File(dataDir,""String_Node_Str"");
      mAppLib32InstallDir=new File(dataDir,""String_Node_Str"");
      mEphemeralInstallDir=new File(dataDir,""String_Node_Str"");
      mAsecInternalPath=new File(dataDir,""String_Node_Str"").getPath();
      mDrmAppPrivateInstallDir=new File(dataDir,""String_Node_Str"");
      sUserManager=new UserManagerService(context,this,mPackages);
      ArrayMap<String,SystemConfig.PermissionEntry> permConfig=systemConfig.getPermissions();
      for (int i=0; i < permConfig.size(); i++) {
        SystemConfig.PermissionEntry perm=permConfig.valueAt(i);
        BasePermission bp=mSettings.mPermissions.get(perm.name);
        if (bp == null) {
          bp=new BasePermission(perm.name,""String_Node_Str"",BasePermission.TYPE_BUILTIN);
          mSettings.mPermissions.put(perm.name,bp);
        }
        if (perm.gids != null) {
          bp.setGids(perm.gids,perm.perUser);
        }
      }
      ArrayMap<String,String> libConfig=systemConfig.getSharedLibraries();
      for (int i=0; i < libConfig.size(); i++) {
        mSharedLibraries.put(libConfig.keyAt(i),new SharedLibraryEntry(libConfig.valueAt(i),null));
      }
      mFoundPolicyFile=SELinuxMMAC.readInstallPolicy();
      mFirstBoot=!mSettings.readLPw(sUserManager.getUsers(false));
      if (mFirstBoot) {
        requestCopyPreoptedFiles();
      }
      String customResolverActivity=Resources.getSystem().getString(R.string.config_customResolverActivity);
      if (TextUtils.isEmpty(customResolverActivity)) {
        customResolverActivity=null;
      }
 else {
        mCustomResolverComponentName=ComponentName.unflattenFromString(customResolverActivity);
      }
      long startTime=SystemClock.uptimeMillis();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,startTime);
      final int scanFlags=SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING| SCAN_INITIAL;
      final String bootClassPath=System.getenv(""String_Node_Str"");
      final String systemServerClassPath=System.getenv(""String_Node_Str"");
      if (bootClassPath == null) {
        Slog.w(TAG,""String_Node_Str"");
      }
      if (systemServerClassPath == null) {
        Slog.w(TAG,""String_Node_Str"");
      }
      final List<String> allInstructionSets=InstructionSets.getAllInstructionSets();
      final String[] dexCodeInstructionSets=getDexCodeInstructionSets(allInstructionSets.toArray(new String[allInstructionSets.size()]));
      if (mSharedLibraries.size() > 0) {
        for (        String dexCodeInstructionSet : dexCodeInstructionSets) {
          for (          SharedLibraryEntry libEntry : mSharedLibraries.values()) {
            final String lib=libEntry.path;
            if (lib == null) {
              continue;
            }
            try {
              int dexoptNeeded=DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false);
              if (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) {
                mInstaller.dexopt(lib,Process.SYSTEM_UID,dexCodeInstructionSet,dexoptNeeded,DEXOPT_PUBLIC,getCompilerFilterForReason(REASON_SHARED_APK),StorageManager.UUID_PRIVATE_INTERNAL,SKIP_SHARED_LIBRARY_CHECK);
              }
            }
 catch (            FileNotFoundException e) {
              Slog.w(TAG,""String_Node_Str"" + lib);
            }
catch (            IOException|InstallerException e) {
              Slog.w(TAG,""String_Node_Str"" + lib + ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
      File frameworkDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      final VersionInfo ver=mSettings.getInternalVersion();
      mIsUpgrade=!Build.FINGERPRINT.equals(ver.fingerprint);
      mPromoteSystemApps=mIsUpgrade && ver.sdkVersion <= Build.VERSION_CODES.LOLLIPOP_MR1;
      mIsPreNUpgrade=mIsUpgrade && ver.sdkVersion < Build.VERSION_CODES.N;
      mIsPreNMR1Upgrade=mIsUpgrade && ver.sdkVersion < Build.VERSION_CODES.N_MR1;
      if (mPromoteSystemApps) {
        Iterator<PackageSetting> pkgSettingIter=mSettings.mPackages.values().iterator();
        while (pkgSettingIter.hasNext()) {
          PackageSetting ps=pkgSettingIter.next();
          if (isSystemApp(ps)) {
            mExistingSystemPackages.add(ps.name);
          }
        }
      }
      File vendorOverlayDir=new File(VENDOR_OVERLAY_DIR);
      scanDirTracedLI(vendorOverlayDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_TRUSTED_OVERLAY,scanFlags | SCAN_TRUSTED_OVERLAY,0);
      scanDirTracedLI(frameworkDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_IS_PRIVILEGED,scanFlags | SCAN_NO_DEX,0);
      final File privilegedAppDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      scanDirTracedLI(privilegedAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_IS_PRIVILEGED,scanFlags,0);
      final File systemAppDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      scanDirTracedLI(systemAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      File vendorAppDir=new File(""String_Node_Str"");
      try {
        vendorAppDir=vendorAppDir.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      scanDirTracedLI(vendorAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final File oemAppDir=new File(Environment.getOemDirectory(),""String_Node_Str"");
      scanDirTracedLI(oemAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final List<String> possiblyDeletedUpdatedSystemApps=new ArrayList<String>();
      if (!mOnlyCore) {
        Iterator<PackageSetting> psit=mSettings.mPackages.values().iterator();
        while (psit.hasNext()) {
          PackageSetting ps=psit.next();
          if ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
            continue;
          }
          final PackageParser.Package scannedPkg=mPackages.get(ps.name);
          if (scannedPkg != null) {
            if (mSettings.isDisabledSystemPackageLPr(ps.name)) {
              logCriticalInfo(Log.WARN,""String_Node_Str"" + ps.name + ""String_Node_Str""+ ps.codePathString+ ""String_Node_Str""+ ps.installStatus+ ""String_Node_Str""+ ps.versionCode+ ""String_Node_Str""+ scannedPkg.mVersionCode);
              removePackageLI(scannedPkg,true);
              mExpectingBetter.put(ps.name,ps.codePath);
            }
            continue;
          }
          if (!mSettings.isDisabledSystemPackageLPr(ps.name)) {
            psit.remove();
            logCriticalInfo(Log.WARN,""String_Node_Str"" + ps.name + ""String_Node_Str"");
          }
 else {
            final PackageSetting disabledPs=mSettings.getDisabledSystemPkgLPr(ps.name);
            if (disabledPs.codePath == null || !disabledPs.codePath.exists()) {
              possiblyDeletedUpdatedSystemApps.add(ps.name);
            }
          }
        }
      }
      ArrayList<PackageSetting> deletePkgsList=mSettings.getListOfIncompleteInstallPackagesLPr();
      for (int i=0; i < deletePkgsList.size(); i++) {
        final String packageName=deletePkgsList.get(i).name;
        logCriticalInfo(Log.WARN,""String_Node_Str"" + packageName);
synchronized (mPackages) {
          mSettings.removePackageLPw(packageName);
        }
      }
      deleteTempPackageFiles();
      mSettings.pruneSharedUsersLPw();
      if (!mOnlyCore) {
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,SystemClock.uptimeMillis());
        scanDirTracedLI(mAppInstallDir,0,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirTracedLI(mDrmAppPrivateInstallDir,mDefParseFlags | PackageParser.PARSE_FORWARD_LOCK,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirLI(mEphemeralInstallDir,mDefParseFlags | PackageParser.PARSE_IS_EPHEMERAL,scanFlags | SCAN_REQUIRE_KNOWN,0);
        for (        String deletedAppName : possiblyDeletedUpdatedSystemApps) {
          PackageParser.Package deletedPkg=mPackages.get(deletedAppName);
          mSettings.removeDisabledSystemPackageLPw(deletedAppName);
          String msg;
          if (deletedPkg == null) {
            msg=""String_Node_Str"" + deletedAppName + ""String_Node_Str"";
          }
 else {
            msg=""String_Node_Str"" + deletedAppName + ""String_Node_Str""+ deletedAppName;
            deletedPkg.applicationInfo.flags&=~ApplicationInfo.FLAG_SYSTEM;
            PackageSetting deletedPs=mSettings.mPackages.get(deletedAppName);
            deletedPs.pkgFlags&=~ApplicationInfo.FLAG_SYSTEM;
          }
          logCriticalInfo(Log.WARN,msg);
        }
        for (int i=0; i < mExpectingBetter.size(); i++) {
          final String packageName=mExpectingBetter.keyAt(i);
          if (!mPackages.containsKey(packageName)) {
            final File scanFile=mExpectingBetter.valueAt(i);
            logCriticalInfo(Log.WARN,""String_Node_Str"" + packageName + ""String_Node_Str"");
            int reparseFlags=mDefParseFlags;
            if (FileUtils.contains(privilegedAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR | PackageParser.PARSE_IS_PRIVILEGED;
            }
 else             if (FileUtils.contains(systemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(vendorAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(oemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else {
              Slog.e(TAG,""String_Node_Str"" + scanFile);
              continue;
            }
            mSettings.enableSystemPackageLPw(packageName);
            try {
              scanPackageTracedLI(scanFile,reparseFlags,scanFlags,0,null);
            }
 catch (            PackageManagerException e) {
              Slog.e(TAG,""String_Node_Str"" + e.getMessage());
            }
          }
        }
      }
      mExpectingBetter.clear();
      mSetupWizardPackage=getSetupWizardPackageName();
      if (mProtectedFilters.size() > 0) {
        if (DEBUG_FILTERS && mSetupWizardPackage == null) {
          Slog.i(TAG,""String_Node_Str"" + ""String_Node_Str"");
        }
        for (        ActivityIntentInfo filter : mProtectedFilters) {
          if (filter.activity.info.packageName.equals(mSetupWizardPackage)) {
            if (DEBUG_FILTERS) {
              Slog.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + filter.getPriority() + ""String_Node_Str""+ ""String_Node_Str""+ filter.activity.info.packageName+ ""String_Node_Str""+ filter.activity.className+ ""String_Node_Str""+ filter.getPriority());
            }
            continue;
          }
          Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + filter.activity.info.packageName + ""String_Node_Str""+ filter.activity.className+ ""String_Node_Str""+ filter.getPriority());
          filter.setPriority(0);
        }
      }
      mDeferProtectedFilters=false;
      mProtectedFilters.clear();
      updateAllSharedLibrariesLPw();
      for (      SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) {
        adjustCpuAbisForSharedUserLPw(setting.packages,null,false);
      }
      mPackageUsage.read(mPackages);
      mCompilerStats.read();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,SystemClock.uptimeMillis());
      Slog.i(TAG,""String_Node_Str"" + ((SystemClock.uptimeMillis() - startTime) / 1000f) + ""String_Node_Str"");
      int updateFlags=UPDATE_PERMISSIONS_ALL;
      if (ver.sdkVersion != mSdkVersion) {
        Slog.i(TAG,""String_Node_Str"" + ver.sdkVersion + ""String_Node_Str""+ mSdkVersion+ ""String_Node_Str"");
        updateFlags|=UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;
      }
      updatePermissionsLPw(null,null,StorageManager.UUID_PRIVATE_INTERNAL,updateFlags);
      ver.sdkVersion=mSdkVersion;
      if (!onlyCore && (mPromoteSystemApps || mFirstBoot)) {
        for (        UserInfo user : sUserManager.getUsers(true)) {
          mSettings.applyDefaultPreferredAppsLPw(this,user.id);
          applyFactoryDefaultBrowserLPw(user.id);
          primeDomainVerificationsLPw(user.id);
        }
      }
      final int storageFlags;
      if (StorageManager.isFileEncryptedNativeOrEmulated()) {
        storageFlags=StorageManager.FLAG_STORAGE_DE;
      }
 else {
        storageFlags=StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;
      }
      reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL,UserHandle.USER_SYSTEM,storageFlags);
      if (mIsUpgrade && !onlyCore) {
        Slog.i(TAG,""String_Node_Str"");
        for (int i=0; i < mSettings.mPackages.size(); i++) {
          final PackageSetting ps=mSettings.mPackages.valueAt(i);
          if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL,ps.volumeUuid)) {
            clearAppDataLIF(ps.pkg,UserHandle.USER_ALL,StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);
          }
        }
        ver.fingerprint=Build.FINGERPRINT;
      }
      checkDefaultBrowser();
      mExistingSystemPackages.clear();
      mPromoteSystemApps=false;
      ver.databaseVersion=Settings.CURRENT_DATABASE_VERSION;
      mSettings.writeLPr();
      if ((isFirstBoot() || isUpgrade() || VMRuntime.didPruneDalvikCache()) && !onlyCore) {
        long start=System.nanoTime();
        List<PackageParser.Package> coreApps=new ArrayList<>();
        for (        PackageParser.Package pkg : mPackages.values()) {
          if (pkg.coreApp) {
            coreApps.add(pkg);
          }
        }
        int[] stats=performDexOptUpgrade(coreApps,false,getCompilerFilterForReason(REASON_CORE_APP));
        final int elapsedTimeSeconds=(int)TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start);
        MetricsLogger.histogram(mContext,""String_Node_Str"",elapsedTimeSeconds);
        if (DEBUG_DEXOPT) {
          Slog.i(TAG,""String_Node_Str"" + elapsedTimeSeconds + ""String_Node_Str""+ stats[0]+ ""String_Node_Str""+ stats[1]+ ""String_Node_Str""+ stats[2]+ ""String_Node_Str"");
        }
      }
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,SystemClock.uptimeMillis());
      if (!mOnlyCore) {
        mRequiredVerifierPackage=getRequiredButNotReallyRequiredVerifierLPr();
        mRequiredInstallerPackage=getRequiredInstallerLPr();
        mRequiredUninstallerPackage=getRequiredUninstallerLPr();
        mIntentFilterVerifierComponent=getIntentFilterVerifierComponentNameLPr();
        mIntentFilterVerifier=new IntentVerifierProxy(mContext,mIntentFilterVerifierComponent);
        mServicesSystemSharedLibraryPackageName=getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);
        mSharedSystemSharedLibraryPackageName=getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);
      }
 else {
        mRequiredVerifierPackage=null;
        mRequiredInstallerPackage=null;
        mRequiredUninstallerPackage=null;
        mIntentFilterVerifierComponent=null;
        mIntentFilterVerifier=null;
        mServicesSystemSharedLibraryPackageName=null;
        mSharedSystemSharedLibraryPackageName=null;
      }
      mInstallerService=new PackageInstallerService(context,this);
      final ComponentName ephemeralResolverComponent=getEphemeralResolverLPr();
      final ComponentName ephemeralInstallerComponent=getEphemeralInstallerLPr();
      if (ephemeralInstallerComponent != null && ephemeralResolverComponent != null) {
        if (DEBUG_EPHEMERAL) {
          Slog.i(TAG,""String_Node_Str"" + ephemeralResolverComponent + ""String_Node_Str""+ ephemeralInstallerComponent);
        }
        mEphemeralResolverComponent=ephemeralResolverComponent;
        mEphemeralInstallerComponent=ephemeralInstallerComponent;
        setUpEphemeralInstallerActivityLP(mEphemeralInstallerComponent);
        mEphemeralResolverConnection=new EphemeralResolverConnection(mContext,mEphemeralResolverComponent);
      }
 else {
        if (DEBUG_EPHEMERAL) {
          final String missingComponent=(ephemeralResolverComponent == null) ? (ephemeralInstallerComponent == null) ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"";
          Slog.i(TAG,""String_Node_Str"" + missingComponent);
        }
        mEphemeralResolverComponent=null;
        mEphemeralInstallerComponent=null;
        mEphemeralResolverConnection=null;
      }
      mEphemeralApplicationRegistry=new EphemeralApplicationRegistry(this);
    }
  }
  Runtime.getRuntime().gc();
  mInstaller.setWarnIfHeld(mPackages);
  LocalServices.addService(PackageManagerInternal.class,new PackageManagerInternalImpl());
}","public PackageManagerService(Context context,Installer installer,boolean factoryTest,boolean onlyCore){
  EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START,SystemClock.uptimeMillis());
  if (mSdkVersion <= 0) {
    Slog.w(TAG,""String_Node_Str"");
  }
  mContext=context;
  mFactoryTest=factoryTest;
  mOnlyCore=onlyCore;
  mMetrics=new DisplayMetrics();
  mSettings=new Settings(mPackages);
  mSettings.addSharedUserLPw(""String_Node_Str"",Process.SYSTEM_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",RADIO_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",LOG_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",NFC_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",BLUETOOTH_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  mSettings.addSharedUserLPw(""String_Node_Str"",SHELL_UID,ApplicationInfo.FLAG_SYSTEM,ApplicationInfo.PRIVATE_FLAG_PRIVILEGED);
  String separateProcesses=SystemProperties.get(""String_Node_Str"");
  if (separateProcesses != null && separateProcesses.length() > 0) {
    if (""String_Node_Str"".equals(separateProcesses)) {
      mDefParseFlags=PackageParser.PARSE_IGNORE_PROCESSES;
      mSeparateProcesses=null;
      Slog.w(TAG,""String_Node_Str"");
    }
 else {
      mDefParseFlags=0;
      mSeparateProcesses=separateProcesses.split(""String_Node_Str"");
      Slog.w(TAG,""String_Node_Str"" + separateProcesses);
    }
  }
 else {
    mDefParseFlags=0;
    mSeparateProcesses=null;
  }
  mInstaller=installer;
  mPackageDexOptimizer=new PackageDexOptimizer(installer,mInstallLock,context,""String_Node_Str"");
  mMoveCallbacks=new MoveCallbacks(FgThread.get().getLooper());
  mOnPermissionChangeListeners=new OnPermissionChangeListeners(FgThread.get().getLooper());
  getDefaultDisplayMetrics(context,mMetrics);
  SystemConfig systemConfig=SystemConfig.getInstance();
  mGlobalGids=systemConfig.getGlobalGids();
  mSystemPermissions=systemConfig.getSystemPermissions();
  mAvailableFeatures=systemConfig.getAvailableFeatures();
  mProtectedPackages=new ProtectedPackages(mContext);
synchronized (mInstallLock) {
synchronized (mPackages) {
      mHandlerThread=new ServiceThread(TAG,Process.THREAD_PRIORITY_BACKGROUND,true);
      mHandlerThread.start();
      mHandler=new PackageHandler(mHandlerThread.getLooper());
      mProcessLoggingHandler=new ProcessLoggingHandler();
      Watchdog.getInstance().addThread(mHandler,WATCHDOG_TIMEOUT);
      mDefaultPermissionPolicy=new DefaultPermissionGrantPolicy(this);
      File dataDir=Environment.getDataDirectory();
      mAppInstallDir=new File(dataDir,""String_Node_Str"");
      mAppLib32InstallDir=new File(dataDir,""String_Node_Str"");
      mEphemeralInstallDir=new File(dataDir,""String_Node_Str"");
      mAsecInternalPath=new File(dataDir,""String_Node_Str"").getPath();
      mDrmAppPrivateInstallDir=new File(dataDir,""String_Node_Str"");
      sUserManager=new UserManagerService(context,this,mPackages);
      ArrayMap<String,SystemConfig.PermissionEntry> permConfig=systemConfig.getPermissions();
      for (int i=0; i < permConfig.size(); i++) {
        SystemConfig.PermissionEntry perm=permConfig.valueAt(i);
        BasePermission bp=mSettings.mPermissions.get(perm.name);
        if (bp == null) {
          bp=new BasePermission(perm.name,""String_Node_Str"",BasePermission.TYPE_BUILTIN);
          mSettings.mPermissions.put(perm.name,bp);
        }
        if (perm.gids != null) {
          bp.setGids(perm.gids,perm.perUser);
        }
      }
      ArrayMap<String,String> libConfig=systemConfig.getSharedLibraries();
      for (int i=0; i < libConfig.size(); i++) {
        mSharedLibraries.put(libConfig.keyAt(i),new SharedLibraryEntry(libConfig.valueAt(i),null));
      }
      mFoundPolicyFile=SELinuxMMAC.readInstallPolicy();
      mFirstBoot=!mSettings.readLPw(sUserManager.getUsers(false));
      if (mFirstBoot) {
        requestCopyPreoptedFiles();
      }
      String customResolverActivity=Resources.getSystem().getString(R.string.config_customResolverActivity);
      if (TextUtils.isEmpty(customResolverActivity)) {
        customResolverActivity=null;
      }
 else {
        mCustomResolverComponentName=ComponentName.unflattenFromString(customResolverActivity);
      }
      long startTime=SystemClock.uptimeMillis();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SYSTEM_SCAN_START,startTime);
      final int scanFlags=SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING| SCAN_INITIAL;
      final String bootClassPath=System.getenv(""String_Node_Str"");
      final String systemServerClassPath=System.getenv(""String_Node_Str"");
      if (bootClassPath == null) {
        Slog.w(TAG,""String_Node_Str"");
      }
      if (systemServerClassPath == null) {
        Slog.w(TAG,""String_Node_Str"");
      }
      final List<String> allInstructionSets=InstructionSets.getAllInstructionSets();
      final String[] dexCodeInstructionSets=getDexCodeInstructionSets(allInstructionSets.toArray(new String[allInstructionSets.size()]));
      if (mSharedLibraries.size() > 0) {
        for (        String dexCodeInstructionSet : dexCodeInstructionSets) {
          for (          SharedLibraryEntry libEntry : mSharedLibraries.values()) {
            final String lib=libEntry.path;
            if (lib == null) {
              continue;
            }
            try {
              int dexoptNeeded=DexFile.getDexOptNeeded(lib,dexCodeInstructionSet,getCompilerFilterForReason(REASON_SHARED_APK),false);
              if (dexoptNeeded != DexFile.NO_DEXOPT_NEEDED) {
                mInstaller.dexopt(lib,Process.SYSTEM_UID,dexCodeInstructionSet,dexoptNeeded,DEXOPT_PUBLIC,getCompilerFilterForReason(REASON_SHARED_APK),StorageManager.UUID_PRIVATE_INTERNAL,SKIP_SHARED_LIBRARY_CHECK);
              }
            }
 catch (            FileNotFoundException e) {
              Slog.w(TAG,""String_Node_Str"" + lib);
            }
catch (            IOException|InstallerException e) {
              Slog.w(TAG,""String_Node_Str"" + lib + ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
      File frameworkDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      final VersionInfo ver=mSettings.getInternalVersion();
      mIsUpgrade=!Build.FINGERPRINT.equals(ver.fingerprint);
      mPromoteSystemApps=mIsUpgrade && ver.sdkVersion <= Build.VERSION_CODES.LOLLIPOP_MR1;
      mIsPreNUpgrade=mIsUpgrade && ver.sdkVersion < Build.VERSION_CODES.N;
      mIsPreNMR1Upgrade=mIsUpgrade && ver.sdkVersion < Build.VERSION_CODES.N_MR1;
      if (mPromoteSystemApps) {
        Iterator<PackageSetting> pkgSettingIter=mSettings.mPackages.values().iterator();
        while (pkgSettingIter.hasNext()) {
          PackageSetting ps=pkgSettingIter.next();
          if (isSystemApp(ps)) {
            mExistingSystemPackages.add(ps.name);
          }
        }
      }
      File vendorOverlayDir=new File(VENDOR_OVERLAY_DIR);
      scanDirTracedLI(vendorOverlayDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_TRUSTED_OVERLAY,scanFlags | SCAN_TRUSTED_OVERLAY,0);
      scanDirTracedLI(frameworkDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_IS_PRIVILEGED,scanFlags | SCAN_NO_DEX,0);
      final File privilegedAppDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      scanDirTracedLI(privilegedAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR| PackageParser.PARSE_IS_PRIVILEGED,scanFlags,0);
      final File systemAppDir=new File(Environment.getRootDirectory(),""String_Node_Str"");
      scanDirTracedLI(systemAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      File vendorAppDir=new File(""String_Node_Str"");
      try {
        vendorAppDir=vendorAppDir.getCanonicalFile();
      }
 catch (      IOException e) {
      }
      scanDirTracedLI(vendorAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final File oemAppDir=new File(Environment.getOemDirectory(),""String_Node_Str"");
      scanDirTracedLI(oemAppDir,mDefParseFlags | PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR,scanFlags,0);
      final List<String> possiblyDeletedUpdatedSystemApps=new ArrayList<String>();
      if (!mOnlyCore) {
        Iterator<PackageSetting> psit=mSettings.mPackages.values().iterator();
        while (psit.hasNext()) {
          PackageSetting ps=psit.next();
          if ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) == 0) {
            continue;
          }
          final PackageParser.Package scannedPkg=mPackages.get(ps.name);
          if (scannedPkg != null) {
            if (mSettings.isDisabledSystemPackageLPr(ps.name)) {
              logCriticalInfo(Log.WARN,""String_Node_Str"" + ps.name + ""String_Node_Str""+ ps.codePathString+ ""String_Node_Str""+ ps.installStatus+ ""String_Node_Str""+ ps.versionCode+ ""String_Node_Str""+ scannedPkg.mVersionCode);
              removePackageLI(scannedPkg,true);
              mExpectingBetter.put(ps.name,ps.codePath);
            }
            continue;
          }
          if (!mSettings.isDisabledSystemPackageLPr(ps.name)) {
            psit.remove();
            logCriticalInfo(Log.WARN,""String_Node_Str"" + ps.name + ""String_Node_Str"");
          }
 else {
            final PackageSetting disabledPs=mSettings.getDisabledSystemPkgLPr(ps.name);
            if (disabledPs.codePath == null || !disabledPs.codePath.exists()) {
              possiblyDeletedUpdatedSystemApps.add(ps.name);
            }
          }
        }
      }
      ArrayList<PackageSetting> deletePkgsList=mSettings.getListOfIncompleteInstallPackagesLPr();
      for (int i=0; i < deletePkgsList.size(); i++) {
        final String packageName=deletePkgsList.get(i).name;
        logCriticalInfo(Log.WARN,""String_Node_Str"" + packageName);
synchronized (mPackages) {
          mSettings.removePackageLPw(packageName);
        }
      }
      deleteTempPackageFiles();
      mSettings.pruneSharedUsersLPw();
      if (!mOnlyCore) {
        EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_DATA_SCAN_START,SystemClock.uptimeMillis());
        scanDirTracedLI(mAppInstallDir,0,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirTracedLI(mDrmAppPrivateInstallDir,mDefParseFlags | PackageParser.PARSE_FORWARD_LOCK,scanFlags | SCAN_REQUIRE_KNOWN,0);
        scanDirLI(mEphemeralInstallDir,mDefParseFlags | PackageParser.PARSE_IS_EPHEMERAL,scanFlags | SCAN_REQUIRE_KNOWN,0);
        for (        String deletedAppName : possiblyDeletedUpdatedSystemApps) {
          PackageParser.Package deletedPkg=mPackages.get(deletedAppName);
          mSettings.removeDisabledSystemPackageLPw(deletedAppName);
          String msg;
          if (deletedPkg == null) {
            msg=""String_Node_Str"" + deletedAppName + ""String_Node_Str"";
          }
 else {
            msg=""String_Node_Str"" + deletedAppName + ""String_Node_Str""+ deletedAppName;
            deletedPkg.applicationInfo.flags&=~ApplicationInfo.FLAG_SYSTEM;
            PackageSetting deletedPs=mSettings.mPackages.get(deletedAppName);
            deletedPs.pkgFlags&=~ApplicationInfo.FLAG_SYSTEM;
          }
          logCriticalInfo(Log.WARN,msg);
        }
        for (int i=0; i < mExpectingBetter.size(); i++) {
          final String packageName=mExpectingBetter.keyAt(i);
          if (!mPackages.containsKey(packageName)) {
            final File scanFile=mExpectingBetter.valueAt(i);
            logCriticalInfo(Log.WARN,""String_Node_Str"" + packageName + ""String_Node_Str"");
            int reparseFlags=mDefParseFlags;
            if (FileUtils.contains(privilegedAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR | PackageParser.PARSE_IS_PRIVILEGED;
            }
 else             if (FileUtils.contains(systemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(vendorAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else             if (FileUtils.contains(oemAppDir,scanFile)) {
              reparseFlags=PackageParser.PARSE_IS_SYSTEM | PackageParser.PARSE_IS_SYSTEM_DIR;
            }
 else {
              Slog.e(TAG,""String_Node_Str"" + scanFile);
              continue;
            }
            mSettings.enableSystemPackageLPw(packageName);
            try {
              scanPackageTracedLI(scanFile,reparseFlags,scanFlags,0,null);
            }
 catch (            PackageManagerException e) {
              Slog.e(TAG,""String_Node_Str"" + e.getMessage());
            }
          }
        }
      }
      mExpectingBetter.clear();
      mStorageManagerPackage=getStorageManagerPackageName();
      mSetupWizardPackage=getSetupWizardPackageName();
      if (mProtectedFilters.size() > 0) {
        if (DEBUG_FILTERS && mSetupWizardPackage == null) {
          Slog.i(TAG,""String_Node_Str"" + ""String_Node_Str"");
        }
        for (        ActivityIntentInfo filter : mProtectedFilters) {
          if (filter.activity.info.packageName.equals(mSetupWizardPackage)) {
            if (DEBUG_FILTERS) {
              Slog.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + filter.getPriority() + ""String_Node_Str""+ ""String_Node_Str""+ filter.activity.info.packageName+ ""String_Node_Str""+ filter.activity.className+ ""String_Node_Str""+ filter.getPriority());
            }
            continue;
          }
          Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + filter.activity.info.packageName + ""String_Node_Str""+ filter.activity.className+ ""String_Node_Str""+ filter.getPriority());
          filter.setPriority(0);
        }
      }
      mDeferProtectedFilters=false;
      mProtectedFilters.clear();
      updateAllSharedLibrariesLPw();
      for (      SharedUserSetting setting : mSettings.getAllSharedUsersLPw()) {
        adjustCpuAbisForSharedUserLPw(setting.packages,null,false);
      }
      mPackageUsage.read(mPackages);
      mCompilerStats.read();
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_SCAN_END,SystemClock.uptimeMillis());
      Slog.i(TAG,""String_Node_Str"" + ((SystemClock.uptimeMillis() - startTime) / 1000f) + ""String_Node_Str"");
      int updateFlags=UPDATE_PERMISSIONS_ALL;
      if (ver.sdkVersion != mSdkVersion) {
        Slog.i(TAG,""String_Node_Str"" + ver.sdkVersion + ""String_Node_Str""+ mSdkVersion+ ""String_Node_Str"");
        updateFlags|=UPDATE_PERMISSIONS_REPLACE_PKG | UPDATE_PERMISSIONS_REPLACE_ALL;
      }
      updatePermissionsLPw(null,null,StorageManager.UUID_PRIVATE_INTERNAL,updateFlags);
      ver.sdkVersion=mSdkVersion;
      if (!onlyCore && (mPromoteSystemApps || mFirstBoot)) {
        for (        UserInfo user : sUserManager.getUsers(true)) {
          mSettings.applyDefaultPreferredAppsLPw(this,user.id);
          applyFactoryDefaultBrowserLPw(user.id);
          primeDomainVerificationsLPw(user.id);
        }
      }
      final int storageFlags;
      if (StorageManager.isFileEncryptedNativeOrEmulated()) {
        storageFlags=StorageManager.FLAG_STORAGE_DE;
      }
 else {
        storageFlags=StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE;
      }
      reconcileAppsDataLI(StorageManager.UUID_PRIVATE_INTERNAL,UserHandle.USER_SYSTEM,storageFlags);
      if (mIsUpgrade && !onlyCore) {
        Slog.i(TAG,""String_Node_Str"");
        for (int i=0; i < mSettings.mPackages.size(); i++) {
          final PackageSetting ps=mSettings.mPackages.valueAt(i);
          if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL,ps.volumeUuid)) {
            clearAppDataLIF(ps.pkg,UserHandle.USER_ALL,StorageManager.FLAG_STORAGE_DE | StorageManager.FLAG_STORAGE_CE | Installer.FLAG_CLEAR_CODE_CACHE_ONLY);
          }
        }
        ver.fingerprint=Build.FINGERPRINT;
      }
      checkDefaultBrowser();
      mExistingSystemPackages.clear();
      mPromoteSystemApps=false;
      ver.databaseVersion=Settings.CURRENT_DATABASE_VERSION;
      mSettings.writeLPr();
      if ((isFirstBoot() || isUpgrade() || VMRuntime.didPruneDalvikCache()) && !onlyCore) {
        long start=System.nanoTime();
        List<PackageParser.Package> coreApps=new ArrayList<>();
        for (        PackageParser.Package pkg : mPackages.values()) {
          if (pkg.coreApp) {
            coreApps.add(pkg);
          }
        }
        int[] stats=performDexOptUpgrade(coreApps,false,getCompilerFilterForReason(REASON_CORE_APP));
        final int elapsedTimeSeconds=(int)TimeUnit.NANOSECONDS.toSeconds(System.nanoTime() - start);
        MetricsLogger.histogram(mContext,""String_Node_Str"",elapsedTimeSeconds);
        if (DEBUG_DEXOPT) {
          Slog.i(TAG,""String_Node_Str"" + elapsedTimeSeconds + ""String_Node_Str""+ stats[0]+ ""String_Node_Str""+ stats[1]+ ""String_Node_Str""+ stats[2]+ ""String_Node_Str"");
        }
      }
      EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_READY,SystemClock.uptimeMillis());
      if (!mOnlyCore) {
        mRequiredVerifierPackage=getRequiredButNotReallyRequiredVerifierLPr();
        mRequiredInstallerPackage=getRequiredInstallerLPr();
        mRequiredUninstallerPackage=getRequiredUninstallerLPr();
        mIntentFilterVerifierComponent=getIntentFilterVerifierComponentNameLPr();
        mIntentFilterVerifier=new IntentVerifierProxy(mContext,mIntentFilterVerifierComponent);
        mServicesSystemSharedLibraryPackageName=getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SERVICES);
        mSharedSystemSharedLibraryPackageName=getRequiredSharedLibraryLPr(PackageManager.SYSTEM_SHARED_LIBRARY_SHARED);
      }
 else {
        mRequiredVerifierPackage=null;
        mRequiredInstallerPackage=null;
        mRequiredUninstallerPackage=null;
        mIntentFilterVerifierComponent=null;
        mIntentFilterVerifier=null;
        mServicesSystemSharedLibraryPackageName=null;
        mSharedSystemSharedLibraryPackageName=null;
      }
      mInstallerService=new PackageInstallerService(context,this);
      final ComponentName ephemeralResolverComponent=getEphemeralResolverLPr();
      final ComponentName ephemeralInstallerComponent=getEphemeralInstallerLPr();
      if (ephemeralInstallerComponent != null && ephemeralResolverComponent != null) {
        if (DEBUG_EPHEMERAL) {
          Slog.i(TAG,""String_Node_Str"" + ephemeralResolverComponent + ""String_Node_Str""+ ephemeralInstallerComponent);
        }
        mEphemeralResolverComponent=ephemeralResolverComponent;
        mEphemeralInstallerComponent=ephemeralInstallerComponent;
        setUpEphemeralInstallerActivityLP(mEphemeralInstallerComponent);
        mEphemeralResolverConnection=new EphemeralResolverConnection(mContext,mEphemeralResolverComponent);
      }
 else {
        if (DEBUG_EPHEMERAL) {
          final String missingComponent=(ephemeralResolverComponent == null) ? (ephemeralInstallerComponent == null) ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"";
          Slog.i(TAG,""String_Node_Str"" + missingComponent);
        }
        mEphemeralResolverComponent=null;
        mEphemeralInstallerComponent=null;
        mEphemeralResolverConnection=null;
      }
      mEphemeralApplicationRegistry=new EphemeralApplicationRegistry(this);
    }
  }
  Runtime.getRuntime().gc();
  mInstaller.setWarnIfHeld(mPackages);
  LocalServices.addService(PackageManagerInternal.class,new PackageManagerInternalImpl());
}",0.9984594792534788
190993,"private boolean isCallerAllowedToSilentlyUninstall(int callingUid,String pkgName){
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID || callingUid == Process.SYSTEM_UID) {
    return true;
  }
  final int callingUserId=UserHandle.getUserId(callingUid);
  if (callingUid == getPackageUid(getInstallerPackageName(pkgName),0,callingUserId)) {
    return true;
  }
  if (mRequiredVerifierPackage != null && callingUid == getPackageUid(mRequiredVerifierPackage,0,callingUserId)) {
    return true;
  }
  if (mRequiredUninstallerPackage != null && callingUid == getPackageUid(mRequiredUninstallerPackage,0,callingUserId)) {
    return true;
  }
  return false;
}","private boolean isCallerAllowedToSilentlyUninstall(int callingUid,String pkgName){
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID || callingUid == Process.SYSTEM_UID) {
    return true;
  }
  final int callingUserId=UserHandle.getUserId(callingUid);
  if (callingUid == getPackageUid(getInstallerPackageName(pkgName),0,callingUserId)) {
    return true;
  }
  if (mRequiredVerifierPackage != null && callingUid == getPackageUid(mRequiredVerifierPackage,0,callingUserId)) {
    return true;
  }
  if (mRequiredUninstallerPackage != null && callingUid == getPackageUid(mRequiredUninstallerPackage,0,callingUserId)) {
    return true;
  }
  if (mStorageManagerPackage != null && callingUid == getPackageUid(mStorageManagerPackage,0,callingUserId)) {
    return true;
  }
  return false;
}",0.8978494623655914
190994,"@Override public void start(){
  sDebugFlags=new RecentsDebugFlags(mContext);
  sSystemServicesProxy=SystemServicesProxy.getInstance(mContext);
  sTaskLoader=new RecentsTaskLoader(mContext);
  sConfiguration=new RecentsConfiguration(mContext);
  UiModeManager uiModeManager=(UiModeManager)mContext.getSystemService(Context.UI_MODE_SERVICE);
  if (uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION) {
    mImpl=new RecentsTvImpl(mContext);
  }
 else {
    mImpl=new RecentsImpl(mContext);
  }
  if (""String_Node_Str"".equals(Build.TYPE) || ""String_Node_Str"".equals(Build.TYPE)) {
    String cnStr=SystemProperties.get(RECENTS_OVERRIDE_SYSPROP_KEY);
    if (!cnStr.isEmpty()) {
      mOverrideRecentsPackageName=cnStr;
    }
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  EventBus.getDefault().register(sSystemServicesProxy,EVENT_BUS_PRIORITY);
  EventBus.getDefault().register(sTaskLoader,EVENT_BUS_PRIORITY);
  final int processUser=sSystemServicesProxy.getProcessUser();
  if (sSystemServicesProxy.isSystemUser(processUser)) {
    mSystemToUserCallbacks=new RecentsSystemUser(mContext,mImpl);
    IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_USER_UNLOCKED);
    mContext.registerReceiverAsUser(mSystemUserUnlockedReceiver,UserHandle.SYSTEM,filter,null,null);
  }
 else {
    registerWithSystemUser();
  }
  putComponent(Recents.class,this);
  long lastVisibleTaskActiveTime=Prefs.getLong(mContext,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME,-1);
  if (lastVisibleTaskActiveTime != -1) {
    long uptime=SystemClock.elapsedRealtime();
    Settings.Secure.putLongForUser(mContext.getContentResolver(),Settings.Secure.OVERVIEW_LAST_VISIBLE_TASK_ACTIVE_UPTIME,uptime - Math.max(0,System.currentTimeMillis() - lastVisibleTaskActiveTime),processUser);
    Prefs.remove(mContext,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME);
  }
}","@Override public void start(){
  sDebugFlags=new RecentsDebugFlags(mContext);
  sSystemServicesProxy=SystemServicesProxy.getInstance(mContext);
  sTaskLoader=new RecentsTaskLoader(mContext);
  sConfiguration=new RecentsConfiguration(mContext);
  UiModeManager uiModeManager=(UiModeManager)mContext.getSystemService(Context.UI_MODE_SERVICE);
  if (uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION) {
    mImpl=new RecentsTvImpl(mContext);
  }
 else {
    mImpl=new RecentsImpl(mContext);
  }
  if (""String_Node_Str"".equals(Build.TYPE) || ""String_Node_Str"".equals(Build.TYPE)) {
    String cnStr=SystemProperties.get(RECENTS_OVERRIDE_SYSPROP_KEY);
    if (!cnStr.isEmpty()) {
      mOverrideRecentsPackageName=cnStr;
    }
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  EventBus.getDefault().register(sSystemServicesProxy,EVENT_BUS_PRIORITY);
  EventBus.getDefault().register(sTaskLoader,EVENT_BUS_PRIORITY);
  final int processUser=sSystemServicesProxy.getProcessUser();
  if (sSystemServicesProxy.isSystemUser(processUser)) {
    mSystemToUserCallbacks=new RecentsSystemUser(mContext,mImpl);
    IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_USER_UNLOCKED);
    mContext.registerReceiverAsUser(mSystemUserUnlockedReceiver,UserHandle.SYSTEM,filter,null,null);
  }
 else {
    registerWithSystemUser();
  }
  putComponent(Recents.class,this);
}",0.8532690569448629
190995,"@Override public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){
  super.dump(prefix,fd,writer,args);
  EventBus.getDefault().dump(prefix,writer);
  Recents.getTaskLoader().dump(prefix,writer);
  ContentResolver cr=getContentResolver();
  long lastPersistUptime=Settings.Secure.getLong(cr,Settings.Secure.TASK_PERSISTER_LAST_WRITE_UPTIME,0);
  long lastVisibleTaskActiveUptime=Settings.Secure.getLongForUser(cr,Settings.Secure.OVERVIEW_LAST_VISIBLE_TASK_ACTIVE_UPTIME,SystemClock.elapsedRealtime(),Recents.getSystemServices().getCurrentUser());
  String id=Integer.toHexString(System.identityHashCode(this));
  writer.print(prefix);
  writer.print(TAG);
  writer.print(""String_Node_Str"");
  writer.print(mIsVisible ? ""String_Node_Str"" : ""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(lastPersistUptime);
  writer.print(""String_Node_Str"");
  writer.print(lastVisibleTaskActiveUptime);
  writer.print(""String_Node_Str"");
  writer.print(id);
  writer.print(""String_Node_Str"");
  writer.println();
  if (mRecentsView != null) {
    mRecentsView.dump(prefix,writer);
  }
}","@Override public void dump(String prefix,FileDescriptor fd,PrintWriter writer,String[] args){
  super.dump(prefix,fd,writer,args);
  EventBus.getDefault().dump(prefix,writer);
  Recents.getTaskLoader().dump(prefix,writer);
  String id=Integer.toHexString(System.identityHashCode(this));
  long lastStackActiveTime=Prefs.getLong(this,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME,-1);
  writer.print(prefix);
  writer.print(TAG);
  writer.print(""String_Node_Str"");
  writer.print(mIsVisible ? ""String_Node_Str"" : ""String_Node_Str"");
  writer.print(""String_Node_Str"");
  writer.print(lastStackActiveTime);
  writer.print(""String_Node_Str"");
  writer.print(System.currentTimeMillis());
  writer.print(""String_Node_Str"");
  writer.print(id);
  writer.print(""String_Node_Str"");
  writer.println();
  if (mRecentsView != null) {
    mRecentsView.dump(prefix,writer);
  }
}",0.6817724068479355
190996,"/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  takeKeyEvents(true);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Configuration appConfiguration=Utilities.getAppConfiguration(this);
  mLastDeviceOrientation=appConfiguration.orientation;
  mLastDisplayDensity=appConfiguration.densityDpi;
  mFocusTimerDuration=getResources().getInteger(R.integer.recents_auto_advance_duration);
  mIterateTrigger=new DozeTrigger(mFocusTimerDuration,new Runnable(){
    @Override public void run(){
      dismissRecentsToFocusedTask(MetricsEvent.OVERVIEW_SELECT_TIMEOUT);
    }
  }
);
  getWindow().setBackgroundDrawable(mRecentsView.getBackgroundScrim());
  mHomeIntent=new Intent(Intent.ACTION_MAIN,null);
  mHomeIntent.addCategory(Intent.CATEGORY_HOME);
  mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  registerReceiver(mSystemBroadcastReceiver,filter);
  getWindow().addPrivateFlags(LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION);
  reloadStackView();
}","/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  takeKeyEvents(true);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Configuration appConfiguration=Utilities.getAppConfiguration(this);
  mLastDeviceOrientation=appConfiguration.orientation;
  mLastDisplayDensity=appConfiguration.densityDpi;
  mFocusTimerDuration=getResources().getInteger(R.integer.recents_auto_advance_duration);
  mIterateTrigger=new DozeTrigger(mFocusTimerDuration,new Runnable(){
    @Override public void run(){
      dismissRecentsToFocusedTask(MetricsEvent.OVERVIEW_SELECT_TIMEOUT);
    }
  }
);
  getWindow().setBackgroundDrawable(mRecentsView.getBackgroundScrim());
  mHomeIntent=new Intent(Intent.ACTION_MAIN,null);
  mHomeIntent.addCategory(Intent.CATEGORY_HOME);
  mHomeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(Intent.ACTION_TIME_CHANGED);
  registerReceiver(mSystemBroadcastReceiver,filter);
  getWindow().addPrivateFlags(LayoutParams.PRIVATE_FLAG_NO_MOVE_ANIMATION);
  reloadStackView();
}",0.9872408293460924
190997,"@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_SCREEN_OFF)) {
    dismissRecentsToHomeIfVisible(false);
  }
}","@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action.equals(Intent.ACTION_SCREEN_OFF)) {
    dismissRecentsToHomeIfVisible(false);
  }
 else   if (action.equals(Intent.ACTION_TIME_CHANGED)) {
    Prefs.putLong(RecentsActivity.this,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME,0);
  }
}",0.7219152854511971
190998,"/** 
 * Returns a list of the recents tasks.
 * @param includeFrontMostExcludedTask if set, will ensure that the front most excluded taskwill be visible, otherwise no excluded tasks will be visible.
 */
public List<ActivityManager.RecentTaskInfo> getRecentTasks(int numLatestTasks,int userId,boolean includeFrontMostExcludedTask,ArraySet<Integer> quietProfileIds){
  if (mAm == null)   return null;
  if (RecentsDebugFlags.Static.EnableMockTasks) {
    ArrayList<ActivityManager.RecentTaskInfo> tasks=new ArrayList<ActivityManager.RecentTaskInfo>();
    int count=Math.min(numLatestTasks,RecentsDebugFlags.Static.MockTaskCount);
    for (int i=0; i < count; i++) {
      int packageIndex=i % RecentsDebugFlags.Static.MockTasksPackageCount;
      ComponentName cn=new ComponentName(""String_Node_Str"" + packageIndex,""String_Node_Str"" + i + ""String_Node_Str"");
      String description=""String_Node_Str"" + i + ""String_Node_Str""+ Long.toString(Math.abs(new Random().nextLong()),36);
      ActivityManager.RecentTaskInfo rti=new ActivityManager.RecentTaskInfo();
      rti.id=rti.persistentId=rti.affiliatedTaskId=i;
      rti.baseIntent=new Intent();
      rti.baseIntent.setComponent(cn);
      rti.description=description;
      rti.firstActiveTime=rti.lastActiveTime=SystemClock.elapsedRealtime();
      if (i % 2 == 0) {
        rti.taskDescription=new ActivityManager.TaskDescription(description,Bitmap.createBitmap(mDummyIcon),null,0xFF000000 | (0xFFFFFF & new Random().nextInt()),0xFF000000 | (0xFFFFFF & new Random().nextInt()));
      }
 else {
        rti.taskDescription=new ActivityManager.TaskDescription();
      }
      tasks.add(rti);
    }
    return tasks;
  }
  int minNumTasksToQuery=10;
  int numTasksToQuery=Math.max(minNumTasksToQuery,numLatestTasks);
  int flags=ActivityManager.RECENT_IGNORE_HOME_STACK_TASKS | ActivityManager.RECENT_INGORE_DOCKED_STACK_TOP_TASK | ActivityManager.RECENT_INGORE_PINNED_STACK_TASKS| ActivityManager.RECENT_IGNORE_UNAVAILABLE| ActivityManager.RECENT_INCLUDE_PROFILES;
  if (includeFrontMostExcludedTask) {
    flags|=ActivityManager.RECENT_WITH_EXCLUDED;
  }
  List<ActivityManager.RecentTaskInfo> tasks=null;
  try {
    tasks=mAm.getRecentTasksForUser(numTasksToQuery,flags,userId);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  if (tasks == null) {
    return new ArrayList<>();
  }
  boolean isFirstValidTask=true;
  Iterator<ActivityManager.RecentTaskInfo> iter=tasks.iterator();
  while (iter.hasNext()) {
    ActivityManager.RecentTaskInfo t=iter.next();
    if (sRecentsBlacklist.contains(t.realActivity.getClassName()) || sRecentsBlacklist.contains(t.realActivity.getPackageName())) {
      iter.remove();
      continue;
    }
    boolean isExcluded=(t.baseIntent.getFlags() & Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS) == Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;
    isExcluded|=quietProfileIds.contains(t.userId);
    if (isExcluded && (!isFirstValidTask || !includeFrontMostExcludedTask)) {
      iter.remove();
    }
    isFirstValidTask=false;
  }
  return tasks.subList(0,Math.min(tasks.size(),numLatestTasks));
}","/** 
 * Returns a list of the recents tasks.
 * @param includeFrontMostExcludedTask if set, will ensure that the front most excluded taskwill be visible, otherwise no excluded tasks will be visible.
 */
public List<ActivityManager.RecentTaskInfo> getRecentTasks(int numLatestTasks,int userId,boolean includeFrontMostExcludedTask,ArraySet<Integer> quietProfileIds){
  if (mAm == null)   return null;
  if (RecentsDebugFlags.Static.EnableMockTasks) {
    ArrayList<ActivityManager.RecentTaskInfo> tasks=new ArrayList<ActivityManager.RecentTaskInfo>();
    int count=Math.min(numLatestTasks,RecentsDebugFlags.Static.MockTaskCount);
    for (int i=0; i < count; i++) {
      int packageIndex=i % RecentsDebugFlags.Static.MockTasksPackageCount;
      ComponentName cn=new ComponentName(""String_Node_Str"" + packageIndex,""String_Node_Str"" + i + ""String_Node_Str"");
      String description=""String_Node_Str"" + i + ""String_Node_Str""+ Long.toString(Math.abs(new Random().nextLong()),36);
      ActivityManager.RecentTaskInfo rti=new ActivityManager.RecentTaskInfo();
      rti.id=rti.persistentId=rti.affiliatedTaskId=i;
      rti.baseIntent=new Intent();
      rti.baseIntent.setComponent(cn);
      rti.description=description;
      rti.firstActiveTime=rti.lastActiveTime=i;
      if (i % 2 == 0) {
        rti.taskDescription=new ActivityManager.TaskDescription(description,Bitmap.createBitmap(mDummyIcon),null,0xFF000000 | (0xFFFFFF & new Random().nextInt()),0xFF000000 | (0xFFFFFF & new Random().nextInt()));
      }
 else {
        rti.taskDescription=new ActivityManager.TaskDescription();
      }
      tasks.add(rti);
    }
    return tasks;
  }
  int minNumTasksToQuery=10;
  int numTasksToQuery=Math.max(minNumTasksToQuery,numLatestTasks);
  int flags=ActivityManager.RECENT_IGNORE_HOME_STACK_TASKS | ActivityManager.RECENT_INGORE_DOCKED_STACK_TOP_TASK | ActivityManager.RECENT_INGORE_PINNED_STACK_TASKS| ActivityManager.RECENT_IGNORE_UNAVAILABLE| ActivityManager.RECENT_INCLUDE_PROFILES;
  if (includeFrontMostExcludedTask) {
    flags|=ActivityManager.RECENT_WITH_EXCLUDED;
  }
  List<ActivityManager.RecentTaskInfo> tasks=null;
  try {
    tasks=mAm.getRecentTasksForUser(numTasksToQuery,flags,userId);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  if (tasks == null) {
    return new ArrayList<>();
  }
  boolean isFirstValidTask=true;
  Iterator<ActivityManager.RecentTaskInfo> iter=tasks.iterator();
  while (iter.hasNext()) {
    ActivityManager.RecentTaskInfo t=iter.next();
    if (sRecentsBlacklist.contains(t.realActivity.getClassName()) || sRecentsBlacklist.contains(t.realActivity.getPackageName())) {
      iter.remove();
      continue;
    }
    boolean isExcluded=(t.baseIntent.getFlags() & Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS) == Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS;
    isExcluded|=quietProfileIds.contains(t.userId);
    if (isExcluded && (!isFirstValidTask || !includeFrontMostExcludedTask)) {
      iter.remove();
    }
    isFirstValidTask=false;
  }
  return tasks.subList(0,Math.min(tasks.size(),numLatestTasks));
}",0.9951519069166128
190999,"/** 
 * Preloads the list of recent tasks from the system. After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,int runningTaskId,boolean includeFrontMostExcludedTask){
  Resources res=mContext.getResources();
  ArrayList<Task> allTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(includeFrontMostExcludedTask);
  }
  SparseArray<Task.TaskKey> affiliatedTasks=new SparseArray<>();
  SparseIntArray affiliatedTaskCounts=new SparseIntArray();
  String dismissDescFormat=mContext.getString(R.string.accessibility_recents_item_will_be_dismissed);
  String appInfoDescFormat=mContext.getString(R.string.accessibility_recents_item_open_app_info);
  boolean updatedLastVisibleTaskActiveTime=false;
  long newLastVisibileTaskActiveTime=0;
  long currentTime=mTimeProvider.getTime();
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    boolean isFreeformTask=mSystemServicesProxy.isFreeformStack(t.stackId);
    boolean isRecentlyUsedTask=t.lastActiveTime >= (currentTime - SESSION_BEGIN_TIME);
    boolean isMoreRecentThanLastVisible=t.lastActiveTime >= mLastVisibileTaskActiveTime;
    boolean isStackTask=isFreeformTask || (isMoreRecentThanLastVisible && (isRecentlyUsedTask || i >= (taskCount - MIN_NUM_TASKS)));
    boolean isLaunchTarget=t.persistentId == runningTaskId;
    if (isStackTask && !updatedLastVisibleTaskActiveTime) {
      newLastVisibileTaskActiveTime=t.lastActiveTime;
      updatedLastVisibleTaskActiveTime=true;
    }
    ActivityInfo info=loader.getAndUpdateActivityInfo(taskKey);
    String title=loader.getAndUpdateActivityTitle(taskKey,t.taskDescription);
    String titleDescription=loader.getAndUpdateContentDescription(taskKey,res);
    String dismissDescription=String.format(dismissDescFormat,titleDescription);
    String appInfoDescription=String.format(appInfoDescFormat,titleDescription);
    Drawable icon=isStackTask ? loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,res,false) : null;
    Bitmap thumbnail=loader.getAndUpdateThumbnail(taskKey,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    int backgroundColor=loader.getActivityBackgroundColor(t.taskDescription);
    boolean isSystemApp=(info != null) && ((info.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);
    Task task=new Task(taskKey,t.affiliatedTaskId,t.affiliatedTaskColor,icon,thumbnail,title,titleDescription,dismissDescription,appInfoDescription,activityColor,backgroundColor,isLaunchTarget,isStackTask,isSystemApp,t.isDockable,t.bounds,t.taskDescription,t.resizeMode,t.topActivity);
    allTasks.add(task);
    affiliatedTaskCounts.put(taskKey.id,affiliatedTaskCounts.get(taskKey.id,0) + 1);
    affiliatedTasks.put(taskKey.id,taskKey);
  }
  if (updatedLastVisibleTaskActiveTime && newLastVisibileTaskActiveTime != mLastVisibileTaskActiveTime) {
    Settings.Secure.putLongForUser(mContext.getContentResolver(),Settings.Secure.OVERVIEW_LAST_VISIBLE_TASK_ACTIVE_UPTIME,newLastVisibileTaskActiveTime,UserHandle.USER_CURRENT);
    mLastVisibileTaskActiveTime=newLastVisibileTaskActiveTime;
  }
  mStack=new TaskStack();
  mStack.setTasks(mContext,allTasks,false);
}","/** 
 * Preloads the list of recent tasks from the system. After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,int runningTaskId,boolean includeFrontMostExcludedTask){
  Resources res=mContext.getResources();
  ArrayList<Task> allTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(includeFrontMostExcludedTask);
  }
  SparseArray<Task.TaskKey> affiliatedTasks=new SparseArray<>();
  SparseIntArray affiliatedTaskCounts=new SparseIntArray();
  String dismissDescFormat=mContext.getString(R.string.accessibility_recents_item_will_be_dismissed);
  String appInfoDescFormat=mContext.getString(R.string.accessibility_recents_item_open_app_info);
  long lastStackActiveTime=Prefs.getLong(mContext,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME,0);
  if (RecentsDebugFlags.Static.EnableMockTasks) {
    lastStackActiveTime=0;
  }
  long newLastStackActiveTime=-1;
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    boolean isFreeformTask=SystemServicesProxy.isFreeformStack(t.stackId);
    boolean isStackTask=isFreeformTask || !isHistoricalTask(t) || (t.lastActiveTime >= lastStackActiveTime && i >= (taskCount - MIN_NUM_TASKS));
    boolean isLaunchTarget=taskKey.id == runningTaskId;
    if (isStackTask && newLastStackActiveTime < 0) {
      newLastStackActiveTime=t.lastActiveTime;
    }
    ActivityInfo info=loader.getAndUpdateActivityInfo(taskKey);
    String title=loader.getAndUpdateActivityTitle(taskKey,t.taskDescription);
    String titleDescription=loader.getAndUpdateContentDescription(taskKey,res);
    String dismissDescription=String.format(dismissDescFormat,titleDescription);
    String appInfoDescription=String.format(appInfoDescFormat,titleDescription);
    Drawable icon=isStackTask ? loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,res,false) : null;
    Bitmap thumbnail=loader.getAndUpdateThumbnail(taskKey,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    int backgroundColor=loader.getActivityBackgroundColor(t.taskDescription);
    boolean isSystemApp=(info != null) && ((info.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);
    Task task=new Task(taskKey,t.affiliatedTaskId,t.affiliatedTaskColor,icon,thumbnail,title,titleDescription,dismissDescription,appInfoDescription,activityColor,backgroundColor,isLaunchTarget,isStackTask,isSystemApp,t.isDockable,t.bounds,t.taskDescription,t.resizeMode,t.topActivity);
    allTasks.add(task);
    affiliatedTaskCounts.put(taskKey.id,affiliatedTaskCounts.get(taskKey.id,0) + 1);
    affiliatedTasks.put(taskKey.id,taskKey);
  }
  if (newLastStackActiveTime != -1) {
    Prefs.putLong(mContext,Prefs.Key.OVERVIEW_LAST_STACK_TASK_ACTIVE_TIME,newLastStackActiveTime);
  }
  mStack=new TaskStack();
  mStack.setTasks(mContext,allTasks,false);
}",0.3211300086480254
191000,"/** 
 * An optimization to preload the raw list of tasks. The raw tasks are saved in least-recent to most-recent order.
 */
public synchronized void preloadRawTasks(boolean includeFrontMostExcludedTask){
  int currentUserId=UserHandle.USER_CURRENT;
  updateCurrentQuietProfilesCache(currentUserId);
  mRawTasks=mSystemServicesProxy.getRecentTasks(ActivityManager.getMaxRecentTasksStatic(),currentUserId,includeFrontMostExcludedTask,mCurrentQuietProfiles);
  mLastVisibileTaskActiveTime=RecentsDebugFlags.Static.EnableMockTasks ? SystemClock.elapsedRealtime() : Settings.Secure.getLongForUser(mContext.getContentResolver(),Settings.Secure.OVERVIEW_LAST_VISIBLE_TASK_ACTIVE_UPTIME,0,currentUserId);
  Collections.reverse(mRawTasks);
}","/** 
 * An optimization to preload the raw list of tasks. The raw tasks are saved in least-recent to most-recent order.
 */
public synchronized void preloadRawTasks(boolean includeFrontMostExcludedTask){
  int currentUserId=UserHandle.USER_CURRENT;
  updateCurrentQuietProfilesCache(currentUserId);
  SystemServicesProxy ssp=Recents.getSystemServices();
  mRawTasks=ssp.getRecentTasks(ActivityManager.getMaxRecentTasksStatic(),currentUserId,includeFrontMostExcludedTask,mCurrentQuietProfiles);
  Collections.reverse(mRawTasks);
}",0.7216494845360825
