record_number,buggy_code,fixed_code,code_similarity
84001,"@Override public int getTypeMatch(IType type){
  if (this.method == null) {
    return 0;
  }
  IType type1=this.method.getType();
  if (type.equals(type1)) {
    return 3;
  }
 else   if (type1.isSuperType(type)) {
    return 2;
  }
  return 0;
}","@Override public int getTypeMatch(IType type){
  if (this.method == null) {
    return 0;
  }
  IType type1=this.method.getType();
  if (type.equals(type1)) {
    return 3;
  }
 else   if (Type.isSuperType(type,type1)) {
    return 2;
  }
  return 0;
}",0.9218436873747496
84002,"@Override public int getTypeMatch(IType type){
  if (this.type.equals(type)) {
    return 3;
  }
 else   if (this.type.isSuperType(type)) {
    return 2;
  }
  return 0;
}","@Override public int getTypeMatch(IType type){
  if (this.type.equals(type)) {
    return 3;
  }
 else   if (type.isSuperTypeOf(this.type)) {
    return 2;
  }
  return 0;
}",0.9651162790697676
84003,"@Override public int getTypeMatch(IType type){
  if (this.method == null) {
    return 0;
  }
  IType type1=this.method.getType();
  if (type.equals(type1)) {
    return 3;
  }
 else   if (type1.isSuperType(type)) {
    return 2;
  }
  return 0;
}","@Override public int getTypeMatch(IType type){
  if (this.method == null) {
    return 0;
  }
  IType type1=this.method.getType();
  if (type.equals(type1)) {
    return 3;
  }
 else   if (type.isSuperTypeOf(type1)) {
    return 2;
  }
  return 0;
}",0.9274193548387096
84004,"@Override public FieldMatch resolveField(String name){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  return super.resolveField(name);
}","@Override public FieldMatch resolveField(String name){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  IField field=this.body.getProperty(name);
  if (field != null) {
    return new FieldMatch(field,1);
  }
  field=this.body.getField(name);
  if (field != null) {
    return new FieldMatch(field,1);
  }
  if (this.instanceField != null && ""String_Node_Str"".equals(name)) {
    return new FieldMatch(this.instanceField,1);
  }
  FieldMatch match;
  if (this.superType != null && this != Type.PREDEF_CLASS) {
    match=this.superType.resolveField(name);
    if (match != null) {
      return match;
    }
  }
  return null;
}",0.3860911270983213
84005,"@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,String name,List<IValue> arguments){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  super.getMethodMatches(list,instance,name,arguments);
}","@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,String name,List<IValue> arguments){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  this.body.getMethodMatches(list,instance,name,arguments);
  if (!list.isEmpty()) {
    return;
  }
  if (this.superType != null) {
    this.superType.getMethodMatches(list,instance,name,arguments);
  }
  for (  IType i : this.interfaces) {
    i.getMethodMatches(list,instance,name,arguments);
  }
}",0.6622340425531915
84006,"@Override public void getConstructorMatches(List<MethodMatch> list,List<IValue> arguments){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  super.getConstructorMatches(list,arguments);
}","@Override public void getConstructorMatches(List<MethodMatch> list,List<IValue> arguments){
  if (!this.typesResolved) {
    this.resolveTypes(null,Package.rootPackage);
  }
  this.body.getMethodMatches(list,null,""String_Node_Str"",arguments);
}",0.8154506437768241
84007,"@Override public boolean equals(IClass iclass){
  if (!iclass.isSuperType(this.superType)) {
    return false;
  }
  for (  IType i : this.interfaces) {
    if (!iclass.isSuperType(i)) {
      return false;
    }
  }
  return true;
}","@Override public boolean equals(IClass iclass){
  if (!iclass.isSubTypeOf(this.superType)) {
    return false;
  }
  for (  IType i : this.interfaces) {
    if (!iclass.isSubTypeOf(i)) {
      return false;
    }
  }
  return true;
}",0.9399141630901288
84008,"@Override public void writeJump(MethodWriter writer,Label dest){
  this.left.writeExpression(writer);
  writer.visitJumpInsn(Opcodes.IFEQ,dest);
  this.right.writeExpression(writer);
  writer.visitJumpInsn(Opcodes.IFEQ,dest);
}","@Override public void writeJump(MethodWriter writer,Label dest){
  this.left.writeExpression(writer);
  writer.visitJumpInsn2(Opcodes.IFEQ,dest);
  this.right.writeExpression(writer);
  writer.visitJumpInsn2(Opcodes.IFEQ,dest);
}",0.9956140350877192
84009,"@Override public void writeStatement(MethodWriter writer){
  if (this.then == null) {
    this.condition.writeStatement(writer);
  }
  writer.visitLabel(this.start);
  this.condition.writeJump(writer,this.end);
  this.then.writeStatement(writer);
  writer.visitJumpInsn(Opcodes.GOTO,this.start);
  writer.visitLabel(this.end);
}","@Override public void writeStatement(MethodWriter writer){
  if (this.then == null) {
    this.condition.writeStatement(writer);
  }
  writer.visitLabel(this.start);
  this.condition.writeJump(writer,this.end);
  this.then.writeStatement(writer);
  writer.visitJumpInsn(Opcodes.GOTO,this.start);
  writer.visitLabel(this.end);
  writer.visitInsn(Opcodes.NOP);
}",0.9521044992743106
84010,"private void processInsn(int opcode){
switch (opcode) {
case DUP:
    this.typeStack.push(this.typeStack.peek());
  return;
case SWAP:
{
  Object o1=this.typeStack.pop();
  Object o2=this.typeStack.pop();
  this.typeStack.push(o1);
  this.typeStack.push(o2);
  return;
}
case POP:
this.typeStack.pop();
return;
case ACONST_NULL:
this.push(NULL);
return;
case ARRAYLENGTH:
this.set(INTEGER);
return;
case RETURN:
this.hasReturn=true;
return;
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
this.typeStack.pop();
this.typeStack.pop();
this.push(INTEGER);
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
this.typeStack.pop();
this.typeStack.pop();
this.push(LONG);
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.typeStack.pop();
this.typeStack.pop();
this.push(FLOAT);
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.typeStack.pop();
this.typeStack.pop();
this.push(DOUBLE);
return;
case L2I:
case F2I:
case D2I:
this.set(INTEGER);
case I2L:
case F2L:
case D2L:
this.set(LONG);
return;
case I2F:
case L2F:
case D2F:
this.set(FLOAT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.typeStack.pop();
this.typeStack.pop();
this.push(INTEGER);
return;
}
}","private void processInsn(int opcode){
switch (opcode) {
case DUP:
    this.typeStack.push(this.typeStack.peek());
  return;
case SWAP:
{
  Object o1=this.typeStack.pop();
  Object o2=this.typeStack.pop();
  this.typeStack.push(o1);
  this.typeStack.push(o2);
  return;
}
case POP:
this.typeStack.pop();
return;
case ACONST_NULL:
this.push(NULL);
return;
case ARRAYLENGTH:
this.set(INTEGER);
return;
case RETURN:
this.hasReturn=true;
return;
case BALOAD:
case SALOAD:
case CALOAD:
case IALOAD:
this.typeStack.pop();
this.typeStack.pop();
this.push(INTEGER);
break;
case LALOAD:
this.typeStack.pop();
this.typeStack.pop();
this.push(LONG);
break;
case FALOAD:
this.typeStack.pop();
this.typeStack.pop();
this.push(FLOAT);
break;
case DALOAD:
this.typeStack.pop();
this.typeStack.pop();
this.push(DOUBLE);
break;
case AALOAD:
this.typeStack.pop();
this.typeStack.pop();
this.push(TOP);
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
this.typeStack.pop();
this.typeStack.pop();
this.push(INTEGER);
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
this.typeStack.pop();
this.typeStack.pop();
this.push(LONG);
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.typeStack.pop();
this.typeStack.pop();
this.push(FLOAT);
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.typeStack.pop();
this.typeStack.pop();
this.push(DOUBLE);
return;
case L2I:
case F2I:
case D2I:
this.set(INTEGER);
case I2L:
case F2L:
case D2L:
this.set(LONG);
return;
case I2F:
case L2F:
case D2F:
this.set(FLOAT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.typeStack.pop();
this.typeStack.pop();
this.push(INTEGER);
return;
}
}",0.4435695538057743
84011,"@Override public void visitInsn(int opcode){
  if (opcode > 255) {
    this.visitSpecialInsn(opcode);
    return;
  }
  if (opcode >= IALOAD && opcode <= SALOAD) {
    Object o=this.typeStack.pop();
    this.typeStack.pop();
    if (o instanceof String) {
      this.push(((String)o).substring(1));
    }
 else {
      this.push(TOP);
    }
  }
 else   if (opcode >= IASTORE && opcode <= SASTORE) {
    this.typeStack.pop();
    this.typeStack.pop();
    this.typeStack.pop();
  }
 else   if (opcode >= IRETURN && opcode <= ARETURN) {
    this.typeStack.pop();
  }
 else {
    this.processInsn(opcode);
  }
  this.mv.visitInsn(opcode);
}","@Override public void visitInsn(int opcode){
  if (opcode > 255) {
    this.visitSpecialInsn(opcode);
    return;
  }
 else   if (opcode >= IASTORE && opcode <= SASTORE) {
    this.typeStack.pop();
    this.typeStack.pop();
    this.typeStack.pop();
  }
 else   if (opcode >= IRETURN && opcode <= ARETURN) {
    this.typeStack.pop();
  }
 else {
    this.processInsn(opcode);
  }
  this.mv.visitInsn(opcode);
}",0.7831900668576887
84012,"@Override public void writeJump(MethodWriter writer,Label dest){
}","@Override public void writeJump(MethodWriter writer,Label dest){
  this.writeExpression(writer);
  writer.visitJumpInsn(Opcodes.IFEQ,dest);
}",0.6376811594202898
84013,"public static IValue resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(markers,context,access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IAccess prev=null;
  IAccess curr=null;
  IValue alternate=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (alternate != null) {
      curr.setValue(alternate);
      alternate=null;
    }
    if (!curr.resolve(context,markers)) {
      alternate=curr.resolve2(context);
      if (alternate instanceof IAccess) {
        curr=(IAccess)alternate;
        iterator.set(curr);
      }
 else       if (alternate != null) {
        if (!iterator.hasNext()) {
          return alternate;
        }
 else {
          iterator.remove();
          iterator.next().setValue(alternate);
          iterator.previous();
        }
      }
 else {
        backwards=true;
        break;
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (curr != null) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      prev=null;
    }
    if (next != null && !curr.resolve(context,markers)) {
      next.setValue(null);
      if (next.resolve(context,markers)) {
        alternate=curr.resolve3(context,next);
        if (alternate instanceof IAccess) {
          if (next.getValue() == curr) {
            next.setValue(alternate);
          }
          next=(IAccess)alternate;
          curr=prev;
          iterator.next();
          iterator.remove();
          iterator.previous();
          iterator.set(next);
        }
 else {
          next.setValue(curr);
          markers.add(curr.getResolveError());
        }
      }
 else {
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}","public static IValue resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(markers,context,access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IAccess prev=null;
  IAccess curr=null;
  IValue alternate=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (alternate != null) {
      curr.setValue(alternate);
      alternate=null;
    }
    if (!curr.resolve(context,markers)) {
      alternate=curr.resolve2(context);
      if (alternate instanceof IAccess) {
        curr=(IAccess)alternate;
        iterator.set(curr);
      }
 else       if (alternate != null) {
        if (!iterator.hasNext()) {
          return alternate;
        }
 else {
          iterator.remove();
          iterator.next().setValue(alternate);
          iterator.previous();
        }
      }
 else {
        backwards=true;
        break;
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (curr != null) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      prev=null;
    }
    if (next != null && !curr.isResolved()) {
      next.setValue(null);
      if (next.resolve(context,markers)) {
        alternate=curr.resolve3(context,next);
        if (alternate instanceof IAccess) {
          if (next.getValue() == curr) {
            next.setValue(alternate);
          }
          next=(IAccess)alternate;
          curr=prev;
          iterator.next();
          iterator.remove();
          iterator.previous();
          iterator.set(next);
        }
 else {
          next.setValue(curr);
          markers.add(curr.getResolveError());
        }
      }
 else {
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}",0.9686120647376164
84014,"@Override public void writeStatement(MethodWriter writer){
  Variable var=this.variable;
  if (this.type == DEFAULT) {
    if (var != null) {
      writer.addLocal(var.index,MethodWriter.TOP);
      var.value.writeExpression(writer);
      var.writeSet(writer);
    }
    writer.visitLabel(this.startLabel);
    if (this.condition != null) {
      this.condition.writeJump(writer,this.endLabel);
    }
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.visitLabel(this.updateLabel);
    if (this.update != null) {
      this.update.writeStatement(writer);
    }
    writer.visitJumpInsn(Opcodes.GOTO,this.startLabel);
    writer.visitLabel(this.endLabel);
    if (var != null) {
      writer.visitLocalVariable(var.qualifiedName,var.type.getExtendedName(),var.type.getSignature(),this.startLabel,this.endLabel,var.index);
    }
    return;
  }
  if (this.type == ARRAY) {
    Variable arrayVar=this.arrayVar;
    Variable indexVar=this.indexVar;
    writer.addLocal(var.index,MethodWriter.TOP);
    writer.addLocal(indexVar.index,indexVar.type);
    writer.addLocal(this.lengthVar.index,this.lengthVar.type);
    writer.addLocal(arrayVar.index,arrayVar.type);
    var.value.writeExpression(writer);
    writer.visitInsn(Opcodes.DUP);
    arrayVar.writeSet(writer);
    writer.visitInsn(Opcodes.ARRAYLENGTH);
    this.lengthVar.writeSet(writer);
    writer.visitLdcInsn(0);
    indexVar.writeSet(writer);
    writer.visitJumpInsn(Opcodes.GOTO,this.updateLabel);
    writer.visitLabel(this.startLabel);
    arrayVar.writeGet(writer);
    indexVar.writeGet(writer);
    writer.visitInsn(arrayVar.type.getArrayLoadOpcode());
    var.writeSet(writer);
    this.then.writeStatement(writer);
    writer.visitIincInsn(indexVar.index,1);
    writer.visitLabel(this.updateLabel);
    indexVar.writeGet(writer);
    this.lengthVar.writeGet(writer);
    writer.visitJumpInsn(Opcodes.IF_ICMPLT,this.startLabel);
    writer.visitLabel(this.endLabel);
    writer.visitLocalVariable(var.qualifiedName,var.type.getExtendedName(),var.type.getSignature(),this.startLabel,this.endLabel,var.index);
    writer.visitLocalVariable(""String_Node_Str"",""String_Node_Str"",null,this.startLabel,this.endLabel,indexVar.index);
    writer.visitLocalVariable(""String_Node_Str"",""String_Node_Str"",null,this.startLabel,this.endLabel,this.lengthVar.index);
    writer.visitLocalVariable(""String_Node_Str"",arrayVar.type.getExtendedName(),arrayVar.type.getSignature(),this.startLabel,this.endLabel,arrayVar.index);
    return;
  }
}","@Override public void writeStatement(MethodWriter writer){
  Variable var=this.variable;
  if (this.type == DEFAULT) {
    if (var != null) {
      writer.addLocal(var.index,var.type);
      var.value.writeExpression(writer);
      var.writeSet(writer);
    }
    writer.visitLabel(this.startLabel);
    if (this.condition != null) {
      this.condition.writeJump(writer,this.endLabel);
    }
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.visitLabel(this.updateLabel);
    if (this.update != null) {
      this.update.writeStatement(writer);
    }
    writer.visitJumpInsn(Opcodes.GOTO,this.startLabel);
    writer.visitLabel(this.endLabel);
    if (var != null) {
      writer.visitLocalVariable(var.qualifiedName,var.type.getExtendedName(),var.type.getSignature(),this.startLabel,this.endLabel,var.index);
    }
    return;
  }
  if (this.type == ARRAY) {
    Variable arrayVar=this.arrayVar;
    Variable indexVar=this.indexVar;
    writer.addLocal(var.index,MethodWriter.TOP);
    writer.addLocal(indexVar.index,indexVar.type);
    writer.addLocal(this.lengthVar.index,this.lengthVar.type);
    writer.addLocal(arrayVar.index,arrayVar.type);
    var.value.writeExpression(writer);
    writer.visitInsn(Opcodes.DUP);
    arrayVar.writeSet(writer);
    writer.visitInsn(Opcodes.ARRAYLENGTH);
    this.lengthVar.writeSet(writer);
    writer.visitLdcInsn(0);
    indexVar.writeSet(writer);
    writer.visitJumpInsn(Opcodes.GOTO,this.updateLabel);
    writer.visitLabel(this.startLabel);
    arrayVar.writeGet(writer);
    indexVar.writeGet(writer);
    writer.visitInsn(arrayVar.type.getArrayLoadOpcode());
    var.writeSet(writer);
    this.then.writeStatement(writer);
    writer.visitIincInsn(indexVar.index,1);
    writer.visitLabel(this.updateLabel);
    indexVar.writeGet(writer);
    this.lengthVar.writeGet(writer);
    writer.visitJumpInsn(Opcodes.IF_ICMPLT,this.startLabel);
    writer.visitLabel(this.endLabel);
    writer.visitLocalVariable(var.qualifiedName,var.type.getExtendedName(),var.type.getSignature(),this.startLabel,this.endLabel,var.index);
    writer.visitLocalVariable(""String_Node_Str"",""String_Node_Str"",null,this.startLabel,this.endLabel,indexVar.index);
    writer.visitLocalVariable(""String_Node_Str"",""String_Node_Str"",null,this.startLabel,this.endLabel,this.lengthVar.index);
    writer.visitLocalVariable(""String_Node_Str"",arrayVar.type.getExtendedName(),arrayVar.type.getSignature(),this.startLabel,this.endLabel,arrayVar.index);
    return;
  }
}",0.9952456418383518
84015,"@Override public void check(List<Marker> markers,IContext context){
  if (this.type != 0) {
    IType type=this.variable.type;
    IValue value=this.variable.value;
    value.check(markers,context);
    IType valueType=value.getType();
    int valueTypeDims=valueType.getArrayDimensions();
    if (valueTypeDims != 0) {
      this.type=ARRAY;
      if (!valueType.classEquals(type) || type.getArrayDimensions() != valueTypeDims - 1) {
        Marker marker=Markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + type);
        markers.add(marker);
      }
 else {
        Variable var=new Variable(null);
        var.type=Type.INT;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 1;
        this.indexVar=var;
        var=new Variable(null);
        var.type=Type.INT;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 2;
        this.lengthVar=var;
        var=new Variable(null);
        var.type=valueType;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 3;
        this.arrayVar=var;
      }
    }
  }
 else {
    this.context=context;
    if (this.variable != null) {
      this.variable.check(markers,context);
    }
    if (this.condition != null) {
      this.condition.check(markers,this);
      if (!this.condition.requireType(Type.BOOLEAN)) {
        Marker marker=Markers.create(this.condition.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + this.condition.getType());
        markers.add(marker);
      }
    }
    if (this.update != null) {
      this.update.check(markers,this);
    }
  }
  if (this.then != null) {
    this.then.check(markers,this);
  }
}","@Override public void check(List<Marker> markers,IContext context){
  if (this.type != 0) {
    IType type=this.variable.type;
    IValue value=this.variable.value;
    value.check(markers,context);
    IType valueType=value.getType();
    int valueTypeDims=valueType.getArrayDimensions();
    if (valueTypeDims != 0) {
      this.type=ARRAY;
      if (!valueType.classEquals(type) || type.getArrayDimensions() != valueTypeDims - 1) {
        Marker marker=Markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + type);
        markers.add(marker);
      }
 else       if (this.then == null) {
        markers.add(Markers.create(this.position,""String_Node_Str""));
      }
 else {
        Variable var=new Variable(null);
        var.type=Type.INT;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 1;
        this.indexVar=var;
        var=new Variable(null);
        var.type=Type.INT;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 2;
        this.lengthVar=var;
        var=new Variable(null);
        var.type=valueType;
        var.name=""String_Node_Str"";
        var.qualifiedName=""String_Node_Str"";
        var.index=this.variable.index + 3;
        this.arrayVar=var;
      }
    }
  }
 else {
    this.context=context;
    if (this.variable != null) {
      this.variable.check(markers,context);
    }
    if (this.condition != null) {
      this.condition.check(markers,this);
      if (!this.condition.requireType(Type.BOOLEAN)) {
        Marker marker=Markers.create(this.condition.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + this.condition.getType());
        markers.add(marker);
      }
    }
    if (this.update != null) {
      this.update.check(markers,this);
    }
  }
  if (this.then != null) {
    this.then.check(markers,this);
  }
}",0.97084917617237
84016,"public void addLocal(int index,Object type){
  this.locals.add(type);
}","public void addLocal(int index,Object type){
  this.ensureLocals(index);
  this.locals[index]=type;
}",0.7674418604651163
84017,"public void visitParameter(String name,IType type,int index){
  this.locals.add(type.getFrameType());
  this.mv.visitParameter(name,index);
}","public void visitParameter(String name,IType type,int index){
  this.addLocal(index,type.getFrameType());
  this.mv.visitParameter(name,index);
}",0.944055944055944
84018,"private void visitFrame(){
  int len=this.typeStack.size();
  Object[] o=new Object[len];
  for (int i=0; i < len; i++) {
    o[i]=this.typeStack.get(i);
  }
  this.mv.visitFrame(F_NEW,this.locals.size(),this.locals.toArray(),len,o);
}","private void visitFrame(){
  int len=this.typeStack.size();
  Object[] o=new Object[len];
  for (int i=0; i < len; i++) {
    o[i]=this.typeStack.get(i);
  }
  this.mv.visitFrame(F_NEW,this.maxLocals,this.locals,len,o);
}",0.8771929824561403
84019,"public void visitEnd(IType type){
  if (!this.hasReturn) {
    this.mv.visitInsn(type.getReturnOpcode());
  }
  this.mv.visitMaxs(this.maxStack,this.locals.size());
  this.mv.visitEnd();
}","public void visitEnd(IType type){
  if (!this.hasReturn) {
    this.mv.visitInsn(type.getReturnOpcode());
  }
  this.mv.visitMaxs(this.maxStack,this.maxLocals);
  this.mv.visitEnd();
}",0.967741935483871
84020,"public void setConstructor(IType type){
  this.locals.add(UNINITIALIZED_THIS);
  this.push(UNINITIALIZED_THIS);
}","public void setConstructor(IType type){
  this.locals[0]=UNINITIALIZED_THIS;
  this.push(UNINITIALIZED_THIS);
}",0.9553571428571428
84021,"@Override public void writeStatement(MethodWriter writer){
  this.writeExpression(writer);
}","@Override public void writeStatement(MethodWriter writer){
  int opcode;
  int args=this.arguments.size();
  if (this.isCustom) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else {
    opcode=Opcodes.INVOKESPECIAL;
    args++;
    writer.visitTypeInsn(Opcodes.NEW,this.type);
  }
  for (  IValue arg : this.arguments) {
    arg.writeExpression(writer);
  }
  String owner=this.method.getTheClass().getInternalName();
  String name=""String_Node_Str"";
  String desc=this.method.getDescriptor();
  writer.visitMethodInsn(opcode,owner,name,desc,false,args,null);
}",0.2724458204334365
84022,"@Override public boolean resolve(IContext context,List<Marker> markers){
  if (!this.type.isResolved()) {
    return false;
  }
  MethodMatch match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    this.isCustom=true;
    return true;
  }
  match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  if (!this.type.isResolved()) {
    return false;
  }
  MethodMatch match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}",0.7464968152866241
84023,"@Override public void writeExpression(MethodWriter writer){
  int opcode;
  int args=this.arguments.size();
  if (this.isCustom) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else {
    opcode=Opcodes.INVOKESPECIAL;
    args++;
    writer.visitTypeInsn(Opcodes.NEW,this.type);
    writer.visitInsn(Opcodes.DUP,this.type);
  }
  for (  IValue arg : this.arguments) {
    arg.writeExpression(writer);
  }
  String owner=this.method.getTheClass().getInternalName();
  String name=this.method.getName();
  String desc=this.method.getDescriptor();
  writer.visitMethodInsn(opcode,owner,name,desc,false,args,null);
}","@Override public void writeExpression(MethodWriter writer){
  int opcode;
  int args=this.arguments.size();
  if (this.isCustom) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else {
    opcode=Opcodes.INVOKESPECIAL;
    args++;
    writer.visitTypeInsn(Opcodes.NEW,this.type);
    writer.visitInsn(Opcodes.DUP,this.type);
  }
  for (  IValue arg : this.arguments) {
    arg.writeExpression(writer);
  }
  String owner=this.method.getTheClass().getInternalName();
  String name=""String_Node_Str"";
  String desc=this.method.getDescriptor();
  writer.visitMethodInsn(opcode,owner,name,desc,false,args,null);
}",0.9634551495016612
84024,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.instance != null) {
    this.instance.toString(""String_Node_Str"",buffer);
    if (this.dotless && !Formatting.Method.useJavaFormat) {
      buffer.append(Formatting.Method.dotlessSeperator);
    }
 else {
      buffer.append('.');
    }
  }
  if (Formatting.Method.convertQualifiedNames) {
    buffer.append(this.qualifiedName);
  }
 else {
    buffer.append(this.name);
  }
  if (this.isSugarCall && !Formatting.Method.useJavaFormat) {
    if (!this.arguments.isEmpty()) {
      buffer.append(Formatting.Method.sugarCallSeperator);
      this.arguments.get(0).toString(""String_Node_Str"",buffer);
    }
  }
 else {
    Util.parametersToString(this.arguments,buffer,true);
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.instance != null) {
    this.instance.toString(prefix,buffer);
    if (this.dotless && !Formatting.Method.useJavaFormat) {
      buffer.append(Formatting.Method.dotlessSeperator);
    }
 else {
      buffer.append('.');
    }
  }
  if (Formatting.Method.convertQualifiedNames) {
    buffer.append(this.qualifiedName);
  }
 else {
    buffer.append(this.name);
  }
  if (this.isSugarCall && !Formatting.Method.useJavaFormat) {
    if (!this.arguments.isEmpty()) {
      buffer.append(Formatting.Method.sugarCallSeperator);
      this.arguments.get(0).toString(prefix,buffer);
    }
  }
 else {
    Util.parametersToString(this.arguments,buffer,true);
  }
}",0.9691275167785236
84025,"@Override public void writeSet(MethodWriter writer){
  String owner=this.theClass.getInternalName();
  String name=this.name;
  String desc=this.type.getExtendedName();
  if ((this.modifiers & Modifiers.STATIC) == Modifiers.STATIC) {
    writer.visitPutStatic(owner,name,desc);
  }
 else {
    writer.visitPutStatic(owner,name,desc);
  }
}","@Override public void writeSet(MethodWriter writer){
  String owner=this.theClass.getInternalName();
  String name=this.name;
  String desc=this.type.getExtendedName();
  if ((this.modifiers & Modifiers.STATIC) == Modifiers.STATIC) {
    writer.visitPutStatic(owner,name,desc);
  }
 else {
    writer.visitPutField(owner,name,desc);
  }
}",0.983751846381093
84026,"@Override public String getDescriptor(){
  StringBuilder buf=new StringBuilder();
  buf.append('(');
  for (  Parameter par : this.parameters) {
    buf.append(par.type.getExtendedName());
  }
  buf.append(')');
  buf.append(this.type.getExtendedName());
  return buf.toString();
}","@Override public String getDescriptor(){
  StringBuilder buf=new StringBuilder();
  buf.append('(');
  for (  Parameter par : this.parameters) {
    buf.append(par.type.getExtendedName());
  }
  buf.append(')');
  buf.append(this.isConstructor ? ""String_Node_Str"" : this.type.getExtendedName());
  return buf.toString();
}",0.9320066334991708
84027,"@Override public void write(ClassWriter writer){
  int modifiers=this.modifiers & 0xFFFF;
  if (this.statement == null) {
    modifiers|=Modifiers.ABSTRACT;
  }
  MethodVisitor visitor=writer.visitMethod(modifiers,this.qualifiedName,this.getDescriptor(),this.getSignature(),this.getExceptions());
  MethodWriter mw=new MethodWriter(visitor);
  if (this.isConstructor) {
    mw.setConstructor(this.type);
  }
  for (  Annotation annotation : this.annotations) {
    annotation.write(mw);
  }
  if ((this.modifiers & Modifiers.INLINE) == Modifiers.INLINE) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.SEALED) == Modifiers.SEALED) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  for (  Parameter param : this.parameters) {
    param.write(mw);
  }
  if (this.statement != null) {
    mw.visitCode();
    this.statement.writeExpression(mw);
    mw.visitEnd(this.isConstructor ? Type.VOID : this.type);
  }
}","@Override public void write(ClassWriter writer){
  int modifiers=this.modifiers & 0xFFFF;
  if (this.statement == null) {
    modifiers|=Modifiers.ABSTRACT;
  }
  MethodVisitor visitor=writer.visitMethod(modifiers,this.qualifiedName,this.getDescriptor(),this.getSignature(),this.getExceptions());
  MethodWriter mw=new MethodWriter(visitor);
  if (this.isConstructor) {
    mw.setConstructor(this.type);
  }
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    mw.setInstance(this.type);
  }
  for (  Annotation annotation : this.annotations) {
    annotation.write(mw);
  }
  if ((this.modifiers & Modifiers.INLINE) == Modifiers.INLINE) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.SEALED) == Modifiers.SEALED) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  for (  Parameter param : this.parameters) {
    param.write(mw);
  }
  if (this.statement != null) {
    mw.visitCode();
    this.statement.writeExpression(mw);
    mw.visitEnd(this.isConstructor ? Type.VOID : this.type);
  }
}",0.9656842955187728
84028,"public Method(IClass iclass,String name,IType type,int modifiers,List<Annotation> annotations){
  super(iclass,name,type,modifiers,annotations);
  if (name.equals(""String_Node_Str"")) {
    this.isConstructor=true;
  }
}","public Method(IClass iclass,String name,IType type,int modifiers,List<Annotation> annotations){
  super(iclass,name,type,modifiers,annotations);
  if (name.equals(""String_Node_Str"")) {
    this.isConstructor=true;
    this.qualifiedName=""String_Node_Str"";
  }
}",0.9125
84029,"@Override public default boolean isStatic(){
  return true;
}","@Override public default boolean isStatic(){
  return false;
}",0.943089430894309
84030,"@Override public void writeExpression(MethodWriter writer){
  writer.visitIntInsn(Opcodes.ALOAD,0);
}","@Override public void writeExpression(MethodWriter writer){
  writer.visitVarInsn(Opcodes.ALOAD,0,this.type);
}",0.9245283018867924
84031,"@Override public void resolve(List<Marker> markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    IType t=this.theClass.getSuperType();
    if (t != null) {
      IClass iclass=t.getTheClass();
      if (iclass != null) {
        this.overrideMethod=iclass.getBody().getMethod(this.name,this.parameters);
      }
    }
  }
  Iterator<Annotation> iterator=this.annotations.iterator();
  while (iterator.hasNext()) {
    Annotation a=iterator.next();
    if (this.processAnnotation(a)) {
      iterator.remove();
      continue;
    }
    a.resolve(markers,context);
  }
  int index=this.hasModifier(Modifiers.STATIC) ? 0 : 1;
  for (  Parameter p : this.parameters) {
    p.index=index++;
    p.resolve(markers,context);
  }
  for (  Variable v : this.variables) {
    v.index=index++;
    v.resolve(markers,this);
  }
  if (this.statement != null) {
    this.statement=this.statement.resolve(markers,this);
  }
}","@Override public void resolve(List<Marker> markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    IType t=this.theClass.getSuperType();
    if (t != null) {
      IClass iclass=t.getTheClass();
      if (iclass != null) {
        this.overrideMethod=iclass.getBody().getMethod(this.name,this.parameters);
      }
    }
  }
  Iterator<Annotation> iterator=this.annotations.iterator();
  while (iterator.hasNext()) {
    Annotation a=iterator.next();
    if (this.processAnnotation(a)) {
      iterator.remove();
      continue;
    }
    a.resolve(markers,context);
  }
  int index=this.hasModifier(Modifiers.STATIC) ? 0 : 1;
  for (  Parameter p : this.parameters) {
    p.index=index++;
    p.resolve(markers,context);
  }
  if (this.statement != null) {
    this.statement=this.statement.resolve(markers,this);
  }
}",0.8698092031425365
84032,"@Override public void write(ClassWriter writer){
  int modifiers=this.modifiers & 0xFFFF;
  if (this.statement == null) {
    modifiers|=Modifiers.ABSTRACT;
  }
  MethodVisitor visitor=writer.visitMethod(modifiers,this.qualifiedName,this.getDescriptor(),this.getSignature(),this.getExceptions());
  MethodWriter mw=new MethodWriter(visitor);
  if (this.isConstructor) {
    mw.setConstructor(this.type);
  }
  for (  Annotation annotation : this.annotations) {
    annotation.write(mw);
  }
  if ((this.modifiers & Modifiers.INLINE) == Modifiers.INLINE) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.SEALED) == Modifiers.SEALED) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  for (  Parameter param : this.parameters) {
    param.write(mw);
  }
  if (this.statement != null) {
    mw.visitCode();
    for (    Variable var : this.variables) {
      mw.visitLocalVariable(var.qualifiedName,var.type,var.start,var.end,var.index);
    }
    this.statement.writeExpression(mw);
    mw.visitEnd(this.isConstructor ? Type.VOID : this.type);
  }
}","@Override public void write(ClassWriter writer){
  int modifiers=this.modifiers & 0xFFFF;
  if (this.statement == null) {
    modifiers|=Modifiers.ABSTRACT;
  }
  MethodVisitor visitor=writer.visitMethod(modifiers,this.qualifiedName,this.getDescriptor(),this.getSignature(),this.getExceptions());
  MethodWriter mw=new MethodWriter(visitor);
  if (this.isConstructor) {
    mw.setConstructor(this.type);
  }
  for (  Annotation annotation : this.annotations) {
    annotation.write(mw);
  }
  if ((this.modifiers & Modifiers.INLINE) == Modifiers.INLINE) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.SEALED) == Modifiers.SEALED) {
    mw.visitAnnotation(""String_Node_Str"",false);
  }
  for (  Parameter param : this.parameters) {
    param.write(mw);
  }
  if (this.statement != null) {
    mw.visitCode();
    this.statement.writeExpression(mw);
    mw.visitEnd(this.isConstructor ? Type.VOID : this.type);
  }
}",0.9458283906682484
84033,"@Override public void foldConstants(){
  for (  Annotation a : this.annotations) {
    a.foldConstants();
  }
  for (  Parameter p : this.parameters) {
    p.foldConstants();
  }
  for (  Variable v : this.variables) {
    v.foldConstants();
  }
  if (this.statement != null) {
    this.statement=this.statement.foldConstants();
  }
}","@Override public void foldConstants(){
  for (  Annotation a : this.annotations) {
    a.foldConstants();
  }
  for (  Parameter p : this.parameters) {
    p.foldConstants();
  }
  if (this.statement != null) {
    this.statement=this.statement.foldConstants();
  }
}",0.8885191347753744
84034,"@Override public void check(List<Marker> markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (this.overrideMethod == null) {
      if ((this.modifiers & Modifiers.OVERRIDE) != 0) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
    }
 else     if (!this.isConstructor) {
      if ((this.modifiers & Modifiers.OVERRIDE) == 0) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
 else       if (this.overrideMethod.hasModifier(Modifiers.FINAL)) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
 else {
        IType type=this.overrideMethod.getType();
        if (!Type.isSuperType(type,this.type)) {
          SemanticError error=new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str"");
          error.addInfo(""String_Node_Str"" + this.type);
          error.addInfo(""String_Node_Str"" + type);
          markers.add(error);
        }
      }
    }
  }
  for (  Annotation a : this.annotations) {
    a.check(markers,context);
  }
  for (  Parameter p : this.parameters) {
    p.check(markers,context);
  }
  for (  Variable v : this.variables) {
    v.check(markers,context);
  }
  if (this.statement != null) {
    if (this.isConstructor) {
      if (!this.statement.requireType(Type.VOID)) {
        SemanticError error=new SemanticError(this.position,""String_Node_Str"");
        error.addInfo(""String_Node_Str"" + this.statement.getType());
        markers.add(error);
      }
    }
 else     if (!this.statement.requireType(this.type)) {
      SemanticError error=new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str"");
      error.addInfo(""String_Node_Str"" + this.type);
      error.addInfo(""String_Node_Str"" + this.statement.getType());
      markers.add(error);
    }
    this.statement.check(markers,context);
  }
 else   if (this.isStatic()) {
    markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    if (this.theClass.isAbstract()) {
      this.modifiers|=Modifiers.ABSTRACT;
    }
 else {
      markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
  }
}","@Override public void check(List<Marker> markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (this.overrideMethod == null) {
      if ((this.modifiers & Modifiers.OVERRIDE) != 0) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
    }
 else     if (!this.isConstructor) {
      if ((this.modifiers & Modifiers.OVERRIDE) == 0) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
 else       if (this.overrideMethod.hasModifier(Modifiers.FINAL)) {
        markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      }
 else {
        IType type=this.overrideMethod.getType();
        if (!Type.isSuperType(type,this.type)) {
          SemanticError error=new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str"");
          error.addInfo(""String_Node_Str"" + this.type);
          error.addInfo(""String_Node_Str"" + type);
          markers.add(error);
        }
      }
    }
  }
  for (  Annotation a : this.annotations) {
    a.check(markers,context);
  }
  for (  Parameter p : this.parameters) {
    p.check(markers,context);
  }
  if (this.statement != null) {
    if (this.isConstructor) {
      if (!this.statement.requireType(Type.VOID)) {
        SemanticError error=new SemanticError(this.position,""String_Node_Str"");
        error.addInfo(""String_Node_Str"" + this.statement.getType());
        markers.add(error);
      }
    }
 else     if (!this.statement.requireType(this.type)) {
      SemanticError error=new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str"");
      error.addInfo(""String_Node_Str"" + this.type);
      error.addInfo(""String_Node_Str"" + this.statement.getType());
      markers.add(error);
    }
    this.statement.check(markers,context);
  }
 else   if (this.isStatic()) {
    markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    if (this.theClass.isAbstract()) {
      this.modifiers|=Modifiers.ABSTRACT;
    }
 else {
      markers.add(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
  }
}",0.984368398817068
84035,"@Override public void writeStatement(MethodWriter writer){
  if (this.isArray) {
    super.writeExpression(writer);
    return;
  }
  writer.visitLabel(this.start);
  for (  IValue v : this.values) {
    v.writeStatement(writer);
  }
  writer.visitLabel(this.end);
}","@Override public void writeStatement(MethodWriter writer){
  if (this.isArray) {
    super.writeExpression(writer);
    return;
  }
  writer.visitLabel(this.start);
  for (  IValue v : this.values) {
    v.writeStatement(writer);
  }
  writer.visitLabel(this.end);
  for (  Entry<String,Variable> entry : this.variables.entrySet()) {
    Variable var=entry.getValue();
    writer.visitLocalVariable(entry.getKey(),var.type,this.start,this.end,var.index);
  }
}",0.7327823691460055
84036,"@Override public void resolveTypes(List<Marker> markers,IContext context){
  this.context=context;
  IVariableList variableList=context instanceof IVariableList ? (IVariableList)context : null;
  for (  IValue v : this.values) {
    v.resolveTypes(markers,context);
    if (v.getValueType() != IValue.FIELD_ASSIGN) {
      continue;
    }
    FieldAssign assign=(FieldAssign)v;
    if (!assign.initializer) {
      continue;
    }
    Variable var=(Variable)assign.field;
    var.start=this.start;
    var.end=this.end;
    this.variables.put(assign.qualifiedName,var);
    if (variableList != null) {
      variableList.addVariable(var);
    }
  }
}","@Override public void resolveTypes(List<Marker> markers,IContext context){
  this.context=context;
  this.variableCount=context.getVariableCount();
  for (  IValue v : this.values) {
    if (v.getValueType() == IValue.FIELD_ASSIGN) {
      FieldAssign assign=(FieldAssign)v;
      if (assign.initializer) {
        Variable var=(Variable)assign.field;
        var.index=this.variableCount++;
        this.variables.put(assign.qualifiedName,var);
      }
    }
    v.resolveTypes(markers,this);
  }
}",0.288946910356832
84037,"@Override public void check(List<Marker> markers,IContext context){
  if (this.condition != null) {
    if (this.condition.requireType(Type.BOOLEAN)) {
      SemanticError error=new SemanticError(this.condition.getPosition(),""String_Node_Str"");
      error.addInfo(""String_Node_Str"" + this.condition.getType());
      markers.add(error);
    }
    this.condition.check(markers,context);
  }
 else {
    markers.add(new SyntaxError(this.position,""String_Node_Str""));
  }
  if (this.then != null) {
    this.then.check(markers,context);
  }
}","@Override public void check(List<Marker> markers,IContext context){
  if (this.condition != null) {
    if (!this.condition.requireType(Type.BOOLEAN)) {
      SemanticError error=new SemanticError(this.condition.getPosition(),""String_Node_Str"");
      error.addInfo(""String_Node_Str"" + this.condition.getType());
      markers.add(error);
    }
    this.condition.check(markers,context);
  }
 else {
    markers.add(new SyntaxError(this.position,""String_Node_Str""));
  }
  if (this.then != null) {
    this.then.check(markers,context);
  }
}",0.9990749306197964
84038,"public void log(Logger logger){
  StringBuilder buf=new StringBuilder();
  CodeFile file=this.position.getFile();
  String type=this.getMarkerType();
  String message=this.getMessage();
  String suggestion=this.getSuggestion();
  buf.append(file).append(':').append(this.position.getLineNumber()).append(""String_Node_Str"");
  buf.append(type);
  if (message != null) {
    buf.append(""String_Node_Str"").append(message);
  }
  if (suggestion != null) {
    buf.append(""String_Node_Str"").append(suggestion);
  }
  int prevNL=this.position.getPrevNewline();
  int nextNL=this.position.getNextNewline();
  String code=file.getCode();
  String line=code.substring(prevNL,nextNL);
  buf.append('\n').append(line).append('\n');
  for (int i=prevNL; i < this.position.getStart(); i++) {
    char c=code.charAt(i);
    if (c == '\t') {
      buf.append('\t');
    }
 else {
      buf.append(' ');
    }
  }
  buf.append('^');
  if (this.info != null) {
    buf.append('\n');
    for (    String s : this.info) {
      buf.append('\n').append(s);
    }
  }
  logger.info(buf.toString());
}","public void log(Logger logger){
  StringBuilder buf=new StringBuilder();
  CodeFile file=this.position.getFile();
  String type=this.getMarkerType();
  String message=this.getMessage();
  String suggestion=this.getSuggestion();
  buf.append(file).append(':').append(this.position.getLineNumber()).append(""String_Node_Str"");
  buf.append(type);
  if (message != null) {
    buf.append(""String_Node_Str"").append(message);
  }
  if (suggestion != null) {
    buf.append(""String_Node_Str"").append(suggestion);
  }
  int prevNL=this.position.getPrevNewline();
  int nextNL=this.position.getNextNewline();
  String code=file.getCode();
  String line=code.substring(prevNL,nextNL);
  buf.append('\n').append(line).append('\n');
  for (int i=prevNL; i < this.position.getStart(); i++) {
    char c=code.charAt(i);
    if (c == '\t') {
      buf.append('\t');
    }
 else {
      buf.append(' ');
    }
  }
  buf.append('^');
  if (this.info != null) {
    for (    String s : this.info) {
      buf.append(""String_Node_Str"").append(s);
    }
    buf.append('\n');
  }
  logger.info(buf.toString());
}",0.8963611239060341
84039,"public static void main(String[] args){
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  long now=System.nanoTime();
  initLogger();
  parser.parse(new CodeFile(args[0]),new ConfigParser(config));
  File sourceDir=config.sourceDir;
  File outputDir=config.outputDir;
  Package root=Package.rootPackage;
  int states=DyvilCompiler.states.size();
  int libs=config.libraries.size();
  logger.info(""String_Node_Str"" + sourceDir.getAbsolutePath() + ""String_Node_Str""+ outputDir.getAbsolutePath());
  if (debug) {
    logger.info(""String_Node_Str"" + states + (states == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ DyvilCompiler.states);
  }
  if (DyvilCompiler.states.contains(CompilerState.RESOLVE_TYPES)) {
    for (    Library library : config.libraries) {
      library.loadLibrary();
    }
    Type.init();
    Util.logProfile(now,libs,""String_Node_Str"" + libs + (libs == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  now=System.nanoTime();
  for (  String s : sourceDir.list()) {
    findUnits(new CodeFile(sourceDir,s),new File(outputDir,s),Package.rootPackage);
  }
  int units=root.units.size();
  int packages=root.subPackages.size();
  logger.info(""String_Node_Str"" + packages + (packages == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ units+ (units == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  logger.info(""String_Node_Str"");
  for (  CompilerState state : DyvilCompiler.states) {
    CompilerState.applyState(state,root.units);
  }
  logger.info(""String_Node_Str"");
  Util.logProfile(now,units,""String_Node_Str"");
}","public static void main(String[] args){
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  long now=System.nanoTime();
  initLogger();
  parser.parse(new CodeFile(args[0]),new ConfigParser(config));
  File sourceDir=config.sourceDir;
  File outputDir=config.outputDir;
  Package root=Package.rootPackage;
  int states=DyvilCompiler.states.size();
  int libs=config.libraries.size();
  logger.info(""String_Node_Str"" + sourceDir.getAbsolutePath() + ""String_Node_Str""+ outputDir.getAbsolutePath());
  if (debug) {
    logger.info(""String_Node_Str"" + states + (states == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ DyvilCompiler.states);
  }
  if (DyvilCompiler.states.contains(CompilerState.RESOLVE_TYPES)) {
    for (    Library library : config.libraries) {
      library.loadLibrary();
    }
    Package.init();
    Type.init();
    Util.logProfile(now,libs,""String_Node_Str"" + libs + (libs == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
  }
  now=System.nanoTime();
  for (  String s : sourceDir.list()) {
    findUnits(new CodeFile(sourceDir,s),new File(outputDir,s),Package.rootPackage);
  }
  int units=root.units.size();
  int packages=root.subPackages.size();
  logger.info(""String_Node_Str"" + packages + (packages == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ units+ (units == 1 ? ""String_Node_Str"" : ""String_Node_Str""));
  logger.info(""String_Node_Str"");
  for (  CompilerState state : DyvilCompiler.states) {
    CompilerState.applyState(state,root.units);
  }
  logger.info(""String_Node_Str"");
  Util.logProfile(now,units,""String_Node_Str"");
}",0.9936828806064436
84040,"@Override public void checkArguments(List<Marker> markers,IValue instance,List<IValue> arguments){
  int pOff=0;
  int len=arguments.size();
  List<Parameter> params=this.parameters;
  Parameter par;
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    par=params.get(0);
    parType=par.type;
    if (!instance.requireType(parType)) {
      markers.add(new SemanticError(instance.getPosition(),""String_Node_Str"" + par.name + ""String_Node_Str""+ parType));
    }
    pOff=1;
  }
  for (int i=0; i < len; i++) {
    par=params.get(i + pOff);
    parType=par.type;
    IValue value=arguments.get(i);
    if (!value.requireType(parType)) {
      markers.add(new SemanticError(value.getPosition(),""String_Node_Str"" + par.name + ""String_Node_Str""+ parType));
    }
  }
}","@Override public void checkArguments(List<Marker> markers,IValue instance,List<IValue> arguments){
  int pOff=0;
  int len=arguments.size();
  List<Parameter> params=this.parameters;
  Parameter par;
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.IMPLICIT) == Modifiers.IMPLICIT) {
    par=params.get(0);
    parType=par.type;
    if (!instance.requireType(parType)) {
      markers.add(new SemanticError(instance.getPosition(),""String_Node_Str"" + par.name + ""String_Node_Str""+ instance.getType()+ ""String_Node_Str""+ parType));
    }
    pOff=1;
  }
  for (int i=0; i < len; i++) {
    par=params.get(i + pOff);
    parType=par.type;
    IValue value=arguments.get(i);
    if (!value.requireType(parType)) {
      markers.add(new SemanticError(value.getPosition(),""String_Node_Str"" + par.name + ""String_Node_Str""+ value.getType()+ ""String_Node_Str""+ parType));
    }
  }
}",0.9563191613278976
84041,"@Override public Type resolve(IContext context){
  int len=this.types.size();
  for (int i=0; i < len; i++) {
    IType t1=this.types.get(i);
    IType t2=t1.resolve(context);
    if (t1 != t2) {
      this.types.set(i,t2);
    }
  }
  return this;
}","@Override public TupleType resolve(IContext context){
  this.getTheClass();
  int len=this.types.size();
  for (int i=0; i < len; i++) {
    IType t1=this.types.get(i);
    IType t2=t1.resolve(context);
    if (t1 != t2) {
      this.types.set(i,t2);
    }
  }
  return this;
}",0.9487666034155596
84042,"protected static Type resolvePrimitive(String name){
switch (name) {
case ""String_Node_Str"":
    return VOID;
case ""String_Node_Str"":
  return BOOLEAN;
case ""String_Node_Str"":
return CHAR;
case ""String_Node_Str"":
return BYTE;
case ""String_Node_Str"":
return SHORT;
case ""String_Node_Str"":
return INT;
case ""String_Node_Str"":
return LONG;
case ""String_Node_Str"":
return FLOAT;
case ""String_Node_Str"":
return DOUBLE;
case ""String_Node_Str"":
case ""String_Node_Str"":
return STRING;
}
return null;
}","protected static Type resolvePrimitive(String name){
switch (name) {
case ""String_Node_Str"":
    return VOID;
case ""String_Node_Str"":
  return BOOLEAN;
case ""String_Node_Str"":
return CHAR;
case ""String_Node_Str"":
return BYTE;
case ""String_Node_Str"":
return SHORT;
case ""String_Node_Str"":
return INT;
case ""String_Node_Str"":
return LONG;
case ""String_Node_Str"":
return FLOAT;
case ""String_Node_Str"":
return DOUBLE;
case ""String_Node_Str"":
case ""String_Node_Str"":
return STRING;
case ""String_Node_Str"":
case ""String_Node_Str"":
return ANY;
}
return null;
}",0.9426386233269598
84043,"@Override public void resolveTypes(List<Marker> markers,IContext context){
  this.getType();
}","@Override public void resolveTypes(List<Marker> markers,IContext context){
  TupleType type=new TupleType();
  for (  IValue v : this.values) {
    v.resolveTypes(markers,context);
    type.addType(v.getType());
  }
  type.getTheClass();
  this.tupleType=type;
}",0.5168539325842697
84044,"public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IContext context1=context;
  IAccess prev=null;
  IAccess curr=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (prev != null) {
      context1=prev.getType();
      curr.setValue(prev);
    }
 else {
      IValue value=curr.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (context1 == null) {
      backwards=true;
      break;
    }
    if (!curr.resolve(context1,context)) {
      IAccess alternate=curr.resolve2(context1,context);
      if (alternate == null) {
        backwards=true;
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (true) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      break;
    }
    context1=value.getType();
    if (context1 == null) {
      context1=context;
    }
    if (!curr.resolve(context1,context)) {
      curr.setValue(null);
      if (curr.resolve(context,null)) {
        prev.addValue(curr);
        curr=null;
        iterator.remove();
      }
 else {
        curr.setValue(value);
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}","public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(markers,context,access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IContext context1=context;
  IAccess prev=null;
  IAccess curr=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (prev != null) {
      context1=prev.getType();
      curr.setValue(prev);
    }
 else {
      IValue value=curr.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (context1 == null) {
      backwards=true;
      break;
    }
    if (!curr.resolve(context1,context)) {
      IAccess alternate=curr.resolve2(context1,context);
      if (alternate == null) {
        backwards=true;
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (true) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      break;
    }
    context1=value.getType();
    if (context1 == null) {
      context1=context;
    }
    if (!curr.resolve(context1,context)) {
      curr.setValue(null);
      if (curr.resolve(context,null)) {
        prev.addValue(curr);
        curr=null;
        iterator.remove();
      }
 else {
        curr.setValue(value);
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}",0.9952267303102624
84045,"public static LinkedList<IAccess> getCallChain(IAccess iaccess){
  LinkedList<IAccess> list=new LinkedList();
  while (true) {
    list.addFirst(iaccess);
    IValue v=iaccess.getValue();
    if (v instanceof IAccess) {
      iaccess=(IAccess)v;
      continue;
    }
    break;
  }
  return list;
}","public static LinkedList<IAccess> getCallChain(List<Marker> markers,IContext context,IAccess iaccess){
  LinkedList<IAccess> list=new LinkedList();
  while (true) {
    list.addFirst(iaccess);
    IValue v=iaccess.getValue();
    if (v instanceof IAccess) {
      iaccess=(IAccess)v;
      continue;
    }
 else     if (v != null) {
      v.resolve(markers,context);
    }
    break;
  }
  return list;
}",0.8506401137980085
84046,public boolean resolve(IContext context);,"public boolean resolve(IContext context,List<Marker> markers);",0.7961165048543689
84047,"public default int getTypeMatch(IType type){
  IType t=this.getType();
  if (type.equals(t)) {
    return 3;
  }
 else   if (Type.isSuperType(type,t)) {
    return 2;
  }
 else   if (type.classEquals(Type.OBJECT)) {
    return 1;
  }
  return 0;
}","public default int getTypeMatch(IType type){
  IType t=this.getType();
  if (t == null) {
    return 0;
  }
  if (type.equals(t)) {
    return 3;
  }
 else   if (Type.isSuperType(type,t)) {
    return 2;
  }
 else   if (type.classEquals(Type.OBJECT)) {
    return 1;
  }
  return 0;
}",0.9303201506591338
84048,"@Override public boolean resolve(IContext context){
  return this.type.isResolved();
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  return this.type.isResolved();
}",0.8911917098445595
84049,"@Override public boolean resolve(IContext context){
  if (!this.type.isResolved()) {
    return false;
  }
  MethodMatch match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    this.isCustom=true;
    return true;
  }
  match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  if (!this.type.isResolved()) {
    return false;
  }
  MethodMatch match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    this.isCustom=true;
    return true;
  }
  match=this.type.resolveMethod(null,""String_Node_Str"",this.arguments);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}",0.9775880469583778
84050,"@Override public boolean resolve(IContext context){
  IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
  if (field != null) {
    this.field=field;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
  if (field != null) {
    this.field=field;
    return true;
  }
  return false;
}",0.9532293986636972
84051,"@Override public IAccess resolve2(IContext context){
  if (this.isSugarCall) {
    if (this.arguments.isEmpty()) {
      IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
      if (field != null) {
        FieldAccess access=new FieldAccess(this.position);
        access.field=field;
        access.instance=this.instance;
        access.name=this.name;
        access.qualifiedName=this.qualifiedName;
        access.dotless=this.dotless;
        return access;
      }
    }
  }
 else   if (this.instance == null) {
    FieldMatch field=context.resolveField(this.qualifiedName);
    if (field != null) {
      FieldAccess access=new FieldAccess(this.position);
      access.field=field.theField;
      access.name=this.name;
      access.qualifiedName=this.qualifiedName;
      access.dotless=this.dotless;
      MethodCall call=new MethodCall(this.position,access,""String_Node_Str"");
      call.arguments=this.arguments;
      if (call.resolve(field.theField.getType())) {
        return call;
      }
    }
  }
  return null;
}","@Override public IAccess resolve2(IContext context){
  if (this.isSugarCall) {
    if (this.arguments.isEmpty()) {
      IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
      if (field != null) {
        FieldAccess access=new FieldAccess(this.position);
        access.field=field;
        access.instance=this.instance;
        access.name=this.name;
        access.qualifiedName=this.qualifiedName;
        access.dotless=this.dotless;
        return access;
      }
    }
  }
 else   if (this.instance == null) {
    FieldMatch field=context.resolveField(this.qualifiedName);
    if (field != null) {
      FieldAccess access=new FieldAccess(this.position);
      access.field=field.theField;
      access.name=this.name;
      access.qualifiedName=this.qualifiedName;
      access.dotless=this.dotless;
      MethodCall call=new MethodCall(this.position,access,""String_Node_Str"");
      call.arguments=this.arguments;
      if (call.resolve(field.theField.getType(),null)) {
        return call;
      }
    }
  }
  return null;
}",0.9976448422044276
84052,"@Override public boolean resolve(IContext context){
  IMethod method=IAccess.resolveMethod(context,this.instance,this.qualifiedName,this.arguments);
  if (method != null) {
    this.method=method;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  int len=this.arguments.size();
  for (int i=0; i < len; i++) {
    IValue v1=this.arguments.get(i);
    IValue v2=v1.resolve(markers,context);
    if (v1 != v2) {
      this.arguments.set(i,v2);
    }
  }
  IMethod method=IAccess.resolveMethod(context,this.instance,this.qualifiedName,this.arguments);
  if (method != null) {
    this.method=method;
    return true;
  }
  return false;
}",0.673352435530086
84053,"private void generateTypes(){
  int len=this.values.size();
  if (len == 0) {
    this.elementType=Type.VOID;
    this.requiredType=Type.VOID;
    return;
  }
  IType t=this.values.get(0).getType();
  for (int i=1; i < len; i++) {
    IValue v=this.values.get(i);
    t=Type.findCommonSuperType(t,v.getType());
  }
  if (t != null) {
    this.elementType=t;
    this.requiredType=t.clone();
    this.requiredType.addArrayDimension();
  }
}","private void generateTypes(){
  int len=this.values.size();
  if (len == 0) {
    this.elementType=Type.VOID;
    this.requiredType=Type.VOID;
    return;
  }
  IType t=this.values.get(0).getType();
  for (int i=1; i < len; i++) {
    IValue v=this.values.get(i);
    IType t1=v.getType();
    if (t1 == null) {
      t=Type.VOID;
      break;
    }
    t=Type.findCommonSuperType(t,t1);
  }
  if (t != null) {
    this.elementType=t;
    this.requiredType=t.clone();
    this.requiredType.addArrayDimension();
  }
}",0.8963350785340314
84054,"@Override public boolean resolve(IContext context){
  IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
  if (field != null) {
    this.field=field;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,List<Marker> markers){
  IField field=IAccess.resolveField(context,this.instance,this.qualifiedName);
  if (field != null) {
    this.field=field;
    return true;
  }
  return false;
}",0.9532293986636972
84055,"public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(markers,context,access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IAccess prev=null;
  IAccess curr=null;
  IAccess alternate=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (alternate != null) {
      curr.setValue(alternate);
      alternate=null;
    }
    if (!curr.resolve(context)) {
      alternate=curr.resolve2(context);
      if (alternate == null) {
        backwards=true;
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (true) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      break;
    }
    if (!curr.resolve(context)) {
      curr.setValue(null);
      if (curr.resolve(context)) {
        prev.addValue(curr);
        curr=null;
        iterator.remove();
      }
 else {
        curr.setValue(value);
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}","public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(markers,context,access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IAccess prev=null;
  IAccess curr=null;
  IAccess alternate=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (alternate != null) {
      curr.setValue(alternate);
      alternate=null;
    }
    if (!curr.resolve(context,markers)) {
      alternate=curr.resolve2(context);
      if (alternate == null) {
        backwards=true;
        break;
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (true) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      if (!curr.resolve(context,markers)) {
        markers.add(curr.getResolveError());
      }
      break;
    }
    if (!curr.resolve(context,null)) {
      curr.setValue(null);
      if (curr.resolve(context,markers)) {
        prev.addValue(curr);
        curr=null;
        iterator.remove();
      }
 else {
        curr.setValue(value);
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}",0.9535776614310646
84056,"@Override public IClass resolveClass(String name){
  for (  ITypeVariable var : this.generics) {
    if (var.isName(name)) {
      return var.getTheClass();
    }
  }
  return this.unit.resolveClass(name);
}","@Override public IClass resolveClass(String name){
  if (this.generics != null) {
    for (    ITypeVariable var : this.generics) {
      if (var.isName(name)) {
        return var.getTheClass();
      }
    }
  }
  return this.unit.resolveClass(name);
}",0.8980477223427332
84057,"@Override public boolean resolve(IContext context,IContext context1){
  if (this.field != null) {
    return true;
  }
  FieldMatch f=context.resolveField(context1,this.qualifiedName);
  if (f != null) {
    this.field=f.theField;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,IContext context1){
  FieldMatch f=context.resolveField(context1,this.qualifiedName);
  if (f != null) {
    this.field=f.theField;
    return true;
  }
  return false;
}",0.4458077709611452
84058,"@Override public boolean resolve(IContext context,IContext context1){
  if (this.method != null) {
    return true;
  }
  IType[] types=this.getTypes();
  if (types == null) {
    return false;
  }
  MethodMatch match=context.resolveMethod(context1,this.qualifiedName,types);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}","@Override public boolean resolve(IContext context,IContext context1){
  IType[] types=this.getTypes();
  if (types == null) {
    return false;
  }
  MethodMatch match=context.resolveMethod(context1,this.qualifiedName,types);
  if (match != null) {
    this.method=match.theMethod;
    return true;
  }
  return false;
}",0.927536231884058
84059,"@Override public void resolveTypes(List<Marker> markers,IContext context){
  this.context=context;
  IVariableList variableList=context instanceof IVariableList ? (IVariableList)context : null;
  for (  IValue v : this.values) {
    if (!(v instanceof FieldAssign)) {
      continue;
    }
    FieldAssign assign=(FieldAssign)v;
    if (!assign.initializer) {
      continue;
    }
    Variable var=(Variable)assign.field;
    var.start=this.start;
    var.end=this.end;
    this.variables.put(assign.qualifiedName,assign.field);
    if (variableList != null) {
      variableList.addVariable(var);
    }
  }
}","@Override public void resolveTypes(List<Marker> markers,IContext context){
  this.context=context;
  IVariableList variableList=context instanceof IVariableList ? (IVariableList)context : null;
  for (  IValue v : this.values) {
    v.resolveTypes(markers,context);
    if (!(v instanceof FieldAssign)) {
      continue;
    }
    FieldAssign assign=(FieldAssign)v;
    if (!assign.initializer) {
      continue;
    }
    Variable var=(Variable)assign.field;
    var.start=this.start;
    var.end=this.end;
    this.variables.put(assign.qualifiedName,assign.field);
    if (variableList != null) {
      variableList.addVariable(var);
    }
  }
}",0.9705648369132855
84060,"private Token addToken(Token prev,StringBuilder buf,int type,int line,int start,int end){
  String s=buf.toString();
  buf.delete(0,buf.length());
  return this.addToken(prev,s,type,line,start,end);
}","private Token addToken(Token prev,StringBuilder buf,int type,int line,int start){
  String s=buf.toString();
  int len=buf.length();
  buf.delete(0,len);
  return this.addToken(prev,s,type,line,start,len);
}",0.8108108108108109
84061,"public void tokenize(){
  String code=this.file.getCode();
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  Token first=new Token(-1,""String_Node_Str"",(byte)0,null,null,0,-1,-1);
  Token prev=first;
  int start=0;
  int lineNumber=1;
  int i;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  for (i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (c == '\n') {
      lineNumber++;
    }
    if (type == 0) {
      start=i;
      if (isWhitespace(c)) {
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    if (type == TYPE_IDENTIFIER) {
      if (subtype == MOD_DOTS) {
        if (c == '.') {
          buf.append(c);
        }
 else {
          addToken=true;
          reparse=true;
        }
      }
 else       if (c == '_' || c == '$' || c == '@') {
        subtype=MOD_SYMBOL | MOD_LETTER;
        buf.append(c);
      }
 else {
        boolean letter=(subtype & MOD_LETTER) != 0;
        boolean symbol=(subtype & MOD_SYMBOL) != 0;
        if (letter) {
          if (isIdentifierPart(c)) {
            subtype=MOD_LETTER;
            buf.append(c);
            continue;
          }
        }
        if (symbol) {
          if (isIdentifierSymbol(c)) {
            subtype=MOD_SYMBOL;
            buf.append(c);
            continue;
          }
        }
        addToken=true;
      }
    }
 else     if (type == TYPE_SYMBOL) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_BRACKET) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_COMMENT) {
      if (subtype == MOD_LINE) {
        if (c == '\n') {
          type=0;
          continue;
        }
      }
 else       if (subtype == MOD_BLOCK) {
        if (l == '*' && c == '/') {
          type=0;
          continue;
        }
      }
    }
 else     if (type == TYPE_INT || type == TYPE_LONG) {
      if (c == '.') {
        type=TYPE_FLOAT;
        buf.append('.');
      }
 else       if (c == 'l' || c == 'L') {
        type=TYPE_LONG;
        addToken=true;
        reparse=false;
      }
 else       if (subtype == MOD_DEC) {
        if (isDigit(c)) {
          buf.append(c);
        }
 else         if (c == 'f' || c == 'F') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else         if (c == 'd' || c == 'D') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_BIN) {
        if (c == 'b' || isBinDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_OCT) {
        if (isOctDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_HEX) {
        if (c == 'x' || isHexDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
    }
 else     if (type == TYPE_FLOAT || type == TYPE_DOUBLE) {
      if (c == 'x') {
        subtype=MOD_HEX;
        buf.append(c);
      }
 else       if (c == 'f' || c == 'F') {
        addToken=true;
        reparse=false;
      }
 else       if (c == 'd' || c == 'D') {
        type=TYPE_DOUBLE;
        addToken=true;
        reparse=false;
      }
 else       if (isDigit(c) || c == '.' || c == 'e') {
        buf.append(c);
      }
 else {
        addToken=true;
      }
    }
 else     if (type == TYPE_STRING) {
      if (c == '""' && buf.length() > 0) {
        buf.append('""');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
 else     if (type == TYPE_CHAR) {
      if (c == '\'' && buf.length() > 0) {
        buf.append('\'');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
    if (addToken) {
      prev=this.addToken(prev,buf,type | subtype,lineNumber,start,i);
      addToken=false;
      type=0;
      if (reparse) {
        i--;
      }
 else {
        reparse=true;
      }
    }
  }
  if (buf.length() > 0) {
    this.addToken(prev,buf,type,lineNumber,start,i);
  }
  this.first=first.next();
}","public void tokenize(){
  String code=this.file.getCode();
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  Token first=new Token(-1,""String_Node_Str"",(byte)0,null,null,0,-1,-1);
  Token prev=first;
  int start=0;
  int lineNumber=1;
  int i;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  for (i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (c == '\n') {
      lineNumber++;
    }
    if (type == 0) {
      start=i;
      if (isWhitespace(c)) {
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    if (type == TYPE_IDENTIFIER) {
      if (subtype == MOD_DOTS) {
        if (c == '.') {
          buf.append(c);
        }
 else {
          addToken=true;
          reparse=true;
        }
      }
 else       if (c == '_' || c == '$' || c == '@') {
        subtype=MOD_SYMBOL | MOD_LETTER;
        buf.append(c);
      }
 else {
        boolean letter=(subtype & MOD_LETTER) != 0;
        boolean symbol=(subtype & MOD_SYMBOL) != 0;
        if (letter) {
          if (isIdentifierPart(c)) {
            subtype=MOD_LETTER;
            buf.append(c);
            continue;
          }
        }
        if (symbol) {
          if (isIdentifierSymbol(c)) {
            subtype=MOD_SYMBOL;
            buf.append(c);
            continue;
          }
        }
        addToken=true;
      }
    }
 else     if (type == TYPE_SYMBOL) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_BRACKET) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_COMMENT) {
      if (subtype == MOD_LINE) {
        if (c == '\n') {
          type=0;
          continue;
        }
      }
 else       if (subtype == MOD_BLOCK) {
        if (l == '*' && c == '/') {
          type=0;
          continue;
        }
      }
    }
 else     if (type == TYPE_INT || type == TYPE_LONG) {
      if (c == '.') {
        type=TYPE_FLOAT;
        buf.append('.');
      }
 else       if (c == 'l' || c == 'L') {
        type=TYPE_LONG;
        addToken=true;
        reparse=false;
      }
 else       if (subtype == MOD_DEC) {
        if (isDigit(c)) {
          buf.append(c);
        }
 else         if (c == 'f' || c == 'F') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else         if (c == 'd' || c == 'D') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_BIN) {
        if (c == 'b' || isBinDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_OCT) {
        if (isOctDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_HEX) {
        if (c == 'x' || isHexDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
    }
 else     if (type == TYPE_FLOAT || type == TYPE_DOUBLE) {
      if (c == 'x') {
        subtype=MOD_HEX;
        buf.append(c);
      }
 else       if (c == 'f' || c == 'F') {
        addToken=true;
        reparse=false;
      }
 else       if (c == 'd' || c == 'D') {
        type=TYPE_DOUBLE;
        addToken=true;
        reparse=false;
      }
 else       if (isDigit(c) || c == '.' || c == 'e') {
        buf.append(c);
      }
 else {
        addToken=true;
      }
    }
 else     if (type == TYPE_STRING) {
      if (c == '""' && buf.length() > 0) {
        buf.append('""');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
 else     if (type == TYPE_CHAR) {
      if (c == '\'' && buf.length() > 0) {
        buf.append('\'');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
    if (addToken) {
      prev=this.addToken(prev,buf,type | subtype,lineNumber,start);
      addToken=false;
      type=0;
      if (reparse) {
        i--;
      }
 else {
        reparse=true;
      }
    }
  }
  if (buf.length() > 0) {
    this.addToken(prev,buf,type,lineNumber,start);
  }
  this.first=first.next();
}",0.999536822603057
84062,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.name == null) {
    buffer.append('_');
  }
 else {
    buffer.append(this.name);
  }
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
 else {
    buffer.append(Formatting.Type.genericUpperBound);
    if (this.upperBound != null) {
      this.upperBound.toString(prefix,buffer);
      if (this.upperBounds != null) {
        buffer.append(Formatting.Type.genericBoundSeperator);
      }
    }
    if (this.upperBounds != null) {
      Util.astToString(this.upperBounds,Formatting.Type.genericBoundSeperator,buffer);
    }
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.name == null) {
    buffer.append('_');
  }
 else {
    buffer.append(this.name);
  }
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
 else   if (this.upperBound != null || this.upperBounds != null) {
    buffer.append(Formatting.Type.genericUpperBound);
    if (this.upperBound != null) {
      this.upperBound.toString(prefix,buffer);
      if (this.upperBounds != null) {
        buffer.append(Formatting.Type.genericBoundSeperator);
      }
    }
    if (this.upperBounds != null) {
      Util.astToString(this.upperBounds,Formatting.Type.genericBoundSeperator,buffer);
    }
  }
}",0.9591695501730104
84063,"@Override public void resolveTypes(List<Marker> markers,IContext context){
  if (this.upperBounds != null) {
    for (ListIterator<IType> iterator=this.upperBounds.listIterator(); iterator.hasNext(); ) {
      IType t1=iterator.next();
      IType t2=t1.resolve(context);
      if (!t2.isResolved()) {
        markers.add(new SemanticError(t2.getPosition(),""String_Node_Str"" + t2 + ""String_Node_Str""));
        continue;
      }
      IClass iclass=t2.getTheClass();
      if (iclass != null && !iclass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        if (this.upperBound != null) {
          markers.add(new SemanticError(t2.getPosition(),""String_Node_Str"" + this.name + ""String_Node_Str""));
        }
        iterator.remove();
        this.upperBound=t2;
        continue;
      }
      if (t1 != t2) {
        iterator.set(t2);
      }
    }
    if (this.upperBounds.isEmpty()) {
      this.upperBounds=null;
    }
    this.captureClass=new CaptureClass(this,this.upperBound,this.upperBounds);
  }
 else   if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolve(context);
    if (!this.lowerBound.isResolved()) {
      markers.add(new SemanticError(this.lowerBound.getPosition(),""String_Node_Str"" + this.lowerBound + ""String_Node_Str""));
    }
    this.captureClass=Type.OBJECT.theClass;
  }
}","@Override public void resolveTypes(List<Marker> markers,IContext context){
  if (this.upperBounds != null) {
    for (ListIterator<IType> iterator=this.upperBounds.listIterator(); iterator.hasNext(); ) {
      IType t1=iterator.next();
      IType t2=t1.resolve(context);
      if (!t2.isResolved()) {
        markers.add(new SemanticError(t2.getPosition(),""String_Node_Str"" + t2 + ""String_Node_Str""));
        continue;
      }
      IClass iclass=t2.getTheClass();
      if (iclass != null && !iclass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        if (this.upperBound != null) {
          markers.add(new SemanticError(t2.getPosition(),""String_Node_Str"" + this.name + ""String_Node_Str""));
        }
        iterator.remove();
        this.upperBound=t2;
        continue;
      }
      if (t1 != t2) {
        iterator.set(t2);
      }
    }
    if (this.upperBounds.isEmpty()) {
      this.upperBounds=null;
    }
    this.captureClass=new CaptureClass(this,this.upperBound,this.upperBounds);
  }
 else   if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolve(context);
    if (!this.lowerBound.isResolved()) {
      markers.add(new SemanticError(this.lowerBound.getPosition(),""String_Node_Str"" + this.lowerBound + ""String_Node_Str""));
    }
  }
  this.captureClass=Type.OBJECT.theClass;
}",0.9977203647416414
84064,"public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IContext context1=context;
  IAccess prev=null;
  IAccess curr=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (prev != null) {
      context1=prev.getType();
      curr.setValue(prev);
    }
 else {
      IValue value=curr.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (context1 == null) {
      backwards=true;
      break;
    }
    if (!curr.resolve(context1,context)) {
      IAccess alternate=curr.resolve2(context1,context);
      if (alternate == null) {
        markers.add(curr.getResolveError());
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
  IAccess next=curr;
  prev=iterator.previous();
  while (iterator.hasPrevious()) {
    next=curr;
    curr=prev;
    prev=iterator.previous();
    if (prev != null) {
      context1=prev.getType();
      curr.setValue(prev);
    }
 else {
      IValue value=curr.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (context1 == null) {
      context1=context;
    }
    IAccess alternate=curr.resolve3(context1,next);
    if (alternate != null) {
      curr=alternate;
      iterator.set(alternate);
    }
    markers.add(curr.getResolveError());
  }
  return chain.getLast();
}","public static IAccess resolve(List<Marker> markers,IContext context,IAccess access){
  LinkedList<IAccess> chain=getCallChain(access);
  ListIterator<IAccess> iterator=chain.listIterator();
  IContext context1=context;
  IAccess prev=null;
  IAccess curr=null;
  boolean backwards=false;
  while (iterator.hasNext()) {
    prev=curr;
    curr=iterator.next();
    if (prev != null) {
      context1=prev.getType();
      curr.setValue(prev);
    }
 else {
      IValue value=curr.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (context1 == null) {
      backwards=true;
      break;
    }
    if (!curr.resolve(context1,context)) {
      IAccess alternate=curr.resolve2(context1,context);
      if (alternate == null) {
        backwards=true;
      }
 else {
        curr=alternate;
        iterator.set(alternate);
      }
    }
  }
  if (!backwards) {
    return chain.getLast();
  }
 else   if (chain.size() == 1) {
    markers.add(access.getResolveError());
    return access;
  }
  IAccess next=null;
  curr=access;
  prev=null;
  while (true) {
    IValue value=curr.getValue();
    if (value instanceof IAccess) {
      prev=(IAccess)value;
    }
 else {
      break;
    }
    context1=value.getType();
    if (context1 == null) {
      context1=context;
    }
    if (!curr.resolve(context1,context)) {
      curr.setValue(null);
      if (curr.resolve(context,null)) {
        prev.addValue(curr);
        curr=null;
        iterator.remove();
      }
 else {
        curr.setValue(value);
        markers.add(curr.getResolveError());
      }
    }
    next=curr;
    curr=prev;
  }
  return chain.getLast();
}",0.5980271270036991
84065,"public static void main(String[] args){
  initLogger();
  parser.parse(new CodeFile(args[0]),new ConfigParser(config));
  for (  Library library : config.libraries) {
    library.loadLibrary();
  }
  Type.init();
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  run();
}","public static void main(String[] args){
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  initLogger();
  parser.parse(new CodeFile(args[0]),new ConfigParser(config));
  for (  Library library : config.libraries) {
    library.loadLibrary();
  }
  Type.init();
  run();
}",0.7422680412371134
84066,"@Override public boolean isSuperType(Type t){
  if (t.equals(this.superClass) || this.interfaces.contains(t)) {
    return true;
  }
 else   if (this.superClass.theClass != null) {
    return this.superClass.theClass.isSuperType(t);
  }
  return false;
}","@Override public boolean isSuperType(Type t){
  if (t.equals(this.superClass) || this.interfaces.contains(t)) {
    return true;
  }
 else   if (this.superClass != null && this.superClass.theClass != null) {
    return this.superClass.theClass.isSuperType(t);
  }
  return false;
}",0.9158878504672896
84067,"@Override public IAccess resolve2(IContext context,IContext context1){
  String name=this.type.name;
  FieldMatch f=context.resolveField(context1,name);
  if (f != null) {
    FieldAccess access=new FieldAccess(this.position,null,name);
    access.field=f.theField;
    return access;
  }
  MethodMatch m=context.resolveMethod(context1,name,Type.EMPTY_TYPES);
  if (m != null) {
    MethodCall call=new MethodCall(this.position,null,name);
    call.method=m.theMethod;
    return call;
  }
  return this;
}","@Override public IAccess resolve2(IContext context,IContext context1){
  String name=this.type.name;
  FieldMatch f=context.resolveField(context1,name);
  if (f != null) {
    FieldAccess access=new FieldAccess(this.position,null,name);
    access.field=f.theField;
    return access;
  }
  MethodMatch m=context.resolveMethod(context1,name,Type.EMPTY_TYPES);
  if (m != null) {
    MethodCall call=new MethodCall(this.position,null,name);
    call.method=m.theMethod;
    call.isSugarCall=true;
    return call;
  }
  return this;
}",0.9740134744947064
84068,"@Override public IValue applyState(CompilerState state,IContext context){
  if (state == CompilerState.RESOLVE_TYPES) {
    if (this.initializer) {
      this.field.applyState(state,context);
    }
  }
 else   if (state == CompilerState.RESOLVE) {
    this.value.applyState(state,context);
    return AccessResolver.resolve(context,this);
  }
 else   if (state == CompilerState.CHECK) {
    if (this.value instanceof ThisValue) {
      state.addMarker(new SyntaxError(this.position,""String_Node_Str""));
      this.value=null;
    }
  }
  if (this.value != null) {
    this.value=this.value.applyState(state,context);
  }
  return this;
}","@Override public IValue applyState(CompilerState state,IContext context){
  if (state == CompilerState.RESOLVE_TYPES) {
    if (this.initializer) {
      this.field.applyState(state,context);
    }
  }
 else   if (state == CompilerState.RESOLVE) {
    if (this.value != null) {
      this.value.applyState(state,context);
    }
    return AccessResolver.resolve(context,this);
  }
 else   if (state == CompilerState.CHECK) {
    if (this.value instanceof ThisValue) {
      state.addMarker(new SyntaxError(this.position,""String_Node_Str""));
      this.value=null;
    }
  }
  if (this.value != null) {
    this.value=this.value.applyState(state,context);
  }
  return this;
}",0.9710365853658536
84069,"@Override public IValue applyState(CompilerState state,IContext context){
  int len=this.values.size();
  if (state == CompilerState.FOLD_CONSTANTS) {
    if (len == 1) {
      return this.values.get(0);
    }
  }
 else   if (state == CompilerState.RESOLVE) {
    IVariableList variableList=context instanceof IVariableList ? (IVariableList)context : null;
    for (    IValue v : this.values) {
      v.applyState(state,context);
      if (!(v instanceof FieldAssign)) {
        continue;
      }
      FieldAssign assign=(FieldAssign)v;
      if (!assign.initializer) {
        continue;
      }
      Variable var=(Variable)assign.field;
      var.start=this.start;
      var.end=this.end;
      this.variables.put(assign.qualifiedName,assign.field);
      if (variableList != null) {
        variableList.addVariable((Variable)assign.field);
      }
    }
  }
  this.context=context;
  for (int i=0; i < len; i++) {
    IValue v=this.values.get(i);
    this.values.set(i,v.applyState(state,this));
  }
  return this;
}","@Override public IValue applyState(CompilerState state,IContext context){
  int len=this.values.size();
  if (state == CompilerState.FOLD_CONSTANTS) {
    if (len == 1) {
      return this.values.get(0);
    }
  }
 else   if (state == CompilerState.RESOLVE) {
    IVariableList variableList=context instanceof IVariableList ? (IVariableList)context : null;
    for (    IValue v : this.values) {
      v.applyState(state,this);
      if (!(v instanceof FieldAssign)) {
        continue;
      }
      FieldAssign assign=(FieldAssign)v;
      if (!assign.initializer) {
        continue;
      }
      Variable var=(Variable)assign.field;
      var.start=this.start;
      var.end=this.end;
      this.variables.put(assign.qualifiedName,assign.field);
      if (variableList != null) {
        variableList.addVariable((Variable)assign.field);
      }
    }
  }
  this.context=context;
  for (int i=0; i < len; i++) {
    IValue v=this.values.get(i);
    this.values.set(i,v.applyState(state,this));
  }
  return this;
}",0.994610485056345
84070,"@Override public void writeSet(MethodVisitor visitor){
  visitor.visitVarInsn(Opcodes.ASTORE,this.index);
}","@Override public void writeSet(MethodVisitor visitor){
  visitor.visitVarInsn(this.type.getStoreOpcode(),this.index);
}",0.8761061946902655
84071,"@Override public void writeGet(MethodVisitor visitor){
  visitor.visitVarInsn(Opcodes.ALOAD,this.index);
}","@Override public void writeGet(MethodVisitor visitor){
  visitor.visitVarInsn(this.type.getLoadOpcode(),this.index);
}",0.8839285714285714
84072,"@Override public void writeSet(MethodVisitor visitor){
  visitor.visitVarInsn(Opcodes.ASTORE,this.index);
}","@Override public void writeSet(MethodVisitor visitor){
  visitor.visitVarInsn(this.type.getStoreOpcode(),this.index);
}",0.8761061946902655
84073,"@Override public void writeGet(MethodVisitor visitor){
  visitor.visitVarInsn(Opcodes.ALOAD,this.index);
}","@Override public void writeGet(MethodVisitor visitor){
  visitor.visitVarInsn(this.type.getLoadOpcode(),this.index);
}",0.8839285714285714
84074,"@Override public MethodMatch resolveMethod(IContext context,String name,Type... argumentTypes){
  if (this.theClass == null || argumentTypes == null) {
    return null;
  }
  List<MethodMatch> list=new ArrayList();
  this.theClass.getMethodMatches(list,null,name,argumentTypes);
  if (list.isEmpty() && context != null) {
    Type t=context.getThisType();
    t.theClass.getMethodMatches(list,this,name,argumentTypes);
  }
  if (list.isEmpty()) {
    return null;
  }
  Collections.sort(list);
  return list.get(0);
}","@Override public MethodMatch resolveMethod(IContext context,String name,Type... argumentTypes){
  if (this.theClass == null) {
    return null;
  }
  List<MethodMatch> list=new ArrayList();
  this.theClass.getMethodMatches(list,null,name,argumentTypes);
  if (list.isEmpty() && context != null) {
    Type t=context.getThisType();
    t.theClass.getMethodMatches(list,this,name,argumentTypes);
  }
  if (list.isEmpty()) {
    return null;
  }
  Collections.sort(list);
  return list.get(0);
}",0.975222993062438
84075,"public void tokenize(){
  String code=this.file.getCode();
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  Token first=new Token(-1,""String_Node_Str"",(byte)0,null,null,0,-1,-1);
  Token prev=first;
  int start=0;
  int lineNumber=1;
  int i;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  for (i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (c == '\n') {
      lineNumber++;
    }
    if (type == 0) {
      start=i;
      if (isWhitespace(c)) {
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    if (type == TYPE_IDENTIFIER) {
      if (subtype == MOD_DOTS) {
        if (c == '.') {
          buf.append(c);
        }
      }
 else {
        boolean letter=(subtype & MOD_LETTER) != 0;
        boolean symbol=(subtype & MOD_SYMBOL) != 0;
        if (letter) {
          if (c == '_') {
            subtype|=MOD_SYMBOL;
            buf.append(c);
          }
 else           if (isIdentifierPart(c)) {
            subtype=MOD_LETTER;
            buf.append(c);
          }
 else           if (!symbol) {
            addToken=true;
          }
        }
        if (symbol) {
          if (c == '_') {
            subtype|=MOD_LETTER;
            buf.append(c);
          }
 else           if (isIdentifierSymbol(c)) {
            subtype=MOD_SYMBOL;
            buf.append(c);
          }
 else           if (!letter) {
            addToken=true;
          }
        }
      }
    }
 else     if (type == TYPE_SYMBOL) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_BRACKET) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_COMMENT) {
      if (subtype == MOD_LINE) {
        if (c == '\n') {
          type=0;
          continue;
        }
      }
 else       if (subtype == MOD_BLOCK) {
        if (l == '*' && c == '/') {
          type=0;
          continue;
        }
      }
    }
 else     if (type == TYPE_INT || type == TYPE_LONG) {
      if (c == '.') {
        type=TYPE_FLOAT;
        buf.append('.');
      }
 else       if (c == 'l' || c == 'L') {
        type=TYPE_LONG;
        addToken=true;
        reparse=false;
      }
 else       if (subtype == MOD_DEC) {
        if (isDigit(c)) {
          buf.append(c);
        }
 else         if (c == 'f' || c == 'F') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else         if (c == 'd' || c == 'D') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_BIN) {
        if (c == 'b' || isBinDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_OCT) {
        if (isOctDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_HEX) {
        if (c == 'x' || isHexDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
    }
 else     if (type == TYPE_FLOAT || type == TYPE_DOUBLE) {
      if (c == 'x') {
        subtype=MOD_HEX;
        buf.append(c);
      }
 else       if (c == 'f' || c == 'F') {
        addToken=true;
        reparse=false;
      }
 else       if (c == 'd' || c == 'D') {
        type=TYPE_DOUBLE;
        addToken=true;
        reparse=false;
      }
 else       if (isDigit(c) || c == '.' || c == 'e') {
        buf.append(c);
      }
 else {
        addToken=true;
      }
    }
 else     if (type == TYPE_STRING) {
      if (c == '""' && buf.length() > 0) {
        buf.append('""');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
 else     if (type == TYPE_CHAR) {
      if (c == '\'' && buf.length() > 0) {
        buf.append('\'');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
    if (addToken) {
      prev=this.addToken(prev,buf,type | subtype,lineNumber,start,i);
      addToken=false;
      type=0;
      if (reparse) {
        i--;
      }
 else {
        reparse=true;
      }
    }
  }
  if (buf.length() > 0) {
    this.addToken(prev,buf,type,lineNumber,start,i);
  }
  this.first=first.next();
}","public void tokenize(){
  String code=this.file.getCode();
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  Token first=new Token(-1,""String_Node_Str"",(byte)0,null,null,0,-1,-1);
  Token prev=first;
  int start=0;
  int lineNumber=1;
  int i;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  for (i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (c == '\n') {
      lineNumber++;
    }
    if (type == 0) {
      start=i;
      if (isWhitespace(c)) {
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    if (type == TYPE_IDENTIFIER) {
      if (subtype == MOD_DOTS) {
        if (c == '.') {
          buf.append(c);
        }
      }
 else {
        boolean letter=(subtype & MOD_LETTER) != 0;
        boolean symbol=(subtype & MOD_SYMBOL) != 0;
        if (letter) {
          if (c == '_' || c == '$' || c == '@') {
            subtype|=MOD_SYMBOL;
            buf.append(c);
          }
 else           if (isIdentifierPart(c)) {
            subtype=MOD_LETTER;
            buf.append(c);
          }
 else           if (!symbol) {
            addToken=true;
          }
        }
        if (symbol) {
          if (c == '_' || c == '$' || c == '@') {
            subtype|=MOD_LETTER;
            buf.append(c);
          }
 else           if (isIdentifierSymbol(c)) {
            subtype=MOD_SYMBOL;
            buf.append(c);
          }
 else           if (!letter) {
            addToken=true;
          }
        }
      }
    }
 else     if (type == TYPE_SYMBOL) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_BRACKET) {
      buf.append(c);
      addToken=true;
      reparse=false;
    }
 else     if (type == TYPE_COMMENT) {
      if (subtype == MOD_LINE) {
        if (c == '\n') {
          type=0;
          continue;
        }
      }
 else       if (subtype == MOD_BLOCK) {
        if (l == '*' && c == '/') {
          type=0;
          continue;
        }
      }
    }
 else     if (type == TYPE_INT || type == TYPE_LONG) {
      if (c == '.') {
        type=TYPE_FLOAT;
        buf.append('.');
      }
 else       if (c == 'l' || c == 'L') {
        type=TYPE_LONG;
        addToken=true;
        reparse=false;
      }
 else       if (subtype == MOD_DEC) {
        if (isDigit(c)) {
          buf.append(c);
        }
 else         if (c == 'f' || c == 'F') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else         if (c == 'd' || c == 'D') {
          type=TYPE_FLOAT;
          addToken=true;
          reparse=false;
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_BIN) {
        if (c == 'b' || isBinDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_OCT) {
        if (isOctDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (subtype == MOD_HEX) {
        if (c == 'x' || isHexDigit(c)) {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
    }
 else     if (type == TYPE_FLOAT || type == TYPE_DOUBLE) {
      if (c == 'x') {
        subtype=MOD_HEX;
        buf.append(c);
      }
 else       if (c == 'f' || c == 'F') {
        addToken=true;
        reparse=false;
      }
 else       if (c == 'd' || c == 'D') {
        type=TYPE_DOUBLE;
        addToken=true;
        reparse=false;
      }
 else       if (isDigit(c) || c == '.' || c == 'e') {
        buf.append(c);
      }
 else {
        addToken=true;
      }
    }
 else     if (type == TYPE_STRING) {
      if (c == '""' && buf.length() > 0) {
        buf.append('""');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
 else     if (type == TYPE_CHAR) {
      if (c == '\'' && buf.length() > 0) {
        buf.append('\'');
        addToken=true;
        reparse=false;
      }
 else {
        buf.append(c);
      }
    }
    if (addToken) {
      prev=this.addToken(prev,buf,type | subtype,lineNumber,start,i);
      addToken=false;
      type=0;
      if (reparse) {
        i--;
      }
 else {
        reparse=true;
      }
    }
  }
  if (buf.length() > 0) {
    this.addToken(prev,buf,type,lineNumber,start,i);
  }
  this.first=first.next();
}",0.9945872801082544
84076,"@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2) && !this.isInMode(TUPLE_END)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if ((token.isType(IToken.TYPE_IDENTIFIER) || token.equals(""String_Node_Str"")) && !token.next().isType(IToken.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS | VARIABLE;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(VARIABLE)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      boolean flag=next.equals(""String_Node_Str"");
      if (flag || next.equals(""String_Node_Str"")) {
        ICodePosition pos=token.raw();
        Type type=((ClassAccess)this.value).getType();
        FieldAssign access=new FieldAssign(pos,value,null);
        access.field=new Variable(pos,value,type);
        access.initializer=true;
        this.value=access;
        if (flag) {
          pm.skip();
          pm.pushParser(new ExpressionParser(this.context,access));
        }
        return true;
      }
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (""String_Node_Str"".equals(value)) {
      String name=null;
      IValue instance=null;
      if (this.value instanceof ClassAccess) {
        name=((ClassAccess)this.value).getName();
      }
 else       if (this.value instanceof FieldAccess) {
        FieldAccess fa=(FieldAccess)this.value;
        name=fa.getName();
        instance=fa.getValue();
      }
 else {
        return false;
      }
      FieldAssign assign=new FieldAssign(this.value.getPosition(),name,instance);
      this.value=assign;
      pm.pushParser(new ExpressionParser(this.context,assign));
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET) && !next.isType(IToken.TYPE_SYMBOL)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,this);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}","@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2) && !this.isInMode(TUPLE_END)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if ((token.isType(IToken.TYPE_IDENTIFIER) || token.equals(""String_Node_Str"")) && !token.next().isType(IToken.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS | VARIABLE;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(VARIABLE)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      if (token.next().equals(""String_Node_Str"")) {
        ICodePosition pos=token.raw();
        Type type=((ClassAccess)this.value).getType();
        FieldAssign access=new FieldAssign(pos,value,null);
        access.field=new Variable(pos,value,type);
        access.initializer=true;
        this.value=access;
        pm.skip();
        pm.pushParser(new ExpressionParser(this.context,access));
        return true;
      }
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (""String_Node_Str"".equals(value)) {
      String name=null;
      IValue instance=null;
      if (this.value instanceof ClassAccess) {
        name=((ClassAccess)this.value).getName();
      }
 else       if (this.value instanceof FieldAccess) {
        FieldAccess fa=(FieldAccess)this.value;
        name=fa.getName();
        instance=fa.getValue();
      }
 else {
        return false;
      }
      FieldAssign assign=new FieldAssign(this.value.getPosition(),name,instance);
      this.value=assign;
      pm.pushParser(new ExpressionParser(this.context,assign));
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET) && !next.isType(IToken.TYPE_SYMBOL)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,this);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}",0.9878704970360236
84077,"@Override public default void setTypes(List<Type> types){
  int index=0;
  for (  Type type : types) {
    this.addParameter(new Parameter(""String_Node_Str"" + index,type,0));
  }
}","@Override public default void setTypes(List<Type> types){
  int index=0;
  for (  Type type : types) {
    this.addParameter(new Parameter(index,""String_Node_Str"" + index,type,0));
    index++;
  }
}",0.949868073878628
84078,"@Override public default void addType(Type type){
  int index=this.getParameters().size();
  this.addParameter(new Parameter(""String_Node_Str"" + index,type,0));
}","@Override public default void addType(Type type){
  int index=this.getParameters().size();
  this.addParameter(new Parameter(index,""String_Node_Str"" + index,type,0));
}",0.9818181818181818
84079,"public default void addParameter(Parameter parameter){
  this.getParameters().add(parameter);
}","public default void addParameter(Parameter parameter){
  List<Parameter> parameters=this.getParameters();
  parameter.index=parameters.size();
  parameters.add(parameter);
}",0.7089552238805971
84080,"@Override public void write(MethodVisitor visitor){
  if (this.instance != null) {
    this.instance.write(visitor);
  }
  int opcode;
  if (this.field.hasModifier(Modifiers.STATIC)) {
    opcode=Opcodes.GETSTATIC;
  }
 else {
    opcode=Opcodes.GETFIELD;
  }
  String owner=this.field.getTheClass().getInternalName();
  String name=this.field.getName();
  String desc=this.field.getDescription();
  visitor.visitFieldInsn(opcode,owner,name,desc);
}","@Override public void write(MethodVisitor visitor){
  if (this.instance != null) {
    this.instance.write(visitor);
  }
  if (this.field instanceof Parameter) {
    visitor.visitIntInsn(Opcodes.ALOAD,((Parameter)this.field).index);
    return;
  }
  int opcode;
  if (this.field.hasModifier(Modifiers.STATIC)) {
    opcode=Opcodes.GETSTATIC;
  }
 else {
    opcode=Opcodes.GETFIELD;
  }
  String owner=this.field.getTheClass().getInternalName();
  String name=this.field.getName();
  String desc=this.field.getDescription();
  visitor.visitFieldInsn(opcode,owner,name,desc);
}",0.8752436647173489
84081,"@Override public int getSignatureMatch(String name,Type type,Type... argumentTypes){
  if (name.equals(this.name)) {
    int pOff=0;
    int match=1;
    int len=argumentTypes.length;
    List<Parameter> parameters=this.parameters;
    if (type != null && (this.modifiers & Modifiers.IMPLICIT) != 0) {
      if (len != parameters.size() - 1) {
        return 0;
      }
      Type t2=parameters.get(0).type;
      if (type.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(type,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
      pOff=1;
    }
 else     if (len != argumentTypes.length) {
      return 0;
    }
    for (int i=0; i < len; i++) {
      Type t1=parameters.get(i + pOff).type;
      Type t2=argumentTypes[i];
      if (t1.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(t1,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
    }
    return match;
  }
  return 0;
}","@Override public int getSignatureMatch(String name,Type type,Type... argumentTypes){
  if (name.equals(this.name)) {
    int pOff=0;
    int match=1;
    int len=argumentTypes.length;
    List<Parameter> parameters=this.parameters;
    if (type != null && (this.modifiers & Modifiers.IMPLICIT) != 0) {
      if (len != parameters.size() - 1) {
        return 0;
      }
      Type t2=parameters.get(0).type;
      if (type.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(type,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
      pOff=1;
    }
 else     if (len != this.parameters.size()) {
      return 0;
    }
    for (int i=0; i < len; i++) {
      Type t1=parameters.get(i + pOff).type;
      Type t2=argumentTypes[i];
      if (t1.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(t1,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
    }
    return match;
  }
  return 0;
}",0.9782157676348548
84082,"public Parameter(String name,Type type,int modifiers,char seperator){
  super(null,name,type,modifiers);
  this.seperator=seperator;
}","public Parameter(int index,String name,Type type,int modifiers,char seperator){
  super(null,name,type,modifiers);
  this.index=index;
  this.seperator=seperator;
}",0.8993288590604027
84083,"@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(IToken.TYPE_IDENTIFIER) && !token.next().isType(Token.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,call);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}","@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(IToken.TYPE_IDENTIFIER) && !token.next().isType(Token.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET) && !next.isType(IToken.TYPE_SYMBOL)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,call);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}",0.99575571799104
84084,"public static IAccess resolve(IContext context,IAccess access){
  List<Marker> markers=CompilerState.RESOLVE.file.markers;
  LinkedList<IAccess> chain=getCallChain(access);
  IAccess a=null;
  ListIterator<IAccess> iterator=chain.listIterator();
  while (iterator.hasNext()) {
    IContext context1=context;
    IAccess iaccess=iterator.next();
    if (a != null) {
      context1=a.getType();
    }
 else {
      IValue value=iaccess.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (!iaccess.resolve(context1,context)) {
      IAccess iaccess2=iaccess.resolve2(context1,context);
      if (iaccess2 == iaccess) {
        markers.add(iaccess.getResolveError());
        return access;
      }
      a=iaccess2;
      continue;
    }
    a=iaccess;
  }
  return access;
}","public static IAccess resolve(IContext context,IAccess access){
  List<Marker> markers=CompilerState.RESOLVE.file.markers;
  LinkedList<IAccess> chain=getCallChain(access);
  IAccess a=null;
  ListIterator<IAccess> iterator=chain.listIterator();
  while (iterator.hasNext()) {
    IContext context1=context;
    IAccess iaccess=iterator.next();
    if (a != null) {
      context1=a.getType();
      iaccess.setValue(a);
    }
 else {
      IValue value=iaccess.getValue();
      if (value != null) {
        context1=value.getType();
      }
    }
    if (!iaccess.resolve(context1,context)) {
      IAccess iaccess2=iaccess.resolve2(context1,context);
      if (iaccess2 == iaccess) {
        markers.add(iaccess.getResolveError());
        return access;
      }
      a=iaccess2;
      continue;
    }
    a=iaccess;
  }
  return a;
}",0.9806529625151148
84085,"@Override public IAccess applyState(CompilerState state,IContext context){
  super.applyState(state,context);
  this.arguments.replaceAll(v -> v.applyState(state,context));
  if (state == CompilerState.RESOLVE) {
    return AccessResolver.resolve(context,this);
  }
 else   if (this.instance != null) {
    this.instance=this.instance.applyState(state,context);
  }
  return this;
}","@Override public IAccess applyState(CompilerState state,IContext context){
  if (state == CompilerState.RESOLVE) {
    return AccessResolver.resolve(context,this);
  }
 else {
    super.applyState(state,context);
    if (this.instance != null) {
      this.instance=this.instance.applyState(state,context);
    }
    this.arguments.replaceAll(v -> v.applyState(state,context));
    return this;
  }
}",0.6982097186700768
84086,"@Override public void setValue(IValue value){
  if (this.isSugarCall) {
    this.arguments.add(value);
  }
 else {
    this.instance=value;
  }
}","@Override public void setValue(IValue value){
  this.instance=value;
}",0.6511627906976745
84087,"@Override public int getSignatureMatch(String name,Type type,Type... argumentTypes){
  if (name.equals(this.name)) {
    int pOff=0;
    int match=1;
    int len=argumentTypes.length;
    List<Parameter> parameters=this.parameters;
    if (type != null && (this.modifiers & Modifiers.IMPLICIT) != 0) {
      if (len != parameters.size() - 1) {
        return 0;
      }
      Type t2=parameters.get(0).type;
      if (type.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(type,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
      pOff=1;
    }
 else     if (len != this.parameters.size()) {
      return 0;
    }
    for (int i=0; i < len; i++) {
      Type t1=parameters.get(i + pOff).type;
      Type t2=argumentTypes[i];
      if (t1.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(t1,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
    }
    return match;
  }
  return 0;
}","@Override public int getSignatureMatch(String name,Type type,Type... argumentTypes){
  if (name.equals(this.qualifiedName)) {
    int pOff=0;
    int match=1;
    int len=argumentTypes.length;
    List<Parameter> parameters=this.parameters;
    if (type != null && (this.modifiers & Modifiers.IMPLICIT) != 0) {
      if (len != parameters.size() - 1) {
        return 0;
      }
      Type t2=parameters.get(0).type;
      if (type.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(type,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
      pOff=1;
    }
 else     if (len != this.parameters.size()) {
      return 0;
    }
    for (int i=0; i < len; i++) {
      Type t1=parameters.get(i + pOff).type;
      Type t2=argumentTypes[i];
      if (t1.equals(t2)) {
        match+=2;
      }
 else       if (Type.isSuperType(t1,t2)) {
        match+=1;
      }
 else {
        return 0;
      }
    }
    return match;
  }
  return 0;
}",0.9943269726663228
84088,"@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(IToken.TYPE_IDENTIFIER) && !token.next().isType(Token.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET) && !next.isType(IToken.TYPE_SYMBOL)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,call);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}","@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0 || ""String_Node_Str"".equals(value) || ""String_Node_Str"".equals(value) && !this.isInMode(PARAMETERS_2)) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new SuperValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(IToken.TYPE_IDENTIFIER) && !token.next().isType(Token.TYPE_OPEN_BRACKET)) {
      this.mode=ACCESS;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
    if (this.lazy && this.value != null) {
      pm.popParser(true);
      return true;
    }
    this.mode=DOT_ACCESS;
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.isType(IToken.TYPE_IDENTIFIER)) {
      IToken next=token.next();
      if (next.isType(IToken.TYPE_OPEN_BRACKET)) {
        MethodCall call=new MethodCall(token,this.value,value);
        this.value=call;
        this.mode=PARAMETERS;
        return true;
      }
 else       if (!next.isType(IToken.TYPE_IDENTIFIER) && !next.isType(IToken.TYPE_CLOSE_BRACKET) && !next.isType(IToken.TYPE_SYMBOL)) {
        MethodCall call=new MethodCall(token,this.value,value);
        call.setSugar(true);
        this.value=call;
        ExpressionParser parser=new ExpressionParser(this.context,this);
        parser.lazy=true;
        pm.pushParser(parser);
        return true;
      }
 else {
        FieldAccess access=new FieldAccess(token,this.value,value);
        this.value=access;
        this.mode=ACCESS;
        return true;
      }
    }
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}",0.9990608123972764
84089,"@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      pm.pushParser(new TypeParser(this.context,this),true);
      this.mode=ACCESS;
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
 else     if (token.next().equals(""String_Node_Str"")) {
      this.mode=DOT_ACCESS;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.mode=SUGARACCESS;
    }
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.next().equals(""String_Node_Str"")) {
      MethodCall call=new MethodCall(token,this.value,value);
      this.value=call;
      this.mode=PARAMETERS;
      return true;
    }
 else {
      FieldAccess access=new FieldAccess(token,this.value,value);
      this.value=access;
      this.mode=VALUE;
      return true;
    }
  }
  if (this.isInMode(SUGARACCESS)) {
    MethodCall call=new MethodCall(token,this.value,value);
    call.setSugarCall(true);
    this.value=call;
    this.mode=0;
    pm.pushTryParser(new ExpressionParser(this.context,call),token.next());
    return true;
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}","@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  if (this.mode == 0) {
    pm.popParser(true);
    return true;
  }
  if (this.isInMode(VALUE)) {
    if (this.parsePrimitive(value,token)) {
      this.mode=ACCESS;
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=ACCESS;
      this.value=new ThisValue(token,this.context.getThisType());
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=TUPLE_END;
      this.value=new TupleValue();
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=VALUE_2;
      this.value=new StatementList(token);
      if (!token.next().equals(""String_Node_Str"")) {
        pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value,true));
      }
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      ConstructorCall call=new ConstructorCall(token);
      this.mode=PARAMETERS;
      this.value=call;
      pm.pushParser(new TypeParser(this.context,call));
      return true;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.mode=ACCESS;
      pm.pushParser(new TypeParser(this.context,this),true);
      return true;
    }
    this.mode=ACCESS;
  }
  if (this.isInMode(VALUE_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(TUPLE_END)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.isInMode(STATEMENT)) {
    if (""String_Node_Str"".equals(value)) {
      ReturnStatement statement=new ReturnStatement(token);
      this.value=statement;
      pm.pushParser(new ExpressionParser(this.context,statement));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      IfStatement statement=new IfStatement(token);
      this.value=statement;
      pm.pushParser(new IfStatementParser(this.context,statement));
      return true;
    }
  }
  if (this.isInMode(ACCESS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=DOT_ACCESS;
      return true;
    }
 else     if (token.next().equals(""String_Node_Str"")) {
      this.mode=DOT_ACCESS;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.mode=SUGARACCESS;
    }
  }
  if (this.isInMode(DOT_ACCESS)) {
    if (token.next().equals(""String_Node_Str"")) {
      MethodCall call=new MethodCall(token,this.value,value);
      this.value=call;
      this.mode=PARAMETERS;
      return true;
    }
 else {
      FieldAccess access=new FieldAccess(token,this.value,value);
      this.value=access;
      this.mode=VALUE;
      return true;
    }
  }
  if (this.isInMode(SUGARACCESS)) {
    MethodCall call=new MethodCall(token,this.value,value);
    call.setSugarCall(true);
    this.value=call;
    this.mode=0;
    pm.pushTryParser(new ExpressionParser(this.context,call),token.next());
    return true;
  }
  if (this.isInMode(PARAMETERS)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionListParser(this.context,(IValueList)this.value));
      this.mode=PARAMETERS_2;
      return true;
    }
  }
  if (this.isInMode(PARAMETERS_2)) {
    if (""String_Node_Str"".equals(value)) {
      this.value.expandPosition(token);
      this.mode=ACCESS;
      return true;
    }
  }
  if (this.value != null) {
    this.value.expandPosition(token);
    pm.popParser(true);
    return true;
  }
  return false;
}",0.9771259418729816
84090,"@Override public Type getType(){
  return Type.CLASS;
}","@Override public Type getType(){
  return this.type;
}",0.8807339449541285
84091,"@Override public CompilationUnit applyState(CompilerState state,IContext context){
  if (state == CompilerState.TOKENIZE) {
    this.tokens=Dyvilc.parser.tokenize(this.getFile());
    return this;
  }
 else   if (state == CompilerState.PARSE) {
    Dyvilc.parser.pushParser(new CompilationUnitParser(this));
    Dyvilc.parser.parse(this.getFile(),this.tokens);
    this.tokens=null;
    return this;
  }
 else   if (state == CompilerState.DEBUG) {
    List<Marker> markers=this.getFile().markers;
    int size=markers.size();
    if (size > 0) {
      System.out.println(""String_Node_Str"" + this.name + ""String_Node_Str""+ size);
      for (      Marker marker : this.getFile().markers) {
        marker.print(System.err);
      }
    }
    return this;
  }
 else   if (state == CompilerState.RESOLVE_TYPES) {
switch (this.pack.check(this.packageDecl)) {
case 0:
      break;
case 1:
    state.addMarker(new SemanticError(new CodePosition((CodeFile)this.position,1,0,1),""String_Node_Str"",""String_Node_Str"" + this.pack.name + ""String_Node_Str""));
  break;
case 2:
state.addMarker(new SemanticError(this.packageDecl.getPosition(),""String_Node_Str"",""String_Node_Str"" + this.pack.name + ""String_Node_Str""));
break;
case 3:
state.addMarker(new SemanticError(this.packageDecl.getPosition(),""String_Node_Str"",""String_Node_Str""));
break;
}
for (IImport i : this.imports) {
i.applyState(state,this);
}
}
this.classes.replaceAll(c -> c.applyState(state,this));
return this;
}","@Override public CompilationUnit applyState(CompilerState state,IContext context){
  if (state == CompilerState.TOKENIZE) {
    this.tokens=Dyvilc.parser.tokenize(this.getFile());
    return this;
  }
 else   if (state == CompilerState.PARSE) {
    Dyvilc.parser.pushParser(new CompilationUnitParser(this));
    Dyvilc.parser.parse(this.getFile(),this.tokens);
    this.tokens=null;
    return this;
  }
 else   if (state == CompilerState.DEBUG) {
synchronized (this) {
      List<Marker> markers=this.getFile().markers;
      int size=markers.size();
      if (size > 0) {
        System.out.println(""String_Node_Str"" + this.name + ""String_Node_Str""+ size);
        for (        Marker marker : this.getFile().markers) {
          marker.print(System.err);
        }
      }
    }
    return this;
  }
 else   if (state == CompilerState.RESOLVE_TYPES) {
switch (this.pack.check(this.packageDecl)) {
case 0:
      break;
case 1:
    state.addMarker(new SemanticError(new CodePosition((CodeFile)this.position,1,0,1),""String_Node_Str"",""String_Node_Str"" + this.pack.name + ""String_Node_Str""));
  break;
case 2:
state.addMarker(new SemanticError(this.packageDecl.getPosition(),""String_Node_Str"",""String_Node_Str"" + this.pack.name + ""String_Node_Str""));
break;
case 3:
state.addMarker(new SemanticError(this.packageDecl.getPosition(),""String_Node_Str"",""String_Node_Str""));
break;
}
for (IImport i : this.imports) {
i.applyState(state,this);
}
}
this.classes.replaceAll(c -> c.applyState(state,this));
return this;
}",0.98453261600538
84092,"@Override public ClassAccess applyState(CompilerState state,IContext context){
  this.type=this.type.applyState(state,context);
  return this;
}","@Override public IValue applyState(CompilerState state,IContext context){
  if (state == CompilerState.RESOLVE_TYPES) {
    this.type=this.type.resolve(context);
  }
 else   if (state == CompilerState.RESOLVE) {
    if (!this.type.isResolved()) {
      String name=this.type.name;
      IField field=context.resolveField(name);
      if (field != null) {
        FieldAccess access=new FieldAccess(this.position,null,name);
        access.field=field;
        return access;
      }
      IMethod method=context.resolveMethod(name,Type.EMPTY_TYPES);
      if (method != null) {
        MethodCall call=new MethodCall(this.position,null,name);
        call.method=method;
        return call;
      }
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + name + ""String_Node_Str""));
    }
  }
  return this;
}",0.2078189300411522
84093,"@Override public FieldAccess applyState(CompilerState state,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.applyState(state,context);
  }
  if (state == CompilerState.RESOLVE) {
    if (this.instance != null) {
      context=this.instance.getType();
    }
    this.field=context.resolveField(this.name);
    if (this.field == null) {
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
 else     if (this.field.hasModifier(Modifiers.STATIC) && this.instance instanceof ThisValue) {
      state.addMarker(new Warning(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      this.instance=null;
    }
  }
  return this;
}","@Override public IValue applyState(CompilerState state,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.applyState(state,context);
  }
  if (state == CompilerState.RESOLVE) {
    if (this.instance != null) {
      context=this.instance.getType();
    }
    this.field=context.resolveField(this.name);
    if (this.field == null) {
      IMethod method=context.resolveMethod(this.name,Type.EMPTY_TYPES);
      if (method != null) {
        MethodCall call=new MethodCall(this.position,this.instance,this.name);
        call.method=method;
        call.isSugarCall=true;
        return call;
      }
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
 else     if (this.field.hasModifier(Modifiers.STATIC) && this.instance instanceof ThisValue) {
      state.addMarker(new Warning(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
      this.instance=null;
    }
  }
  return this;
}",0.8352668213457076
84094,"@Override public Type getType(){
  return this.descriptor.getType();
}","@Override public Type getType(){
  return this.method.getType();
}",0.8970588235294118
84095,"@Override public IValue applyState(CompilerState state,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.applyState(state,context);
  }
  super.applyState(state,context);
  if (state == CompilerState.RESOLVE) {
    if (this.instance != null) {
      context=this.instance.getType();
    }
    try {
      this.descriptor=context.resolveMethod(this.name,this.getTypes());
    }
 catch (    Exception ex) {
    }
    if (this.descriptor == null) {
      IField field=context.resolveField(this.name);
      if (field != null) {
        FieldAccess fieldAccess=new FieldAccess(this.position,this.instance,this.name);
        fieldAccess.field=field;
        fieldAccess.isSugarAccess=this.isSugarCall;
        return fieldAccess;
      }
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
  }
  return this;
}","@Override public IValue applyState(CompilerState state,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.applyState(state,context);
  }
  super.applyState(state,context);
  if (state == CompilerState.RESOLVE) {
    if (this.instance != null) {
      context=this.instance.getType();
    }
    try {
      this.method=context.resolveMethod(this.name,this.getTypes());
    }
 catch (    Exception ex) {
    }
    if (this.method == null) {
      IField field=context.resolveField(this.name);
      if (field != null) {
        FieldAccess fieldAccess=new FieldAccess(this.position,this.instance,this.name);
        fieldAccess.field=field;
        fieldAccess.isSugarAccess=this.isSugarCall;
        return fieldAccess;
      }
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
  }
  return this;
}",0.982122905027933
84096,"@Override public Type applyState(CompilerState state,IContext context){
  if (this.position == null) {
    return this;
  }
  if (state == CompilerState.RESOLVE_TYPES) {
    if (this.theClass == null) {
switch (this.name) {
case ""String_Node_Str"":
        return VOID;
case ""String_Node_Str"":
      return INT;
case ""String_Node_Str"":
    return LONG;
case ""String_Node_Str"":
  return FLOAT;
case ""String_Node_Str"":
return DOUBLE;
case ""String_Node_Str"":
return CHAR;
case ""String_Node_Str"":
return BOOL;
}
this.theClass=context.resolveClass(this.name);
if (this.theClass == null) {
state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
}
}
}
return this;
}","@Override public Type applyState(CompilerState state,IContext context){
  if (this.position == null) {
    return this;
  }
  if (state == CompilerState.RESOLVE_TYPES) {
    Type type=this.resolve(context);
    if (!type.isResolved()) {
      state.addMarker(new SemanticError(this.position,""String_Node_Str"" + this.name + ""String_Node_Str""));
    }
    return type;
  }
  return this;
}",0.5279560036663611
84097,"/** 
 * Parses the given   {@link IToken} {@code token}. You can override this method to sort out comments.
 * @see Parser#parse(ParserManager,String,IToken)
 * @param value the value of the token
 * @param token the token
 * @throws SyntaxError syntax errors
 */
public void parseToken(String value,IToken token) throws SyntaxError {
  boolean parsed;
  try {
    parsed=this.currentParser.parse(this,value,token);
  }
 catch (  SyntaxError error) {
    throw error;
  }
catch (  Exception ex) {
    throw new SyntaxError(""String_Node_Str"" + value + ""String_Node_Str""+ ex.getMessage());
  }
  if (!parsed) {
    throw new SyntaxError(""String_Node_Str"" + value + ""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * Parses the given   {@link IToken} {@code token}. You can override this method to sort out comments.
 * @see Parser#parse(ParserManager,String,IToken)
 * @param value the value of the token
 * @param token the token
 * @throws SyntaxError syntax errors
 */
public void parseToken(String value,IToken token) throws SyntaxError {
  boolean parsed;
  try {
    parsed=this.currentParser.parse(this,value,token);
  }
 catch (  SyntaxError error) {
    throw error;
  }
catch (  Exception ex) {
    String message=ex.getMessage();
    if (message == null) {
      message=ex.getClass().getName();
    }
    throw new SyntaxError(""String_Node_Str"" + value + ""String_Node_Str""+ message);
  }
  if (!parsed) {
    throw new SyntaxError(""String_Node_Str"" + value + ""String_Node_Str"",""String_Node_Str"");
  }
}",0.914021164021164
84098,"@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  int i=0;
  if (this.isInMode(TYPE)) {
    if ((i=Modifiers.parseModifier(value)) != -1) {
      this.field.addModifier(i);
      this.method.addModifier(i);
      return true;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      if (token.next().equals(""String_Node_Str"")) {
        this.mode=FIELD;
        this.field.setName(value);
        this.classBody.addVariable(field);
        return true;
      }
 else       if (token.next().equals(""String_Node_Str"")) {
        this.mode=FIELD;
        this.field.setName(value);
        this.classBody.addVariable(this.field);
        this.reset();
        return true;
      }
 else       if (token.next().isType(Token.TYPE_BRACKET)) {
        this.mode=METHOD;
        this.method.setName(value);
        this.classBody.addMethod(this.method);
        return true;
      }
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
    pm.pushParser(new TypeParser(this),token);
    return true;
  }
  if (this.isInMode(FIELD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionParser(this.theClass,this.field));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
  }
  if (this.isInMode(METHOD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ParameterListParser(this.method));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=POST_METHOD;
      return true;
    }
  }
  if (this.isInMode(POST_METHOD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ThrowsDeclParser(this.method));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionParser(this.method,this.method,true));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
  }
  return false;
}","@Override public boolean parse(ParserManager pm,String value,IToken token) throws SyntaxError {
  int i=0;
  if (""String_Node_Str"".equals(value)) {
    pm.popParser(token);
    return true;
  }
  if (this.isInMode(TYPE)) {
    if ((i=Modifiers.parseModifier(value)) != -1) {
      this.field.addModifier(i);
      this.method.addModifier(i);
      return true;
    }
 else     if (token.isType(Token.TYPE_IDENTIFIER)) {
      if (token.next().equals(""String_Node_Str"")) {
        this.mode=FIELD;
        this.field.setName(value);
        this.classBody.addVariable(field);
        return true;
      }
 else       if (token.next().equals(""String_Node_Str"")) {
        this.mode=FIELD;
        this.field.setName(value);
        this.classBody.addVariable(this.field);
        this.reset();
        return true;
      }
 else       if (token.next().isType(Token.TYPE_BRACKET)) {
        this.mode=METHOD;
        this.method.setName(value);
        this.classBody.addMethod(this.method);
        return true;
      }
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
    pm.pushParser(new TypeParser(this),token);
    return true;
  }
  if (this.isInMode(FIELD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionParser(this.theClass,this.field));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
  }
  if (this.isInMode(METHOD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ParameterListParser(this.method));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.mode=POST_METHOD;
      return true;
    }
  }
  if (this.isInMode(POST_METHOD)) {
    if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ThrowsDeclParser(this.method));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      pm.pushParser(new ExpressionParser(this.method,this.method,true));
      return true;
    }
 else     if (""String_Node_Str"".equals(value)) {
      this.reset();
      return true;
    }
  }
  return false;
}",0.9792313201241346
84099,"@Override public boolean parse(ParserManager jcp,String value,IToken token) throws SyntaxError {
  if (this.isInMode(MODIFIERS)) {
    int i=0;
    if ((i=Modifiers.parseClassModifier(value)) != -1) {
      this.modifiers|=i;
      return true;
    }
 else     if ((i=Classes.parse(value)) != -1) {
      this.theClassDecl=AbstractClass.create(i);
      this.theClassDecl.setModifiers(this.modifiers);
      this.unit.addClass(this.theClassDecl);
      this.modifiers=0;
      this.mode=NAME;
      return true;
    }
  }
  if (this.isInMode(NAME)) {
    if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.theClassDecl.setName(value);
      this.mode=EXTENDS | BODY;
      return true;
    }
  }
  if (this.isInMode(EXTENDS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=SUPERCLASSES;
      return true;
    }
  }
  if (this.isInMode(SUPERCLASSES)) {
    if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.theClassDecl.addSuperClass(this.unit.resolveClass(value));
      return true;
    }
  }
  if (this.isInMode(BODY)) {
    if (""String_Node_Str"".equals(value)) {
      jcp.pushParser(new ClassBodyParser(this.theClassDecl));
      this.mode=BODY_END;
      return true;
    }
  }
  if (this.isInMode(BODY_END)) {
    if (""String_Node_Str"".equals(value)) {
      jcp.popParser();
      this.mode=0;
      return true;
    }
  }
  return false;
}","@Override public boolean parse(ParserManager jcp,String value,IToken token) throws SyntaxError {
  if (this.isInMode(MODIFIERS)) {
    int i=0;
    if ((i=Modifiers.parseClassModifier(value)) != -1) {
      this.modifiers|=i;
      return true;
    }
 else     if ((i=Classes.parse(value)) != -1) {
      this.theClassDecl=AbstractClass.create(i);
      this.theClassDecl.setModifiers(this.modifiers);
      this.unit.addClass(this.theClassDecl);
      this.modifiers=0;
      this.mode=NAME;
      return true;
    }
  }
  if (this.isInMode(NAME)) {
    if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.theClassDecl.setName(value);
      this.mode=EXTENDS | BODY;
      return true;
    }
  }
  if (this.isInMode(EXTENDS)) {
    if (""String_Node_Str"".equals(value)) {
      this.mode=SUPERCLASSES;
      return true;
    }
  }
  if (this.isInMode(SUPERCLASSES)) {
    if (token.isType(Token.TYPE_IDENTIFIER)) {
      this.theClassDecl.addSuperClass(this.unit.resolveClass(value));
      return true;
    }
  }
  if (this.isInMode(BODY)) {
    if (""String_Node_Str"".equals(value)) {
      jcp.pushParser(new ClassBodyParser(this.theClassDecl));
      this.mode=BODY_END;
      return true;
    }
  }
  if (this.isInMode(BODY_END)) {
    if (""String_Node_Str"".equals(value)) {
      jcp.popParser();
      return true;
    }
  }
  return false;
}",0.9930121368150056
84100,"@Override public void toString(String prefix,StringBuilder buffer){
  this.packageDecl.toString(""String_Node_Str"",buffer);
  buffer.append('\n');
  if (Formatting.Package.newLine) {
    buffer.append('\n');
  }
  for (  IImport iimport : this.imports) {
    iimport.toString(""String_Node_Str"",buffer);
    buffer.append('\n');
  }
  if (Formatting.Import.newLine) {
    buffer.append('\n');
  }
  for (  IClass iclass : this.classes) {
    iclass.toString(""String_Node_Str"",buffer);
    if (Formatting.Class.newLine) {
      buffer.append('\n');
    }
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  this.packageDecl.toString(""String_Node_Str"",buffer);
  buffer.append('\n');
  if (Formatting.Package.newLine) {
    buffer.append('\n');
  }
  if (!this.imports.isEmpty()) {
    for (    IImport iimport : this.imports) {
      iimport.toString(""String_Node_Str"",buffer);
      buffer.append('\n');
    }
    if (Formatting.Import.newLine) {
      buffer.append('\n');
    }
  }
  for (  IClass iclass : this.classes) {
    iclass.toString(""String_Node_Str"",buffer);
    if (Formatting.Class.newLine) {
      buffer.append('\n');
    }
  }
}",0.9460154241645244
84101,"@Override public Field applyState(CompilerState state){
  this.value=this.value.applyState(state);
  return this;
}","@Override public Field applyState(CompilerState state){
  if (this.value != null) {
    this.value=this.value.applyState(state);
  }
  return this;
}",0.8712121212121212
84102,public List<Parameter> getParameters();,"public Map<String,Parameter> getParameters();",0.8333333333333334
84103,"public Map<String,Parameter> getParameters(){
  return this.parameters;
}","@Override public Map<String,Parameter> getParameters(){
  return this.parameters;
}",0.935897435897436
84104,"public List<ThrowsDecl> getThrowsDecl(){
  return this.throwsDecl;
}","public List<ThrowsDecl> getThrowsDecl(){
  return this.throwsDeclarations;
}",0.9444444444444444
84105,"@Override public boolean addThrowsDecl(ThrowsDecl throwsDecl){
  return this.throwsDecl.add(throwsDecl);
}","@Override public boolean addThrowsDecl(ThrowsDecl throwsDecl){
  return this.throwsDeclarations.add(throwsDecl);
}",0.9636363636363636
84106,"public void setException(String exception) throws SyntaxException {
  if (this.exception != null) {
    throw new SyntaxException(""String_Node_Str"",exception);
  }
  this.exception=exception;
}","public void setException(String exception){
  this.exception=exception;
}",0.5488721804511278
84107,"@Override public void parse(ParserManager jcp,String value,IToken token) throws SyntaxException {
switch (value) {
case ""String_Node_Str"":
    this.mode=NAME;
  this.theClassDecl=new dyvil.tools.compiler.ast.classes.Class();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new Interface();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new dyvil.tools.compiler.ast.classes.Enum();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new AnnotationClass();
return;
case ""String_Node_Str"":
this.mode=SUPERCLASSES;
return;
case ""String_Node_Str"":
this.theClassDecl.setModifiers(this.modifiers);
jcp.pushParser(new ClassBodyParser());
return;
}
switch (this.mode) {
case NAME:
this.theClassDecl.setName(value);
case SUPERCLASSES:
this.theClassDecl.addSuperClass(value);
}
}","@Override public void parse(ParserManager jcp,String value,IToken token) throws SyntaxException {
switch (value) {
case ""String_Node_Str"":
    this.mode=NAME;
  this.theClassDecl=new dyvil.tools.compiler.ast.classes.Class();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new Interface();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new dyvil.tools.compiler.ast.classes.Enum();
return;
case ""String_Node_Str"":
this.mode=NAME;
this.theClassDecl=new AnnotationClass();
return;
case ""String_Node_Str"":
this.mode=SUPERCLASSES;
return;
case ""String_Node_Str"":
this.theClassDecl.setModifiers(this.modifiers);
jcp.pushParser(new ClassBodyParser(this.theClassDecl));
return;
}
switch (this.mode) {
case NAME:
this.theClassDecl.setName(value);
case SUPERCLASSES:
this.theClassDecl.addSuperClass(value);
}
}",0.9897528631705846
84108,"public Template(DyvilCompiler compiler,Package pack,File input,File output){
  super(compiler,pack,input,output);
  this.markers=new MarkerList(I18n.INSTANCE);
}","public Template(DyvilCompiler compiler,Package pack,File input,File output){
  super(compiler,pack,input,output);
  this.markers=new MarkerList(I18n.SYNTAX);
}",0.975
84109,"public ScopeDirective(){
}","public ScopeDirective(){
  this.value=new StringInterpolationExpr();
}",0.5416666666666666
84110,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  super.writeExpression(writer,type);
  if (this.block != null) {
    this.block.writeExpression(writer,Types.VOID);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  if (this.getValue() != null) {
    super.writeExpression(writer,type);
  }
  if (this.block != null) {
    this.block.writeExpression(writer,Types.VOID);
  }
}",0.9182389937106918
84111,"private void parseDyvilArguments(){
  final DyvilLexer sublexer=new DyvilLexer(this.markers,GenSrcSymbols.INSTANCE);
  sublexer.setInterpolationEnd();
  this.useSubLexer(sublexer);
}","private void parseDyvilArguments(){
  final DyvilLexer sublexer=new DyvilLexer(this.markers,DyvilSymbols.INSTANCE);
  sublexer.setInterpolationEnd();
  this.useSubLexer(sublexer);
}",0.9696969696969696
84112,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (this.mode) {
case ELEMENT:
switch (type) {
case BaseSymbols.CLOSE_CURLY_BRACKET:
      pm.popParser(true);
    return;
case Tokens.EOF:
  return;
case Tokens.STRING:
this.directives.add(new ProcessedText(token.stringValue()));
return;
case BaseSymbols.HASH:
this.mode=DIRECTIVE_NAME;
return;
}
return;
case DIRECTIVE_NAME:
switch (type) {
case GenSrcSymbols.TEMPLATE:
pm.pushParser(new TemplateDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IMPORT:
pm.pushParser(new ImportDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IF:
pm.pushParser(new IfDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FOR:
pm.pushParser(new ForDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.VAR:
case GenSrcSymbols.LET:
case GenSrcSymbols.CONST:
pm.pushParser(new VarDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FUNC:
pm.pushParser(new FuncDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case BaseSymbols.OPEN_PARENTHESIS:
case BaseSymbols.OPEN_CURLY_BRACKET:
pm.pushParser(new ScopeDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
if (Tokens.isIdentifier(type)) {
pm.pushParser(new CallDirectiveParser(this.directives),true);
return;
}
pm.report(token,""String_Node_Str"");
}
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (this.mode) {
case ELEMENT:
switch (type) {
case BaseSymbols.CLOSE_CURLY_BRACKET:
      pm.popParser(true);
    return;
case Tokens.EOF:
  return;
case Tokens.STRING:
this.directives.add(new ProcessedText(token.stringValue()));
return;
case BaseSymbols.HASH:
this.mode=DIRECTIVE_NAME;
return;
}
return;
case DIRECTIVE_NAME:
switch (type) {
case GenSrcSymbols.TEMPLATE:
pm.pushParser(new TemplateDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IMPORT:
pm.pushParser(new ImportDirectiveParser(this.template),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.IF:
pm.pushParser(new IfDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FOR:
pm.pushParser(new ForDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.VAR:
case GenSrcSymbols.LET:
case GenSrcSymbols.CONST:
pm.pushParser(new VarDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case GenSrcSymbols.FUNC:
pm.pushParser(new FuncDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
case BaseSymbols.OPEN_PARENTHESIS:
case BaseSymbols.OPEN_CURLY_BRACKET:
pm.pushParser(new ScopeDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
if (Tokens.isIdentifier(type)) {
pm.pushParser(new CallDirectiveParser(this.directives),true);
this.mode=ELEMENT;
return;
}
pm.report(token,""String_Node_Str"");
}
}",0.9936262998993626
84113,"public static <T extends Enum<T>>T getEnumValue(ArgumentList arguments,IParameter parameter,Class<T> type){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
switch (value.valueTag()) {
case IValue.ENUM_ACCESS:
    return Enum.valueOf(type,((EnumValue)value).getInternalName());
case IValue.FIELD_ACCESS:
  if (Types.isSameType(parameter.getCovariantType(),value.getType())) {
    return Enum.valueOf(type,((FieldAccess)value).getName().qualified);
  }
break;
}
return null;
}","public static <T extends Enum<T>>T getEnumValue(ArgumentList arguments,IParameter parameter,Class<T> type){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  try {
switch (value.valueTag()) {
case IValue.ENUM_ACCESS:
      return Enum.valueOf(type,((EnumValue)value).getInternalName());
case IValue.FIELD_ACCESS:
    if (Types.isSameType(parameter.getCovariantType(),value.getType())) {
      return Enum.valueOf(type,((FieldAccess)value).getName().qualified);
    }
}
}
 catch (IllegalArgumentException ignored) {
}
return null;
}",0.9125338142470696
84114,"public static String getStringValue(ArgumentList arguments,IParameter parameter){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  if (value.valueTag() == IValue.STRING) {
    return value.stringValue();
  }
  return null;
}","public static String getStringValue(ArgumentList arguments,IParameter parameter){
  IValue value=arguments.get(parameter);
  if (value == null) {
    value=parameter.getValue();
  }
  return value.stringValue();
}",0.8408163265306122
84115,"private static String replaceMember(IMember member,String value){
  return value.replace(""String_Node_Str"",Markers.getSemantic(""String_Node_Str"" + member.getKind().getName())).replace(""String_Node_Str"",member.getName().toString());
}","private static String replaceMember(IMember member,String value){
  if (value == null) {
    return null;
  }
  return value.replace(""String_Node_Str"",Markers.getSemantic(""String_Node_Str"" + member.getKind().getName())).replace(""String_Node_Str"",member.getName().toString());
}",0.9137254901960784
84116,"@Override public boolean isResolved(){
  return this.method != null;
}","@Override public boolean isResolved(){
  return this.method != null && this.method.getType().isResolved();
}",0.7865168539325843
84117,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
  if (this.genericData != null) {
    this.genericData.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
    if (!this.method.getType().isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.getName()));
    }
  }
  this.arguments.check(markers,context);
  if (this.genericData != null) {
    this.genericData.check(markers,context);
  }
}",0.8515057113187954
84118,"@Override public boolean isResolved(){
  return this.field != null;
}","@Override public boolean isResolved(){
  return this.field != null && this.field.getType().isResolved();
}",0.7885714285714286
84119,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.value != null) {
    this.value.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
}",0.8779220779220779
84120,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.resolveTypes(markers,context);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}",0.8899297423887588
84121,"@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,ArgumentList arguments){
  if (name != this.name && name != null) {
    return;
  }
  final ParameterList parameters=this.getParameters();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod=this.attributes.flags() & Modifiers.INFIX;
  if (receiver == null) {
    if (mod == Modifiers.INFIX) {
      invalid=true;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if (mod != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.getReceiverType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,receiverType,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getCovariantType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.getReceiverType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
switch (partialVarargs) {
case ArgumentList.MISMATCH:
      return;
case ArgumentList.DEFAULT:
    defaults++;
  continue;
default :
varargs+=partialVarargs;
}
}
for (int matchValue : matchValues) {
if (matchValue == IValue.MISMATCH) {
return;
}
}
list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}","@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,ArgumentList arguments){
  if (name != this.name && name != null) {
    return;
  }
  final ParameterList parameters=this.getParameters();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod=this.attributes.flags() & Modifiers.INFIX;
  if (receiver == null) {
    if (mod == Modifiers.INFIX) {
      invalid=true;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if (mod != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.getReceiverType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,receiverType,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX && !parameters.isEmpty()) {
      receiverType=parameters.get(0).getCovariantType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.getReceiverType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
switch (partialVarargs) {
case ArgumentList.MISMATCH:
      return;
case ArgumentList.DEFAULT:
    defaults++;
  continue;
default :
varargs+=partialVarargs;
}
}
for (int matchValue : matchValues) {
if (matchValue == IValue.MISMATCH) {
return;
}
}
list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}",0.995876628731651
84122,"protected void writeArguments(MethodWriter writer,IValue receiver,ArgumentList arguments) throws BytecodeException {
  if (receiver != null && !receiver.isIgnoredClassAccess() && this.hasModifier(Modifiers.INFIX)) {
    arguments.writeValues(writer,this.parameters,1);
    return;
  }
  arguments.writeValues(writer,this.parameters,0);
}","protected void writeArguments(MethodWriter writer,IValue receiver,ArgumentList arguments) throws BytecodeException {
  if (receiver != null && !receiver.isIgnoredClassAccess() && this.hasModifier(Modifiers.INFIX) && !this.parameters.isEmpty()) {
    arguments.writeValues(writer,this.parameters,1);
    return;
  }
  arguments.writeValues(writer,this.parameters,0);
}",0.9573863636363636
84123,"protected void writeReceiver(MethodWriter writer,IValue receiver) throws BytecodeException {
  if (receiver == null) {
    return;
  }
  final int modifiers=this.attributes.flags();
  if ((modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    receiver.writeExpression(writer,this.parameters.get(0).getCovariantType());
    return;
  }
  final IType receiverType=this.enclosingClass.getReceiverType();
  if ((modifiers & Modifiers.STATIC) == 0) {
    receiver.writeNullCheckedExpression(writer,receiverType);
  }
 else {
    receiver.writeExpression(writer,receiverType);
  }
  if (receiver.isIgnoredClassAccess()) {
    final IType type=receiver.getType();
    if (type.hasTag(IType.TYPE_VAR)) {
      type.writeClassExpression(writer,true);
    }
  }
}","protected void writeReceiver(MethodWriter writer,IValue receiver) throws BytecodeException {
  if (receiver == null) {
    return;
  }
  if (this.hasModifier(Modifiers.INFIX) && !this.parameters.isEmpty()) {
    receiver.writeExpression(writer,this.parameters.get(0).getCovariantType());
    return;
  }
  final IType receiverType=this.enclosingClass.getReceiverType();
  if (!this.isStatic()) {
    receiver.writeNullCheckedExpression(writer,receiverType);
  }
 else {
    receiver.writeExpression(writer,receiverType);
  }
  if (receiver.isIgnoredClassAccess()) {
    final IType type=receiver.getType();
    if (type.hasTag(IType.TYPE_VAR)) {
      type.writeClassExpression(writer,true);
    }
  }
}",0.8853809196980096
84124,"@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.attributes.flags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.isStatic()) {
    if (context.hasStaticAccess()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,markers,context);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}","@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.attributes.flags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess() && !parameters.isEmpty()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.isStatic()) {
    if (context.hasStaticAccess()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,markers,context);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}",0.995571302037201
84125,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  if (this.writer != null) {
    this.writer.accept(writer,type);
  }
}",0.7368421052631579
84126,"@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    updateReceiverType(receiver,genericData);
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,context,markers);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}","@Override public IValue checkArguments(MarkerList markers,SourcePosition position,IContext context,IValue receiver,ArgumentList arguments,GenericData genericData){
  final ParameterList parameters=this.getParameters();
  if (receiver != null) {
    final int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && !receiver.isClassAccess()) {
      final IParameter parameter=parameters.get(0);
      final IType paramType=parameter.getCovariantType();
      updateReceiverType(receiver,genericData);
      receiver=TypeChecker.convertValue(receiver,paramType,genericData,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
      updateReceiverType(receiver,genericData);
      for (int i=1, count=parameters.size(); i < count; i++) {
        arguments.checkValue(i - 1,parameters.get(i),genericData,position,markers,context);
      }
      if (genericData != null) {
        this.checkTypeVarsInferred(markers,position,genericData);
      }
      return receiver;
    }
    updateReceiverType(receiver,genericData);
    if ((mod & Modifiers.STATIC) != 0) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (this.getReceiverType().getTheClass() == this.enclosingClass && receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semanticError(position,""String_Node_Str"",this.name));
      }
    }
 else {
      receiver=TypeChecker.convertValue(receiver,this.getReceiverType(),receiver.getType(),markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
    if (receiver != null) {
      updateReceiverType(receiver,genericData);
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      final IType receiverType=this.enclosingClass.getThisType();
      receiver=new ThisExpr(position,receiverType,context,markers);
      if (genericData != null) {
        genericData.setFallbackTypeContext(receiverType);
      }
      if (!this.enclosingClass.isAnonymous()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      }
    }
  }
  for (int i=0, count=parameters.size(); i < count; i++) {
    arguments.checkValue(i,parameters.get(i),genericData,position,markers,context);
  }
  if (genericData != null) {
    this.checkTypeVarsInferred(markers,position,genericData);
  }
  return receiver;
}",0.99361249112846
84127,"protected static IValue resolveMissing(IParameter param,GenericData genericData,SourcePosition position,MarkerList markers,IContext context){
  if (param.isVarargs()) {
    return convertValue(new ArrayExpr(position,EMPTY),param,genericData,markers,context);
  }
  if (param.hasModifier(Modifiers.IMPLICIT)) {
    final IValue implicit=context.resolveImplicit(param.getCovariantType());
    if (implicit != null) {
      return implicit;
    }
  }
  if (param.isDefault()) {
    return new DummyValue(param.getCovariantType(),(writer,type) -> param.writeGetDefaultValue(writer));
  }
  return null;
}","protected static IValue resolveMissing(IParameter param,GenericData genericData,SourcePosition position,MarkerList markers,IContext context){
  if (param.isVarargs()) {
    return convertValue(new ArrayExpr(position,EMPTY),param,genericData,markers,context);
  }
  if (param.isImplicit()) {
    final IValue implicit=context.resolveImplicit(param.getCovariantType().getConcreteType(genericData));
    if (implicit != null) {
      return implicit;
    }
  }
  if (param.isDefault()) {
    return new DummyValue(param.getCovariantType(),(writer,type) -> param.writeGetDefaultValue(writer));
  }
  return null;
}",0.943801652892562
84128,"@Override public IValue resolveImplicit(IType type){
  return type == null ? this.implicitValue : null;
}","@Override public IValue resolveImplicit(IType type){
  return type == null ? this.implicitValue : super.resolveImplicit(type);
}",0.8927038626609443
84129,"private void readTargets(){
  final IAnnotation target=this.theClass.getAnnotation(Annotation.LazyFields.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=EnumSet.noneOf(ElementType.class);
  final ArrayExpr arrayExpr=(ArrayExpr)target.getArguments().get(0,Names.value);
  if (arrayExpr == null) {
    return;
  }
  final ArgumentList values=arrayExpr.getValues();
  final int size=values.size();
  for (int i=0; i < size; i++) {
    final INamed value=(INamed)values.get(i);
    try {
      this.targets.add(ElementType.valueOf(value.getName().qualified));
    }
 catch (    IllegalArgumentException ignored) {
    }
  }
}","private void readTargets(){
  final IAnnotation target=this.theClass.getAnnotation(Annotation.LazyFields.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=EnumSet.noneOf(ElementType.class);
  final IValue argument=target.getArguments().get(0,Names.value);
  if (!(argument instanceof ArrayExpr)) {
    return;
  }
  final ArgumentList values=((ArrayExpr)argument).getValues();
  final int size=values.size();
  for (int i=0; i < size; i++) {
    final INamed value=(INamed)values.get(i);
    try {
      this.targets.add(ElementType.valueOf(value.getName().qualified));
    }
 catch (    IllegalArgumentException ignored) {
    }
  }
}",0.7812018489984591
84130,"@Override public void resolveTypesGenerate(MarkerList markers,IContext context){
  final ClassBody body=this.theClass.getBody();
  final IType classType=this.theClass.getClassType();
  final IType arrayType=new ArrayType(classType,Mutability.IMMUTABLE);
  this.initValuesField(body,arrayType);
  this.initValuesMethod(classType,arrayType);
  this.updateConstructors(classType);
}","@Override public void resolveTypesGenerate(MarkerList markers,IContext context){
  final ClassBody body=this.theClass.getBody();
  final IType classType=this.theClass.getClassType();
  final IType arrayType=new ArrayType(classType,Mutability.IMMUTABLE);
  this.initValuesField(body,arrayType);
  this.initValuesMethod(arrayType);
  this.updateConstructors(classType);
}",0.9866310160427808
84131,"protected void initValuesMethod(IType classType,IType arrayType){
  this.valuesMethod=new CodeMethod(this.theClass,Names.values,arrayType,new FlagModifierSet(Modifiers.PUBLIC | Modifiers.STATIC));
  final IValue valuesFieldAccess=new FieldAccess(this.valuesField);
  final IMethod cloneMethod=IContext.resolveMethod(arrayType,valuesFieldAccess,Name.fromRaw(""String_Node_Str""),ArgumentList.EMPTY);
  final MethodCall cloneCall=new MethodCall(null,valuesFieldAccess,cloneMethod,ArgumentList.EMPTY);
  cloneCall.setGenericData(new GenericData(cloneMethod,classType));
  this.valuesMethod.setValue(cloneCall);
}","protected void initValuesMethod(IType arrayType){
  this.valuesMethod=new CodeMethod(this.theClass,Names.values,arrayType,new FlagModifierSet(Modifiers.PUBLIC | Modifiers.STATIC));
}",0.4613434727503168
84132,"@Override public void addOverride(IMethod method){
}","@Override public void addOverride(IMethod method){
  if (!this.enclosingClass.isSubClassOf(method.getEnclosingClass().getClassType())) {
    return;
  }
  if (this.overrideMethods == null) {
    this.overrideMethods=new IdentityHashSet<>();
  }
  this.overrideMethods.add(method);
}",0.311377245508982
84133,"@Override public boolean overrides(IMethod candidate,ITypeContext typeContext){
  if (candidate.getName() != this.name || this.typeArity() != candidate.typeArity() || candidate.hasModifier(Modifiers.STATIC_FINAL)) {
    return false;
  }
  final ParameterList candidateParameters=candidate.getParameters();
  if (candidateParameters.size() != this.parameters.size()) {
    return false;
  }
  if (this.checkOverride0(candidate)) {
    return true;
  }
  for (int i=0, count=this.parameters.size(); i < count; i++) {
    final IType parType=this.parameters.get(i).getCovariantType().getConcreteType(typeContext);
    final IType candidateParType=candidateParameters.get(i).getCovariantType().getConcreteType(typeContext);
    if (!Types.isSameType(parType,candidateParType)) {
      return false;
    }
  }
  return true;
}","@Override public boolean overrides(IMethod candidate,ITypeContext typeContext){
  if (candidate.getName() != this.name || this.typeArity() != candidate.typeArity() || candidate.hasModifier(Modifiers.STATIC_FINAL)) {
    return false;
  }
  final ParameterList thisParameters=this.getParameters();
  final ParameterList candidateParameters=candidate.getParameters();
  if (candidateParameters.size() != thisParameters.size()) {
    return false;
  }
  if (this.overrideMethods != null && this.overrideMethods.contains(candidate)) {
    return true;
  }
  for (int i=0, count=thisParameters.size(); i < count; i++) {
    final IType parType=thisParameters.get(i).getCovariantType().getConcreteType(typeContext);
    final IType candidateParType=candidateParameters.get(i).getCovariantType().getConcreteType(typeContext);
    if (!Types.isSameType(parType,candidateParType)) {
      return false;
    }
  }
  return true;
}",0.928817451205511
84134,"@Override public void writeAnnotations(TypeAnnotatableVisitor visitor,int typeRef,String typePath){
  this.type.writeAnnotations(visitor,typeRef,typePath + '*');
}","@Override public void writeAnnotations(TypeAnnotatableVisitor visitor,int typeRef,String typePath){
  IType.writeAnnotations(this.type,visitor,typeRef,typePath + '*');
}",0.9457831325301204
84135,"private void printMarkers(GenSrc gensrc,MarkerList markers,Specialization spec){
  final StringBuilder builder=new StringBuilder();
  if (spec == null) {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile()));
  }
 else {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile(),spec.getFileName()));
  }
  builder.append('\n').append('\n');
  final boolean colors=gensrc.useAnsiColors();
  for (  Marker marker : markers) {
    marker.log(this.sourceFile,builder,colors);
  }
  gensrc.getOutput().println(builder);
}","private void printMarkers(GenSrc gensrc,MarkerList markers,Specialization spec){
  final StringBuilder builder=new StringBuilder();
  if (spec == null) {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile()));
  }
 else {
    builder.append(I18n.get(""String_Node_Str"",this.sourceFile.getInputFile(),spec.getFileName()));
  }
  builder.append('\n').append('\n');
  final boolean colors=gensrc.useAnsiColors();
  markers.log(this.sourceFile,builder,colors);
  gensrc.getOutput().println(builder);
}",0.8899167437557817
84136,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  this.checkSuperType(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
}",0.6983050847457627
84137,"private void checkSuperType(MarkerList markers,IContext context){
  final IClass superClass=this.type.getTheClass();
  final IClass enclosingClass=context.getThisClass();
  final IType enclosingType=enclosingClass.getClassType();
  final String message;
  boolean indirectSuperInterface=false;
  if (superClass == enclosingClass) {
    message=""String_Node_Str"";
  }
 else   if (!Types.isSuperType(this.type,enclosingType)) {
    message=""String_Node_Str"";
  }
 else {
    if (enclosingClass.getSuperType().isSameClass(this.type)) {
      return;
    }
    if (superClass.isInterface()) {
      for (int i=0, count=enclosingClass.interfaceCount(); i < count; i++) {
        if (enclosingClass.getInterface(i).isSameClass(this.type)) {
          return;
        }
      }
      indirectSuperInterface=true;
    }
    message=""String_Node_Str"";
  }
  final Marker marker=Markers.semanticError(this.type.getPosition(),message);
  if (indirectSuperInterface) {
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type,enclosingClass.getName()));
  }
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type));
  markers.add(marker);
}","private void checkSuperType(MarkerList markers,IContext context){
  final IClass superClass=this.type.getTheClass();
  final IClass enclosingClass=context.getThisClass();
  final IType enclosingType=enclosingClass.getClassType();
  final String message;
  boolean indirectSuperInterface=false;
  if (superClass == enclosingClass) {
    message=""String_Node_Str"";
  }
 else   if (!Types.isSuperType(this.type,enclosingType)) {
    message=""String_Node_Str"";
  }
 else {
    final IType superType=enclosingClass.getSuperType();
    if (superType.isSameClass(this.type)) {
      this.type=superType;
      return;
    }
    if (superClass.isInterface()) {
      for (int i=0, count=enclosingClass.interfaceCount(); i < count; i++) {
        final IType interfaceType=enclosingClass.getInterface(i);
        if (interfaceType.isSameClass(this.type)) {
          this.type=interfaceType;
          return;
        }
      }
      indirectSuperInterface=true;
    }
    message=""String_Node_Str"";
  }
  final Marker marker=Markers.semanticError(this.type.getPosition(),message);
  if (indirectSuperInterface) {
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type,enclosingClass.getName()));
  }
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",this.type));
  markers.add(marker);
}",0.8918083462132921
84138,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
    return;
  }
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    return;
  }
  final IClass enclosingClass=context.getThisClass();
  final IType superType=enclosingClass.getSuperType();
  if (superType == null) {
    final Marker marker=Markers.semantic(this.position,""String_Node_Str"");
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingClass.getClassType()));
    markers.add(marker);
    return;
  }
  this.type=superType;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
    return;
  }
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    if (this.type.isResolved()) {
      this.checkSuperType(markers,context);
    }
    return;
  }
  final IClass enclosingClass=context.getThisClass();
  final IType superType=enclosingClass.getSuperType();
  if (superType == null) {
    final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
    marker.addInfo(Markers.getSemantic(""String_Node_Str"",enclosingClass.getClassType()));
    markers.add(marker);
    return;
  }
  this.type=superType;
}",0.9365645046329294
84139,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    return;
  }
  final IType thisType=context.getThisType();
  if (thisType != null) {
    this.type=thisType;
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    final IClass iclass=this.type.getTheClass();
    if (iclass != null) {
      this.type=iclass.getThisType();
    }
    return;
  }
  final IType thisType=context.getThisType();
  if (thisType != null) {
    this.type=thisType;
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.8598351001177856
84140,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=DEFAULT_BOUND;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=Types.NULLABLE_ANY;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}",0.9890840056953014
84141,"@Override public boolean isSuperTypeOf(IType subType){
  if (!isSuperType(this.getUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    if (!isSuperType(subType,lowerBound)) {
      return false;
    }
  }
  return true;
}","@Override public boolean isSuperTypeOf(IType subType){
  if (!isSuperType(this.getSafeUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperType(subType,lowerBound);
}",0.7903525046382189
84142,"@Override public boolean isSuperClassOf(IType subType){
  if (!isSuperClass(this.getUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperClass(subType,lowerBound);
}","@Override public boolean isSuperClassOf(IType subType){
  if (!isSuperClass(this.getSafeUpperBound(),subType)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || isSuperClass(subType,lowerBound);
}",0.991869918699187
84143,"@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}","@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getSafeUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}",0.993975903614458
84144,"@Override public boolean isSameType(IType type){
  if (Types.isSameType(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && Types.isSameType(lowerBound,type);
}","@Override public boolean isSameType(IType type){
  if (Types.isSameType(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSameType(lowerBound,type);
}",0.9620253164556962
84145,"@Override public IClass getTheClass(){
  return this.getUpperBound().getTheClass();
}","@Override public IClass getTheClass(){
  return this.getSafeUpperBound().getTheClass();
}",0.9770114942528736
84146,"@Override public void getImplicitMatches(MatchList<IMethod> list,IValue value,IType targetType){
  this.getUpperBound().getImplicitMatches(list,value,targetType);
}","@Override public void getImplicitMatches(MatchList<IMethod> list,IValue value,IType targetType){
  this.getSafeUpperBound().getImplicitMatches(list,value,targetType);
}",0.9879518072289156
84147,"@Override public boolean isSubClassOf(IType superType){
  if (isSuperClass(superType,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && isSuperClass(lowerBound,superType) || Types.isSameClass(superType,Types.OBJECT);
}","@Override public boolean isSubClassOf(IType superType){
  return isSuperClass(superType,this.getUpperBound());
}",0.5260545905707196
84148,"@Override public IDataMember resolveField(Name name){
  return this.getUpperBound().resolveField(name);
}","@Override public IDataMember resolveField(Name name){
  return this.getSafeUpperBound().resolveField(name);
}",0.9813084112149532
84149,"@Override public void getMethodMatches(MatchList<IMethod> list,IValue instance,Name name,IArguments arguments){
  this.getUpperBound().getMethodMatches(list,instance,name,arguments);
}","@Override public void getMethodMatches(MatchList<IMethod> list,IValue instance,Name name,IArguments arguments){
  this.getSafeUpperBound().getMethodMatches(list,instance,name,arguments);
}",0.989247311827957
84150,"@Override public boolean isSameClass(IType type){
  if (Types.isSameClass(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && Types.isSameClass(lowerBound,type);
}","@Override public boolean isSameClass(IType type){
  if (Types.isSameClass(type,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSameClass(lowerBound,type);
}",0.9625
84151,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    for (int i=0, size=this.annotations.annotationCount(); i < size; i++) {
      this.annotations.getAnnotation(i).toString(prefix,buffer);
      buffer.append(' ');
    }
  }
  buffer.append(""String_Node_Str"");
  this.variance.appendPrefix(buffer);
  buffer.append(this.name);
  final IType upperBound=this.getUpperBound();
  if (upperBound != null) {
    buffer.append(""String_Node_Str"");
    upperBound.toString(prefix,buffer);
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    buffer.append(""String_Node_Str"");
    lowerBound.toString(prefix,buffer);
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    for (int i=0, size=this.annotations.annotationCount(); i < size; i++) {
      this.annotations.getAnnotation(i).toString(prefix,buffer);
      buffer.append(' ');
    }
  }
  buffer.append(""String_Node_Str"");
  this.variance.appendPrefix(buffer);
  buffer.append(this.name);
  final IType upperBound=this.getSafeUpperBound();
  if (upperBound != null) {
    buffer.append(""String_Node_Str"");
    upperBound.toString(prefix,buffer);
  }
  final IType lowerBound=this.getLowerBound();
  if (lowerBound != null) {
    buffer.append(""String_Node_Str"");
    lowerBound.toString(prefix,buffer);
  }
}",0.997134670487106
84152,"@Override public boolean isSubTypeOf(IType superType){
  if (isSuperType(superType,this.getUpperBound())) {
    return true;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound != null && isSuperType(lowerBound,superType) || Types.isExactType(superType,Types.OBJECT);
}","@Override public boolean isSubTypeOf(IType superType){
  return isSuperType(superType,this.getUpperBound());
}",0.5226130653266332
84153,"@Override public boolean isSuperTypeOf(IType subType){
  if (subType.hasTag(IType.NULL)) {
    return true;
  }
  final NullableType nullable=subType.extract(NullableType.class);
  return Types.isSuperType(this.type,nullable != null ? nullable.getElementType() : subType);
}","@Override public boolean isSuperTypeOf(IType subType){
  if (subType.hasTag(IType.NULL)) {
    return true;
  }
  final NullableType nullable=subType.extract(NullableType.class);
  if (nullable != null) {
    return Types.isSuperType(this,nullable.getElementType());
  }
  return Types.isSuperType(this.type,subType);
}",0.7622259696458684
84154,"@Override public void checkType(MarkerList markers,IContext context,int position){
  ModifierUtil.checkVisibility(this.theClass,this.position,markers,context);
  final int count=Math.min(this.typeArgumentCount,this.theClass.typeParameterCount());
  for (int i=0; i < count; i++) {
    final ITypeParameter typeVariable=this.theClass.getTypeParameter(i);
    final IType type=this.typeArguments[i];
    if (type.isResolved() && !typeVariable.isSuperTypeOf(type)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified,this.theClass.getFullName());
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",type));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  if ((position & TypePosition.GENERIC_FLAG) == 0) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  super.checkType(markers,context,position);
}","@Override public void checkType(MarkerList markers,IContext context,int position){
  ModifierUtil.checkVisibility(this.theClass,this.position,markers,context);
  final int count=Math.min(this.typeArgumentCount,this.theClass.typeParameterCount());
  for (int i=0; i < count; i++) {
    final ITypeParameter typeVariable=this.theClass.getTypeParameter(i);
    final IType typeArgument=this.typeArguments[i];
    if (typeArgument.isResolved() && !Variance.checkCompatible(Variance.COVARIANT,typeVariable.getCovariantType(),typeArgument)) {
      final Marker marker=Markers.semanticError(typeArgument.getPosition(),""String_Node_Str"",typeVariable.getName().qualified,this.theClass.getFullName());
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeArgument));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  if ((position & TypePosition.GENERIC_FLAG) == 0) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  super.checkType(markers,context,position);
}",0.9342560553633218
84155,"@Override public boolean isSuperTypeOf(IType subType){
  return this.typeParameter.isAssignableFrom(subType,ITypeContext.COVARIANT);
}","@Override public boolean isSuperTypeOf(IType subType){
  return this.backReference || this.typeParameter.isAssignableFrom(subType,ITypeContext.COVARIANT);
}",0.9241379310344828
84156,"@Override public boolean isSameType(IType type){
  return this.typeParameter.isSuperTypeOf(type);
}","@Override public boolean isSameType(IType type){
  return this.backReference || this.typeParameter.isSuperTypeOf(type);
}",0.9
84157,"public CovariantTypeVarType(ITypeParameter typeVariable){
  super(typeVariable);
}","public CovariantTypeVarType(ITypeParameter typeParameter,boolean backReference){
  super(typeParameter);
  this.backReference=backReference;
}",0.6785714285714286
84158,"@Override public boolean isSubTypeOf(IType superType){
  return this.typeParameter.isSuperTypeOf(superType);
}","@Override public boolean isSubTypeOf(IType superType){
  return this.backReference || this.typeParameter.isSuperTypeOf(superType);
}",0.9090909090909092
84159,"@Override public IType getConcreteType(ITypeContext context){
  IType type=super.getConcreteType(context);
  final TypeVarType typeVar=type.extract(TypeVarType.class);
  return typeVar != null && typeVar.getTypeVariable() == this.typeParameter ? this : type;
}","@Override public IType getConcreteType(ITypeContext context){
  final IType type=super.getConcreteType(context);
  final TypeVarType typeVar=type.extract(TypeVarType.class);
  return typeVar != null && typeVar.getTypeVariable() == this.typeParameter ? this : type;
}",0.988593155893536
84160,"public CodeTypeParameter(ICodePosition position,ITypeParametric generic,Name name,Variance variance){
  super(generic,name,variance);
  this.position=position;
  this.upperBound=Types.OBJECT;
}","public CodeTypeParameter(ICodePosition position,ITypeParametric generic,Name name,Variance variance){
  super(generic,name,variance);
  this.position=position;
}",0.9096045197740112
84161,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    return;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.annotations != null) {
    this.annotations.resolveTypes(markers,context,this);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolveType(markers,context);
  }
  if (this.upperBound == null) {
    this.upperBound=DEFAULT_BOUND;
  }
  this.upperBound=this.upperBound.resolveType(markers,context);
  this.upperBounds=getUpperBounds(this.upperBound);
  IType type=this.upperBounds[0];
  IClass typeClass=type.getTheClass();
  if (typeClass != null && !typeClass.isInterface()) {
    this.erasure=type;
  }
  for (int i=1, count=this.upperBounds.length; i < count; i++) {
    type=this.upperBounds[i];
    typeClass=type.getTheClass();
    if (typeClass != null && !typeClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
      final Marker marker=Markers.semanticError(type.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",Util.classSignatureToString(typeClass)));
      markers.add(marker);
    }
  }
}",0.9831649831649832
84162,"@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isAssignable(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isAssignable(type,lowerBound.getConcreteType(typeContext));
}","@Override public boolean isAssignableFrom(IType type,ITypeContext typeContext){
  if (!Types.isSuperType(this.getUpperBound().getConcreteType(typeContext),type)) {
    return false;
  }
  final IType lowerBound=this.getLowerBound();
  return lowerBound == null || Types.isSuperType(type,lowerBound.getConcreteType(typeContext));
}",0.9486404833836858
84163,"@Override public IValue convertValueTo(IValue value,IType targetType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isConvertibleTo(targetType)) {
    return null;
  }
  final LiteralConversion conversion=new LiteralConversion(value,LazyTypes.UNWRAP);
  conversion.setType(targetType);
  return conversion;
}","@Override public IValue convertValueTo(IValue value,IType targetType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isConvertibleTo(targetType)) {
    return null;
  }
  final LiteralConversion conversion=new LiteralConversion(value,LazyTypes.UNWRAP);
  conversion.setType(this.type);
  return conversion;
}",0.9836065573770492
84164,"private void generateSwitch(MethodWriter writer,Object frameType) throws BytecodeException {
}","private void generateSwitch(MethodWriter writer,Object frameType) throws BytecodeException {
  MatchCase defaultCase=null;
  Label defaultLabel=null;
  int cases=0;
  int low=Integer.MAX_VALUE;
  int high=Integer.MIN_VALUE;
  boolean switchVar=false;
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    IPattern pattern=matchCase.pattern;
    if (switchVar || pattern.switchCheck()) {
      switchVar=true;
    }
    if (pattern.isExhaustive()) {
      defaultCase=matchCase;
      defaultLabel=new Label();
      continue;
    }
    int min=pattern.minValue();
    if (min < low) {
      low=min;
    }
    int max=pattern.maxValue();
    if (max > high) {
      high=max;
    }
    cases+=pattern.subPatterns();
  }
  final Label endLabel=new Label();
  Label matchErrorLabel=null;
  if (!this.exhaustive) {
    switchVar=true;
    matchErrorLabel=new Label();
    if (defaultLabel == null) {
      defaultLabel=matchErrorLabel;
    }
  }
 else   if (defaultLabel == null) {
    defaultLabel=endLabel;
  }
  final boolean expr=frameType != null;
  final IType matchedType=this.matchedValue.getType();
  this.matchedValue.writeExpression(writer,null);
  int varIndex=-1;
  if (switchVar) {
    varIndex=writer.localCount();
    writer.visitVarInsn(matchedType.getStoreOpcode(),varIndex);
    writer.visitVarInsn(matchedType.getLoadOpcode(),varIndex);
  }
  if (!matchedType.isPrimitive()) {
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  final int localCount=writer.localCount();
  final KeyCache keyCache=new KeyCache(cases);
  for (int i=0; i < this.caseCount; i++) {
    final MatchCase matchCase=this.cases[i];
    final IPattern pattern=matchCase.pattern;
    final int subPatterns=pattern.subPatterns();
    for (int j=0; j < subPatterns; j++) {
      final IPattern subPattern=pattern.subPattern(j);
      if (subPattern.isExhaustive()) {
        continue;
      }
      final int switchValue=subPattern.switchValue();
      keyCache.add(switchValue,matchCase,subPattern);
    }
  }
  final Collection<KeyCache.Entry> entries=keyCache.uniqueEntries();
  for (  KeyCache.Entry topEntry : entries) {
    for (KeyCache.Entry entry=topEntry; entry != null; entry=entry.next) {
      entry.switchLabel=new Label();
    }
  }
  if (useTableSwitch(low,high,cases)) {
    this.writeTableSwitch(writer,entries,defaultLabel,low,high);
  }
 else {
    this.writeLookupSwitch(writer,entries,defaultLabel,cases);
  }
  for (  KeyCache.Entry topEntry : entries) {
    KeyCache.Entry entry=topEntry;
    final int key=entry.key;
    do {
      final KeyCache.Entry next=entry.next;
      final MatchCase matchCase=entry.matchCase;
      final IPattern pattern=entry.pattern;
      Label elseLabel;
      if (next != null && next.key == key) {
        elseLabel=next.switchLabel;
        if (elseLabel == null) {
          elseLabel=next.switchLabel=new Label();
        }
      }
 else {
        elseLabel=defaultLabel;
      }
      writer.visitTargetLabel(entry.switchLabel);
      if (pattern.switchCheck()) {
        pattern.writeInvJump(writer,varIndex,matchedType,elseLabel);
      }
      if (matchCase.condition != null) {
        matchCase.condition.writeInvJump(writer,elseLabel);
      }
      this.writeAction(writer,expr,frameType,matchCase.action);
      writer.resetLocals(localCount);
      writer.visitJumpInsn(Opcodes.GOTO,endLabel);
      entry=next;
    }
 while (entry != null && entry.key == key);
  }
  if (defaultCase != null) {
    writer.visitTargetLabel(defaultLabel);
    if (defaultCase.pattern.switchCheck()) {
      defaultCase.pattern.writeInvJump(writer,varIndex,matchedType,matchErrorLabel);
    }
    if (defaultCase.condition != null) {
      defaultCase.condition.writeInvJump(writer,matchErrorLabel);
    }
    this.writeAction(writer,expr,frameType,defaultCase.action);
    writer.resetLocals(localCount);
    writer.visitJumpInsn(Opcodes.GOTO,endLabel);
  }
  if (matchErrorLabel != null) {
    writer.visitLabel(matchErrorLabel);
    this.writeMatchError(writer,varIndex,matchedType);
  }
  writer.visitLabel(endLabel);
  if (switchVar) {
    writer.resetLocals(varIndex);
  }
}",0.0436194895591647
84165,"protected void addVariable(FieldInitializer initializer,MarkerList markers,IContext context){
  final IVariable variable=initializer.variable;
  final Name variableName=variable.getName();
  if (variable.getValue() == null) {
    variable.setValue(variable.getType().getDefaultValue());
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",variableName));
  }
  final IDataMember dataMember=context.resolveField(variableName);
  if (dataMember != null && dataMember.isVariable()) {
    markers.add(Markers.semantic(initializer.getPosition(),""String_Node_Str"",variableName));
  }
  if (this.variables == null) {
    this.variables=new ArrayList<>();
  }
  this.variables.add(variable);
}","protected void addVariable(FieldInitializer initializer,MarkerList markers,IContext context){
  final IVariable variable=initializer.variable;
  final Name variableName=variable.getName();
  if (variable.getValue() == null) {
    variable.setValue(variable.getType().getDefaultValue());
    markers.add(Markers.semanticError(variable.getPosition(),""String_Node_Str"",variableName));
  }
  final IDataMember dataMember=context.resolveField(variableName);
  if (dataMember != null && dataMember.isVariable()) {
    markers.add(Markers.semantic(initializer.getPosition(),""String_Node_Str"",variableName));
  }
  if (this.variables == null) {
    this.variables=new ArrayList<>();
  }
  this.variables.add(variable);
}",0.9752650176678446
84166,"@Override public void writeInnerClassInfo(ClassWriter writer){
  if (this.enclosingClass != null) {
    int modifiers=this.modifiers.toFlags() & 0x761F;
    if ((modifiers & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
      modifiers|=Modifiers.STATIC;
    }
 else {
      modifiers&=~Modifiers.STATIC;
    }
    final String outerName=this.enclosingClass.getInternalName();
    writer.visitInnerClass(this.getInternalName(),outerName,this.name.qualified,modifiers);
    writer.visitOuterClass(outerName,null,null);
  }
}","@Override public void writeInnerClassInfo(ClassWriter writer){
  if (this.enclosingClass != null) {
    int modifiers=this.modifiers.toFlags() & 0x761F;
    if ((modifiers & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
      modifiers|=Modifiers.STATIC;
    }
 else {
      modifiers&=~Modifiers.STATIC;
    }
    final String outerName=this.enclosingClass.getInternalName();
    writer.visitInnerClass(this.getInternalName(),outerName,this.name.qualified,modifiers);
  }
}",0.9521016617790812
84167,"protected void writeField(ClassWriter writer,int modifiers,String name,String descriptor){
  final String signature=this.type.needsSignature() ? this.getSignature() : null;
  final Object value;
  if (this.value != null && this.hasModifier(Modifiers.STATIC) && this.hasConstantValue()) {
    value=this.value.toObject();
  }
 else {
    value=null;
  }
  final FieldVisitor fieldVisitor=writer.visitField(modifiers,name,descriptor,signature,value);
  IField.writeAnnotations(fieldVisitor,this.modifiers,this.annotations,this.type);
  fieldVisitor.visitEnd();
}","protected void writeField(ClassWriter writer,int modifiers,String name,String descriptor){
  final String signature=this.getType().needsSignature() ? this.getSignature() : null;
  final Object value;
  if (this.value != null && this.hasModifier(Modifiers.STATIC) && this.hasConstantValue()) {
    value=this.value.toObject();
  }
 else {
    value=null;
  }
  final FieldVisitor fieldVisitor=writer.visitField(modifiers,name,descriptor,signature,value);
  IField.writeAnnotations(fieldVisitor,this.modifiers,this.annotations,this.type);
  fieldVisitor.visitEnd();
}",0.9937777777777778
84168,"private RetentionPolicy getRetention(){
  return this.type.getTheClass().getMetadata().getRetention();
}","private RetentionPolicy getRetention(){
  final IClass type=this.type.getTheClass();
  return type == null ? null : type.getMetadata().getRetention();
}",0.765625
84169,"private IType resolveTopLevelWith(MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    final IType classType=theClass.getThisType();
    return this.checkCount(markers,theClass,""String_Node_Str"",classType);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",typeParameter.getName()));
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias typeAlias=context.resolveTypeAlias(this.name,this.typeArgumentCount);
  if (typeAlias != null) {
    final IType type=typeAlias.getType();
    return this.checkCount(markers,typeAlias,""String_Node_Str"",type);
  }
  return null;
}","private IType resolveTopLevelWith(MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    final IType classType=theClass.getThisType();
    return this.checkCount(markers,theClass,""String_Node_Str"",classType);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",typeParameter.getName()));
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias typeAlias=context.resolveTypeAlias(this.name,this.typeArgumentCount);
  if (typeAlias != null) {
    final IType aliasType=typeAlias.getType();
    if (!aliasType.isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.name));
      return aliasType.atPosition(this.position);
    }
    return this.checkCount(markers,typeAlias,""String_Node_Str"",aliasType);
  }
  return null;
}",0.8375973303670745
84170,"private IType resolveTopLevelWith(@SuppressWarnings(""String_Node_Str"") MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    return new ResolvedClassType(theClass,this.position);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias type=context.resolveTypeAlias(this.name,0);
  if (type != null) {
    return type.getType().getConcreteType(ITypeContext.DEFAULT).atPosition(this.position);
  }
  return null;
}","private IType resolveTopLevelWith(@SuppressWarnings(""String_Node_Str"") MarkerList markers,IContext context){
  final IClass theClass=context.resolveClass(this.name);
  if (theClass != null) {
    return new ResolvedClassType(theClass,this.position);
  }
  final ITypeParameter typeParameter=context.resolveTypeParameter(this.name);
  if (typeParameter != null) {
    return new ResolvedTypeVarType(typeParameter,this.position);
  }
  final ITypeAlias type=context.resolveTypeAlias(this.name,0);
  if (type != null) {
    final IType aliasType=type.getType();
    if (!aliasType.isResolved()) {
      markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.name));
      return aliasType.atPosition(this.position);
    }
    return aliasType.getConcreteType(ITypeContext.DEFAULT).atPosition(this.position);
  }
  return null;
}",0.8454731109598366
84171,"public void findFiles(File sourceDir,File targetDir){
  final String[] subFiles=sourceDir.list();
  if (subFiles == null) {
    return;
  }
  Map<String,Template> templates=new HashMap<>();
  List<Specialization> specializations=new ArrayList<>();
  for (  String subFile : subFiles) {
    final File sourceFile=new File(sourceDir,subFile);
    if (sourceFile.isDirectory()) {
      this.findFiles(sourceFile,new File(targetDir,subFile));
      continue;
    }
    final int endIndex=subFile.length() - 4;
    if (subFile.endsWith(""String_Node_Str"")) {
      final String fileName=subFile.substring(0,endIndex);
      templates.put(fileName,new Template(sourceFile,targetDir,fileName));
    }
 else     if (subFile.endsWith(""String_Node_Str"")) {
      final int dashIndex=subFile.lastIndexOf('-',endIndex);
      final String fileName=subFile.substring(0,dashIndex);
      final String specName=subFile.substring(dashIndex + 1,endIndex);
      specializations.add(new Specialization(sourceFile,fileName,specName));
    }
  }
  for (  Specialization spec : specializations) {
    this.specs.put(spec.getSourceFile(),spec);
    final Template template=templates.get(spec.getTemplateName());
    if (template == null) {
      continue;
    }
    spec.setTemplate(template);
    template.addSpecialization(spec);
  }
  this.templates.addAll(templates.values());
}","public void findFiles(File sourceDir,File targetDir){
  final String[] subFiles=sourceDir.list();
  if (subFiles == null) {
    return;
  }
  Map<String,Template> templates=new HashMap<>();
  List<Specialization> specializations=new ArrayList<>();
  for (  String subFile : subFiles) {
    final File sourceFile=new File(sourceDir,subFile);
    if (sourceFile.isDirectory()) {
      this.findFiles(sourceFile,new File(targetDir,subFile));
      continue;
    }
    final int endIndex=subFile.length() - 4;
    if (subFile.endsWith(""String_Node_Str"")) {
      final String fileName=subFile.substring(0,endIndex);
      templates.put(fileName,new Template(sourceFile,targetDir,fileName));
    }
 else     if (subFile.endsWith(""String_Node_Str"")) {
      final int dashIndex=subFile.lastIndexOf('-',endIndex);
      final Specialization spec;
      if (dashIndex < 0) {
        spec=new Specialization(sourceFile,subFile.substring(0,endIndex));
      }
 else {
        final String fileName=subFile.substring(0,dashIndex);
        final String specName=subFile.substring(dashIndex + 1,endIndex);
        spec=new Specialization(sourceFile,fileName,specName);
      }
      specializations.add(spec);
    }
  }
  for (  Specialization spec : specializations) {
    this.specs.put(spec.getSourceFile(),spec);
    final Template template=templates.get(spec.getTemplateName());
    if (template == null) {
      continue;
    }
    spec.setTemplate(template);
    template.addSpecialization(spec);
  }
  this.templates.addAll(templates.values());
}",0.8662068965517241
84172,"@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,IArguments arguments){
  if (name != this.name && name != null) {
    return;
  }
  final IParameterList parameters=this.getParameterList();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod;
  if (receiver == null) {
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if ((mod=this.modifiers.toFlags() & Modifiers.INFIX) != 0 && receiver.isClassAccess()) {
    if (!Types.isSuperType(this.enclosingClass.getClassType(),receiver.getType())) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,null,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getInternalType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.enclosingClass.getClassType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
    if (partialVarargs >= 0) {
      varargs+=partialVarargs;
      continue;
    }
    if (parameter.getValue() != null) {
      defaults++;
      continue;
    }
    return;
  }
  list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}","@Override public void checkMatch(MatchList<IMethod> list,IValue receiver,Name name,IArguments arguments){
  if (name != this.name && name != null) {
    return;
  }
  final IParameterList parameters=this.getParameterList();
  final int parameterStartIndex;
  final int argumentStartIndex;
  final int argumentCount;
  final int parameterCount=parameters.size();
  final int[] matchValues;
  final IType[] matchTypes;
  boolean invalid=false;
  final int mod;
  if (receiver == null) {
    if (arguments == null) {
      list.add(new Candidate<>(this));
      return;
    }
    argumentCount=arguments.size();
    matchValues=new int[argumentCount];
    matchTypes=new IType[argumentCount];
    argumentStartIndex=0;
    parameterStartIndex=0;
  }
 else   if ((mod=this.modifiers.toFlags() & Modifiers.INFIX) != 0 && receiver.isClassAccess()) {
    final IType receiverType=receiver.getType();
    if (!Types.isSuperType(this.enclosingClass.getClassType(),receiverType)) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,IValue.EXACT_MATCH,null,false));
      return;
    }
    parameterStartIndex=0;
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=1;
    matchTypes[0]=receiverType;
  }
 else {
    if (mod == Modifiers.STATIC && !receiver.isClassAccess()) {
      invalid=true;
    }
    final IType receiverType;
    if (mod == Modifiers.INFIX) {
      receiverType=parameters.get(0).getInternalType();
      parameterStartIndex=1;
    }
 else {
      receiverType=this.enclosingClass.getClassType();
      parameterStartIndex=0;
    }
    final int receiverMatch=TypeChecker.getTypeMatch(receiver,receiverType,list);
    if (receiverMatch == IValue.MISMATCH) {
      return;
    }
    if (arguments == null) {
      list.add(new Candidate<>(this,receiverMatch,receiverType,false));
      return;
    }
    argumentCount=arguments.size();
    argumentStartIndex=1;
    matchValues=new int[1 + argumentCount];
    matchTypes=new IType[1 + argumentCount];
    matchValues[0]=receiverMatch;
    matchTypes[0]=receiverType;
  }
  final int parametersLeft=parameterCount - parameterStartIndex;
  if (argumentCount > parametersLeft && !this.isVariadic()) {
    return;
  }
  int defaults=0;
  int varargs=0;
  for (int argumentIndex=0; argumentIndex < parametersLeft; argumentIndex++) {
    final IParameter parameter=parameters.get(parameterStartIndex + argumentIndex);
    final int partialVarargs=arguments.checkMatch(matchValues,matchTypes,argumentStartIndex,argumentIndex,parameter,list);
    if (partialVarargs >= 0) {
      varargs+=partialVarargs;
      continue;
    }
    if (parameter.getValue() != null) {
      defaults++;
      continue;
    }
    return;
  }
  list.add(new Candidate<>(this,matchValues,matchTypes,defaults,varargs,invalid));
}",0.9834811337158756
84173,"private boolean isConvertibleFrom(IType type){
  return type.getAnnotation(MapType.MapTypes.MAP_CONVERTIBLE_CLASS) != null;
}","private boolean isConvertibleFrom(IType type){
  return type.getAnnotation(LazyTypes.MAP_CONVERTIBLE_CLASS) != null;
}",0.9547325102880658
84174,"@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!MapType.MapTypes.MAP_CLASS.isSubClassOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(MapType.MapTypes.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new ArrayExpr(this.keys,this.count),new ArrayExpr(this.values,this.count)},2);
      return new LiteralConversion(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  final IType keyType=this.keyType=Types.resolveTypeSafely(mapType,MapType.MapTypes.KEY_VARIABLE);
  final IType valueType=this.valueType=Types.resolveTypeSafely(mapType,MapType.MapTypes.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    this.keys[i]=TypeChecker.convertValue(this.keys[i],keyType,typeContext,markers,context,KEY_MARKER_SUPPLIER);
    this.values[i]=TypeChecker.convertValue(this.values[i],valueType,typeContext,markers,context,VALUE_MARKER_SUPPLIER);
  }
  return this;
}","@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!MapType.MapTypes.MAP_CLASS.isSubClassOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(LazyTypes.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new ArrayExpr(this.keys,this.count),new ArrayExpr(this.values,this.count)},2);
      return new LiteralConversion(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  final IType keyType=this.keyType=Types.resolveTypeSafely(mapType,MapType.MapTypes.KEY_VARIABLE);
  final IType valueType=this.valueType=Types.resolveTypeSafely(mapType,MapType.MapTypes.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    this.keys[i]=TypeChecker.convertValue(this.keys[i],keyType,typeContext,markers,context,KEY_MARKER_SUPPLIER);
    this.values[i]=TypeChecker.convertValue(this.values[i],valueType,typeContext,markers,context,VALUE_MARKER_SUPPLIER);
  }
  return this;
}",0.9929939280709948
84175,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue receiver,IContext context){
  if (receiver != null) {
    if (this.modifiers.hasIntModifier(Modifiers.STATIC)) {
      if (receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=null;
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.enclosingClass.getClassType();
      receiver=TypeChecker.convertValue(receiver,type,type,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.enclosingClass.getType(),context,markers);
    }
  }
  ModifierUtil.checkVisibility(this,position,markers,context);
  return receiver;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue receiver,IContext context){
  if (receiver != null) {
    if (this.modifiers.hasIntModifier(Modifiers.STATIC)) {
      if (!receiver.isClassAccess()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.enclosingClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.enclosingClass.getFullName()));
      }
      receiver=receiver.asIgnoredClassAccess();
    }
 else     if (receiver.isClassAccess()) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.enclosingClass.getClassType();
      receiver=TypeChecker.convertValue(receiver,type,type,markers,context,TypeChecker.markerSupplier(""String_Node_Str"",this.name));
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.enclosingClass.getType(),context,markers);
    }
  }
  ModifierUtil.checkVisibility(this,position,markers,context);
  return receiver;
}",0.987133666904932
84176,"@Override public void writeClassInit(MethodWriter writer) throws BytecodeException {
  if (this.traitInit) {
    writer.visitVarInsn(Opcodes.ALOAD,0);
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.getInternalName(),TraitMetadata.INIT_NAME,""String_Node_Str"",false);
  }
  this.metadata.writeClassInit(writer);
  if (this.body != null) {
    for (int i=0, count=this.body.fieldCount(); i < count; i++) {
      this.body.getField(i).writeClassInit(writer);
    }
    for (int i=0, count=this.body.propertyCount(); i < count; i++) {
      this.body.getProperty(i).writeClassInit(writer);
    }
    for (int i=0, count=this.body.initializerCount(); i < count; i++) {
      this.body.getInitializer(i).writeClassInit(writer);
    }
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeClassInit(writer);
  }
}","@Override public void writeClassInit(MethodWriter writer) throws BytecodeException {
  if (this.traitInit) {
    writer.visitVarInsn(Opcodes.ALOAD,0);
    writer.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.getInternalName(),TraitMetadata.INIT_NAME,""String_Node_Str"",false);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeClassInit(writer);
  }
  this.metadata.writeClassInit(writer);
  if (this.body == null) {
    return;
  }
  for (int i=0, count=this.body.fieldCount(); i < count; i++) {
    this.body.getField(i).writeClassInit(writer);
  }
  for (int i=0, count=this.body.propertyCount(); i < count; i++) {
    this.body.getProperty(i).writeClassInit(writer);
  }
  for (int i=0, count=this.body.initializerCount(); i < count; i++) {
    this.body.getInitializer(i).writeClassInit(writer);
  }
}",0.8518518518518519
84177,"@Override public void writeStaticInit(MethodWriter writer) throws BytecodeException {
  this.metadata.writeStaticInit(writer);
  if (this.body != null) {
    for (int i=0, count=this.body.fieldCount(); i < count; i++) {
      this.body.getField(i).writeStaticInit(writer);
    }
    for (int i=0, count=this.body.propertyCount(); i < count; i++) {
      this.body.getProperty(i).writeStaticInit(writer);
    }
    for (int i=0, count=this.body.initializerCount(); i < count; i++) {
      this.body.getInitializer(i).writeStaticInit(writer);
    }
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(writer);
  }
}","@Override public void writeStaticInit(MethodWriter writer) throws BytecodeException {
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(writer);
  }
  this.metadata.writeStaticInit(writer);
  if (this.body == null) {
    return;
  }
  for (int i=0, count=this.body.fieldCount(); i < count; i++) {
    this.body.getField(i).writeStaticInit(writer);
  }
  for (int i=0, count=this.body.propertyCount(); i < count; i++) {
    this.body.getProperty(i).writeStaticInit(writer);
  }
  for (int i=0, count=this.body.initializerCount(); i < count; i++) {
    this.body.getInitializer(i).writeStaticInit(writer);
  }
}",0.7972350230414746
84178,"@Override public void appendSignature(StringBuilder buffer){
  buffer.append(this.name).append(':');
  if (this.upperBoundCount <= 0) {
    buffer.append(""String_Node_Str"");
    return;
  }
  if (this.upperBounds[0].getTheClass().isInterface()) {
    buffer.append(':');
  }
  this.upperBounds[0].appendSignature(buffer,false);
  for (int i=1; i < this.upperBoundCount; i++) {
    buffer.append(':');
    this.upperBounds[i].appendSignature(buffer,false);
  }
}","@Override public void appendSignature(StringBuilder buffer){
  buffer.append(this.name).append(':');
  if (this.upperBoundCount <= 0) {
    buffer.append(""String_Node_Str"");
    return;
  }
  final IClass theClass=this.upperBounds[0].getTheClass();
  if (theClass != null && theClass.isInterface()) {
    buffer.append(':');
  }
  this.upperBounds[0].appendSignature(buffer,false);
  for (int i=1; i < this.upperBoundCount; i++) {
    buffer.append(':');
    this.upperBounds[i].appendSignature(buffer,false);
  }
}",0.9364754098360656
84179,"@Override public boolean isResolved(){
  return this.type != null;
}","@Override public boolean isResolved(){
  return this.left.isResolved() && this.right.isResolved();
}",0.7261904761904762
84180,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    this.end(pm,true);
  return;
}
switch (this.mode) {
case END:
this.end(pm,true);
return;
case VALUE:
if ((type & Tokens.IDENTIFIER) != 0) {
this.parseInfixAccess(pm,token);
return;
}
if (this.parseValue(pm,token,type)) {
return;
}
case ACCESS:
switch (type) {
case BaseSymbols.DOT:
this.mode=DOT_ACCESS;
return;
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (!this.hasFlag(IGNORE_LAMBDA)) {
break;
}
case DyvilKeywords.ELSE:
case DyvilKeywords.CATCH:
case DyvilKeywords.FINALLY:
case DyvilKeywords.WHILE:
this.end(pm,true);
return;
case DyvilKeywords.AS:
{
final CastOperator castOperator=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(castOperator));
this.value=castOperator;
return;
}
case DyvilKeywords.IS:
{
final InstanceOfOperator instanceOfOperator=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(instanceOfOperator));
this.value=instanceOfOperator;
return;
}
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
final SubscriptAccess subscriptAccess=new SubscriptAccess(token,this.value);
ArgumentListParser.parseArguments(pm,token.next(),subscriptAccess);
this.value=subscriptAccess;
this.mode=SUBSCRIPT_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
final ApplyMethodCall applyMethodCall=new ApplyMethodCall(this.value.getPosition(),this.value);
ArgumentListParser.parseArguments(pm,token.next(),applyMethodCall);
this.value=applyMethodCall;
this.mode=PARAMETERS_END;
return;
case BaseSymbols.COLON:
if (this.hasFlag(IGNORE_COLON)) {
this.end(pm,true);
return;
}
this.parseInfixAccess(pm,token,Names.colon);
return;
case DyvilSymbols.ELLIPSIS:
this.parseInfixAccess(pm,token,Names.dotdotdot);
return;
case BaseSymbols.EQUALS:
if (this.value == null) {
pm.report(Markers.syntaxError(token,""String_Node_Str"",token));
this.mode=VALUE;
return;
}
this.parseInfixAccess(pm,token,Names.eq);
return;
}
if (ParserUtil.isExpressionEnd(type)) {
this.end(pm,true);
return;
}
if (isSymbol(type)) {
this.parseInfixAccess(pm,token);
return;
}
if (this.value != null) {
if (this.hasFlag(IGNORE_APPLY) || this.ignoreClosure(type)) {
this.end(pm,true);
return;
}
final ApplyMethodCall applyCall=new ApplyMethodCall(ICodePosition.between(token.prev(),token),this.value,EmptyArguments.VISIBLE);
this.value=applyCall;
this.parseApply(pm,token,applyCall);
pm.reparse();
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str"",token.toString()));
return;
case DOT_ACCESS:
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
final BraceAccessExpr braceAccessExpr=new BraceAccessExpr(token.raw(),this.value);
pm.pushParser(new StatementListParser(braceAccessExpr::setStatement),true);
this.value=braceAccessExpr;
this.mode=ACCESS;
return;
}
if (isIdentifier(type)) {
this.parseInfixAccess(pm,token);
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str""));
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
if (!TypeParser.isGenericEnd(token,type)) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
pm.splitJump(token,1);
final IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
ArgumentListParser.parseArguments(pm,next.next(),(ICall)this.value);
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS;
return;
}
throw new Error(""String_Node_Str"");
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    this.end(pm,true);
  return;
}
switch (this.mode) {
case END:
this.end(pm,true);
return;
case VALUE:
if ((type & Tokens.IDENTIFIER) != 0) {
this.parseInfixAccess(pm,token,token.nameValue());
return;
}
if (this.parseValue(pm,token,type)) {
return;
}
case ACCESS:
switch (type) {
case BaseSymbols.DOT:
this.mode=DOT_ACCESS;
return;
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (!this.hasFlag(IGNORE_LAMBDA)) {
break;
}
case DyvilKeywords.ELSE:
case DyvilKeywords.CATCH:
case DyvilKeywords.FINALLY:
case DyvilKeywords.WHILE:
this.end(pm,true);
return;
case DyvilKeywords.AS:
{
final CastOperator castOperator=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(castOperator));
this.value=castOperator;
return;
}
case DyvilKeywords.IS:
{
final InstanceOfOperator instanceOfOperator=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(instanceOfOperator));
this.value=instanceOfOperator;
return;
}
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
final SubscriptAccess subscriptAccess=new SubscriptAccess(token,this.value);
ArgumentListParser.parseArguments(pm,token.next(),subscriptAccess);
this.value=subscriptAccess;
this.mode=SUBSCRIPT_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
final ApplyMethodCall applyMethodCall=new ApplyMethodCall(this.value.getPosition(),this.value);
ArgumentListParser.parseArguments(pm,token.next(),applyMethodCall);
this.value=applyMethodCall;
this.mode=PARAMETERS_END;
return;
case BaseSymbols.COLON:
if (this.hasFlag(IGNORE_COLON)) {
this.end(pm,true);
return;
}
this.parseInfixAccess(pm,token,Names.colon);
return;
case BaseSymbols.EQUALS:
if (this.value == null) {
pm.report(Markers.syntaxError(token,""String_Node_Str"",token));
this.mode=VALUE;
return;
}
this.parseInfixAccess(pm,token,Names.eq);
return;
}
if (ParserUtil.isExpressionEnd(type)) {
this.end(pm,true);
return;
}
if (isSymbol(type)) {
this.parseInfixAccess(pm,token);
return;
}
if (this.value != null) {
if (this.hasFlag(IGNORE_APPLY) || this.ignoreClosure(type)) {
this.end(pm,true);
return;
}
final ApplyMethodCall applyCall=new ApplyMethodCall(ICodePosition.between(token.prev(),token),this.value,EmptyArguments.VISIBLE);
this.value=applyCall;
this.parseApply(pm,token,applyCall);
pm.reparse();
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str"",token.toString()));
return;
case DOT_ACCESS:
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
final BraceAccessExpr braceAccessExpr=new BraceAccessExpr(token.raw(),this.value);
pm.pushParser(new StatementListParser(braceAccessExpr::setStatement),true);
this.value=braceAccessExpr;
this.mode=ACCESS;
return;
}
if (isIdentifier(type)) {
this.parseInfixAccess(pm,token,token.nameValue());
return;
}
pm.report(Markers.syntaxError(token,""String_Node_Str""));
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
if (!TypeParser.isGenericEnd(token,type)) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
pm.splitJump(token,1);
final IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
ArgumentListParser.parseArguments(pm,next.next(),(ICall)this.value);
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS;
return;
}
throw new Error(""String_Node_Str"");
}",0.9850414142662876
84181,"private void parseInfixAccess(IParserManager pm,IToken token,Name name){
  final int type=token.type();
  final IToken next=token.next();
  final int nextType=next.type();
  if (isSymbol(type)) {
    if (this.value == null) {
      final PrefixCall call=new PrefixCall(token.raw(),name);
      this.value=call;
      this.mode=ACCESS;
      if (this.isOperatorEnd(nextType)) {
        pm.report(next,""String_Node_Str"");
        return;
      }
      this.parseApply(pm,next,call);
      return;
    }
    if (this.isOperatorEnd(nextType) || isSymbol(nextType) && neighboring(token.prev(),token) && !neighboring(next,next.next())) {
      this.value=new PostfixCall(token.raw(),this.value,name);
      this.mode=ACCESS;
      return;
    }
    if (this.hasFlag(IGNORE_OPERATOR)) {
      this.valueConsumer.setValue(this.value);
      pm.popParser(true);
      return;
    }
    final OperatorChain chain;
    if (this.value.valueTag() == IValue.OPERATOR_CHAIN) {
      chain=(OperatorChain)this.value;
    }
 else {
      chain=new OperatorChain();
      chain.addOperand(this.value);
      this.value=chain;
    }
    chain.addOperator(name,token.raw());
    pm.pushParser(new ExpressionParser(chain::addOperand).withFlag(this.flags | IGNORE_OPERATOR));
    return;
  }
switch (nextType) {
case BaseSymbols.OPEN_PARENTHESIS:
{
      final MethodCall call=new MethodCall(token.raw(),this.value,name);
      ArgumentListParser.parseArguments(pm,next.next(),call);
      this.value=call;
      this.mode=PARAMETERS_END;
      pm.skip();
      return;
    }
case BaseSymbols.OPEN_SQUARE_BRACKET:
{
    final FieldAccess fieldAccess=new FieldAccess(token.raw(),this.value,name);
    final SubscriptAccess subscriptAccess=new SubscriptAccess(next.raw(),fieldAccess);
    ArgumentListParser.parseArguments(pm,next.next(),subscriptAccess);
    this.value=subscriptAccess;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    return;
  }
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (this.hasFlag(IGNORE_LAMBDA)) {
  break;
}
pm.pushParser(new LambdaOrTupleParser(this,LambdaOrTupleParser.SINGLE_PARAMETER),true);
this.mode=END;
return;
}
if (isGenericCall(next,nextType)) {
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
pm.splitJump(next,1);
pm.pushParser(new TypeListParser(call.getGenericData(),true));
this.mode=TYPE_ARGUMENTS_END;
return;
}
if (this.isFieldAccess(token,next,nextType)) {
this.value=new FieldAccess(token.raw(),this.value,name);
this.mode=ACCESS;
return;
}
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
this.mode=ACCESS;
this.parseApply(pm,token.next(),call);
}","private void parseInfixAccess(IParserManager pm,IToken token,Name name){
  final int type=token.type();
  final IToken next=token.next();
  final int nextType=next.type();
  if (isSymbol(type)) {
    if (this.value == null) {
      final PrefixCall call=new PrefixCall(token.raw(),name);
      this.value=call;
      this.mode=ACCESS;
      if (this.isOperatorEnd(nextType)) {
        pm.report(ICodePosition.between(token,next),""String_Node_Str"");
        return;
      }
      this.parseApply(pm,next,call);
      return;
    }
    if (this.isOperatorEnd(nextType) || isSymbol(nextType) && neighboring(token.prev(),token) && !neighboring(next,next.next())) {
      this.value=new PostfixCall(token.raw(),this.value,name);
      this.mode=ACCESS;
      return;
    }
    if (this.hasFlag(IGNORE_OPERATOR)) {
      this.valueConsumer.setValue(this.value);
      pm.popParser(true);
      return;
    }
    final OperatorChain chain;
    if (this.value.valueTag() == IValue.OPERATOR_CHAIN) {
      chain=(OperatorChain)this.value;
    }
 else {
      chain=new OperatorChain();
      chain.addOperand(this.value);
      this.value=chain;
    }
    chain.addOperator(name,token.raw());
    pm.pushParser(new ExpressionParser(chain::addOperand).withFlag(this.flags | IGNORE_OPERATOR));
    return;
  }
switch (nextType) {
case BaseSymbols.OPEN_PARENTHESIS:
{
      final MethodCall call=new MethodCall(token.raw(),this.value,name);
      ArgumentListParser.parseArguments(pm,next.next(),call);
      this.value=call;
      this.mode=PARAMETERS_END;
      pm.skip();
      return;
    }
case BaseSymbols.OPEN_SQUARE_BRACKET:
{
    final FieldAccess fieldAccess=new FieldAccess(token.raw(),this.value,name);
    final SubscriptAccess subscriptAccess=new SubscriptAccess(next.raw(),fieldAccess);
    ArgumentListParser.parseArguments(pm,next.next(),subscriptAccess);
    this.value=subscriptAccess;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    return;
  }
case DyvilSymbols.ARROW_RIGHT:
case DyvilSymbols.DOUBLE_ARROW_RIGHT:
if (this.hasFlag(IGNORE_LAMBDA)) {
  break;
}
pm.pushParser(new LambdaOrTupleParser(this,LambdaOrTupleParser.SINGLE_PARAMETER),true);
this.mode=END;
return;
}
if (isGenericCall(next,nextType)) {
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
pm.splitJump(next,1);
pm.pushParser(new TypeListParser(call.getGenericData(),true));
this.mode=TYPE_ARGUMENTS_END;
return;
}
if (this.isFieldAccess(token,next,nextType)) {
this.value=new FieldAccess(token.raw(),this.value,name);
this.mode=ACCESS;
return;
}
final MethodCall call=new MethodCall(token.raw(),this.value,name,EmptyArguments.INSTANCE);
this.value=call;
this.mode=ACCESS;
this.parseApply(pm,token.next(),call);
}",0.9932321199926832
84182,"private void preWrite(MethodWriter writer,IValue instance,IArguments arguments,int localCount){
  if (!this.preProcessed) {
    this.preProcessed=true;
    final int[] accessCounts=new int[this.maxLocals];
    int lastStoredIndex=-1;
    for (int i=0; i < this.instructionCount; i++) {
      final IInstruction instruction=this.instructions[i];
      final int opcode=instruction.getOpcode();
      if (Opcodes.isLoadOpcode(opcode)) {
        final int varIndex=((VarInstruction)instruction).getIndex();
        if (++accessCounts[varIndex] < 2) {
          continue;
        }
        if (varIndex > lastStoredIndex) {
          lastStoredIndex=varIndex;
        }
      }
 else       if (Opcodes.isReturnOpcode(opcode)) {
        this.returnIndex=i;
      }
    }
    this.storedParameters=lastStoredIndex + 1;
    final IParameterList parameterList=this.method.getParameterList();
    int parameterSlots=0;
    for (int i=0, parameterCount=parameterList.size(); i < parameterCount; i++) {
      parameterSlots+=parameterList.get(i).getInternalType().getLocalSlots();
    }
    this.parameterSlots=parameterSlots;
  }
  for (int i=0; i < this.storedParameters; i++) {
    final IType type=IntrinsicData.writeArgument(writer,this.method,i,instance,arguments);
    writer.visitVarInsn(type.getStoreOpcode(),localCount);
    localCount=writer.localCount();
  }
}","private void preWrite(MethodWriter writer,IValue instance,IArguments arguments,int localCount){
  if (!this.preProcessed) {
    this.preProcessed=true;
    this.preProcess();
  }
  for (int i=0; i < this.storedParameters; i++) {
    final IType type=IntrinsicData.writeArgument(writer,this.method,i,instance,arguments);
    writer.visitVarInsn(type.getStoreOpcode(),localCount);
    localCount=writer.localCount();
  }
}",0.4536777091521617
84183,"private static boolean lowerPrecedence(OperatorElement element1,OperatorElement element2,OperatorElement ternaryOperator,MarkerList markers){
  if (element1.operator.getType() == IOperator.TERNARY) {
    if (element2.operator.getType() == IOperator.TERNARY) {
      return false;
    }
    if (element2.name == element1.operator.getTernaryName()) {
      return false;
    }
  }
  if (ternaryOperator != null && element1.name == ternaryOperator.operator.getTernaryName()) {
    if (element2.name == element1.name) {
      return true;
    }
    if (element2.name == ternaryOperator.name) {
      return false;
    }
  }
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    return true;
  }
  if (comparePrecedence == 0) {
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
      markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
    return true;
}
}
return false;
}","private static boolean lowerPrecedence(OperatorElement element1,OperatorElement element2,OperatorElement ternaryOperator,MarkerList markers){
  final byte element1Type=element1.operator.getType();
  if (element1Type == IOperator.TERNARY) {
    if (element2.operator.getType() == IOperator.TERNARY) {
      return false;
    }
    if (element2.name == element1.operator.getTernaryName()) {
      return false;
    }
  }
  if (ternaryOperator != null && element1.name == ternaryOperator.operator.getTernaryName()) {
    if (element2.name == element1.name) {
      return true;
    }
    if (element2.name == ternaryOperator.name) {
      return false;
    }
  }
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    return true;
  }
  if (comparePrecedence > 0) {
    return false;
  }
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
    if (element1Type != IOperator.INFIX) {
      return true;
    }
  markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
return true;
}
return false;
}",0.919605077574048
84184,"@Override public IValue resolveCall(MarkerList markers,IContext context){
  final IValue op=Operators.getPrefix(this.name,this.arguments.getFirstValue());
  if (op != null) {
    op.setPosition(this.position);
    return op.resolveOperator(markers,context);
  }
  if (this.resolveMethodCall(markers,context)) {
    return this;
  }
  if (this.resolveImplicitCall(markers,context)) {
    return this;
  }
  return null;
}","@Override public IValue resolveCall(MarkerList markers,IContext context){
  final IValue operand=this.arguments.getFirstValue();
  if (operand != null) {
    final IValue op=Operators.getPrefix(this.name,operand);
    if (op != null) {
      op.setPosition(this.position);
      return op.resolveOperator(markers,context);
    }
  }
  if (this.resolveMethodCall(markers,context)) {
    return this;
  }
  if (this.resolveImplicitCall(markers,context)) {
    return this;
  }
  return null;
}",0.849615806805708
84185,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.type.getTheClass().isInterface()) {
    this.nestedClass.addInterface(this.type);
  }
 else {
    this.nestedClass.setSuperType(this.type);
  }
  this.nestedClass.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  final IClass theClass=this.type.getTheClass();
  if (theClass != null) {
    if (theClass.isInterface()) {
      this.nestedClass.addInterface(this.type);
    }
 else {
      this.nestedClass.setSuperType(this.type);
    }
  }
  this.nestedClass.resolveTypes(markers,context);
}",0.8845070422535212
84186,"@Override public void resolve(MarkerList markers,IContext context){
  context=context.push(this);
  super.resolve(markers,context);
  for (int i=0; i < this.typeParameterCount; i++) {
    this.typeParameters[i].resolve(markers,context);
  }
  if (this.receiverType != null) {
    this.receiverType.resolve(markers,context);
  }
  this.parameters.resolve(markers,context);
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN && this.value.isResolved()) {
        markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
      }
    }
    final TypeChecker.MarkerSupplier markerSupplier=TypeChecker.markerSupplier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.name);
    this.value=TypeChecker.convertValue(this.value,this.type,this.type,markers,context,markerSupplier);
    if (inferType) {
      this.type=this.value.getType();
    }
  }
 else   if (this.type == Types.UNKNOWN) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
    this.type=Types.ANY;
  }
  context.pop();
}","@Override public void resolve(MarkerList markers,IContext context){
  context=context.push(this);
  super.resolve(markers,context);
  for (int i=0; i < this.typeParameterCount; i++) {
    this.typeParameters[i].resolve(markers,context);
  }
  if (this.receiverType != null) {
    this.receiverType.resolve(markers,context);
  }
  this.parameters.resolve(markers,context);
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN || this.type == null) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN && this.value.isResolved()) {
        markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
      }
    }
    final TypeChecker.MarkerSupplier markerSupplier=TypeChecker.markerSupplier(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",this.name);
    this.value=TypeChecker.convertValue(this.value,this.type,this.type,markers,context,markerSupplier);
    if (inferType) {
      this.type=this.value.getType();
    }
  }
 else   if (this.type == Types.UNKNOWN) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.name.unqualified));
    this.type=Types.ANY;
  }
  context.pop();
}",0.9922935779816514
84187,"@Override public void checkTypes(MarkerList markers,IContext context){
  final IType returnType=context.getReturnType();
  if (this.value != null) {
    this.value.checkTypes(markers,context);
    if (returnType == null) {
      return;
    }
    final IType valueType=this.value.getType();
    if (!Types.isSuperType(returnType,valueType)) {
      final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",returnType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      markers.add(marker);
    }
  }
 else   if (returnType != null && !Types.isSameClass(returnType,Types.VOID)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  final IType returnType=context.getReturnType();
  if (this.value != null) {
    this.value.checkTypes(markers,context);
    if (returnType == null || !this.value.isResolved()) {
      return;
    }
    final IType valueType=this.value.getType();
    if (!Types.isSuperType(returnType,valueType)) {
      final Marker marker=Markers.semanticError(this.position,""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",returnType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      markers.add(marker);
    }
  }
 else   if (returnType != null && !Types.isSameClass(returnType,Types.VOID)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.9820051413881749
84188,"@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    this.end(pm);
    return;
  }
  if (type == Tokens.EOF) {
    this.end(pm);
    pm.report(token,""String_Node_Str"");
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
{
      final IToken next=token.next();
      final IToken lambdaArrow=this.findLambdaArrow(next);
      if (lambdaArrow != null) {
        this.lambdaExpr=new LambdaExpr(lambdaArrow.raw());
        this.lambdaExpr.setValue(this.statementList=new StatementList(token));
        if (next == lambdaArrow) {
          this.mode=LAMBDA_TYPE_ARROW;
          return;
        }
        if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
          pm.skip();
          pm.pushParser(new ParameterListParser(this.lambdaExpr));
          this.mode=LAMBDA_PARAMETERS_END;
          return;
        }
        pm.pushParser(new ParameterListParser(this.lambdaExpr).withFlags(LAMBDA_ARROW_END));
        this.mode=LAMBDA_TYPE_ARROW;
        return;
      }
      this.statementList=this.closure ? new Closure(token) : new StatementList(token);
      this.mode=EXPRESSION;
      if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
        pm.report(token,""String_Node_Str"");
        pm.reparse();
      }
      return;
    }
case LAMBDA_PARAMETERS_END:
  this.mode=LAMBDA_TYPE_ARROW;
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
  pm.report(token,""String_Node_Str"");
}
return;
case LAMBDA_TYPE_ARROW:
if (type == DyvilSymbols.ARROW_RIGHT) {
pm.pushParser(LambdaOrTupleParser.returnTypeParser(this.lambdaExpr));
this.mode=LAMBDA_RETURN_ARROW;
return;
}
case LAMBDA_RETURN_ARROW:
if (type != DyvilSymbols.DOUBLE_ARROW_RIGHT) {
pm.report(token,""String_Node_Str"");
return;
}
this.mode=EXPRESSION;
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON || type == BaseSymbols.COMMA) {
return;
}
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
final TokenIterator tokens=pm.getTokens();
final MemberParser parser=new MemberParser<>(this).withFlag(NO_UNINITIALIZED_VARIABLES | OPERATOR_ERROR | NO_FIELD_PROPERTIES);
final TryParserManager parserManager=new TryParserManager(DyvilSymbols.INSTANCE,tokens,pm.getMarkers());
tokens.jump(token);
if (parserManager.parse(parser,EXIT_ON_ROOT)) {
tokens.jump(tokens.lastReturned());
this.mode=SEPARATOR;
return;
}
parserManager.resetTo(token);
pm.pushParser(new ExpressionParser(this));
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
pm.report(token,""String_Node_Str"");
}
}","@Override public void parse(IParserManager pm,IToken token){
  final int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    this.end(pm);
    return;
  }
  if (type == Tokens.EOF) {
    this.end(pm);
    pm.report(token,""String_Node_Str"");
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
{
      final IToken next=token.next();
      final IToken lambdaArrow=this.findLambdaArrow(next);
      if (lambdaArrow != null) {
        this.lambdaExpr=new LambdaExpr(lambdaArrow.raw());
        this.lambdaExpr.setValue(this.statementList=new StatementList(token));
        if (next == lambdaArrow) {
          this.mode=LAMBDA_TYPE_ARROW;
          return;
        }
        if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
          pm.skip();
          pm.pushParser(new ParameterListParser(this.lambdaExpr));
          this.mode=LAMBDA_PARAMETERS_END;
          return;
        }
        pm.pushParser(new ParameterListParser(this.lambdaExpr).withFlags(LAMBDA_ARROW_END));
        this.mode=LAMBDA_TYPE_ARROW;
        return;
      }
      this.statementList=this.closure ? new Closure(token) : new StatementList(token);
      this.mode=EXPRESSION;
      if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
        pm.report(token,""String_Node_Str"");
        pm.reparse();
      }
      return;
    }
case LAMBDA_PARAMETERS_END:
  this.mode=LAMBDA_TYPE_ARROW;
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
  pm.report(token,""String_Node_Str"");
}
return;
case LAMBDA_TYPE_ARROW:
if (type == DyvilSymbols.ARROW_RIGHT) {
pm.pushParser(LambdaOrTupleParser.returnTypeParser(this.lambdaExpr));
this.mode=LAMBDA_RETURN_ARROW;
return;
}
case LAMBDA_RETURN_ARROW:
if (type != DyvilSymbols.DOUBLE_ARROW_RIGHT) {
pm.report(token,""String_Node_Str"");
return;
}
this.mode=EXPRESSION;
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON || type == BaseSymbols.COMMA) {
return;
}
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
final TokenIterator tokens=pm.getTokens();
final MemberParser parser=new MemberParser<>(this).withFlag(NO_UNINITIALIZED_VARIABLES | OPERATOR_ERROR | NO_FIELD_PROPERTIES);
final TryParserManager parserManager=new TryParserManager(DyvilSymbols.INSTANCE,tokens);
tokens.jump(token);
if (parserManager.parse(parser,pm.getMarkers(),EXIT_ON_ROOT)) {
tokens.jump(tokens.lastReturned());
this.mode=SEPARATOR;
return;
}
parserManager.resetTo(token);
pm.pushParser(new ExpressionParser(this));
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
pm.report(token,""String_Node_Str"");
}
}",0.9805504587155964
84189,"private boolean success(){
  return !this.hasSyntaxErrors || this.reportErrors;
}","private boolean success(MarkerList markers){
  if (!this.hasSyntaxErrors || this.reportErrors) {
    markers.addAll(this.markers);
    return true;
  }
  return false;
}",0.6
84190,"public TryParserManager(Symbols symbols,TokenIterator tokens,MarkerList markers){
  super(symbols,tokens,markers);
}","@Deprecated public TryParserManager(Symbols symbols,TokenIterator tokens,MarkerList markers){
  super(symbols,tokens,markers);
}",0.9508196721311476
84191,"@Override public void report(Marker error){
  final boolean isError=error.isError();
  if (!this.hasSyntaxErrors && isError) {
    this.hasSyntaxErrors=true;
  }
  if (this.reportErrors || !isError) {
    super.report(error);
    this.reportedMarkers++;
  }
}","@Override public void report(Marker error){
  final boolean isError=error.isError();
  if (!this.hasSyntaxErrors && isError) {
    this.hasSyntaxErrors=true;
  }
  if (this.reportErrors || !isError) {
    super.report(error);
  }
}",0.9428571428571428
84192,"public boolean parse(Parser parser,int flags){
  this.parser=parser;
  this.hasSyntaxErrors=false;
  this.reportErrors=(flags & REPORT_ERRORS) != 0;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=this.tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if ((flags & EXIT_ON_ROOT) != 0) {
        return this.success();
      }
      this.reportUnparsed(token);
      continue;
    }
    if (!this.reportErrors && this.parser.reportErrors()) {
      if (this.hasSyntaxErrors) {
        return false;
      }
      this.reportErrors=true;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.reportError(token,ex);
      return this.success();
    }
    if (!this.success()) {
      return false;
    }
  }
  this.parseRemaining(token);
  return this.success();
}","public boolean parse(Parser parser,MarkerList markers,int flags){
  this.parser=parser;
  this.hasSyntaxErrors=false;
  this.markers=new MarkerList(markers.getI18n());
  this.reportErrors=(flags & REPORT_ERRORS) != 0;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=this.tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if ((flags & EXIT_ON_ROOT) != 0) {
        return this.success(markers);
      }
      this.reportUnparsed(token);
      continue;
    }
    if (!this.reportErrors && this.parser.reportErrors()) {
      if (this.hasSyntaxErrors) {
        return this.success(markers);
      }
      this.reportErrors=true;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.reportError(token,ex);
      return this.success(markers);
    }
    if (this.hasSyntaxErrors && !this.reportErrors) {
      return this.success(markers);
    }
  }
  this.parseRemaining(token);
  return this.success(markers);
}",0.8780713954566528
84193,"public void resetTo(IToken token){
  this.tokens.jump(token);
  if (this.reportedMarkers >= 0) {
    this.markers.remove(this.reportedMarkers);
  }
  if (this.splitTokens == null) {
    return;
  }
  for (  IToken splitToken : this.splitTokens) {
    splitToken.prev().setNext(splitToken);
    splitToken.next().setPrev(splitToken);
  }
  this.splitTokens.clear();
}","public void resetTo(IToken token){
  this.tokens.jump(token);
  if (this.splitTokens == null) {
    return;
  }
  for (  IToken splitToken : this.splitTokens) {
    splitToken.prev().setNext(splitToken);
    splitToken.next().setPrev(splitToken);
  }
  this.splitTokens.clear();
}",0.8668730650154799
84194,"public void add(Marker marker){
  if (marker.isError()) {
    this.errors++;
  }
  if (marker.isWarning()) {
    this.warnings++;
  }
  int index=this.markerCount++;
  if (index >= this.markers.length) {
    Marker[] temp=new Marker[this.markerCount];
    System.arraycopy(this.markers,0,temp,0,this.markers.length);
    this.markers=temp;
  }
  this.markers[index]=marker;
}","public void add(Marker marker){
  if (marker.isError()) {
    this.errors++;
  }
  if (marker.isWarning()) {
    this.warnings++;
  }
  int index=this.markerCount++;
  if (index >= this.markers.length) {
    Marker[] temp=new Marker[this.markerCount << 1];
    System.arraycopy(this.markers,0,temp,0,index);
    this.markers=temp;
  }
  this.markers[index]=marker;
}",0.9608636977058028
84195,"private boolean tryParse(MarkerList markers,TokenIterator tokens,Parser parser,boolean reportErrors){
  this.parser.reset(markers,tokens);
  this.parser.resetTo(tokens.first());
  return this.parser.parse(parser,reportErrors);
}","private boolean tryParse(MarkerList markers,TokenIterator tokens,Parser parser,boolean reportErrors){
  this.parser.reset(markers,tokens);
  this.parser.resetTo(tokens.first());
  return this.parser.parse(parser,markers,reportErrors ? TryParserManager.REPORT_ERRORS : 0);
}",0.8622754491017964
84196,"public static IValue convertValue(IValue value,IType type,ITypeContext typeContext,MarkerList markers,IContext context,MarkerSupplier markerSupplier){
  final IType concreteType=type.getConcreteType(typeContext);
  final IValue newValue=convertValueDirect(value,concreteType,typeContext,markers,context);
  if (newValue != null) {
    if (typeContext != null && !typeContext.isReadonly()) {
      type.inferTypes(newValue.getType(),typeContext);
    }
    return newValue;
  }
  if (value.isResolved()) {
    markers.add(markerSupplier.createMarker(value.getPosition(),type,value.getType()));
  }
  return value;
}","public static IValue convertValue(IValue value,IType type,ITypeContext typeContext,MarkerList markers,IContext context,MarkerSupplier markerSupplier){
  final IType concreteType=type.getConcreteType(typeContext);
  final IValue newValue=convertValueDirect(value,concreteType,typeContext,markers,context);
  if (newValue != null) {
    if (typeContext != null && !typeContext.isReadonly()) {
      type.inferTypes(newValue.getType(),typeContext);
    }
    return newValue;
  }
  if (value.isResolved()) {
    markers.add(markerSupplier.createMarker(value.getPosition(),concreteType,value.getType()));
  }
  return value;
}",0.9919093851132686
84197,"@Override public IValue resolve(MarkerList markers,IContext context){
switch (this.operatorCount) {
case 0:
    return this.operands[0];
case 1:
  return createCall(this.operators[0],this.operands[0],this.operands[1]).resolve(markers,context);
}
final Stack<OperatorElement> operatorStack=new LinkedList<>();
final Stack<IValue> operandStack=new LinkedList<>();
operandStack.push(this.operands[0]);
for (int i=0; i < this.operatorCount; i++) {
final OperatorElement element1=this.operators[i];
OperatorElement element2;
while (!operatorStack.isEmpty()) {
  element2=operatorStack.peek();
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0 || element1.operator.getAssociativity() != IOperator.RIGHT && comparePrecedence == 0) {
    operatorStack.pop();
    this.pushCall(operandStack,element2);
  }
 else {
    break;
  }
}
operatorStack.push(element1);
operandStack.push(this.operands[i + 1]);
}
while (!operatorStack.isEmpty()) {
this.pushCall(operandStack,operatorStack.pop());
}
return operandStack.pop().resolve(markers,context);
}","@Override public IValue resolve(MarkerList markers,IContext context){
switch (this.operatorCount) {
case 0:
    return this.operands[0];
case 1:
  return createCall(this.operators[0],this.operands[0],this.operands[1]).resolve(markers,context);
}
final Stack<OperatorElement> operatorStack=new LinkedList<>();
final Stack<IValue> operandStack=new LinkedList<>();
operandStack.push(this.operands[0]);
for (int i=0; i < this.operatorCount; i++) {
final OperatorElement element1=this.operators[i];
OperatorElement element2;
while (!operatorStack.isEmpty()) {
  element2=operatorStack.peek();
  final int comparePrecedence=element1.operator.comparePrecedence(element2.operator);
  if (comparePrecedence < 0) {
    operatorStack.pop();
    this.pushCall(operandStack,element2);
    continue;
  }
  if (comparePrecedence == 0) {
switch (element1.operator.getAssociativity()) {
case IOperator.NONE:
      markers.add(Markers.semantic(element1.position,""String_Node_Str"",element1.name));
case IOperator.LEFT:
    operatorStack.pop();
  this.pushCall(operandStack,element2);
continue;
}
}
break;
}
operatorStack.push(element1);
operandStack.push(this.operands[i + 1]);
}
while (!operatorStack.isEmpty()) {
this.pushCall(operandStack,operatorStack.pop());
}
return operandStack.pop().resolve(markers,context);
}",0.8448707256046706
84198,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.left=this.left.resolve(markers,context);
  this.right=this.right.resolve(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.left != null) {
    this.left=this.left.resolve(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
    this.left=new WildcardValue(this.position);
  }
  if (this.right != null) {
    this.right=this.right.resolve(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
    this.right=new WildcardValue(this.position);
  }
  return this;
}",0.4415954415954416
84199,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.left.resolveTypes(markers,context);
  this.right.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.left != null) {
    this.left.resolveTypes(markers,context);
  }
  if (this.right != null) {
    this.right.resolveTypes(markers,context);
  }
}",0.8277634961439588
84200,"@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  final IClass theClass=this.type.getTheClass();
  if (theClass == null) {
    return;
  }
  for (int i=0, count=theClass.parameterCount(); i < count; i++) {
    final IParameter parameter=theClass.getParameter(i);
    final IType parameterType=parameter.getType();
    final IValue value=this.arguments.getValue(i,parameter);
    if (value == null) {
      if (parameter.getValue() == null) {
        markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type,parameter.getName()));
      }
      continue;
    }
    IValue typedValue=value.withType(parameterType,parameterType,markers,context);
    if (typedValue == null) {
      markers.add(TypeChecker.typeError(value,parameterType,parameterType,""String_Node_Str"",parameter.getName()));
      continue;
    }
    typedValue=Util.constant(typedValue,markers,context);
    if (typedValue != value) {
      this.arguments.setValue(i,parameter,typedValue);
    }
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  final IClass theClass;
  if (this.type == null || (theClass=this.type.getTheClass()) == null) {
    return;
  }
  for (int i=0, count=theClass.parameterCount(); i < count; i++) {
    final IParameter parameter=theClass.getParameter(i);
    final IType parameterType=parameter.getType();
    final IValue value=this.arguments.getValue(i,parameter);
    if (value == null) {
      if (parameter.getValue() == null) {
        markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type,parameter.getName()));
      }
      continue;
    }
    IValue typedValue=value.withType(parameterType,parameterType,markers,context);
    if (typedValue == null) {
      markers.add(TypeChecker.typeError(value,parameterType,parameterType,""String_Node_Str"",parameter.getName()));
      continue;
    }
    typedValue=Util.constant(typedValue,markers,context);
    if (typedValue != value) {
      this.arguments.setValue(i,parameter,typedValue);
    }
  }
}",0.9740198393953708
84201,"@Override public void check(MarkerList markers,IContext context,ElementType target){
  if (this.type == null || !this.type.isResolved()) {
    return;
  }
  IClass theClass=this.type.getTheClass();
  if (!theClass.hasModifier(Modifiers.ANNOTATION)) {
    markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.getName()));
    return;
  }
  if (target == null) {
    return;
  }
  IClassMetadata metadata=theClass.getMetadata();
  if (!metadata.isTarget(target)) {
    Marker error=Markers.semantic(this.position,""String_Node_Str"",this.type.getName());
    error.addInfo(Markers.getSemantic(""String_Node_Str"",target));
    error.addInfo(Markers.getSemantic(""String_Node_Str"",metadata.getTargets()));
    markers.add(error);
  }
}","@Override public void check(MarkerList markers,IContext context,ElementType target){
  if (this.type == null || !this.type.isResolved()) {
    return;
  }
  final IClass theClass=this.type.getTheClass();
  if (!theClass.hasModifier(Modifiers.ANNOTATION)) {
    markers.add(Markers.semanticError(this.position,""String_Node_Str"",this.type.getName()));
    return;
  }
  if (target == null) {
    return;
  }
  final IClassMetadata metadata=theClass.getMetadata();
  if (!metadata.isTarget(target)) {
    final Marker error=Markers.semanticError(this.position,""String_Node_Str"",this.type.getName());
    error.addInfo(Markers.getSemantic(""String_Node_Str"",target));
    error.addInfo(Markers.getSemantic(""String_Node_Str"",metadata.getTargets()));
    markers.add(error);
  }
}",0.9815546772068512
84202,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.CLASS);
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.checkType(markers,context,TypePosition.CLASS);
  }
  this.arguments.checkTypes(markers,context);
}",0.9147286821705426
84203,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
  this.arguments.resolveTypes(markers,context);
}",0.7081545064377682
84204,"public static void checkMethodModifiers(MarkerList markers,IClassMember member,int modifiers,boolean hasValue){
  boolean isStatic=(modifiers & Modifiers.STATIC) != 0;
  boolean isAbstract=(modifiers & Modifiers.ABSTRACT) != 0;
  boolean isNative=(modifiers & Modifiers.NATIVE) != 0;
  if (isStatic && isAbstract) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else   if (isAbstract && isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else {
    if (isStatic) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isNative) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isAbstract) {
      IClass theClass=member.getEnclosingClass();
      if (!theClass.isAbstract()) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member),theClass.getName()));
      }
      if (hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
  }
  if (!hasValue && !isAbstract && !isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
}","public static void checkMethodModifiers(MarkerList markers,IClassMember member,int modifiers,boolean hasValue){
  boolean isStatic=(modifiers & Modifiers.STATIC) != 0;
  boolean isAbstract=(modifiers & Modifiers.ABSTRACT) != 0;
  boolean isNative=(modifiers & Modifiers.NATIVE) != 0;
  if (isStatic && isAbstract) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else   if (isAbstract && isNative) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
 else {
    if (isStatic) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isNative) {
      if (!hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
    if (isAbstract) {
      IClass theClass=member.getEnclosingClass();
      if (!theClass.isAbstract()) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member),theClass.getName()));
      }
      if (hasValue) {
        markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
      }
    }
  }
  if (!hasValue && !isAbstract && !isNative&& !isStatic) {
    markers.add(Markers.semanticError(member.getPosition(),""String_Node_Str"",Util.memberNamed(member)));
  }
}",0.9959128065395096
84205,"protected void parseRemaining(IToken token){
  if (token == null || this.hasStopped) {
    return;
  }
  while (this.parser != null) {
    token=token.next();
    Parser prevParser=this.parser;
    int mode=prevParser.getMode();
    prevParser.parse(this,token);
    if (this.parser == prevParser && this.parser.getMode() == mode) {
      break;
    }
  }
}","protected void parseRemaining(IToken token){
  if (token == null || this.hasStopped) {
    return;
  }
  while (this.parser != null) {
    token=token.next();
    Parser prevParser=this.parser;
    int mode=prevParser.getMode();
    this.tryParse(token,prevParser);
    if (this.parser == prevParser && this.parser.getMode() == mode) {
      break;
    }
  }
}",0.9232914923291492
84206,"public final void parse(TokenIterator tokens){
  this.tokens=tokens;
  IToken token=null;
  while (!this.hasStopped) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if (token != null && !token.isInferred()) {
        this.report(Markers.syntaxError(token,""String_Node_Str"",token));
      }
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      this.report(Markers.parserError(token,ex));
    }
  }
  this.parseRemaining(token);
}","public final void parse(TokenIterator tokens){
  this.tokens=tokens;
  IToken token=null;
  while (!this.hasStopped) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      if (!this.tokens.hasNext()) {
        break;
      }
      token=tokens.next();
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    if (this.parser == null) {
      if (token != null && !token.isInferred()) {
        this.report(Markers.syntaxError(token,""String_Node_Str"",token));
      }
      continue;
    }
    this.tryParse(token,this.parser);
  }
  this.parseRemaining(token);
}",0.8803088803088803
84207,"@Override public boolean isResolved(){
  return this.value.isResolved();
}","@Override public boolean isResolved(){
  return this.value == null || this.value.isResolved();
}",0.8705882352941177
84208,"protected static IValue resolveCall(MarkerList markers,IContext context,ICodePosition position,IValue receiver,Name name,IArguments arguments){
  if (!receiver.isResolved()) {
    return null;
  }
  if (arguments.isEmpty()) {
    return null;
  }
  int type=receiver.valueTag();
  if (type == IValue.APPLY_CALL) {
    ApplyMethodCall applyCall=(ApplyMethodCall)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue applyReceiver=applyCall.receiver=helper.processValue(applyCall.receiver);
    IArguments applyArguments=applyCall.arguments=helper.processArguments(applyCall.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(position,applyReceiver,applyArguments.withLastValue(Names.update,op)).resolveCall(markers,context);
    return helper.finish(update);
  }
 else   if (type == IValue.SUBSCRIPT_GET) {
    SubscriptAccess subscriptAccess=(SubscriptAccess)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue subscriptReceiver=subscriptAccess.receiver=helper.processValue(subscriptAccess.receiver);
    IArguments subscriptArguments=subscriptAccess.arguments=helper.processArguments(subscriptAccess.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    IArguments subscriptSetterArguments=subscriptArguments.withLastValue(Names.subscript_$eq,op);
    IValue subscript=new SubscriptAssignment(position,subscriptReceiver,subscriptSetterArguments).resolveCall(markers,context);
    return helper.finish(subscript);
  }
 else   if (type == IValue.FIELD_ACCESS) {
    final FieldAccess fieldAccess=(FieldAccess)receiver;
    final IncOperator op=getIncOperator(name,arguments,fieldAccess);
    if (op != null) {
      op.setPosition(position);
      return op.resolveOperator(markers,context);
    }
    final SideEffectHelper helper=new SideEffectHelper();
    final IValue fieldReceiver=fieldAccess.receiver=helper.processValue(fieldAccess.receiver);
    final IValue methodCall=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (methodCall == null) {
      return null;
    }
    final FieldAssignment assignment=new FieldAssignment(position,fieldReceiver,fieldAccess.field,methodCall);
    return helper.finish(assignment);
  }
  return null;
}","protected static IValue resolveCall(MarkerList markers,IContext context,ICodePosition position,IValue receiver,Name name,IArguments arguments){
  if (!receiver.isResolved()) {
    return null;
  }
  if (arguments.isEmpty()) {
    return null;
  }
  int type=receiver.valueTag();
  if (type == IValue.APPLY_CALL) {
    ApplyMethodCall applyCall=(ApplyMethodCall)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue applyReceiver=applyCall.receiver=helper.processValue(applyCall.receiver);
    IArguments applyArguments=applyCall.arguments=helper.processArguments(applyCall.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (op == null) {
      return null;
    }
    IValue update=new UpdateMethodCall(position,applyReceiver,applyArguments.withLastValue(Names.update,op)).resolveCall(markers,context);
    return helper.finish(update);
  }
 else   if (type == IValue.SUBSCRIPT_GET) {
    SubscriptAccess subscriptAccess=(SubscriptAccess)receiver;
    SideEffectHelper helper=new SideEffectHelper();
    IValue subscriptReceiver=subscriptAccess.receiver=helper.processValue(subscriptAccess.receiver);
    IArguments subscriptArguments=subscriptAccess.arguments=helper.processArguments(subscriptAccess.arguments);
    IValue op=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (op == null) {
      return null;
    }
    IArguments subscriptSetterArguments=subscriptArguments.withLastValue(Names.subscript_$eq,op);
    IValue subscript=new SubscriptAssignment(position,subscriptReceiver,subscriptSetterArguments).resolveCall(markers,context);
    return helper.finish(subscript);
  }
 else   if (type == IValue.FIELD_ACCESS) {
    final FieldAccess fieldAccess=(FieldAccess)receiver;
    final IncOperator op=getIncOperator(name,arguments,fieldAccess);
    if (op != null) {
      op.setPosition(position);
      return op.resolveOperator(markers,context);
    }
    final SideEffectHelper helper=new SideEffectHelper();
    final IValue fieldReceiver=fieldAccess.receiver=helper.processValue(fieldAccess.receiver);
    final IValue methodCall=new MethodCall(position,receiver,name,arguments).resolveCall(markers,context);
    if (methodCall == null) {
      return null;
    }
    final FieldAssignment assignment=new FieldAssignment(position,fieldReceiver,fieldAccess.field,methodCall);
    return helper.finish(assignment);
  }
  return null;
}",0.980546357615894
84209,"@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType elementType=type.resolveTypeSafely(tupleClass.getTypeParameter(i));
    IPattern pattern=this.patterns[i];
    IPattern typedPattern=pattern.withType(elementType,markers);
    if (typedPattern == null) {
      Marker m=Markers.semantic(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",pattern.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType));
      markers.add(m);
    }
 else {
      this.patterns[i]=typedPattern;
    }
  }
  return this;
}","@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (tupleClass == null || !tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType elementType=type.resolveTypeSafely(tupleClass.getTypeParameter(i));
    IPattern pattern=this.patterns[i];
    IPattern typedPattern=pattern.withType(elementType,markers);
    if (typedPattern == null) {
      Marker m=Markers.semantic(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",pattern.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType));
      markers.add(m);
    }
 else {
      this.patterns[i]=typedPattern;
    }
  }
  return this;
}",0.986284289276808
84210,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralConversion(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=iclass == dyvil.tools.compiler.ast.type.builtin.Types.OBJECT_CLASS ? dyvil.tools.compiler.ast.type.builtin.Types.ANY : type.resolveTypeSafely(iclass.getTypeParameter(i));
    IValue value=this.values[i];
    IValue value1=IType.convertValue(value,elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",value.getType()));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",elementType.getConcreteType(typeContext)));
      markers.add(m);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  this.tupleType=null;
  this.tupleType=this.getType();
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  final IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralConversion(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  if (!type.isSuperTypeOf(this.getType())) {
    return null;
  }
  final IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    final IType elementType=iclass == dyvil.tools.compiler.ast.type.builtin.Types.OBJECT_CLASS ? dyvil.tools.compiler.ast.type.builtin.Types.ANY : type.resolveTypeSafely(iclass.getTypeParameter(i));
    final IValue value=this.values[i];
    final IValue typedValue=IType.convertValue(value,elementType,typeContext,markers,context);
    if (typedValue != null) {
      this.values[i]=typedValue;
    }
 else     if (value.isResolved()) {
      final Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",value.getType()));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",elementType.getConcreteType(typeContext)));
      markers.add(marker);
    }
  }
  return this;
}",0.8028379387602689
84211,"@Override public IType getSimpleRefType(){
  if (this.simpleRefType != null) {
    return this.simpleRefType;
  }
  final String className=""String_Node_Str"" + this.classPrefix() + ""String_Node_Str"";
  return this.simpleRefType=new ClassType(Package.dyvilRefSimple.resolveClass(className));
}","@Override public IType getSimpleRefType(){
  if (this.simpleRefType != null) {
    return this.simpleRefType;
  }
  final String className=""String_Node_Str"" + this.getTypePrefix() + ""String_Node_Str"";
  return this.simpleRefType=new ClassType(Package.dyvilRefSimple.resolveClass(className));
}",0.9794520547945206
84212,"@Override public IClass getArrayClass(){
  IClass iclass=this.arrayClass;
  if (iclass == null) {
    String className=this.classPrefix() + ""String_Node_Str"";
    return this.arrayClass=Package.dyvilArray.resolveClass(className);
  }
  return iclass;
}","@Override public IClass getArrayClass(){
  IClass iclass=this.arrayClass;
  if (iclass == null) {
    final String className=this.getTypePrefix() + ""String_Node_Str"";
    return this.arrayClass=Package.dyvilArray.resolveClass(className);
  }
  return iclass;
}",0.96484375
84213,"@Override public IClass getRefClass(){
  if (this.refClass != null) {
    return this.refClass;
  }
  final String className=this.classPrefix() + ""String_Node_Str"";
  return this.refClass=Package.dyvilRef.resolveClass(className);
}","@Override public IClass getRefClass(){
  if (this.refClass != null) {
    return this.refClass;
  }
  final String className=this.getTypePrefix() + ""String_Node_Str"";
  return this.refClass=Package.dyvilRef.resolveClass(className);
}",0.9741379310344828
84214,"public static String getInternalRef(IType type,String prefix){
  return ""String_Node_Str"" + prefix + getTypeRefKeyword(type)+ ""String_Node_Str"";
}","public static String getInternalRef(IType type,String prefix){
  return ""String_Node_Str"" + prefix + type.getTypePrefix()+ ""String_Node_Str"";
}",0.9273356401384084
84215,"public static String getReferenceFactoryName(IType type,String prefix){
  return ""String_Node_Str"" + prefix + getTypeRefKeyword(type)+ ""String_Node_Str"";
}","public static String getReferenceFactoryName(IType type,String prefix){
  return ""String_Node_Str"" + prefix + type.getTypePrefix()+ ""String_Node_Str"";
}",0.9315960912052116
84216,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  return this;
}",0.8785276073619632
84217,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  final IClass iclass=this.type.getTheClass();
  if (iclass != null && iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}",0.8776371308016878
84218,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
}",0.6018518518518519
84219,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  final Name name=this.type.getName();
  final IDataMember field=context.resolveField(name);
  if (field != null) {
    final FieldAccess fieldAccess=new FieldAccess(this.position);
    fieldAccess.name=name;
    fieldAccess.field=field;
    return fieldAccess;
  }
  final IMethod method=IContext.resolveMethod(context,null,name,EmptyArguments.INSTANCE);
  if (method != null) {
    final MethodCall methodCall=new MethodCall(this.position);
    methodCall.name=name;
    methodCall.method=method;
    methodCall.dotless=true;
    methodCall.arguments=EmptyArguments.INSTANCE;
    return methodCall;
  }
  return this;
}",0.8785276073619632
84220,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (!this.type.isResolved()) {
    return;
  }
  final IClass iclass=this.type.getTheClass();
  if (iclass != null && iclass.hasModifier(Modifiers.OBJECT_CLASS)) {
    return;
  }
  markers.add(Markers.semantic(this.position,""String_Node_Str"",this.type.toString()));
}",0.8776371308016878
84221,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (!this.type.isResolved()) {
    markers.add(Markers.semantic(this.position,this.type.isArrayType() ? ""String_Node_Str"" : ""String_Node_Str"",this.type.toString()));
  }
}",0.6018518518518519
84222,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    this.value=this.type.getDefaultValue();
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.7475538160469667
84223,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,context);
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    this.value=this.type.getDefaultValue();
    markers.add(Markers.semanticError(this.position,""String_Node_Str""));
  }
}",0.7475538160469667
84224,"@Override public IValue resolveCall(MarkerList markers,IContext context){
  IClass iclass=context.getThisClass();
  if (this.isSuper) {
    iclass=iclass.getSuperType().getTheClass();
  }
  IConstructor match=IContext.resolveConstructor(iclass,this.arguments);
  if (match != null) {
    this.constructor=match;
    this.checkArguments(markers,context);
    return this;
  }
  return null;
}","@Override public IValue resolveCall(MarkerList markers,IContext context){
  IClass iclass=context.getThisClass();
  if (iclass == null) {
    return null;
  }
  if (this.isSuper) {
    iclass=iclass.getSuperType().getTheClass();
    if (iclass == null) {
      return null;
    }
  }
  final IConstructor match=IContext.resolveConstructor(iclass,this.arguments);
  if (match != null) {
    this.constructor=match;
    this.checkArguments(markers,context);
    return this;
  }
  return null;
}",0.8846153846153846
84225,"@Override public int getSuperTypeDistance(IType superType){
  IClass iclass=superType.getTheClass();
  if (this == iclass) {
    return 1;
  }
  int max=this.superType != null ? superType.getSubClassDistance(this.superType) : 0;
  if (!iclass.isInterface()) {
    return max;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    int m=superType.getSubClassDistance(this.interfaces[i]);
    if (m > max) {
      max=m;
    }
  }
  return max == 0 ? 0 : 1 + max;
}","@Override public int getSuperTypeDistance(IType superType){
  IClass iclass=superType.getTheClass();
  if (iclass == null) {
    return 0;
  }
  if (this == iclass) {
    return 1;
  }
  int max=this.superType != null ? superType.getSubClassDistance(this.superType) : 0;
  if (!iclass.isInterface()) {
    return max;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    int m=superType.getSubClassDistance(this.interfaces[i]);
    if (m > max) {
      max=m;
    }
  }
  return max == 0 ? 0 : 1 + max;
}",0.9567901234567902
84226,"@Override public boolean checkImplements(MarkerList markers,IClass checkedClass,IMethod candidate,ITypeContext typeContext){
  if (candidate.getTheClass() == this) {
    return !candidate.hasModifier(Modifiers.ABSTRACT);
  }
  if (this.body != null && this.body.checkImplements(markers,checkedClass,candidate,typeContext)) {
    return true;
  }
  if (this.superType != null) {
    if (this.superType.getTheClass().checkImplements(markers,checkedClass,candidate,this.superType.getConcreteType(typeContext))) {
      return true;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    final IType interfaceType=this.interfaces[i];
    if (interfaceType.getTheClass().checkImplements(markers,checkedClass,candidate,interfaceType.getConcreteType(typeContext))) {
      return true;
    }
  }
  return false;
}","@Override public boolean checkImplements(MarkerList markers,IClass checkedClass,IMethod candidate,ITypeContext typeContext){
  if (candidate.getTheClass() == this) {
    return !candidate.hasModifier(Modifiers.ABSTRACT);
  }
  if (this.body != null && this.body.checkImplements(markers,checkedClass,candidate,typeContext)) {
    return true;
  }
  if (this.superType != null) {
    final IClass superClass=this.superType.getTheClass();
    if (superClass != null && superClass.checkImplements(markers,checkedClass,candidate,this.superType.getConcreteType(typeContext))) {
      return true;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    final IType interfaceType=this.interfaces[i];
    final IClass interfaceClass=interfaceType.getTheClass();
    if (interfaceClass != null && interfaceClass.checkImplements(markers,checkedClass,candidate,interfaceType.getConcreteType(typeContext))) {
      return true;
    }
  }
  return false;
}",0.9137343927355278
84227,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,position,context,instance,arguments,typeContext);
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue receiver,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,position,context,receiver,arguments,typeContext);
}",0.9588688946015425
84228,"@Override public boolean isSuperTypeOf(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean isSuperTypeOf(IType type){
  return this.isSameType(type);
}",0.7668393782383419
84229,"@Override public boolean classEquals(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean classEquals(IType type){
  return this.isSameType(type);
}",0.7619047619047619
84230,"@Override public boolean isSameType(IType type){
  return this.typeParameter == type.getTypeVariable();
}","@Override public boolean isSameType(IType type){
  return this.typeParameter == type.getReturnType().getTypeVariable();
}",0.9292035398230089
84231,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if (this.modifiers.hasIntModifier(Modifiers.PREFIX) && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if (this.isVarargs()) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((mod & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IValue instance1=IType.convertValue(instance,this.receiverType,typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.receiverType,typeContext,""String_Node_Str"",this.name);
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisExpr(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.isVarargs()) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue receiver,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if (this.modifiers.hasIntModifier(Modifiers.PREFIX) && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(receiver);
    receiver=argument;
  }
  if (receiver != null) {
    int mod=this.modifiers.toFlags() & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && receiver.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(receiver,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,receiver,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        receiver=instance1;
      }
      if (this.isVarargs()) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return receiver;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return receiver;
    }
    if ((mod & Modifiers.STATIC) != 0) {
      if (receiver.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
 else       if (receiver.getType().getTheClass() != this.theClass) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      receiver=null;
    }
 else     if (receiver.valueTag() == IValue.CLASS_ACCESS) {
      if (!receiver.getType().getTheClass().isObject()) {
        markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
      }
    }
 else {
      final IValue typedReceiver=IType.convertValue(receiver,this.receiverType,typeContext,markers,context);
      if (typedReceiver == null) {
        Util.createTypeError(markers,receiver,this.receiverType,typeContext,""String_Node_Str"",this.name);
      }
 else {
        receiver=typedReceiver;
      }
    }
  }
 else   if (!this.modifiers.hasIntModifier(Modifiers.STATIC)) {
    if (context.isStatic()) {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(Markers.semantic(position,""String_Node_Str"",this.name.unqualified));
      receiver=new ThisExpr(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.isVarargs()) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return receiver;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return receiver;
}",0.9370525059665872
84232,"public void setAction(IValue action){
  this.action=action;
}","@Override public void setAction(IValue action){
  this.action=action;
}",0.9242424242424242
84233,"@Override public IValue resolve(MarkerList markers,IContext context){
  IType varType=this.variable.getType();
  IValue value=this.variable.getValue().resolve(markers,context);
  this.variable.setValue(value);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.getFirstValue();
    IValue value2=ro.getLastValue();
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.combine(value1.getType(),value2.getType());
      }
      this.variable.setType(varType=rangeType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (rangeType != Types.UNKNOWN && !varType.isSuperTypeOf(rangeType)) {
      Marker marker=Markers.semantic(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",rangeType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    RangeForStatement rfs=new RangeForStatement(this.position,this.variable,value1,value2,ro.isHalfOpen());
    rfs.resolveAction(this.action,markers,context);
    return rfs;
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=valueType.getElementType());
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(valueType.getElementType())) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    ArrayForStatement afs=new ArrayForStatement(this.position,this.variable,valueType);
    afs.resolveAction(this.action,markers,context);
    return afs;
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveTypeSafely(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=iterableType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",iterableType));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(m);
    }
    IterableForStatement ifs=new IterableForStatement(this.position,this.variable);
    ifs.resolveAction(this.action,markers,context);
    return ifs;
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(Types.CHAR);
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    StringForStatement sfs=new StringForStatement(this.position,this.variable);
    sfs.resolveAction(this.action,markers,context);
    return sfs;
  }
  Marker marker=Markers.semantic(this.variable.getPosition(),""String_Node_Str"");
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
  markers.add(marker);
  this.resolveAction(this.action,markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  IType varType=this.variable.getType();
  IValue value=this.variable.getValue().resolve(markers,context);
  this.variable.setValue(value);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.getFirstValue();
    IValue value2=ro.getLastValue();
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.combine(value1.getType(),value2.getType());
      }
      this.variable.setType(varType=rangeType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (rangeType != Types.UNKNOWN && !varType.isSuperTypeOf(rangeType)) {
      Marker marker=Markers.semantic(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",rangeType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    RangeForStatement rfs=new RangeForStatement(this.position,this.variable,value1,value2,ro.isHalfOpen());
    rfs.resolveAction(this.action,markers,context);
    return rfs;
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=valueType.getElementType());
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(valueType.getElementType())) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    ArrayForStatement afs=new ArrayForStatement(this.position,this.variable,valueType);
    afs.resolveAction(this.action,markers,context);
    return afs;
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    final IType iterableType=valueType.resolveTypeSafely(IterableForStatement.ITERABLE_TYPE).getReturnType();
    if (varType == Types.UNKNOWN) {
      this.variable.setType(varType=iterableType);
      if (varType == Types.UNKNOWN) {
        markers.add(Markers.semantic(this.variable.getPosition(),""String_Node_Str"",this.variable.getName()));
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=Markers.semantic(value.getPosition(),""String_Node_Str"");
      m.addInfo(Markers.getSemantic(""String_Node_Str"",iterableType));
      m.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(m);
    }
    IterableForStatement ifs=new IterableForStatement(this.position,this.variable);
    ifs.resolveAction(this.action,markers,context);
    return ifs;
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.setType(Types.CHAR);
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=Markers.semantic(value.getPosition(),""String_Node_Str"");
      marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
      markers.add(marker);
    }
    StringForStatement sfs=new StringForStatement(this.position,this.variable);
    sfs.resolveAction(this.action,markers,context);
    return sfs;
  }
  Marker marker=Markers.semantic(this.variable.getPosition(),""String_Node_Str"");
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",varType));
  marker.addInfo(Markers.getSemantic(""String_Node_Str"",valueType));
  markers.add(marker);
  this.resolveAction(this.action,markers,context);
  return this;
}",0.9970791290493892
84234,"public IValue getAction(){
  return this.action;
}","@Override public IValue getAction(){
  return this.action;
}",0.9090909090909092
84235,"@Override default IType resolveType(MarkerList markers,IContext context){
  return null;
}","@Override default IType resolveType(ITypeParameter typeParameter){
  final IClass theClass=this.getTheClass();
  return theClass == null ? null : theClass.resolveType(typeParameter,this);
}",0.4516129032258064
84236,"/** 
 * @return the descriptor that contains the captured instance and capturedvariables (if present) as the argument types and the instantiated method type as the return type.
 */
private String getInvokeDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendThisCaptureType(buffer);
  this.captureHelper.appendCaptureTypes(buffer);
  buffer.append(')');
  this.type.appendExtendedName(buffer);
  return buffer.toString();
}","/** 
 * @return the descriptor that contains the captured instance and captured variables (if present) as the argumenttypes and the instantiated method type as the return type.
 */
private String getInvokeDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendThisCaptureType(buffer);
  this.captureHelper.appendCaptureTypes(buffer);
  buffer.append(')');
  this.type.appendExtendedName(buffer);
  return buffer.toString();
}",0.9979035639412998
84237,"/** 
 * @return the descriptor of the (synthetic) lambda callback method,including captured variables, parameter types and the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendCaptureTypes(buffer);
  for (int i=this.directInvokeOpcode != 0 && this.directInvokeOpcode != Opcodes.INVOKESTATIC ? 1 : 0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}","/** 
 * @return the descriptor of the (synthetic) lambda callback method, including captured variables, parameter typesand the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  this.captureHelper.appendCaptureTypes(buffer);
  for (int i=this.directInvokeOpcode != 0 && this.directInvokeOpcode != Opcodes.INVOKESTATIC ? 1 : 0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}",0.9987228607918264
84238,"/** 
 * @return the specialized method type of the SAM method, as opposed to{@link IMethod#getDescriptor()}.
 */
private String getSpecialDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  this.returnType.appendExtendedName(buffer);
  return buffer.toString();
}","/** 
 * @return the specialized method type of the SAM method, as opposed to {@link IMethod#getDescriptor()}.
 */
private String getSpecialDescriptor(){
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  this.returnType.appendExtendedName(buffer);
  return buffer.toString();
}",0.998833138856476
84239,"@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,context);
  }
  this.value.resolveTypes(markers,new CombiningContext(this,context));
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    if (param.getType() == Types.UNKNOWN) {
      param.setType(null);
      param.resolveTypes(markers,context);
      param.setType(Types.UNKNOWN);
    }
 else {
      param.resolveTypes(markers,context);
    }
  }
  this.value.resolveTypes(markers,new CombiningContext(this,context));
}",0.7643835616438356
84240,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
  ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.VARIABLE_MODIFIERS);
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
  if (this.modifiers != null) {
    ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.VARIABLE_MODIFIERS);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,""String_Node_Str""));
  }
}",0.9455587392550144
84241,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  ModifierUtil.checkModifiers(markers,this,this.modifiers,Modifiers.PARAMETER_MODIFIERS);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,this.getKind().getName() + ""String_Node_Str""));
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(Markers.semantic(this.position,this.getKind().getName() + ""String_Node_Str""));
  }
}",0.8753462603878116
84242,"protected void compute(DyvilREPL repl,List<IClassCompilable> compilableList){
  if (this.isConstant() && !compilableList.isEmpty()) {
    return;
  }
  try {
    this.theClass=this.generateClass(this.className,compilableList);
    this.updateValue(repl);
  }
 catch (  Throwable t) {
    filterStackTrace(t);
    t.printStackTrace(repl.getOutput());
  }
}","protected void compute(DyvilREPL repl,List<IClassCompilable> compilableList){
  if (this.isConstant() && !compilableList.isEmpty()) {
    return;
  }
  try {
    this.theClass=this.generateClass(this.className,compilableList);
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace(repl.getErrorOutput());
  }
  try {
    this.updateValue(repl);
  }
 catch (  Throwable t) {
    filterStackTrace(t);
    t.printStackTrace(repl.getOutput());
  }
}",0.7330873308733087
84243,"@Override public boolean isUsableAsStatement(){
  for (int i=0; i < this.caseCount; i++) {
    if (!this.cases[i].action.isUsableAsStatement()) {
      return false;
    }
  }
  return true;
}","@Override public boolean isUsableAsStatement(){
  for (int i=0; i < this.caseCount; i++) {
    final IValue action=this.cases[i].action;
    if (action != null && !action.isUsableAsStatement()) {
      return false;
    }
  }
  return true;
}",0.8018433179723502
84244,"@Override public void resolveStatement(ILabelContext context,MarkerList markers){
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].action.resolveStatement(context,markers);
  }
}","@Override public void resolveStatement(ILabelContext context,MarkerList markers){
  for (int i=0; i < this.caseCount; i++) {
    final IValue action=this.cases[i].action;
    if (action != null) {
      action.resolveStatement(context,markers);
    }
  }
}",0.852017937219731
84245,"public static void parse(String content,Map<String,Object> map){
  Parser parser=new Parser(new MarkerList(),content);
  FlatMapConverter converter=new FlatMapConverter(map);
  parser.parseFileNode(converter);
}","public static void parse(String content,Map<String,Object> map){
  Parser parser=new Parser(new MarkerList(),content);
  FlatMapConverter converter=new FlatMapConverter(map);
  parser.parseNodeBody(converter);
}",0.981042654028436
84246,"private void parseNodeBody(NodeVisitor visitor){
  while (true) {
    if (!(this.tokens.hasNext() && this.parseNodeElement(visitor))) {
      break;
    }
  }
  visitor.visitEnd();
}","public void parseNodeBody(NodeVisitor visitor){
  while (true) {
    if (!(this.tokens.hasNext() && this.parseNodeElement(visitor))) {
      break;
    }
  }
  visitor.visitEnd();
}",0.975206611570248
84247,"public Parser(MarkerList markers,String code){
  this.markers=markers;
  DyvilLexer lexer=new DyvilLexer(markers,BaseSymbols.INSTANCE);
  this.tokens=lexer.tokenize(code);
}","public Parser(MarkerList markers,String code){
  this.markers=markers;
  final DyvilLexer lexer=new DyvilLexer(markers,BaseSymbols.INSTANCE);
  this.tokens=lexer.tokenize(code);
}",0.9829545454545454
84248,"private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  if (token.type() == BaseSymbols.CLOSE_PARENTHESIS) {
    this.tokens.next();
    visitor.visitEnd();
    return;
  }
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
continue;
}
}
}","private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  if (token.type() == BaseSymbols.CLOSE_PARENTHESIS) {
    this.tokens.next();
    visitor.visitEnd();
    return;
  }
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
}
}
}",0.9929775280898876
84249,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(prevType) && primitiveType == primitiveValue) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  if (this.value == null) {
    return this;
  }
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType valueType=this.value.getType();
  final IValue typedValue=this.value.withType(this.type,this.type,markers,context);
  if (typedValue != null) {
    this.value=typedValue;
    final IType newType=typedValue.getType();
    if (!valueType.isSameType(newType) && this.type.isSuperClassOf(newType) && newType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=newType;
      return this;
    }
    valueType=newType;
  }
  final boolean primitiveType=this.type.isPrimitive();
  final boolean primitiveValue=this.value.isPrimitive();
  if (typedValue == null && !(primitiveType && primitiveValue) && !valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(valueType) && primitiveType == primitiveValue) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}",0.8955661414437522
84250,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
}",0.89171974522293
84251,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.TYPE);
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
}",0.91005291005291
84252,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.value.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    this.type=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
}",0.5227272727272727
84253,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
  }
  return this;
}",0.7903614457831325
84254,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
  if (this.type.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str"",valueType,this.type));
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.check(markers,context);
    if (this.type.isPrimitive()) {
      markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
      return;
    }
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  if (this.value != null) {
    this.value.check(markers,context);
  }
 else {
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
    return;
  }
  final IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str"",valueType,this.type));
  }
}",0.7488676396577756
84255,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.CLASS);
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.checkType(markers,context,TypePosition.CLASS);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
}",0.837772397094431
84256,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolveType(markers,context);
  this.value.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type=this.type.resolveType(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
 else {
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
}",0.5485519591141397
84257,"@Override public void setPosition(ICodePosition position){
}","@Override public void setPosition(ICodePosition position){
  this.position=position;
}",0.821917808219178
84258,"@Override public ICodePosition getPosition(){
  return null;
}","@Override public ICodePosition getPosition(){
  return this.position;
}",0.8872180451127819
84259,"@Override public void resolveTypes(MarkerList markers,IContext context){
  IContext combinedContext=new CombiningContext(this,context);
  this.type=this.type.resolveType(markers,combinedContext);
  for (int i=0; i < this.typeVariableCount; i++) {
    this.typeVariables[i].resolveTypes(markers,combinedContext);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  IContext combinedContext=new CombiningContext(this,context);
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
  this.type=this.type.resolveType(markers,combinedContext);
  for (int i=0; i < this.typeVariableCount; i++) {
    this.typeVariables[i].resolveTypes(markers,combinedContext);
  }
}",0.8212435233160622
84260,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    this.map.addTypeAlias(this.typeAlias);
  pm.popParser(true);
return;
case TYPE:
this.mode=NAME;
if (type != DyvilKeywords.TYPE) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case NAME:
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
this.typeAlias=new TypeAlias(name);
this.mode=TYPE_PARAMETERS;
return;
}
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
case TYPE_PARAMETERS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
this.typeAlias.setTypeParameterized();
this.mode=TYPE_PARAMETERS_END;
pm.pushParser(new TypeParameterListParser(this.typeAlias));
return;
}
case EQUAL:
this.mode=END;
pm.pushParser(pm.newTypeParser(this.typeAlias));
if (type != BaseSymbols.EQUALS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_PARAMETERS_END:
this.mode=EQUAL;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    this.map.addTypeAlias(this.typeAlias);
  pm.popParser(true);
return;
case TYPE:
this.mode=NAME;
if (type != DyvilKeywords.TYPE) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case NAME:
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
this.typeAlias=new TypeAlias(name,token.raw());
this.mode=TYPE_PARAMETERS;
return;
}
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
case TYPE_PARAMETERS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
this.typeAlias.setTypeParameterized();
this.mode=TYPE_PARAMETERS_END;
pm.pushParser(new TypeParameterListParser(this.typeAlias));
return;
}
case EQUAL:
this.mode=END;
pm.pushParser(pm.newTypeParser(this.typeAlias));
if (type != BaseSymbols.EQUALS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_PARAMETERS_END:
this.mode=EQUAL;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
}
}",0.9943396226415094
84261,"@Override public IType resolveType(MarkerList markers,IContext context){
  if (this.name == Names.Tuple) {
    this.resolveTypeArguments(markers,context);
    return new TupleType(this.typeArguments,this.typeArgumentCount);
  }
  if (this.name == Names.Function) {
    if (this.typeArgumentCount > 0) {
      this.resolveTypeArguments(markers,context);
      return new LambdaType(this.typeArguments,this.typeArgumentCount - 1,this.typeArguments[this.typeArgumentCount - 1]);
    }
  }
  IType resolved=new NamedType(this.position,this.name,this.parent).resolveType0(markers,context);
  if (!resolved.isResolved()) {
    this.resolveTypeArguments(markers,context);
    return this;
  }
  this.resolveTypeArguments(markers,context);
  IClass iClass=resolved.getTheClass();
  ITypeVariable[] typeVariables;
  IType concrete;
  if (!resolved.isGenericType()) {
    resolved=iClass.getType();
    typeVariables=iClass.getTypeVariables();
    concrete=new ClassGenericType(iClass,this.typeArguments,this.typeArgumentCount);
  }
 else {
    typeVariables=new ITypeVariable[this.typeArgumentCount];
    concrete=resolved.getConcreteType(typeVar -> {
      int index=typeVar.getIndex();
      if (index >= this.typeArgumentCount) {
        return null;
      }
      typeVariables[index]=typeVar;
      return this.typeArguments[index];
    }
);
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    ITypeVariable typeVariable=typeVariables[i];
    IType type=this.typeArguments[i];
    if (typeVariable != null && !typeVariable.isAssignableFrom(type)) {
      Marker marker=MarkerMessages.createMarker(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified);
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",type));
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  return concrete;
}","@Override public IType resolveType(MarkerList markers,IContext context){
  if (this.parent == null) {
    if (this.name == Names.Tuple) {
      this.resolveTypeArguments(markers,context);
      return new TupleType(this.typeArguments,this.typeArgumentCount);
    }
    if (this.name == Names.Function) {
      if (this.typeArgumentCount > 0) {
        this.resolveTypeArguments(markers,context);
        return new LambdaType(this.typeArguments,this.typeArgumentCount - 1,this.typeArguments[this.typeArgumentCount - 1]);
      }
    }
  }
  final IType resolved=new NamedType(this.position,this.name,this.parent).resolveType0(markers,context);
  if (!resolved.isResolved()) {
    this.resolveTypeArguments(markers,context);
    return this;
  }
  this.resolveTypeArguments(markers,context);
  final IClass iClass=resolved.getTheClass();
  final ITypeVariable[] typeVariables;
  final IType concrete;
  if (!resolved.isGenericType()) {
    typeVariables=iClass.getTypeVariables();
    concrete=new ClassGenericType(iClass,this.typeArguments,this.typeArgumentCount);
  }
 else {
    typeVariables=new ITypeVariable[this.typeArgumentCount];
    concrete=resolved.getConcreteType(typeVar -> {
      int index=typeVar.getIndex();
      if (index >= this.typeArgumentCount) {
        return null;
      }
      typeVariables[index]=typeVar;
      return this.typeArguments[index];
    }
);
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    final ITypeVariable typeVariable=typeVariables[i];
    final IType type=this.typeArguments[i];
    if (typeVariable != null && !typeVariable.isAssignableFrom(type)) {
      final Marker marker=MarkerMessages.createMarker(type.getPosition(),""String_Node_Str"",typeVariable.getName().qualified);
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",type));
      marker.addInfo(MarkerMessages.getMarker(""String_Node_Str"",typeVariable));
      markers.add(marker);
    }
  }
  return concrete;
}",0.9649764767381076
84262,"@Override public boolean hasTypeVariables(){
  return this.bound == null ? false : this.bound.hasTypeVariables();
}","@Override public boolean hasTypeVariables(){
  return this.bound != null && this.bound.hasTypeVariables();
}",0.9417040358744396
84263,"private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType(Variance.INVARIANT));
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType(Variance.COVARIANT);
var.setType(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType(Variance.CONTRAVARIANT);
var.setType(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
}
return start;
}","private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType(Variance.INVARIANT));
return start + 1;
case '+':
{
WildcardType var=new WildcardType(Variance.COVARIANT);
int end1=readTyped(desc,start + 1,var);
consumer.setType(var);
return end1;
}
case '-':
{
WildcardType var=new WildcardType(Variance.CONTRAVARIANT);
int end1=readTyped(desc,start + 1,var);
consumer.setType(var);
return end1;
}
}
return start;
}",0.9296296296296296
84264,"@Override public void visitParameter(String name,int modifiers){
  final IParameter parameter=this.method.getParameter_(this.parameterIndex++);
  parameter.setName(Name.getQualified(name));
  if (modifiers != 0) {
    parameter.getModifiers().addIntModifier(modifiers);
  }
}","@Override public void visitParameter(String name,int modifiers){
  final IParameter parameter=this.method.getParameter_(this.parameterIndex);
  if (parameter == null) {
    return;
  }
  this.parameterIndex++;
  parameter.setName(Name.getQualified(name));
  if (modifiers != 0) {
    parameter.getModifiers().addIntModifier(modifiers);
  }
}",0.8896103896103896
84265,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final IType fieldType=this.field.getType();
  final int lineNumber=this.getLineNumber();
  if (this.receiver == null) {
    this.value.writeExpression(writer,fieldType);
    if (type != Types.VOID) {
      writer.writeInsn(Opcodes.AUTO_DUP);
    }
  }
 else {
    this.receiver.writeExpression(writer,null);
    this.value.writeExpression(writer,fieldType);
    if (type != Types.VOID) {
      writer.writeInsn(Opcodes.AUTO_DUP_X1);
    }
  }
  this.field.writeSet(writer,null,null,lineNumber);
  if (type != null && type != Types.VOID) {
    fieldType.writeCast(writer,type,lineNumber);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int lineNumber=this.getLineNumber();
  if (type == Types.VOID) {
    this.field.writeSet(writer,this.receiver,this.value,lineNumber);
    return;
  }
  if (type == null) {
    type=this.getType();
  }
  final IType fieldType=this.field.getType();
  if (this.receiver != null) {
    this.receiver.writeExpression(writer,null);
  }
  this.field.writeSet_PreValue(writer,lineNumber);
  if (this.receiver == null) {
    final boolean tempVar=this.field.writeSet_PreValue(writer,lineNumber);
    this.value.writeExpression(writer,fieldType);
    writer.writeInsn(tempVar ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP);
  }
 else {
    this.field.writeSet_PreValue(writer,lineNumber);
    this.value.writeExpression(writer,fieldType);
    writer.writeInsn(Opcodes.AUTO_DUP_X1);
  }
  this.field.writeSet_Wrap(writer,lineNumber);
  this.field.writeSet_Set(writer,lineNumber);
  fieldType.writeCast(writer,type,lineNumber);
}",0.4201287302516091
84266,"default void writeGet(MethodWriter writer,IValue receiver,int lineNumber) throws BytecodeException {
  this.writeGet_PreReceiver(writer,lineNumber);
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeGet_Get(writer,lineNumber);
  this.writeGet_Unwrap(writer,lineNumber);
}","default void writeGet(MethodWriter writer,IValue receiver,int lineNumber) throws BytecodeException {
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeGet_Get(writer,lineNumber);
  this.writeGet_Unwrap(writer,lineNumber);
}",0.5751633986928104
84267,"default void writeSet(MethodWriter writer,IValue receiver,IValue value,int lineNumber) throws BytecodeException {
  this.writeSet_PreReceiver(writer,lineNumber);
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeSet_PreValue(writer,lineNumber);
  value.writeExpression(writer,this.getType());
  this.writeSet_Wrap(writer,lineNumber);
  this.writeSet_Set(writer,lineNumber);
}","default void writeSet(MethodWriter writer,IValue receiver,IValue value,int lineNumber) throws BytecodeException {
  if (receiver != null) {
    receiver.writeExpression(writer,this.getTheClass().getType());
  }
  this.writeSet_PreValue(writer,lineNumber);
  value.writeExpression(writer,this.getType());
  this.writeSet_Wrap(writer,lineNumber);
  this.writeSet_Set(writer,lineNumber);
}",0.6634146341463415
84268,"@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int typecode=this.field.getType().getTypecode();
  final int lineNumber=this.getLineNumber();
  boolean receiver=this.receiver != null;
  if (type == Types.VOID) {
    if (this.canUseIINC(typecode)) {
      writer.writeIINC(((IVariable)this.field).getLocalIndex(),this.value);
      return;
    }
    this.field.writeGet_PreReceiver(writer,lineNumber);
    if (receiver) {
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
    }
    this.field.writeGet_Get(writer,lineNumber);
    this.field.writeGet_Unwrap(writer,lineNumber);
    this.writeAdd1(writer,typecode);
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    return;
  }
  if (this.canUseIINC(typecode)) {
    int localIndex=((IVariable)this.field).getLocalIndex();
    if (this.prefix) {
      writer.writeIINC(localIndex,this.value);
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
    }
 else {
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
      writer.writeIINC(localIndex,this.value);
    }
  }
 else {
    int localCount=0;
    this.field.writeSet_PreReceiver(writer,lineNumber);
    if (receiver) {
      localCount=writer.localCount();
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
      writer.writeVarInsn(Opcodes.ASTORE,localCount);
    }
    final boolean tempValue=this.field.writeSet_PreValue(writer,lineNumber);
    final int dupOpcode=tempValue ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP;
{
      this.field.writeGet_PreReceiver(writer,lineNumber);
      if (receiver) {
        writer.writeVarInsn(Opcodes.ALOAD,localCount);
      }
      this.field.writeGet_Get(writer,lineNumber);
      this.field.writeGet_Unwrap(writer,lineNumber);
    }
    if (this.prefix) {
      this.writeAdd1(writer,typecode);
      writer.writeInsn(dupOpcode);
    }
 else {
      writer.writeInsn(dupOpcode);
      this.writeAdd1(writer,typecode);
    }
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    if (receiver) {
      writer.resetLocals(localCount);
    }
  }
  if (type != null) {
    this.field.getType().writeCast(writer,type,lineNumber);
  }
}","@Override public void writeExpression(MethodWriter writer,IType type) throws BytecodeException {
  final int typecode=this.field.getType().getTypecode();
  final int lineNumber=this.getLineNumber();
  boolean receiver=this.receiver != null;
  if (type == Types.VOID) {
    if (this.canUseIINC(typecode)) {
      writer.writeIINC(((IVariable)this.field).getLocalIndex(),this.value);
      return;
    }
    this.field.writeSet_PreValue(writer,lineNumber);
    if (receiver) {
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
    }
    this.field.writeGet_Get(writer,lineNumber);
    this.field.writeGet_Unwrap(writer,lineNumber);
    this.writeAdd1(writer,typecode);
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    return;
  }
  if (this.canUseIINC(typecode)) {
    int localIndex=((IVariable)this.field).getLocalIndex();
    if (this.prefix) {
      writer.writeIINC(localIndex,this.value);
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
    }
 else {
      writer.writeVarInsn(this.field.getType().getLoadOpcode(),localIndex);
      writer.writeIINC(localIndex,this.value);
    }
  }
 else {
    int receiverIndex=0;
    if (receiver) {
      receiverIndex=writer.localCount();
      this.receiver.writeExpression(writer,null);
      writer.writeInsn(Opcodes.DUP);
      writer.writeVarInsn(Opcodes.ASTORE,receiverIndex);
    }
    final boolean tempValue=this.field.writeSet_PreValue(writer,lineNumber);
    final int dupOpcode=tempValue || receiver ? Opcodes.AUTO_DUP_X1 : Opcodes.AUTO_DUP;
{
      if (receiver) {
        writer.writeVarInsn(Opcodes.ALOAD,receiverIndex);
      }
      this.field.writeGet_Get(writer,lineNumber);
      this.field.writeGet_Unwrap(writer,lineNumber);
    }
    if (this.prefix) {
      this.writeAdd1(writer,typecode);
      writer.writeInsn(dupOpcode);
    }
 else {
      writer.writeInsn(dupOpcode);
      this.writeAdd1(writer,typecode);
    }
    this.field.writeSet_Wrap(writer,lineNumber);
    this.field.writeSet_Set(writer,lineNumber);
    if (receiver) {
      writer.resetLocals(receiverIndex);
    }
  }
  if (type != null) {
    this.field.getType().writeCast(writer,type,lineNumber);
  }
}",0.94140625
84269,"@Override public void writeSet_Wrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeWrap(writer,this.localIndex);
  }
}","@Override public void writeSet_Wrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeWrap(writer);
  }
}",0.9550561797752808
84270,"@Override public void writeGet_Unwrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeUnwrap(writer,this.localIndex);
  }
}","@Override public void writeGet_Unwrap(MethodWriter writer,int lineNumber) throws BytecodeException {
  if (this.refType != null) {
    this.refType.writeUnwrap(writer);
  }
}",0.956043956043956
84271,"public void writeUnwrap(MethodWriter writer,int index) throws BytecodeException {
  String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    if (this.type.getTheClass() != Types.OBJECT_CLASS) {
      writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
    }
    return;
  }
  StringBuilder sb=new StringBuilder(""String_Node_Str"");
  this.type.appendExtendedName(sb);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",sb.toString(),true);
}","public void writeUnwrap(MethodWriter writer) throws BytecodeException {
  final String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    if (this.type.getTheClass() != Types.OBJECT_CLASS) {
      writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
    }
    return;
  }
  final StringBuilder stringBuilder=new StringBuilder(""String_Node_Str"");
  this.type.appendExtendedName(stringBuilder);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",stringBuilder.toString(),true);
}",0.9531129900076863
84272,"public void writeWrap(MethodWriter writer,int index) throws BytecodeException {
  String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    return;
  }
  StringBuilder sb=new StringBuilder().append('(');
  this.type.appendExtendedName(sb);
  sb.append(""String_Node_Str"");
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",sb.toString(),true);
}","public void writeWrap(MethodWriter writer) throws BytecodeException {
  final String internal=this.theClass.getInternalName();
  if (this.theClass == Types.getObjectRefClass()) {
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",""String_Node_Str"",true);
    return;
  }
  final StringBuilder stringBuilder=new StringBuilder().append('(');
  this.type.appendExtendedName(stringBuilder);
  stringBuilder.append(""String_Node_Str"");
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,internal,""String_Node_Str"",stringBuilder.toString(),true);
}",0.8931860036832413
84273,"@Override public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){
  IAnnotation annotation=new Annotation(ClassFormat.extendedToType(desc));
switch (TypeReference.getSort(typeRef)) {
case TypeReference.METHOD_RETURN:
    this.type=IType.withAnnotation(this.type,annotation,typePath,0,typePath.getLength());
  break;
case TypeReference.METHOD_TYPE_PARAMETER:
{
  ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
  if (typeVar.addRawAnnotation(desc,annotation)) {
    return null;
  }
  typeVar.addAnnotation(annotation);
  break;
}
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
{
ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
typeVar.addBoundAnnotation(annotation,TypeReference.getTypeParameterBoundIndex(typeRef),typePath);
break;
}
case TypeReference.EXCEPTION_PARAMETER:
{
int index=TypeReference.getExceptionIndex(typeRef);
this.exceptions[index]=IType.withAnnotation(this.exceptions[index],annotation,typePath,0,typePath.getLength());
break;
}
case TypeReference.METHOD_FORMAL_PARAMETER:
{
int index=TypeReference.getFormalParameterIndex(typeRef);
IParameter param=this.parameters[index];
param.setType(IType.withAnnotation(param.getType(),annotation,typePath,0,typePath.getLength()));
break;
}
}
return new AnnotationReader(null,annotation);
}","@Override public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){
  IAnnotation annotation=new Annotation(ClassFormat.extendedToType(desc));
  if (typePath == null) {
    typePath=TypePath.EMPTY;
  }
switch (TypeReference.getSort(typeRef)) {
case TypeReference.METHOD_RETURN:
    this.type=IType.withAnnotation(this.type,annotation,typePath,0,typePath.getLength());
  break;
case TypeReference.METHOD_TYPE_PARAMETER:
{
  ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
  if (typeVar.addRawAnnotation(desc,annotation)) {
    return null;
  }
  typeVar.addAnnotation(annotation);
  break;
}
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
{
ITypeVariable typeVar=this.generics[TypeReference.getTypeParameterIndex(typeRef)];
typeVar.addBoundAnnotation(annotation,TypeReference.getTypeParameterBoundIndex(typeRef),typePath);
break;
}
case TypeReference.EXCEPTION_PARAMETER:
{
int index=TypeReference.getExceptionIndex(typeRef);
this.exceptions[index]=IType.withAnnotation(this.exceptions[index],annotation,typePath,0,typePath.getLength());
break;
}
case TypeReference.METHOD_FORMAL_PARAMETER:
{
int index=TypeReference.getFormalParameterIndex(typeRef);
IParameter param=this.parameters[index];
param.setType(IType.withAnnotation(param.getType(),annotation,typePath,0,typePath.getLength()));
break;
}
}
return new AnnotationReader(null,annotation);
}",0.978921043229725
84274,"@Override public void checkType(MarkerList markers,IContext context,TypePosition position){
  if (position == TypePosition.CLASS) {
    markers.add(MarkerMessages.createMarker(this.returnType.getPosition(),""String_Node_Str""));
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i].checkType(markers,context,TypePosition.PARAMETER_TYPE);
  }
  this.returnType.checkType(markers,context,TypePosition.RETURN_TYPE);
}","@Override public void checkType(MarkerList markers,IContext context,TypePosition position){
  if (position == TypePosition.CLASS) {
    markers.add(MarkerMessages.createMarker(this.position,""String_Node_Str""));
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i].checkType(markers,context,TypePosition.PARAMETER_TYPE);
  }
  this.returnType.checkType(markers,context,TypePosition.RETURN_TYPE);
}",0.9627906976744186
84275,"@Override public IType resolveType(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i]=this.parameterTypes[i].resolveType(markers,context).getParameterType();
  }
  if (this.returnType == null) {
    this.returnType=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.getPosition(),""String_Node_Str""));
  }
  this.returnType=this.returnType.resolveType(markers,context).getReturnType();
  return this;
}","@Override public IType resolveType(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    this.parameterTypes[i]=this.parameterTypes[i].resolveType(markers,context).getParameterType();
  }
  if (this.returnType == null) {
    this.returnType=Types.UNKNOWN;
    markers.add(MarkerMessages.createError(this.position,""String_Node_Str""));
  }
 else {
    this.returnType=this.returnType.resolveType(markers,context).getReturnType();
  }
  return this;
}",0.9363920750782064
84276,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    if (type == Tokens.SYMBOL_IDENTIFIER) {
      final Name name=token.nameValue();
      if (name == Names.qmark) {
        this.type=new OptionType(this.type);
        return;
      }
      if (name == Names.times) {
        this.type=new ReferenceType(this.type);
        return;
      }
    }
  if (this.type != null) {
    this.consumer.setType(this.type);
  }
pm.popParser(true);
return;
case NAME:
switch (type) {
case DyvilSymbols.AT:
Annotation a=new Annotation();
pm.pushParser(pm.newAnnotationParser(a));
this.type=new AnnotatedType(a);
this.mode=ANNOTATION_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
TupleType tupleType=new TupleType();
pm.pushParser(new TypeListParser(tupleType));
this.type=tupleType;
this.mode=TUPLE_END;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ARRAY_COLON;
ArrayType at=new ArrayType();
this.type=at;
pm.pushParser(pm.newTypeParser(at));
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaType lt=new LambdaType();
this.type=lt;
pm.pushParser(pm.newTypeParser(lt));
this.mode=LAMBDA_END;
return;
case DyvilKeywords.NULL:
this.consumer.setType(Types.NULL);
pm.popParser();
return;
case DyvilSymbols.WILDCARD:
this.type=new WildcardType(token.raw());
this.mode=WILDCARD_TYPE;
return;
}
if (ParserUtil.isIdentifier(type)) {
IToken next=token.next();
switch (next.type()) {
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.type=new NamedGenericType(token.raw(),token.nameValue(),this.parentType);
this.mode=GENERICS;
return;
case DyvilSymbols.ARROW_OPERATOR:
if (this.parentType == null) {
LambdaType lt=new LambdaType(new NamedType(token.raw(),token.nameValue()));
this.type=lt;
this.mode=LAMBDA_END;
pm.skip();
pm.pushParser(pm.newTypeParser(lt));
return;
}
break;
case BaseSymbols.DOT:
NamedType namedType=new NamedType(token.raw(),token.nameValue(),this.parentType);
TypeParser parser=new TypeParser(this);
parser.parentType=namedType;
pm.pushParser(parser);
pm.skip();
this.mode=END;
return;
}
this.type=new NamedType(token.raw(),token.nameValue(),this.parentType);
this.mode=END;
return;
}
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
case TUPLE_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
IToken next=token.next();
int nextType=next.type();
if (nextType == DyvilSymbols.ARROW_OPERATOR) {
TupleType tupleType=(TupleType)this.type;
this.type=new LambdaType(tupleType);
this.mode=LAMBDA_TYPE;
return;
}
this.type.expandPosition(token);
this.mode=END;
return;
case LAMBDA_TYPE:
pm.pushParser(pm.newTypeParser((LambdaType)this.type));
this.mode=LAMBDA_END;
return;
case LAMBDA_END:
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case ARRAY_COLON:
if (type == BaseSymbols.COLON) {
this.mode=ARRAY_END;
MapType mt=new MapType(this.type.getElementType(),null);
this.type=mt;
pm.pushParser(new TypeParser(mt::setValueType));
return;
}
case ARRAY_END:
this.type.expandPosition(token);
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case GENERICS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
pm.pushParser(new TypeListParser((GenericType)this.type));
this.mode=GENERICS_END;
return;
}
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case WILDCARD_TYPE:
Name name=token.nameValue();
WildcardType wt=(WildcardType)this.type;
if (name == Names.ltcolon) {
wt.setVariance(Variance.COVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
if (name == Names.gtcolon) {
wt.setVariance(Variance.CONTRAVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
this.consumer.setType(this.type);
pm.popParser(true);
return;
case GENERICS_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case ANNOTATION_END:
this.mode=END;
pm.pushParser(pm.newTypeParser((ITyped)this.type),true);
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case END:
    if (type == Tokens.SYMBOL_IDENTIFIER) {
      final Name name=token.nameValue();
      if (name == Names.qmark) {
        this.type=new OptionType(this.type);
        return;
      }
      if (name == Names.times) {
        this.type=new ReferenceType(this.type);
        return;
      }
    }
  if (this.type != null) {
    this.consumer.setType(this.type);
  }
pm.popParser(true);
return;
case NAME:
switch (type) {
case DyvilSymbols.AT:
Annotation a=new Annotation();
pm.pushParser(pm.newAnnotationParser(a));
this.type=new AnnotatedType(a);
this.mode=ANNOTATION_END;
return;
case BaseSymbols.OPEN_PARENTHESIS:
TupleType tupleType=new TupleType();
pm.pushParser(new TypeListParser(tupleType));
this.type=tupleType;
this.mode=TUPLE_END;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ARRAY_COLON;
ArrayType at=new ArrayType();
this.type=at;
pm.pushParser(pm.newTypeParser(at));
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaType lt=new LambdaType();
lt.setPosition(token.raw());
this.type=lt;
pm.pushParser(pm.newTypeParser(lt));
this.mode=LAMBDA_END;
return;
case DyvilKeywords.NULL:
this.consumer.setType(Types.NULL);
pm.popParser();
return;
case DyvilSymbols.WILDCARD:
this.type=new WildcardType(token.raw());
this.mode=WILDCARD_TYPE;
return;
}
if (ParserUtil.isIdentifier(type)) {
IToken next=token.next();
switch (next.type()) {
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.type=new NamedGenericType(token.raw(),token.nameValue(),this.parentType);
this.mode=GENERICS;
return;
case DyvilSymbols.ARROW_OPERATOR:
if (this.parentType == null) {
LambdaType lt=new LambdaType(new NamedType(token.raw(),token.nameValue()));
lt.setPosition(next.raw());
this.type=lt;
this.mode=LAMBDA_END;
pm.skip();
pm.pushParser(pm.newTypeParser(lt));
return;
}
break;
case BaseSymbols.DOT:
NamedType namedType=new NamedType(token.raw(),token.nameValue(),this.parentType);
TypeParser parser=new TypeParser(this);
parser.parentType=namedType;
pm.pushParser(parser);
pm.skip();
this.mode=END;
return;
}
this.type=new NamedType(token.raw(),token.nameValue(),this.parentType);
this.mode=END;
return;
}
if (ParserUtil.isTerminator(type)) {
pm.popParser(true);
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
case TUPLE_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
IToken next=token.next();
int nextType=next.type();
if (nextType == DyvilSymbols.ARROW_OPERATOR) {
TupleType tupleType=(TupleType)this.type;
this.type=new LambdaType(tupleType);
this.type.setPosition(next.raw());
this.mode=LAMBDA_TYPE;
return;
}
this.type.expandPosition(token);
this.mode=END;
return;
case LAMBDA_TYPE:
pm.pushParser(pm.newTypeParser((LambdaType)this.type));
this.mode=LAMBDA_END;
return;
case LAMBDA_END:
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case ARRAY_COLON:
if (type == BaseSymbols.COLON) {
this.mode=ARRAY_END;
MapType mt=new MapType(this.type.getElementType(),null);
this.type=mt;
pm.pushParser(new TypeParser(mt::setValueType));
return;
}
case ARRAY_END:
this.type.expandPosition(token);
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case GENERICS:
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
pm.pushParser(new TypeListParser((GenericType)this.type));
this.mode=GENERICS_END;
return;
}
this.type.expandPosition(token.prev());
this.consumer.setType(this.type);
pm.popParser(true);
return;
case WILDCARD_TYPE:
Name name=token.nameValue();
WildcardType wt=(WildcardType)this.type;
if (name == Names.ltcolon) {
wt.setVariance(Variance.COVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
if (name == Names.gtcolon) {
wt.setVariance(Variance.CONTRAVARIANT);
pm.pushParser(pm.newTypeParser(wt));
this.mode=END;
return;
}
this.consumer.setType(this.type);
pm.popParser(true);
return;
case GENERICS_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case ANNOTATION_END:
this.mode=END;
pm.pushParser(pm.newTypeParser((ITyped)this.type),true);
return;
}
}",0.9891841053374087
84277,"@Override public void addParameter(IParameter param){
  param.setTheClass(this);
  if (this.parameters == null) {
    this.parameters=new ClassParameter[2];
    this.parameters[0]=param;
    this.parameterCount=1;
    return;
  }
  int index=this.parameterCount++;
  if (this.parameterCount > this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
  param.setIndex(index);
}","@Override public void addParameter(IParameter param){
  param.setTheClass(this);
  if (this.parameters == null) {
    param.setIndex(0);
    this.parameters=new ClassParameter[2];
    this.parameters[0]=param;
    this.parameterCount=1;
    return;
  }
  final int index=this.parameterCount++;
  param.setIndex(index);
  if (this.parameterCount > this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.9260991580916744
84278,"@Override public void setParameter(int index,IParameter param){
  param.setTheClass(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setTheClass(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9084249084249084
84279,"private void resolveParameters(){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.parametersResolved=true;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(null,this);
  }
}","private void resolveParameters(){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.parametersResolved=true;
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolveTypes(null,this);
  }
}",0.9428571428571428
84280,"@Override public void addParameter(IParameter param){
  param.setMethod(this);
  int index=this.parameterCount++;
  if (index >= this.parameters.length) {
    MethodParameter[] temp=new MethodParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}","@Override public void addParameter(IParameter param){
  final int index=this.parameterCount++;
  param.setMethod(this);
  param.setIndex(index);
  if (index >= this.parameters.length) {
    MethodParameter[] temp=new MethodParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.8892005610098177
84281,"@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9070631970260224
84282,"@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,this);
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolveType(markers,this);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT | Modifiers.PUBLIC);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  super.resolveTypes(markers,this);
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolveTypes(markers,this);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolveType(markers,this);
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT | Modifiers.PUBLIC);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers.addIntModifier(Modifiers.ABSTRACT);
  }
}",0.9822335025380712
84283,"@Override public void addParameter(IParameter param){
  param.setMethod(this);
  int index=this.parameterCount++;
  if (index >= this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}","@Override public void addParameter(IParameter param){
  param.setMethod(this);
  final int index=this.parameterCount++;
  param.setIndex(index);
  if (index >= this.parameters.length) {
    IParameter[] temp=new IParameter[this.parameterCount];
    System.arraycopy(this.parameters,0,temp,0,index);
    this.parameters=temp;
  }
  this.parameters[index]=param;
}",0.9552669552669552
84284,"@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  this.parameters[index]=param;
}","@Override public void setParameter(int index,IParameter param){
  param.setMethod(this);
  param.setIndex(index);
  this.parameters[index]=param;
}",0.9070631970260224
84285,"protected void writeAnnotations(MethodWriter writer){
  if (this.annotations != null) {
    AnnotatableVisitor visitor=(desc,visible) -> writer.visitParameterAnnotation(Parameter.this.index,desc,visible);
    int count=this.annotations.annotationCount();
    for (int i=0; i < count; i++) {
      this.annotations.getAnnotation(i).write(visitor);
    }
  }
  this.type.writeAnnotations(writer,TypeReference.newFormalParameterReference(this.index),""String_Node_Str"");
  if (this.defaultValue != null) {
    this.writeDefaultAnnotation(writer);
  }
}","protected void writeAnnotations(MethodWriter writer){
  final AnnotatableVisitor visitor=(desc,visible) -> writer.visitParameterAnnotation(Parameter.this.index,desc,visible);
  if (this.annotations != null) {
    final int count=this.annotations.annotationCount();
    for (int i=0; i < count; i++) {
      this.annotations.getAnnotation(i).write(visitor);
    }
  }
  AnnotationUtils.writeModifiers(visitor,this.modifiers);
  this.type.writeAnnotations(writer,TypeReference.newFormalParameterReference(this.index),""String_Node_Str"");
  if (this.defaultValue != null) {
    this.writeDefaultAnnotation(writer);
  }
}",0.8797250859106529
84286,"@Override public boolean isType(IType type){
  if (type == Types.VOID) {
    return true;
  }
  if (this.then != null && !this.then.isType(type)) {
    return false;
  }
  return !(this.elseThen != null && !this.elseThen.isType(type));
}","@Override public boolean isType(IType type){
  if (type == Types.VOID) {
    return true;
  }
  if (this.then != null && !this.then.isType(type)) {
    return false;
  }
  return this.elseThen == null || this.elseThen.isType(type);
}",0.7787234042553192
84287,"@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolationExpr ssv=new StringInterpolationExpr(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpr le=new LambdaExpr(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=ACCESS;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=END;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpr le=new LambdaExpr(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setCondition));
return;
}
case PATTERN_END:
if (type == DyvilSymbols.ARROW_OPERATOR || type == BaseSymbols.COLON) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setAction));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
{
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
MethodCall mc=(MethodCall)this.value;
GenericData genericData=mc.getGenericData();
IToken next=token.next();
int nextType=next.type();
if (nextType == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
IArguments arguments=this.parseArguments(pm,next.next());
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),arguments);
amc.setGenericData(genericData);
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(nextType)) {
pm.skip();
this.value=mc.getReceiver();
this.parseAccess(pm,token.next(),token.next().type(),token.next().nameValue(),null);
if (this.value instanceof AbstractCall) {
((AbstractCall)this.value).setGenericData(genericData);
}
if (this.value instanceof FieldAccess) {
FieldAccess fieldAccess=(FieldAccess)this.value;
mc.setName(fieldAccess.getName());
this.value=mc;
}
return;
}
if (ParserUtil.isExpressionTerminator(nextType)) {
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),EmptyArguments.INSTANCE);
amc.setGenericData(genericData);
this.value=amc;
this.mode=ACCESS;
return;
}
SingleArgument argument=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),argument);
amc.setGenericData(genericData);
this.value=amc;
this.parseApply(pm,next,argument,Operators.DEFAULT);
this.mode=ACCESS;
return;
}
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type) || type == BaseSymbols.COLON) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
this.value=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
MethodCall call=new MethodCall(token,this.value,null);
pm.pushParser(new TypeListParser(call.getGenericData()));
this.mode=TYPE_ARGUMENTS_END;
this.value=call;
return;
}
pm.report(MarkerMessages.createError(token,""String_Node_Str"",token.toString()));
return;
}
pm.report(MarkerMessages.createError(token,""String_Node_Str"",token.toString()));
return;
}","@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolationExpr ssv=new StringInterpolationExpr(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpr le=new LambdaExpr(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=ACCESS;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=END;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpr le=new LambdaExpr(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setCondition));
return;
}
case PATTERN_END:
if (type == DyvilSymbols.ARROW_OPERATOR || type == BaseSymbols.COLON) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(((ICase)this.value)::setAction));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.mode=END;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
{
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
MethodCall mc=(MethodCall)this.value;
GenericData genericData=mc.getGenericData();
IToken next=token.next();
int nextType=next.type();
if (nextType == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
IArguments arguments=this.parseArguments(pm,next.next());
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),arguments);
amc.setGenericData(genericData);
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(nextType)) {
pm.skip();
this.value=mc.getReceiver();
this.parseAccess(pm,token.next(),token.next().type(),token.next().nameValue(),null);
if (this.value instanceof AbstractCall) {
((AbstractCall)this.value).setGenericData(genericData);
}
if (this.value instanceof FieldAccess) {
FieldAccess fieldAccess=(FieldAccess)this.value;
mc.setName(fieldAccess.getName());
this.value=mc;
}
return;
}
if (ParserUtil.isExpressionTerminator(nextType)) {
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),EmptyArguments.INSTANCE);
amc.setGenericData(genericData);
this.value=amc;
this.mode=ACCESS;
return;
}
SingleArgument argument=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(mc.getPosition(),mc.getReceiver(),argument);
amc.setGenericData(genericData);
this.value=amc;
this.parseApply(pm,next,argument,Operators.DEFAULT);
this.mode=ACCESS;
return;
}
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type) || type == BaseSymbols.COLON) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpr me=new MatchExpr(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
this.value=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (type == BaseSymbols.OPEN_SQUARE_BRACKET) {
MethodCall call=new MethodCall(token,this.value,null);
pm.pushParser(new TypeListParser(call.getGenericData()));
this.mode=TYPE_ARGUMENTS_END;
this.value=call;
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
}
pm.report(MarkerMessages.createSyntaxError(token,""String_Node_Str"",token.toString()));
return;
}",0.999340006599934
84288,"private static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  try {
    String currentCode=readLine();
    if (currentCode == null) {
      return;
    }
    String trim=currentCode.trim();
    if (trim.length() > 1 && trim.charAt(0) == ':' && trim.charAt(1) != ':') {
      runCommand(trim);
      return;
    }
    instance.evaluate(currentCode);
    Thread.sleep(4L);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","private static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  String currentCode;
  try {
    currentCode=readLine();
    if (currentCode == null) {
      return;
    }
  }
 catch (  IOException ignored) {
    return;
  }
  try {
    String trim=currentCode.trim();
    if (trim.length() > 1 && trim.charAt(0) == ':' && trim.charAt(1) != ':') {
      runCommand(trim);
      return;
    }
    instance.evaluate(currentCode);
    Thread.sleep(4L);
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.7581967213114754
84289,"@Override public boolean isSuperClassOf(IType type){
  return this.typeVar == type.getTypeVariable();
}","@Override public boolean isSuperClassOf(IType type){
  return this.typeVar.isSuperClassOf(type);
}",0.8159203980099502
84290,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSuperClassOf(prevType) && primitiveType == primitiveValue) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null) {
    this.value=value1;
    IType valueType=value1.getType();
    if (!prevType.isSameType(valueType) && this.type.isSuperClassOf(valueType) && valueType.isPrimitive() == this.type.isPrimitive()) {
      this.typeHint=true;
      this.type=valueType;
      return this;
    }
    prevType=valueType;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",prevType,this.type));
    return this;
  }
  if (!this.typeHint && this.type.isSameType(prevType) && primitiveType == primitiveValue) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    this.typeHint=true;
  }
  return this;
}",0.9930394431554525
84291,"@Override public void writeCast(MethodWriter writer,IType target,int lineNumber) throws BytecodeException {
  if (!target.isPrimitive()) {
    this.boxMethod.writeInvoke(writer,null,EmptyArguments.INSTANCE,lineNumber);
    return;
  }
switch (this.typecode) {
case BOOLEAN_CODE:
case BYTE_CODE:
case SHORT_CODE:
case CHAR_CODE:
case INT_CODE:
    writeIntCast(target,writer);
  return;
case LONG_CODE:
writeLongCast(target,writer);
return;
case FLOAT_CODE:
writeFloatCast(target,writer);
return;
case DOUBLE_CODE:
writeDoubleCast(target,writer);
return;
}
}","@Override public void writeCast(MethodWriter writer,IType target,int lineNumber) throws BytecodeException {
  IType primitiveTarget=target;
  if (!target.isPrimitive()) {
    primitiveTarget=getPrimitiveType(target);
  }
switch (this.typecode) {
case BOOLEAN_CODE:
case BYTE_CODE:
case SHORT_CODE:
case CHAR_CODE:
case INT_CODE:
    writeIntCast(primitiveTarget,writer);
  break;
case LONG_CODE:
writeLongCast(primitiveTarget,writer);
break;
case FLOAT_CODE:
writeFloatCast(primitiveTarget,writer);
break;
case DOUBLE_CODE:
writeDoubleCast(primitiveTarget,writer);
break;
}
if (primitiveTarget != target) {
primitiveTarget.getBoxMethod().writeInvoke(writer,null,EmptyArguments.INSTANCE,lineNumber);
}
}",0.3510722795869738
84292,"@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    IType receiverType=this.receiver.getType();
    IType methodReturnType=super.getType();
    if (!receiverType.isSuperTypeOf(methodReturnType)) {
      Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name,this.receiver.toString());
      marker.addInfo(I18n.getString(""String_Node_Str"",receiverType));
      marker.addInfo(I18n.getString(""String_Node_Str"",methodReturnType));
      markers.add(marker);
    }
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  if (this.receiver != null) {
    this.receiver.check(markers,context);
  }
  if (this.method != null) {
    if (this.receiver != null) {
      IType receiverType=this.receiver.getType();
      IType methodReturnType=this.method.getType();
      if (!receiverType.isSuperTypeOf(methodReturnType)) {
        Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name,this.receiver.toString());
        marker.addInfo(I18n.getString(""String_Node_Str"",receiverType));
        marker.addInfo(I18n.getString(""String_Node_Str"",methodReturnType));
        markers.add(marker);
      }
    }
    this.method.checkCall(markers,this.position,context,this.receiver,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}",0.9550917141049968
84293,"default int getSuperTypeDistance(IType superType){
  return this.getTheClass().getSuperTypeDistance(superType);
}","default int getSuperTypeDistance(IType superType){
  IClass iClass=this.getTheClass();
  return iClass == null ? 0 : iClass.getSuperTypeDistance(superType);
}",0.7896678966789668
84294,"@Override public void report(IToken token,String message){
  this.pm.jump(this.firstToken);
  this.pm.pushParser(this.pm.newExpressionParser(this));
  this.reset();
  this.mode=SEPARATOR;
}","@Override public void report(IToken token,String message){
  this.revertExpression(this.pm);
}",0.6360424028268551
84295,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    this.consumer.setValue(this.statementList);
    pm.popParser();
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
    this.mode=EXPRESSION;
  this.statementList=this.applied ? new Closure(token) : new StatementList(token);
if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
  pm.report(token,""String_Node_Str"");
  pm.reparse();
}
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (ParserUtil.isIdentifier(type)) {
int nextType=token.next().type();
if (nextType == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
if (nextType == BaseSymbols.EQUALS) {
FieldAssignment fa=new FieldAssignment(token.raw(),null,token.nameValue());
pm.skip();
pm.pushParser(pm.newExpressionParser(fa));
this.setValue(fa);
this.mode=SEPARATOR;
return;
}
}
int i;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if (type == DyvilSymbols.AT) {
if (this.annotations == null) {
this.annotations=new AnnotationList();
}
Annotation a=new Annotation(token.raw());
pm.pushParser(pm.newAnnotationParser(a));
this.annotations.addAnnotation(a);
return;
}
this.tryParser(pm,token,pm.newTypeParser(this));
this.mode=TYPE;
case TYPE:
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.EQUALS) {
if (this.type != null) {
Variable variable=new Variable(token.raw(),token.nameValue(),this.type);
variable.setModifiers(this.modifiers);
variable.setAnnotations(this.annotations);
FieldInitializer fi=new FieldInitializer(variable);
pm.pushParser(pm.newExpressionParser(variable));
this.setValue(fi);
}
 else if (token != this.firstToken) {
this.parser.parse(this,token);
pm.reparse();
return;
}
this.reset();
this.mode=SEPARATOR;
pm.skip();
return;
}
 else if (this.parser == null) {
pm.jump(this.firstToken);
this.reset();
pm.pushParser(pm.newExpressionParser(this));
this.mode=SEPARATOR;
return;
}
this.parser.parse(this,token);
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
if (type == 0) {
this.consumer.setValue(this.statementList);
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == BaseSymbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    this.consumer.setValue(this.statementList);
    pm.popParser();
    return;
  }
switch (this.mode) {
case OPEN_BRACKET:
    this.mode=EXPRESSION;
  this.statementList=this.applied ? new Closure(token) : new StatementList(token);
if (type != BaseSymbols.OPEN_CURLY_BRACKET) {
  pm.report(token,""String_Node_Str"");
  pm.reparse();
}
return;
case EXPRESSION:
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (ParserUtil.isIdentifier(type)) {
int nextType=token.next().type();
if (nextType == BaseSymbols.COLON) {
this.label=token.nameValue();
pm.skip();
return;
}
if (nextType == BaseSymbols.EQUALS) {
FieldAssignment fa=new FieldAssignment(token.raw(),null,token.nameValue());
pm.skip();
pm.pushParser(pm.newExpressionParser(fa));
this.setValue(fa);
this.mode=SEPARATOR;
return;
}
}
int i;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if (type == DyvilSymbols.AT) {
if (this.annotations == null) {
this.annotations=new AnnotationList();
}
Annotation a=new Annotation(token.raw());
pm.pushParser(pm.newAnnotationParser(a));
this.annotations.addAnnotation(a);
return;
}
this.tryParser(pm,token,pm.newTypeParser(this));
this.mode=TYPE;
case TYPE:
if (this.parser == null) {
this.revertExpression(pm);
return;
}
this.parser.parse(this,token);
return;
case VARIABLE_NAME:
if (ParserUtil.isIdentifier(type) && token.next().type() == BaseSymbols.EQUALS) {
Variable variable=new Variable(token.raw(),token.nameValue(),this.type);
variable.setModifiers(this.modifiers);
variable.setAnnotations(this.annotations);
FieldInitializer fi=new FieldInitializer(variable);
this.setValue(fi);
pm.skip();
pm.pushParser(pm.newExpressionParser(variable));
this.reset();
this.mode=SEPARATOR;
return;
}
this.revertExpression(pm);
return;
case SEPARATOR:
this.mode=EXPRESSION;
if (type == BaseSymbols.SEMICOLON) {
return;
}
if (token.prev().type() == BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
return;
}
if (type == 0) {
this.consumer.setValue(this.statementList);
pm.popParser();
pm.report(token,""String_Node_Str"");
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}",0.9024193548387096
84296,"@Override public void setType(IType type){
  this.type=type;
}","@Override public void setType(IType type){
  this.type=type;
  this.mode=VARIABLE_NAME;
}",0.8211920529801324
84297,"@Override public boolean isSuperTypeOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  return this.type.isSuperTypeOf(type.getElementType());
}","@Override public boolean isSuperTypeOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.isSuperTypeOf(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.681265206812652
84298,"@Override public boolean classEquals(IType type){
  return type.isArrayType() && this.getElementType().classEquals(type.getElementType());
}","@Override public boolean classEquals(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.classEquals(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.4300518134715025
84299,"@Override public boolean isSuperClassOf(IType type){
  return type.isArrayType() && this.getElementType().isSuperClassOf(type.getElementType());
}","@Override public boolean isSuperClassOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  IType elementType=type.getElementType();
  return this.type.isSuperClassOf(elementType) && this.type.isPrimitive() == elementType.isPrimitive();
}",0.4321608040201005
84300,"public void set(Object type){
  if (type == LONG || type == DOUBLE) {
    Object o=this.stack[this.stackCount - 1];
    if (o != LONG && o != DOUBLE) {
      this.actualStackCount++;
    }
  }
  this.stack[this.stackCount - 1]=type;
}","public void set(Object type){
  if (type == null) {
    return;
  }
  if (type == LONG || type == DOUBLE) {
    Object o=this.stack[this.stackCount - 1];
    if (o != LONG && o != DOUBLE) {
      this.actualStackCount++;
    }
  }
  this.stack[this.stackCount - 1]=type;
}",0.924901185770751
84301,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.resolveReceiver(markers,context);
  IValue v=this.resolveFieldAccess(markers,context);
  if (v != null) {
    return v;
  }
  Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name.unqualified);
  marker.addInfo(I18n.getString(""String_Node_Str"",this.name.qualified));
  if (this.receiver != null) {
    marker.addInfo(I18n.getString(""String_Node_Str"",this.receiver.getType()));
  }
  markers.add(marker);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.resolveReceiver(markers,context);
  IValue v=this.resolveFieldAccess(markers,context);
  if (v != null) {
    return v;
  }
  if (this.receiver != null && !this.receiver.isResolved()) {
    return this;
  }
  Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name.unqualified);
  marker.addInfo(I18n.getString(""String_Node_Str"",this.name.qualified));
  if (this.receiver != null) {
    marker.addInfo(I18n.getString(""String_Node_Str"",this.receiver.getType()));
  }
  markers.add(marker);
  return this;
}",0.9256938227394808
84302,"@Override default IValue resolve(MarkerList markers,IContext context){
  int wildcards=this.wildcardCount();
  if (wildcards > 0) {
    return this.toLambda(markers,context,wildcards);
  }
  this.resolveReceiver(markers,context);
  this.resolveArguments(markers,context);
  IValue resolved=this.resolveCall(markers,context);
  if (resolved != null) {
    return resolved;
  }
  this.reportResolve(markers,context);
  return this;
}","@Override default IValue resolve(MarkerList markers,IContext context){
  int wildcards=this.wildcardCount();
  if (wildcards > 0) {
    return this.toLambda(markers,context,wildcards);
  }
  this.resolveReceiver(markers,context);
  this.resolveArguments(markers,context);
  IValue resolved=this.resolveCall(markers,context);
  if (resolved != null) {
    return resolved;
  }
  IValue receiver=this.getReceiver();
  if (receiver != null && !receiver.isResolved()) {
    return this;
  }
  if (!this.getArguments().isResolved()) {
    return this;
  }
  this.reportResolve(markers,context);
  return this;
}",0.8312439729990356
84303,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isArrayType()) {
    return this;
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.NIL_CONVERTIBLE_CLASS);
  if (annotation != null) {
    this.methodName=LiteralConversion.getMethodName(annotation);
    this.requiredType=type;
    return this;
  }
  markers.add(I18n.createMarker(this.position,""String_Node_Str"",type));
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isArrayType()) {
    this.requiredType=type;
    this.methodName=Names.apply;
    return this;
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.NIL_CONVERTIBLE_CLASS);
  if (annotation != null) {
    this.methodName=LiteralConversion.getMethodName(annotation);
    this.requiredType=type;
    return this;
  }
  if (type != dyvil.tools.compiler.ast.type.Types.UNKNOWN) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",type));
  }
 else {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",type));
  }
  return this;
}",0.7934595524956971
84304,"@Override public void setValue(IValue value){
  REPLVariable field=new REPLVariable(this,ICodePosition.ORIGIN,null,Types.UNKNOWN,value,this.className,Modifiers.FINAL);
  this.memberClass=this.getREPLClass(field);
  value.resolveTypes(this.markers,this);
  value=value.resolve(this.markers,this);
  if (value.valueTag() == IValue.FIELD_ACCESS) {
    IDataMember f=((FieldAccess)value).getField();
    if (f instanceof REPLVariable) {
      ((REPLVariable)f).updateValue();
      System.out.println(f);
      return;
    }
  }
  IType type=value.getType();
  value=value.withType(type,type,this.markers,this);
  if (value == null) {
    throw new Error(""String_Node_Str"" + type);
  }
  type=value.getType();
  value.checkTypes(this.markers,this);
  value.check(this.markers,this);
  if (this.hasErrors()) {
    return;
  }
  for (int i=0; i < DyvilCompiler.constantFolding; i++) {
    value=value.foldConstants();
  }
  value=value.cleanup(this,this);
  field.setValue(value);
  field.setType(type);
  field.setName(this.getFieldName(type));
  this.compileVariable(field);
  if (type != Types.VOID) {
    this.fields.put(field.getName(),field);
    System.out.println(field.toString());
  }
}","@Override public void setValue(IValue value){
  REPLVariable field=new REPLVariable(this,ICodePosition.ORIGIN,null,Types.UNKNOWN,value,this.className,Modifiers.FINAL);
  this.memberClass=this.getREPLClass(field);
  value.resolveTypes(this.markers,this);
  value=value.resolve(this.markers,this);
  if (value.valueTag() == IValue.FIELD_ACCESS) {
    IDataMember f=((FieldAccess)value).getField();
    if (f instanceof REPLVariable) {
      ((REPLVariable)f).updateValue();
      System.out.println(f);
      return;
    }
  }
  IType type=value.getType();
  IValue typedValue=value.withType(type,type,this.markers,this);
  if (typedValue != null) {
    value=typedValue;
  }
  type=value.getType();
  value.checkTypes(this.markers,this);
  value.check(this.markers,this);
  if (this.hasErrors()) {
    return;
  }
  for (int i=0; i < DyvilCompiler.constantFolding; i++) {
    value=value.foldConstants();
  }
  value=value.cleanup(this,this);
  field.setValue(value);
  field.setType(type);
  field.setName(this.getFieldName(type));
  this.compileVariable(field);
  if (type != Types.VOID) {
    this.fields.put(field.getName(),field);
    System.out.println(field.toString());
  }
}",0.9620573355817876
84305,"private IValue typed(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IValue resolved=super.resolve(markers,context);
  this.resolved=true;
  IValue typed;
  if (resolved == this) {
    this.returnType=null;
    typed=super.withType(type,typeContext,markers,context);
  }
 else {
    typed=resolved.withType(type,typeContext,markers,context);
  }
  return typed;
}","private IValue typed(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IValue resolved=super.resolve(markers,context);
  this.resolved=true;
  IValue typed;
  if (resolved == this) {
    this.returnType=null;
    typed=super.withType(type,typeContext,markers,context);
  }
 else {
    typed=resolved.withType(type,typeContext,markers,context);
  }
  if (typed == null) {
    Util.createTypeError(markers,resolved,type,typeContext,""String_Node_Str"");
    return resolved;
  }
  return typed;
}",0.8294829482948295
84306,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label start=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label end=new dyvil.tools.asm.Label();
  writer.writeLabel(start);
  int count=writer.localCount();
  if (this.labels == null) {
    for (int i=0; i < this.valueCount; i++) {
      this.values[i].writeStatement(writer);
    }
  }
 else {
    for (int i=0; i < this.valueCount; i++) {
      Label l=this.labels[i];
      if (l != null) {
        writer.writeLabel(l.target);
      }
      this.values[i].writeStatement(writer);
    }
  }
  writer.resetLocals(count);
  writer.writeLabel(end);
  if (this.variables == null) {
    return;
  }
  for (  Entry<Name,Variable> entry : this.variables) {
    entry.getValue().writeLocal(writer,start,end);
  }
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label start=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label end=new dyvil.tools.asm.Label();
  writer.writeLabel(start);
  int localCount=writer.localCount();
  if (this.labels == null) {
    for (int i=0; i < this.valueCount; i++) {
      this.values[i].writeStatement(writer);
    }
  }
 else {
    for (int i=0; i < this.valueCount; i++) {
      Label label=this.labels[i];
      if (label != null) {
        writer.writeLabel(label.target);
      }
      this.values[i].writeStatement(writer);
    }
  }
  writer.resetLocals(localCount);
  writer.writeLabel(end);
  if (this.variables == null) {
    return;
  }
  for (  Entry<Name,Variable> entry : this.variables) {
    entry.getValue().writeLocal(writer,start,end);
  }
}",0.9866666666666668
84307,"@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.valueCount <= 0) {
    return this;
  }
  IContext context1=new CombiningContext(this,context);
  int len=this.valueCount - 1;
  for (int i=0; i < len; i++) {
    IValue v1=this.values[i];
    IValue v2=v1.resolve(markers,context1);
    if (v1 != v2) {
      this.values[i]=v2;
    }
    if (v2.valueTag() == IValue.VARIABLE) {
      this.addVariable(v2);
    }
    v1=v2.withType(Types.VOID,Types.VOID,markers,context1);
    if (v1 == null) {
      Marker marker=I18n.createMarker(v2.getPosition(),""String_Node_Str"");
      marker.addInfo(I18n.getString(""String_Node_Str"",v2.getType()));
      markers.add(marker);
    }
 else {
      this.values[i]=v1;
    }
  }
  this.values[len]=this.values[len].resolve(markers,context1);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.valueCount <= 0) {
    return this;
  }
  IContext combinedContext=new CombiningContext(this,context);
  int len=this.valueCount - 1;
  for (int i=0; i < len; i++) {
    IValue resolved=this.values[i]=this.values[i].resolve(markers,combinedContext);
    if (resolved.valueTag() == IValue.VARIABLE) {
      this.addVariable(resolved);
    }
    IValue typed=resolved.withType(Types.VOID,Types.VOID,markers,combinedContext);
    if (typed == null) {
      Marker marker=I18n.createMarker(resolved.getPosition(),""String_Node_Str"");
      marker.addInfo(I18n.getString(""String_Node_Str"",resolved.getType()));
      markers.add(marker);
    }
 else {
      this.values[i]=typed;
    }
  }
  this.values[len]=this.values[len].resolve(markers,combinedContext);
  return this;
}",0.8747016706443914
84308,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount > 0) {
    IValue v=this.values[this.valueCount - 1].withType(type,typeContext,markers,new CombiningContext(this,context));
    if (v != null) {
      this.values[this.valueCount - 1]=v;
      this.returnType=v.getType();
      return this;
    }
  }
  return type == Types.VOID ? this : null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount > 0) {
    IValue typed=this.values[this.valueCount - 1].withType(type,typeContext,markers,new CombiningContext(this,context));
    if (typed != null) {
      this.values[this.valueCount - 1]=typed;
      this.returnType=typed.getType();
      return this;
    }
  }
  return type == Types.VOID ? this : null;
}",0.9722222222222222
84309,"protected void addVariable(IValue value){
  if (this.variables == null) {
    this.variables=new IdentityHashMap();
  }
  Variable var=((FieldInitializer)value).variable;
  this.variables.put(var.getName(),var);
}","protected void addVariable(IValue value){
  if (this.variables == null) {
    this.variables=new IdentityHashMap<>();
  }
  Variable var=((FieldInitializer)value).variable;
  this.variables.put(var.getName(),var);
}",0.9953271028037384
84310,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  int len=this.valueCount - 1;
  if (len < 0) {
    return;
  }
  dyvil.tools.asm.Label start=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label end=new dyvil.tools.asm.Label();
  writer.writeLabel(start);
  int count=writer.localCount();
  if (this.labels == null) {
    for (int i=0; i < len; i++) {
      this.values[i].writeStatement(writer);
    }
    this.values[len].writeExpression(writer,this.returnType);
  }
 else {
    for (int i=0; i < len; i++) {
      Label l=this.labels[i];
      if (l != null) {
        writer.writeLabel(l.target);
      }
      this.values[i].writeStatement(writer);
    }
    Label l=this.labels[len];
    if (l != null) {
      writer.writeLabel(l.target);
    }
    this.values[len].writeExpression(writer);
  }
  writer.resetLocals(count);
  writer.writeLabel(end);
  if (this.variables == null) {
    return;
  }
  for (  Entry<Name,Variable> entry : this.variables) {
    Variable var=entry.getValue();
    var.writeLocal(writer,start,end);
  }
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  int statementCount=this.valueCount - 1;
  if (statementCount < 0) {
    return;
  }
  dyvil.tools.asm.Label start=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label end=new dyvil.tools.asm.Label();
  writer.writeLabel(start);
  int localCount=writer.localCount();
  if (this.labels == null) {
    for (int i=0; i < statementCount; i++) {
      this.values[i].writeStatement(writer);
    }
    this.values[statementCount].writeExpression(writer,this.returnType);
  }
 else {
    for (int i=0; i < statementCount; i++) {
      Label label=this.labels[i];
      if (label != null) {
        writer.writeLabel(label.target);
      }
      this.values[i].writeStatement(writer);
    }
    Label label=this.labels[statementCount];
    if (label != null) {
      writer.writeLabel(label.target);
    }
    this.values[statementCount].writeExpression(writer);
  }
  writer.resetLocals(localCount);
  writer.writeLabel(end);
  if (this.variables == null) {
    return;
  }
  for (  Entry<Name,Variable> entry : this.variables) {
    Variable var=entry.getValue();
    var.writeLocal(writer,start,end);
  }
}",0.9227373068432672
84311,"@Override public Iterator<IValue> iterator(){
  return new ArrayIterator(this.values,this.valueCount);
}","@Override public Iterator<IValue> iterator(){
  return new ArrayIterator<>(this.values,this.valueCount);
}",0.9904761904761904
84312,"@Override public void checkTypes(MarkerList markers,IContext context){
  IContext context1=this.variables == null ? context : new CombiningContext(this,context);
  for (int i=0; i < this.valueCount; i++) {
    this.values[i].checkTypes(markers,context1);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IContext combinedContext=this.variables == null ? context : new CombiningContext(this,context);
  for (int i=0; i < this.valueCount; i++) {
    this.values[i].checkTypes(markers,combinedContext);
  }
}",0.9288389513108616
84313,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.valueCount == 0) {
    buffer.append(Formatting.Expression.emptyExpression);
    return;
  }
  buffer.append('\n').append(prefix).append('{').append('\n');
  String prefix1=prefix + Formatting.Method.indent;
  ICodePosition prevPos=null;
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    buffer.append(prefix1);
    if (prevPos != null) {
      ICodePosition pos=value.getPosition();
      if (pos != null && pos.startLine() - prevPos.endLine() > 1) {
        buffer.append('\n').append(prefix1);
      }
      prevPos=pos;
    }
    if (this.labels != null) {
      Label l=this.labels[i];
      if (l != null) {
        buffer.append(l.name).append(Formatting.Expression.labelSeperator);
      }
    }
    value.toString(prefix1,buffer);
    buffer.append(""String_Node_Str"");
  }
  buffer.append(prefix).append('}');
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.valueCount == 0) {
    buffer.append(Formatting.Expression.emptyExpression);
    return;
  }
  buffer.append('\n').append(prefix).append('{').append('\n');
  String indentedPrefix=prefix + Formatting.Method.indent;
  int prevLine=0;
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    ICodePosition pos=value.getPosition();
    buffer.append(indentedPrefix);
    if (pos != null) {
      if (pos.startLine() - prevLine > 1) {
        buffer.append('\n').append(indentedPrefix);
      }
      prevLine=pos.endLine();
    }
    if (this.labels != null) {
      Label l=this.labels[i];
      if (l != null) {
        buffer.append(l.name).append(Formatting.Expression.labelSeperator);
      }
    }
    value.toString(indentedPrefix,buffer);
    buffer.append(""String_Node_Str"");
  }
  buffer.append(prefix).append('}');
}",0.5266558966074314
84314,"@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
  }
  for (int i=0; i < this.importCount; i++) {
    this.imports[i].resolveTypes(markers,context,using);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
    if (context == null) {
      return;
    }
  }
  for (int i=0; i < this.importCount; i++) {
    this.imports[i].resolveTypes(markers,context,using);
  }
}",0.931185944363104
84315,"@Override public void getMethodMatches(MethodMatchList list,IValue instance,Name name,IArguments arguments){
  this.context.getMethodMatches(list,instance,name,arguments);
}","@Override public void getMethodMatches(MethodMatchList list,IValue instance,Name name,IArguments arguments){
  if (this.context == null) {
    return;
  }
  this.context.getMethodMatches(list,instance,name,arguments);
}",0.8826530612244898
84316,"@Override public IClass resolveClass(Name name){
  return this.context.resolveClass(name);
}","@Override public IClass resolveClass(Name name){
  if (this.context == null) {
    return null;
  }
  return this.context.resolveClass(name);
}",0.7829787234042553
84317,"@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
  }
  if (using) {
    if (!(context instanceof IClass)) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str""));
      return;
    }
    this.context=context;
    return;
  }
  if (!(context instanceof Package)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return;
  }
  this.context=context;
}","@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
    if (context == null) {
      return;
    }
  }
  if (using) {
    if (!(context instanceof IClass)) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str""));
      return;
    }
    this.context=context;
    return;
  }
  if (!(context instanceof Package)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return;
  }
  this.context=context;
}",0.9588801399825022
84318,"@Override public Package resolvePackage(Name name){
  return this.context.resolvePackage(name);
}","@Override public Package resolvePackage(Name name){
  if (this.context == null) {
    return null;
  }
  return this.context.resolvePackage(name);
}",0.7918367346938775
84319,"@Override public IDataMember resolveField(Name name){
  return this.context.resolveField(name);
}","@Override public IDataMember resolveField(Name name){
  if (this.context == null) {
    return null;
  }
  return this.context.resolveField(name);
}",0.7918367346938775
84320,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IMethod method=this.method;
  if (method == null) {
    method=IContext.resolveMethod(type,null,this.methodName,this.arguments);
    if (method == null) {
      StringBuilder builder=new StringBuilder();
      this.arguments.typesToString(builder);
      markers.add(I18n.createMarker(this.literal.getPosition(),""String_Node_Str"",this.literal.getType(),type,builder));
      this.type=type;
      return null;
    }
    this.method=method;
  }
  GenericData data=method.getGenericData(null,null,this.arguments);
  method.checkArguments(markers,this.literal.getPosition(),context,null,this.arguments,data);
  this.type=method.getType().getConcreteType(data);
  if (!type.isSuperTypeOf(this.type)) {
    Marker m=I18n.createMarker(this.literal.getPosition(),""String_Node_Str"");
    m.addInfo(""String_Node_Str"" + type.getConcreteType(typeContext));
    m.addInfo(""String_Node_Str"" + this.type);
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    Util.methodSignatureToString(method,sb);
    m.addInfo(sb.toString());
    markers.add(m);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IMethod method=this.method;
  if (method == null) {
    method=IContext.resolveMethod(type,null,this.methodName,this.arguments);
    if (method == null) {
      StringBuilder builder=new StringBuilder();
      this.arguments.typesToString(builder);
      markers.add(I18n.createMarker(this.literal.getPosition(),""String_Node_Str"",this.literal.getType(),type,builder));
      this.type=type;
      return null;
    }
    this.method=method;
  }
  GenericData data=method.getGenericData(null,null,this.arguments);
  method.checkArguments(markers,this.literal.getPosition(),context,null,this.arguments,data);
  this.type=method.getType().getConcreteType(data);
  IType concrete=type.getConcreteType(typeContext);
  if (!concrete.isSuperTypeOf(this.type)) {
    Marker m=I18n.createMarker(this.literal.getPosition(),""String_Node_Str"");
    m.addInfo(""String_Node_Str"" + concrete);
    m.addInfo(""String_Node_Str"" + this.type);
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    Util.methodSignatureToString(method,sb);
    m.addInfo(sb.toString());
    markers.add(m);
  }
  return this;
}",0.9567408651826964
84321,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else {
      IType type=this.theClass.getType();
      instance=IType.convertValue(instance,type,type,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    Deprecation.checkDeprecation(markers,position,this,""String_Node_Str"");
  }
switch (IContext.getVisibility(context,this)) {
case IContext.INTERNAL:
    markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
  break;
case IContext.INVISIBLE:
markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
break;
}
return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.theClass.getClassType();
      IValue instance1=IType.convertValue(instance,type,type,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,type,type,""String_Node_Str"",this.name);
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    Deprecation.checkDeprecation(markers,position,this,""String_Node_Str"");
  }
switch (IContext.getVisibility(context,this)) {
case IContext.INTERNAL:
    markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
  break;
case IContext.INVISIBLE:
markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
break;
}
return instance;
}",0.9331810394060536
84322,"private void checkTypeVarsInferred(MarkerList markers,ICodePosition position,ITypeContext typeContext){
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable typeVar=this.generics[i];
    IType type=typeContext.resolveType(typeVar);
    if (type == null || type.typeTag() == IType.TYPE_VAR_TYPE && ((TypeVarType)type).typeVar == typeVar) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name,typeVar.getName()));
      typeContext.addMapping(typeVar,Types.ANY);
    }
  }
}","private void checkTypeVarsInferred(MarkerList markers,ICodePosition position,ITypeContext typeContext){
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable typeVar=this.generics[i];
    IType type=typeContext.resolveType(typeVar);
    if (type == null || type.typeTag() == IType.TYPE_VAR_TYPE && ((TypeVarType)type).getTypeVariable() == typeVar) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name,typeVar.getName()));
      typeContext.addMapping(typeVar,Types.ANY);
    }
  }
}",0.9764243614931236
84323,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else {
      IValue instance1=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.theClass.getType(),typeContext,""String_Node_Str"",this.getName());
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX && !this.isStatic()) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
      }
    }
 else {
      IType type=this.theClass.getClassType();
      IValue instance1=IType.convertValue(instance,type,typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,type,typeContext,""String_Node_Str"",this.name);
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9418097177771312
84324,"private void checkOverride(MarkerList markers,IContext context){
  if (this.overrideMethods == null) {
    if ((this.modifiers & Modifiers.OVERRIDE) != 0) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
    }
    return;
  }
  if ((this.modifiers & Modifiers.OVERRIDE) == 0) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
  }
  for (  IMethod m : this.overrideMethods) {
    if (m.hasModifier(Modifiers.FINAL)) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
    }
    IType type=m.getType();
    if (type != this.type && !type.isSuperTypeOf(this.type)) {
      Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + type);
      markers.add(marker);
    }
  }
}","private void checkOverride(MarkerList markers,IContext context){
  if (this.overrideMethods == null) {
    if ((this.modifiers & Modifiers.OVERRIDE) != 0) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
    }
    return;
  }
  if ((this.modifiers & Modifiers.OVERRIDE) == 0) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
  }
  for (  IMethod m : this.overrideMethods) {
    if (m.hasModifier(Modifiers.FINAL)) {
      markers.add(I18n.createMarker(this.position,""String_Node_Str"",this.name));
    }
    IType type=m.getType().getConcreteType(this.theClass.getType());
    if (type != this.type && !type.isSuperTypeOf(this.type)) {
      Marker marker=I18n.createMarker(this.position,""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + type);
      markers.add(marker);
    }
  }
}",0.9772601220188576
84325,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IContext context1=new CombiningContext(this,context);
  if (type.typeTag() == IType.LAMBDA) {
    LambdaType lt=(LambdaType)type;
    IType returnType=lt.getType();
    int parameterCount=lt.typeCount();
switch (parameterCount) {
case 0:
      super.resolve(markers,context1);
    this.resolved=true;
  return lt.wrapLambda(super.withType(returnType,typeContext,markers,context1),typeContext);
case 1:
this.implicitParameter=new MethodParameter(Names.$it,lt.getType(0));
super.resolve(markers,context1);
this.resolved=true;
IValue self=super.withType(returnType,typeContext,markers,context1);
if (self == null) {
return null;
}
returnType=this.getType();
LambdaExpression le=new LambdaExpression(null,this.implicitParameter);
le.setType(type);
le.setReturnType(returnType);
le.setMethod(lt.getFunctionalMethod());
le.setValue(self);
le.inferReturnType(type,typeContext,returnType);
return le;
}
return null;
}
super.resolve(markers,context1);
this.resolved=true;
return super.withType(type,typeContext,markers,context1);
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.resolved) {
    return this;
  }
  IContext context1=new CombiningContext(this,context);
  if (type.typeTag() == IType.LAMBDA) {
    LambdaType lt=(LambdaType)type;
    IType returnType=lt.getType();
    int parameterCount=lt.typeCount();
switch (parameterCount) {
case 0:
{
        IValue resolved=super.resolve(markers,context1);
        this.resolved=true;
        IValue typed;
        if (resolved == this) {
          typed=super.withType(returnType,typeContext,markers,context1);
        }
 else {
          typed=resolved.withType(returnType,typeContext,markers,context1);
        }
        return lt.wrapLambda(typed,typeContext);
      }
case 1:
{
      this.implicitParameter=new MethodParameter(Names.$it,lt.getType(0));
      IValue resolved=super.resolve(markers,context1);
      this.resolved=true;
      IValue typed=resolved.withType(returnType,typeContext,markers,context1);
      if (typed == null) {
        return null;
      }
      returnType=typed.getType();
      LambdaExpression le=new LambdaExpression(null,this.implicitParameter);
      le.setType(type);
      le.setReturnType(returnType);
      le.setMethod(lt.getFunctionalMethod());
      le.setValue(typed);
      le.inferReturnType(type,typeContext,returnType);
      return le;
    }
}
return null;
}
super.resolve(markers,context1);
this.resolved=true;
return super.withType(type,typeContext,markers,context1);
}",0.4146525679758308
84326,"@Override public IValue convertValue(IValue value,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.parameterCount != 0 || IObjectType.super.isSuperTypeOf(value.getType())) {
    return value.withType(this,typeContext,markers,context);
  }
  IValue value1=value.withType(this.returnType.getConcreteType(typeContext),typeContext,markers,context);
  if (value1 != null) {
    return this.wrapLambda(value,typeContext);
  }
  return null;
}","@Override public IValue convertValue(IValue value,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.parameterCount != 0 || value.isType(this)) {
    return value.withType(this,typeContext,markers,context);
  }
  IValue value1=value.withType(this.returnType.getConcreteType(typeContext),typeContext,markers,context);
  if (value1 != null) {
    return this.wrapLambda(value1,typeContext);
  }
  return null;
}",0.927211646136618
84327,"public LambdaExpression wrapLambda(IValue value,ITypeContext typeContext){
  LambdaExpression le=new LambdaExpression(value.getPosition(),null,0);
  le.setMethod(this.getFunctionalMethod());
  le.setReturnType(this.returnType);
  le.setValue(value);
  le.setType(this);
  le.inferReturnType(this,typeContext,this.returnType);
  return le;
}","public LambdaExpression wrapLambda(IValue value,ITypeContext typeContext){
  IType returnType=value.getType();
  LambdaExpression le=new LambdaExpression(value.getPosition(),null,0);
  le.setMethod(this.getFunctionalMethod());
  le.setReturnType(returnType);
  le.setValue(value);
  le.setType(this);
  le.inferReturnType(this,typeContext,returnType);
  return le;
}",0.9348441926345608
84328,"@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  if (this.parameterCount == 0 && this.returnType.isSuperTypeOf(concrete)) {
    this.returnType.inferTypes(concrete,typeContext);
    return;
  }
  ITypeVariable typeVar;
  IType concreteType;
  IClass iclass=this.getTheClass();
  for (int i=0; i < this.parameterCount; i++) {
    typeVar=iclass.getTypeVariable(i);
    concreteType=concrete.resolveType(typeVar);
    if (concreteType != null) {
      this.parameterTypes[i].inferTypes(concreteType,typeContext);
    }
  }
  typeVar=iclass.getTypeVariable(this.parameterCount);
  concreteType=concrete.resolveType(typeVar);
  if (concreteType != null) {
    this.returnType.inferTypes(concreteType,typeContext);
  }
}","@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  boolean found=false;
  ITypeVariable typeVar;
  IType concreteType;
  IClass iclass=this.getTheClass();
  for (int i=0; i < this.parameterCount; i++) {
    typeVar=iclass.getTypeVariable(i);
    concreteType=concrete.resolveType(typeVar);
    if (concreteType != null) {
      this.parameterTypes[i].inferTypes(concreteType,typeContext);
      found=true;
    }
  }
  typeVar=iclass.getTypeVariable(this.parameterCount);
  concreteType=concrete.resolveType(typeVar);
  if (concreteType != null) {
    this.returnType.inferTypes(concreteType,typeContext);
    found=true;
  }
  if (!found && this.parameterCount == 0 && this.returnType.isSuperTypeOf(concrete)) {
    this.returnType.inferTypes(concrete,typeContext);
  }
}",0.2621674237508111
84329,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  FieldAccess access=(FieldAccess)this.instance;
  IDataMember f=access.field;
  if (this.writeIINC(writer,f)) {
    return;
  }
  IValue instance=access.instance;
  if (instance != null) {
    instance.writeExpression(writer);
    writer.writeInsn(Opcodes.AUTO_DUP);
  }
  int lineNumber=this.instance.getLineNumber();
  f.writeGet(writer,null,lineNumber);
  this.method.writeCall(writer,null,this.arguments,null,lineNumber);
  f.writeSet(writer,null,null,lineNumber);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  FieldAccess access=(FieldAccess)this.instance;
  IDataMember f=access.field;
  if (this.writeIINC(writer,f)) {
    return;
  }
  f.writeSet(writer,access.instance,new MethodCall(this.position,access,this.method,this.arguments),this.getLineNumber());
}",0.5145413870246085
84330,"private void writeBoolJump(int jump){
  Label label1=new Label();
  Label label2=new Label();
  this.mv.visitJumpInsn(jump,label1);
  this.mv.visitInsn(Opcodes.ICONST_0);
  this.mv.visitJumpInsn(Opcodes.GOTO,label2);
  this.mv.visitLabel(label1);
  this.frame.visitFrame(this.mv);
  this.mv.visitInsn(Opcodes.ICONST_1);
  this.mv.visitLabel(label2);
  this.frame.push(ClassFormat.BOOLEAN);
  this.frame.visitFrame(this.mv);
}","private void writeBoolJump(int jump) throws BytecodeException {
  Label label1=new Label();
  Label label2=new Label();
  this.writeJumpInsn(jump,label1);
  this.writeInsn(Opcodes.ICONST_0);
  this.writeJumpInsn(Opcodes.GOTO,label2);
  this.writeTargetLabel(label1);
  this.writeInsn(Opcodes.ICONST_1);
  this.writeTargetLabel(label2);
}",0.7112860892388452
84331,"@Override public void writeInsn(int opcode) throws BytecodeException {
  if (opcode > 255) {
switch (opcode) {
case Opcodes.LCONST_M1:
      this.frame.push(ClassFormat.LONG);
    this.mv.visitLdcInsn(LONG_MINUS_ONE);
  return;
case Opcodes.BNOT:
this.frame.pop();
this.writeBoolJump(Opcodes.IFEQ);
return;
case Opcodes.INOT:
this.mv.visitInsn(Opcodes.ICONST_M1);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.LNOT:
this.mv.visitLdcInsn(LONG_MINUS_ONE);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.L2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.L2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.L2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.F2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.F2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.F2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.D2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.D2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.D2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case ACMPEQ:
this.frame.pop();
this.frame.pop();
this.writeBoolJump(Opcodes.IF_ACMPEQ);
return;
case ACMPNE:
this.frame.pop();
this.frame.pop();
this.writeBoolJump(Opcodes.IF_ACMPNE);
return;
case Opcodes.OBJECT_EQUALS:
this.frame.pop();
this.frame.pop();
this.mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
this.frame.push(ClassFormat.BOOLEAN);
return;
case SWAP2:
this.frame.reserve(2);
this.mv.visitInsn(Opcodes.DUP2_X2);
this.mv.visitInsn(Opcodes.POP2);
return;
case Opcodes.AUTO_SWAP:
BackendUtil.swap(this);
return;
case Opcodes.AUTO_POP:
BackendUtil.pop(this);
return;
case Opcodes.AUTO_POP2:
BackendUtil.pop2(this);
return;
case Opcodes.AUTO_DUP:
BackendUtil.dup(this);
return;
case Opcodes.AUTO_DUP_X1:
BackendUtil.dupX1(this);
return;
}
if (opcode >= ICMPEQ && opcode <= ICMPLE) {
this.writeBoolJump(Opcodes.IF_ICMPEQ + opcode - ICMPEQ);
return;
}
return;
}
this.insnCallback();
this.frame.visitInsn(opcode);
if (opcode >= IRETURN && opcode <= RETURN || opcode == ATHROW) {
if (this.syncCount > 0) {
for (int i=0; i < this.syncCount; i++) {
this.mv.visitVarInsn(Opcodes.ALOAD,this.syncLocals[i]);
this.mv.visitInsn(Opcodes.MONITOREXIT);
}
}
this.visitFrame=true;
this.hasReturn=true;
}
this.mv.visitInsn(opcode);
}","@Override public void writeInsn(int opcode) throws BytecodeException {
  if (opcode > 255) {
switch (opcode) {
case Opcodes.LCONST_M1:
      this.frame.push(ClassFormat.LONG);
    this.mv.visitLdcInsn(LONG_MINUS_ONE);
  return;
case Opcodes.BNOT:
this.writeBoolJump(Opcodes.IFEQ);
return;
case Opcodes.INOT:
this.mv.visitInsn(Opcodes.ICONST_M1);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.LNOT:
this.mv.visitLdcInsn(LONG_MINUS_ONE);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.L2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.L2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.L2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.F2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.F2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.F2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.D2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.D2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.D2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case ACMPEQ:
this.writeBoolJump(Opcodes.IF_ACMPEQ);
return;
case ACMPNE:
this.writeBoolJump(Opcodes.IF_ACMPNE);
return;
case Opcodes.OBJECT_EQUALS:
this.frame.pop();
this.frame.pop();
this.mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
this.frame.push(ClassFormat.BOOLEAN);
return;
case SWAP2:
this.frame.reserve(2);
this.mv.visitInsn(Opcodes.DUP2_X2);
this.mv.visitInsn(Opcodes.POP2);
return;
case Opcodes.AUTO_SWAP:
BackendUtil.swap(this);
return;
case Opcodes.AUTO_POP:
BackendUtil.pop(this);
return;
case Opcodes.AUTO_POP2:
BackendUtil.pop2(this);
return;
case Opcodes.AUTO_DUP:
BackendUtil.dup(this);
return;
case Opcodes.AUTO_DUP_X1:
BackendUtil.dupX1(this);
return;
}
if (opcode >= ICMPEQ && opcode <= ICMPLE) {
this.writeBoolJump(Opcodes.IF_ICMPEQ + opcode - ICMPEQ);
return;
}
if (opcode >= LCMPEQ && opcode <= DCMPLE) {
this.writeBoolJump(Opcodes.IF_LCMPEQ + opcode - LCMPEQ);
return;
}
return;
}
this.insnCallback();
this.frame.visitInsn(opcode);
if (opcode >= IRETURN && opcode <= RETURN || opcode == ATHROW) {
if (this.syncCount > 0) {
for (int i=0; i < this.syncCount; i++) {
this.mv.visitVarInsn(Opcodes.ALOAD,this.syncLocals[i]);
this.mv.visitInsn(Opcodes.MONITOREXIT);
}
}
this.visitFrame=true;
this.hasReturn=true;
}
this.mv.visitInsn(opcode);
}",0.9654935622317596
84332,"@Intrinsic({LOAD_0,LOAD_1,IF_ICMPNE}) public boolean $bang$eq(boolean v){
  return this.value != v;
}","@Intrinsic({LOAD_0,LOAD_1,ICMPNE}) public boolean $bang$eq(boolean v){
  return this.value != v;
}",0.984924623115578
84333,"@Intrinsic({LOAD_0,LOAD_1,IF_ICMPEQ}) public Boolean $lt$eq$gt(boolean v){
  return apply(v == this.value);
}","@Intrinsic({LOAD_0,LOAD_1,ICMPEQ}) public Boolean $lt$eq$gt(boolean v){
  return apply(v == this.value);
}",0.986046511627907
84334,"@Intrinsic({LOAD_0,LOAD_1,IF_ICMPEQ}) public boolean $eq$eq(boolean v){
  return this.value == v;
}","@Intrinsic({LOAD_0,LOAD_1,ICMPEQ}) public boolean $eq$eq(boolean v){
  return this.value == v;
}",0.9846153846153848
84335,"@Intrinsic({LOAD_0,LOAD_1,BNOT}) public @prefix Boolean $bang(){
  return apply(!this.value);
}","@Intrinsic({LOAD_0,BNOT}) public @prefix Boolean $bang(){
  return apply(!this.value);
}",0.9617486338797814
84336,"@Override public void writeGet(MethodWriter writer,IValue instance,int lineNumber) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer,this.theClass.getType());
  }
  writer.writeFieldInsn(Opcodes.GETFIELD,this.theClass.getInternalName(),this.name.qualified,this.getDescription());
}","@Override public void writeGet(MethodWriter writer,IValue instance,int lineNumber) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer,this.theClass.getType());
  }
  if (this.theClass.hasModifier(Modifiers.ANNOTATION)) {
    StringBuilder desc=new StringBuilder(""String_Node_Str"");
    this.type.appendExtendedName(desc);
    writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,this.theClass.getInternalName(),this.name.qualified,desc.toString(),true);
  }
 else {
    writer.writeFieldInsn(Opcodes.GETFIELD,this.theClass.getInternalName(),this.name.qualified,this.getDescription());
  }
}",0.6794055201698513
84337,"@Override public IValue checkAssign(MarkerList markers,IContext context,ICodePosition position,IValue instance,IValue newValue){
  if (newValue != null && (this.modifiers & Modifiers.FINAL) != 0) {
    markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
  }
  IValue value1=newValue.withType(this.type,null,markers,context);
  if (value1 == null) {
    Marker marker=I18n.createMarker(newValue.getPosition(),""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + newValue.getType());
    markers.add(marker);
  }
 else {
    newValue=value1;
  }
  return newValue;
}","@Override public IValue checkAssign(MarkerList markers,IContext context,ICodePosition position,IValue instance,IValue newValue){
  if (this.theClass.hasModifier(Modifiers.ANNOTATION)) {
    markers.add(I18n.createError(position,""String_Node_Str"",this.name.unqualified));
  }
 else   if (newValue != null && (this.modifiers & Modifiers.FINAL) != 0) {
    markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
  }
  IValue value1=newValue.withType(this.type,null,markers,context);
  if (value1 == null) {
    Marker marker=I18n.createMarker(newValue.getPosition(),""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + newValue.getType());
    markers.add(marker);
  }
 else {
    newValue=value1;
  }
  return newValue;
}",0.8985313751668892
84338,"@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolation ssv=new StringInterpolation(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == BaseSymbols.COLON || type == DyvilSymbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.valueConsumer.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null && type != 0) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}","@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Tokens.EOF:
case BaseSymbols.SEMICOLON:
case BaseSymbols.COLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolation ssv=new StringInterpolation(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=END;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == BaseSymbols.COLON || type == DyvilSymbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.valueConsumer.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null && type != 0) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}",0.9997453202597734
84339,"@Override public boolean addRawAnnotation(String type,IAnnotation annotation){
switch (type) {
case ""String_Node_Str"":
    this.modifiers|=Modifiers.INLINE;
  return false;
case ""String_Node_Str"":
case ""String_Node_Str"":
this.modifiers|=Modifiers.INFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.EXTENSION;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.PREFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.INTERNAL;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.SEALED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.NATIVE;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.STRICT;
return false;
case Deprecation.JAVA_INTERNAL:
case Deprecation.DYVIL_INTERNAL:
this.modifiers|=Modifiers.DEPRECATED;
return true;
case ""String_Node_Str"":
this.modifiers|=Modifiers.OVERRIDE;
return false;
case ""String_Node_Str"":
if (annotation != null) {
this.readIntrinsicAnnotation(annotation);
return false;
}
}
return true;
}","@Override public boolean addRawAnnotation(String type,IAnnotation annotation){
switch (type) {
case ""String_Node_Str"":
    this.modifiers|=Modifiers.INLINE;
  return false;
case ""String_Node_Str"":
case ""String_Node_Str"":
this.modifiers|=Modifiers.INFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.EXTENSION;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.PREFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.INTERNAL;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.SEALED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.NATIVE;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.STRICT;
return false;
case Deprecation.JAVA_INTERNAL:
case Deprecation.DYVIL_INTERNAL:
this.modifiers|=Modifiers.DEPRECATED;
return true;
case ""String_Node_Str"":
this.modifiers|=Modifiers.OVERRIDE;
return false;
case ""String_Node_Str"":
if (annotation != null) {
this.readIntrinsicAnnotation(annotation);
return this.getClass() != ExternalMethod.class;
}
}
return true;
}",0.9787644787644788
84340,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      IValue instance1=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.theClass.getType(),typeContext,""String_Node_Str"");
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      IValue instance1=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.theClass.getType(),typeContext,""String_Node_Str"",this.getName());
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.997851926106258
84341,"public TokenIterator tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new StartToken();
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_LETTER:
        if (c == '_' || c == '$') {
          buf.append(c);
          subtype=MOD_LETTER | MOD_SYMBOL;
          continue;
        }
      if (LexerUtil.isIdentifierPart(c)) {
        buf.append(c);
        continue;
      }
    addToken=true;
  break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
  buf.append(c);
  subtype=MOD_LETTER | MOD_SYMBOL;
  continue;
}
if (LexerUtil.isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (LexerUtil.isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (LexerUtil.isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
switch (c) {
case 'l':
case 'L':
type=LONG;
addToken=true;
reparse=false;
break;
case '_':
continue;
}
if (subtype == MOD_DEC) {
if (LexerUtil.isDigit(c)) {
buf.append(c);
}
 else if (c == '.') {
if (!LexerUtil.isDigit(code.charAt(i + 1))) {
addToken=true;
reparse=true;
break typeswitch;
}
type=DOUBLE;
buf.append('.');
}
 else if (c == 'e' || c == 'E') {
type=FLOAT;
buf.append('e');
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || LexerUtil.isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (c == 'o' || LexerUtil.isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || LexerUtil.isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (LexerUtil.isDigit(c) || c == 'e') {
buf.append(c);
}
 else if (c == '-' && code.charAt(i - 1) == 'e') {
buf.append('-');
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '""') {
subtype=STRING;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '""') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case SINGLE_QUOTED_STRING:
if (c == '\'' && buf.length() > 0) {
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case LITERAL_STRING:
if (c == '""' && buf.length() > 0) {
addToken=true;
reparse=false;
}
 else if (c != '@' || buf.length() > 0) {
buf.append(c);
}
break;
}
if (addToken) {
prev=this.addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
prev=this.addToken(prev,buf,type | subtype,lineNumber,start);
}
EndToken end=new EndToken(len,lineNumber);
prev.setNext(end);
end.setPrev(prev);
first.next().setPrev(first);
return new TokenIterator(first.next());
}","public TokenIterator tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new StartToken();
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_LETTER:
        if (c == '_' || c == '$') {
          buf.append(c);
          subtype=MOD_LETTER | MOD_SYMBOL;
          continue;
        }
      if (LexerUtil.isIdentifierPart(c)) {
        buf.append(c);
        continue;
      }
    addToken=true;
  break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
  buf.append(c);
  subtype=MOD_LETTER | MOD_SYMBOL;
  continue;
}
if (LexerUtil.isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (LexerUtil.isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (LexerUtil.isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
switch (c) {
case 'l':
case 'L':
type=LONG;
addToken=true;
reparse=false;
break;
case '_':
continue;
}
if (subtype == MOD_DEC) {
if (LexerUtil.isDigit(c)) {
buf.append(c);
}
 else if (c == '.') {
if (!LexerUtil.isDigit(code.charAt(i + 1))) {
addToken=true;
reparse=true;
break typeswitch;
}
type=DOUBLE;
buf.append('.');
}
 else if (c == 'e' || c == 'E') {
type=FLOAT;
buf.append('e');
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || LexerUtil.isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (c == 'o' || LexerUtil.isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || LexerUtil.isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (LexerUtil.isDigit(c) || c == 'e') {
buf.append(c);
}
 else if (c == '-' && code.charAt(i - 1) == 'e') {
buf.append('-');
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && (buf.length() > 0 || string)) {
if (!string && buf.charAt(0) == '""') {
subtype=STRING;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '""') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case SINGLE_QUOTED_STRING:
if (c == '\'' && buf.length() > 0) {
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case LITERAL_STRING:
if (c == '""' && buf.length() > 0) {
addToken=true;
reparse=false;
}
 else if (c != '@' || buf.length() > 0) {
buf.append(c);
}
break;
}
if (addToken) {
prev=this.addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
prev=this.addToken(prev,buf,type | subtype,lineNumber,start);
}
EndToken end=new EndToken(len,lineNumber);
prev.setNext(end);
end.setPrev(prev);
first.next().setPrev(first);
return new TokenIterator(first.next());
}",0.999793089178564
84342,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.arguments.resolve(markers,context);
  if (this.type.getTheClass().isInterface()) {
    this.constructor=IContext.resolveConstructor(Types.OBJECT_CLASS,this.arguments);
  }
 else {
    this.constructor=IContext.resolveConstructor(this.type,this.arguments);
  }
  if (this.constructor == null) {
    this.reportResolve(markers);
  }
  this.metadata=new AnonymousClassMetadata(this.nestedClass,this.constructor);
  this.nestedClass.setMetadata(this.metadata);
  this.nestedClass.setOuterClass(context.getThisClass());
  this.nestedClass.setHeader(context.getHeader());
  this.nestedClass.context=context;
  this.nestedClass.resolve(markers,context);
  this.nestedClass.context=null;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.arguments.resolve(markers,context);
  if (this.type.getTheClass().isInterface()) {
    this.constructor=IContext.resolveConstructor(Types.OBJECT_CLASS,this.arguments);
  }
 else {
    this.constructor=IContext.resolveConstructor(this.type,this.arguments);
  }
  if (this.constructor == null) {
    this.reportResolve(markers);
  }
  this.metadata=new AnonymousClassMetadata(this.nestedClass,this.constructor);
  this.nestedClass.setMetadata(this.metadata);
  this.nestedClass.setOuterClass(context.getThisClass());
  IDyvilHeader header=context.getHeader();
  this.nestedClass.setHeader(header);
  header.addInnerClass(this.nestedClass);
  this.nestedClass.context=context;
  this.nestedClass.resolve(markers,context);
  this.nestedClass.context=null;
  return this;
}",0.9327036599763872
84343,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.arguments.cleanup(context,compilableList);
  this.nestedClass.getHeader().addInnerClass(this.nestedClass);
  this.nestedClass.cleanup(context,compilableList);
  return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.arguments.cleanup(context,compilableList);
  this.nestedClass.cleanup(context,compilableList);
  return this;
}",0.7130801687763713
84344,"@Override public IValue foldConstants(){
  if (!this.arguments.isEmpty()) {
    if (this.instance != null) {
      if (this.instance.isConstant()) {
        IValue argument;
        if (this.arguments.size() == 1 && (argument=this.arguments.getFirstValue()).isConstant()) {
          IValue folded=ConstantFolder.apply(this.instance,this.name,argument);
          if (folded != null) {
            return folded;
          }
        }
      }
 else {
        this.instance=this.instance.foldConstants();
      }
    }
    this.arguments.foldConstants();
    return this;
  }
  if (this.instance.isConstant()) {
    IValue folded=ConstantFolder.apply(this.name,this.instance);
    if (folded != null) {
      return folded;
    }
  }
  if (this.instance != null) {
    this.instance=this.instance.foldConstants();
  }
  return this;
}","@Override public IValue foldConstants(){
  if (!this.arguments.isEmpty()) {
    if (this.instance != null) {
      if (this.instance.isConstant()) {
        IValue argument;
        if (this.arguments.size() == 1 && (argument=this.arguments.getFirstValue()).isConstant()) {
          IValue folded=ConstantFolder.apply(this.instance,this.name,argument);
          if (folded != null) {
            return folded;
          }
        }
      }
 else {
        this.instance=this.instance.foldConstants();
      }
    }
    this.arguments.foldConstants();
    return this;
  }
  if (this.instance != null) {
    if (this.instance.isConstant()) {
      IValue folded=ConstantFolder.apply(this.name,this.instance);
      if (folded != null) {
        return folded;
      }
    }
    this.instance=this.instance.foldConstants();
  }
  return this;
}",0.9272943980929678
84345,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      instance=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName()));
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      IValue instance1=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,this.theClass.getType(),typeContext,""String_Node_Str"");
      }
 else {
        instance=instance1;
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name));
    }
 else {
      markers.add(I18n.createMarker(position,""String_Node_Str"",this.name.unqualified));
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9691512915129152
84346,"private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
continue;
}
}
}","private void parseParameters(BuilderVisitor visitor){
  IToken token=this.tokens.lastReturned().next();
  if (token.type() == BaseSymbols.CLOSE_PARENTHESIS) {
    this.tokens.next();
    visitor.visitEnd();
    return;
  }
  while (this.tokens.hasNext()) {
    if (token.next().type() == BaseSymbols.COLON) {
      this.tokens.next();
      this.tokens.next();
      this.parseValue(visitor.visitParameter(token.nameValue()));
    }
 else {
      this.parseValue(visitor.visitParameter(null));
    }
    token=this.tokens.next();
switch (token.type()) {
case BaseSymbols.CLOSE_PARENTHESIS:
      visitor.visitEnd();
    return;
case BaseSymbols.COMMA:
case BaseSymbols.SEMICOLON:
  token=token.next();
continue;
}
}
}",0.9095057034220532
84347,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(this.name);
  int parameterCount=this.parameters.size();
  if (parameterCount > 0) {
    buffer.append('(');
    this.parameters.get(0).toString(prefix,buffer);
    for (int i=1; i < parameterCount; i++) {
      buffer.append(""String_Node_Str"");
      this.parameters.get(i).toString(prefix,buffer);
    }
    buffer.append(')');
  }
  buffer.append(""String_Node_Str"");
  this.node.bodyToString(prefix + '\t',buffer);
  buffer.append(prefix).append('}');
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(this.name);
  int parameterCount=this.parameters.size();
  if (parameterCount > 0) {
    buffer.append('(');
    this.parameters.get(0).toString(prefix,buffer);
    for (int i=1; i < parameterCount; i++) {
      buffer.append(""String_Node_Str"");
      this.parameters.get(i).toString(prefix,buffer);
    }
    buffer.append(')');
  }
 else   if (this.node == null) {
    buffer.append(""String_Node_Str"");
    return;
  }
  if (this.node != null) {
    buffer.append(""String_Node_Str"");
    this.node.bodyToString(prefix + '\t',buffer);
    buffer.append(prefix).append('}');
  }
}",0.8970099667774086
84348,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.value == null) {
    buffer.append(""String_Node_Str"");
    return;
  }
  Class c=this.value.getClass();
  if (c.isArray()) {
    ObjectArray.toString(this.value,buffer);
    return;
  }
  String s=this.value.toString();
  int i=s.indexOf('@');
  if (i >= 0) {
    String className=c.getName();
    if (i == className.length() && s.regionMatches(0,className,0,i)) {
      StringUtils.prettyPrint(this.value,c,buffer,true);
      return;
    }
  }
  buffer.append(this.value);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.value == null) {
    buffer.append(""String_Node_Str"");
    return;
  }
  Class c=this.value.getClass();
  if (c.isArray()) {
    ObjectArray.toString(this.value,buffer);
    return;
  }
  String snapshot=buffer.toString();
  try {
    String s=this.value.toString();
    int i=s.indexOf('@');
    if (i >= 0) {
      String className=c.getName();
      if (i == className.length() && s.regionMatches(0,className,0,i)) {
        StringUtils.prettyPrint(this.value,c,buffer,true);
        return;
      }
    }
    buffer.append(this.value);
  }
 catch (  Throwable t) {
    buffer.replace(0,buffer.length(),snapshot);
    buffer.append(""String_Node_Str"");
  }
}",0.8454404945904173
84349,"@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
  if (this.type.isPrimitive()) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str""));
    return;
  }
  IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",valueType,this.type));
  }
}","@Override public void check(MarkerList markers,IContext context){
  this.type.check(markers,context);
  this.value.check(markers,context);
  if (this.type.isPrimitive()) {
    markers.add(I18n.createError(this.position,""String_Node_Str""));
    return;
  }
  if (this.value.isPrimitive()) {
    markers.add(I18n.createError(this.position,""String_Node_Str""));
    return;
  }
  IType valueType=this.value.getType();
  if (valueType.classEquals(this.type)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",valueType));
    return;
  }
  if (this.type.isSuperClassOf(valueType)) {
    markers.add(I18n.createMarker(this.position,""String_Node_Str"",valueType,this.type));
    return;
  }
  if (!valueType.isSuperClassOf(this.type)) {
    markers.add(I18n.createError(this.position,""String_Node_Str"",valueType,this.type));
  }
}",0.983957219251337
84350,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
  Object commonFrameType=this.commonType.getFrameType();
  this.condition.writeInvJump(writer,elseStart);
  this.then.writeExpression(writer,this.commonType);
  writer.getFrame().set(commonFrameType);
  writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
  writer.writeTargetLabel(elseStart);
  if (this.elseThen == null) {
    this.commonType.writeDefaultValue(writer);
  }
 else {
    this.elseThen.writeExpression(writer,this.commonType);
  }
  writer.getFrame().set(commonFrameType);
  writer.writeTargetLabel(elseEnd);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
  Object commonFrameType=this.commonType.getFrameType();
  this.condition.writeInvJump(writer,elseStart);
  this.then.writeExpression(writer,this.commonType);
  if (!writer.hasReturn()) {
    writer.getFrame().set(commonFrameType);
    writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
  }
  writer.writeTargetLabel(elseStart);
  if (this.elseThen == null) {
    this.commonType.writeDefaultValue(writer);
  }
 else {
    this.elseThen.writeExpression(writer,this.commonType);
  }
  if (!writer.hasReturn()) {
    writer.getFrame().set(commonFrameType);
  }
  writer.writeTargetLabel(elseEnd);
}",0.9528178243774574
84351,"public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=this.stack[this.stackCount];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=this.stack[this.stackCount - 3];
this.stack[this.stackCount - 3]=this.stack[this.stackCount];
this.stackCount++;
return;
}
case DUP2:
{
Object o=this.stack[this.stackCount - 1];
if (o == LONG || o == DOUBLE) {
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount++]=o;
return;
}
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}","public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=this.stack[this.stackCount];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=this.stack[this.stackCount - 3];
this.stack[this.stackCount - 3]=this.stack[this.stackCount];
this.stackCount++;
return;
}
case DUP2:
{
Object o=this.stack[this.stackCount - 1];
if (o == LONG || o == DOUBLE) {
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount++]=o;
return;
}
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.stackCount=this.actualStackCount=0;
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}",0.9958319974350752
84352,"@Override public void end(IType type){
  IClass iclass=type.getTheClass();
  if (iclass != null) {
    iclass.writeInnerClassInfo(this.cw);
  }
  if (!this.hasReturn) {
    this.insnCallback();
    this.mv.visitInsn(type.getReturnOpcode());
  }
  this.mv.visitMaxs(this.frame.maxStack,this.frame.maxLocals);
  this.mv.visitEnd();
}","@Override public void end(IType type){
  IClass iclass=type.getTheClass();
  if (iclass != null) {
    iclass.writeInnerClassInfo(this.cw);
  }
  if (!this.hasReturn) {
    int opcode=type.getReturnOpcode();
    if (opcode == RETURN || this.frame.actualStackCount > 0) {
      this.insnCallback();
      this.mv.visitInsn(opcode);
    }
  }
  this.mv.visitMaxs(this.frame.maxStack,this.frame.maxLocals);
  this.mv.visitEnd();
}",0.7862796833773087
84353,"@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case BaseSymbols.SEMICOLON:
case BaseSymbols.COLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolation ssv=new StringInterpolation(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == BaseSymbols.COLON || type == DyvilSymbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.valueConsumer.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}","@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case BaseSymbols.SEMICOLON:
case BaseSymbols.COLON:
case BaseSymbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.valueConsumer.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
StringInterpolation ssv=new StringInterpolation(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new StingInterpolationParser(ssv),true);
return;
}
case Tokens.SINGLE_QUOTED_STRING:
this.value=new CharValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case DyvilSymbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case DyvilSymbols.WILDCARD:
return;
case BaseSymbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == BaseSymbols.CLOSE_PARENTHESIS) {
if (next.next().type() == DyvilSymbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=ACCESS;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case BaseSymbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case DyvilSymbols.AT:
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case DyvilSymbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == DyvilKeywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == BaseSymbols.COLON || type == DyvilSymbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != DyvilKeywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == BaseSymbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=CONSTRUCTOR_PARAMETERS;
pm.reparse();
return;
}
case CONSTRUCTOR_PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == BaseSymbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
if (type != BaseSymbols.CLOSE_PARENTHESIS) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
this.value.expandPosition(token);
this.mode=ACCESS;
if (token.next().type() == BaseSymbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
return;
case BYTECODE_END:
this.valueConsumer.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type != BaseSymbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == BaseSymbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != BaseSymbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.valueConsumer.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == BaseSymbols.DOT) {
this.mode=DOT_ACCESS;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case DyvilKeywords.ELSE:
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
case BaseSymbols.EQUALS:
this.parseAssignment(pm,token);
return;
case DyvilKeywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case DyvilKeywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case DyvilKeywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case BaseSymbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case BaseSymbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
if (this.value != null) {
if (this.operator != null) {
this.valueConsumer.setValue(this.value);
pm.popParser(true);
return;
}
SingleArgument sa=new SingleArgument();
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,sa);
this.parseApply(pm,token,sa,Operators.DEFAULT);
pm.reparse();
this.value=amc;
return;
}
}
if (this.mode == DOT_ACCESS) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}",0.9982069672131147
84354,"@Override public IMethod getFunctionalMethod(){
  if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    return null;
  }
  IMethod m;
  if (this.body != null) {
    m=this.body.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  if (this.superType != null) {
    m=this.superType.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    m=this.interfaces[i].getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  return null;
}","@Override public IMethod getFunctionalMethod(){
  if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    return null;
  }
  if (this.body != null) {
    IMethod m=this.body.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  return null;
}",0.3989834815756035
84355,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.method == null) {
    IType type=this.getType();
    this.withType(type,type,markers,context);
  }
  this.value.checkTypes(markers,new CombiningContext(this,context));
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.value.checkTypes(markers,new CombiningContext(this,context));
}",0.7193877551020408
84356,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall && this.value.valueTag() != COMPOUND_CALL) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
this.lambdaDesc=method.getDescriptor();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
this.lambdaDesc=ctor.getDescriptor();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall && this.value.valueTag() != COMPOUND_CALL) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (method != null && this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
this.lambdaDesc=method.getDescriptor();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
this.lambdaDesc=ctor.getDescriptor();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}",0.9937150837988828
84357,"@Override public IMethod getFunctionalMethod(){
  if ((this.modifiers & Modifiers.ABSTRACT | Modifiers.INTERFACE_CLASS) == 0) {
    return null;
  }
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  IMethod m;
  if (this.body != null) {
    m=this.body.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    m=this.superType.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    m=this.interfaces[i].getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  return null;
}","@Override public IMethod getFunctionalMethod(){
  if ((this.modifiers & Modifiers.ABSTRACT | Modifiers.INTERFACE_CLASS) == 0) {
    return null;
  }
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  if (this.body != null) {
    IMethod m=this.body.getFunctionalMethod();
    if (m != null) {
      return m;
    }
  }
  return null;
}",0.4812319538017324
84358,"@Override public void visitParameter(String name,int index){
  this.method.getParameter_(index).setName(Name.getQualified(name));
}","@Override public void visitParameter(String name,int modifiers){
  this.method.getParameter_(this.parameterIndex++).setName(Name.getQualified(name));
}",0.9078014184397164
84359,"@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
FormatStringExpression ssv=new FormatStringExpression(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new FormatStringParser(ssv),true);
return;
}
case Tokens.CHAR:
this.value=new CharValue(token.raw(),token.charValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case Symbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case Symbols.WILDCARD:
return;
case Symbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
if (next.next().type() == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=END;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case Symbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case Symbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case Symbols.AT:
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case Symbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS_2;
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=PARAMETERS;
pm.reparse();
return;
}
case PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == Symbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.report(token,""String_Node_Str"");
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case Keywords.ELSE:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Symbols.EQUALS:
this.parseAssignment(pm,token);
return;
case Keywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case Keywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case Keywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case Symbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case Symbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}","@Override public void parse(IParserManager pm,IToken token){
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
  int type=token.type();
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Tokens.STRING:
this.value=new StringValue(token.raw(),token.stringValue());
this.mode=ACCESS;
return;
case Tokens.STRING_START:
{
FormatStringExpression ssv=new FormatStringExpression(token);
this.value=ssv;
this.mode=ACCESS;
pm.pushParser(new FormatStringParser(ssv),true);
return;
}
case Tokens.CHAR:
this.value=new CharValue(token.raw(),token.charValue());
this.mode=ACCESS;
return;
case Tokens.INT:
this.value=new IntValue(token.raw(),token.intValue());
this.mode=ACCESS;
return;
case Tokens.LONG:
this.value=new LongValue(token.raw(),token.longValue());
this.mode=ACCESS;
return;
case Tokens.FLOAT:
this.value=new FloatValue(token.raw(),token.floatValue());
this.mode=ACCESS;
return;
case Tokens.DOUBLE:
this.value=new DoubleValue(token.raw(),token.doubleValue());
this.mode=ACCESS;
return;
case Symbols.ELLIPSIS:
this.value=new WildcardValue(token.raw());
this.mode=ACCESS;
return;
case Symbols.WILDCARD:
return;
case Symbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
if (next.next().type() == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(next.next().raw());
this.value=le;
pm.skip(2);
pm.pushParser(pm.newExpressionParser(le));
this.mode=ACCESS;
return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=END;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case Symbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case Symbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case Symbols.AT:
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case Symbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
Name name=token.nameValue();
this.parseAccess(pm,token,type,name,pm.getOperator(name));
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
break;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(token,""String_Node_Str"");
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS_2;
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.parseBody(pm,cc.toClassConstructor());
return;
}
this.mode=PARAMETERS;
pm.reparse();
return;
}
case PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == Symbols.OPEN_PARENTHESIS) {
IArguments arguments=this.parseArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isExpressionTerminator(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.parseBody(pm,((ConstructorCall)this.value).toClassConstructor());
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(token,""String_Node_Str"");
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.parseArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type != Symbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_THIS_END:
this.mode=ACCESS;
if (type != Symbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
case PARAMETERIZED_SUPER_END:
this.mode=ACCESS;
if (type != Symbols.CLOSE_SQUARE_BRACKET) {
pm.report(token,""String_Node_Str"");
}
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.explicitDot=true;
return;
}
this.explicitDot=false;
switch (type) {
case Keywords.ELSE:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Symbols.EQUALS:
this.parseAssignment(pm,token);
return;
case Keywords.AS:
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
case Keywords.IS:
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
case Keywords.MATCH:
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
case Symbols.OPEN_SQUARE_BRACKET:
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
case Symbols.OPEN_PARENTHESIS:
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,this.parseArguments(pm,token.next()));
this.value=amc;
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
this.parseIdentifierAccess(pm,token,type);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}
pm.report(token,""String_Node_Str"" + token);
return;
}",0.9795571903515596
84360,"private IValue makeForStatement(){
  if (this.forEach) {
    return new ForEachStatement(this.position,this.variable,this.action);
  }
  return new ForStatement(this.position,this.variable,this.condition,this.update,this.action);
}","private IValue makeForStatement(){
  if (this.variable != null && this.variable.getType() == null) {
    this.variable=null;
  }
  if (this.forEach) {
    return new ForEachStatement(this.position,this.variable,this.action);
  }
  return new ForStatement(this.position,this.variable,this.condition,this.update,this.action);
}",0.8309352517985612
84361,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  this.writeExpression(writer);
  writer.writeInsn(Opcodes.ARETURN);
}",0.7136929460580913
84362,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  return type == Types.VOID ? this : null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.isType(type)) {
    return this;
  }
  return null;
}",0.8012422360248447
84363,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  writer.writeInsn(Opcodes.ACONST_NULL);
}",0.8093023255813954
84364,"@Override public IType getType(){
  return Types.VOID;
}","@Override public IType getType(){
  return this.annotation.getType();
}",0.7874015748031497
84365,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case NAME:
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      this.annotation.setType(new NamedType(token.raw(),name));
      this.mode=PARAMETERS_START;
      return;
    }
  pm.report(token,""String_Node_Str"");
return;
case PARAMETERS_START:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (ParserUtil.isIdentifier(next.type()) && next.next().type() == Symbols.COLON) {
  ArgumentMap map=new ArgumentMap();
  this.annotation.setArguments(map);
  pm.pushParser(new ExpressionMapParser(map));
}
 else {
  ArgumentList list=new ArgumentList();
  this.annotation.setArguments(list);
  pm.pushParser(new ExpressionListParser(list));
}
this.mode=PARAMETERS_END;
return;
}
pm.popParser(true);
return;
case PARAMETERS_END:
if (type == Symbols.CLOSE_PARENTHESIS) {
pm.popParser();
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case NAME:
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      ICodePosition position=token.raw();
      this.annotation.setPosition(position);
      this.annotation.setType(new NamedType(position,name));
      this.mode=PARAMETERS_START;
      return;
    }
  pm.report(token,""String_Node_Str"");
return;
case PARAMETERS_START:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (ParserUtil.isIdentifier(next.type()) && next.next().type() == Symbols.COLON) {
  ArgumentMap map=new ArgumentMap();
  this.annotation.setArguments(map);
  pm.pushParser(new ExpressionMapParser(map));
}
 else {
  ArgumentList list=new ArgumentList();
  this.annotation.setArguments(list);
  pm.pushParser(new ExpressionListParser(list));
}
this.mode=PARAMETERS_END;
return;
}
pm.popParser(true);
return;
case PARAMETERS_END:
if (type == Symbols.CLOSE_PARENTHESIS) {
pm.popParser();
return;
}
pm.report(token,""String_Node_Str"");
return;
}
}",0.9485935984481086
84366,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Class.bodyStart).append('\n');
  String prefix1=prefix + Formatting.Class.bodyIndent;
  if (this.classCount > 0) {
    for (int i=0; i < this.classCount; i++) {
      this.classes[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.classCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.fieldCount > 0) {
    for (int i=0; i < this.fieldCount; i++) {
      this.fields[i].toString(prefix1,buffer);
      buffer.append('\n');
    }
    buffer.append('\n');
  }
  if (this.constructorCount > 0) {
    for (int i=0; i < this.constructorCount; i++) {
      this.constructors[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.constructorCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.propertyCount > 0) {
    for (int i=0; i < this.propertyCount; i++) {
      this.properties[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.propertyCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.methodCount > 0) {
    for (int i=0; i < this.methodCount; i++) {
      IMethod method=this.methods[i];
      method.toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.methodCount) {
        buffer.append('\n');
      }
    }
  }
  buffer.append(prefix).append(Formatting.Class.bodyEnd);
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Class.bodyStart).append('\n');
  String prefix1=prefix + Formatting.Class.bodyIndent;
  if (this.classCount > 0) {
    for (int i=0; i < this.classCount; i++) {
      this.classes[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.classCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.fieldCount > 0) {
    for (int i=0; i < this.fieldCount; i++) {
      this.fields[i].toString(prefix1,buffer);
      buffer.append(';').append('\n');
    }
    buffer.append('\n');
  }
  if (this.constructorCount > 0) {
    for (int i=0; i < this.constructorCount; i++) {
      this.constructors[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.constructorCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.propertyCount > 0) {
    for (int i=0; i < this.propertyCount; i++) {
      this.properties[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.propertyCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.methodCount > 0) {
    for (int i=0; i < this.methodCount; i++) {
      IMethod method=this.methods[i];
      method.toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.methodCount) {
        buffer.append('\n');
      }
    }
  }
  buffer.append(prefix).append(Formatting.Class.bodyEnd);
}",0.9960212201591512
84367,"@Override public void toString(String prefix,StringBuilder buffer){
  super.toString(prefix,buffer);
  buffer.append(ModifierTypes.FIELD.toString(this.modifiers));
  this.type.toString(""String_Node_Str"",buffer);
  buffer.append(' ');
  buffer.append(this.name);
  if (this.value != null) {
    buffer.append(Formatting.Field.keyValueSeperator);
    this.value.toString(prefix,buffer);
  }
  buffer.append(';');
}","@Override public void toString(String prefix,StringBuilder buffer){
  super.toString(prefix,buffer);
  buffer.append(ModifierTypes.FIELD.toString(this.modifiers));
  this.type.toString(""String_Node_Str"",buffer);
  buffer.append(' ');
  buffer.append(this.name);
  if (this.value != null) {
    buffer.append(Formatting.Field.keyValueSeperator);
    this.value.toString(prefix,buffer);
  }
}",0.972568578553616
84368,"@Override public void toString(String prefix,StringBuilder buffer){
  super.toString(prefix,buffer);
  buffer.append(ModifierTypes.METHOD.toString(this.modifiers));
  if (this.type != null) {
    this.type.toString(""String_Node_Str"",buffer);
    buffer.append(' ');
  }
  buffer.append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  buffer.append(Formatting.Method.parametersStart);
  Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
  buffer.append(Formatting.Method.parametersEnd);
  if (this.exceptionCount > 0) {
    buffer.append(Formatting.Method.signatureThrowsSeperator);
    Util.astToString(prefix,this.exceptions,this.exceptionCount,Formatting.Method.throwsSeperator,buffer);
  }
  if (this.value == null) {
    buffer.append(';');
    return;
  }
  if (this.value.valueTag() != IValue.STATEMENT_LIST) {
    buffer.append(Formatting.Method.signatureBodySeperator);
    this.value.toString(prefix,buffer);
    buffer.append(';');
    return;
  }
  if (((StatementList)this.value).isEmpty()) {
    buffer.append(Formatting.Method.emptyBody);
    return;
  }
  buffer.append(' ');
  this.value.toString(prefix,buffer);
  return;
}","@Override public void toString(String prefix,StringBuilder buffer){
  super.toString(prefix,buffer);
  buffer.append(ModifierTypes.METHOD.toString(this.modifiers));
  if (this.type != null) {
    this.type.toString(""String_Node_Str"",buffer);
    buffer.append(' ');
  }
  buffer.append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  buffer.append(Formatting.Method.parametersStart);
  Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
  buffer.append(Formatting.Method.parametersEnd);
  if (this.exceptionCount > 0) {
    buffer.append(Formatting.Method.signatureThrowsSeperator);
    Util.astToString(prefix,this.exceptions,this.exceptionCount,Formatting.Method.throwsSeperator,buffer);
  }
  if (this.value == null) {
    buffer.append(';');
    return;
  }
  if (this.value.valueTag() != IValue.STATEMENT_LIST) {
    buffer.append(Formatting.Method.signatureBodySeperator);
    this.value.toString(prefix,buffer);
    buffer.append(';');
    return;
  }
  if (((StatementList)this.value).isEmpty()) {
    buffer.append(Formatting.Method.emptyBody);
    return;
  }
  buffer.append(' ');
  this.value.toString(prefix,buffer);
}",0.996274217585693
84369,"@Override public void addMethod(IMethod method){
  REPLMemberClass iclass=REPLContext.getREPLClass(method);
  method.resolveTypes(markers,this);
  if (reportErrors(markers)) {
    this.cleanup();
    return;
  }
  methods.add(method);
  method.resolve(markers,this);
  method.checkTypes(markers,this);
  method.check(markers,this);
  if (reportErrors(markers)) {
    this.cleanup();
    return;
  }
  method.foldConstants();
  method.cleanup(this,this);
  REPLContext.compileClass(iclass);
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  Util.methodSignatureToString(method,buf);
  System.out.println(buf.append('\'').toString());
  this.cleanup();
}","@Override public void addMethod(IMethod method){
  REPLMemberClass iclass=REPLContext.getREPLClass(method);
  method.resolveTypes(markers,this);
  if (reportErrors(markers)) {
    this.cleanup();
    return;
  }
  methods.add(method);
  method.resolve(markers,this);
  method.checkTypes(markers,this);
  method.check(markers,this);
  if (reportErrors(markers)) {
    methods.remove(method);
    this.cleanup();
    return;
  }
  method.foldConstants();
  method.cleanup(this,this);
  REPLContext.compileClass(iclass);
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  Util.methodSignatureToString(method,buf);
  System.out.println(buf.append('\'').toString());
  this.cleanup();
}",0.9792899408284024
84370,"public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  this.syntaxErrors=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null || this.syntaxErrors && this.markers == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return !this.syntaxErrors;
}","public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  this.syntaxErrors=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  super.parse(tokens);
  return !this.syntaxErrors;
}",0.6620689655172414
84371,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralExpression(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=type.resolveTypeSafely(iclass.getTypeVariable(i));
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + value.getType());
      m.addInfo(""String_Node_Str"" + elementType);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  this.tupleType=this.getType();
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralExpression(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  IClass iclass=type.getTheClass();
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=iclass == dyvil.tools.compiler.ast.type.Types.OBJECT_CLASS ? dyvil.tools.compiler.ast.type.Types.ANY : type.resolveTypeSafely(iclass.getTypeVariable(i));
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + value.getType());
      m.addInfo(""String_Node_Str"" + elementType);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  this.tupleType=this.getType();
  return this;
}",0.9574204216618436
84372,"protected static Class loadClass(String name,byte[] bytes){
  if (DyvilREPL.dumpDir != null) {
    int index=name.lastIndexOf('/');
    String fileName;
    if (index <= 0) {
      fileName=name + ""String_Node_Str"";
    }
 else {
      fileName=name.substring(index + 1) + ""String_Node_Str"";
    }
    FileUtils.write(new File(DyvilREPL.dumpDir,fileName),bytes);
  }
  return ReflectUtils.unsafe.defineClass(name,bytes,0,bytes.length,CLASS_LOADER,PROTECTION_DOMAIN);
}","protected static Class loadClass(String name,byte[] bytes){
  if (DyvilREPL.dumpDir != null) {
    int index=name.lastIndexOf('/');
    String fileName;
    if (index <= 0) {
      fileName=name + ""String_Node_Str"";
    }
 else {
      fileName=name.substring(index + 1) + ""String_Node_Str"";
    }
    FileUtils.write(new File(DyvilREPL.dumpDir,fileName),bytes);
  }
  return ReflectUtils.unsafe.defineClass(name.replace('/','.'),bytes,0,bytes.length,CLASS_LOADER,PROTECTION_DOMAIN);
}",0.9821615949632738
84373,"public IdentityHashMap(AbstractIdentityHashMap<K,V> map){
  super(map);
}","public IdentityHashMap(Tuple2<K,V>... entries){
  super(entries);
}",0.6428571428571429
84374,"@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  int i=0;
  Object[] tab=this.table;
  for (; i < tab.length; i+=2) {
    Object key=tab[i];
    if (key != null) {
      builder.append(key).append(""String_Node_Str"").append(tab[i + 1]);
      break;
    }
  }
  for (i+=2; i < tab.length; i+=2) {
    Object key=tab[i];
    if (key != null) {
      builder.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(tab[i + 1]);
    }
  }
  return builder.append(""String_Node_Str"").toString();
}","@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  int i=0;
  Object[] tab=this.table;
  for (; i < tab.length; i+=2) {
    Object key=tab[i];
    if (key != null) {
      builder.append(unmaskNull(key)).append(""String_Node_Str"").append(tab[i + 1]);
      break;
    }
  }
  for (i+=2; i < tab.length; i+=2) {
    Object key=tab[i];
    if (key != null) {
      builder.append(""String_Node_Str"").append(key).append(""String_Node_Str"").append(tab[i + 1]);
    }
  }
  return builder.append(""String_Node_Str"").toString();
}",0.9903381642512076
84375,"@Override public E next(){
  if (!this.indexValid && !this.hasNext()) {
    throw new NoSuchElementException();
  }
  this.indexValid=false;
  this.lastReturnedIndex=this.index;
  this.index++;
  return (E)this.traversalTable[this.lastReturnedIndex];
}","@Override public E next(){
  if (!this.indexValid && !this.hasNext()) {
    throw new NoSuchElementException();
  }
  this.indexValid=false;
  this.lastReturnedIndex=this.index;
  this.index++;
  return (E)unmaskNull(this.traversalTable[this.lastReturnedIndex]);
}",0.9767441860465116
84376,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.valueCount == 0) {
    return;
  }
  IContext context1=this.variables == null ? context : new CombiningContext(this,context);
  int len=this.valueCount - 1;
  for (int i=0; i < len; i++) {
    IValue v=this.values[i];
    IValue v1=v.withType(Types.VOID,Types.VOID,markers,context1);
    if (v1 == null) {
      Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + v.getType());
    }
 else {
      v=this.values[i]=v1;
    }
    v.checkTypes(markers,context1);
  }
  IValue lastValue=this.values[len];
  IType type=this.returnType == null ? lastValue.getType() : this.returnType;
  IValue lastValue1=lastValue.withType(type,type,markers,context1);
  if (lastValue1 == null) {
    Marker marker=markers.create(lastValue.getPosition(),""String_Node_Str"");
    marker.addInfo(""String_Node_Str"" + this.returnType);
    marker.addInfo(""String_Node_Str"" + lastValue.getType());
  }
 else {
    lastValue=lastValue1;
    if (this.returnType == null) {
      this.returnType=lastValue.getType();
    }
  }
  lastValue.checkTypes(markers,context1);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.valueCount == 0) {
    return;
  }
  IContext context1=this.variables == null ? context : new CombiningContext(this,context);
  int len=this.valueCount - 1;
  for (int i=0; i < len; i++) {
    IValue v=this.values[i];
    IValue v1=v.withType(Types.VOID,Types.VOID,markers,context1);
    if (v1 == null) {
      Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + v.getType());
    }
 else {
      v=this.values[i]=v1;
    }
    v.checkTypes(markers,context1);
  }
  this.values[len].checkTypes(markers,context1);
}",0.6830870279146142
84377,"public static final Name stripEq(Name name){
  return Name.get(name.qualified.substring(0,name.qualified.length() - 3),name.unqualified.substring(0,name.unqualified.length() - 1));
}","public static final Name stripEq(Name name){
  String qualified=name.qualified.substring(0,name.qualified.length() - 3);
  String unqualified=name.unqualified.substring(0,name.unqualified.length() - 1);
  return Name.get(qualified,unqualified);
}",0.7663551401869159
84378,"private void getAccess(IParserManager pm,Name name,IToken token,int type){
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),new MethodParameter(token.raw(),token.nameValue()));
    this.mode=END;
    this.value=lv;
    pm.pushParser(pm.newExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.setDotless(this.dotless);
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      SingleArgument sa=new SingleArgument();
      MethodCall call=new MethodCall(token,null,name,sa);
      call.setDotless(this.dotless);
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=ACCESS;
    if (op.type != Operator.POSTFIX && !ParserUtil.isTerminator2(nextType)) {
      SingleArgument sa=new SingleArgument();
      call.setArguments(sa);
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.setDotless(this.dotless);
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.setDotless(this.dotless);
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  op=pm.getOperator(stripEq(name));
  SingleArgument sa=new SingleArgument();
  MethodCall call=new MethodCall(token,this.value,name,sa);
  call.setDotless(this.dotless);
  this.value=call;
  this.mode=ACCESS;
  ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
  parser.operator=op == null ? Operators.DEFAULT : op;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type){
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),new MethodParameter(token.raw(),token.nameValue()));
    this.mode=END;
    this.value=lv;
    pm.pushParser(pm.newExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.setDotless(this.dotless);
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      SingleArgument sa=new SingleArgument();
      MethodCall call=new MethodCall(token,null,name,sa);
      call.setDotless(this.dotless);
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=ACCESS;
    if (op.type != Operator.POSTFIX && !ParserUtil.isTerminator2(nextType)) {
      SingleArgument sa=new SingleArgument();
      call.setArguments(sa);
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.setDotless(this.dotless);
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.setDotless(this.dotless);
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
 else {
    op=pm.getOperator(stripEq(name));
  }
  SingleArgument sa=new SingleArgument();
  MethodCall call=new MethodCall(token,this.value,name,sa);
  call.setDotless(this.dotless);
  this.value=call;
  this.mode=ACCESS;
  ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
  parser.operator=op == null ? Operators.DEFAULT : op;
  pm.pushParser(parser);
  return;
}",0.997844163843548
84379,"@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int args=this.arguments.size();
  if (args == 1) {
    IValue op;
    if (this.instance != null) {
      op=Operators.getPriority(this.instance,this.name,this.arguments.getFirstValue());
    }
 else {
      op=Operators.getPriority(this.name,this.arguments.getFirstValue());
    }
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (method != null) {
    this.method=method;
    this.checkArguments(markers,context);
    return this;
  }
  if (args == 1 && this.instance != null) {
    String qualified=this.name.qualified;
    if (qualified.endsWith(""String_Node_Str"")) {
      Name name=ExpressionParser.stripEq(this.name);
      CompoundCall cc=new CompoundCall(this.position,this.instance,name,this.arguments);
      return cc.resolveCall(markers,context);
    }
    IValue op=Operators.get(this.instance,this.name,this.arguments.getFirstValue());
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  if (this.instance == null) {
    AbstractCall apply=this.resolveApply(markers,context);
    if (apply != null) {
      apply.checkArguments(markers,context);
      return apply;
    }
  }
  ICall.addResolveMarker(markers,this.position,this.instance,this.name,this.arguments);
  return this;
}","@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int args=this.arguments.size();
  if (args == 1) {
    IValue op;
    if (this.instance != null) {
      op=Operators.getPriority(this.instance,this.name,this.arguments.getFirstValue());
    }
 else {
      op=Operators.getPriority(this.name,this.arguments.getFirstValue());
    }
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (method != null) {
    this.method=method;
    this.checkArguments(markers,context);
    return this;
  }
  if (args == 1 && this.instance != null) {
    String qualified=this.name.qualified;
    if (qualified.endsWith(""String_Node_Str"")) {
      Name name=Util.stripEq(this.name);
      CompoundCall cc=new CompoundCall(this.position,this.instance,name,this.arguments);
      return cc.resolveCall(markers,context);
    }
    IValue op=Operators.get(this.instance,this.name,this.arguments.getFirstValue());
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  if (this.instance == null) {
    AbstractCall apply=this.resolveApply(markers,context);
    if (apply != null) {
      apply.checkArguments(markers,context);
      return apply;
    }
  }
  ICall.addResolveMarker(markers,this.position,this.instance,this.name,this.arguments);
  return this;
}",0.9930118798043326
84380,"@Override public void resolve(MarkerList markers,IContext context){
  if (this.theClass == null) {
    return;
  }
  if (this.retention == null) {
    IAnnotation retention=this.theClass.getAnnotation(Annotation.Types.RETENTION_CLASS);
    if (retention != null) {
      INamed value=(INamed)retention.getArguments().getValue(0,Annotation.VALUE);
      this.retention=RetentionPolicy.valueOf(value.getName().qualified);
    }
  }
  if (this.targets != null) {
    return;
  }
  IAnnotation target=this.theClass.getAnnotation(Annotation.Types.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=new TreeSet();
  IValueList values=(IValueList)target.getArguments().getValue(0,Annotation.VALUE);
  if (values == null) {
    return;
  }
  int count=values.valueCount();
  for (int i=0; i < count; i++) {
    INamed value=(INamed)values.getValue(i);
    this.targets.add(ElementType.valueOf(value.getName().qualified));
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  if (this.theClass == null) {
    return;
  }
  if (this.retention == null) {
    IAnnotation retention=this.theClass.getAnnotation(Annotation.Types.RETENTION_CLASS);
    if (retention != null) {
      INamed value=(INamed)retention.getArguments().getValue(0,Annotation.VALUE);
      try {
        this.retention=RetentionPolicy.valueOf(value.getName().qualified);
      }
 catch (      IllegalArgumentException ex) {
      }
    }
  }
  if (this.targets != null) {
    return;
  }
  IAnnotation target=this.theClass.getAnnotation(Annotation.Types.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=new TreeSet();
  IValueList values=(IValueList)target.getArguments().getValue(0,Annotation.VALUE);
  if (values == null) {
    return;
  }
  int count=values.valueCount();
  for (int i=0; i < count; i++) {
    INamed value=(INamed)values.getValue(i);
    ElementType elementType;
    try {
      elementType=ElementType.valueOf(value.getName().qualified);
    }
 catch (    IllegalArgumentException ex) {
      continue;
    }
    this.targets.add(elementType);
  }
}",0.8776290630975143
84381,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    this.annotations.toString();
  }
  buffer.append(prefix).append(ModifierTypes.CLASS.toString(this.modifiers));
  buffer.append(ModifierTypes.CLASS_TYPE.toString(this.modifiers)).append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  if (this.parameterCount > 0) {
    buffer.append('(');
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(')');
  }
  if (this.superType == null) {
    buffer.append(""String_Node_Str"");
  }
 else   if (this.superType != Types.OBJECT) {
    buffer.append(""String_Node_Str"");
    this.superType.toString(""String_Node_Str"",buffer);
  }
  if (this.interfaceCount > 0) {
    buffer.append(""String_Node_Str"");
    Util.astToString(prefix,this.interfaces,this.interfaceCount,Formatting.Class.superClassesSeperator,buffer);
  }
  if (this.body != null) {
    buffer.append('\n').append(prefix);
    this.body.toString(prefix,buffer);
  }
 else {
    buffer.append(';');
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.annotations != null) {
    this.annotations.toString(prefix,buffer);
  }
  buffer.append(prefix).append(ModifierTypes.CLASS.toString(this.modifiers));
  buffer.append(ModifierTypes.CLASS_TYPE.toString(this.modifiers)).append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  if (this.parameterCount > 0) {
    buffer.append('(');
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(')');
  }
  if (this.superType == null) {
    buffer.append(""String_Node_Str"");
  }
 else   if (this.superType != Types.OBJECT) {
    buffer.append(""String_Node_Str"");
    this.superType.toString(""String_Node_Str"",buffer);
  }
  if (this.interfaceCount > 0) {
    buffer.append(""String_Node_Str"");
    Util.astToString(prefix,this.interfaces,this.interfaceCount,Formatting.Class.superClassesSeperator,buffer);
  }
  if (this.body != null) {
    buffer.append('\n').append(prefix);
    this.body.toString(prefix,buffer);
  }
 else {
    buffer.append(';');
  }
}",0.9947601773478436
84382,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.type.checkType(markers,context,TypePosition.CLASS);
  IClass iclass=this.type.getTheClass();
  this.getter=context.getAccessibleThis(iclass);
  if (this.getter == null) {
    markers.add(this.position,""String_Node_Str"",iclass.getFullName());
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type == Types.UNKNOWN) {
    return;
  }
  this.type.checkType(markers,context,TypePosition.CLASS);
  IClass iclass=this.type.getTheClass();
  this.getter=context.getAccessibleThis(iclass);
  if (this.getter == null) {
    markers.add(this.position,""String_Node_Str"",this.type);
  }
}",0.8827785817655571
84383,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(this.position,""String_Node_Str"");
  }
  if (this.type == Types.UNKNOWN) {
    this.type=context.getThisClass().getType();
  }
 else {
    this.type=this.type.resolveType(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (context.isStatic()) {
    markers.add(this.position,""String_Node_Str"");
    if (this.type == Types.UNKNOWN) {
      return;
    }
  }
  if (this.type != Types.UNKNOWN) {
    this.type=this.type.resolveType(markers,context);
    return;
  }
  IType t=context.getThisClass().getType();
  if (t != null) {
    this.type=t;
  }
}",0.6498599439775911
84384,"/** 
 * Removes all elements of the given   {@code collection} from this collectionand adds those that are not currently present in this collection.
 * @param collection the collection to XOR with
 */
public default void $up$eq(Collection<? extends E> collection){
  this.intersect(collection);
}","/** 
 * Removes all elements of the given   {@code collection} from this collectionand adds those that are not currently present in this collection.
 * @param collection the collection to XOR with
 */
public default void $up$eq(Collection<? extends E> collection){
  this.exclusiveOr(collection);
}",0.9663299663299664
84385,"public default boolean exclusiveOr(Collection<? extends E> collection){
  boolean changed=false;
  for (  E element : collection) {
    if (!this.contains(element)) {
      this.$plus$eq(element);
      changed=true;
    }
  }
  for (  E element : this) {
    if (!collection.contains(element)) {
      this.$minus$eq(element);
      changed=true;
    }
  }
  return changed;
}","public default boolean exclusiveOr(Collection<? extends E> collection){
  boolean changed=false;
  for (  E element : collection) {
    if (!this.contains(element)) {
      this.remove(element);
      changed=true;
    }
  }
  for (  E element : this) {
    if (!collection.contains(element)) {
      this.remove(element);
      changed=true;
    }
  }
  return changed;
}",0.9612817089452604
84386,"@Override public java.util.Set<E> toJava(){
  java.util.Set<E> set=new java.util.HashSet<E>();
  for (  E element : this) {
    set.add(element);
  }
  return set;
}","@Override public java.util.Set<E> toJava(){
  return java.util.Collections.unmodifiableSet(super.toJava());
}",0.5036496350364964
84387,"@Override public Iterator<E> iterator(){
  return this.map().keyIterator();
}","@Override public Iterator<E> iterator(){
  return AbstractMapBasedSet.this.map().keyIterator();
}",0.8850574712643678
84388,"@Override public boolean contains(Object element){
  return this.map().containsKey(element);
}","@Override public boolean contains(Object o){
  return AbstractMapBasedSet.this.map().containsKey(o);
}",0.8163265306122449
84389,"@Override public int size(){
  return this.map().size();
}","@Override public int size(){
  return AbstractMapBasedSet.this.map().size();
}",0.8529411764705882
84390,"@Override public java.util.Set<E> toJava(){
  return Collections.newSetFromMap((java.util.Map)this.map().toJava());
}","@Override public java.util.Set<E> toJava(){
  return new java.util.AbstractSet<E>(){
    @Override public int size(){
      return AbstractMapBasedSet.this.map().size();
    }
    @Override public Iterator<E> iterator(){
      return AbstractMapBasedSet.this.map().keyIterator();
    }
    @Override public boolean contains(    Object o){
      return AbstractMapBasedSet.this.map().containsKey(o);
    }
    @Override public boolean add(    E e){
      return AbstractMapBasedSet.this.map().put(e,VALUE) == null;
    }
    @Override public boolean remove(    Object o){
      return AbstractMapBasedSet.this.map().removeKey(o) != null;
    }
  }
;
}",0.2138200782268579
84391,"@Override public ImmutableList<E> immutable(){
  return new ArrayList(this);
}","@Override public ImmutableList<E> immutable(){
  return ImmutableList.linked(this);
}",0.8588957055214724
84392,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.writeStatement(writer);
}",0.848780487804878
84393,"@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int type=this.instance.valueTag();
  if (type == APPLY_CALL) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(this.position,ac.instance,ac.arguments.withLastValue(Name.update,op)).resolveCall(markers,context);
    return update;
  }
 else   if (type == SUBSCRIPT_GET) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue subscript_$eq=new SubscriptSetter(this.position,ac.instance,ac.arguments.withLastValue(Name.subscript_$eq,op)).resolveCall(markers,context);
    return subscript_$eq;
  }
 else   if (type != FIELD_ACCESS) {
    throw new Error();
  }
  IMethod m=this.method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (m == null) {
    ICall.addResolveMarker(markers,position,instance,name,arguments);
  }
  return this;
}","@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int type=this.instance.valueTag();
  if (type == APPLY_CALL) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(this.position,ac.instance,ac.arguments.withLastValue(Name.update,op)).resolveCall(markers,context);
    return update;
  }
 else   if (type == SUBSCRIPT_GET) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue subscript_$eq=new SubscriptSetter(this.position,ac.instance,ac.arguments.withLastValue(Name.subscript_$eq,op)).resolveCall(markers,context);
    return subscript_$eq;
  }
 else   if (type != FIELD_ACCESS) {
    throw new Error();
  }
  IMethod m=this.method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (m == null) {
    ICall.addResolveMarker(markers,this.position,this.instance,this.name,this.arguments);
  }
  return this;
}",0.97
84394,"@Override public int valueTag(){
  return METHOD_CALL;
}","@Override public int valueTag(){
  return COMPOUND_CALL;
}",0.9298245614035088
84395,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.arguments.resolve(markers,context);
  if (!this.type.isResolved()) {
    return this;
  }
  if (this.type.isArrayType()) {
    int len=this.arguments.size();
    int dims=this.type.getArrayDimensions();
    if (dims != len) {
      Marker marker=markers.create(this.position,""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + dims);
      marker.addInfo(""String_Node_Str"" + len);
      return this;
    }
    if (!(this.arguments instanceof ArgumentList)) {
      markers.add(this.position,""String_Node_Str"");
      return this;
    }
    ArgumentList paramList=(ArgumentList)this.arguments;
    for (int i=0; i < len; i++) {
      IValue v=paramList.getValue(i);
      IValue v1=v.withType(Types.INT,Types.INT,markers,context);
      if (v1 == null) {
        Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + v.getType());
      }
 else {
        paramList.setValue(i,v1);
      }
    }
    return this;
  }
  this.constructor=IContext.resolveConstructor(this.type,this.arguments);
  if (this.constructor == null) {
    this.reportResolve(markers);
    return this;
  }
  if (this.constructor.getTheClass().isGeneric() && !this.type.isGenericType()) {
    this.type=this.constructor.checkGenericType(markers,position,context,type,arguments);
  }
  this.constructor.checkArguments(markers,this.position,context,this.type,this.arguments);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.type.resolve(markers,context);
  this.arguments.resolve(markers,context);
  if (!this.type.isResolved()) {
    return this;
  }
  if (this.type.isArrayType()) {
    int len=this.arguments.size();
    int dims=this.type.getArrayDimensions();
    if (dims != len) {
      Marker marker=markers.create(this.position,""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + dims);
      marker.addInfo(""String_Node_Str"" + len);
      return this;
    }
    if (!(this.arguments instanceof ArgumentList)) {
      markers.add(this.position,""String_Node_Str"");
      return this;
    }
    ArgumentList paramList=(ArgumentList)this.arguments;
    for (int i=0; i < len; i++) {
      IValue v=paramList.getValue(i);
      IValue v1=v.withType(Types.INT,Types.INT,markers,context);
      if (v1 == null) {
        Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + v.getType());
      }
 else {
        paramList.setValue(i,v1);
      }
    }
    return this;
  }
  this.constructor=IContext.resolveConstructor(this.type,this.arguments);
  if (this.constructor == null) {
    this.reportResolve(markers);
    return this;
  }
  if (this.constructor.getTheClass().isGeneric() && !this.type.isGenericType()) {
    this.type=this.constructor.checkGenericType(markers,this.position,context,this.type,this.arguments);
  }
  this.constructor.checkArguments(markers,this.position,context,this.type,this.arguments);
  return this;
}",0.9925590423811064
84396,"@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  IClass theClass=this.type.getTheClass();
  if (theClass == null) {
    return;
  }
  int count=theClass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=theClass.getParameter(i);
    IType type=param.getType();
    IValue value=this.arguments.getValue(i,param);
    if (value == null) {
      if (param.getValue() == null) {
        markers.add(this.position,""String_Node_Str"",this.type,param.getName());
      }
      continue;
    }
    IValue value1=value.withType(type,type,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"",param.getName());
      marker.addInfo(""String_Node_Str"" + type);
      marker.addInfo(""String_Node_Str"" + value.getType());
      continue;
    }
    value1=Util.constant(value1,markers);
    if (value1 != value) {
      this.arguments.setValue(i,param,value1);
    }
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  IClass theClass=this.type.getTheClass();
  if (theClass == null) {
    return;
  }
  int count=theClass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=theClass.getParameter(i);
    IType type=param.getType();
    IValue value=this.arguments.getValue(i,param);
    if (value == null) {
      if (param.getValue() == null) {
        markers.add(this.position,""String_Node_Str"",this.type,param.getName());
      }
      continue;
    }
    IValue value1=value.withType(type,type,markers,context);
    if (value1 == null) {
      Util.createTypeError(markers,value,type,type,""String_Node_Str"",param.getName());
      continue;
    }
    value1=Util.constant(value1,markers);
    if (value1 != value) {
      this.arguments.setValue(i,param,value1);
    }
  }
}",0.7711730668069438
84397,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
this.lambdaDesc=method.getDescriptor();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
this.lambdaDesc=ctor.getDescriptor();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall && this.value.valueTag() != COMPOUND_CALL) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
this.lambdaDesc=method.getDescriptor();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
this.lambdaDesc=ctor.getDescriptor();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}",0.985021398002853
84398,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IMethod method=this.method;
  if (method == null) {
    method=IContext.resolveMethod(type,null,this.methodName,this.arguments);
    if (method == null) {
      StringBuilder builder=new StringBuilder();
      this.arguments.typesToString(builder);
      markers.add(this.literal.getPosition(),""String_Node_Str"",this.literal.getType(),type,builder);
      this.type=type;
      return null;
    }
    this.method=method;
  }
  GenericData data=method.getGenericData(null,null,this.arguments);
  method.checkArguments(markers,this.literal.getPosition(),context,null,this.arguments,data);
  this.type=method.getType().getConcreteType(data);
  if (!type.isSuperTypeOf(this.type)) {
    Marker m=markers.create(this.literal.getPosition(),""String_Node_Str"");
    m.addInfo(""String_Node_Str"" + type);
    m.addInfo(""String_Node_Str"" + this.type);
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    Util.methodSignatureToString(method,sb);
    m.addInfo(sb.toString());
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IMethod method=this.method;
  if (method == null) {
    method=IContext.resolveMethod(type,null,this.methodName,this.arguments);
    if (method == null) {
      StringBuilder builder=new StringBuilder();
      this.arguments.typesToString(builder);
      markers.add(this.literal.getPosition(),""String_Node_Str"",this.literal.getType(),type,builder);
      this.type=type;
      return null;
    }
    this.method=method;
  }
  GenericData data=method.getGenericData(null,null,this.arguments);
  method.checkArguments(markers,this.literal.getPosition(),context,null,this.arguments,data);
  this.type=method.getType().getConcreteType(data);
  if (!type.isSuperTypeOf(this.type)) {
    Marker m=markers.create(this.literal.getPosition(),""String_Node_Str"");
    m.addInfo(""String_Node_Str"" + type.getConcreteType(typeContext));
    m.addInfo(""String_Node_Str"" + this.type);
    StringBuilder sb=new StringBuilder(""String_Node_Str"");
    Util.methodSignatureToString(method,sb);
    m.addInfo(sb.toString());
  }
  return this;
}",0.9870362092087618
84399,"@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!Types.MAP_CLASS.isSubTypeOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(Types.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new Array(this.keys,this.count),new Array(this.values,this.count)},2);
      return new LiteralExpression(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  IType keyType=this.keyType=mapType.resolveTypeSafely(Types.KEY_VARIABLE);
  IType valueType=this.valueType=mapType.resolveTypeSafely(Types.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    IValue value=this.keys[i];
    IValue value1=IType.convertValue(value,keyType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + mapType);
      marker.addInfo(""String_Node_Str"" + keyType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.keys[i]=value1;
    }
    value=this.values[i];
    value1=IType.convertValue(value,valueType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + mapType);
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  return this;
}","@Override public IValue withType(IType mapType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!Types.MAP_CLASS.isSubTypeOf(mapType)) {
    IAnnotation annotation=mapType.getTheClass().getAnnotation(Types.MAP_CONVERTIBLE_CLASS);
    if (annotation != null) {
      ArgumentList arguments=new ArgumentList(new IValue[]{new Array(this.keys,this.count),new Array(this.values,this.count)},2);
      return new LiteralExpression(this,annotation,arguments).withType(mapType,typeContext,markers,context);
    }
    return null;
  }
  IType keyType=this.keyType=mapType.resolveTypeSafely(Types.KEY_VARIABLE);
  IType valueType=this.valueType=mapType.resolveTypeSafely(Types.VALUE_VARIABLE);
  for (int i=0; i < this.count; i++) {
    IValue value=this.keys[i];
    IValue value1=IType.convertValue(value,keyType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + mapType.getConcreteType(typeContext));
      marker.addInfo(""String_Node_Str"" + keyType.getConcreteType(typeContext));
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.keys[i]=value1;
    }
    value=this.values[i];
    value1=IType.convertValue(value,valueType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + mapType);
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  return this;
}",0.9826139088729016
84400,"/** 
 * Determines whether to generate a   {@code tableswitch} or a{@code lookupswitch} instruction, and returns {@code true} when a{@code tableswitch} should be generated.
 * @param low the lowest value
 * @param high the highest value
 * @param count the number of cases
 * @return true, if a tableswitch instruction should be used
 */
private static boolean useTableSwitch(int low,int high,int count){
  int tableSpace=4 + (high - low + 1);
  int tableTime=3;
  int lookupSpace=3 + 2 * count;
  int lookupTime=MathUtils.logBaseTwo(count);
  return count > 0 && tableSpace + 3 * tableTime <= lookupSpace + 3 * lookupTime;
}","/** 
 * Determines whether to generate a   {@code tableswitch} or a{@code lookupswitch} instruction, and returns {@code true} when a{@code tableswitch} should be generated.
 * @param low the lowest value
 * @param high the highest value
 * @param count the number of cases
 * @return true, if a tableswitch instruction should be used
 */
private static boolean useTableSwitch(int low,int high,int count){
  int tableSpace=4 + high - low + 1;
  int tableTime=3;
  int lookupSpace=3 + 2 * count;
  int lookupTime=MathUtils.logBaseTwo(count);
  return count > 0 && tableSpace + 3 * tableTime <= lookupSpace + 3 * lookupTime;
}",0.998397435897436
84401,"@Override public void foldConstants(){
  if (this.bound != null)   this.bound.foldConstants();
}","@Override public void foldConstants(){
  if (this.bound != null) {
    this.bound.foldConstants();
  }
}",0.96
84402,"@Override public void check(MarkerList markers,IContext context){
  if (this.bound != null)   this.bound.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  if (this.bound != null) {
    this.bound.check(markers,context);
  }
}",0.9701492537313432
84403,"@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  if (this.bound != null)   this.bound.cleanup(context,compilableList);
}","@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  if (this.bound != null) {
    this.bound.cleanup(context,compilableList);
  }
}",0.9753086419753086
84404,"@Override public void resolve(MarkerList markers,IContext context){
  if (this.type != null)   this.type.resolve(markers,context);
  if (this.annotations != null) {
    this.annotations.resolve(markers,context);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.resolve(markers,context);
  }
  if (this.annotations != null) {
    this.annotations.resolve(markers,context);
  }
}",0.9819004524886876
84405,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null)   this.type.checkType(markers,context,TypePosition.RETURN_TYPE);
  if (this.annotations != null) {
    this.annotations.checkTypes(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.checkType(markers,context,TypePosition.RETURN_TYPE);
  }
  if (this.annotations != null) {
    this.annotations.checkTypes(markers,context);
  }
}",0.984251968503937
84406,"@Override public void foldConstants(){
  if (this.type != null)   this.type.foldConstants();
  if (this.annotations != null) {
    this.annotations.foldConstants();
  }
}","@Override public void foldConstants(){
  if (this.type != null) {
    this.type.foldConstants();
  }
  if (this.annotations != null) {
    this.annotations.foldConstants();
  }
}",0.9770114942528736
84407,"@Override public void check(MarkerList markers,IContext context){
  if (this.type != null)   this.type.check(markers,context);
  if (this.annotations != null) {
    this.annotations.check(markers,context,this.getElementType());
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.type != null) {
    this.type.check(markers,context);
  }
  if (this.annotations != null) {
    this.annotations.check(markers,context,this.getElementType());
  }
}",0.9831223628691984
84408,"@Override public int getInvokeOpcode(){
  if ((modifiers & Modifiers.STATIC) != 0) {
    return Opcodes.INVOKESTATIC;
  }
  if ((modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    return Opcodes.INVOKESPECIAL;
  }
  if (this.theClass.isInterface()) {
    return Opcodes.INVOKEINTERFACE;
  }
  return Opcodes.INVOKEVIRTUAL;
}","@Override public int getInvokeOpcode(){
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    return Opcodes.INVOKESTATIC;
  }
  if ((this.modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    return Opcodes.INVOKESPECIAL;
  }
  if (this.theClass.isInterface()) {
    return Opcodes.INVOKEINTERFACE;
  }
  return Opcodes.INVOKEVIRTUAL;
}",0.9851632047477744
84409,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      instance=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=IType.convertValue(instance,par.getType(),typeContext,markers,context);
      if (instance1 == null) {
        Util.createTypeError(markers,instance,par.getType(),typeContext,""String_Node_Str"",par.getName());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      instance=IType.convertValue(instance,this.theClass.getType(),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9650930339843148
84410,"@Override public void check(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.check(markers,context);
  }
  if (this.method != null) {
    IType type1=this.instance.getType();
    IType type2=this.getType();
    if (!type1.isSuperTypeOf(type2)) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name,this.instance.toString());
      marker.addInfo(""String_Node_Str"" + type1);
      marker.addInfo(""String_Node_Str"" + type2);
    }
    this.method.checkCall(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.check(markers,context);
  }
  if (this.method != null) {
    IType type1=this.instance.getType();
    IType type2=super.getType();
    if (!type1.isSuperTypeOf(type2)) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name,this.instance.toString());
      marker.addInfo(""String_Node_Str"" + type1);
      marker.addInfo(""String_Node_Str"" + type2);
    }
    this.method.checkCall(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}",0.993050193050193
84411,"@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int type=this.instance.valueTag();
  if (type == APPLY_CALL) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(this.position,ac.instance,ac.arguments.withLastValue(Name.update,op)).resolveCall(markers,context);
    return update;
  }
 else   if (type == SUBSCRIPT_GET) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue subscript_$eq=new SubscriptSetter(this.position,ac.instance,ac.arguments.withLastValue(Name.subscript_$eq,op)).resolveCall(markers,context);
    return subscript_$eq;
  }
 else   if (type == FIELD_ACCESS) {
    return this;
  }
  throw new Error();
}","@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int type=this.instance.valueTag();
  if (type == APPLY_CALL) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue update=new UpdateMethodCall(this.position,ac.instance,ac.arguments.withLastValue(Name.update,op)).resolveCall(markers,context);
    return update;
  }
 else   if (type == SUBSCRIPT_GET) {
    AbstractCall ac=(AbstractCall)this.instance;
    IValue op=new MethodCall(this.position,ac,this.name,this.arguments).resolveCall(markers,context);
    IValue subscript_$eq=new SubscriptSetter(this.position,ac.instance,ac.arguments.withLastValue(Name.subscript_$eq,op)).resolveCall(markers,context);
    return subscript_$eq;
  }
 else   if (type != FIELD_ACCESS) {
    throw new Error();
  }
  IMethod m=this.method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (m == null) {
    ICall.addResolveMarker(markers,position,instance,name,arguments);
  }
  return this;
}",0.8756268806419257
84412,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.value == null) {
    return;
  }
  if (this.instance == null) {
    this.value.writeExpression(writer,this.field.getTheClass().getType());
    writer.writeInsn(Opcodes.AUTO_DUP);
  }
 else {
    this.instance.writeExpression(writer);
    this.value.writeExpression(writer);
    writer.writeInsn(Opcodes.AUTO_DUP_X1);
  }
  this.field.writeSet(writer,null,null,this.getLineNumber());
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.instance == null) {
    this.value.writeExpression(writer,this.field.getType());
    writer.writeInsn(Opcodes.AUTO_DUP);
  }
 else {
    this.instance.writeExpression(writer);
    this.value.writeExpression(writer);
    writer.writeInsn(Opcodes.AUTO_DUP_X1);
  }
  this.field.writeSet(writer,null,null,this.getLineNumber());
}",0.8716814159292036
84413,"@Override public void writeSet(MethodWriter writer,IValue instance,IValue value,int lineNumber) throws BytecodeException {
  if (this.className == null) {
    writer.writeInsn(Opcodes.AUTO_POP);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.PUTSTATIC,this.className,this.name.qualified,extended);
}","@Override public void writeSet(MethodWriter writer,IValue instance,IValue value,int lineNumber) throws BytecodeException {
  if (value != null) {
    value.writeExpression(writer,this.type);
  }
  if (this.className == null) {
    writer.writeInsn(Opcodes.AUTO_POP);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.PUTSTATIC,this.className,this.name.qualified,extended);
}",0.9060052219321147
84414,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case OPEN_BRACKET:
    pm.pushParser(new ExpressionParser(this));
  this.mode=SEPARATOR | COLON;
this.startPosition=token;
if (type != Symbols.OPEN_SQUARE_BRACKET) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case SEPARATOR | COLON:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
pm.popParser();
this.end(token);
return;
}
if (type == Symbols.COLON) {
this.mode=SEPARATOR;
this.map=true;
this.values2=new IValue[this.valueCount];
pm.pushParser(new ExpressionParser(this));
return;
}
this.mode=SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COMMA && type != Symbols.SEMICOLON) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case SEPARATOR:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
pm.popParser();
this.end(token);
return;
}
this.mode=this.map ? COLON : SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COMMA && type != Symbols.SEMICOLON) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case COLON:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.end(token);
pm.popParser();
return;
}
this.mode=SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COLON) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
switch (this.mode) {
case OPEN_BRACKET:
    pm.pushParser(new ExpressionParser(this));
  this.mode=SEPARATOR | COLON;
this.startPosition=token;
if (type != Symbols.OPEN_SQUARE_BRACKET) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case SEPARATOR | COLON:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
pm.popParser();
this.end(token);
return;
}
if (type == Symbols.COLON) {
this.mode=SEPARATOR;
this.map=true;
this.values2=new IValue[this.valueCount];
pm.pushParser(new ExpressionParser(this));
return;
}
this.mode=SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COMMA && type != Symbols.SEMICOLON) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case SEPARATOR:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
pm.popParser();
this.end(token);
return;
}
this.mode=this.map ? COLON : SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COMMA && type != Symbols.SEMICOLON) {
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case COLON:
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.end(token);
pm.popParser();
return;
}
this.mode=SEPARATOR;
pm.pushParser(new ExpressionParser(this));
if (type != Symbols.COLON) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
}
}",0.9950213371266002
84415,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (!this.theClass.isSubTypeOf(Types.ANNOTATION)) {
    this.theClass.addInterface(Types.ANNOTATION);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (!this.theClass.isSubTypeOf(Annotation.Types.ANNOTATION)) {
    this.theClass.addInterface(Annotation.Types.ANNOTATION);
  }
}",0.9424083769633508
84416,"@Override public void resolve(MarkerList markers,IContext context){
  if (this.theClass == null) {
    return;
  }
  if (this.retention == null) {
    IAnnotation retention=this.theClass.getAnnotation(Types.RETENTION_CLASS);
    if (retention != null) {
      INamed value=(INamed)retention.getArguments().getValue(0,Annotation.VALUE);
      this.retention=RetentionPolicy.valueOf(value.getName().qualified);
    }
  }
  if (this.targets != null) {
    return;
  }
  IAnnotation target=this.theClass.getAnnotation(Types.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=new TreeSet();
  IValueList values=(IValueList)target.getArguments().getValue(0,Annotation.VALUE);
  if (values == null) {
    return;
  }
  int count=values.valueCount();
  for (int i=0; i < count; i++) {
    INamed value=(INamed)values.getValue(i);
    this.targets.add(ElementType.valueOf(value.getName().qualified));
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  if (this.theClass == null) {
    return;
  }
  if (this.retention == null) {
    IAnnotation retention=this.theClass.getAnnotation(Annotation.Types.RETENTION_CLASS);
    if (retention != null) {
      INamed value=(INamed)retention.getArguments().getValue(0,Annotation.VALUE);
      this.retention=RetentionPolicy.valueOf(value.getName().qualified);
    }
  }
  if (this.targets != null) {
    return;
  }
  IAnnotation target=this.theClass.getAnnotation(Annotation.Types.TARGET_CLASS);
  if (target == null) {
    return;
  }
  this.targets=new TreeSet();
  IValueList values=(IValueList)target.getArguments().getValue(0,Annotation.VALUE);
  if (values == null) {
    return;
  }
  int count=values.valueCount();
  for (int i=0; i < count; i++) {
    INamed value=(INamed)values.getValue(i);
    this.targets.add(ElementType.valueOf(value.getName().qualified));
  }
}",0.988133764832794
84417,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.UNKNOWN) {
    return this;
  }
  if (type.isArrayType()) {
    return this;
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.NIL_CONVERTIBLE_CLASS);
  if (annotation != null) {
    this.methodName=LiteralExpression.getMethodName(annotation);
    this.requiredType=type;
    return this;
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == dyvil.tools.compiler.ast.type.Types.UNKNOWN) {
    return this;
  }
  if (type.isArrayType()) {
    return this;
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.NIL_CONVERTIBLE_CLASS);
  if (annotation != null) {
    this.methodName=LiteralExpression.getMethodName(annotation);
    this.requiredType=type;
    return this;
  }
  return null;
}",0.9680170575692963
84418,"@Override public IType getType(){
  return this.requiredType == null ? Types.UNKNOWN : this.requiredType;
}","@Override public IType getType(){
  return this.requiredType == null ? dyvil.tools.compiler.ast.type.Types.UNKNOWN : this.requiredType;
}",0.8770491803278688
84419,"@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  IType elementType;
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    IAnnotation annotation;
    if ((annotation=iclass.getAnnotation(Types.ARRAY_CONVERTIBLE)) != null) {
      return new LiteralExpression(this,annotation).withType(arrayType,typeContext,markers,context);
    }
    if (arrayType.classEquals(Types.ITERABLE)) {
      return new LiteralExpression(this,getArrayToIterable()).withType(arrayType,typeContext,markers,context);
    }
 else     if (iclass != Types.OBJECT_CLASS) {
      return null;
    }
 else {
      elementType=this.getElementType();
    }
  }
 else {
    elementType=arrayType.getElementType();
  }
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}","@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  IType elementType;
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    IAnnotation annotation;
    if ((annotation=iclass.getAnnotation(Types.ARRAY_CONVERTIBLE)) != null) {
      return new LiteralExpression(this,annotation).withType(arrayType,typeContext,markers,context);
    }
    if (arrayType.classEquals(dyvil.tools.compiler.ast.type.Types.ITERABLE)) {
      return new LiteralExpression(this,getArrayToIterable()).withType(arrayType,typeContext,markers,context);
    }
 else     if (iclass != dyvil.tools.compiler.ast.type.Types.OBJECT_CLASS) {
      return null;
    }
 else {
      elementType=this.getElementType();
    }
  }
 else {
    elementType=arrayType.getElementType();
  }
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}",0.9793103448275862
84420,"public static IType getCommonType(IValue[] values,int valueCount){
  if (valueCount == 0) {
    return Types.ANY;
  }
  IType t=values[0].getType();
  for (int i=1; i < valueCount; i++) {
    IType t1=values[i].getType();
    t=Types.combine(t,t1);
    if (t == null) {
      return Types.ANY;
    }
  }
  return t;
}","public static IType getCommonType(IValue[] values,int valueCount){
  if (valueCount == 0) {
    return dyvil.tools.compiler.ast.type.Types.ANY;
  }
  IType t=values[0].getType();
  for (int i=1; i < valueCount; i++) {
    IType t1=values[i].getType();
    t=dyvil.tools.compiler.ast.type.Types.combine(t,t1);
    if (t == null) {
      return dyvil.tools.compiler.ast.type.Types.ANY;
    }
  }
  return t;
}",0.8756906077348067
84421,"private boolean isConvertibleFrom(IType type){
  IClass iclass=type.getTheClass();
  return iclass == Types.OBJECT_CLASS || iclass.getAnnotation(Types.ARRAY_CONVERTIBLE) != null || Types.ITERABLE.isSuperClassOf(type);
}","private boolean isConvertibleFrom(IType type){
  IClass iclass=type.getTheClass();
  return iclass == dyvil.tools.compiler.ast.type.Types.OBJECT_CLASS || iclass.getAnnotation(Types.ARRAY_CONVERTIBLE) != null || dyvil.tools.compiler.ast.type.Types.ITERABLE.isSuperClassOf(type);
}",0.8795180722891566
84422,"private static IMethod getArrayToIterable(){
  if (ARRAY_TO_ITERABLE != null) {
    return ARRAY_TO_ITERABLE;
  }
  return ARRAY_TO_ITERABLE=Types.getObjectArray().getBody().getMethod(Name.getQualified(""String_Node_Str""));
}","private static IMethod getArrayToIterable(){
  if (ARRAY_TO_ITERABLE != null) {
    return ARRAY_TO_ITERABLE;
  }
  return ARRAY_TO_ITERABLE=dyvil.tools.compiler.ast.type.Types.getObjectArray().getBody().getMethod(Name.getQualified(""String_Node_Str""));
}",0.9372384937238494
84423,"@Override public float getTypeMatch(IType type){
  float distance=type.getSubTypeDistance(Types.STRING);
  if (distance != 0) {
    return distance;
  }
  return this.isConvertible(type) ? CONVERSION_MATCH : 0;
}","@Override public float getTypeMatch(IType type){
  float distance=type.getSubTypeDistance(dyvil.tools.compiler.ast.type.Types.STRING);
  if (distance != 0) {
    return distance;
  }
  return this.isConvertible(type) ? CONVERSION_MATCH : 0;
}",0.933920704845815
84424,"@Override public void check(MarkerList markers,IContext context){
  int len=this.count / 2;
  for (int i=0; i < len; i++) {
    IValue v=this.values[i];
    v.check(markers,context);
    if (v.getType() == Types.VOID) {
      markers.add(v.getPosition(),""String_Node_Str"");
    }
  }
}","@Override public void check(MarkerList markers,IContext context){
  int len=this.count / 2;
  for (int i=0; i < len; i++) {
    IValue v=this.values[i];
    v.check(markers,context);
    if (v.getType() == dyvil.tools.compiler.ast.type.Types.VOID) {
      markers.add(v.getPosition(),""String_Node_Str"");
    }
  }
}",0.95
84425,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  IClass iclass=type.getTheClass();
  if (iclass.getAnnotation(Types.STRING_CONVERTIBLE_CLASS) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  if (iclass.getAnnotation(Types.FORMAT_STRING_CONVERTIBLE) != null) {
    StringValue string;
    int len=this.count / 2;
    if (len > 0) {
      StringBuilder builder=new StringBuilder();
      builder.append(this.strings[0]);
      for (int i=1; i <= len; i++) {
        builder.append('\\').append(i);
        builder.append(this.strings[i]);
      }
      string=new StringValue(this.position,builder.toString());
    }
 else {
      string=new StringValue(""String_Node_Str"");
    }
    ArgumentList list=new ArgumentList(1 + len);
    list.addValue(string);
    for (int i=0; i < len; i++) {
      list.addValue(this.values[i]);
    }
    return new LiteralExpression(this,list).withType(type,typeContext,markers,context);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(dyvil.tools.compiler.ast.type.Types.STRING)) {
    return this;
  }
  IClass iclass=type.getTheClass();
  if (iclass.getAnnotation(dyvil.tools.compiler.ast.type.Types.STRING_CONVERTIBLE_CLASS) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  if (iclass.getAnnotation(Types.FORMAT_STRING_CONVERTIBLE) != null) {
    StringValue string;
    int len=this.count / 2;
    if (len > 0) {
      StringBuilder builder=new StringBuilder();
      builder.append(this.strings[0]);
      for (int i=1; i <= len; i++) {
        builder.append('\\').append(i);
        builder.append(this.strings[i]);
      }
      string=new StringValue(this.position,builder.toString());
    }
 else {
      string=new StringValue(""String_Node_Str"");
    }
    ArgumentList list=new ArgumentList(1 + len);
    list.addValue(string);
    for (int i=0; i < len; i++) {
      list.addValue(this.values[i]);
    }
    return new LiteralExpression(this,list).withType(type,typeContext,markers,context);
  }
  return null;
}",0.973753280839895
84426,"@Override public boolean isType(IType type){
  if (type.isSuperTypeOf(Types.STRING)) {
    return true;
  }
  return this.isConvertible(type);
}","@Override public boolean isType(IType type){
  if (type.isSuperTypeOf(dyvil.tools.compiler.ast.type.Types.STRING)) {
    return true;
  }
  return this.isConvertible(type);
}",0.9056603773584906
84427,"@Override public IType getType(){
  return Types.STRING;
}","@Override public IType getType(){
  return dyvil.tools.compiler.ast.type.Types.STRING;
}",0.7945205479452054
84428,"private boolean isConvertible(IType type){
  IClass theClass=type.getTheClass();
  return theClass.getAnnotation(Types.STRING_CONVERTIBLE_CLASS) != null || theClass.getAnnotation(Types.FORMAT_STRING_CONVERTIBLE) != null;
}","private boolean isConvertible(IType type){
  IClass theClass=type.getTheClass();
  return theClass.getAnnotation(dyvil.tools.compiler.ast.type.Types.STRING_CONVERTIBLE_CLASS) != null || theClass.getAnnotation(Types.FORMAT_STRING_CONVERTIBLE) != null;
}",0.9367088607594936
84429,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.method != null) {
    this.method.writeCall(writer,null,this.arguments,this.tupleType,this.getLineNumber());
    return;
  }
  String internal=this.tupleType.getInternalName();
  writer.writeTypeInsn(Opcodes.NEW,internal);
  writer.writeInsn(Opcodes.DUP);
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    value.writeExpression(writer,Types.OBJECT);
  }
  String owner=internal;
  String desc=TupleType.getConstructorDescriptor(this.valueCount);
  writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,owner,""String_Node_Str"",desc,false);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.method != null) {
    this.method.writeCall(writer,null,this.arguments,this.tupleType,this.getLineNumber());
    return;
  }
  String internal=this.tupleType.getInternalName();
  writer.writeTypeInsn(Opcodes.NEW,internal);
  writer.writeInsn(Opcodes.DUP);
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    value.writeExpression(writer,dyvil.tools.compiler.ast.type.Types.OBJECT);
  }
  String owner=internal;
  String desc=TupleType.getConstructorDescriptor(this.valueCount);
  writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,owner,""String_Node_Str"",desc,false);
}",0.9777448071216616
84430,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolveType(markers,context);
  ClassGenericType generic=new ClassGenericType(Types.CLASS_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=dyvil.tools.compiler.ast.type.Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolveType(markers,context);
  ClassGenericType generic=new ClassGenericType(Types.CLASS_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}",0.961439588688946
84431,"@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int args=this.arguments.size();
  if (args == 1) {
    IValue op;
    if (this.instance != null) {
      op=Operators.getPriority(this.instance,this.name,this.arguments.getFirstValue());
    }
 else {
      op=Operators.getPriority(this.name,this.arguments.getFirstValue());
    }
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (method != null) {
    this.method=method;
    this.checkArguments(markers,context);
    return this;
  }
  if (args == 1 && this.instance != null) {
    String qualified=this.name.qualified;
    if (qualified.endsWith(""String_Node_Str"")) {
      String unqualified=this.name.unqualified;
      Name name=Name.get(qualified.substring(0,qualified.length() - 3),unqualified.substring(0,unqualified.length() - 1));
      CompoundCall cc=new CompoundCall(this.position,this.instance,name,this.arguments);
      return cc.resolveCall(markers,context);
    }
    IValue op=Operators.get(this.instance,this.name,this.arguments.getFirstValue());
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  if (this.instance == null) {
    AbstractCall apply=this.resolveApply(markers,context);
    if (apply != null) {
      apply.checkArguments(markers,context);
      return apply;
    }
  }
  ICall.addResolveMarker(markers,this.position,this.instance,this.name,this.arguments);
  return this;
}","@Override protected IValue resolveCall(MarkerList markers,IContext context){
  int args=this.arguments.size();
  if (args == 1) {
    IValue op;
    if (this.instance != null) {
      op=Operators.getPriority(this.instance,this.name,this.arguments.getFirstValue());
    }
 else {
      op=Operators.getPriority(this.name,this.arguments.getFirstValue());
    }
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,this.arguments);
  if (method != null) {
    this.method=method;
    this.checkArguments(markers,context);
    return this;
  }
  if (args == 1 && this.instance != null) {
    String qualified=this.name.qualified;
    if (qualified.endsWith(""String_Node_Str"")) {
      Name name=ExpressionParser.stripEq(this.name);
      CompoundCall cc=new CompoundCall(this.position,this.instance,name,this.arguments);
      return cc.resolveCall(markers,context);
    }
    IValue op=Operators.get(this.instance,this.name,this.arguments.getFirstValue());
    if (op != null) {
      op.setPosition(this.position);
      return op;
    }
  }
  if (this.instance == null) {
    AbstractCall apply=this.resolveApply(markers,context);
    if (apply != null) {
      apply.checkArguments(markers,context);
      return apply;
    }
  }
  ICall.addResolveMarker(markers,this.position,this.instance,this.name,this.arguments);
  return this;
}",0.9318181818181818
84432,"@Override public IValue checkAssign(MarkerList markers,IContext context,ICodePosition position,IValue instance,IValue newValue){
  if ((this.modifiers & Modifiers.FINAL) != 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
  }
  IValue value1=IType.convertValue(newValue,this.type,instance.getType(),markers,context);
  if (value1 == null) {
    Marker marker=markers.create(newValue.getPosition(),""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + newValue.getType());
  }
 else {
    newValue=value1;
  }
  return newValue;
}","@Override public IValue checkAssign(MarkerList markers,IContext context,ICodePosition position,IValue instance,IValue newValue){
  if ((this.modifiers & Modifiers.FINAL) != 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
  }
  IValue value1=IType.convertValue(newValue,this.type,this.type,markers,context);
  if (value1 == null) {
    Marker marker=markers.create(newValue.getPosition(),""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + newValue.getType());
  }
 else {
    newValue=value1;
  }
  return newValue;
}",0.5979216626698641
84433,"@Override public void addMapping(ITypeVariable typeVar,IType type){
  if (type == Types.UNKNOWN) {
    return;
  }
  int index=typeVar.getIndex();
  if (!this.isMethodTypeVariable(typeVar)) {
    return;
  }
  if (index < this.genericCount) {
    this.generics[index]=Types.combine(this.generics[index],type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}","@Override public void addMapping(ITypeVariable typeVar,IType type){
  if (type == Types.UNKNOWN) {
    return;
  }
  int index=typeVar.getIndex();
  if (!this.isMethodTypeVariable(typeVar)) {
    return;
  }
  if (index < this.genericCount) {
    if (this.generics[index] == null) {
      this.generics[index]=type;
      return;
    }
    this.generics[index]=Types.combine(this.generics[index],type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}",0.9249394673123488
84434,"private void getAccess(IParserManager pm,Name name,IToken token,int type){
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),new MethodParameter(token.raw(),token.nameValue()));
    this.mode=END;
    this.value=lv;
    pm.pushParser(pm.newExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.setDotless(this.dotless);
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      SingleArgument sa=new SingleArgument();
      MethodCall call=new MethodCall(token,null,name,sa);
      call.setDotless(this.dotless);
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=ACCESS;
    if (op.type != Operator.POSTFIX && !ParserUtil.isTerminator2(nextType)) {
      SingleArgument sa=new SingleArgument();
      call.setArguments(sa);
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.setDotless(this.dotless);
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.setDotless(this.dotless);
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  SingleArgument sa=new SingleArgument();
  MethodCall call=new MethodCall(token,this.value,name,sa);
  call.setDotless(this.dotless);
  this.value=call;
  this.mode=ACCESS;
  ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
  parser.operator=Operators.DEFAULT;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type){
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),new MethodParameter(token.raw(),token.nameValue()));
    this.mode=END;
    this.value=lv;
    pm.pushParser(pm.newExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.setDotless(this.dotless);
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      SingleArgument sa=new SingleArgument();
      MethodCall call=new MethodCall(token,null,name,sa);
      call.setDotless(this.dotless);
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    call.setDotless(this.dotless);
    this.value=call;
    this.mode=ACCESS;
    if (op.type != Operator.POSTFIX && !ParserUtil.isTerminator2(nextType)) {
      SingleArgument sa=new SingleArgument();
      call.setArguments(sa);
      ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.setDotless(this.dotless);
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.setDotless(this.dotless);
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  op=pm.getOperator(stripEq(name));
  SingleArgument sa=new SingleArgument();
  MethodCall call=new MethodCall(token,this.value,name,sa);
  call.setDotless(this.dotless);
  this.value=call;
  this.mode=ACCESS;
  ExpressionParser parser=(ExpressionParser)pm.newExpressionParser(sa);
  parser.operator=op == null ? Operators.DEFAULT : op;
  pm.pushParser(parser);
  return;
}",0.9915966386554622
84435,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Symbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
if (next.next().type() == Symbols.ARROW_OPERATOR) {
  LambdaExpression le=new LambdaExpression(next.next().raw());
  this.value=le;
  pm.skip(2);
  pm.pushParser(pm.newExpressionParser(le));
  this.mode=ACCESS;
  return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=END;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case Symbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case Symbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case Tokens.SYMBOL_IDENTIFIER:
this.getAccess(pm,token.nameValue(),token,type);
return;
case Symbols.AT:
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case Symbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.field.setValue(this.value);
this.mode=ACCESS_2;
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
this.mode=PARAMETERS;
pm.reparse();
return;
}
case PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == Symbols.OPEN_PARENTHESIS) {
IArguments arguments=this.getArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.getArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue(),args);
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.setArguments(args);
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,args);
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.dotless) {
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
pm.report(new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str""));
return;
case Operator.INFIX_RIGHT:
}
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
IToken prev=token.prev();
if (prev != null && ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
SingleArgument sa=new SingleArgument();
ApplyMethodCall call=new ApplyMethodCall(token.raw(),this.value,sa);
this.value=call;
this.mode=END;
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
switch (type) {
case Symbols.OPEN_PARENTHESIS:
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
if (next.next().type() == Symbols.ARROW_OPERATOR) {
  LambdaExpression le=new LambdaExpression(next.next().raw());
  this.value=le;
  pm.skip(2);
  pm.pushParser(pm.newExpressionParser(le));
  this.mode=ACCESS;
  return;
}
this.value=new VoidValue(token.to(token.next()));
pm.skip();
this.mode=END;
return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
case Symbols.OPEN_SQUARE_BRACKET:
this.mode=ACCESS;
pm.pushParser(new ArrayLiteralParser(this),true);
return;
case Symbols.OPEN_CURLY_BRACKET:
this.mode=END;
pm.pushParser(new StatementListParser(this),true);
return;
case Tokens.SYMBOL_IDENTIFIER:
this.getAccess(pm,token.nameValue(),token,type);
return;
case Symbols.AT:
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
Annotation a=new Annotation();
pm.pushParser(new AnnotationParser(a));
this.value=new AnnotationValue(a);
this.mode=0;
return;
case Symbols.ARROW_OPERATOR:
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case ANONYMOUS_CLASS_END:
this.value.expandPosition(token);
this.mode=ACCESS_2;
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
this.mode=PARAMETERS;
pm.reparse();
return;
}
case PARAMETERS:
{
ICall icall=(ICall)this.value;
if (type == Symbols.OPEN_PARENTHESIS) {
IArguments arguments=this.getArguments(pm,token.next());
icall.setArguments(arguments);
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
icall.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.getArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue(),args);
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.setArguments(args);
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,args);
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.dotless) {
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
pm.report(new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str""));
return;
case Operator.INFIX_RIGHT:
}
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
IToken prev=token.prev();
if (prev != null && ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
SingleArgument sa=new SingleArgument();
ApplyMethodCall call=new ApplyMethodCall(token.raw(),this.value,sa);
this.value=call;
this.mode=END;
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}",0.998020039599208
84436,"@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.pattern != null) {
    this.pattern.resolve(markers,context);
    if (this.type == null) {
      this.getType();
    }
    IType type1=this.type.resolveType(PAR_TYPE);
    this.pattern=this.pattern.withType(type1,markers);
  }
  IContext context1=new CombiningContext(this,context);
  if (this.condition != null) {
    this.condition=this.condition.resolve(markers,context1);
  }
  if (this.action != null) {
    this.action=this.action.resolve(markers,context1);
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.pattern != null) {
    this.pattern.resolve(markers,context);
    if (this.type == null) {
      this.getType();
    }
    IType type1=this.type.resolveTypeSafely(PAR_TYPE);
    this.pattern=this.pattern.withType(type1,markers);
  }
  IContext context1=new CombiningContext(this,context);
  if (this.condition != null) {
    this.condition=this.condition.resolve(markers,context1);
  }
  if (this.action != null) {
    this.action=this.action.resolve(markers,context1);
  }
  return this;
}",0.9947183098591548
84437,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.isType(type)) {
    this.type=type;
    IType type1=this.type.resolveType(RETURN_TYPE);
    this.action=this.action.withType(type1,typeContext,markers,context);
    return this;
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.isType(type)) {
    this.type=type;
    IType type1=this.type.resolveTypeSafely(RETURN_TYPE);
    this.action=this.action.withType(type1,typeContext,markers,context);
    return this;
  }
  return null;
}",0.9905956112852664
84438,"@Override public void write(ClassWriter writer) throws BytecodeException {
  IType parType=this.type.resolveType(PAR_TYPE);
  IType returnType=this.type.resolveType(RETURN_TYPE);
  String parFrameType=parType.getInternalName();
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  this.type.appendSignature(builder);
  String signature=builder.toString();
  writer.visit(DyvilCompiler.classVersion,0,this.internalClassName,signature,""String_Node_Str"",new String[]{""String_Node_Str""});
  MethodVisitor mv=writer.visitMethod(0,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  StringBuilder descBuilder=new StringBuilder();
  descBuilder.append('(');
  parType.appendExtendedName(descBuilder);
  String definedDesc=descBuilder.append(""String_Node_Str"").toString();
  StringBuilder signatureBuilder=new StringBuilder();
  signatureBuilder.append('(');
  parType.appendSignature(signatureBuilder);
  signature=signatureBuilder.append(""String_Node_Str"").toString();
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",definedDesc,signature,null));
  Label elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeLDC(1);
  mw.writeInsn(Opcodes.IRETURN);
  mw.writeLabel(elseLabel);
  mw.writeLDC(0);
  mw.writeInsn(Opcodes.IRETURN);
  mw.end();
  descBuilder.deleteCharAt(descBuilder.length() - 1);
  returnType.appendExtendedName(descBuilder);
  String applyDesc=descBuilder.toString();
  signatureBuilder.deleteCharAt(signatureBuilder.length() - 1);
  returnType.appendExtendedName(signatureBuilder);
  signature=signatureBuilder.toString();
  mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",applyDesc,signature,null));
  elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeInsn(Opcodes.ACONST_NULL);
  mw.writeInsn(Opcodes.ARETURN);
  mw.writeLabel(elseLabel);
  if (this.action != null) {
    this.action.writeExpression(mw,returnType);
  }
 else {
    mw.writeInsn(Opcodes.ACONST_NULL);
  }
  mw.writeInsn(Opcodes.ARETURN);
  mw.end(returnType);
  if (!parType.classEquals(Types.OBJECT) || !returnType.classEquals(Types.OBJECT)) {
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
    mv.visitInsn(Opcodes.IRETURN);
    mv.visitMaxs(2,2);
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",applyDesc,false);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,2);
  }
}","@Override public void write(ClassWriter writer) throws BytecodeException {
  IType parType=this.type.resolveTypeSafely(PAR_TYPE);
  IType returnType=this.type.resolveTypeSafely(RETURN_TYPE);
  String parFrameType=parType.getInternalName();
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  this.type.appendSignature(builder);
  String signature=builder.toString();
  writer.visit(DyvilCompiler.classVersion,0,this.internalClassName,signature,""String_Node_Str"",new String[]{""String_Node_Str""});
  MethodVisitor mv=writer.visitMethod(0,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  StringBuilder descBuilder=new StringBuilder();
  descBuilder.append('(');
  parType.appendExtendedName(descBuilder);
  String definedDesc=descBuilder.append(""String_Node_Str"").toString();
  StringBuilder signatureBuilder=new StringBuilder();
  signatureBuilder.append('(');
  parType.appendSignature(signatureBuilder);
  signature=signatureBuilder.append(""String_Node_Str"").toString();
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",definedDesc,signature,null));
  Label elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeLDC(1);
  mw.writeInsn(Opcodes.IRETURN);
  mw.writeLabel(elseLabel);
  mw.writeLDC(0);
  mw.writeInsn(Opcodes.IRETURN);
  mw.end();
  descBuilder.deleteCharAt(descBuilder.length() - 1);
  returnType.appendExtendedName(descBuilder);
  String applyDesc=descBuilder.toString();
  signatureBuilder.deleteCharAt(signatureBuilder.length() - 1);
  returnType.appendExtendedName(signatureBuilder);
  signature=signatureBuilder.toString();
  mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",applyDesc,signature,null));
  elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeInsn(Opcodes.ACONST_NULL);
  mw.writeInsn(Opcodes.ARETURN);
  mw.writeLabel(elseLabel);
  if (this.action != null) {
    this.action.writeExpression(mw,returnType);
  }
 else {
    mw.writeInsn(Opcodes.ACONST_NULL);
  }
  mw.writeInsn(Opcodes.ARETURN);
  mw.end(returnType);
  if (!parType.classEquals(Types.OBJECT) || !returnType.classEquals(Types.OBJECT)) {
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
    mv.visitInsn(Opcodes.IRETURN);
    mv.visitMaxs(2,2);
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",applyDesc,false);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,2);
  }
}",0.9983570646221248
84439,"private void generateSwitch(MethodWriter writer,boolean expr,Object frameType) throws BytecodeException {
  Label defaultLabel=null;
  int cases=0;
  int low=Integer.MAX_VALUE;
  int high=Integer.MIN_VALUE;
  boolean switchVar=false;
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    IPattern pattern=matchCase.pattern;
    Label label=matchCase.switchLabel=new Label();
    if (switchVar || pattern.switchCheck()) {
      switchVar=true;
    }
    if (pattern.isExhaustive()) {
      defaultLabel=label;
      continue;
    }
    int min=pattern.minValue();
    if (min < low) {
      low=min;
    }
    int max=pattern.maxValue();
    if (max > high) {
      high=max;
    }
    cases+=pattern.switchCases();
  }
  Label endLabel=new Label();
  boolean matchError=false;
  if (defaultLabel == null) {
    if (!this.exhaustive) {
      switchVar=true;
      defaultLabel=new Label();
      matchError=true;
    }
 else {
      defaultLabel=endLabel;
    }
  }
  IType type=this.value.getType();
  this.value.writeExpression(writer,Types.INT);
  int varIndex=-1;
  if (switchVar) {
    varIndex=writer.localCount();
    writer.writeVarInsn(type.getStoreOpcode(),varIndex);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
  }
  if (!type.isPrimitive()) {
    writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  int localCount=writer.localCount();
  if (useTableSwitch(low,high,cases)) {
    this.writeTableSwitch(writer,defaultLabel,low,high);
  }
 else {
    this.writeLookupSwitch(writer,defaultLabel,cases);
  }
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    writer.writeTargetLabel(matchCase.switchLabel);
    if (matchCase.condition != null) {
      matchCase.condition.writeInvJump(writer,defaultLabel);
    }
    if (matchCase.pattern.switchCheck()) {
      matchCase.pattern.writeInvJump(writer,varIndex,defaultLabel);
    }
    this.writeAction(writer,expr,frameType,matchCase.action);
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
  }
  if (matchError) {
    writer.writeLabel(defaultLabel);
    this.writeMatchError(writer,varIndex,type);
  }
  writer.writeLabel(endLabel);
  if (switchVar) {
    writer.resetLocals(varIndex);
  }
}","private void generateSwitch(MethodWriter writer,boolean expr,Object frameType) throws BytecodeException {
  Label defaultLabel=null;
  int cases=0;
  int low=Integer.MAX_VALUE;
  int high=Integer.MIN_VALUE;
  boolean switchVar=false;
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    IPattern pattern=matchCase.pattern;
    Label label=matchCase.switchLabel=new Label();
    if (switchVar || pattern.switchCheck()) {
      switchVar=true;
    }
    if (pattern.isExhaustive()) {
      defaultLabel=label;
      continue;
    }
    int min=pattern.minValue();
    if (min < low) {
      low=min;
    }
    int max=pattern.maxValue();
    if (max > high) {
      high=max;
    }
    cases+=pattern.switchCases();
  }
  Label endLabel=new Label();
  boolean matchError=false;
  if (defaultLabel == null) {
    if (!this.exhaustive) {
      switchVar=true;
      defaultLabel=new Label();
      matchError=true;
    }
 else {
      defaultLabel=endLabel;
    }
  }
  IType type=this.value.getType();
  this.value.writeExpression(writer);
  int varIndex=-1;
  if (switchVar) {
    varIndex=writer.localCount();
    writer.writeVarInsn(type.getStoreOpcode(),varIndex);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
  }
  if (!type.isPrimitive()) {
    writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  }
  int localCount=writer.localCount();
  if (useTableSwitch(low,high,cases)) {
    this.writeTableSwitch(writer,defaultLabel,low,high);
  }
 else {
    this.writeLookupSwitch(writer,defaultLabel,cases);
  }
  for (int i=0; i < this.caseCount; i++) {
    MatchCase matchCase=this.cases[i];
    writer.writeTargetLabel(matchCase.switchLabel);
    if (matchCase.condition != null) {
      matchCase.condition.writeInvJump(writer,defaultLabel);
    }
    if (matchCase.pattern.switchCheck()) {
      matchCase.pattern.writeInvJump(writer,varIndex,defaultLabel);
    }
    this.writeAction(writer,expr,frameType,matchCase.action);
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
  }
  if (matchError) {
    writer.writeLabel(defaultLabel);
    this.writeMatchError(writer,varIndex,type);
  }
  writer.writeLabel(endLabel);
  if (switchVar) {
    writer.resetLocals(varIndex);
  }
}",0.9978448275862069
84440,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralExpression(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=type.resolveType(tupleClass.getTypeVariable(i));
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + value.getType());
      m.addInfo(""String_Node_Str"" + elementType);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.valueCount == 1) {
    return this.values[0].withType(type,typeContext,markers,context);
  }
  IAnnotation annotation=type.getTheClass().getAnnotation(Types.TUPLE_CONVERTIBLE);
  if (annotation != null) {
    return new LiteralExpression(this,annotation,new ArgumentList(this.values,this.valueCount)).withType(type,typeContext,markers,context);
  }
  IClass tupleClass=TupleType.getTupleClass(this.valueCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.valueCount; i++) {
    IType elementType=type.resolveTypeSafely(tupleClass.getTypeVariable(i));
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + value.getType());
      m.addInfo(""String_Node_Str"" + elementType);
    }
 else {
      this.values[i]=value=value1;
    }
  }
  return this;
}",0.9868361325465276
84441,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.value.writeExpression(writer,this.type);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.value.writeExpression(writer);
  this.value.getType().writeCast(writer,this.type,this.getLineNumber());
}",0.8108108108108109
84442,"@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType type1=type.resolveType(tupleClass.getTypeVariable(i));
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type1,markers);
    if (pattern1 == null) {
      Marker m=markers.create(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type1);
    }
 else {
      this.patterns[i]=pattern1;
    }
  }
  return this;
}","@Override public IPattern withType(IType type,MarkerList markers){
  IClass tupleClass=TupleType.getTupleClass(this.patternCount);
  if (!tupleClass.isSubTypeOf(type)) {
    return null;
  }
  this.tupleType=type;
  for (int i=0; i < this.patternCount; i++) {
    IType type1=type.resolveTypeSafely(tupleClass.getTypeVariable(i));
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type1,markers);
    if (pattern1 == null) {
      Marker m=markers.create(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type1);
    }
 else {
      this.patterns[i]=pattern1;
    }
  }
  return this;
}",0.99568345323741
84443,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.then == null) {
    this.condition.writeExpression(writer);
    writer.writeInsn(Opcodes.POP);
    return;
  }
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  if (this.elseThen != null) {
    dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
    writer.writeLabel(elseStart);
    this.elseThen.writeStatement(writer);
    writer.writeLabel(elseEnd);
  }
 else {
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeLabel(elseStart);
  }
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.then == null) {
    this.condition.writeExpression(writer);
    writer.writeInsn(Opcodes.POP);
    return;
  }
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  if (this.elseThen != null) {
    dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
    writer.writeTargetLabel(elseStart);
    this.elseThen.writeStatement(writer);
    writer.writeTargetLabel(elseEnd);
  }
 else {
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeTargetLabel(elseStart);
  }
}",0.9881266490765171
84444,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
  Object commonFrameType=this.commonType.getFrameType();
  this.condition.writeInvJump(writer,elseStart);
  this.then.writeExpression(writer,this.commonType);
  writer.getFrame().set(commonFrameType);
  writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
  writer.writeLabel(elseStart);
  if (this.elseThen == null) {
    this.commonType.writeDefaultValue(writer);
  }
 else {
    this.elseThen.writeExpression(writer,this.commonType);
  }
  writer.getFrame().set(commonFrameType);
  writer.writeLabel(elseEnd);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label elseStart=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label elseEnd=new dyvil.tools.asm.Label();
  Object commonFrameType=this.commonType.getFrameType();
  this.condition.writeInvJump(writer,elseStart);
  this.then.writeExpression(writer,this.commonType);
  writer.getFrame().set(commonFrameType);
  writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
  writer.writeTargetLabel(elseStart);
  if (this.elseThen == null) {
    this.commonType.writeDefaultValue(writer);
  }
 else {
    this.elseThen.writeExpression(writer,this.commonType);
  }
  writer.getFrame().set(commonFrameType);
  writer.writeTargetLabel(elseEnd);
}",0.9916782246879334
84445,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label startLabel=this.startLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label updateLabel=this.updateLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label endLabel=this.endLabel.target=new dyvil.tools.asm.Label();
  Variable var=this.variable;
  Variable iteratorVar=this.iteratorVar;
  IType varType=var.getType();
  int lineNumber=this.getLineNumber();
  dyvil.tools.asm.Label scopeLabel=new dyvil.tools.asm.Label();
  writer.writeLabel(scopeLabel);
  var.getValue().writeExpression(writer,var.getType());
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  int locals=writer.localCount();
  iteratorVar.setIndex(locals);
  var.setIndex(locals + 1);
  writer.writeVarInsn(Opcodes.ASTORE,locals);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  writer.writeVarInsn(Opcodes.ALOAD,locals);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  if (this.boxMethod != null) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.boxMethod.getTheClass().getInternalName());
    this.boxMethod.writeInvoke(writer,null,null,lineNumber);
  }
 else {
    Types.OBJECT.writeCast(writer,varType,lineNumber);
  }
  writer.writeVarInsn(varType.getStoreOpcode(),locals + 1);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeVarInsn(Opcodes.ALOAD,locals);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  writer.writeJumpInsn(Opcodes.IFNE,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label startLabel=this.startLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label updateLabel=this.updateLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label endLabel=this.endLabel.target=new dyvil.tools.asm.Label();
  Variable var=this.variable;
  Variable iteratorVar=this.iteratorVar;
  IType varType=var.getType();
  int lineNumber=this.getLineNumber();
  dyvil.tools.asm.Label scopeLabel=new dyvil.tools.asm.Label();
  writer.writeLabel(scopeLabel);
  var.getValue().writeExpression(writer);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  int locals=writer.localCount();
  iteratorVar.setIndex(locals);
  var.setIndex(locals + 1);
  writer.writeVarInsn(Opcodes.ASTORE,locals);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  writer.writeVarInsn(Opcodes.ALOAD,locals);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  if (this.boxMethod != null) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.boxMethod.getTheClass().getInternalName());
    this.boxMethod.writeInvoke(writer,null,null,lineNumber);
  }
 else {
    Types.OBJECT.writeCast(writer,varType,lineNumber);
  }
  writer.writeVarInsn(varType.getStoreOpcode(),locals + 1);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeVarInsn(Opcodes.ALOAD,locals);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  writer.writeJumpInsn(Opcodes.IFNE,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}",0.9965483234714004
84446,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label startLabel=this.startLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label updateLabel=this.updateLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label endLabel=this.endLabel.target=new dyvil.tools.asm.Label();
  Variable var=this.variable;
  Variable stringVar=this.stringVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  int lineNumber=this.getLineNumber();
  dyvil.tools.asm.Label scopeLabel=new dyvil.tools.asm.Label();
  writer.writeLabel(scopeLabel);
  var.getValue().writeExpression(writer,var.getType());
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  writer.writeInsn(Opcodes.DUP);
  lengthVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.IFEQ,endLabel);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null,lineNumber);
  indexVar.writeGet(writer,null,lineNumber);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeIINC(indexVar.getIndex(),1);
  indexVar.writeGet(writer,null,lineNumber);
  lengthVar.writeGet(writer,null,lineNumber);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  dyvil.tools.asm.Label startLabel=this.startLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label updateLabel=this.updateLabel.target=new dyvil.tools.asm.Label();
  dyvil.tools.asm.Label endLabel=this.endLabel.target=new dyvil.tools.asm.Label();
  Variable var=this.variable;
  Variable stringVar=this.stringVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  int lineNumber=this.getLineNumber();
  dyvil.tools.asm.Label scopeLabel=new dyvil.tools.asm.Label();
  writer.writeLabel(scopeLabel);
  var.getValue().writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  writer.writeInsn(Opcodes.DUP);
  lengthVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.IFEQ,endLabel);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null,lineNumber);
  indexVar.writeGet(writer,null,lineNumber);
  writer.writeLineNumber(lineNumber);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeIINC(indexVar.getIndex(),1);
  indexVar.writeGet(writer,null,lineNumber);
  lengthVar.writeGet(writer,null,lineNumber);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
}",0.9964212678936604
84447,"@Override default boolean isGenericType(){
  return false;
}","@Override public default boolean isGenericType(){
  return false;
}",0.9448818897637796
84448,"public default int getTypecode(){
  return -1;
}",public int getTypecode();,0.684931506849315
84449,"public default boolean isPrimitive(){
  return false;
}",public boolean isPrimitive();,0.6904761904761905
84450,"@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  IClass iclass=getTupleClass(this.typeCount);
  for (int i=0; i < this.typeCount; i++) {
    ITypeVariable typeVar=iclass.getTypeVariable(i);
    IType concreteType=concrete.resolveType(typeVar);
    if (concreteType != null) {
      this.types[i].inferTypes(concreteType,typeContext);
    }
  }
}","@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  IClass iclass=getTupleClass(this.typeCount);
  for (int i=0; i < this.typeCount; i++) {
    ITypeVariable typeVar=iclass.getTypeVariable(i);
    IType concreteType=concrete.resolveTypeSafely(typeVar);
    if (concreteType != null) {
      this.types[i].inferTypes(concreteType,typeContext);
    }
  }
}",0.9920212765957448
84451,"@Override public IMethod getFunctionalMethod(){
  if (this.functionalMethod != null) {
    return this.functionalMethod;
  }
  for (int i=0; i < this.methodCount; i++) {
    IMethod m=this.methods[i];
    if (m.hasModifier(Modifiers.ABSTRACT)) {
      this.functionalMethod=m;
      return m;
    }
  }
  return null;
}","@Override public IMethod getFunctionalMethod(){
  if (this.functionalMethod != null) {
    return this.functionalMethod;
  }
  boolean found=false;
  IMethod match=null;
  for (int i=0; i < this.methodCount; i++) {
    IMethod m=this.methods[i];
    if (m.hasModifier(Modifiers.ABSTRACT)) {
      if (found) {
        return null;
      }
      found=true;
      match=m;
    }
  }
  return this.functionalMethod=match;
}",0.7162162162162162
84452,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.value.checkTypes(markers,new CombiningContext(this,context));
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.method == null) {
    IType type=this.getType();
    this.withType(type,type,markers,context);
  }
  this.value.checkTypes(markers,new CombiningContext(this,context));
}",0.7193877551020408
84453,"@Override public float getVarargsTypeMatch(int index,IParameter param){
  if (index == this.size) {
    return DEFAULT_MATCH;
  }
  if (index > this.size) {
    return 0;
  }
  IValue argument=this.values[index];
  IType type=param.getType();
  float m=argument.getTypeMatch(type);
  if (m != 0) {
    return m;
  }
  return argument.getTypeMatch(type.getElementType());
}","@Override public float getVarargsTypeMatch(int index,IParameter param){
  if (index == this.size) {
    return DEFAULT_MATCH;
  }
  if (index > this.size) {
    return 0;
  }
  IValue argument=this.values[index];
  IType type=param.getType();
  float m=argument.getTypeMatch(type);
  if (m > 0F) {
    return m;
  }
  return argument.getTypeMatch(type.getElementType());
}",0.9946236559139784
84454,"public default int getSubClassDistance(IType subtype){
  if (subtype.isArrayType()) {
    IClass iclass=this.getTheClass();
    if (iclass == Types.OBJECT_CLASS) {
      return 3;
    }
    return 0;
  }
  return subtype.getTheClass().getSuperTypeDistance(this);
}","public default int getSubClassDistance(IType subtype){
  return subtype.getSuperTypeDistance(this);
}",0.5534246575342465
84455,"public default float getSubTypeDistance(IType subtype){
  if (subtype.isArrayType()) {
    IClass iclass=this.getTheClass();
    if (iclass == Types.OBJECT_CLASS) {
      return 3F;
    }
    return 0F;
  }
  return subtype.getTheClass().getSuperTypeDistance(this);
}","public default float getSubTypeDistance(IType subtype){
  return subtype.getSuperTypeDistance(this);
}",0.5528455284552846
84456,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  if (this.capturedFieldCount == 0) {
    if (this.value instanceof AbstractCall) {
      AbstractCall c=(AbstractCall)this.value;
      IMethod method=c.getMethod();
      if (this.checkCall(c.getValue(),c.getArguments(),method)) {
switch (method.getInvokeOpcode()) {
case Opcodes.INVOKEVIRTUAL:
          this.directInvokeOpcode=ClassFormat.H_INVOKEVIRTUAL;
        break;
case Opcodes.INVOKESTATIC:
      this.directInvokeOpcode=ClassFormat.H_INVOKESTATIC;
    break;
case Opcodes.INVOKEINTERFACE:
  this.directInvokeOpcode=ClassFormat.H_INVOKEINTERFACE;
break;
case Opcodes.INVOKESPECIAL:
this.directInvokeOpcode=ClassFormat.H_INVOKESPECIAL;
break;
}
this.name=method.getName().qualified;
this.owner=method.getTheClass().getInternalName();
this.lambdaDesc=method.getDescriptor();
return this;
}
}
 else if (this.value.getClass() == ConstructorCall.class) {
ConstructorCall c=(ConstructorCall)this.value;
IConstructor ctor=c.getConstructor();
if (this.checkCall(null,c.getArguments(),ctor)) {
this.directInvokeOpcode=ClassFormat.H_NEWINVOKESPECIAL;
this.name=""String_Node_Str"";
this.owner=ctor.getTheClass().getInternalName();
this.lambdaDesc=ctor.getDescriptor();
return this;
}
}
}
compilableList.addCompilable(this);
return this;
}",0.9709388971684052
84457,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (IContext.getVisibility(context,this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else {
      IType type=this.theClass.getType();
      instance=type.convertValue(instance,type,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (IContext.getVisibility(context,this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}",0.9585190263969832
84458,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else {
      IType type=this.theClass.getType();
      instance=type.convertValue(instance,type,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}",0.9590247206230952
84459,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=par.getType().convertValue(instance,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=this.theClass.getType().convertValue(instance,typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=par.getType().convertValue(instance,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else {
      instance=this.theClass.getType().convertValue(instance,typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9901260823332828
84460,"@Override public float getTypeMatch(IType type){
  return this.isType(type) ? 1 : 0;
}","@Override public float getTypeMatch(IType type){
  if (type.getTheClass() == Types.OBJECT_CLASS) {
    return 2;
  }
  return this.isType(type) ? 1 : 0;
}",0.7166666666666667
84461,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=par.getType().convertValue(instance,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else {
      instance=this.theClass.getType().convertValue(instance,typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    IValue argument=arguments.getFirstValue();
    arguments.setFirstValue(instance);
    instance=argument;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=par.getType().convertValue(instance,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
 else       if (instance.getType().getTheClass() != this.theClass) {
        markers.add(position,""String_Node_Str"",this.name.unqualified,this.theClass.getFullName());
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null || !instance.isPrimitive()) {
      instance=this.theClass.getType().convertValue(instance,typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9853524565151052
84462,"public static <E>ImmutableList<E> apply(E... elements){
  return new ArrayList(elements,true);
}","public static <E>ImmutableList<E> apply(int count,IntFunction<E> generator){
  Object[] elements=new Object[count];
  for (int i=0; i < count; i++) {
    elements[i]=generator.apply(i);
  }
  return new ArrayList(elements,count,true);
}",0.5
84463,"/** 
 * Returns an immutable list containing all of the given   {@code elements}. This method is primarily for use with <i>Array Expressions</i> in <i>Dyvil</i> and internally creates an  {@link dyvil.collection.immutable.ArrayList ArrayList} from the given{@code elements}.
 * @param elements the elements of the returned collection
 * @return an immutable list containing all of the given elements
 */
public static <E>ImmutableList<E> apply(E... elements){
  return ImmutableList.apply(elements);
}","public static <E>ImmutableList<E> apply(int count,IntFunction<E> generator){
  return ImmutableList.apply(count,generator);
}",0.268370607028754
84464,"/** 
 * @return the descriptor of the (synthetic) lambda callback method,including captured variables, parameter types and the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.capturedFieldCount; i++) {
    this.capturedFields[i].getActualType().appendExtendedName(buffer);
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}","/** 
 * @return the descriptor of the (synthetic) lambda callback method,including captured variables, parameter types and the return type.
 */
private String getLambdaDescriptor(){
  if (this.lambdaDesc != null) {
    return this.lambdaDesc;
  }
  StringBuilder buffer=new StringBuilder();
  buffer.append('(');
  for (int i=0; i < this.capturedFieldCount; i++) {
    this.capturedFields[i].getActualType().appendExtendedName(buffer);
  }
  for (int i=this.directInvokeOpcode != 0 && this.directInvokeOpcode != Opcodes.INVOKESTATIC ? 1 : 0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendExtendedName(buffer);
  }
  buffer.append(')');
  if (this.directInvokeOpcode == ClassFormat.H_NEWINVOKESPECIAL) {
    buffer.append('V');
  }
 else {
    this.returnType.appendExtendedName(buffer);
  }
  return this.lambdaDesc=buffer.toString();
}",0.9474327628361858
84465,"private boolean checkCall(IValue instance,IArguments arguments,IParameterized p){
  this.value=null;
  if (instance != null) {
    if (this.parameterCount <= 0) {
      return false;
    }
    if (isFieldAccess(instance,this.parameters[0])) {
      if (arguments.size() != this.parameterCount - 1) {
        return false;
      }
      for (int i=1; i < this.parameterCount; i++) {
        IValue v=arguments.getValue(i - 1,p.getParameter(i - 1));
        if (!isFieldAccess(v,this.parameters[i])) {
          return false;
        }
      }
    }
    this.value=instance;
    this.thisClass=instance.getType().getTheClass();
  }
  if (arguments.size() != this.parameterCount) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IValue v=arguments.getValue(i,p.getParameter(i));
    if (!isFieldAccess(v,this.parameters[i])) {
      return false;
    }
  }
  return true;
}","private boolean checkCall(IValue instance,IArguments arguments,IParameterized p){
  boolean receiver=false;
  if (instance != null) {
    if (instance.isPrimitive()) {
      return false;
    }
    if (this.parameterCount <= 0) {
      return false;
    }
    if (isFieldAccess(instance,this.parameters[0])) {
      if (arguments.size() != this.parameterCount - 1) {
        return false;
      }
      for (int i=1; i < this.parameterCount; i++) {
        IValue v=arguments.getValue(i - 1,p.getParameter(i - 1));
        if (!isFieldAccess(v,this.parameters[i])) {
          return false;
        }
      }
      this.value=null;
      return true;
    }
    receiver=true;
  }
  if (arguments.size() != this.parameterCount) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IValue v=arguments.getValue(i,p.getParameter(i));
    if (!isFieldAccess(v,this.parameters[i])) {
      return false;
    }
  }
  if (receiver) {
    if (instance.isPrimitive()) {
      return false;
    }
    this.value=instance;
    this.thisClass=instance.getType().getTheClass();
  }
 else {
    this.value=null;
  }
  return true;
}",0.6048109965635738
84466,"@Override public int getInvokeOpcode(){
  if ((modifiers & Modifiers.STATIC) != 0) {
    return Opcodes.INVOKESTATIC;
  }
  if ((modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    return Opcodes.INVOKESPECIAL;
  }
  if (this.theClass.isInterface() && (this.modifiers & Modifiers.ABSTRACT) != 0) {
    return Opcodes.INVOKEINTERFACE;
  }
  return Opcodes.INVOKEVIRTUAL;
}","@Override public int getInvokeOpcode(){
  if ((modifiers & Modifiers.STATIC) != 0) {
    return Opcodes.INVOKESTATIC;
  }
  if ((modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    return Opcodes.INVOKESPECIAL;
  }
  if (this.theClass.isInterface()) {
    return Opcodes.INVOKEINTERFACE;
  }
  return Opcodes.INVOKEVIRTUAL;
}",0.9352112676056338
84467,"private void inferTypes(MarkerList markers){
  if (!this.method.hasTypeVariables()) {
    for (int i=0; i < this.parameterCount; i++) {
      IParameter param=this.parameters[i];
      if (param.getType() == Types.UNKNOWN) {
        param.setType(this.method.getParameter(i).getType());
      }
    }
    this.returnType=this.method.getType();
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    IType parType=param.getType();
    if (parType != Types.UNKNOWN) {
      continue;
    }
    IType methodParamType=this.method.getParameter(i).getType();
    IType concreteType=methodParamType.getConcreteType(this.type).getParameterType();
    if (concreteType == methodParamType && concreteType.hasTypeVariables()) {
      markers.add(param.getPosition(),""String_Node_Str"",param.getName());
    }
    param.setType(concreteType);
  }
  this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
  return;
}","private void inferTypes(MarkerList markers){
  if (!this.method.hasTypeVariables()) {
    for (int i=0; i < this.parameterCount; i++) {
      IParameter param=this.parameters[i];
      if (param.getType() == Types.UNKNOWN) {
        param.setType(this.method.getParameter(i).getType());
      }
    }
    this.returnType=this.method.getType();
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    if (param.getType() != Types.UNKNOWN) {
      continue;
    }
    IType methodParamType=this.method.getParameter(i).getType();
    IType concreteType=methodParamType.getConcreteType(this.type).getParameterType();
    if (concreteType == Types.UNKNOWN) {
      markers.add(param.getPosition(),""String_Node_Str"",param.getName());
    }
    param.setType(concreteType);
  }
  this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
  return;
}",0.94006309148265
84468,"@Override public void checkTypes(MarkerList markers,IContext context){
  IClass iclass=this.type.getTheClass();
  if (iclass != null) {
    if (iclass.hasModifier(Modifiers.DEPRECATED)) {
      markers.add(this.position,""String_Node_Str"",iclass.getName());
    }
    if (context.getThisClass().getVisibility(iclass) == IContext.SEALED) {
      markers.add(this.position,""String_Node_Str"",iclass.getName());
    }
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IClass iclass=this.type.getTheClass();
  if (iclass != null) {
    if (iclass.hasModifier(Modifiers.DEPRECATED)) {
      markers.add(this.position,""String_Node_Str"",iclass.getName());
    }
    if (context.getThisClass().getVisibility(iclass) == IContext.INTERNAL) {
      markers.add(this.position,""String_Node_Str"",iclass.getName());
    }
  }
}",0.9904534606205252
84469,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.SEALED:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}",0.9967400162999184
84470,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.SEALED:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if (this.hasModifier(Modifiers.DEPRECATED)) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
return instance;
}",0.9967715899919288
84471,"@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IArguments arguments){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.theClass.getName());
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.SEALED:
    markers.add(position,""String_Node_Str"",this.theClass.getName());
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.theClass.getName());
break;
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}","@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IArguments arguments){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.theClass.getName());
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.theClass.getName());
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.theClass.getName());
break;
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}",0.9930555555555556
84472,"@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.SEALED:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
if ((this.modifiers & Modifiers.PREFIX) != 0) {
IValue value=arguments.getFirstValue();
this.checkMutating(markers,value != null ? value : instance);
}
 else if (instance != null) {
this.checkMutating(markers,instance);
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}","@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getThisClass().getVisibility(this)) {
case IContext.INTERNAL:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
if ((this.modifiers & Modifiers.PREFIX) != 0) {
IValue value=arguments.getFirstValue();
this.checkMutating(markers,value != null ? value : instance);
}
 else if (instance != null) {
this.checkMutating(markers,instance);
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}",0.995749202975558
84473,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  if (type.getTheClass() == Types.OBJECT_CLASS) {
    type=this.getType();
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    this.inferTypes(markers);
    IContext context1=new CombiningContext(this,context);
    this.value=this.value.resolve(markers,context1);
    IType valueType=this.value.getType();
    IValue value1=this.value.withType(this.returnType,this.returnType,markers,context1);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  if (type.getTheClass() == Types.OBJECT_CLASS) {
    type=this.getType();
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    this.inferTypes(markers);
    IContext context1=new CombiningContext(this,context);
    this.value=this.value.resolve(markers,context1);
    IType valueType=this.value.getType();
    IValue value1=this.value.withType(this.returnType,this.returnType,markers,context1);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.992553983618764
84474,"public static @infix boolean write(File file,byte[] bytes){
  try {
    if (!file.exists()) {
      file.createNewFile();
    }
    Files.write(file.toPath(),bytes);
    return true;
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return false;
  }
}","public static @infix boolean write(File file,byte[] bytes){
  File parent=file.getParentFile();
  if (!parent.exists()) {
    parent.mkdirs();
  }
  try {
    if (!file.exists()) {
      file.createNewFile();
    }
    Files.write(file.toPath(),bytes);
    return true;
  }
 catch (  IOException ex) {
    ex.printStackTrace();
    return false;
  }
}",0.8585365853658536
84475,"static void convertType(MethodVisitor mv,Class<?> arg,Class<?> target,Class<?> functional){
  if (arg.equals(target) && arg.equals(functional)) {
    return;
  }
  if (arg == Void.TYPE || target == Void.TYPE) {
    return;
  }
  if (arg.isPrimitive()) {
    Wrapper wArg=Wrapper.forPrimitiveType(arg);
    if (target.isPrimitive()) {
      widen(mv,wArg,Wrapper.forPrimitiveType(target));
    }
 else {
      String dTarget=Type.getDescriptor(target);
      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);
      if (wPrimTarget != null) {
        widen(mv,wArg,wPrimTarget);
        box(mv,wPrimTarget);
      }
 else {
        box(mv,wArg);
        cast(mv,wrapperName(wArg),dTarget);
      }
    }
  }
 else {
    String dArg=Type.getDescriptor(arg);
    String dSrc;
    if (functional.isPrimitive()) {
      dSrc=dArg;
    }
 else {
      dSrc=Type.getDescriptor(functional);
      cast(mv,dArg,dSrc);
    }
    String dTarget=Type.getDescriptor(target);
    if (target.isPrimitive()) {
      Wrapper wTarget=toWrapper(dTarget);
      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);
      if (wps != null) {
        if (wps.isSigned() || wps.isFloating()) {
          unbox(mv,wrapperName(wps),wTarget);
        }
 else {
          unbox(mv,wrapperName(wps),wps);
          widen(mv,wps,wTarget);
        }
      }
 else {
        String intermediate;
        if (wTarget.isSigned() || wTarget.isFloating()) {
          intermediate=DYVIL_LANG_NUMBER;
        }
 else {
          intermediate=wrapperName(wTarget);
        }
        cast(mv,dSrc,intermediate);
        unbox(mv,intermediate,wTarget);
      }
    }
 else {
      cast(mv,dSrc,dTarget);
    }
  }
}","static void convertType(MethodVisitor mv,Class<?> arg,Class<?> target,Class<?> functional){
  if (arg.equals(target) && arg.equals(functional)) {
    return;
  }
  if (arg == Void.TYPE || target == Void.TYPE) {
    return;
  }
  if (arg.isPrimitive()) {
    Wrapper wArg=Wrapper.forPrimitiveType(arg);
    if (target.isPrimitive()) {
      widen(mv,wArg,Wrapper.forPrimitiveType(target));
    }
 else {
      String dTarget=Type.getDescriptor(target);
      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);
      if (wPrimTarget != null) {
        widen(mv,wArg,wPrimTarget);
        box(mv,wPrimTarget);
      }
 else {
        box(mv,wArg);
        cast(mv,wrapperName(wArg),dTarget);
      }
    }
  }
 else {
    String dArg=Type.getDescriptor(arg);
    String dSrc;
    if (functional.isPrimitive()) {
      dSrc=dArg;
    }
 else {
      dSrc=Type.getDescriptor(functional);
      cast(mv,dArg,dSrc);
    }
    String dTarget=Type.getDescriptor(target);
    if (target.isPrimitive()) {
      Wrapper wTarget=toWrapper(dTarget);
      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);
      if (wps != null) {
        if (wps.isSigned() || wps.isFloating()) {
          unbox(mv,wrapperName(wps),wTarget);
        }
 else {
          unbox(mv,wrapperName(wps),wps);
          widen(mv,wps,wTarget);
        }
      }
 else {
        String intermediate=wrapperName(wTarget);
        cast(mv,dSrc,intermediate);
        unbox(mv,intermediate,wTarget);
      }
    }
 else {
      cast(mv,dSrc,dTarget);
    }
  }
}",0.864375
84476,"static void unbox(MethodVisitor mv,String sname,Wrapper wt){
  if (sname == DYVIL_LANG_NUMBER) {
    mv.visitMethodInsn(Opcodes.INVOKEINTERFACE,sname,unboxMethod(wt),unboxingDescriptor(wt),true);
    return;
  }
  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,sname,unboxMethod(wt),unboxingDescriptor(wt),false);
}","static void unbox(MethodVisitor mv,String sname,Wrapper wt){
  mv.visitMethodInsn(Opcodes.INVOKESTATIC,sname,NAME_UNBOX_METHOD,unboxingDescriptor(wt),false);
}",0.5982905982905983
84477,"private static String unboxingDescriptor(Wrapper w){
  return ""String_Node_Str"" + w.basicTypeChar();
}","private static String unboxingDescriptor(Wrapper w){
  return ""String_Node_Str"" + w.wrapperSimpleName() + ""String_Node_Str""+ w.basicTypeChar();
}",0.8259109311740891
84478,"private static String boxingDescriptor(Wrapper w){
  return String.format(""String_Node_Str"",w.basicTypeChar(),wrapperName(w));
}","private static String boxingDescriptor(Wrapper w){
  return ""String_Node_Str"" + w.basicTypeChar() + ""String_Node_Str""+ w.wrapperSimpleName()+ ""String_Node_Str"";
}",0.7586206896551724
84479,"@Override public IDataMember capture(IVariable variable){
  IDataMember member=this.context2.capture(variable);
  if (member == null) {
    return this.context1.capture(variable);
  }
  if (member instanceof IVariable) {
    return this.context1.capture((IVariable)member);
  }
  return member;
}","@Override public IDataMember capture(IVariable variable){
  return this.context1.capture(variable);
}",0.5088161209068011
84480,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=parType.convertValue(instance,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return null;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      parType=par.getType().getConcreteType(typeContext);
      IValue instance1=instance.withType(parType,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + parType);
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=instance.withType(this.theClass.getType().getConcreteType(typeContext),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=parType.convertValue(instance,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return null;
  }
  if (instance != null) {
    int mod=this.modifiers & Modifiers.INFIX;
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      IValue instance1=par.getType().convertValue(instance,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + par.getType());
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      if (!instance.getType().getTheClass().isObject()) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=this.theClass.getType().convertValue(instance,typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,this.theClass.getType(),context,markers);
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.911255710923439
84481,"@Override public IValue convertValue(IValue value,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.parameterCount != 0 || IType.super.isSuperTypeOf(value.getType())) {
    return value.withType(this,typeContext,markers,context);
  }
  IValue value1=value.withType(this.returnType,typeContext,markers,context);
  if (value1 != null) {
    LambdaExpression le=new LambdaExpression(value1.getPosition(),null,0);
    le.setMethod(this.getFunctionalMethod());
    le.setReturnType(this.returnType);
    le.setValue(value1);
    le.setType(this);
    return le;
  }
  return null;
}","@Override public IValue convertValue(IValue value,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.parameterCount != 0 || IType.super.isSuperTypeOf(value.getType())) {
    return value.withType(this,typeContext,markers,context);
  }
  IValue value1=value.withType(this.returnType.getConcreteType(typeContext),typeContext,markers,context);
  if (value1 != null) {
    LambdaExpression le=new LambdaExpression(value1.getPosition(),null,0);
    le.setMethod(this.getFunctionalMethod());
    le.setReturnType(this.returnType);
    le.setValue(value1);
    le.setType(this);
    return le;
  }
  return null;
}",0.9764419171405362
84482,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(pm.newExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=END;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.AT) {
if (token.next().type() != Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if (type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.setArguments(list);
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.getArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue(),args);
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.setArguments(args);
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,args);
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.dotless) {
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
pm.report(new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str""));
return;
case Operator.INFIX_RIGHT:
}
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
IToken prev=token.prev();
if (prev != null && ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
SingleArgument sa=new SingleArgument();
ApplyMethodCall call=new ApplyMethodCall(token.raw(),this.value,sa);
this.value=call;
this.mode=END;
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (this.mode == END) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(pm.newExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=END;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.AT) {
if (token.next().type() != Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if (type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setCondition(v)));
return;
}
case PATTERN_END:
if (type == Symbols.COLON || type == Symbols.ARROW_OPERATOR) {
this.mode=END;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser(v -> ((ICase)this.value).setAction(v)));
}
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case LIST_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
this.field.setValue(this.value);
pm.popParser();
return;
}
this.field.setValue(this.value);
pm.popParser(true);
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.setArguments(list);
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.setArguments(sa);
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
this.mode=END;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
pm.skip();
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.setArguments(this.getArguments(pm,next.next()));
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue(),args);
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.setArguments(args);
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition(),this.value,args);
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
this.mode=ACCESS_2;
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.dotless) {
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
pm.report(new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str""));
return;
case Operator.INFIX_RIGHT:
}
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
IToken prev=token.prev();
if (prev != null && ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
SingleArgument sa=new SingleArgument();
ApplyMethodCall call=new ApplyMethodCall(token.raw(),this.value,sa);
this.value=call;
this.mode=END;
ExpressionParser ep=(ExpressionParser)pm.newExpressionParser(sa);
ep.operator=Operators.DEFAULT;
pm.pushParser(ep,true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str"" + token));
return;
}",0.9944769874476987
84483,"@Override public void setHeader(IDyvilHeader unit){
  this.unit=unit;
}","@Override public void setHeader(IDyvilHeader unit){
  this.unit=unit;
  if (this.name != null) {
    this.internalName=unit.getInternalName(this.name);
    this.fullName=unit.getFullName(this.name);
  }
}",0.5163636363636364
84484,"public static <T>void prettyPrint(T value,Class<T> type,StringBuilder builder,boolean fieldNames){
  Field[] fields=type.getFields();
  builder.append(type.getName());
  builder.append('(');
  for (  Field f : fields) {
    if (fieldNames) {
      builder.append(f.getName()).append(""String_Node_Str"");
    }
    try {
      f.setAccessible(true);
      builder.append(f.get(value));
    }
 catch (    IllegalArgumentException|IllegalAccessException ex) {
      ex.printStackTrace();
    }
  }
  builder.append(')');
}","public static <T>void prettyPrint(T value,Class<T> type,StringBuilder builder,boolean fieldNames){
  Field[] fields=type.getFields();
  builder.append(type.getName());
  builder.append('(');
  int count=0;
  for (  Field f : fields) {
    if ((f.getModifiers() & Modifiers.STATIC) != 0) {
      continue;
    }
    if (count++ > 0) {
      builder.append(""String_Node_Str"");
    }
    if (fieldNames) {
      builder.append(f.getName()).append(""String_Node_Str"");
    }
    try {
      f.setAccessible(true);
      builder.append(f.get(value));
    }
 catch (    IllegalArgumentException|IllegalAccessException ex) {
      ex.printStackTrace();
      builder.append(""String_Node_Str"");
    }
  }
  builder.append(')');
}",0.777059773828756
84485,"@Override public String getFullName(Name name){
  return name.qualified;
}","@Override public String getFullName(Name name){
  return ""String_Node_Str"" + name.qualified;
}",0.8809523809523809
84486,"@Override public void addClass(IClass iclass){
  iclass.resolveTypes(markers,this);
  iclass.resolve(markers,this);
  iclass.checkTypes(markers,this);
  iclass.check(markers,this);
  if (reportErrors(markers)) {
    return;
  }
  iclass.foldConstants();
  iclass.cleanup(this,this);
  REPLContext.compileClass(iclass);
  classes.put(iclass.getName(),iclass);
  System.out.println(""String_Node_Str"" + iclass.getName());
}","@Override public void addClass(IClass iclass){
  iclass.setHeader(this);
  iclass.resolveTypes(markers,this);
  iclass.resolve(markers,this);
  iclass.checkTypes(markers,this);
  iclass.check(markers,this);
  if (reportErrors(markers)) {
    return;
  }
  iclass.foldConstants();
  iclass.cleanup(this,this);
  REPLContext.compileClass(iclass);
  classes.put(iclass.getName(),iclass);
  System.out.println(""String_Node_Str"" + iclass.getName());
}",0.9699769053117784
84487,"@Override public String getInternalName(Name name){
  return name.qualified;
}","@Override public String getInternalName(Name name){
  return ""String_Node_Str"" + name.qualified;
}",0.8863636363636364
84488,"public static Class compile(IClass iclass){
  try {
    ClassWriter cw=new ClassWriter(DyvilCompiler.asmVersion);
    iclass.write(cw);
    cw.visitEnd();
    byte[] bytes=cw.toByteArray();
    return loadClass(iclass.getName().qualified,bytes);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return null;
  }
}","public static Class compile(IClass iclass){
  try {
    ClassWriter cw=new ClassWriter(DyvilCompiler.asmVersion);
    iclass.write(cw);
    cw.visitEnd();
    byte[] bytes=cw.toByteArray();
    return loadClass(iclass.getFullName(),bytes);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    return null;
  }
}",0.9780564263322884
84489,"public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  this.syntaxErrors=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return !this.syntaxErrors;
}","public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  this.syntaxErrors=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null || (this.syntaxErrors && this.markers == null)) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return !this.syntaxErrors;
}",0.981999234009958
84490,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.type=value1.getType();
    return this;
  }
  if (value1 == null && !prevType.isSuperClassOf(this.type)) {
    markers.add(this.position,""String_Node_Str"",prevType,this.type);
    return this;
  }
  if (!this.typeHint && this.type.equals(prevType)) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IType prevType=this.value.getType();
  IValue value1=this.value.withType(this.type,this.type,markers,context);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.type=value1.getType();
    return this;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (primitiveType) {
    if (!primitiveValue) {
      markers.add(this.position,""String_Node_Str"");
    }
  }
 else   if (primitiveValue) {
    markers.add(this.position,""String_Node_Str"");
  }
  if (value1 == null && !(primitiveType && primitiveValue) && !prevType.isSuperClassOf(this.type)) {
    markers.add(this.position,""String_Node_Str"",prevType,this.type);
    return this;
  }
  if (!this.typeHint && this.type.equals(prevType)) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  return this;
}",0.7000993048659384
84491,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.value.checkTypes(markers,context);
  if (this.typeHint) {
    return;
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (primitiveType) {
    if (!primitiveValue) {
      markers.add(this.position,""String_Node_Str"");
    }
  }
 else   if (primitiveValue) {
    markers.add(this.position,""String_Node_Str"");
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.value.checkTypes(markers,context);
}",0.4049733570159858
84492,"protected IValue resolveFieldAccess(MarkerList markers,IContext context){
  if (!ICall.privateAccess(context,this.instance)) {
    IMethod method=ICall.resolveMethod(context,this.instance,this.name,EmptyArguments.INSTANCE);
    if (method != null) {
      AbstractCall mc=this.toMethodCall(method);
      mc.checkArguments(markers,context);
      return mc;
    }
  }
  IDataMember field=ICall.resolveField(context,this.instance,this.name);
  if (field != null) {
    if (field.isEnumConstant()) {
      EnumValue enumValue=new EnumValue(field.getType(),this.name);
      return enumValue;
    }
    this.field=field;
    return this;
  }
  if (this.instance == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass != null) {
      return new ClassAccess(this.position,iclass.getType());
    }
  }
  return null;
}","protected IValue resolveFieldAccess(MarkerList markers,IContext context){
  if (ICall.privateAccess(context,this.instance)) {
    IValue value=this.resolveField(markers,context);
    if (value != null) {
      return value;
    }
    value=this.resolveMethod(markers,context);
    if (value != null) {
      return value;
    }
  }
 else {
    IValue value=this.resolveMethod(markers,context);
    if (value != null) {
      return value;
    }
    value=this.resolveField(markers,context);
    if (value != null) {
      return value;
    }
  }
  if (this.instance == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass != null) {
      return new ClassAccess(this.position,iclass.getType());
    }
  }
  return null;
}",0.2169278996865203
84493,"@Override public void tokenize(){
  this.tokens=Dlex.tokenIterator(this.inputFile.getCode());
  this.tokens.inferSemicolons();
}","@Override public void tokenize(){
  this.tokens=new Dlex(this.markers).tokenize(this.inputFile.getCode());
  this.tokens.inferSemicolons();
}",0.8996282527881041
84494,"private static IToken addToken(IToken prev,StringBuilder buf,int type,int line,int start){
  String s=buf.toString();
  int len=buf.length();
  buf.delete(0,len);
  return addToken(prev,s,type,line,start,len);
}","private IToken addToken(IToken prev,StringBuilder buf,int type,int line,int start){
  String s=buf.toString();
  int len=buf.length();
  buf.delete(0,len);
  return addToken(prev,s,type,line,start,len);
}",0.983132530120482
84495,"private Dlex(){
}","public Dlex(MarkerList markers){
  this.markers=markers;
}",0.32
84496,"public static IToken tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_DOTS:
        if (c == '.') {
          buf.append(c);
          continue;
        }
      addToken=true;
    break typeswitch;
case MOD_LETTER:
  if (c == '_' || c == '$') {
    buf.append(c);
    subtype=MOD_LETTER | MOD_SYMBOL;
    continue;
  }
if (isIdentifierPart(c)) {
  buf.append(c);
  continue;
}
addToken=true;
break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
subtype=MOD_LETTER | MOD_SYMBOL;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
switch (c) {
case '.':
case 'e':
type=FLOAT;
buf.append(c);
continue;
case 'l':
case 'L':
type=LONG;
addToken=true;
reparse=false;
break;
case '_':
continue;
case '-':
if (buf.length() == 0) {
buf.append('-');
continue;
}
addToken=true;
reparse=true;
break;
}
if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'e' || c == 'E') {
type=FLOAT;
buf.append('e');
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (c == 'o' || isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return first.next();
}","public TokenIterator tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_DOTS:
        if (c == '.') {
          buf.append(c);
          continue;
        }
      addToken=true;
    break typeswitch;
case MOD_LETTER:
  if (c == '_' || c == '$') {
    buf.append(c);
    subtype=MOD_LETTER | MOD_SYMBOL;
    continue;
  }
if (isIdentifierPart(c)) {
  buf.append(c);
  continue;
}
addToken=true;
break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
subtype=MOD_LETTER | MOD_SYMBOL;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
switch (c) {
case '.':
case 'e':
type=FLOAT;
buf.append(c);
continue;
case 'l':
case 'L':
type=LONG;
addToken=true;
reparse=false;
break;
case '_':
continue;
case '-':
if (buf.length() == 0) {
buf.append('-');
continue;
}
addToken=true;
reparse=true;
break;
}
if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'e' || c == 'E') {
type=FLOAT;
buf.append('e');
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (c == 'o' || isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return new TokenIterator(first.next());
}",0.9948717948717948
84497,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    this.inferTypes(markers);
    IContext context1=new CombiningContext(this,context);
    this.value=this.value.resolve(markers,context1);
    IType valueType=this.value.getType();
    IValue value1=this.value.withType(this.returnType,this.returnType,markers,context1);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  if (type.getTheClass() == Types.OBJECT_CLASS) {
    type=this.getType();
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    this.inferTypes(markers);
    IContext context1=new CombiningContext(this,context);
    this.value=this.value.resolve(markers,context1);
    IType valueType=this.value.getType();
    IValue value1=this.value.withType(this.returnType,this.returnType,markers,context1);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.9620253164556962
84498,"@Override public boolean isType(IType type){
  if (this.type != null && type.isSuperTypeOf(this.type)) {
    return true;
  }
  IClass iclass=type.getTheClass();
  if (iclass == null) {
    return false;
  }
  IMethod method=iclass.getFunctionalMethod();
  if (method == null) {
    return false;
  }
  if (this.parameterCount != method.parameterCount()) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter lambdaParam=this.parameters[i];
    IParameter param=method.getParameter(i);
    IType lambdaParamType=lambdaParam.getType();
    if (lambdaParamType == null) {
      continue;
    }
    if (!param.getType().equals(lambdaParamType)) {
      return false;
    }
  }
  return true;
}","@Override public boolean isType(IType type){
  if (this.type != null && type.isSuperTypeOf(this.type)) {
    return true;
  }
  IClass iclass=type.getTheClass();
  if (iclass == null) {
    return false;
  }
  if (iclass == Types.OBJECT_CLASS) {
    return true;
  }
  IMethod method=iclass.getFunctionalMethod();
  if (method == null) {
    return false;
  }
  if (this.parameterCount != method.parameterCount()) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter lambdaParam=this.parameters[i];
    IParameter param=method.getParameter(i);
    IType lambdaParamType=lambdaParam.getType();
    if (lambdaParamType == null) {
      continue;
    }
    if (!param.getType().equals(lambdaParamType)) {
      return false;
    }
  }
  return true;
}",0.9607973421926912
84499,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.value.withType(this.type,this.type,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.type.convertValue(this.value,this.type,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}",0.9763481551561022
84500,"public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return !this.syntaxErrors;
}","public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  this.markers=markers;
  this.syntaxErrors=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return !this.syntaxErrors;
}",0.9893575088687426
84501,"@Override public IValue foldConstants(){
  if (this.field != null && this.field.hasModifier(Modifiers.CONST)) {
    IValue v=this.field.getValue();
    return v != null && v.isConstant() ? v : this;
  }
  if (this.instance != null) {
    this.instance=this.instance.foldConstants();
  }
  return this;
}","@Override public IValue foldConstants(){
  if (this.field != null && this.field.hasModifier(Modifiers.CONST)) {
    IValue v=this.field.getValue();
    return v != null && v.isConstantOrField() ? v : this;
  }
  if (this.instance != null) {
    this.instance=this.instance.foldConstants();
  }
  return this;
}",0.9885807504078304
84502,"private static void visitValue(AnnotationVisitor visitor,String key,IValue value){
  int valueType=value.valueTag();
  if (valueType == IValue.ARRAY) {
    AnnotationVisitor arrayVisitor=visitor.visitArray(key);
    for (    IValue v : (IValueList)value) {
      visitValue(arrayVisitor,null,v);
    }
  }
 else   if (valueType == IValue.ENUM) {
    EnumValue enumValue=(EnumValue)value;
    visitor.visitEnum(key,enumValue.type.getExtendedName(),enumValue.name.qualified);
  }
 else   if (value.isConstant()) {
    visitor.visit(key,value.toObject());
  }
}","private static void visitValue(AnnotationVisitor visitor,String key,IValue value){
  int valueType=value.valueTag();
  if (valueType == IValue.ARRAY) {
    AnnotationVisitor arrayVisitor=visitor.visitArray(key);
    Array array=(Array)value;
    int count=array.valueCount();
    for (int i=0; i < count; i++) {
      visitValue(arrayVisitor,null,array.getValue(i));
    }
    arrayVisitor.visitEnd();
  }
 else   if (valueType == IValue.ENUM) {
    EnumValue enumValue=(EnumValue)value;
    visitor.visitEnum(key,enumValue.type.getExtendedName(),enumValue.name.qualified);
  }
 else   if (value.isConstant()) {
    visitor.visit(key,value.toObject());
  }
}",0.8634868421052632
84503,"private void write(AnnotationVisitor visitor){
  IClass iclass=this.type.getTheClass();
  int count=iclass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=iclass.getParameter(i);
    visitValue(visitor,param.getName().qualified,this.arguments.getValue(i,param));
  }
}","private void write(AnnotationVisitor visitor){
  IClass iclass=this.type.getTheClass();
  int count=iclass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=iclass.getParameter(i);
    visitValue(visitor,param.getName().qualified,this.arguments.getValue(i,param));
  }
  visitor.visitEnd();
}",0.9638157894736842
84504,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.value == null) {
    return type == Types.UNKNOWN || type == Types.VOID ? this : null;
  }
  IValue value1=this.value.withType(type,typeContext,markers,context);
  if (value1 == null) {
    return null;
  }
  this.value=value1;
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.VOID) {
    return this;
  }
  if (this.value == null) {
    return null;
  }
  IValue value1=this.value.withType(type,typeContext,markers,context);
  if (value1 == null) {
    return null;
  }
  this.value=value1;
  return this;
}",0.8055555555555556
84505,"@Override public boolean isType(IType type){
  return this.value == null ? type == Types.UNKNOWN || type == Types.VOID : this.value.isType(type);
}","@Override public boolean isType(IType type){
  if (type == Types.VOID) {
    return true;
  }
  return this.value != null && this.value.isType(type);
}",0.6644295302013423
84506,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.value.writeExpression(writer);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.writeStatement(writer);
}",0.9135802469135802
84507,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type != Types.VOID) {
    return null;
  }
  IValue action1=this.action.withType(Types.VOID,typeContext,markers,context);
  if (action1 == null) {
  }
 else {
    this.action=action1;
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type != Types.VOID) {
    return null;
  }
  if (this.action != null) {
    IValue action1=this.action.withType(Types.VOID,typeContext,markers,context);
    if (action1 == null) {
    }
 else {
      this.action=action1;
    }
  }
  return this;
}",0.9069423929098966
84508,"/** 
 * Creates a new   {@link ParserManager} with the given {@link Parser}{@code parser} as the current parser, and calls the parser's{@link Parser#begin(ParserManager) begin} method.
 * @see Parser#begin(ParserManager)
 * @param parser the parser
 */
public ParserManager(Parser parser,MarkerList markers){
  this.parser=parser;
  this.markers=markers;
}","public ParserManager(Parser parser,MarkerList markers){
  this.parser=parser;
  this.markers=markers;
}",0.4488017429193899
84509,"@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.consumer.setImport(this.theImport);
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA || this.mode == 0) {
    this.consumer.setImport(this.theImport);
    pm.popParser(true);
    return;
  }
switch (this.mode) {
case IMPORT:
switch (type) {
case Symbols.OPEN_CURLY_BRACKET:
{
        MultiImport mi=new MultiImport(token);
        mi.setParent(this.theImport);
        this.theImport=mi;
        if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
          pm.pushParser(new ImportListParser(mi));
          this.mode=MULTIIMPORT;
          return;
        }
        this.mode=0;
        pm.skip();
        return;
      }
case Symbols.WILDCARD:
{
      PackageImport pi=new PackageImport(token.raw());
      pi.setParent(this.theImport);
      this.theImport=pi;
      this.mode=0;
      return;
    }
case Keywords.ANNOTATION:
{
    SimpleImport si=new SimpleImport(token.raw(),annotation);
    si.setParent(this.theImport);
    this.theImport=si;
    this.mode=DOT_ALIAS;
    return;
  }
case Keywords.TYPE:
{
  SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
  si.setParent(this.theImport);
  this.theImport=si;
  this.mode=DOT_ALIAS;
  return;
}
case Tokens.IDENTIFIER:
case Tokens.SYMBOL_IDENTIFIER:
case Tokens.LETTER_IDENTIFIER:
case Tokens.DOT_IDENTIFIER:
{
SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
si.setParent(this.theImport);
this.theImport=si;
this.mode=DOT_ALIAS;
return;
}
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case DOT_ALIAS:
switch (type) {
case Symbols.DOT:
this.mode=IMPORT;
return;
case Symbols.ARROW_OPERATOR:
case Keywords.AS:
this.mode=0;
IToken next=token.next();
if (ParserUtil.isIdentifier(next.type())) {
this.theImport.setAlias(next.nameValue());
pm.skip();
return;
}
pm.report(new SyntaxError(next,""String_Node_Str""));
return;
case Symbols.CLOSE_CURLY_BRACKET:
this.consumer.setImport(this.theImport);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case MULTIIMPORT:
this.theImport.expandPosition(token);
this.consumer.setImport(this.theImport);
pm.popParser();
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
}
}","@Override public void parse(IParserManager pm,IToken token){
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.consumer.setImport(this.theImport);
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA || this.mode == 0) {
    this.consumer.setImport(this.theImport);
    pm.popParser(true);
    return;
  }
switch (this.mode) {
case IMPORT:
switch (type) {
case Symbols.OPEN_CURLY_BRACKET:
{
        MultiImport mi=new MultiImport(token);
        mi.setParent(this.theImport);
        this.theImport=mi;
        if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
          pm.pushParser(new ImportListParser(mi));
          this.mode=MULTIIMPORT;
          return;
        }
        this.mode=0;
        pm.skip();
        return;
      }
case Symbols.WILDCARD:
{
      PackageImport pi=new PackageImport(token.raw());
      pi.setParent(this.theImport);
      this.theImport=pi;
      this.mode=0;
      return;
    }
case Keywords.ANNOTATION:
{
    SimpleImport si=new SimpleImport(token.raw(),annotation);
    si.setParent(this.theImport);
    this.theImport=si;
    this.mode=DOT_ALIAS;
    return;
  }
case Keywords.TYPE:
{
  SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
  si.setParent(this.theImport);
  this.theImport=si;
  this.mode=DOT_ALIAS;
  return;
}
case Tokens.IDENTIFIER:
case Tokens.SYMBOL_IDENTIFIER:
case Tokens.LETTER_IDENTIFIER:
case Tokens.DOT_IDENTIFIER:
{
SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
si.setParent(this.theImport);
this.theImport=si;
this.mode=DOT_ALIAS;
return;
}
}
pm.popParser();
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case DOT_ALIAS:
switch (type) {
case Symbols.DOT:
this.mode=IMPORT;
return;
case Symbols.ARROW_OPERATOR:
case Keywords.AS:
this.mode=0;
IToken next=token.next();
if (ParserUtil.isIdentifier(next.type())) {
this.theImport.setAlias(next.nameValue());
pm.skip();
return;
}
pm.report(new SyntaxError(next,""String_Node_Str""));
return;
case Symbols.CLOSE_CURLY_BRACKET:
this.consumer.setImport(this.theImport);
pm.popParser(true);
return;
}
pm.report(new SyntaxError(token,""String_Node_Str""));
return;
case MULTIIMPORT:
this.theImport.expandPosition(token);
this.consumer.setImport(this.theImport);
pm.popParser();
if (type != Symbols.CLOSE_CURLY_BRACKET) {
pm.reparse();
pm.report(new SyntaxError(token,""String_Node_Str""));
}
return;
}
}",0.993689524610854
84510,"@Override public void report(SyntaxError error){
  this.pm.jump(this.firstToken);
  this.reset();
  this.pm.pushParser(this.pm.newExpressionParser(this));
  this.mode=SEPARATOR;
}","@Override public void report(SyntaxError error){
  this.pm.jump(this.firstToken);
  this.pm.pushParser(this.pm.newExpressionParser(this));
  this.reset();
  this.mode=SEPARATOR;
}",0.9106145251396648
84511,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    IParameter param=this.parameters[0];
    if (param.getType() == Types.UNKNOWN) {
      buffer.append('(');
      param.toString(prefix,buffer);
      buffer.append(')');
    }
 else {
      buffer.append(param.getName());
    }
    buffer.append(' ');
  }
 else   if (this.parameterCount > 1) {
    buffer.append('(');
    IParameter first=this.parameters[0];
    if (first.getType() == Types.UNKNOWN) {
      buffer.append(first.getName());
      for (int i=1; i < this.parameterCount; i++) {
        buffer.append(""String_Node_Str"").append(this.parameters[i].getName());
      }
    }
 else {
      Util.astToString(prefix,this.parameters,this.parameterCount,""String_Node_Str"",buffer);
    }
    buffer.append(""String_Node_Str"");
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.value.toString(prefix,buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    IParameter param=this.parameters[0];
    if (param.getType() != Types.UNKNOWN) {
      buffer.append('(');
      param.toString(prefix,buffer);
      buffer.append(')');
    }
 else {
      buffer.append(param.getName());
    }
    buffer.append(' ');
  }
 else   if (this.parameterCount > 1) {
    buffer.append('(');
    IParameter first=this.parameters[0];
    if (first.getType() == Types.UNKNOWN) {
      buffer.append(first.getName());
      for (int i=1; i < this.parameterCount; i++) {
        buffer.append(""String_Node_Str"").append(this.parameters[i].getName());
      }
    }
 else {
      Util.astToString(prefix,this.parameters,this.parameterCount,""String_Node_Str"",buffer);
    }
    buffer.append(""String_Node_Str"");
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.value.toString(prefix,buffer);
}",0.9989327641408752
84512,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(""String_Node_Str"");
  this.type.toString(prefix,buffer);
  buffer.append(']');
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(""String_Node_Str"");
  this.type.toString(prefix,buffer);
  buffer.append(')');
}",0.9939024390243902
84513,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(""String_Node_Str"");
  this.type.toString(prefix,buffer);
  buffer.append(']');
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(""String_Node_Str"");
  this.type.toString(prefix,buffer);
  buffer.append(')');
}",0.9939024390243902
84514,"@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  return super.getGenericData(genericData,instance,arguments);
}","@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.getGenericData(genericData,instance,arguments);
}",0.8401486988847584
84515,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
switch (this.mode) {
case START:
    this.firstToken=token;
  this.pm=pm;
this.mode=PARAMETERS;
IToken next=token.next();
int nextNextType=next.next().type();
if (nextNextType == Symbols.CLOSE_PARENTHESIS || nextNextType == Symbols.COMMA) {
this.mode=PARAMETER_NAME;
return;
}
this.parser=this.tryParser=new ParameterListParser(this);
return;
case PARAMETERS:
if (token.type() == Symbols.CLOSE_PARENTHESIS && this.tryParser.isInMode(ParameterListParser.SEPERATOR)) {
this.mode=ARROW;
return;
}
try {
this.pm=pm;
this.parser.parse(this,token);
}
 catch (SyntaxError error) {
pm.jump(this.firstToken);
pm.setParser(this);
this.mode=TUPLE;
}
return;
case PARAMETER_NAME:
if (!ParserUtil.isIdentifier(token.type())) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
this.mode=SEPARATOR;
this.addParameter(new MethodParameter(token.raw(),token.nameValue()));
return;
case SEPARATOR:
int type=token.type();
if (type == Symbols.CLOSE_PARENTHESIS) {
this.mode=ARROW;
return;
}
this.mode=PARAMETER_NAME;
if (token.type() != Symbols.COMMA) {
throw new SyntaxError(token,""String_Node_Str"");
}
return;
case TUPLE:
if (token.type() == Symbols.OPEN_PARENTHESIS) {
Tuple t=new Tuple(token);
this.value=t;
this.mode=TUPLE_END;
pm.pushParser(new ExpressionListParser(t));
return;
}
pm.popParser();
return;
case TUPLE_END:
pm.popParser();
if (token.type() == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
this.consumer.setValue(this.value);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case ARROW:
if (token.type() != Symbols.ARROW_OPERATOR) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
LambdaExpression le=new LambdaExpression(token.raw(),this.params,this.parameterCount);
pm.pushParser(pm.newExpressionParser(le));
this.value=le;
this.mode=END;
return;
case END:
pm.popParser(true);
this.consumer.setValue(this.value);
return;
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
switch (this.mode) {
case START:
    this.firstToken=token;
  this.pm=pm;
this.mode=PARAMETERS;
IToken next=token.next();
int nextNextType=next.next().type();
if (nextNextType == Symbols.CLOSE_PARENTHESIS || nextNextType == Symbols.COMMA) {
this.mode=PARAMETER_NAME;
return;
}
this.parser=this.tryParser=new ParameterListParser(this);
return;
case PARAMETERS:
if (token.type() == Symbols.CLOSE_PARENTHESIS && this.tryParser.isInMode(ParameterListParser.SEPERATOR)) {
this.mode=ARROW;
return;
}
try {
this.pm=pm;
this.parser.parse(this,token);
}
 catch (SyntaxError error) {
pm.jump(this.firstToken);
pm.setParser(this);
this.mode=TUPLE;
}
return;
case PARAMETER_NAME:
if (!ParserUtil.isIdentifier(token.type())) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
this.mode=SEPARATOR;
this.addParameter(new MethodParameter(token.raw(),token.nameValue()));
return;
case SEPARATOR:
int type=token.type();
if (type == Symbols.COMMA) {
this.mode=PARAMETER_NAME;
return;
}
if (type == Symbols.CLOSE_PARENTHESIS && token.next().type() == Symbols.ARROW_OPERATOR) {
this.mode=ARROW;
return;
}
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
case TUPLE:
if (token.type() == Symbols.OPEN_PARENTHESIS) {
Tuple t=new Tuple(token);
this.value=t;
this.mode=TUPLE_END;
pm.pushParser(new ExpressionListParser(t));
return;
}
pm.popParser();
return;
case TUPLE_END:
pm.popParser();
if (token.type() == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
this.consumer.setValue(this.value);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case ARROW:
if (token.type() != Symbols.ARROW_OPERATOR) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
LambdaExpression le=new LambdaExpression(token.raw(),this.params,this.parameterCount);
pm.pushParser(pm.newExpressionParser(le));
this.value=le;
this.mode=END;
return;
case END:
pm.popParser(true);
this.consumer.setValue(this.value);
return;
}
}",0.6273512963904423
84516,"@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  super.cleanup(context,compilableList);
  if (this.defaultValue != null) {
    compilableList.addCompilable(this);
    this.defaultValue=this.defaultValue.cleanup(context,compilableList);
  }
}","@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  super.cleanup(context,compilableList);
  if (this.defaultValue != null) {
    this.defaultValue=this.defaultValue.cleanup(context,compilableList);
  }
}",0.6833976833976834
84517,"@Override public IValue foldConstants(){
  this.value=this.value.foldConstants();
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].foldConstants();
  }
  return this;
}","@Override public IValue foldConstants(){
  if (this.value != null) {
    this.value=this.value.foldConstants();
  }
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].foldConstants();
  }
  return this;
}",0.7258883248730964
84518,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  IType type=this.value.getType();
  this.value=this.value.withType(type,type,markers,context);
  for (int i=0; i < this.caseCount; i++) {
    MatchCase c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPattern().getPosition(),""String_Node_Str"");
    }
    c.resolve(markers,type,context);
    if (c.isExhaustive()) {
      this.exhaustive=true;
    }
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  IType type;
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    type=this.value.getType();
    this.value=this.value.withType(type,type,markers,context);
  }
 else {
    type=Types.ANY;
    markers.add(this.position,""String_Node_Str"");
  }
  for (int i=0; i < this.caseCount; i++) {
    MatchCase c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPattern().getPosition(),""String_Node_Str"");
    }
    c.resolve(markers,type,context);
    if (c.isExhaustive()) {
      this.exhaustive=true;
    }
  }
  return this;
}",0.5636998254799301
84519,"@Override public void check(MarkerList markers,IContext context){
  this.value.check(markers,context);
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.value != null) {
    this.value.check(markers,context);
  }
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].check(markers,context);
  }
}",0.919047619047619
84520,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.value.checkTypes(markers,context);
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].checkTypes(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].checkTypes(markers,context);
  }
}",0.9244444444444444
84521,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  this.value=this.value.cleanup(context,compilableList);
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].cleanup(context,compilableList);
  }
  return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  if (this.value != null) {
    this.value=this.value.cleanup(context,compilableList);
  }
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].cleanup(context,compilableList);
  }
  return this;
}",0.901818181818182
84522,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.value.resolveTypes(markers,context);
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].resolveTypes(markers,context);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.value != null) {
    this.value.resolveTypes(markers,context);
  }
  for (int i=0; i < this.caseCount; i++) {
    this.cases[i].resolveTypes(markers,context);
  }
}",0.9264069264069263
84523,"private void write(MethodWriter writer,boolean expr) throws BytecodeException {
  int varIndex=writer.localCount();
  IType type=this.value.getType();
  this.value.writeExpression(writer);
  writer.writeVarInsn(type.getStoreOpcode(),varIndex);
  int localCount=writer.localCount();
  Object frameType=expr ? this.type.getFrameType() : null;
  Label elseLabel=new Label();
  Label endLabel=new Label();
  for (int i=0; i < this.caseCount; ) {
    MatchCase c=this.cases[i];
    IPattern pattern=c.pattern;
    IValue condition=c.condition;
    IValue value=c.action;
    pattern.writeInvJump(writer,varIndex,elseLabel);
    if (condition != null) {
      condition.writeInvJump(writer,elseLabel);
    }
    if (value != null) {
      if (expr) {
        value.writeExpression(writer);
        writer.getFrame().set(frameType);
      }
 else {
        value.writeStatement(writer);
      }
    }
 else     if (expr) {
      this.type.writeDefaultValue(writer);
    }
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
    writer.writeLabel(elseLabel);
    if (++i < this.caseCount) {
      elseLabel=new Label();
    }
  }
  writer.writeLabel(elseLabel);
  if (!this.exhaustive) {
    writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
    writer.writeInsn(Opcodes.DUP);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
    String desc=""String_Node_Str"" + (type.isPrimitive() ? type.getExtendedName() + ""String_Node_Str"" : ""String_Node_Str"");
    writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",desc,false);
    writer.writeInsn(Opcodes.ATHROW);
    writer.setHasReturn(false);
  }
  writer.writeLabel(endLabel);
  writer.resetLocals(varIndex);
}","private void write(MethodWriter writer,boolean expr) throws BytecodeException {
  int varIndex=writer.localCount();
  IType type=this.value.getType();
  this.value.writeExpression(writer);
  writer.writeVarInsn(type.getStoreOpcode(),varIndex);
  int localCount=writer.localCount();
  Object frameType=expr ? this.type.getFrameType() : null;
  Label elseLabel=new Label();
  Label endLabel=new Label();
  for (int i=0; i < this.caseCount; ) {
    MatchCase c=this.cases[i];
    IPattern pattern=c.pattern;
    IValue condition=c.condition;
    IValue value=c.action;
    pattern.writeInvJump(writer,varIndex,elseLabel);
    if (condition != null) {
      condition.writeInvJump(writer,elseLabel);
    }
    if (value != null) {
      if (expr) {
        value.writeExpression(writer);
        writer.getFrame().set(frameType);
      }
 else {
        value.writeStatement(writer);
      }
    }
 else     if (expr) {
      this.type.writeDefaultValue(writer);
    }
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
    writer.writeLabel(elseLabel);
    if (++i < this.caseCount) {
      elseLabel=new Label();
    }
  }
  writer.writeLabel(elseLabel);
  if (!this.exhaustive) {
    writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
    writer.writeInsn(Opcodes.DUP);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
    String desc=""String_Node_Str"" + (type.isPrimitive() ? type.getExtendedName() + ""String_Node_Str"" : ""String_Node_Str"");
    writer.writeLineNumber(this.getLineNumber());
    writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",desc,false);
    writer.writeInsn(Opcodes.ATHROW);
    writer.setHasReturn(false);
  }
  writer.writeLabel(endLabel);
  writer.resetLocals(varIndex);
}",0.98567335243553
84524,"@Override public void check(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.check(markers,new CombiningContext(this,context));
  }
  for (int i=0; i < this.catchBlockCount; i++) {
    CatchBlock block=this.catchBlocks[i];
    if (!Types.THROWABLE.isSuperTypeOf(block.type)) {
      Marker marker=markers.create(block.type.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + block.type);
    }
    block.action.check(markers,context);
  }
  if (this.finallyBlock != null) {
    this.finallyBlock.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.check(markers,new CombiningContext(this,context));
  }
  for (int i=0; i < this.catchBlockCount; i++) {
    CatchBlock block=this.catchBlocks[i];
    if (!Types.THROWABLE.isSuperTypeOf(block.type)) {
      Marker marker=markers.create(block.position,""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + block.type);
    }
    block.action.check(markers,context);
  }
  if (this.finallyBlock != null) {
    this.finallyBlock.check(markers,context);
  }
}",0.977469670710572
84525,"private static int getMode(char c,String code,int i){
switch (c) {
case '`':
    return SPECIAL_IDENTIFIER;
case '#':
  if (code.charAt(i + 1) == '[') {
    return GENERIC_CALL;
  }
return IDENTIFIER | MOD_SYMBOL;
case '""':
return STRING;
case '\'':
return CHAR;
case '/':
char n=code.charAt(i + 1);
if (n == '*') {
return BLOCK_COMMENT;
}
 else if (n == '/') {
return LINE_COMMENT;
}
 else {
return IDENTIFIER | MOD_SYMBOL;
}
case '@':
n=code.charAt(i + 1);
if (n == '""') {
return STRING_2;
}
return IDENTIFIER | MOD_SYMBOL;
case '0':
n=code.charAt(i + 1);
if (n == 'b') {
return INT | MOD_BIN;
}
 else if (n == 'x') {
return INT | MOD_HEX;
}
 else if (isDigit(n)) {
return INT | MOD_OCT;
}
return INT;
case '(':
return Symbols.OPEN_PARENTHESIS;
case ')':
return Symbols.CLOSE_PARENTHESIS;
case '[':
return Symbols.OPEN_SQUARE_BRACKET;
case ']':
return Symbols.CLOSE_SQUARE_BRACKET;
case '{':
return Symbols.OPEN_CURLY_BRACKET;
case '}':
return Symbols.CLOSE_CURLY_BRACKET;
case '.':
n=code.charAt(i + 1);
if (n == '.') {
return IDENTIFIER | MOD_DOTS;
}
return Symbols.DOT;
case ';':
return Symbols.SEMICOLON;
case ',':
return Symbols.COMMA;
case '_':
case '$':
return IDENTIFIER | MOD_SYMBOL | MOD_LETTER;
}
if (isDigit(c)) {
return INT;
}
 else if (isIdentifierSymbol(c)) {
return IDENTIFIER | MOD_SYMBOL;
}
 else if (isIdentifierPart(c)) {
return IDENTIFIER | MOD_LETTER;
}
return 0;
}","private static int getMode(char c,String code,int i){
switch (c) {
case '`':
    return SPECIAL_IDENTIFIER;
case '#':
  if (code.charAt(i + 1) == '[') {
    return GENERIC_CALL;
  }
return IDENTIFIER | MOD_SYMBOL;
case '""':
return STRING;
case '\'':
return CHAR;
case '/':
char n=code.charAt(i + 1);
if (n == '*') {
return BLOCK_COMMENT;
}
 else if (n == '/') {
return LINE_COMMENT;
}
 else {
return IDENTIFIER | MOD_SYMBOL;
}
case '@':
n=code.charAt(i + 1);
if (n == '""') {
return STRING_2;
}
return IDENTIFIER | MOD_SYMBOL;
case '0':
n=code.charAt(i + 1);
if (n == 'b') {
return INT | MOD_BIN;
}
 else if (n == 'x') {
return INT | MOD_HEX;
}
 else if (isDigit(n)) {
return INT | MOD_OCT;
}
return INT;
case '(':
return Symbols.OPEN_PARENTHESIS;
case ')':
return Symbols.CLOSE_PARENTHESIS;
case '[':
return Symbols.OPEN_SQUARE_BRACKET;
case ']':
return Symbols.CLOSE_SQUARE_BRACKET;
case '{':
return Symbols.OPEN_CURLY_BRACKET;
case '}':
return Symbols.CLOSE_CURLY_BRACKET;
case '.':
n=code.charAt(i + 1);
if (n == '.') {
return IDENTIFIER | MOD_DOTS;
}
return Symbols.DOT;
case ';':
return Symbols.SEMICOLON;
case ',':
return Symbols.COMMA;
case '_':
case '$':
return IDENTIFIER | MOD_SYMBOL | MOD_LETTER;
case '-':
if (isDigit(code.charAt(i + 1))) {
return INT;
}
return IDENTIFIER | MOD_SYMBOL;
}
if (isDigit(c)) {
return INT;
}
 else if (isIdentifierSymbol(c)) {
return IDENTIFIER | MOD_SYMBOL;
}
 else if (isIdentifierPart(c)) {
return IDENTIFIER | MOD_LETTER;
}
return 0;
}",0.968281631230394
84526,"public static IToken tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_DOTS:
        if (c == '.') {
          buf.append(c);
          continue;
        }
      addToken=true;
    break typeswitch;
case MOD_LETTER:
  if (c == '_' || c == '$') {
    buf.append(c);
    subtype=MOD_LETTER | MOD_SYMBOL;
    continue;
  }
if (isIdentifierPart(c)) {
  buf.append(c);
  continue;
}
addToken=true;
break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
subtype=MOD_LETTER | MOD_SYMBOL;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
if (c == '.') {
type=FLOAT;
buf.append('.');
}
 else if (c == 'l' || c == 'L') {
type=LONG;
addToken=true;
reparse=false;
}
 else if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return first.getNext();
}","public static IToken tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_DOTS:
        if (c == '.') {
          buf.append(c);
          continue;
        }
      addToken=true;
    break typeswitch;
case MOD_LETTER:
  if (c == '_' || c == '$') {
    buf.append(c);
    subtype=MOD_LETTER | MOD_SYMBOL;
    continue;
  }
if (isIdentifierPart(c)) {
  buf.append(c);
  continue;
}
addToken=true;
break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
subtype=MOD_LETTER | MOD_SYMBOL;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
if (c == '.') {
type=FLOAT;
buf.append('.');
}
 else if (c == 'l' || c == 'L') {
type=LONG;
addToken=true;
reparse=false;
}
 else if (c == '-' && buf.length() == 0) {
buf.append('-');
}
 else if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return first.getNext();
}",0.993253536452666
84527,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == ACTION) {
    pm.pushParser(pm.newExpressionParser(this),true);
    this.mode=CATCH;
    return;
  }
  int type=token.type();
  if (this.mode == CATCH) {
    if (type == Keywords.CATCH) {
      this.statement.addCatchBlock(this.catchBlock=new CatchBlock(token.raw()));
      this.mode=CATCH_OPEN;
      return;
    }
    if (type == Keywords.FINALLY) {
      pm.popParser();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      int next=token.next().type();
      if (next != Keywords.CATCH && next != Keywords.FINALLY) {
        pm.popParser(true);
      }
      return;
    }
    pm.popParser(true);
  }
  if (this.mode == CATCH_OPEN) {
    this.mode=CATCH_VAR;
    pm.pushParser(pm.newTypeParser(this.catchBlock));
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CATCH_VAR) {
    this.mode=CATCH_CLOSE;
    if (ParserUtil.isIdentifier(type)) {
      this.catchBlock.varName=token.nameValue();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CATCH_CLOSE) {
    this.mode=CATCH;
    pm.pushParser(pm.newExpressionParser(this.catchBlock));
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == ACTION) {
    pm.pushParser(pm.newExpressionParser(this),true);
    this.mode=CATCH;
    return;
  }
  int type=token.type();
  if (this.mode == CATCH) {
    if (type == Keywords.CATCH) {
      this.statement.addCatchBlock(this.catchBlock=new CatchBlock(token.raw()));
      this.mode=CATCH_OPEN;
      return;
    }
    if (type == Keywords.FINALLY) {
      pm.popParser();
      pm.pushParser(pm.newExpressionParser(this));
      this.mode=0;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      IToken next=token.getNext();
      if (next == null) {
        pm.popParser(true);
        return;
      }
      int nextType=token.next().type();
      if (nextType != Keywords.CATCH && nextType != Keywords.FINALLY) {
        pm.popParser(true);
      }
      return;
    }
    pm.popParser(true);
  }
  if (this.mode == CATCH_OPEN) {
    this.mode=CATCH_VAR;
    pm.pushParser(pm.newTypeParser(this.catchBlock));
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CATCH_VAR) {
    this.mode=CATCH_CLOSE;
    if (ParserUtil.isIdentifier(type)) {
      this.catchBlock.varName=token.nameValue();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CATCH_CLOSE) {
    this.mode=CATCH;
    pm.pushParser(pm.newExpressionParser(this.catchBlock));
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.9527786700931578
84528,"public static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  try {
    currentCode=reader.readLine();
    TokenIterator tokens=Dlex.tokenIterator(currentCode + ""String_Node_Str"");
    REPLContext.newClassName();
    if (parser.parse(tokens,new DyvilUnitParser(context))) {
      return;
    }
    if (parser.parse(tokens,new ClassBodyParser(context))) {
      return;
    }
    if (parser.parse(tokens,new ExpressionParser(context))) {
      return;
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}","public static synchronized void loop(){
  System.out.print(""String_Node_Str"");
  try {
    currentCode=reader.readLine();
    TokenIterator tokens=Dlex.tokenIterator(currentCode + ""String_Node_Str"");
    REPLContext.newClassName();
    if (parser.parse(null,tokens,new DyvilUnitParser(context))) {
      return;
    }
    if (parser.parse(null,tokens,new ClassBodyParser(context))) {
      return;
    }
    MarkerList markers=new MarkerList();
    parser.parse(markers,tokens,new ExpressionParser(context));
    StringBuilder buf=new StringBuilder();
    for (    Marker m : markers) {
      m.log(currentCode,buf);
    }
    System.out.println(buf.toString());
  }
 catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.8146380270485283
84529,"public boolean parse(TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    SyntaxError ex) {
      return false;
    }
catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return true;
}","public boolean parse(MarkerList markers,TokenIterator tokens,Parser parser){
  this.tokens=tokens;
  this.parser=parser;
  this.skip=0;
  this.reparse=false;
  IToken token=null, prev=null;
  tokens.reset();
  while (tokens.hasNext()) {
    token=tokens.next();
    token.setPrev(prev);
    prev=token;
  }
  if (prev == null) {
    return false;
  }
  int type=prev.type();
  if (!ParserUtil.isSeperator(type) && type != (Tokens.IDENTIFIER | Tokens.MOD_SYMBOL)) {
    IToken semicolon=new InferredSemicolon(prev.endLine(),prev.endIndex());
    semicolon.setPrev(prev);
    prev.setNext(semicolon);
  }
  tokens.reset();
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    SyntaxError ex) {
      if (markers == null) {
        return false;
      }
      markers.add(ex);
    }
catch (    Exception ex) {
      ex.printStackTrace();
      return false;
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.getName()+ ""String_Node_Str""+ this.parser.getMode());
    }
  }
  return true;
}",0.960185543100116
84530,"private static boolean isAdaptableTo(Class<?> fromType,Class<?> toType,boolean strict){
  if (fromType.equals(toType)) {
    return true;
  }
  if (fromType.isPrimitive()) {
    Wrapper wfrom=forPrimitiveType(fromType);
    if (toType.isPrimitive()) {
      Wrapper wto=forPrimitiveType(toType);
      return wto.isConvertibleFrom(wfrom);
    }
    return toType.isAssignableFrom(wfrom.wrapperType());
  }
  if (toType.isPrimitive()) {
    Wrapper wfrom;
    if (isWrapperType(fromType) && (wfrom=forWrapperType(fromType)).primitiveType().isPrimitive()) {
      Wrapper wto=forPrimitiveType(toType);
      return wto.isConvertibleFrom(wfrom);
    }
    return !strict;
  }
  return !strict || toType.isAssignableFrom(fromType);
}","private static boolean isAdaptableTo(Class<?> fromType,Class<?> toType,boolean strict){
  if (fromType.equals(toType)) {
    return true;
  }
  if (fromType.isPrimitive()) {
    Wrapper wfrom=Wrapper.forPrimitiveType(fromType);
    if (toType.isPrimitive()) {
      Wrapper wto=Wrapper.forPrimitiveType(toType);
      return wto.isConvertibleFrom(wfrom);
    }
    return toType.isAssignableFrom(wfrom.wrapperType());
  }
  if (toType.isPrimitive()) {
    Wrapper wfrom;
    if (Wrapper.isWrapperType(fromType) && (wfrom=Wrapper.forWrapperType(fromType)).primitiveType().isPrimitive()) {
      Wrapper wto=Wrapper.forPrimitiveType(toType);
      return wto.isConvertibleFrom(wfrom);
    }
    return !strict;
  }
  return !strict || toType.isAssignableFrom(fromType);
}",0.973297730307076
84531,"private void convertArgumentTypes(MethodType samType){
  int lvIndex=0;
  boolean samIncludesReceiver=AnonymousClassLMF.this.implIsInstanceMethod && AnonymousClassLMF.this.invokedType.parameterCount() == 0;
  int samReceiverLength=samIncludesReceiver ? 1 : 0;
  if (samIncludesReceiver) {
    Class<?> rcvrType=samType.parameterType(0);
    this.visitVarInsn(getLoadOpcode(rcvrType),lvIndex + 1);
    lvIndex+=getParameterSize(rcvrType);
    TypeConverter.convertType(this,rcvrType,AnonymousClassLMF.this.implDefiningClass,AnonymousClassLMF.this.instantiatedMethodType.parameterType(0));
  }
  int samParametersLength=samType.parameterCount();
  int argOffset=AnonymousClassLMF.this.implMethodType.parameterCount() - samParametersLength;
  for (int i=samReceiverLength; i < samParametersLength; i++) {
    Class<?> argType=samType.parameterType(i);
    this.visitVarInsn(getLoadOpcode(argType),lvIndex + 1);
    lvIndex+=getParameterSize(argType);
    TypeConverter.convertType(this,argType,AnonymousClassLMF.this.implMethodType.parameterType(argOffset + i),AnonymousClassLMF.this.instantiatedMethodType.parameterType(i));
  }
}","private void convertArgumentTypes(MethodType samType){
  int lvIndex=0;
  boolean samIncludesReceiver=AnonymousClassLMF.this.implIsInstanceMethod && AnonymousClassLMF.this.invokedType.parameterCount() == 0;
  int samReceiverLength=samIncludesReceiver ? 1 : 0;
  if (samIncludesReceiver) {
    Class<?> rcvrType=samType.parameterType(0);
    this.mv.visitVarInsn(getLoadOpcode(rcvrType),lvIndex + 1);
    lvIndex+=getParameterSize(rcvrType);
    TypeConverter.convertType(this.mv,rcvrType,AnonymousClassLMF.this.implDefiningClass,AnonymousClassLMF.this.instantiatedMethodType.parameterType(0));
  }
  int samParametersLength=samType.parameterCount();
  int argOffset=AnonymousClassLMF.this.implMethodType.parameterCount() - samParametersLength;
  for (int i=samReceiverLength; i < samParametersLength; i++) {
    Class<?> argType=samType.parameterType(i);
    this.mv.visitVarInsn(getLoadOpcode(argType),lvIndex + 1);
    lvIndex+=getParameterSize(argType);
    TypeConverter.convertType(this.mv,argType,AnonymousClassLMF.this.implMethodType.parameterType(argOffset + i),AnonymousClassLMF.this.instantiatedMethodType.parameterType(i));
  }
}",0.9947089947089948
84532,"public AnonymousClassLMF(MethodHandles.Lookup caller,MethodType invokedType,String samMethodName,MethodType samMethodType,MethodHandle implMethod,MethodType instantiatedMethodType,String toString) throws LambdaConversionException {
  super(caller,invokedType,samMethodName,samMethodType,implMethod,instantiatedMethodType);
  this.implMethodClassName=this.implDefiningClass.getName().replace('.','/');
  this.implMethodName=this.implInfo.getName();
  this.implMethodDesc=this.implMethodType.toMethodDescriptorString();
  this.implMethodReturnClass=this.implKind == MethodHandleInfo.REF_newInvokeSpecial ? this.implDefiningClass : this.implMethodType.returnType();
  this.constructorType=invokedType.changeReturnType(Void.TYPE);
  this.lambdaClassName=this.targetClass.getName().replace('.','/') + ""String_Node_Str"" + counter.incrementAndGet();
  this.cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  int parameterCount=invokedType.parameterCount();
  if (parameterCount > 0) {
    this.argNames=new String[parameterCount];
    this.argDescs=new String[parameterCount];
    for (int i=0; i < parameterCount; i++) {
      this.argNames[i]=""String_Node_Str"" + (i + 1);
      this.argDescs[i]=BytecodeDescriptor.unparse(invokedType.parameterType(i));
    }
  }
 else {
    this.argNames=this.argDescs=EMPTY_STRING_ARRAY;
  }
  this.toString=toString;
}","public AnonymousClassLMF(MethodHandles.Lookup caller,MethodType invokedType,String samMethodName,MethodType samMethodType,MethodHandle implMethod,MethodType instantiatedMethodType,String toString) throws LambdaConversionException {
  super(caller,invokedType,samMethodName,samMethodType,implMethod,instantiatedMethodType);
  this.implMethodClassName=this.implDefiningClass.getName().replace('.','/');
  this.implMethodName=this.implInfo.getName();
  this.implMethodDesc=this.implMethodType.toMethodDescriptorString();
  this.implMethodReturnClass=this.implKind == MethodHandleInfo.REF_newInvokeSpecial ? this.implDefiningClass : this.implMethodType.returnType();
  this.constructorType=invokedType.changeReturnType(Void.TYPE);
  this.lambdaClassName=this.targetClass.getName().replace('.','/') + ""String_Node_Str"" + counter.incrementAndGet();
  this.cw=new ClassWriter(ClassWriter.COMPUTE_MAXS);
  int parameterCount=invokedType.parameterCount();
  if (parameterCount > 0) {
    this.argNames=new String[parameterCount];
    this.argDescs=new String[parameterCount];
    for (int i=0; i < parameterCount; i++) {
      this.argNames[i]=""String_Node_Str"" + (i + 1);
      this.argDescs[i]=Type.getDescriptor(invokedType.parameterType(i));
    }
  }
 else {
    this.argNames=this.argDescs=EMPTY_STRING_ARRAY;
  }
  this.toString=toString;
}",0.9910581222056632
84533,"void generate(MethodType methodType){
  this.visitCode();
  if (AnonymousClassLMF.this.implKind == MethodHandleInfo.REF_newInvokeSpecial) {
    this.visitTypeInsn(NEW,AnonymousClassLMF.this.implMethodClassName);
    this.visitInsn(DUP);
  }
  for (int i=0; i < AnonymousClassLMF.this.argNames.length; i++) {
    this.visitVarInsn(ALOAD,0);
    this.visitFieldInsn(GETFIELD,AnonymousClassLMF.this.lambdaClassName,AnonymousClassLMF.this.argNames[i],AnonymousClassLMF.this.argDescs[i]);
  }
  this.convertArgumentTypes(methodType);
  this.visitMethodInsn(this.invocationOpcode(),AnonymousClassLMF.this.implMethodClassName,AnonymousClassLMF.this.implMethodName,AnonymousClassLMF.this.implMethodDesc,AnonymousClassLMF.this.implDefiningClass.isInterface());
  Class<?> samReturnClass=methodType.returnType();
  TypeConverter.convertType(this,AnonymousClassLMF.this.implMethodReturnClass,samReturnClass,samReturnClass);
  this.visitInsn(getReturnOpcode(samReturnClass));
  this.visitMaxs(-1,-1);
  this.visitEnd();
}","void generate(MethodType methodType){
  this.mv.visitCode();
  if (AnonymousClassLMF.this.implKind == MethodHandleInfo.REF_newInvokeSpecial) {
    this.mv.visitTypeInsn(NEW,AnonymousClassLMF.this.implMethodClassName);
    this.mv.visitInsn(DUP);
  }
  for (int i=0; i < AnonymousClassLMF.this.argNames.length; i++) {
    this.mv.visitVarInsn(ALOAD,0);
    this.mv.visitFieldInsn(GETFIELD,AnonymousClassLMF.this.lambdaClassName,AnonymousClassLMF.this.argNames[i],AnonymousClassLMF.this.argDescs[i]);
  }
  this.convertArgumentTypes(methodType);
  this.mv.visitMethodInsn(this.invocationOpcode(),AnonymousClassLMF.this.implMethodClassName,AnonymousClassLMF.this.implMethodName,AnonymousClassLMF.this.implMethodDesc,AnonymousClassLMF.this.implDefiningClass.isInterface());
  Class<?> samReturnClass=methodType.returnType();
  TypeConverter.convertType(this.mv,AnonymousClassLMF.this.implMethodReturnClass,samReturnClass,samReturnClass);
  this.mv.visitInsn(getReturnOpcode(samReturnClass));
  this.mv.visitMaxs(-1,-1);
  this.mv.visitEnd();
}",0.9853515625
84534,"ForwardingMethodGenerator(MethodVisitor mv){
  super(dyvil.tools.asm.Opcodes.ASM5,mv);
}","ForwardingMethodGenerator(MethodVisitor mv){
  this.mv=mv;
}",0.7432432432432432
84535,"static void convertType(MethodVisitor mv,Class<?> arg,Class<?> target,Class<?> functional){
  if (arg.equals(target) && arg.equals(functional)) {
    return;
  }
  if (arg == Void.TYPE || target == Void.TYPE) {
    return;
  }
  if (arg.isPrimitive()) {
    Wrapper wArg=Wrapper.forPrimitiveType(arg);
    if (target.isPrimitive()) {
      widen(mv,wArg,Wrapper.forPrimitiveType(target));
    }
 else {
      String dTarget=BytecodeDescriptor.unparse(target);
      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);
      if (wPrimTarget != null) {
        widen(mv,wArg,wPrimTarget);
        box(mv,wPrimTarget);
      }
 else {
        box(mv,wArg);
        cast(mv,wrapperName(wArg),dTarget);
      }
    }
  }
 else {
    String dArg=BytecodeDescriptor.unparse(arg);
    String dSrc;
    if (functional.isPrimitive()) {
      dSrc=dArg;
    }
 else {
      dSrc=BytecodeDescriptor.unparse(functional);
      cast(mv,dArg,dSrc);
    }
    String dTarget=BytecodeDescriptor.unparse(target);
    if (target.isPrimitive()) {
      Wrapper wTarget=toWrapper(dTarget);
      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);
      if (wps != null) {
        if (wps.isSigned() || wps.isFloating()) {
          unbox(mv,wrapperName(wps),wTarget);
        }
 else {
          unbox(mv,wrapperName(wps),wps);
          widen(mv,wps,wTarget);
        }
      }
 else {
        String intermediate;
        if (wTarget.isSigned() || wTarget.isFloating()) {
          intermediate=DYVIL_LANG_NUMBER;
        }
 else {
          intermediate=wrapperName(wTarget);
        }
        cast(mv,dSrc,intermediate);
        unbox(mv,intermediate,wTarget);
      }
    }
 else {
      cast(mv,dSrc,dTarget);
    }
  }
}","static void convertType(MethodVisitor mv,Class<?> arg,Class<?> target,Class<?> functional){
  if (arg.equals(target) && arg.equals(functional)) {
    return;
  }
  if (arg == Void.TYPE || target == Void.TYPE) {
    return;
  }
  if (arg.isPrimitive()) {
    Wrapper wArg=Wrapper.forPrimitiveType(arg);
    if (target.isPrimitive()) {
      widen(mv,wArg,Wrapper.forPrimitiveType(target));
    }
 else {
      String dTarget=Type.getDescriptor(target);
      Wrapper wPrimTarget=wrapperOrNullFromDescriptor(dTarget);
      if (wPrimTarget != null) {
        widen(mv,wArg,wPrimTarget);
        box(mv,wPrimTarget);
      }
 else {
        box(mv,wArg);
        cast(mv,wrapperName(wArg),dTarget);
      }
    }
  }
 else {
    String dArg=Type.getDescriptor(arg);
    String dSrc;
    if (functional.isPrimitive()) {
      dSrc=dArg;
    }
 else {
      dSrc=Type.getDescriptor(functional);
      cast(mv,dArg,dSrc);
    }
    String dTarget=Type.getDescriptor(target);
    if (target.isPrimitive()) {
      Wrapper wTarget=toWrapper(dTarget);
      Wrapper wps=wrapperOrNullFromDescriptor(dSrc);
      if (wps != null) {
        if (wps.isSigned() || wps.isFloating()) {
          unbox(mv,wrapperName(wps),wTarget);
        }
 else {
          unbox(mv,wrapperName(wps),wps);
          widen(mv,wps,wTarget);
        }
      }
 else {
        String intermediate;
        if (wTarget.isSigned() || wTarget.isFloating()) {
          intermediate=DYVIL_LANG_NUMBER;
        }
 else {
          intermediate=wrapperName(wTarget);
        }
        cast(mv,dSrc,intermediate);
        unbox(mv,intermediate,wTarget);
      }
    }
 else {
      cast(mv,dSrc,dTarget);
    }
  }
}",0.9739952718676124
84536,"public IType getElementType(){
  if (this.elementType != null) {
    return this.elementType;
  }
  int len=this.valueCount;
  if (len == 0) {
    this.elementType=Types.ANY;
    return this.requiredType=new ArrayType(Types.ANY);
  }
  IType t=this.values[0].getType();
  for (int i=1; i < len; i++) {
    IType t1=this.values[i].getType();
    t=Types.combine(t,t1);
    if (t == null) {
      t=Types.ANY;
      break;
    }
  }
  return this.elementType=t;
}","public IType getElementType(){
  if (this.elementType != null) {
    return this.elementType;
  }
  int len=this.valueCount;
  if (len == 0) {
    return this.elementType=Types.ANY;
  }
  IType t=this.values[0].getType();
  for (int i=1; i < len; i++) {
    IType t1=this.values[i].getType();
    t=Types.combine(t,t1);
    if (t == null) {
      t=Types.ANY;
      break;
    }
  }
  return this.elementType=t;
}",0.5537757437070938
84537,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(pm.newExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if (type == Symbols.COLON) {
throw new SyntaxError(token,""String_Node_Str"");
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(pm.newExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
throw new SyntaxError(token,""String_Node_Str"" + token);
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(pm.newExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(pm.newExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(pm.newExpressionParser(le));
return;
}
if (type == Symbols.COLON) {
throw new SyntaxError(token,""String_Node_Str"");
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(pm.newExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(pm.newExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(pm.newExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(pm.newTypeParser(io));
this.value=io;
return;
}
if (type == Keywords.MATCH) {
MatchExpression me=new MatchExpression(token.raw(),this.value);
pm.pushParser(new MatchExpressionParser(me));
this.value=me;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.dotless) {
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.HASH || type == Symbols.COLON) {
throw new SyntaxError(token,""String_Node_Str"" + token);
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(pm.newExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.9974041297935105
84538,"@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  IType elementType;
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    if (iclass.getAnnotation(Types.ARRAY_CONVERTIBLE) != null) {
      return new LiteralExpression(this).withType(arrayType,typeContext,markers,context);
    }
    if (arrayType.classEquals(Types.ITERABLE)) {
      return new LiteralExpression(this,getArrayToIterable()).withType(arrayType,typeContext,markers,context);
    }
 else     if (iclass != Types.OBJECT_CLASS) {
      return null;
    }
 else {
      elementType=this.getElementType();
    }
  }
 else {
    elementType=arrayType.getElementType();
  }
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}","@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  IType elementType;
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    if (iclass.getAnnotation(Types.ARRAY_CONVERTIBLE) != null) {
      return new LiteralExpression(this).withType(arrayType,typeContext,markers,context);
    }
    if (arrayType.classEquals(Types.ITERABLE)) {
      return new LiteralExpression(this,getArrayToIterable()).withType(arrayType,typeContext,markers,context);
    }
 else     if (iclass != Types.OBJECT_CLASS) {
      return null;
    }
 else {
      elementType=this.getElementType();
    }
  }
 else {
    elementType=arrayType.getElementType();
  }
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  if (arrayType.hasTypeVariables()) {
    this.getType();
    return this;
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}",0.971936056838366
84539,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.then == null) {
    return null;
  }
  IValue then1=this.then.withType(type,typeContext,markers,context);
  if (then1 == null) {
    return null;
  }
  this.then=then1;
  if (this.elseThen != null) {
    then1=this.elseThen.withType(type,typeContext,markers,context);
    if (then1 == null) {
      return null;
    }
    this.elseThen=then1;
  }
  this.commonType=type;
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (this.then == null) {
    return null;
  }
  IValue then1=this.then.withType(type,typeContext,markers,context);
  if (then1 == null) {
    return null;
  }
  this.then=then1;
  if (this.elseThen != null) {
    then1=this.elseThen.withType(type,typeContext,markers,context);
    if (then1 == null) {
      return null;
    }
    this.elseThen=then1;
    this.commonType=Types.combine(this.then.getType(),this.elseThen.getType());
    return this;
  }
  this.commonType=this.then.getType();
  return this;
}",0.8948306595365418
84540,"@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  if (this.condition != null) {
    this.condition=this.condition.cleanup(context,compilableList);
  }
  if (this.then != null) {
    this.then=this.then.cleanup(context,compilableList);
  }
  if (this.elseThen != null) {
    this.elseThen=this.elseThen.cleanup(context,compilableList);
  }
  return this;
}","@Override public IValue cleanup(IContext context,IClassCompilableList compilableList){
  if (this.condition != null) {
    this.condition=this.condition.cleanup(context,compilableList);
  }
  if (this.then != null) {
    this.then=this.then.cleanup(context,compilableList);
  }
  if (this.elseThen != null) {
    this.elseThen=this.elseThen.cleanup(context,compilableList);
  }
  if ((this.condition.valueTag() == BOOLEAN)) {
    return ((BooleanValue)this.condition).value ? this.then : this.elseThen;
  }
  return this;
}",0.8505997818974919
84541,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.VOID || type == Types.UNKNOWN) {
    this.requiredType=Types.VOID;
    return this;
  }
  if (this.valueCount > 0) {
    IValue v=this.values[this.valueCount - 1].withType(type,typeContext,markers,context);
    if (v != null) {
      this.values[this.valueCount - 1]=v;
      this.requiredType=type;
      return this;
    }
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.VOID) {
    this.requiredType=Types.VOID;
    return this;
  }
  if (this.valueCount > 0) {
    IValue v=this.values[this.valueCount - 1].withType(type,typeContext,markers,context);
    if (v != null) {
      this.values[this.valueCount - 1]=v;
      this.requiredType=v.getType();
      return this;
    }
  }
  return null;
}",0.956803455723542
84542,"public static IType combine(IType type1,IType type2){
  if (type1.equals(type2)) {
    return type1;
  }
  Set<IType> types1=superTypes(type1);
  Set<IType> types2=superTypes(type2);
  for (  IType t1 : types1) {
    IClass class1=t1.getTheClass();
    if (class1 == Types.OBJECT_CLASS) {
      continue;
    }
    for (    IType t2 : types2) {
      if (class1 == t2.getTheClass()) {
        return new ClassType(class1);
      }
    }
  }
  return Types.ANY;
}","public static IType combine(IType type1,IType type2){
  if (type1.equals(type2)) {
    return type1;
  }
  if (type1.typeTag() == IType.NULL) {
    return type2.getReferenceType();
  }
  if (type2.typeTag() == IType.NULL) {
    return type1.getReferenceType();
  }
  Set<IType> types1=superTypes(type1);
  Set<IType> types2=superTypes(type2);
  for (  IType t1 : types1) {
    IClass class1=t1.getTheClass();
    if (class1 == Types.OBJECT_CLASS) {
      continue;
    }
    for (    IType t2 : types2) {
      if (class1 == t2.getTheClass()) {
        return new ClassType(class1);
      }
    }
  }
  return Types.ANY;
}",0.8523985239852399
84543,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
switch (this.mode) {
case START:
    this.firstToken=token;
  this.pm=pm;
this.mode=PARAMETERS;
IToken next=token.next();
int nextNextType=next.next().type();
if (nextNextType == Symbols.CLOSE_PARENTHESIS || nextNextType == Symbols.COMMA) {
this.mode=PARAMETER_NAME;
return;
}
this.parser=this.tryParser=new ParameterListParser(this);
return;
case PARAMETERS:
if (token.type() == Symbols.CLOSE_PARENTHESIS && this.tryParser.isInMode(ParameterListParser.SEPERATOR)) {
this.mode=ARROW;
return;
}
try {
this.pm=pm;
this.parser.parse(this,token);
}
 catch (SyntaxError error) {
pm.jump(this.firstToken);
pm.setParser(this);
this.mode=TUPLE;
}
return;
case PARAMETER_NAME:
if (!ParserUtil.isIdentifier(token.type())) {
throw new SyntaxError(token,""String_Node_Str"");
}
this.mode=SEPARATOR;
this.addParameter(new MethodParameter(token.raw(),token.nameValue()));
return;
case SEPARATOR:
int type=token.type();
if (type == Symbols.CLOSE_PARENTHESIS) {
this.mode=ARROW;
return;
}
this.mode=PARAMETER_NAME;
if (token.type() != Symbols.COMMA) {
throw new SyntaxError(token,""String_Node_Str"");
}
return;
case TUPLE:
if (token.type() == Symbols.OPEN_PARENTHESIS) {
Tuple t=new Tuple(token);
this.value=t;
this.mode=TUPLE_END;
pm.pushParser(new ExpressionListParser(t));
return;
}
pm.popParser();
return;
case TUPLE_END:
pm.popParser();
if (token.type() == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
this.consumer.setValue(this.value);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case ARROW:
if (token.type() != Symbols.ARROW_OPERATOR) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
LambdaExpression le=new LambdaExpression(token.raw(),this.params,this.parameterCount);
pm.pushParser(pm.newExpressionParser(le));
this.value=le;
this.mode=END;
return;
case END:
pm.popParser(true);
this.consumer.setValue(this.value);
return;
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
switch (this.mode) {
case START:
    this.firstToken=token;
  this.pm=pm;
this.mode=PARAMETERS;
IToken next=token.next();
int nextNextType=next.next().type();
if (nextNextType == Symbols.CLOSE_PARENTHESIS || nextNextType == Symbols.COMMA) {
this.mode=PARAMETER_NAME;
return;
}
this.parser=this.tryParser=new ParameterListParser(this);
return;
case PARAMETERS:
if (token.type() == Symbols.CLOSE_PARENTHESIS && this.tryParser.isInMode(ParameterListParser.SEPERATOR)) {
this.mode=ARROW;
return;
}
try {
this.pm=pm;
this.parser.parse(this,token);
}
 catch (SyntaxError error) {
pm.jump(this.firstToken);
pm.setParser(this);
this.mode=TUPLE;
}
return;
case PARAMETER_NAME:
if (!ParserUtil.isIdentifier(token.type())) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
this.mode=SEPARATOR;
this.addParameter(new MethodParameter(token.raw(),token.nameValue()));
return;
case SEPARATOR:
int type=token.type();
if (type == Symbols.CLOSE_PARENTHESIS) {
this.mode=ARROW;
return;
}
this.mode=PARAMETER_NAME;
if (token.type() != Symbols.COMMA) {
throw new SyntaxError(token,""String_Node_Str"");
}
return;
case TUPLE:
if (token.type() == Symbols.OPEN_PARENTHESIS) {
Tuple t=new Tuple(token);
this.value=t;
this.mode=TUPLE_END;
pm.pushParser(new ExpressionListParser(t));
return;
}
pm.popParser();
return;
case TUPLE_END:
pm.popParser();
if (token.type() == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
this.consumer.setValue(this.value);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case ARROW:
if (token.type() != Symbols.ARROW_OPERATOR) {
pm.jump(this.firstToken);
this.mode=TUPLE;
return;
}
LambdaExpression le=new LambdaExpression(token.raw(),this.params,this.parameterCount);
pm.pushParser(pm.newExpressionParser(le));
this.value=le;
this.mode=END;
return;
case END:
pm.popParser(true);
this.consumer.setValue(this.value);
return;
}
}",0.9755595574993569
84544,"@Override public void check(){
  this.pack.check(this.packageDeclaration,this.inputFile,this.markers);
}","@Override public void check(){
  this.pack.check(this.packageDeclaration,this.markers);
}",0.922279792746114
84545,"@Override public void check(){
  this.pack.check(this.packageDeclaration,this.inputFile,this.markers);
  for (int i=0; i < this.classCount; i++) {
    this.classes[i].check(this.markers,this);
  }
}","@Override public void check(){
  this.pack.check(this.packageDeclaration,this.markers);
  for (int i=0; i < this.classCount; i++) {
    this.classes[i].check(this.markers,this);
  }
}",0.9606299212598424
84546,"public void check(PackageDeclaration packageDecl,CodeFile file,MarkerList markers){
  if (packageDecl == null) {
    if (this.fullName != null) {
      markers.add(new CodePosition(0,0,1),""String_Node_Str"");
    }
    return;
  }
  if (this.fullName == null) {
    markers.add(packageDecl.getPosition(),""String_Node_Str"");
    return;
  }
  if (!this.fullName.equals(packageDecl.thePackage)) {
    markers.add(packageDecl.getPosition(),""String_Node_Str"");
  }
}","public void check(PackageDeclaration packageDecl,MarkerList markers){
  if (packageDecl == null) {
    markers.add(new CodePosition(0,0,1),""String_Node_Str"");
    return;
  }
  if (!this.fullName.equals(packageDecl.thePackage)) {
    markers.add(packageDecl.getPosition(),""String_Node_Str"",this.fullName);
  }
}",0.6606217616580311
84547,"public Package(Package parent,Name name){
  this.name=name;
  this.parent=parent;
  if (parent == null || parent.name == null) {
    this.fullName=name.qualified;
    this.internalName=ClassFormat.packageToInternal(name.qualified) + ""String_Node_Str"";
  }
 else {
    this.fullName=parent.fullName + ""String_Node_Str"" + name.qualified;
    this.internalName=parent.internalName + name.qualified + ""String_Node_Str"";
  }
}","public Package(Package parent,Name name){
  this.name=name;
  this.parent=parent;
  if (parent == null || parent == rootPackage) {
    this.fullName=name.qualified;
    this.internalName=ClassFormat.packageToInternal(name.qualified) + ""String_Node_Str"";
  }
 else {
    this.fullName=parent.fullName + ""String_Node_Str"" + name.qualified;
    this.internalName=parent.internalName + name.qualified + ""String_Node_Str"";
  }
}",0.7938388625592417
84548,"public RootPackage(){
}","public RootPackage(){
  this.internalName=this.fullName=""String_Node_Str"";
  this.name=Name.getQualified(""String_Node_Str"");
}",0.3087248322147651
84549,"@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.body.getMethodMatches(list,instance,name,arguments);
  if (!list.isEmpty()) {
    return;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null && this.superType.getTheClass() != Types.OBJECT_CLASS) {
    this.superType.getMethodMatches(list,instance,name,arguments);
  }
  if (!list.isEmpty()) {
    return;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    this.interfaces[i].getMethodMatches(list,instance,name,arguments);
  }
}","@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.body.getMethodMatches(list,instance,name,arguments);
  if (!list.isEmpty()) {
    return;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    this.superType.getMethodMatches(list,instance,name,arguments);
  }
  if (!list.isEmpty()) {
    return;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    this.interfaces[i].getMethodMatches(list,instance,name,arguments);
  }
}",0.94679186228482
84550,"private void inferTypes(GenericData genericData,IValue instance,IArguments arguments){
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
 else {
    genericData.instanceType=this.theClass.getType();
  }
  int len=arguments.size();
  IParameter param;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    this.parameters[0].getType().inferTypes(instance.getType(),genericData);
    for (int i=0; i < len - 1; i++) {
      param=this.parameters[i + 1];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
 else {
    len=Math.min(this.parameterCount,len);
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
}","private void inferTypes(GenericData genericData,IValue instance,IArguments arguments){
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
 else {
    genericData.instanceType=this.theClass.getType();
  }
  int len=arguments.size();
  IParameter param;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    this.parameters[0].getType().inferTypes(instance.getType(),genericData);
    for (int i=0; i < len; i++) {
      param=this.parameters[i + 1];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
 else {
    len=Math.min(this.parameterCount,len);
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
}",0.9974937343358397
84551,"public static void readMethodType(String desc,IMethodSignature method){
  int i=1;
  if (desc.charAt(0) == '<') {
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,method);
    }
    i+=2;
  }
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,method);
  }
  i++;
  i=readTyped(desc,i,method);
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,method);
  }
}","public static void readMethodType(String desc,IMethodSignature method){
  int i=1;
  if (desc.charAt(0) == '<') {
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,method);
    }
    i+=2;
  }
  while (desc.charAt(i) != ')') {
    i=readTyped(desc,i,method::addType);
  }
  i++;
  i=readTyped(desc,i,method);
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,method);
  }
}",0.9838709677419356
84552,"private static int readGeneric(String desc,int start,IGeneric generic){
  int index=desc.indexOf(':',start);
  Name name=Name.getQualified(desc.substring(start,index));
  TypeVariable typeVar=new TypeVariable(generic,name);
  if (desc.charAt(index + 1) == ':') {
    index++;
    typeVar.addUpperBound(Types.OBJECT);
  }
  while (desc.charAt(index) == ':') {
    index=readTypeList(desc,index + 1,typeVar);
  }
  generic.addTypeVariable(typeVar);
  return index;
}","private static int readGeneric(String desc,int start,IGeneric generic){
  int index=desc.indexOf(':',start);
  Name name=Name.getQualified(desc.substring(start,index));
  TypeVariable typeVar=new TypeVariable(generic,name);
  if (desc.charAt(index + 1) == ':') {
    index++;
    typeVar.addUpperBound(Types.OBJECT);
  }
  while (desc.charAt(index) == ':') {
    index=readTyped(desc,index + 1,typeVar::addUpperBound);
  }
  generic.addTypeVariable(typeVar);
  return index;
}",0.9787234042553192
84553,"public static void readConstructorType(String desc,IConstructor constructor){
  int i=1;
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,constructor);
  }
  i+=2;
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,constructor);
  }
}","public static void readConstructorType(String desc,IConstructor constructor){
  int i=1;
  while (desc.charAt(i) != ')') {
    i=readTyped(desc,i,constructor::addType);
  }
  i+=2;
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,constructor);
  }
}",0.912751677852349
84554,"private static IType readReferenceType(String desc,int start,int end){
  int index=desc.indexOf('<',start);
  if (index >= 0 && index < end) {
    GenericType type=new InternalGenericType(desc.substring(start,index));
    index++;
    while (desc.charAt(index) != '>') {
      index=readTypeList(desc,index,type);
    }
    return type;
  }
  return new InternalType(desc.substring(start,end));
}","private static IType readReferenceType(String desc,int start,int end){
  int index=desc.indexOf('<',start);
  if (index >= 0 && index < end) {
    GenericType type=new InternalGenericType(desc.substring(start,index));
    index++;
    while (desc.charAt(index) != '>') {
      index=readTyped(desc,index,type);
    }
    return type;
  }
  return new InternalType(desc.substring(start,end));
}",0.9936628643852978
84555,"public static void readClassSignature(String desc,IClass iclass){
  int i=0;
  if (desc.charAt(0) == '<') {
    i++;
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,iclass);
    }
    i++;
  }
  int len=desc.length();
  i=readTyped(desc,i,iclass);
  while (i < len) {
    i=readTyped(desc,i,t -> iclass.addInterface(t));
  }
}","public static void readClassSignature(String desc,IClass iclass){
  int i=0;
  if (desc.charAt(0) == '<') {
    i++;
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,iclass);
    }
    i++;
  }
  int len=desc.length();
  i=readTyped(desc,i,iclass::setSuperType);
  while (i < len) {
    i=readTyped(desc,i,iclass::addInterface);
  }
}",0.8243831640058055
84556,"public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  Name name1=Name.get(name);
  if ((this.modifiers & Modifiers.ANNOTATION) != 0) {
    ClassParameter param=new ClassParameter();
    param.modifiers=access;
    param.name=name1;
    param.type=ClassFormat.readReturnType(desc);
    this.addParameter(param);
    return new AnnotationClassVisitor(param);
  }
  if (""String_Node_Str"".equals(name)) {
    Constructor constructor=new ExternalConstructor(this);
    constructor.setModifiers(access);
    ClassFormat.readConstructorType(desc,constructor);
    if ((access & Modifiers.VARARGS) != 0) {
      constructor.getParameter(constructor.parameterCount() - 1).setVarargs(true);
    }
    this.body.addConstructor(constructor);
    return new SimpleMethodVisitor(constructor);
  }
  ExternalMethod method=new ExternalMethod(this);
  method.name=name1;
  method.modifiers=access;
  method.descriptor=desc;
  if (signature != null) {
    method.setGeneric();
    ClassFormat.readMethodType(signature,method);
  }
 else {
    ClassFormat.readMethodType(desc,method);
    if (exceptions != null) {
      for (      String s : exceptions) {
        method.addException(ClassFormat.internalToType(s));
      }
    }
  }
  if ((access & Modifiers.VARARGS) != 0) {
    method.setVarargsParameter();
  }
  boolean flag=true;
  if ((access & Modifiers.SYNTHETIC) != 0) {
    int index=name.indexOf('$');
    if (index != -1) {
      flag=this.addSpecialMethod(name.substring(0,index),name.substring(index + 1),method);
    }
  }
  if (flag) {
    this.body.addMethod(method);
  }
  return new BytecodeVisitor(method);
}","public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  Name name1=Name.getQualified(name);
  if ((this.modifiers & Modifiers.ANNOTATION) != 0) {
    ClassParameter param=new ClassParameter();
    param.modifiers=access;
    param.name=name1;
    param.type=ClassFormat.readReturnType(desc);
    this.addParameter(param);
    return new AnnotationClassVisitor(param);
  }
  int index=-1;
  if ((access & Modifiers.SYNTHETIC) != 0) {
    index=name.indexOf('$');
    if (index == -1) {
      return null;
    }
  }
  if (""String_Node_Str"".equals(name)) {
    Constructor constructor=new ExternalConstructor(this);
    constructor.setModifiers(access);
    ClassFormat.readConstructorType(desc,constructor);
    if ((access & Modifiers.VARARGS) != 0) {
      constructor.getParameter(constructor.parameterCount() - 1).setVarargs(true);
    }
    this.body.addConstructor(constructor);
    return new SimpleMethodVisitor(constructor);
  }
  ExternalMethod method=new ExternalMethod(this);
  method.name=name1;
  method.modifiers=access;
  method.descriptor=desc;
  if (signature != null) {
    method.setGeneric();
    ClassFormat.readMethodType(signature,method);
  }
 else {
    ClassFormat.readMethodType(desc,method);
    if (exceptions != null) {
      for (      String s : exceptions) {
        method.addException(ClassFormat.internalToType(s));
      }
    }
  }
  if ((access & Modifiers.VARARGS) != 0) {
    method.setVarargsParameter();
  }
  if (index == -1 || this.addSpecialMethod(name.substring(0,index),name.substring(index + 1),method)) {
    this.body.addMethod(method);
  }
  return new BytecodeVisitor(method);
}",0.4096745297103613
84557,"@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  super.cleanup(context,compilableList);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].cleanup(this,compilableList);
  }
  if (this.value != null) {
    this.value=this.value.cleanup(this,compilableList);
    if (this.theClass.isInterface() && !this.isStatic()) {
      this.modifiers|=Modifiers.BRIDGE | Modifiers.SYNTHETIC;
    }
  }
}","@Override public void cleanup(IContext context,IClassCompilableList compilableList){
  super.cleanup(context,compilableList);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].cleanup(this,compilableList);
  }
  if (this.value != null) {
    this.value=this.value.cleanup(this,compilableList);
  }
}",0.834419817470665
84558,"@Override public float getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if ((this.modifiers & Modifiers.SYNTHETIC) != 0) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    float m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int argumentCount=arguments.size();
  if (instance != null) {
    int mod=(this.modifiers & Modifiers.INFIX);
    if (mod != 0 && instance.valueTag() == IValue.CLASS_ACCESS) {
      instance=null;
    }
 else     if (mod == Modifiers.INFIX) {
      IType t2=this.parameters[0].getType();
      float m=instance.getTypeMatch(t2);
      if (m == 0) {
        return 0;
      }
      match+=m;
      parIndex=1;
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int len=this.parameterCount - 1 - parIndex;
    float m;
    for (int i=parIndex; i < len; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    m=arguments.getVarargsTypeMatch(len,this.parameters[len + parIndex]);
    if (m == 0) {
      return 0;
    }
    return match + m;
  }
  int len=this.parameterCount - parIndex;
  if (argumentCount > len) {
    return 0;
  }
  for (int i=0; i < len; i++) {
    IParameter par=this.parameters[i + parIndex];
    float m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}","@Override public float getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    float m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int argumentCount=arguments.size();
  if (instance != null) {
    int mod=(this.modifiers & Modifiers.INFIX);
    if (mod != 0 && instance.valueTag() == IValue.CLASS_ACCESS) {
      instance=null;
    }
 else     if (mod == Modifiers.INFIX) {
      IType t2=this.parameters[0].getType();
      float m=instance.getTypeMatch(t2);
      if (m == 0) {
        return 0;
      }
      match+=m;
      parIndex=1;
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int len=this.parameterCount - 1 - parIndex;
    float m;
    for (int i=parIndex; i < len; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    m=arguments.getVarargsTypeMatch(len,this.parameters[len + parIndex]);
    if (m == 0) {
      return 0;
    }
    return match + m;
  }
  int len=this.parameterCount - parIndex;
  if (argumentCount > len) {
    return 0;
  }
  for (int i=0; i < len; i++) {
    IParameter par=this.parameters[i + parIndex];
    float m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}",0.9782141761276464
84559,"@Override public boolean isEmpty(){
  return false;
}","@Override public boolean isEmpty(){
  return this.value == null;
}",0.8571428571428571
84560,"@Override public void write(ClassWriter writer) throws BytecodeException {
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  int mods=this.modifiers & 0x7631;
  if ((mods & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
    mods|=Opcodes.ACC_SUPER;
  }
  writer.visit(DyvilCompiler.classVersion,mods,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].write(writer);
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  IField[] staticFields=new IField[fields + 1];
  int staticFieldCount=0;
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      staticFields[staticFieldCount++]=f;
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].write(writer);
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  this.metadata.write(writer,instanceFields);
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  this.metadata.writeStaticInit(mw);
  for (int i=0; i < staticFieldCount; i++) {
    staticFields[i].writeStaticInit(mw);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(mw);
  }
  mw.end(Types.VOID);
}","@Override public void write(ClassWriter writer) throws BytecodeException {
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  int mods=this.modifiers & 0x7631;
  if ((mods & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
    mods|=Opcodes.ACC_SUPER;
  }
  writer.visit(DyvilCompiler.classVersion,mods,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].write(writer);
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  IField[] staticFields=new IField[fields + 1];
  int staticFieldCount=0;
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      staticFields[staticFieldCount++]=f;
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  if (this.parameterCount > 0) {
    AnnotationVisitor av=writer.visitAnnotation(""String_Node_Str"",false);
    AnnotationVisitor array=av.visitArray(""String_Node_Str"");
    for (int i=0; i < this.parameterCount; i++) {
      IParameter param=this.parameters[i];
      param.write(writer);
      array.visit(""String_Node_Str"",param.getName().qualified);
    }
    array.visitEnd();
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  this.metadata.write(writer,instanceFields);
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  this.metadata.writeStaticInit(mw);
  for (int i=0; i < staticFieldCount; i++) {
    staticFields[i].writeStaticInit(mw);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].writeStaticInit(mw);
  }
  mw.end(Types.VOID);
}",0.9565787747605928
84561,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  IType type=this.value.getType();
  for (int i=0; i < this.caseCount; i++) {
    CaseExpression c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPosition(),""String_Node_Str"");
    }
    IPattern pattern=c.pattern;
    if (pattern == null) {
      continue;
    }
    pattern=pattern.resolve(markers,context);
    if (pattern.isExhaustive()) {
      if (c.condition == null) {
        this.exhaustive=true;
      }
    }
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker marker=markers.create(pattern.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + pattern.getType());
      marker.addInfo(""String_Node_Str"" + type);
    }
 else {
      pattern=pattern1;
    }
    pattern.checkTypes(markers,context);
    c.pattern=pattern;
    this.cases[i].resolve(markers,context);
  }
  if (type == Types.BOOLEAN && this.caseCount >= 2) {
    this.exhaustive=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  IType type=this.value.getType();
  for (int i=0; i < this.caseCount; i++) {
    CaseExpression c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPosition(),""String_Node_Str"");
    }
    IPattern pattern=c.pattern;
    if (pattern == null) {
      continue;
    }
    pattern=pattern.resolve(markers,context);
    if (pattern.isExhaustive()) {
      if (c.condition == null) {
        this.exhaustive=true;
      }
    }
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker marker=markers.create(pattern.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + pattern.getType());
      marker.addInfo(""String_Node_Str"" + type);
    }
 else {
      pattern=pattern1;
    }
    c.pattern=pattern;
    this.cases[i].resolve(markers,context);
  }
  if (type == Types.BOOLEAN && this.caseCount >= 2) {
    this.exhaustive=true;
  }
  return this;
}",0.9805595068752964
84562,"public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  Field field=new ExternalField(this);
  field.setName(Name.get(name));
  field.setModifiers(access);
  field.setType(ClassFormat.extendedToType(signature == null ? desc : signature));
  if (value != null) {
    field.setValue(IValue.fromObject(value));
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0 && name.equals(""String_Node_Str"")) {
    this.metadata.setInstanceField(field);
    return null;
  }
  this.body.addField(field);
  return new SimpleFieldVisitor(field);
}","public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  IType type=ClassFormat.extendedToType(signature == null ? desc : signature);
  if (this.classParameters != null) {
    for (    String s : this.classParameters) {
      if (s.equals(name)) {
        ClassParameter param=new ClassParameter(this,access,Name.get(name),type);
        this.addParameter(param);
        return new SimpleFieldVisitor(param);
      }
    }
  }
  ExternalField field=new ExternalField(this,access,Name.get(name),type);
  if (value != null) {
    field.setValue(IValue.fromObject(value));
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0 && name.equals(""String_Node_Str"")) {
    this.getMetadata().setInstanceField(field);
  }
 else {
    this.body.addField(field);
  }
  return new SimpleFieldVisitor(field);
}",0.5014044943820225
84563,"@Override public IDataMember resolveField(Name name){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  IDataMember field=this.body.getProperty(name);
  if (field != null) {
    return field;
  }
  field=this.body.getField(name);
  if (field != null) {
    return field;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    IDataMember match=this.superType.resolveField(name);
    if (match != null) {
      return match;
    }
  }
  return null;
}","@Override public IDataMember resolveField(Name name){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    if (param.getName() == name) {
      return param;
    }
  }
  IDataMember field=this.body.getProperty(name);
  if (field != null) {
    return field;
  }
  field=this.body.getField(name);
  if (field != null) {
    return field;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    IDataMember match=this.superType.resolveField(name);
    if (match != null) {
      return match;
    }
  }
  return null;
}",0.8238095238095238
84564,"public ExternalField(IClass iclass){
  super(iclass);
}","public ExternalField(IClass iclass,int access,Name name,IType type){
  super(iclass,name,type);
  this.modifiers=access;
}",0.6214689265536724
84565,"@Override public void addImport(IImport iimport){
  int index=this.importCount++;
  if (index >= this.imports.length) {
    IImport[] temp=new IImport[index];
    System.arraycopy(this.imports,0,temp,0,this.imports.length);
    this.imports=temp;
  }
  this.imports[index]=iimport;
}","@Override public void addImport(IImport iimport){
  int index=this.importCount++;
  if (index >= this.imports.length) {
    IImport[] temp=new IImport[index + 1];
    System.arraycopy(this.imports,0,temp,0,this.imports.length);
    this.imports=temp;
  }
  this.imports[index]=iimport;
}",0.9929824561403509
84566,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue=this.defaultValue.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.defaultValue.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  this.modifiers|=Modifiers.PUBLIC;
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue=this.defaultValue.resolve(markers,context);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.defaultValue.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}",0.9839857651245552
84567,"public ClassParameter(Name name,IType type){
  this.name=name;
  this.type=type;
}","public ClassParameter(IClass theClass,int access,Name name,IType type){
  this.theClass=theClass;
  this.name=name;
  this.type=type;
  this.modifiers=access;
}",0.6776859504132231
84568,"@Override public void visitEnd(){
}","@Override public void visitEnd(){
  this.theClass.visitEnd();
}",0.7142857142857143
84569,"@Override public AnnotationVisitor visitAnnotation(String name,boolean visible){
  String internal=ClassFormat.extendedToInternal(name);
  if (this.theClass.addRawAnnotation(internal)) {
    Annotation annotation=new Annotation(null,ClassFormat.internalToType(internal));
    return new AnnotationVisitorImpl(this.theClass,annotation);
  }
  return null;
}","@Override public AnnotationVisitor visitAnnotation(String type,boolean visible){
  return this.theClass.visitAnnotation(type,visible);
}",0.483739837398374
84570,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.consumer.setImport(this.theImport);
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA || this.mode == 0) {
    this.consumer.setImport(this.theImport);
    pm.popParser(true);
    return;
  }
  if (this.mode == IMPORT) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      MultiImport mi=new MultiImport(token);
      mi.setParent(this.theImport);
      this.theImport=mi;
      if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
        pm.pushParser(new ImportListParser(mi));
        this.mode=MULTIIMPORT;
        return;
      }
      this.mode=0;
      pm.skip();
      return;
    }
    if (type == Symbols.WILDCARD) {
      PackageImport pi=new PackageImport(token.raw());
      pi.setParent(this.theImport);
      this.theImport=pi;
      this.mode=0;
      return;
    }
    if (type == Keywords.ANNOTATION) {
      SimpleImport si=new SimpleImport(token.raw(),annotation);
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
    if (type == Keywords.TYPE) {
      SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
  }
  if (this.mode == DOT_ALIAS) {
    if (type == Symbols.DOT) {
      this.mode=IMPORT;
      return;
    }
    if (type == Symbols.ARROW_OPERATOR || type == Keywords.AS) {
      this.mode=0;
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type())) {
        this.theImport.setAlias(next.nameValue());
        pm.skip();
        return;
      }
      throw new SyntaxError(next,""String_Node_Str"");
    }
  }
  if (this.isInMode(MULTIIMPORT)) {
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      this.theImport.expandPosition(token);
      this.mode=0;
      return;
    }
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.consumer.setImport(this.theImport);
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA || this.mode == 0) {
    this.consumer.setImport(this.theImport);
    pm.popParser(true);
    return;
  }
  if (this.mode == IMPORT) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      MultiImport mi=new MultiImport(token);
      mi.setParent(this.theImport);
      this.theImport=mi;
      if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
        pm.pushParser(new ImportListParser(mi));
        this.mode=MULTIIMPORT;
        return;
      }
      this.mode=0;
      pm.skip();
      return;
    }
    if (type == Symbols.WILDCARD) {
      PackageImport pi=new PackageImport(token.raw());
      pi.setParent(this.theImport);
      this.theImport=pi;
      this.mode=0;
      return;
    }
    if (type == Keywords.ANNOTATION) {
      SimpleImport si=new SimpleImport(token.raw(),annotation);
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
    if (type == Keywords.TYPE) {
      SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
      si.setParent(this.theImport);
      this.theImport=si;
      this.mode=DOT_ALIAS;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == DOT_ALIAS) {
    if (type == Symbols.DOT) {
      this.mode=IMPORT;
      return;
    }
    if (type == Symbols.ARROW_OPERATOR || type == Keywords.AS) {
      this.mode=0;
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type())) {
        this.theImport.setAlias(next.nameValue());
        pm.skip();
        return;
      }
      throw new SyntaxError(next,""String_Node_Str"");
    }
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      this.consumer.setImport(this.theImport);
      pm.popParser(true);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(MULTIIMPORT)) {
    this.theImport.expandPosition(token);
    this.consumer.setImport(this.theImport);
    pm.popParser();
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.8978902953586498
84571,"@Override public void writeJumpInsn(int opcode,Label target) throws BytecodeException {
  if (opcode > 255) {
switch (opcode) {
case Opcodes.IF_LCMPEQ:
      this.writeInsn(Opcodes.LCMP);
    this.writeJumpInsn(Opcodes.IFEQ,target);
  return;
case Opcodes.IF_LCMPNE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_LCMPLT:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_LCMPGE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_LCMPGT:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_LCMPLE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
case Opcodes.IF_FCMPEQ:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFEQ,target);
return;
case Opcodes.IF_FCMPNE:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_FCMPLT:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_FCMPGE:
this.writeInsn(Opcodes.FCMPG);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_FCMPGT:
this.writeInsn(Opcodes.FCMPG);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_FCMPLE:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
case Opcodes.IF_DCMPEQ:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFEQ,target);
return;
case Opcodes.IF_DCMPNE:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_DCMPLT:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_DCMPGE:
this.writeInsn(Opcodes.DCMPG);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_DCMPGT:
this.writeInsn(Opcodes.DCMPG);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_DCMPLE:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
}
}
this.insnCallback();
this.visitFrame=true;
this.frame.visitJumpInsn(opcode);
target.info=this.frame;
this.frame=this.frame.copy();
this.mv.visitJumpInsn(opcode,target);
}","@Override public void writeJumpInsn(int opcode,Label target) throws BytecodeException {
  if (opcode > 255) {
switch (opcode) {
case Opcodes.IF_LCMPEQ:
      this.writeInsn(Opcodes.LCMP);
    this.writeJumpInsn(Opcodes.IFEQ,target);
  return;
case Opcodes.IF_LCMPNE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_LCMPLT:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_LCMPGE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_LCMPGT:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_LCMPLE:
this.writeInsn(Opcodes.LCMP);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
case Opcodes.IF_FCMPEQ:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFEQ,target);
return;
case Opcodes.IF_FCMPNE:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_FCMPLT:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_FCMPGE:
this.writeInsn(Opcodes.FCMPG);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_FCMPGT:
this.writeInsn(Opcodes.FCMPG);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_FCMPLE:
this.writeInsn(Opcodes.FCMPL);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
case Opcodes.IF_DCMPEQ:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFEQ,target);
return;
case Opcodes.IF_DCMPNE:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFNE,target);
return;
case Opcodes.IF_DCMPLT:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFLT,target);
return;
case Opcodes.IF_DCMPGE:
this.writeInsn(Opcodes.DCMPG);
this.writeJumpInsn(Opcodes.IFGE,target);
return;
case Opcodes.IF_DCMPGT:
this.writeInsn(Opcodes.DCMPG);
this.writeJumpInsn(Opcodes.IFGT,target);
return;
case Opcodes.IF_DCMPLE:
this.writeInsn(Opcodes.DCMPL);
this.writeJumpInsn(Opcodes.IFLE,target);
return;
}
}
this.insnCallback();
this.visitFrame=true;
this.frame.visitJumpInsn(opcode);
if (target.info == null) {
target.info=this.frame.copy();
}
this.mv.visitJumpInsn(opcode,target);
}",0.988547869903802
84572,"@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if ((this.modifiers & Modifiers.SYNTHETIC) != 0) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    int m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  int mods=this.modifiers & Modifiers.INFIX;
  if (instance != null && mods == Modifiers.INFIX) {
    IType t2=this.parameters[0].getType();
    int m=instance.getTypeMatch(t2);
    if (m == 0) {
      return 0;
    }
    match+=m;
    parIndex=1;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}","@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if ((this.modifiers & Modifiers.SYNTHETIC) != 0) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    int m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  if (instance != null) {
    int mod=(this.modifiers & Modifiers.INFIX);
    if (mod != 0 && instance.valueTag() == IValue.CLASS_ACCESS) {
      instance=null;
    }
 else     if (mod == Modifiers.INFIX) {
      IType t2=this.parameters[0].getType();
      int m=instance.getTypeMatch(t2);
      if (m == 0) {
        return 0;
      }
      match+=m;
      parIndex=1;
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}",0.9235650418229016
84573,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    IParameter par=this.parameters[0];
    parType=par.getType().getConcreteType(typeContext);
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
 else {
      instance=instance1;
    }
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
      for (int i=0; i < this.parameterCount - 2; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    for (int i=0; i < this.parameterCount - 1; i++) {
      arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
 else   if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return null;
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=instance.withType(this.theClass.getType().getConcreteType(typeContext),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,context.getThisClass().getType());
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return null;
  }
  if (instance != null) {
    int mod=(this.modifiers & Modifiers.INFIX);
    if (mod == Modifiers.INFIX && instance.valueTag() != IValue.CLASS_ACCESS) {
      IParameter par=this.parameters[0];
      parType=par.getType().getConcreteType(typeContext);
      IValue instance1=instance.withType(parType,typeContext,markers,context);
      if (instance1 == null) {
        Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
        marker.addInfo(""String_Node_Str"" + parType);
        marker.addInfo(""String_Node_Str"" + instance.getType());
      }
 else {
        instance=instance1;
      }
      if ((this.modifiers & Modifiers.VARARGS) != 0) {
        arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
        for (int i=0; i < this.parameterCount - 2; i++) {
          arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
        }
        this.checkTypeVarsInferred(markers,position,typeContext);
        return instance;
      }
      for (int i=0; i < this.parameterCount - 1; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=instance.withType(this.theClass.getType().getConcreteType(typeContext),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,context.getThisClass().getType());
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.8055278529705087
84574,"@Override public void compile(){
  if (ICompilationUnit.printMarkers(this.markers,""String_Node_Str"",this.name,this.inputFile)) {
    return;
  }
  HeaderFile.write(this.outputFile,this);
}","@Override public void compile(){
  if (this.printMarkers()) {
    return;
  }
  HeaderFile.write(this.outputFile,this);
}",0.7637540453074434
84575,"@Override public void compile(){
  if (ICompilationUnit.printMarkers(this.markers,""String_Node_Str"",this.name,this.inputFile)) {
    return;
  }
  for (int i=0; i < this.classCount; i++) {
    IClass iclass=this.classes[i];
    String name=iclass.getName().qualified;
    if (!name.equals(this.name)) {
      name=this.name + ""String_Node_Str"" + name+ ""String_Node_Str"";
    }
 else {
      name+=""String_Node_Str"";
    }
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
    IClassBody body=iclass.getBody();
    if (body != null) {
      int len=body.classCount();
      for (int j=0; j < len; j++) {
        IClass iclass1=body.getClass(j);
        name=this.name + ""String_Node_Str"" + iclass1.getName().qualified+ ""String_Node_Str"";
        file=new File(this.outputDirectory,name);
        ClassWriter.compile(file,iclass1);
      }
    }
  }
  for (int i=0; i < this.innerClassCount; i++) {
    IClassCompilable iclass=this.innerClasses[i];
    String name=iclass.getFileName() + ""String_Node_Str"";
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
  }
}","@Override public void compile(){
  if (this.printMarkers()) {
    return;
  }
  for (int i=0; i < this.classCount; i++) {
    IClass iclass=this.classes[i];
    String name=iclass.getName().qualified;
    if (!name.equals(this.name)) {
      name=this.name + ""String_Node_Str"" + name+ ""String_Node_Str"";
    }
 else {
      name+=""String_Node_Str"";
    }
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
    IClassBody body=iclass.getBody();
    if (body != null) {
      int len=body.classCount();
      for (int j=0; j < len; j++) {
        IClass iclass1=body.getClass(j);
        name=this.name + ""String_Node_Str"" + iclass1.getName().qualified+ ""String_Node_Str"";
        file=new File(this.outputDirectory,name);
        ClassWriter.compile(file,iclass1);
      }
    }
  }
  for (int i=0; i < this.innerClassCount; i++) {
    IClassCompilable iclass=this.innerClasses[i];
    String name=iclass.getFileName() + ""String_Node_Str"";
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
  }
}",0.965142598460842
84576,"public void findUnits(FileFinder fileFinder){
  if (!this.includedFiles.isEmpty()) {
    for (    String s : this.includedFiles) {
      File source=new File(sourceDir,s);
      File output=new File(outputDir,s);
      Package pack=packageFromFile(s,source.isDirectory());
      fileFinder.findUnits(source,output,pack);
    }
    return;
  }
  fileFinder.findUnits(sourceDir,outputDir,Package.rootPackage);
}","public void findUnits(FileFinder fileFinder){
  if (!this.includedFiles.isEmpty()) {
    for (    String s : this.includedFiles) {
      File source=new File(sourceDir,s);
      File output=new File(outputDir,s);
      Package pack=packageFromFile(s,source.isDirectory());
      fileFinder.process(source,output,pack);
    }
    return;
  }
  fileFinder.process(sourceDir,outputDir,Package.rootPackage);
}",0.9656019656019657
84577,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      this.annotation.name=name;
      this.annotation.type=new NamedType(token.raw(),name);
      this.mode=PARAMETERS_START;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == PARAMETERS_START) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type()) && next.next().type() == Symbols.COLON) {
        ArgumentMap map=new ArgumentMap();
        this.annotation.arguments=map;
        pm.pushParser(new ExpressionMapParser(map));
      }
 else {
        ArgumentList list=new ArgumentList();
        this.annotation.arguments=list;
        pm.pushParser(new ExpressionListParser(list));
      }
      this.mode=PARAMETERS_END;
      return;
    }
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      SingleArgument arg=new SingleArgument();
      this.annotation.arguments=arg;
      pm.popParser();
      pm.pushParser(new ExpressionParser(arg),true);
      return;
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == PARAMETERS_END) {
    if (type == Symbols.CLOSE_PARENTHESIS) {
      pm.popParser();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      this.annotation.name=name;
      this.annotation.type=new NamedType(token.raw(),name);
      this.mode=PARAMETERS_START;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == PARAMETERS_START) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type()) && next.next().type() == Symbols.COLON) {
        ArgumentMap map=new ArgumentMap();
        this.annotation.arguments=map;
        pm.pushParser(new ExpressionMapParser(map));
      }
 else {
        ArgumentList list=new ArgumentList();
        this.annotation.arguments=list;
        pm.pushParser(new ExpressionListParser(list));
      }
      this.mode=PARAMETERS_END;
      return;
    }
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      SingleArgument arg=new SingleArgument();
      this.annotation.arguments=arg;
      pm.popParser();
      pm.pushParser(pm.newExpressionParser(arg),true);
      return;
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == PARAMETERS_END) {
    if (type == Symbols.CLOSE_PARENTHESIS) {
      pm.popParser();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.998587570621469
84578,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
switch (this.mode) {
case TYPE:
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      pm.popParser(true);
      return;
    }
  if (type == Symbols.SEMICOLON) {
    if (token.isInferred()) {
      return;
    }
    this.reset();
    return;
  }
if (type == Keywords.NEW) {
  if (this.theClass == null) {
    this.mode=0;
    throw new SyntaxError(token,""String_Node_Str"");
  }
  Constructor c=new Constructor(this.theClass);
  c.position=token.raw();
  c.modifiers=this.modifiers;
  c.setAnnotations(this.annotations,this.annotationCount);
  this.member=c;
  this.mode=PARAMETERS;
  return;
}
int i=0;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
IToken next=token.next();
if (!ParserUtil.isIdentifier(next.type())) {
this.reset();
throw new SyntaxError(next,""String_Node_Str"");
}
if (this.theClass == null) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"");
}
Name name=next.nameValue();
CodeClass codeClass=new CodeClass(next.raw(),this.theClass.getUnit(),this.modifiers | i);
codeClass.setName(name);
codeClass.setAnnotations(this.getAnnotations(),this.annotationCount);
codeClass.setOuterClass(this.theClass);
ClassDeclarationParser parser=new ClassDeclarationParser(this.theClass.getBody(),codeClass);
pm.skip();
pm.pushParser(parser);
this.reset();
return;
}
if (token.nameValue() == Name.at) {
Annotation annotation=new Annotation(token.raw());
this.addAnnotation(annotation);
pm.pushParser(new AnnotationParser(annotation));
return;
}
pm.pushParser(new TypeParser(this),true);
this.mode=NAME;
return;
case NAME:
if (!ParserUtil.isIdentifier(type)) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"",true);
}
IToken next=token.next();
type=next.type();
if (type == Symbols.SEMICOLON || type == Symbols.CLOSE_CURLY_BRACKET) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.consumer.addField(f);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser(true);
return;
}
pm.skip();
this.reset();
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=PARAMETERS;
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
Property p=new Property(this.theClass,token.nameValue(),this.type);
p.position=token.raw();
p.modifiers=this.modifiers;
p.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=p;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new PropertyParser(p));
return;
}
if (type == Symbols.EQUALS) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=f;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new ExpressionParser(f));
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
this.mode=GENERICS_END;
pm.skip();
pm.pushParser(new TypeVariableListParser(m));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case GENERICS_END:
this.mode=PARAMETERS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS:
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
pm.pushParser(new ParameterListParser((IParameterList)this.member));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS_END:
this.mode=METHOD_VALUE;
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case METHOD_VALUE:
if (type == Symbols.CLOSE_CURLY_BRACKET) {
this.consumer.addMethod((IMethod)this.member);
pm.popParser(true);
return;
}
if (type == Symbols.SEMICOLON) {
this.consumer.addMethod((IMethod)this.member);
this.reset();
return;
}
this.mode=METHOD_END;
if (type == Symbols.OPEN_CURLY_BRACKET) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member),true);
return;
}
if (type == Symbols.EQUALS) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member));
return;
}
if (type == Keywords.THROWS) {
pm.pushParser(new ExceptionListParser((IExceptionList)this.member));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case METHOD_END:
if (this.member instanceof IMethod) {
this.consumer.addMethod((IMethod)this.member);
}
 else {
this.consumer.addConstructor((IConstructor)this.member);
}
pm.reparse();
this.reset();
return;
case FIELD_END:
this.consumer.addField((IField)this.member);
pm.reparse();
this.reset();
return;
case PROPERTY_END:
this.consumer.addProperty((IProperty)this.member);
pm.reparse();
this.reset();
return;
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
switch (this.mode) {
case TYPE:
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      pm.popParser(true);
      return;
    }
  if (type == Symbols.SEMICOLON) {
    if (token.isInferred()) {
      return;
    }
    this.reset();
    return;
  }
if (type == Keywords.NEW) {
  if (this.theClass == null) {
    this.mode=0;
    throw new SyntaxError(token,""String_Node_Str"");
  }
  Constructor c=new Constructor(this.theClass);
  c.position=token.raw();
  c.modifiers=this.modifiers;
  c.setAnnotations(this.annotations,this.annotationCount);
  this.member=c;
  this.mode=PARAMETERS;
  return;
}
int i=0;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
IToken next=token.next();
if (!ParserUtil.isIdentifier(next.type())) {
this.reset();
throw new SyntaxError(next,""String_Node_Str"");
}
if (this.theClass == null) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"");
}
Name name=next.nameValue();
CodeClass codeClass=new CodeClass(next.raw(),this.theClass.getUnit(),this.modifiers | i);
codeClass.setName(name);
codeClass.setAnnotations(this.getAnnotations(),this.annotationCount);
codeClass.setOuterClass(this.theClass);
ClassDeclarationParser parser=new ClassDeclarationParser(this.theClass.getBody(),codeClass);
pm.skip();
pm.pushParser(parser);
this.reset();
return;
}
if (token.nameValue() == Name.at) {
Annotation annotation=new Annotation(token.raw());
this.addAnnotation(annotation);
pm.pushParser(pm.newAnnotationParser(annotation));
return;
}
pm.pushParser(pm.newTypeParser(this),true);
this.mode=NAME;
return;
case NAME:
if (!ParserUtil.isIdentifier(type)) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"");
}
IToken next=token.next();
type=next.type();
if (type == Symbols.SEMICOLON || type == Symbols.CLOSE_CURLY_BRACKET) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.consumer.addField(f);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser(true);
return;
}
pm.skip();
this.reset();
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=PARAMETERS;
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
Property p=new Property(this.theClass,token.nameValue(),this.type);
p.position=token.raw();
p.modifiers=this.modifiers;
p.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=p;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new PropertyParser(p));
return;
}
if (type == Symbols.EQUALS) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=f;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(pm.newExpressionParser(f));
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
this.mode=GENERICS_END;
pm.skip();
pm.pushParser(new TypeVariableListParser(m));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case GENERICS_END:
this.mode=PARAMETERS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS:
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
pm.pushParser(new ParameterListParser((IParameterList)this.member));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS_END:
this.mode=METHOD_VALUE;
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case METHOD_VALUE:
if (type == Symbols.CLOSE_CURLY_BRACKET) {
this.consumer.addMethod((IMethod)this.member);
pm.popParser(true);
return;
}
if (type == Symbols.SEMICOLON) {
this.consumer.addMethod((IMethod)this.member);
this.reset();
return;
}
this.mode=METHOD_END;
if (type == Symbols.OPEN_CURLY_BRACKET) {
pm.pushParser(pm.newExpressionParser((IValueConsumer)this.member),true);
return;
}
if (type == Symbols.EQUALS) {
pm.pushParser(pm.newExpressionParser((IValueConsumer)this.member));
return;
}
if (type == Keywords.THROWS) {
pm.pushParser(new ExceptionListParser((IExceptionList)this.member));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case METHOD_END:
if (this.member instanceof IMethod) {
this.consumer.addMethod((IMethod)this.member);
}
 else {
this.consumer.addConstructor((IConstructor)this.member);
}
pm.reparse();
this.reset();
return;
case FIELD_END:
this.consumer.addField((IField)this.member);
pm.reparse();
this.reset();
return;
case PROPERTY_END:
this.consumer.addProperty((IProperty)this.member);
pm.reparse();
this.reset();
return;
}
}",0.997565014122918
84579,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == MODIFIERS) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.modifiers|=i;
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
    if (token.isInferred()) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str"");
  }
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass=new CodeClass(token.raw(),(IDyvilHeader)this.classList,this.modifiers);
      if (this.annotations != null) {
        this.theClass.setAnnotations(this.annotations,this.annotations.length);
      }
      this.theClass.setName(token.nameValue());
      this.mode=POST_NAME;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.mode == GENERICS_END) {
    this.mode=POST_GENERICS;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.mode == PARAMETERS_END) {
    this.mode=POST_PARAMETERS;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        pm.pushParser(new TypeListParser(this));
        this.mode=BODY;
        return;
      }
      pm.pushParser(new TypeParser(this));
      this.mode=POST_EXTENDS;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        throw new SyntaxError(token,""String_Node_Str"");
      }
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      IClassBody body=new ClassBody(this.theClass);
      this.theClass.setBody(body);
      pm.pushParser(new ClassBodyParser(this.theClass,body));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.isInferred()) {
        int nextType=token.next().type();
switch (nextType) {
case Keywords.EXTENDS:
          this.mode=EXTENDS;
        return;
case Keywords.IMPLEMENTS:
      this.mode=IMPLEMENTS;
    return;
case Symbols.OPEN_SQUARE_BRACKET:
  this.mode=GENERICS;
return;
case Symbols.OPEN_PARENTHESIS:
this.mode=PARAMETERS;
return;
}
}
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
this.mode=BODY_END;
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BODY_END) {
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == MODIFIERS) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.modifiers|=i;
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(pm.newAnnotationParser(annotation));
      return;
    }
    if (token.isInferred()) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str"");
  }
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass=new CodeClass(token.raw(),(IDyvilHeader)this.classList,this.modifiers);
      if (this.annotations != null) {
        this.theClass.setAnnotations(this.annotations,this.annotations.length);
      }
      this.theClass.setName(token.nameValue());
      this.mode=POST_NAME;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.mode == GENERICS_END) {
    this.mode=POST_GENERICS;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.mode == PARAMETERS_END) {
    this.mode=POST_PARAMETERS;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        pm.pushParser(new TypeListParser(this));
        this.mode=BODY;
        return;
      }
      pm.pushParser(pm.newTypeParser(this));
      this.mode=POST_EXTENDS;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        throw new SyntaxError(token,""String_Node_Str"");
      }
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      IClassBody body=new ClassBody(this.theClass);
      this.theClass.setBody(body);
      pm.pushParser(new ClassBodyParser(this.theClass,body));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.isInferred()) {
        int nextType=token.next().type();
switch (nextType) {
case Keywords.EXTENDS:
          this.mode=EXTENDS;
        return;
case Keywords.IMPLEMENTS:
      this.mode=IMPLEMENTS;
    return;
case Symbols.OPEN_SQUARE_BRACKET:
  this.mode=GENERICS;
return;
case Symbols.OPEN_PARENTHESIS:
this.mode=PARAMETERS;
return;
}
}
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
this.mode=BODY_END;
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BODY_END) {
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
}",0.9988873435326844
84580,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType();
        }
        param.setType(parType.getConcreteType(this.type));
      }
      this.returnType=this.method.getType().getConcreteType(this.type);
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    boolean inferReturn=false;
    if (this.returnType == Types.UNKNOWN) {
      inferReturn=true;
      this.returnType=this.value.getType().getReferenceType();
    }
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      if (inferReturn) {
        this.returnType=this.value.getType();
      }
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(this.returnType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType().getConcreteType(this.type).getParameterType();
          param.setType(parType);
        }
      }
      this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IType valueType=this.value.getType().getReferenceType();
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.8061860813170366
84581,"@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) == typeVar) {
    return this.generics[index];
  }
  return this.instanceType.resolveType(typeVar);
}","@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) == typeVar) {
    if (index > this.genericCount) {
      return new TypeVarType(typeVar);
    }
    return this.generics[index];
  }
  return this.instanceType.resolveType(typeVar);
}",0.8503649635036497
84582,"@Override public void addMapping(ITypeVariable typeVar,IType type){
  int index=typeVar.getIndex();
  if (index < this.genericCount) {
    this.generics[index]=this.generics[index].combine(type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}","@Override public void addMapping(ITypeVariable typeVar,IType type){
  if (type == Types.UNKNOWN) {
    return;
  }
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) != typeVar) {
    return;
  }
  if (index < this.genericCount) {
    this.generics[index]=this.generics[index].combine(type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}",0.8861003861003861
84583,"@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    int m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  int mods=this.modifiers & Modifiers.INFIX;
  if (instance != null && mods == Modifiers.INFIX) {
    IType t2=this.parameters[0].getType();
    int m=instance.getTypeMatch(t2);
    if (m == 0) {
      return 0;
    }
    match+=m;
    parIndex=1;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}","@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if ((this.modifiers & Modifiers.SYNTHETIC) != 0) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    int m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  int mods=this.modifiers & Modifiers.INFIX;
  if (instance != null && mods == Modifiers.INFIX) {
    IType t2=this.parameters[0].getType();
    int m=instance.getTypeMatch(t2);
    if (m == 0) {
      return 0;
    }
    match+=m;
    parIndex=1;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}",0.9782675237220692
84584,"@Override public IClass getTheClass(){
  return null;
}","@Override public IClass getTheClass(){
  return NULL_CLASS;
}",0.8793103448275862
84585,"private boolean computeVariable(REPLVariable field){
  this.getClassName();
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return false;
  }
  field.foldConstants();
  this.compileInnerClasses();
  field.compute(this.currentClassName);
  this.cleanup();
  return true;
}","private boolean computeVariable(REPLVariable field){
  this.getClassName();
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return false;
  }
  this.compileVariable(field);
  return true;
}",0.8369829683698297
84586,"@Override public void setValue(IValue value){
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  REPLVariable field=new REPLVariable(CODE_POSITION,name,Types.UNKNOWN,value);
  field.modifiers=Modifiers.FINAL;
  if (this.computeVariable(field)) {
    if (field.getType() != Types.VOID) {
      this.variables.put(field.name,field);
      System.out.println(field.toString());
      resultIndex++;
    }
  }
}","@Override public void setValue(IValue value){
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  this.getClassName();
  MarkerList markers=new MarkerList();
  value.resolveTypes(markers,this);
  value=value.resolve(markers,this);
  IType type=value.getType();
  IValue value1=value.withType(type,type,markers,this);
  if (value1 == null) {
  }
 else {
    value=value1;
    type=value1.getType();
  }
  value.checkTypes(markers,this);
  value.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return;
  }
  REPLVariable field=new REPLVariable(CODE_POSITION,name,type,value);
  field.modifiers=Modifiers.FINAL;
  this.compileVariable(field);
  if (type != Types.VOID) {
    this.variables.put(field.name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}",0.5847389558232932
84587,"@Override public IConstructor getConstructor(int index){
  return this.constructors[index];
}","@Override public IConstructor getConstructor(IParameter[] parameters,int parameterCount){
  outer:   for (int i=0; i < this.constructorCount; i++) {
    IConstructor c=this.constructors[i];
    if (c.parameterCount() != parameterCount) {
      continue;
    }
    for (int p=0; p < parameterCount; p++) {
      IType classParamType=parameters[p].getType();
      IType constructorParamType=c.getParameter(p).getType();
      if (!classParamType.equals(constructorParamType)) {
        continue outer;
      }
    }
    return c;
  }
  return null;
}",0.2305295950155763
84588,"public ClassMetadata(IClass iclass){
  this.theClass=iclass;
  Constructor constructor=new Constructor(this.theClass);
  constructor.modifiers=Modifiers.PUBLIC;
  this.constructor=constructor;
}","public ClassMetadata(IClass iclass){
  this.theClass=iclass;
}",0.484375
84589,"@Override public void checkTypes(MarkerList markers,IContext context){
  IType superType=this.theClass.getSuperType();
  if (superType == null) {
    return;
  }
  IConstructor match=IContext.resolveConstructor(superType,EmptyArguments.INSTANCE);
  if (match != null) {
    this.superConstructor=match;
    return;
  }
  markers.add(this.theClass.getPosition(),""String_Node_Str"",superType.toString());
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if ((this.methods & CONSTRUCTOR) != 0) {
    return;
  }
  IType superType=this.theClass.getSuperType();
  if (superType == null) {
    return;
  }
  IConstructor match=IContext.resolveConstructor(superType,EmptyArguments.INSTANCE);
  if (match != null) {
    this.superConstructor=match;
    return;
  }
  markers.add(this.theClass.getPosition(),""String_Node_Str"",superType.toString());
}",0.9317919075144508
84590,"@Override public void resolve(MarkerList markers,IContext context){
  this.constructor.type=this.theClass.getType();
  int parameterCount=this.theClass.parameterCount();
  IParameter[] parameters=this.theClass.getParameters();
  this.constructor.setParameters(parameters,parameterCount);
  if (parameterCount > 0 && parameters[parameterCount - 1].isVarargs()) {
    this.constructor.setVarargs();
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  IClassBody body=this.theClass.getBody();
  if (body != null) {
    IConstructor c=body.getConstructor(this.theClass.getParameters(),this.theClass.parameterCount());
    if (c != null) {
      this.constructor=c;
      this.methods|=CONSTRUCTOR;
      return;
    }
  }
  Constructor constructor=new Constructor(this.theClass);
  constructor.type=this.theClass.getType();
  constructor.modifiers=Modifiers.PUBLIC;
  int parameterCount=this.theClass.parameterCount();
  IParameter[] parameters=this.theClass.getParameters();
  constructor.setParameters(parameters,parameterCount);
  if (parameterCount > 0 && parameters[parameterCount - 1].isVarargs()) {
    constructor.setVarargs();
  }
  this.constructor=constructor;
}",0.6493288590604027
84591,"@Override public void getConstructorMatches(List<ConstructorMatch> list,IArguments arguments){
  int match=this.constructor.getSignatureMatch(arguments);
  if (match > 0) {
    list.add(new ConstructorMatch(this.constructor,match));
  }
}","@Override public void getConstructorMatches(List<ConstructorMatch> list,IArguments arguments){
  if ((this.methods & CONSTRUCTOR) != 0) {
    return;
  }
  int match=this.constructor.getSignatureMatch(arguments);
  if (match > 0) {
    list.add(new ConstructorMatch(this.constructor,match));
  }
}",0.8598130841121495
84592,"@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  StatementList list=new StatementList();
  if (instanceFields != null) {
    list.addValue(instanceFields);
  }
  if (this.superConstructor != null) {
    list.addValue(new InitializerCall(null,this.superConstructor,EmptyArguments.INSTANCE,true));
  }
  int count=this.theClass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=this.theClass.getParameter(i);
    list.addValue(new ClassParameterSetter(this.theClass,param));
  }
  this.constructor.setValue(list);
  this.constructor.write(writer,instanceFields);
}","@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  if ((this.methods & CONSTRUCTOR) != 0) {
    return;
  }
  StatementList list=new StatementList();
  if (instanceFields != null) {
    list.addValue(instanceFields);
  }
  if (this.superConstructor != null) {
    list.addValue(new InitializerCall(null,this.superConstructor,EmptyArguments.INSTANCE,true));
  }
  int count=this.theClass.parameterCount();
  for (int i=0; i < count; i++) {
    IParameter param=this.theClass.getParameter(i);
    list.addValue(new ClassParameterSetter(this.theClass,param));
  }
  this.constructor.setValue(list);
  this.constructor.write(writer,instanceFields);
}",0.9556057185854026
84593,"@Override public IType resolveType(Name name){
  if (name == this.name) {
    return new ClassType(this);
  }
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable var=this.generics[i];
    if (var.getName() == name) {
      return new TypeVarType(var);
    }
  }
  return this.unit.resolveType(name);
}","@Override public IType resolveType(Name name){
  if (name == this.name) {
    return new ClassType(this);
  }
  if (this.body != null) {
    IClass iclass=this.body.getClass(name);
    if (iclass != null) {
      return new ClassType(iclass);
    }
  }
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable var=this.generics[i];
    if (var.getName() == name) {
      return new TypeVarType(var);
    }
  }
  if (this.outerClass != null) {
    return this.outerClass.resolveType(name);
  }
  return this.unit.resolveType(name);
}",0.647887323943662
84594,"@Override public IClass resolveClass(Name name){
  if (this.body != null) {
    IClass clazz=this.body.getClass(name);
    if (clazz != null) {
      return clazz;
    }
  }
  if (this.outerClass != null) {
    return this.outerClass.resolveClass(name);
  }
  return this.unit.resolveClass(name);
}","@Override public IClass resolveClass(Name name){
  if (this.body != null) {
    IClass iclass=this.body.getClass(name);
    if (iclass != null) {
      return iclass;
    }
  }
  if (this.outerClass != null) {
    return this.outerClass.resolveClass(name);
  }
  return this.unit.resolveClass(name);
}",0.9749582637729548
84595,public IConstructor getConstructor(int index);,"public IConstructor getConstructor(IParameter[] parameters,int parameterCount);",0.672
84596,"@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,context);
  }
  super.resolveTypes(markers,this);
  for (int i=0; i < this.annotationCount; i++) {
    Annotation annotation=this.annotations[i];
    if (annotation.type.getTheClass() != Types.INTRINSIC_CLASS) {
      continue;
    }
    try {
      Array array=(Array)annotation.arguments.getValue(0,Annotation.VALUE);
      int len=array.valueCount();
      int[] opcodes=new int[len];
      for (int j=0; j < len; j++) {
        IntValue v=(IntValue)array.getValue(j);
        opcodes[j]=v.value;
      }
      this.intrinsicOpcodes=opcodes;
    }
 catch (    NullPointerException|ClassCastException ex) {
    }
    break;
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolve(markers,this,TypePosition.TYPE);
  }
  int index=(this.modifiers & Modifiers.STATIC) == 0 ? 1 : 0;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
    param.setIndex(index);
    IType type=param.getType();
    if (type == Types.LONG || type == Types.DOUBLE) {
      index+=2;
    }
 else {
      index++;
    }
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,context);
  }
  super.resolveTypes(markers,this);
  for (int i=0; i < this.annotationCount; i++) {
    Annotation annotation=this.annotations[i];
    if (annotation.type.getTheClass() != Types.INTRINSIC_CLASS) {
      continue;
    }
    try {
      Array array=(Array)annotation.arguments.getValue(0,Annotation.VALUE);
      int len=array.valueCount();
      int[] opcodes=new int[len];
      for (int j=0; j < len; j++) {
        IntValue v=(IntValue)array.getValue(j);
        opcodes[j]=v.value;
      }
      this.intrinsicOpcodes=opcodes;
    }
 catch (    NullPointerException|ClassCastException ex) {
    }
    break;
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolve(markers,this,TypePosition.TYPE);
  }
  int index=(this.modifiers & Modifiers.STATIC) == 0 ? 1 : 0;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
    param.setIndex(index);
    IType type=param.getType();
    if (type == Types.LONG || type == Types.DOUBLE) {
      index+=2;
    }
 else {
      index++;
    }
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    this.modifiers|=Modifiers.ABSTRACT | Modifiers.PUBLIC;
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
}",0.9414841451454724
84597,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    pm.popParser(true);
    return;
  }
switch (this.mode) {
case TYPE:
    if (type == Symbols.SEMICOLON) {
      if (token.isInferred()) {
        return;
      }
      this.reset();
      return;
    }
  if (type == Keywords.NEW) {
    if (this.theClass == null) {
      this.mode=0;
      throw new SyntaxError(token,""String_Node_Str"");
    }
    Constructor c=new Constructor(this.theClass);
    this.consumer.addConstructor(c);
    c.position=token.raw();
    c.modifiers=this.modifiers;
    c.setAnnotations(this.annotations,this.annotationCount);
    this.member=c;
    this.mode=PARAMETERS;
    return;
  }
int i=0;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
IToken next=token.next();
if (!ParserUtil.isIdentifier(next.type())) {
this.reset();
throw new SyntaxError(next,""String_Node_Str"");
}
if (this.theClass == null) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"");
}
Name name=next.nameValue();
CodeClass codeClass=new CodeClass(next.raw(),this.theClass.getUnit(),this.modifiers | i);
codeClass.setName(name);
codeClass.setAnnotations(this.getAnnotations(),this.annotationCount);
codeClass.setOuterClass(this.theClass);
ClassDeclarationParser parser=new ClassDeclarationParser(this.theClass.getBody(),codeClass);
pm.pushParser(parser);
this.reset();
return;
}
if (token.nameValue() == Name.at) {
Annotation annotation=new Annotation(token.raw());
this.addAnnotation(annotation);
pm.pushParser(new AnnotationParser(annotation));
return;
}
pm.pushParser(new TypeParser(this),true);
this.mode=NAME;
return;
case NAME:
if (!ParserUtil.isIdentifier(type)) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"",true);
}
IToken next=token.next();
type=next.type();
if (type == Symbols.SEMICOLON) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.consumer.addField(f);
pm.skip();
this.reset();
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=PARAMETERS;
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
Property p=new Property(this.theClass,token.nameValue(),this.type);
p.position=token.raw();
p.modifiers=this.modifiers;
p.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=p;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new PropertyParser(p));
return;
}
if (type == Symbols.EQUALS) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=f;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new ExpressionParser(f));
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
this.mode=GENERICS_END;
pm.skip();
pm.pushParser(new TypeVariableListParser(m));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case GENERICS_END:
this.mode=PARAMETERS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS:
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
pm.pushParser(new ParameterListParser((IParameterList)this.member));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS_END:
this.mode=METHOD_VALUE;
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case METHOD_VALUE:
if (type == Symbols.SEMICOLON) {
this.consumer.addMethod((IMethod)this.member);
this.reset();
return;
}
this.mode=METHOD_END;
if (type == Symbols.OPEN_CURLY_BRACKET) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member),true);
return;
}
if (type == Symbols.EQUALS) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member));
return;
}
if (type == Keywords.THROWS) {
pm.pushParser(new ExceptionListParser((IExceptionList)this.member));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case METHOD_END:
this.consumer.addMethod((IMethod)this.member);
pm.reparse();
this.reset();
return;
case FIELD_END:
this.consumer.addField((IField)this.member);
pm.reparse();
this.reset();
return;
case PROPERTY_END:
this.consumer.addProperty((IProperty)this.member);
pm.reparse();
this.reset();
return;
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
switch (this.mode) {
case TYPE:
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      pm.popParser(true);
      return;
    }
  if (type == Symbols.SEMICOLON) {
    if (token.isInferred()) {
      return;
    }
    this.reset();
    return;
  }
if (type == Keywords.NEW) {
  if (this.theClass == null) {
    this.mode=0;
    throw new SyntaxError(token,""String_Node_Str"");
  }
  Constructor c=new Constructor(this.theClass);
  c.position=token.raw();
  c.modifiers=this.modifiers;
  c.setAnnotations(this.annotations,this.annotationCount);
  this.member=c;
  this.mode=PARAMETERS;
  return;
}
int i=0;
if ((i=ModifierTypes.MEMBER.parse(type)) != -1) {
this.modifiers|=i;
return;
}
if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
IToken next=token.next();
if (!ParserUtil.isIdentifier(next.type())) {
this.reset();
throw new SyntaxError(next,""String_Node_Str"");
}
if (this.theClass == null) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"");
}
Name name=next.nameValue();
CodeClass codeClass=new CodeClass(next.raw(),this.theClass.getUnit(),this.modifiers | i);
codeClass.setName(name);
codeClass.setAnnotations(this.getAnnotations(),this.annotationCount);
codeClass.setOuterClass(this.theClass);
ClassDeclarationParser parser=new ClassDeclarationParser(this.theClass.getBody(),codeClass);
pm.skip();
pm.pushParser(parser);
this.reset();
return;
}
if (token.nameValue() == Name.at) {
Annotation annotation=new Annotation(token.raw());
this.addAnnotation(annotation);
pm.pushParser(new AnnotationParser(annotation));
return;
}
pm.pushParser(new TypeParser(this),true);
this.mode=NAME;
return;
case NAME:
if (!ParserUtil.isIdentifier(type)) {
this.reset();
throw new SyntaxError(token,""String_Node_Str"",true);
}
IToken next=token.next();
type=next.type();
if (type == Symbols.SEMICOLON || type == Symbols.CLOSE_CURLY_BRACKET) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.consumer.addField(f);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser(true);
return;
}
pm.skip();
this.reset();
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=PARAMETERS;
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
Property p=new Property(this.theClass,token.nameValue(),this.type);
p.position=token.raw();
p.modifiers=this.modifiers;
p.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=p;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new PropertyParser(p));
return;
}
if (type == Symbols.EQUALS) {
Field f=new Field(this.theClass,token.nameValue(),this.type);
f.position=token.raw();
f.modifiers=this.modifiers;
f.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=f;
this.mode=FIELD_END;
pm.skip();
pm.pushParser(new ExpressionParser(f));
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
Method m=new Method(this.theClass,token.nameValue(),this.type);
m.modifiers=this.modifiers;
m.position=token.raw();
m.setAnnotations(this.getAnnotations(),this.annotationCount);
this.member=m;
this.mode=GENERICS_END;
pm.skip();
pm.pushParser(new TypeVariableListParser(m));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case GENERICS_END:
this.mode=PARAMETERS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS:
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
pm.pushParser(new ParameterListParser((IParameterList)this.member));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case PARAMETERS_END:
this.mode=METHOD_VALUE;
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case METHOD_VALUE:
if (type == Symbols.CLOSE_CURLY_BRACKET) {
this.consumer.addMethod((IMethod)this.member);
pm.popParser(true);
return;
}
if (type == Symbols.SEMICOLON) {
this.consumer.addMethod((IMethod)this.member);
this.reset();
return;
}
this.mode=METHOD_END;
if (type == Symbols.OPEN_CURLY_BRACKET) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member),true);
return;
}
if (type == Symbols.EQUALS) {
pm.pushParser(new ExpressionParser((IValueConsumer)this.member));
return;
}
if (type == Keywords.THROWS) {
pm.pushParser(new ExceptionListParser((IExceptionList)this.member));
return;
}
this.mode=TYPE;
throw new SyntaxError(token,""String_Node_Str"");
case METHOD_END:
if (this.member instanceof IMethod) {
this.consumer.addMethod((IMethod)this.member);
}
 else {
this.consumer.addConstructor((IConstructor)this.member);
}
pm.reparse();
this.reset();
return;
case FIELD_END:
this.consumer.addField((IField)this.member);
pm.reparse();
this.reset();
return;
case PROPERTY_END:
this.consumer.addProperty((IProperty)this.member);
pm.reparse();
this.reset();
return;
}
}",0.8794709948902916
84598,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == MODIFIERS) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.modifiers|=i;
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str"");
  }
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass=new CodeClass(token.raw(),(IDyvilHeader)this.classList,this.modifiers);
      if (this.annotations != null) {
        this.theClass.setAnnotations(this.annotations,this.annotations.length);
      }
      this.theClass.setName(token.nameValue());
      this.mode=POST_NAME;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.mode == GENERICS_END) {
    this.mode=POST_GENERICS;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.mode == PARAMETERS_END) {
    this.mode=POST_PARAMETERS;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        pm.pushParser(new TypeListParser(this));
        this.mode=BODY;
        return;
      }
      pm.pushParser(new TypeParser(this));
      this.mode=POST_EXTENDS;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        throw new SyntaxError(token,""String_Node_Str"");
      }
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      IClassBody body=new ClassBody(this.theClass);
      this.theClass.setBody(body);
      pm.pushParser(new ClassBodyParser(this.theClass,body));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.isInferred()) {
        int nextType=token.next().type();
switch (nextType) {
case Keywords.EXTENDS:
          this.mode=EXTENDS;
        return;
case Keywords.IMPLEMENTS:
      this.mode=IMPLEMENTS;
    return;
case Symbols.OPEN_SQUARE_BRACKET:
  this.mode=GENERICS;
return;
case Symbols.OPEN_PARENTHESIS:
this.mode=PARAMETERS;
return;
}
}
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == BODY_END) {
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == MODIFIERS) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.modifiers|=i;
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str"");
  }
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass=new CodeClass(token.raw(),(IDyvilHeader)this.classList,this.modifiers);
      if (this.annotations != null) {
        this.theClass.setAnnotations(this.annotations,this.annotations.length);
      }
      this.theClass.setName(token.nameValue());
      this.mode=POST_NAME;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.mode == GENERICS_END) {
    this.mode=POST_GENERICS;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.mode == PARAMETERS_END) {
    this.mode=POST_PARAMETERS;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        pm.pushParser(new TypeListParser(this));
        this.mode=BODY;
        return;
      }
      pm.pushParser(new TypeParser(this));
      this.mode=POST_EXTENDS;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS)) {
        throw new SyntaxError(token,""String_Node_Str"");
      }
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      IClassBody body=new ClassBody(this.theClass);
      this.theClass.setBody(body);
      pm.pushParser(new ClassBodyParser(this.theClass,body));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.isInferred()) {
        int nextType=token.next().type();
switch (nextType) {
case Keywords.EXTENDS:
          this.mode=EXTENDS;
        return;
case Keywords.IMPLEMENTS:
      this.mode=IMPLEMENTS;
    return;
case Symbols.OPEN_SQUARE_BRACKET:
  this.mode=GENERICS;
return;
case Symbols.OPEN_PARENTHESIS:
this.mode=PARAMETERS;
return;
}
}
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
this.mode=BODY_END;
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BODY_END) {
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser();
this.classList.addClass(this.theClass);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
}",0.978079479564418
84599,"@Override public IType resolveType(ITypeVariable typeVar){
  return this.map.get(typeVar);
}","@Override public IType resolveType(ITypeVariable typeVar){
  IType type=this.map.get(typeVar);
  if (type == null) {
    return Types.ANY;
  }
  return type;
}",0.6932270916334662
84600,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType().getConcreteType(this.type).getParameterType();
          param.setType(parType);
        }
      }
      this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IType valueType=this.value.getType().getReferenceType();
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType().getConcreteType(this.type).getParameterType();
          param.setType(parType);
        }
      }
      this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IType valueType=this.value.getType().getReferenceType();
    IValue value1=this.value.withType(this.returnType,this.returnType,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.9939363314805456
84601,"@Override public void write(ClassWriter writer) throws BytecodeException {
  boolean instance=this.thisClass != null;
  int modifiers=instance ? Modifiers.PRIVATE | Modifiers.SYNTHETIC : Modifiers.PRIVATE | Modifiers.STATIC | Modifiers.SYNTHETIC;
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(modifiers,this.name,this.getLambdaDescriptor(),null,null));
  if (instance) {
    mw.setThisType(this.thisClass.getInternalName());
  }
  int index=0;
  for (int i=0; i < this.capturedFieldCount; i++) {
    CaptureVariable capture=this.capturedFields[i];
    capture.index=index;
    index=mw.registerParameter(index,capture.variable.getName().qualified,capture.getReferenceType(),0);
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.setIndex(index);
    index=mw.registerParameter(index,param.getName().qualified,param.getType(),0);
  }
  mw.begin();
  this.value.writeExpression(mw);
  mw.end(this.returnType);
}","@Override public void write(ClassWriter writer) throws BytecodeException {
  boolean instance=this.thisClass != null;
  int modifiers=instance ? Modifiers.PRIVATE | Modifiers.SYNTHETIC : Modifiers.PRIVATE | Modifiers.STATIC | Modifiers.SYNTHETIC;
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(modifiers,this.name,this.getLambdaDescriptor(),null,null));
  int index=0;
  if (instance) {
    mw.setThisType(this.thisClass.getInternalName());
    index=1;
  }
  for (int i=0; i < this.capturedFieldCount; i++) {
    CaptureVariable capture=this.capturedFields[i];
    capture.index=index;
    index=mw.registerParameter(index,capture.variable.getName().qualified,capture.getReferenceType(),0);
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.setIndex(index);
    index=mw.registerParameter(index,param.getName().qualified,param.getType(),0);
  }
  mw.begin();
  this.value.writeExpression(mw);
  mw.end(this.returnType);
}",0.9782057780030412
84602,"@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,context);
  }
  this.context=context;
  this.value.resolveTypes(markers,this);
  this.context=null;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,context);
    IType type=param.getType();
    if (type != null && type.isPrimitive()) {
      param.setType(type.getReferenceType());
    }
  }
  this.context=context;
  this.value.resolveTypes(markers,this);
  this.context=null;
}",0.8189415041782729
84603,"public default IType getReferenceType(){
  return null;
}","public default IType getReferenceType(){
  return this.getType();
}",0.8548387096774194
84604,"@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) == typeVar) {
    if (index > this.genericCount) {
      return new TypeVarType(typeVar);
    }
    return this.generics[index];
  }
  return this.instanceType.resolveType(typeVar);
}","@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (this.isMethodTypeVariable(typeVar)) {
    if (index > this.genericCount) {
      return new TypeVarType(typeVar);
    }
    return this.generics[index];
  }
  return this.instanceType.resolveType(typeVar);
}",0.9466882067851372
84605,"@Override public void addMapping(ITypeVariable typeVar,IType type){
  if (type == Types.UNKNOWN) {
    return;
  }
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) != typeVar) {
    return;
  }
  if (index < this.genericCount) {
    this.generics[index]=this.generics[index].combine(type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}","@Override public void addMapping(ITypeVariable typeVar,IType type){
  if (type == Types.UNKNOWN) {
    return;
  }
  int index=typeVar.getIndex();
  if (!this.isMethodTypeVariable(typeVar)) {
    return;
  }
  if (index < this.genericCount) {
    this.generics[index]=this.generics[index].combine(type);
    return;
  }
  this.genericCount=index + 1;
  if (index >= this.generics.length) {
    IType[] temp=new IType[index + 1];
    System.arraycopy(this.generics,0,temp,0,this.generics.length);
    this.generics=temp;
  }
  this.generics[typeVar.getIndex()]=type;
}",0.9737762237762236
84606,"public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.typeCount(); i++) {
    this.generics[i]=this.generics[i].resolve(markers,context,TypePosition.TYPE);
  }
}","public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i]=this.generics[i].resolve(markers,context,TypePosition.TYPE);
  }
}",0.9718670076726342
84607,"@Override public IType getConcreteType(ITypeContext context){
  if (context == null) {
    return this;
  }
  IType t=context.resolveType(this.typeVar);
  if (t != null) {
    if (t.isPrimitive()) {
      return t.getReferenceType();
    }
    return t;
  }
  return this;
}","@Override public IType getConcreteType(ITypeContext context){
  if (context == null) {
    return this;
  }
  IType t=context.resolveType(this.typeVar);
  if (t != Types.ANY) {
    if (t.isPrimitive()) {
      return t.getReferenceType();
    }
    return t;
  }
  return this;
}",0.976491862567812
84608,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,this);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.value.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,this);
    boolean inferType=false;
    if (this.type == Types.UNKNOWN) {
      inferType=true;
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
        this.type=Types.ANY;
      }
    }
    IValue value1=this.value.withType(this.type,this.type,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      if (inferType) {
        this.type=value1.getType();
      }
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    this.type=Types.ANY;
  }
}",0.9815465729349736
84609,"@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.hasTypeVariables()) {
    return genericData;
  }
  if (genericData == null) {
    genericData=new GenericData(this,this.genericCount);
    if (instance != null) {
      genericData.instanceType=instance.getType();
    }
    this.inferTypes(genericData,instance,arguments);
    return genericData;
  }
  genericData.method=this;
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
  genericData.setTypeCount(this.genericCount);
  this.inferTypes(genericData,instance,arguments);
  return genericData;
}","@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.hasTypeVariables()) {
    return genericData;
  }
  if (genericData == null) {
    genericData=new GenericData(this,this.genericCount);
    this.inferTypes(genericData,instance,arguments);
    return genericData;
  }
  genericData.method=this;
  genericData.setTypeCount(this.genericCount);
  this.inferTypes(genericData,instance,arguments);
  return genericData;
}",0.5742049469964664
84610,"@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,context);
  }
  super.resolveTypes(markers,this);
  for (int i=0; i < this.annotationCount; i++) {
    Annotation annotation=this.annotations[i];
    if (annotation.type.getTheClass() != Types.INTRINSIC_CLASS) {
      continue;
    }
    try {
      Array array=(Array)annotation.arguments.getValue(0,Annotation.VALUE);
      int len=array.valueCount();
      int[] opcodes=new int[len];
      for (int j=0; j < len; j++) {
        IntValue v=(IntValue)array.getValue(j);
        opcodes[j]=v.value;
      }
      this.intrinsicOpcodes=opcodes;
    }
 catch (    NullPointerException|ClassCastException ex) {
    }
    break;
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolve(markers,this,TypePosition.TYPE);
  }
  int index=(this.modifiers & Modifiers.STATIC) == 0 ? 1 : 0;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
    param.setIndex(index);
    IType type=param.getType();
    if (type == Types.LONG || type == Types.DOUBLE) {
      index+=2;
    }
 else {
      index++;
    }
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].resolveTypes(markers,context);
  }
  super.resolveTypes(markers,this);
  for (int i=0; i < this.annotationCount; i++) {
    Annotation annotation=this.annotations[i];
    if (annotation.type.getTheClass() != Types.INTRINSIC_CLASS) {
      continue;
    }
    try {
      Array array=(Array)annotation.arguments.getValue(0,Annotation.VALUE);
      int len=array.valueCount();
      int[] opcodes=new int[len];
      for (int j=0; j < len; j++) {
        IntValue v=(IntValue)array.getValue(j);
        opcodes[j]=v.value;
      }
      this.intrinsicOpcodes=opcodes;
    }
 catch (    NullPointerException|ClassCastException ex) {
    }
    break;
  }
  for (int i=0; i < this.exceptionCount; i++) {
    this.exceptions[i]=this.exceptions[i].resolve(markers,this,TypePosition.TYPE);
  }
  int index=(this.modifiers & Modifiers.STATIC) == 0 ? 1 : 0;
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    param.resolveTypes(markers,this);
    param.setIndex(index);
    IType type=param.getType();
    if (type == Types.LONG || type == Types.DOUBLE) {
      index+=2;
    }
 else {
      index++;
    }
  }
  if (this.value != null) {
    this.value.resolveTypes(markers,this);
  }
 else   if (this.theClass.hasModifier(Modifiers.ABSTRACT)) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
}",0.9628055260361318
84611,"private void inferTypes(GenericData genericData,IValue instance,IArguments arguments){
  int len=arguments.size();
  IParameter param;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    this.parameters[0].getType().inferTypes(instance.getType(),genericData);
    for (int i=0; i < len; i++) {
      param=this.parameters[i + 1];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
 else {
    len=Math.min(this.parameterCount,len);
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
}","private void inferTypes(GenericData genericData,IValue instance,IArguments arguments){
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
 else {
    genericData.instanceType=this.theClass.getType();
  }
  int len=arguments.size();
  IParameter param;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    this.parameters[0].getType().inferTypes(instance.getType(),genericData);
    for (int i=0; i < len; i++) {
      param=this.parameters[i + 1];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
 else {
    len=Math.min(this.parameterCount,len);
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      param.getType().inferTypes(arguments.getType(i,param),genericData);
    }
  }
}",0.8997926744989634
84612,"@Override public void checkTypes(MarkerList markers,IContext context){
  super.checkTypes(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].checkTypes(markers,context);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,this);
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  super.checkTypes(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].checkTypes(markers,context);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,this);
  }
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
}",0.8032407407407407
84613,"@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (index == this.parameterCount) {
    return this.returnType;
  }
  return this.parameterTypes[index];
}","@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (index == this.parameterCount) {
    return this.returnType;
  }
  if (index > this.parameterCount) {
    return Types.ANY;
  }
  return this.parameterTypes[index];
}",0.8373101952277657
84614,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    this.parameterTypes[0].toString(prefix,buffer);
    buffer.append(' ');
  }
 else   if (this.parameterCount > 0) {
    buffer.append(Formatting.Method.parametersStart);
    Util.astToString(prefix,this.parameterTypes,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(Formatting.Method.parametersEnd);
    buffer.append(' ');
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.returnType.toString(""String_Node_Str"",buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    if (this.parameterTypes[0].typeTag() == TUPLE) {
      buffer.append(Formatting.Method.parametersStart);
      this.parameterTypes[0].toString(prefix,buffer);
      buffer.append(Formatting.Method.parametersEnd);
    }
 else {
      this.parameterTypes[0].toString(prefix,buffer);
    }
    buffer.append(' ');
  }
 else   if (this.parameterCount > 0) {
    buffer.append(Formatting.Method.parametersStart);
    Util.astToString(prefix,this.parameterTypes,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(Formatting.Method.parametersEnd);
    buffer.append(' ');
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.returnType.toString(""String_Node_Str"",buffer);
}",0.6590421729807004
84615,"private void checkMethod(IMethod m){
  Name name=m.getName();
  if (name == Name.equals) {
    if (m.parameterCount() == 1 && m.getParameter(0).getType().equals(Types.OBJECT)) {
      this.methods|=EQUALS;
    }
    return;
  }
  if (name == Name.hashCode) {
    if (m.parameterCount() == 0) {
      this.methods|=HASHCODE;
    }
    return;
  }
  if (name == Name.toString) {
    if (m.parameterCount() == 0) {
      this.methods|=TOSTRING;
    }
    return;
  }
  if (name == Name.apply) {
    if (m.parameterCount() == this.theClass.parameterCount()) {
      int len=this.theClass.parameterCount();
      for (int i=0; i < len; i++) {
        IType t1=m.getParameter(i).getType();
        IType t2=m.getParameter(i).getType();
        if (!t1.classEquals(t2) || t1.getArrayDimensions() != t2.getArrayDimensions()) {
          return;
        }
      }
      this.methods|=APPLY;
    }
    return;
  }
}","private void checkMethod(IMethod m){
  Name name=m.getName();
  if (name == Name.equals) {
    if (m.parameterCount() == 1 && m.getParameter(0).getType().equals(Types.OBJECT)) {
      this.methods|=EQUALS;
    }
    return;
  }
  if (name == Name.hashCode) {
    if (m.parameterCount() == 0) {
      this.methods|=HASHCODE;
    }
    return;
  }
  if (name == Name.toString) {
    if (m.parameterCount() == 0) {
      this.methods|=TOSTRING;
    }
    return;
  }
  if (name == Name.apply) {
    if (m.parameterCount() == this.theClass.parameterCount()) {
      int len=this.theClass.parameterCount();
      for (int i=0; i < len; i++) {
        IType t1=m.getParameter(i).getType();
        IType t2=m.getParameter(i).getType();
        if (!t1.equals(t2)) {
          return;
        }
      }
      this.methods|=APPLY;
    }
    return;
  }
}",0.961736150770988
84616,"@Override public void resolve(MarkerList markers,IContext context){
  IClassBody body=this.theClass.getBody();
  if (body != null) {
    IConstructor c=body.getConstructor(this.theClass.getParameters(),this.theClass.parameterCount());
    if (c != null) {
      this.constructor=c;
      this.methods|=CONSTRUCTOR;
      return;
    }
  }
  Constructor constructor=new Constructor(this.theClass);
  constructor.type=this.theClass.getType();
  constructor.modifiers=Modifiers.PUBLIC;
  int parameterCount=this.theClass.parameterCount();
  IParameter[] parameters=this.theClass.getParameters();
  constructor.setParameters(parameters,parameterCount);
  if (parameterCount > 0 && parameters[parameterCount - 1].isVarargs()) {
    constructor.setVarargs();
  }
  this.constructor=constructor;
}","@Override public void resolve(MarkerList markers,IContext context){
  IClassBody body=this.theClass.getBody();
  if (body != null && body.constructorCount() > 0) {
    IConstructor c=body.getConstructor(this.theClass.getParameters(),this.theClass.parameterCount());
    if (c != null) {
      this.constructor=c;
      this.methods|=CONSTRUCTOR;
      return;
    }
    if (this.theClass.parameterCount() == 0) {
      this.methods|=CONSTRUCTOR;
      return;
    }
  }
  Constructor constructor=new Constructor(this.theClass);
  constructor.type=this.theClass.getType();
  constructor.modifiers=Modifiers.PUBLIC;
  int parameterCount=this.theClass.parameterCount();
  IParameter[] parameters=this.theClass.getParameters();
  constructor.setParameters(parameters,parameterCount);
  if (parameterCount > 0 && parameters[parameterCount - 1].isVarargs()) {
    constructor.setVarargs();
  }
  this.constructor=constructor;
}",0.92343658679135
84617,"@Override public void addValue(int index,IValue value){
  int i=this.valueCount++;
  System.arraycopy(this.values,index,this.values,index + 1,i - index + 1);
  this.values[index]=value;
}","@Override public void addValue(int index,IValue value){
  IValue[] temp=new IValue[++this.valueCount];
  System.arraycopy(this.values,0,temp,0,index);
  temp[index]=value;
  System.arraycopy(this.values,index,temp,index + 1,this.valueCount - index - 1);
  this.values=temp;
}",0.5887445887445888
84618,"@Override public void addValue(int index,IValue value){
  int i=this.valueCount++;
  System.arraycopy(this.values,index,this.values,index + 1,i - index + 1);
  this.values[index]=value;
}","@Override public void addValue(int index,IValue value){
  IValue[] temp=new IValue[++this.valueCount];
  System.arraycopy(this.values,0,temp,0,index);
  temp[index]=value;
  System.arraycopy(this.values,index,temp,index + 1,this.valueCount - index - 1);
  this.values=temp;
}",0.5887445887445888
84619,"@Override public void addValue(int index,IValue value){
  int i=this.valueCount++;
  System.arraycopy(this.values,index,this.values,index + 1,i - index + 1);
  this.values[index]=value;
}","@Override public void addValue(int index,IValue value){
  IValue[] temp=new IValue[++this.valueCount];
  System.arraycopy(this.values,0,temp,0,index);
  temp[index]=value;
  System.arraycopy(this.values,index,temp,index + 1,this.valueCount - index - 1);
  this.values=temp;
}",0.5887445887445888
84620,"public static void main(String[] args){
  long now=System.nanoTime();
  long totalTime=now;
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  initLogger();
  loadConfig(args[0]);
  File sourceDir=config.sourceDir;
  if (!sourceDir.exists()) {
    logger.severe(""String_Node_Str"" + sourceDir + ""String_Node_Str"");
  }
  File outputDir=config.outputDir;
  int phases=DyvilCompiler.phases.size();
  int libs=config.libraries.size();
  logger.info(""String_Node_Str"" + VERSION + ""String_Node_Str""+ DYVIL_VERSION);
  logger.info(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
  if (DyvilCompiler.phases.contains(ICompilerPhase.RESOLVE_TYPES)) {
    now=System.nanoTime();
    for (    Library library : config.libraries) {
      library.loadLibrary();
    }
    long now1=System.nanoTime();
    now=now1 - now;
    logger.fine(""String_Node_Str"" + libs + (libs == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ Util.toTime(now)+ ""String_Node_Str"");
    Package.init();
    Types.init();
    now1=System.nanoTime() - now1;
    logger.fine(""String_Node_Str"" + Util.toTime(now1) + ""String_Node_Str"");
  }
  now=System.nanoTime();
  logger.info(""String_Node_Str"" + sourceDir + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  fileFinder.findUnits(sourceDir,outputDir,null);
  int fileCount=fileFinder.files.size();
  int unitCount=fileFinder.units.size();
  int packages=Package.rootPackage.subPackages.size();
  now=System.nanoTime() - now;
  logger.info(""String_Node_Str"" + packages + (packages == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ fileCount+ (fileCount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ unitCount+ (unitCount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Util.toTime(now)+ ""String_Node_Str"");
  logger.info(""String_Node_Str"");
  now=System.nanoTime();
  if (debug) {
    logger.info(""String_Node_Str"" + phases + (phases == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ DyvilCompiler.phases);
    for (    ICompilerPhase phase : DyvilCompiler.phases) {
      long now1=System.nanoTime();
      logger.info(""String_Node_Str"" + phase.getName());
      try {
        phase.apply(fileFinder.units);
        now1=System.nanoTime() - now1;
        logger.info(phase.getName() + ""String_Node_Str"" + Util.toTime(now1)+ ""String_Node_Str"");
      }
 catch (      Throwable t) {
        logger.info(phase.getName() + ""String_Node_Str"");
        logger.throwing(phase.getName(),""String_Node_Str"",t);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
        return;
      }
    }
  }
 else {
    for (    ICompilerPhase phase : DyvilCompiler.phases) {
      try {
        phase.apply(fileFinder.units);
      }
 catch (      Throwable t) {
        logger.throwing(phase.getName(),""String_Node_Str"",t);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
        return;
      }
    }
  }
  long l=System.nanoTime();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + Util.toTime(l - now) + ""String_Node_Str""+ Util.toTime(l - totalTime)+ ""String_Node_Str"");
}","public static void main(String[] args){
  long now=System.nanoTime();
  long totalTime=now;
  for (int i=1; i < args.length; i++) {
    addStates(args[i]);
  }
  initLogger();
  loadConfig(args[0]);
  File sourceDir=config.sourceDir;
  if (!sourceDir.exists()) {
    logger.severe(""String_Node_Str"" + sourceDir + ""String_Node_Str"");
  }
  File outputDir=config.outputDir;
  int phases=DyvilCompiler.phases.size();
  int libs=config.libraries.size();
  logger.info(""String_Node_Str"" + VERSION + ""String_Node_Str""+ DYVIL_VERSION);
  logger.info(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
  if (DyvilCompiler.phases.contains(ICompilerPhase.RESOLVE_TYPES)) {
    now=System.nanoTime();
    for (    Library library : config.libraries) {
      library.loadLibrary();
    }
    long now1=System.nanoTime();
    now=now1 - now;
    logger.fine(""String_Node_Str"" + libs + (libs == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ Util.toTime(now)+ ""String_Node_Str"");
    Package.init();
    Types.init();
    now1=System.nanoTime() - now1;
    logger.fine(""String_Node_Str"" + Util.toTime(now1) + ""String_Node_Str"");
  }
  now=System.nanoTime();
  logger.info(""String_Node_Str"" + sourceDir + ""String_Node_Str""+ outputDir+ ""String_Node_Str"");
  config.findUnits(fileFinder);
  int fileCount=fileFinder.files.size();
  int unitCount=fileFinder.units.size();
  int packages=Package.rootPackage.subPackages.size();
  now=System.nanoTime() - now;
  logger.info(""String_Node_Str"" + packages + (packages == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ fileCount+ (fileCount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ unitCount+ (unitCount == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str""+ Util.toTime(now)+ ""String_Node_Str"");
  logger.info(""String_Node_Str"");
  now=System.nanoTime();
  if (debug) {
    logger.info(""String_Node_Str"" + phases + (phases == 1 ? ""String_Node_Str"" : ""String_Node_Str"")+ DyvilCompiler.phases);
    for (    ICompilerPhase phase : DyvilCompiler.phases) {
      long now1=System.nanoTime();
      logger.info(""String_Node_Str"" + phase.getName());
      try {
        phase.apply(fileFinder.units);
        now1=System.nanoTime() - now1;
        logger.info(phase.getName() + ""String_Node_Str"" + Util.toTime(now1)+ ""String_Node_Str"");
      }
 catch (      Throwable t) {
        logger.info(phase.getName() + ""String_Node_Str"");
        logger.throwing(phase.getName(),""String_Node_Str"",t);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
        return;
      }
    }
  }
 else {
    for (    ICompilerPhase phase : DyvilCompiler.phases) {
      try {
        phase.apply(fileFinder.units);
      }
 catch (      Throwable t) {
        logger.throwing(phase.getName(),""String_Node_Str"",t);
        logger.info(""String_Node_Str"");
        logger.info(""String_Node_Str"" + Util.toTime(System.nanoTime() - now) + ""String_Node_Str"");
        return;
      }
    }
  }
  long l=System.nanoTime();
  logger.info(""String_Node_Str"");
  logger.info(""String_Node_Str"" + Util.toTime(l - now) + ""String_Node_Str""+ Util.toTime(l - totalTime)+ ""String_Node_Str"");
}",0.9919950738916256
84621,"@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
  }
  if (using) {
    if (!(context instanceof IClass)) {
      markers.add(this.position,""String_Node_Str"");
      return;
    }
    IClassBody body=((IClass)context).getBody();
    IDataMember field=body.getField(this.name);
    if (field != null) {
      this.field=field;
      return;
    }
    this.methods=new ArrayList();
    int len=body.methodCount();
    for (int i=0; i < len; i++) {
      IMethod m=body.getMethod(i);
      if (m.getName() == this.name) {
        this.methods.add(m);
      }
    }
    if (!this.methods.isEmpty()) {
      return;
    }
    markers.add(this.position,""String_Node_Str"",this.name.qualified);
    return;
  }
  Package pack=context.resolvePackage(this.name);
  if (pack != null) {
    this.thePackage=pack;
    return;
  }
  IClass iclass=context.resolveClass(this.name);
  if (iclass != null) {
    this.theClass=iclass;
    return;
  }
  markers.add(this.position,""String_Node_Str"",this.name.qualified);
}","@Override public void resolveTypes(MarkerList markers,IContext context,boolean using){
  if (this.parent != null) {
    this.parent.resolveTypes(markers,context,false);
    context=this.parent.getContext();
    if (context == null) {
      return;
    }
  }
  if (using) {
    if (!(context instanceof IClass)) {
      markers.add(this.position,""String_Node_Str"");
      return;
    }
    IClassBody body=((IClass)context).getBody();
    IDataMember field=body.getField(this.name);
    if (field != null) {
      this.field=field;
      return;
    }
    this.methods=new ArrayList();
    int len=body.methodCount();
    for (int i=0; i < len; i++) {
      IMethod m=body.getMethod(i);
      if (m.getName() == this.name) {
        this.methods.add(m);
      }
    }
    if (!this.methods.isEmpty()) {
      return;
    }
    markers.add(this.position,""String_Node_Str"",this.name.qualified);
    return;
  }
  Package pack=context.resolvePackage(this.name);
  if (pack != null) {
    this.thePackage=pack;
    return;
  }
  IClass iclass=context.resolveClass(this.name);
  if (iclass != null) {
    this.theClass=iclass;
    return;
  }
  markers.add(this.position,""String_Node_Str"",this.name.qualified);
}",0.9801268498942918
84622,"@Override public IType resolveType(Name name){
  ITypeAlias typeAlias=this.typeAliases.get(name);
  if (typeAlias != null) {
    return typeAlias.getType();
  }
  IClass iclass=this.resolveClass(name);
  if (iclass != null) {
    return new ClassType(iclass);
  }
  for (int i=0; i < this.includeCount; i++) {
    IType t=this.includes[i].getHeader().resolveType(name);
    if (t != null) {
      return t;
    }
  }
  return null;
}","@Override public IType resolveType(Name name){
  ITypeAlias typeAlias=this.typeAliases.get(name);
  if (typeAlias != null) {
    return typeAlias.getType();
  }
  IClass iclass=this.resolveClass(name);
  if (iclass != null) {
    return new ClassType(iclass);
  }
  for (int i=0; i < this.includeCount; i++) {
    IType t=this.includes[i].resolveType(name);
    if (t != null) {
      return t;
    }
  }
  return null;
}",0.9859484777517564
84623,"@Override public IClass resolveClass(Name name){
  IClass iclass;
  for (int i=0; i < this.importCount; i++) {
    iclass=this.imports[i].resolveClass(name);
    if (iclass != null) {
      return iclass;
    }
  }
  for (int i=0; i < this.includeCount; i++) {
    iclass=this.includes[i].getHeader().resolveClass(name);
    if (iclass != null) {
      return iclass;
    }
  }
  if (this.pack != null) {
    return this.pack.resolveClass(name);
  }
  return null;
}","@Override public IClass resolveClass(Name name){
  IClass iclass;
  for (int i=0; i < this.importCount; i++) {
    iclass=this.imports[i].resolveClass(name);
    if (iclass != null) {
      return iclass;
    }
  }
  for (int i=0; i < this.includeCount; i++) {
    iclass=this.includes[i].resolveClass(name);
    if (iclass != null) {
      return iclass;
    }
  }
  if (this.pack != null) {
    return this.pack.resolveClass(name);
  }
  return null;
}",0.9869565217391304
84624,"@Override public IDataMember resolveField(Name name){
  for (int i=0; i < this.usingCount; i++) {
    IDataMember field=this.usings[i].resolveField(name);
    if (field != null) {
      return field;
    }
  }
  for (int i=0; i < this.includeCount; i++) {
    IDataMember field=this.includes[i].getHeader().resolveField(name);
    if (field != null) {
      return field;
    }
  }
  return null;
}","@Override public IDataMember resolveField(Name name){
  for (int i=0; i < this.usingCount; i++) {
    IDataMember field=this.usings[i].resolveField(name);
    if (field != null) {
      return field;
    }
  }
  for (int i=0; i < this.includeCount; i++) {
    IDataMember field=this.includes[i].resolveField(name);
    if (field != null) {
      return field;
    }
  }
  return null;
}",0.9846938775510204
84625,"@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  for (int i=0; i < this.usingCount; i++) {
    this.usings[i].getMethodMatches(list,instance,name,arguments);
  }
  for (int i=0; i < this.includeCount; i++) {
    this.includes[i].getHeader().getMethodMatches(list,instance,name,arguments);
  }
}","@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  for (int i=0; i < this.usingCount; i++) {
    this.usings[i].getMethodMatches(list,instance,name,arguments);
  }
  for (int i=0; i < this.includeCount; i++) {
    this.includes[i].getMethodMatches(list,instance,name,arguments);
  }
}",0.9829545454545454
84626,"public final void parse(MarkerList markers,TokenIterator tokens){
  this.tokens=tokens;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    SyntaxError ex) {
{
        if (ex.reparse) {
          this.reparse=true;
        }
        markers.add(ex);
      }
    }
catch (    Exception ex) {
{
        DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
        markers.add(new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str""+ ex.getMessage()));
      }
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.name+ ""String_Node_Str""+ this.parser.mode);
    }
  }
}","public final void parse(MarkerList markers,TokenIterator tokens){
  tokens.reset();
  this.tokens=tokens;
  IToken token=null;
  while (true) {
    if (this.reparse) {
      this.reparse=false;
    }
 else {
      token=tokens.next();
      if (token == null) {
        break;
      }
    }
    if (this.skip > 0) {
      this.skip--;
      continue;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    SyntaxError ex) {
{
        if (ex.reparse) {
          this.reparse=true;
        }
        markers.add(ex);
      }
    }
catch (    Exception ex) {
{
        DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
        markers.add(new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str""+ ex.getMessage()));
      }
    }
    if (this.parser == null) {
      break;
    }
    if (DyvilCompiler.parseStack) {
      System.out.println(token + ""String_Node_Str"" + this.parser.name+ ""String_Node_Str""+ this.parser.mode);
    }
  }
}",0.9907502569373072
84627,"@Override public void reset(){
  this.mode=PACKAGE | IMPORT;
}","@Override public void reset(){
  this.mode=PACKAGE;
}",0.9217391304347826
84628,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (token.type() == Symbols.SEMICOLON) {
    return;
  }
  if (this.isInMode(PACKAGE)) {
    if (this.parsePackage(pm,token)) {
      this.mode=IMPORT;
      return;
    }
  }
  if (this.isInMode(IMPORT)) {
    if (this.parseImport(pm,token)) {
      return;
    }
  }
  throw new SyntaxError(token,""String_Node_Str"");
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (token.type() == Symbols.SEMICOLON) {
    return;
  }
switch (this.mode) {
case PACKAGE:
    if (this.parsePackage(pm,token)) {
      this.mode=IMPORT;
      return;
    }
case IMPORT:
  if (this.parseImport(pm,token)) {
    return;
  }
}
throw new SyntaxError(token,""String_Node_Str"" + token + ""String_Node_Str"");
}",0.7677018633540372
84629,"public DyvilHeaderParser(IDyvilHeader unit){
  this.unit=unit;
  this.mode=PACKAGE | IMPORT;
}","public DyvilHeaderParser(IDyvilHeader unit){
  this.unit=unit;
  this.mode=PACKAGE;
}",0.9497206703910616
84630,"public DyvilUnitParser(IDyvilHeader unit){
  super(unit);
  this.mode=PACKAGE | IMPORT | CLASS;
}","public DyvilUnitParser(IDyvilHeader unit){
  super(unit);
  this.mode=PACKAGE;
}",0.903954802259887
84631,"@Override public void reset(){
  this.mode=PACKAGE | IMPORT | CLASS;
}","@Override public void reset(){
  this.mode=PACKAGE;
}",0.8617886178861789
84632,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.isInMode(PACKAGE)) {
    if (this.parsePackage(pm,token)) {
      this.mode=IMPORT | CLASS;
      return;
    }
  }
  if (this.isInMode(IMPORT)) {
    if (this.parseImport(pm,token)) {
      this.mode=IMPORT | CLASS;
      return;
    }
  }
  if (this.isInMode(CLASS)) {
    if (type == Symbols.SEMICOLON) {
      return;
    }
    this.mode=CLASS;
    pm.pushParser(new ClassDeclarationParser(this.unit),true);
    return;
  }
  throw new SyntaxError(token,""String_Node_Str"");
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
switch (this.mode) {
case PACKAGE:
    if (this.parsePackage(pm,token)) {
      this.mode=IMPORT;
      return;
    }
case IMPORT:
  if (this.parseImport(pm,token)) {
    this.mode=IMPORT;
    return;
  }
case CLASS:
if (type == Symbols.SEMICOLON) {
  return;
}
this.mode=CLASS;
pm.pushParser(new ClassDeclarationParser(this.unit),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}",0.6278434940855323
84633,"private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=0;
    this.value=lv;
    pm.pushParser(new ExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.dotless=this.dotless;
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=0;
    this.value=lv;
    pm.pushParser(new ExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX && !ParserUtil.isTerminator2(nextType)) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.dotless=this.dotless;
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}",0.9936471738068088
84634,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(new ExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(new ExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(new ExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(new ExpressionParser(le));
return;
}
if (type == Symbols.COLON) {
throw new SyntaxError(token,""String_Node_Str"");
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
this.mode=ACCESS;
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.9862000985707244
84635,"public void findUnits(File source,File output,Package pack){
  if (source.isDirectory()) {
    String name=source.getName();
    for (    String s : source.list()) {
      this.findUnits(new CodeFile(source,s),new File(output,s),pack == null ? Package.rootPackage : pack.createSubPackage(name));
    }
    return;
  }
  String fileName=source.getPath();
  if (!DyvilCompiler.config.compileFile(fileName)) {
    return;
  }
  if (fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str"")) {
    return;
  }
  this.files.add(output);
  String extension=fileName.substring(fileName.lastIndexOf('.') + 1);
  IFileType fileType=FileTypes.fileTypes.get(extension);
  if (fileType == null) {
    return;
  }
  ICompilationUnit unit=fileType.createUnit(pack,(CodeFile)source,output);
  if (unit == null) {
    return;
  }
  if (unit.isHeader()) {
    this.units.insert(0,unit);
  }
 else {
    this.units.add(unit);
  }
}","public void findUnits(File source,File output,Package pack){
  if (source.isDirectory()) {
    for (    String s : source.list()) {
      this.findUnits(new CodeFile(source,s),new File(output,s),pack.createSubPackage(s));
    }
    return;
  }
  String fileName=source.getPath();
  if (!DyvilCompiler.config.isExcluded(fileName)) {
    return;
  }
  if (fileName.endsWith(""String_Node_Str"") || fileName.endsWith(""String_Node_Str"")) {
    return;
  }
  this.files.add(output);
  String extension=fileName.substring(fileName.lastIndexOf('.') + 1);
  IFileType fileType=FileTypes.fileTypes.get(extension);
  if (fileType == null) {
    return;
  }
  ICompilationUnit unit=fileType.createUnit(pack,(CodeFile)source,output);
  if (unit == null) {
    return;
  }
  if (unit.isHeader()) {
    this.units.insert(0,unit);
  }
 else {
    this.units.add(unit);
  }
}",0.9357182783678032
84636,"public static boolean isTerminator2(int type){
  return type == Symbols.DOT || type == Symbols.COMMA || type == Symbols.SEMICOLON || type == Symbols.EQUALS || type == Keywords.IS || type == Keywords.AS || (type & Symbols.CLOSE_BRACKET) == Symbols.CLOSE_BRACKET || type == Symbols.OPEN_SQUARE_BRACKET || type == Tokens.STRING_PART || type == Tokens.STRING_END;
}","public static boolean isTerminator2(int type){
  return type == Symbols.DOT || type == Symbols.COMMA || type == Symbols.SEMICOLON || type == Symbols.COLON || type == Symbols.EQUALS || type == Keywords.IS || type == Keywords.AS || (type & Symbols.CLOSE_BRACKET) == Symbols.CLOSE_BRACKET || type == Symbols.OPEN_SQUARE_BRACKET || type == Tokens.STRING_PART || type == Tokens.STRING_END;
}",0.9665327978580992
84637,"public static boolean isTerminator(int type){
  return type == Symbols.COMMA || type == Symbols.SEMICOLON || (type & Symbols.CLOSE_BRACKET) == Symbols.CLOSE_BRACKET;
}","public static boolean isTerminator(int type){
  return type == Symbols.COMMA || type == Symbols.SEMICOLON || type == Symbols.COLON || (type & Symbols.CLOSE_BRACKET) == Symbols.CLOSE_BRACKET;
}",0.9303621169916436
84638,"private boolean computeVariable(REPLVariable field){
  this.getClassName();
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return false;
  }
  field.cleanup(this,this);
  this.compileVariable(field);
  return true;
}","private boolean computeVariable(REPLVariable field){
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return false;
  }
  field.cleanup(this,this);
  this.compileVariable(field);
  return true;
}",0.9702457956015524
84639,"private void compileVariable(REPLVariable field){
  field.foldConstants();
  this.compileInnerClasses();
  field.compute(this.currentClassName);
  this.cleanup();
}","private void compileVariable(REPLVariable field){
  field.foldConstants();
  this.compileInnerClasses();
  field.compute();
  this.cleanup();
}",0.9315960912052116
84640,"@Override public void addField(IField field){
  this.getClassName();
  REPLVariable var=new REPLVariable(field.getPosition(),field.getName(),field.getType(),field.getValue());
  var.setAnnotations(field.getAnnotations(),field.annotationCount());
  var.modifiers=field.getModifiers();
  if (this.computeVariable(var)) {
    this.variables.put(var.name,var);
    System.out.println(var.toString());
  }
}","@Override public void addField(IField field){
  String className=this.getClassName();
  REPLVariable var=new REPLVariable(field.getPosition(),field.getName(),field.getType(),field.getValue(),className);
  var.setAnnotations(field.getAnnotations(),field.annotationCount());
  var.modifiers=field.getModifiers();
  if (this.computeVariable(var)) {
    this.variables.put(var.name,var);
    System.out.println(var.toString());
  }
}",0.967509025270758
84641,"@Override public void setValue(IValue value){
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  this.getClassName();
  MarkerList markers=new MarkerList();
  value.resolveTypes(markers,this);
  value=value.resolve(markers,this);
  IType type=value.getType();
  IValue value1=value.withType(type,type,markers,this);
  if (value1 == null) {
  }
 else {
    value=value1;
    type=value1.getType();
  }
  value.checkTypes(markers,this);
  value.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return;
  }
  value=value.cleanup(this,this);
  REPLVariable field=new REPLVariable(CODE_POSITION,name,type,value);
  field.modifiers=Modifiers.FINAL;
  this.compileVariable(field);
  if (type != Types.VOID) {
    this.variables.put(field.name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}","@Override public void setValue(IValue value){
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  String className=this.getClassName();
  MarkerList markers=new MarkerList();
  value.resolveTypes(markers,this);
  value=value.resolve(markers,this);
  IType type=value.getType();
  IValue value1=value.withType(type,type,markers,this);
  if (value1 == null) {
  }
 else {
    value=value1;
    type=value1.getType();
  }
  value.checkTypes(markers,this);
  value.check(markers,this);
  if (this.reportErrors(markers)) {
    this.cleanup();
    return;
  }
  value=value.cleanup(this,this);
  REPLVariable field=new REPLVariable(CODE_POSITION,name,type,value,className);
  field.modifiers=Modifiers.FINAL;
  this.compileVariable(field);
  if (type != Types.VOID) {
    this.variables.put(field.name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}",0.9844916714531878
84642,"protected void compute(String className){
  List<IClassCompilable> compilableList=DyvilREPL.context.compilableList;
  if (this.className != null || (this.isConstant() && !compilableList.isEmpty())) {
    return;
  }
  try {
    this.className=className;
    Class c=this.generateClass(this.className,compilableList);
    if (this.type != Types.VOID) {
      java.lang.reflect.Field[] fields=c.getDeclaredFields();
      Object result=fields[0].get(null);
      IValue v=IValue.fromObject(result);
      if (v != null) {
        this.value=v;
      }
 else {
        this.value=new REPLResult(result);
      }
    }
 else {
      ReflectUtils.unsafe.ensureClassInitialized(c);
    }
  }
 catch (  ExceptionInInitializerError t) {
    Throwable ex=t.getCause();
    System.err.println(ex.getClass().getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
    StackTraceElement[] trace=ex.getStackTrace();
    int len=trace.length - 10;
    for (int i=0; i < len; i++) {
      System.err.println(""String_Node_Str"" + trace[i]);
    }
    this.value=this.type.getDefaultValue();
  }
catch (  Throwable t) {
    t.printStackTrace();
  }
}","protected void compute(){
  List<IClassCompilable> compilableList=DyvilREPL.context.compilableList;
  if (this.isConstant() && !compilableList.isEmpty()) {
    return;
  }
  try {
    Class c=this.generateClass(this.className,compilableList);
    if (this.type != Types.VOID) {
      java.lang.reflect.Field[] fields=c.getDeclaredFields();
      Object result=fields[0].get(null);
      IValue v=IValue.fromObject(result);
      if (v != null) {
        this.value=v;
      }
 else {
        this.value=new REPLResult(result);
      }
    }
 else {
      ReflectUtils.unsafe.ensureClassInitialized(c);
    }
  }
 catch (  ExceptionInInitializerError t) {
    Throwable ex=t.getCause();
    System.err.println(ex.getClass().getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
    StackTraceElement[] trace=ex.getStackTrace();
    int len=trace.length - 10;
    for (int i=0; i < len; i++) {
      System.err.println(""String_Node_Str"" + trace[i]);
    }
    this.value=this.type.getDefaultValue();
  }
catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.9663023679417122
84643,"@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
  if (this.className == null) {
    writer.writeInsn(Opcodes.AUTO_POP);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.PUTSTATIC,this.className,""String_Node_Str"",extended);
}","@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
  if (this.className == null) {
    writer.writeInsn(Opcodes.AUTO_POP);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.PUTSTATIC,this.className,this.name.qualified,extended);
}",0.945619335347432
84644,"public REPLVariable(ICodePosition position,Name name,IType type,IValue value){
  super(null,name,type);
  this.position=position;
  this.value=value;
}","public REPLVariable(ICodePosition position,Name name,IType type,IValue value,String className){
  super(null,name,type);
  this.className=className;
  this.theClass=new REPLMemberClass(Name.getQualified(className),this);
  this.position=position;
  this.value=value;
}",0.720763723150358
84645,"private Class generateClass(String className,List<IClassCompilable> compilableList) throws Throwable {
  String extendedType=type.getExtendedName();
  ClassWriter writer=new ClassWriter();
  writer.visit(DyvilCompiler.classVersion,Modifiers.PUBLIC | Modifiers.FINAL | ClassFormat.ACC_SUPER,className,null,""String_Node_Str"",null);
  if (type != Types.VOID) {
    writer.visitField(this.modifiers | Modifiers.PUBLIC | Modifiers.STATIC| Modifiers.SYNTHETIC,""String_Node_Str"",extendedType,null,null);
  }
  for (  IClassCompilable c : compilableList) {
    c.write(writer);
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  for (  IClassCompilable c : compilableList) {
    c.writeStaticInit(mw);
  }
  if (type != Types.VOID) {
    value.writeExpression(mw);
    mw.writeFieldInsn(Opcodes.PUTSTATIC,className,""String_Node_Str"",extendedType);
  }
 else {
    value.writeStatement(mw);
  }
  mw.writeInsn(Opcodes.RETURN);
  mw.end();
  writer.visitEnd();
  byte[] bytes=writer.toByteArray();
  if (type != Types.VOID || !compilableList.isEmpty()) {
    return REPLMemberClass.loadClass(className,bytes);
  }
  return ReflectUtils.unsafe.defineAnonymousClass(REPLVariable.class,bytes,null);
}","private Class generateClass(String className,List<IClassCompilable> compilableList) throws Throwable {
  String name=this.name.qualified;
  String extendedType=type.getExtendedName();
  ClassWriter writer=new ClassWriter();
  writer.visit(DyvilCompiler.classVersion,Modifiers.PUBLIC | Modifiers.FINAL | ClassFormat.ACC_SUPER,className,null,""String_Node_Str"",null);
  if (type != Types.VOID) {
    writer.visitField(this.modifiers | Modifiers.PUBLIC | Modifiers.STATIC| Modifiers.SYNTHETIC,name,extendedType,null,null);
  }
  for (  IClassCompilable c : compilableList) {
    c.write(writer);
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  for (  IClassCompilable c : compilableList) {
    c.writeStaticInit(mw);
  }
  if (type != Types.VOID) {
    value.writeExpression(mw);
    mw.writeFieldInsn(Opcodes.PUTSTATIC,className,name,extendedType);
  }
 else {
    value.writeStatement(mw);
  }
  mw.writeInsn(Opcodes.RETURN);
  mw.end();
  writer.visitEnd();
  byte[] bytes=writer.toByteArray();
  if (type != Types.VOID || !compilableList.isEmpty()) {
    return REPLMemberClass.loadClass(className,bytes);
  }
  return ReflectUtils.unsafe.defineAnonymousClass(REPLVariable.class,bytes,null);
}",0.8130947849257708
84646,"@Override public void writeGet(MethodWriter writer,IValue instance) throws BytecodeException {
  if (this.isConstant()) {
    this.value.writeExpression(writer);
    return;
  }
  if (this.className == null) {
    this.type.writeDefaultValue(writer);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.GETSTATIC,this.className,""String_Node_Str"",extended);
}","@Override public void writeGet(MethodWriter writer,IValue instance) throws BytecodeException {
  if (this.isConstant()) {
    this.value.writeExpression(writer);
    return;
  }
  if (this.className == null) {
    this.type.writeDefaultValue(writer);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.GETSTATIC,this.className,this.name.qualified,extended);
}",0.9552238805970148
84647,"@Override public boolean add(E element){
  return this.map.put(element,VALUE) != null;
}","@Override public boolean add(E element){
  return this.map.put(element,VALUE) == null;
}",0.9886363636363636
84648,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  if (this.type == null || !this.type.isResolved()) {
    return this;
  }
  if (this.type.isArrayType()) {
    int len=this.arguments.size();
    int dims=this.type.getArrayDimensions();
    if (dims != len) {
      Marker marker=markers.create(this.position,""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + dims);
      marker.addInfo(""String_Node_Str"" + len);
      return this;
    }
    if (!(this.arguments instanceof ArgumentList)) {
      markers.add(markers.create(this.position,""String_Node_Str""));
      return this;
    }
    ArgumentList paramList=(ArgumentList)this.arguments;
    for (int i=0; i < len; i++) {
      IValue v=paramList.getValue(i);
      IType t=v.getType();
      if (t != Types.INT) {
        Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + t);
      }
    }
    return this;
  }
  IConstructor match=IContext.resolveConstructor(this.type,this.arguments);
  if (match == null) {
    Marker marker=markers.create(this.position,""String_Node_Str"",this.type.toString());
    if (!this.arguments.isEmpty()) {
      StringBuilder builder=new StringBuilder(""String_Node_Str"");
      this.arguments.typesToString(builder);
      marker.addInfo(builder.toString());
    }
    return this;
  }
  this.constructor=match;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.arguments.resolve(markers,context);
  if (this.type == null || !this.type.isResolved()) {
    return this;
  }
  if (this.type.isArrayType()) {
    int len=this.arguments.size();
    int dims=this.type.getArrayDimensions();
    if (dims != len) {
      Marker marker=markers.create(this.position,""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + dims);
      marker.addInfo(""String_Node_Str"" + len);
      return this;
    }
    if (!(this.arguments instanceof ArgumentList)) {
      markers.add(markers.create(this.position,""String_Node_Str""));
      return this;
    }
    ArgumentList paramList=(ArgumentList)this.arguments;
    for (int i=0; i < len; i++) {
      IValue v=paramList.getValue(i);
      IType t=v.getType();
      if (t != Types.INT) {
        Marker marker=markers.create(v.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + t);
      }
    }
    return this;
  }
  this.constructor=IContext.resolveConstructor(this.type,this.arguments);
  return this;
}",0.8238546603475514
84649,"@Override public void check(MarkerList markers,IContext context){
  this.arguments.check(markers,context);
  if (this.type == null || this.type.isArrayType()) {
    return;
  }
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    markers.add(this.position,""String_Node_Str"",iclass.getName());
  }
 else   if (iclass.hasModifier(Modifiers.ABSTRACT)) {
    markers.add(this.position,""String_Node_Str"",iclass.getName());
  }
  if (this.constructor != null) {
    this.constructor.checkCall(markers,this.position,context,this.arguments);
  }
}","@Override public void check(MarkerList markers,IContext context){
  this.arguments.check(markers,context);
  if (this.type == null || this.type.isArrayType()) {
    return;
  }
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  if (iclass.hasModifier(Modifiers.INTERFACE_CLASS)) {
    markers.add(this.position,""String_Node_Str"",this.type);
    return;
  }
  if (iclass.hasModifier(Modifiers.ABSTRACT)) {
    markers.add(this.position,""String_Node_Str"",this.type);
  }
  if (this.constructor != null) {
    this.constructor.checkCall(markers,this.position,context,this.arguments);
  }
 else {
    Marker marker=markers.create(this.position,""String_Node_Str"",this.type.toString());
    if (!this.arguments.isEmpty()) {
      StringBuilder builder=new StringBuilder(""String_Node_Str"");
      this.arguments.typesToString(builder);
      marker.addInfo(builder.toString());
    }
  }
}",0.7623376623376623
84650,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.field.writeGet(writer,this.instance);
  if (!this.type.isSuperTypeOf(this.field.getType())) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  }
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.field.writeGet(writer,this.instance);
  if (this.type != null && !this.type.isSuperTypeOf(this.field.getType())) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  }
}",0.9618874773139746
84651,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.UNKNOWN || type == Types.VOID) {
    return this;
  }
  IValue value1=this.value.withType(type,typeContext,markers,context);
  if (value1 == null) {
    return null;
  }
  this.value=value1;
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.VOID) {
    return this;
  }
  IValue value1=this.value.withType(type,typeContext,markers,context);
  if (value1 == null) {
    return null;
  }
  this.value=value1;
  return this;
}",0.9611197511664076
84652,"@Override public boolean isType(IType type){
  return this.value == null ? type == Types.UNKNOWN || type == Types.VOID : this.value.isType(type);
}","@Override public boolean isType(IType type){
  return type == Types.VOID || this.value.isType(type);
}",0.8032128514056225
84653,"private AbstractCall resolveApply(MarkerList markers,IContext context){
  IValue instance;
  IMethod method;
  IDataMember field=context.resolveField(this.name);
  if (field == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass == null) {
      return null;
    }
    IMethod match=IContext.resolveMethod(iclass,null,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=new ClassAccess(this.position,new ClassType(iclass));
  }
 else {
    FieldAccess access=new FieldAccess(this.position);
    access.field=field;
    access.name=this.name;
    access.dotless=this.dotless;
    IMethod match=IContext.resolveMethod(field.getType(),access,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=access;
  }
  ApplyMethodCall call=new ApplyMethodCall(this.position);
  call.method=method;
  call.instance=instance;
  call.arguments=this.arguments;
  call.genericData=this.genericData;
  return call;
}","private AbstractCall resolveApply(MarkerList markers,IContext context){
  IValue instance;
  IMethod method;
  IDataMember field=context.resolveField(this.name);
  if (field == null) {
    IType itype=IContext.resolveType(context,this.name);
    if (itype == null) {
      return null;
    }
    IMethod match=IContext.resolveMethod(itype,null,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=new ClassAccess(this.position,itype);
  }
 else {
    FieldAccess access=new FieldAccess(this.position);
    access.field=field;
    access.name=this.name;
    access.dotless=this.dotless;
    IMethod match=IContext.resolveMethod(field.getType(),access,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=access;
  }
  ApplyMethodCall call=new ApplyMethodCall(this.position);
  call.method=method;
  call.instance=instance;
  call.arguments=this.arguments;
  call.genericData=this.genericData;
  return call;
}",0.9636098981077148
84654,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType().getConcreteType(this.type).getParameterType();
          param.setType(parType);
        }
      }
      this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IType valueType=this.value.getType().getReferenceType();
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType().getConcreteType(this.type).getParameterType();
          param.setType(parType);
        }
      }
      this.returnType=this.method.getType().getConcreteType(this.type).getReturnType();
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IType valueType=this.value.getType().getReferenceType();
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
      valueType=this.value.getType();
    }
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(valueType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.returnType=valueType;
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.9920978842722408
84655,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 0) {
    buffer.append(Formatting.Method.emptyParameters);
  }
 else   if (this.parameterCount == 1) {
    IParameter param=this.parameters[0];
    if (param.getType() != null) {
      buffer.append('(');
      param.toString(prefix,buffer);
      buffer.append(')');
    }
 else {
      buffer.append(param.getName());
    }
  }
 else {
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.value.toString(prefix,buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    IParameter param=this.parameters[0];
    if (param.getType() != null) {
      buffer.append('(');
      param.toString(prefix,buffer);
      buffer.append(')');
    }
 else {
      buffer.append(param.getName());
    }
    buffer.append(' ');
  }
 else   if (this.parameterCount > 1) {
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(' ');
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.value.toString(prefix,buffer);
}",0.8605200945626478
84656,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    this.parameterTypes[0].toString(prefix,buffer);
  }
 else {
    buffer.append(Formatting.Method.parametersStart);
    Util.astToString(prefix,this.parameterTypes,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(Formatting.Method.parametersEnd);
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.returnType.toString(""String_Node_Str"",buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.parameterCount == 1) {
    this.parameterTypes[0].toString(prefix,buffer);
    buffer.append(' ');
  }
 else   if (this.parameterCount > 0) {
    buffer.append(Formatting.Method.parametersStart);
    Util.astToString(prefix,this.parameterTypes,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(Formatting.Method.parametersEnd);
    buffer.append(' ');
  }
  buffer.append(Formatting.Expression.lambdaSeperator);
  this.returnType.toString(""String_Node_Str"",buffer);
}",0.9269195189639224
84657,"@Override public boolean isResolved(){
  return false;
}","@Override public boolean isResolved(){
  return true;
}",0.9369369369369368
84658,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
int nextType=token.next().type();
if (nextType == Symbols.CLOSE_PARENTHESIS) {
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
IToken next=token.next();
if (next.type() == Symbols.CLOSE_PARENTHESIS) {
  if (next.next().type() == Symbols.ARROW_OPERATOR) {
    LambdaExpression le=new LambdaExpression(next.next().raw());
    this.value=le;
    pm.skip(2);
    pm.pushParser(new ExpressionParser(le));
    this.mode=ACCESS;
    return;
  }
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression le=new LambdaExpression(token.raw());
this.value=le;
this.mode=ACCESS;
pm.pushParser(new ExpressionParser(le));
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.9716470213443772
84659,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=0;
      return;
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.COLON) {
      this.label=token.nameValue();
      pm.skip();
      return;
    }
    this.firstToken=token;
    this.parser=this.tryParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type == null) {
        System.out.println();
      }
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.tryParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    this.mode=EXPRESSION;
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=0;
      return;
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (type == Symbols.SEMICOLON) {
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      int nextType=token.next().type();
      if (nextType == Symbols.COLON) {
        this.label=token.nameValue();
        pm.skip();
        return;
      }
      if (nextType == Symbols.EQUALS) {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
        pm.skip();
        this.mode=SEPARATOR;
        return;
      }
    }
    this.firstToken=token;
    this.parser=this.tryParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else       if (token != this.firstToken) {
        this.parser.parse(this,token);
        pm.reparse();
        return;
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.tryParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    this.mode=EXPRESSION;
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.7284345047923323
84660,"@Override public IType getConcreteType(ITypeContext context){
  TupleType tt=new TupleType(this.typeCount);
  for (int i=0; i < this.typeCount; i++) {
    tt.types[i]=this.types[i].getConcreteType(context);
  }
  return tt;
}","@Override public IType getConcreteType(ITypeContext context){
  TupleType tt=new TupleType(this.typeCount);
  tt.typeCount=this.typeCount;
  for (int i=0; i < this.typeCount; i++) {
    tt.types[i]=this.types[i].getConcreteType(context);
  }
  return tt;
}",0.9355509355509356
84661,"@Override public IType clone(){
  TupleType tt=new TupleType(this.typeCount);
  System.arraycopy(this.types,0,tt.types,0,this.typeCount);
  return tt;
}","@Override public IType clone(){
  TupleType tt=new TupleType(this.typeCount);
  tt.typeCount=this.typeCount;
  System.arraycopy(this.types,0,tt.types,0,this.typeCount);
  return tt;
}",0.9074626865671642
84662,"@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount){
  outer:   for (int i=0; i < this.methodCount; i++) {
    IMethod m=this.methods[i];
    if (m.getName() != name) {
      continue;
    }
    if (parameterCount != m.parameterCount()) {
      continue;
    }
    for (int p=0; p < parameterCount; p++) {
      IType t1=parameters[p].getType();
      IType t2=m.getParameter(p).getType();
      if (!t1.equals(t2)) {
        continue outer;
      }
    }
    return m;
  }
  return null;
}","@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount,IType concrete){
  outer:   for (int i=0; i < this.methodCount; i++) {
    IMethod m=this.methods[i];
    if (m.getName() != name) {
      continue;
    }
    if (parameterCount != m.parameterCount()) {
      continue;
    }
    for (int p=0; p < parameterCount; p++) {
      IType t1=parameters[p].getType();
      IType t2=m.getParameter(p).getType().getConcreteType(concrete);
      if (!t1.equals(t2)) {
        continue outer;
      }
    }
    return m;
  }
  return null;
}",0.9625570776255707
84663,"@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount){
  if (this.body != null) {
    IMethod m=this.body.getMethod(name,parameters,parameterCount);
    if (m != null) {
      return m;
    }
  }
  return null;
}","@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount,IType concrete){
  if (this.body != null) {
    IMethod m=this.body.getMethod(name,parameters,parameterCount,concrete);
    if (m != null) {
      return m;
    }
  }
  return null;
}",0.9536679536679536
84664,"@Override public IMethod getSuperMethod(Name name,IParameter[] parameters,int parameterCount){
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      IMethod m=iclass.getMethod(name,parameters,parameterCount);
      if (m != null) {
        return m;
      }
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IClass iclass=this.interfaces[i].getTheClass();
    if (iclass != null) {
      IMethod m=iclass.getMethod(name,parameters,parameterCount);
      if (m != null) {
        return m;
      }
    }
  }
  return null;
}","@Override public IMethod getSuperMethod(Name name,IParameter[] parameters,int parameterCount){
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      IMethod m=iclass.getMethod(name,parameters,parameterCount,this.superType);
      if (m != null) {
        return m;
      }
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      IMethod m=iclass.getMethod(name,parameters,parameterCount,type);
      if (m != null) {
        return m;
      }
    }
  }
  return null;
}",0.9470252648736756
84665,"@Override public void write(ClassWriter writer) throws BytecodeException {
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  int mods=this.modifiers & 0x7631;
  if ((mods & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
    mods|=Opcodes.ACC_SUPER;
  }
  writer.visit(DyvilCompiler.classVersion,mods,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  StatementList staticFields=new StatementList();
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.value=f.getValue();
      assign.field=f;
      staticFields.addValue(assign);
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].write(writer);
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  this.metadata.write(writer,instanceFields);
  IDataMember instanceField=this.metadata.getInstanceField();
  if (instanceField != null) {
    FieldAssign assign=new FieldAssign(null);
    assign.name=Name.instance;
    assign.field=instanceField;
    ConstructorCall call=new ConstructorCall(null);
    call.type=this.type;
    call.constructor=this.metadata.getConstructor();
    assign.value=call;
    staticFields.addValue(assign);
  }
 else   if (staticFields.isEmpty()) {
    return;
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  staticFields.writeStatement(mw);
  mw.end(Types.VOID);
}","@Override public void write(ClassWriter writer) throws BytecodeException {
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  int mods=this.modifiers & 0x7631;
  if ((mods & Modifiers.INTERFACE_CLASS) != Modifiers.INTERFACE_CLASS) {
    mods|=Opcodes.ACC_SUPER;
  }
  writer.visit(DyvilCompiler.classVersion,mods,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.genericCount; i++) {
    this.generics[i].write(writer);
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  StatementList staticFields=new StatementList();
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.value=f.getValue();
      assign.field=f;
      staticFields.addValue(assign);
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].write(writer);
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  this.metadata.write(writer,instanceFields);
  IDataMember instanceField=this.metadata.getInstanceField();
  if (instanceField != null) {
    FieldAssign assign=new FieldAssign(null);
    assign.name=Name.instance;
    assign.field=instanceField;
    ConstructorCall call=new ConstructorCall(null);
    call.type=this.type;
    call.constructor=this.metadata.getConstructor();
    assign.value=call;
    staticFields.addValue(assign);
  }
 else   if (staticFields.isEmpty()) {
    return;
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  staticFields.writeStatement(mw);
  mw.end(Types.VOID);
}",0.9892068273092368
84666,"public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount);","public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount,IType concrete);",0.9132947976878611
84667,"public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount);","public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount,IType concrete);",0.9132947976878611
84668,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  IClassBody body=this.theClass.getBody();
  if (body != null) {
    if (markers != null && body.constructorCount() > 0) {
      markers.add(this.theClass.getPosition(),""String_Node_Str"",this.theClass.getName().qualified);
    }
    IField f=body.getField(Name.instance);
    if (f != null) {
      this.instanceField=f;
      return;
    }
  }
  Field f=new Field(this.theClass,Name.instance,this.theClass.getType());
  f.modifiers=Modifiers.PUBLIC | Modifiers.CONST | Modifiers.SYNTHETIC;
  this.instanceField=f;
  if (this.theClass.getMethod(Name.toString,null,0) != null) {
    this.hasToString=true;
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  IClassBody body=this.theClass.getBody();
  if (body != null) {
    if (markers != null && body.constructorCount() > 0) {
      markers.add(this.theClass.getPosition(),""String_Node_Str"",this.theClass.getName().qualified);
    }
    IField f=body.getField(Name.instance);
    if (f != null) {
      this.instanceField=f;
      return;
    }
  }
  Field f=new Field(this.theClass,Name.instance,this.theClass.getType());
  f.modifiers=Modifiers.PUBLIC | Modifiers.CONST | Modifiers.SYNTHETIC;
  this.instanceField=f;
  if (this.theClass.getMethod(Name.toString,null,0,null) != null) {
    this.hasToString=true;
  }
}",0.9965010496850945
84669,"@Override public IType resolveType(ITypeVariable typeVar){
  if (typeVar.getGeneric().isMethod()) {
    return this.generics[typeVar.getIndex()];
  }
  return this.instanceType.resolveType(typeVar);
}","@Override public IType resolveType(ITypeVariable typeVar){
  int index=typeVar.getIndex();
  if (this.method.getTypeVariable(index) == typeVar) {
    return this.generics[index];
  }
  return this.instanceType.resolveType(typeVar);
}",0.6235565819861432
84670,"public GenericData(int count){
  this.generics=new IType[count];
  this.computedGenerics=count;
}","public GenericData(IMethod method,int count){
  this.method=method;
  this.generics=new IType[count];
  this.computedGenerics=count;
}",0.8398268398268398
84671,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(this.name);
  this.variance.appendPrefix(buffer);
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
  if (this.upperBoundCount > 0) {
    buffer.append(Formatting.Type.genericUpperBound);
    this.upperBounds[0].toString(prefix,buffer);
    for (int i=1; i < this.upperBoundCount; i++) {
      buffer.append(Formatting.Type.genericBoundSeperator);
      this.upperBounds[i].toString(prefix,buffer);
    }
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  this.variance.appendPrefix(buffer);
  buffer.append(this.name);
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
  if (this.upperBoundCount > 0) {
    buffer.append(Formatting.Type.genericUpperBound);
    this.upperBounds[0].toString(prefix,buffer);
    for (int i=1; i < this.upperBoundCount; i++) {
      buffer.append(Formatting.Type.genericBoundSeperator);
      this.upperBounds[i].toString(prefix,buffer);
    }
  }
}",0.9344827586206896
84672,"public PositionedTypeVarType(ICodePosition position,ITypeVariable typeVar){
  super(typeVar);
}","public PositionedTypeVarType(ICodePosition position,ITypeVariable typeVar){
  super(typeVar);
  this.position=position;
}",0.8796296296296297
84673,"@Override public IType resolve(MarkerList markers,IContext context,TypePosition position){
  if (this.bound != null) {
    this.bound=this.bound.resolve(markers,context,TypePosition.TYPE);
  }
  if (position != TypePosition.GENERIC_ARGUMENT) {
    markers.add(this.position,""String_Node_Str"");
    return this.bound == null ? Types.ANY : this.bound;
  }
  return this;
}","@Override public IType resolve(MarkerList markers,IContext context,TypePosition position){
  if (this.bound != null) {
    this.bound=this.bound.resolve(markers,context,TypePosition.SUPER_TYPE_ARGUMENT);
  }
  if (position != TypePosition.GENERIC_ARGUMENT) {
    markers.add(this.position,""String_Node_Str"");
    return this.bound == null ? Types.ANY : this.bound;
  }
  return this;
}",0.8609271523178808
84674,"@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.hasTypeVariables()) {
    return genericData;
  }
  if (genericData == null) {
    genericData=new GenericData(this.genericCount);
    if (instance != null) {
      genericData.instanceType=instance.getType();
    }
    this.inferTypes(genericData,instance,arguments);
    return genericData;
  }
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
  genericData.setTypeCount(this.genericCount);
  this.inferTypes(genericData,instance,arguments);
  return genericData;
}","@Override public GenericData getGenericData(GenericData genericData,IValue instance,IArguments arguments){
  if (!this.hasTypeVariables()) {
    return genericData;
  }
  if (genericData == null) {
    genericData=new GenericData(this,this.genericCount);
    if (instance != null) {
      genericData.instanceType=instance.getType();
    }
    this.inferTypes(genericData,instance,arguments);
    return genericData;
  }
  genericData.method=this;
  if (instance != null) {
    genericData.instanceType=instance.getType();
  }
  genericData.setTypeCount(this.genericCount);
  this.inferTypes(genericData,instance,arguments);
  return genericData;
}",0.9746835443037974
84675,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      if (name == Name.plus || name == Name.minus) {
        IToken next=token.next();
        if (ParserUtil.isIdentifier(next.type())) {
          Variance v=name == Name.minus ? Variance.CONTRAVARIANT : Variance.CONTRAVARIANT;
          this.variable=new TypeVariable(next,this.generic,next.nameValue(),v);
          this.mode=TYPE_VARIABLE;
          pm.skip();
          return;
        }
      }
      this.variable=new TypeVariable(token,this.generic,token.nameValue(),Variance.INVARIANT);
      this.mode=TYPE_VARIABLE;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == TYPE_VARIABLE) {
    if (ParserUtil.isTerminator(type)) {
      if (this.variable != null) {
        this.generic.addTypeVariable(this.variable);
      }
      pm.popParser(true);
      return;
    }
    if (!ParserUtil.isIdentifier(type)) {
      if (this.variable != null) {
        this.generic.addTypeVariable(this.variable);
      }
      pm.popParser(true);
      throw new SyntaxError(token,""String_Node_Str"");
    }
    Name name=token.nameValue();
    if (this.boundMode == 0) {
      if (name == Name.gtcolon) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=LOWER;
        return;
      }
      if (name == Name.ltcolon) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=UPPER;
        return;
      }
    }
 else     if (this.boundMode == UPPER) {
      if (name == Name.amp) {
        pm.pushParser(new TypeParser(this));
        return;
      }
    }
    this.generic.addTypeVariable(this.variable);
    pm.popParser(true);
    return;
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (ParserUtil.isIdentifier(type)) {
      Name name=token.nameValue();
      if (name == Name.plus || name == Name.minus) {
        IToken next=token.next();
        if (ParserUtil.isIdentifier(next.type())) {
          Variance v=name == Name.minus ? Variance.CONTRAVARIANT : Variance.COVARIANT;
          this.variable=new TypeVariable(next,this.generic,next.nameValue(),v);
          this.mode=TYPE_VARIABLE;
          pm.skip();
          return;
        }
      }
      this.variable=new TypeVariable(token,this.generic,token.nameValue(),Variance.INVARIANT);
      this.mode=TYPE_VARIABLE;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == TYPE_VARIABLE) {
    if (ParserUtil.isTerminator(type)) {
      if (this.variable != null) {
        this.generic.addTypeVariable(this.variable);
      }
      pm.popParser(true);
      return;
    }
    if (!ParserUtil.isIdentifier(type)) {
      if (this.variable != null) {
        this.generic.addTypeVariable(this.variable);
      }
      pm.popParser(true);
      throw new SyntaxError(token,""String_Node_Str"");
    }
    Name name=token.nameValue();
    if (this.boundMode == 0) {
      if (name == Name.gtcolon) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=LOWER;
        return;
      }
      if (name == Name.ltcolon) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=UPPER;
        return;
      }
    }
 else     if (this.boundMode == UPPER) {
      if (name == Name.amp) {
        pm.pushParser(new TypeParser(this));
        return;
      }
    }
    this.generic.addTypeVariable(this.variable);
    pm.popParser(true);
    return;
  }
}",0.9989047097480832
84676,"@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount){
  return null;
}","@Override public IMethod getMethod(Name name,IParameter[] parameters,int parameterCount,IType concrete){
  return null;
}",0.933920704845815
84677,"@Override public IType getReturnType(){
  if (this.variance == Variance.CONTRAVARIANT) {
    return Types.ANY;
  }
  return this.bound;
}","@Override public IType getReturnType(){
  if (this.bound == null || this.variance == Variance.CONTRAVARIANT) {
    return Types.ANY;
  }
  return this.bound;
}",0.9256756756756755
84678,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value1.resolve(markers,context);
  this.value2.resolve(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.firstValue.resolve(markers,context);
  this.lastValue.resolve(markers,context);
  return this;
}",0.9557522123893806
84679,"@Override public int getTypeMatch(IType type){
  if (type.isArrayType()) {
    IType elementType=type.getElementType();
    return this.isElementType(elementType) ? 3 : 0;
  }
  if (Types.ITERABLE.equals(type) || RANGE.isSuperTypeOf(type)) {
    IType iterableType=type.resolveType(IterableForStatement.ITERABLE_TYPE);
    return this.isElementType(iterableType) ? 3 : 0;
  }
  return type.isSuperTypeOf(RANGE) ? 2 : 0;
}","@Override public int getTypeMatch(IType type){
  return this.isType(type) ? 3 : 0;
}",0.3326732673267327
84680,"@Override public void check(MarkerList markers,IContext context){
  this.value1.check(markers,context);
  this.value2.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  this.firstValue.check(markers,context);
  this.lastValue.check(markers,context);
}",0.9488054607508531
84681,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isArrayType()) {
    IType elementType=type.getElementType();
    return this.withElementType(type,elementType,typeContext,markers,context);
  }
  if (Types.ITERABLE.equals(type) || RANGE.isSuperTypeOf(type)) {
    IType iterableType=type.resolveType(IterableForStatement.ITERABLE_TYPE);
    return this.withElementType(type,iterableType,typeContext,markers,context);
  }
  return type.isSuperTypeOf(this.getType()) ? this : null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IType elementType;
  if (type.isArrayType()) {
    elementType=type.getElementType();
  }
 else   if (type.isSuperClassOf(RANGE)) {
    elementType=type.resolveType(IterableForStatement.ITERABLE_TYPE);
  }
 else {
    return null;
  }
  if (this.isElementType(elementType)) {
    this.elementType=elementType;
    this.type=type;
    return this;
  }
  return null;
}",0.4405458089668616
84682,"@Override public boolean isType(IType type){
  if (type.isArrayType()) {
    IType elementType=type.getElementType();
    return this.isElementType(elementType);
  }
  if (Types.ITERABLE.equals(type) || RANGE.isSuperTypeOf(type)) {
    IType iterableType=type.resolveType(IterableForStatement.ITERABLE_TYPE);
    return this.isElementType(iterableType);
  }
  return type.isSuperTypeOf(RANGE);
}","@Override public boolean isType(IType type){
  if (type.isArrayType()) {
    IType elementType=type.getElementType();
    return this.isElementType(elementType);
  }
  if (type.isSuperClassOf(RANGE)) {
    IType iterableType=type.resolveType(IterableForStatement.ITERABLE_TYPE);
    return this.isElementType(iterableType);
  }
  return false;
}",0.6783783783783783
84683,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.type.isArrayType()) {
    this.value1.writeExpression(writer);
    this.value2.writeExpression(writer);
    if (this.elementType.typeTag() == IType.PRIMITIVE) {
switch (((PrimitiveType)this.elementType).typecode) {
case ClassFormat.T_BYTE:
        writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
      return;
case ClassFormat.T_SHORT:
    writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  return;
case ClassFormat.T_CHAR:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_INT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_LONG:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
return;
}
if (Types.STRING.isSuperTypeOf(this.elementType)) {
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
if (Types.STRING.isSuperTypeOf(this.elementType)) {
writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
writer.writeInsn(Opcodes.DUP);
this.value1.writeExpression(writer);
this.value2.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
writer.writeInsn(Opcodes.DUP);
this.value1.writeExpression(writer);
this.value2.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.type.isArrayType()) {
    this.firstValue.writeExpression(writer);
    this.lastValue.writeExpression(writer);
    if (this.elementType.typeTag() == IType.PRIMITIVE) {
switch (((PrimitiveType)this.elementType).typecode) {
case ClassFormat.T_BYTE:
        writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
      return;
case ClassFormat.T_SHORT:
    writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  return;
case ClassFormat.T_CHAR:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_INT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_LONG:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
return;
}
if (this.elementType.getTheClass() == Types.STRING_CLASS) {
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
if (this.elementType.getTheClass() == Types.STRING_CLASS) {
writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
writer.writeInsn(Opcodes.DUP);
this.firstValue.writeExpression(writer);
this.lastValue.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
}
writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
writer.writeInsn(Opcodes.DUP);
this.firstValue.writeExpression(writer);
this.lastValue.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}",0.8485669149176258
84684,"private boolean isElementType(IType elementType){
  if (this.elementType != null) {
    return elementType.isSuperTypeOf(this.elementType);
  }
  return this.value1.isType(elementType) && this.value2.isType(elementType);
}","private boolean isElementType(IType elementType){
  if (this.elementType != Types.UNKNOWN) {
    return elementType.isSuperTypeOf(this.elementType);
  }
  return this.firstValue.isType(elementType) && this.lastValue.isType(elementType);
}",0.8956521739130435
84685,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.value1.checkTypes(markers,context);
  this.value2.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IValue value1=this.firstValue.withType(elementType,elementType,markers,context);
  if (value1 == null) {
  }
 else {
    this.firstValue=value1;
  }
  IValue value2=this.lastValue.withType(elementType,elementType,markers,context);
  if (value2 == null) {
  }
 else {
    this.lastValue=value2;
  }
  this.firstValue.checkTypes(markers,context);
  this.lastValue.checkTypes(markers,context);
}",0.276083467094703
84686,"@Override public IType getType(){
  if (this.type == null) {
    if (this.elementType == Types.UNKNOWN) {
      this.elementType=Types.findCommonSuperType(this.value1.getType(),this.value2.getType());
    }
    GenericType gt=new GenericType(RANGE_CLASS);
    if (this.elementType.isPrimitive()) {
      this.elementType=this.elementType.getReferenceType();
    }
    gt.addType(this.elementType);
    this.type=gt;
  }
  return this.type;
}","@Override public IType getType(){
  if (this.type == null) {
    if (this.elementType == Types.UNKNOWN) {
      this.elementType=Types.findCommonSuperType(this.firstValue.getType(),this.lastValue.getType());
    }
    GenericType gt=new GenericType(RANGE_CLASS);
    if (this.elementType.isPrimitive()) {
      this.elementType=this.elementType.getReferenceType();
    }
    gt.addType(this.elementType);
    this.type=gt;
  }
  return this.type;
}",0.9763779527559056
84687,"@Override public void toString(String prefix,StringBuilder buffer){
  this.value1.toString(prefix,buffer);
  buffer.append(""String_Node_Str"");
  this.value2.toString(prefix,buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  this.firstValue.toString(prefix,buffer);
  buffer.append(""String_Node_Str"");
  this.lastValue.toString(prefix,buffer);
}",0.9597855227882036
84688,"public RangeOperator(IValue value1,IValue value2,IType type){
  this.value1=value1;
  this.value2=value2;
  this.elementType=type;
}","public RangeOperator(IValue value1,IValue value2,IType type){
  this.firstValue=value1;
  this.lastValue=value2;
  this.elementType=type;
}",0.9446494464944648
84689,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.value1.resolveTypes(markers,context);
  this.value2.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  this.firstValue.resolveTypes(markers,context);
  this.lastValue.resolveTypes(markers,context);
}",0.9552238805970148
84690,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  IType varType=this.variable.type;
  IValue value=this.variable.value;
  this.variable.value=value=value.resolve(markers,context);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.value1;
    IValue value2=ro.value2;
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.findCommonSuperType(value1.getType(),value2.getType());
      }
      this.variable.type=varType=rangeType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.position,""String_Node_Str"",this.variable.name);
      }
    }
 else     if (rangeType == Types.UNKNOWN) {
      rangeType=varType;
    }
 else     if (!varType.isSuperTypeOf(rangeType)) {
      Marker marker=markers.create(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + rangeType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new RangeForStatement(this.variable,value1,value2,this.action == null ? null : this.action.resolve(markers,this));
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=valueType.getElementType();
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.classEquals(valueType.getElementType())) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new ArrayForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this),valueType);
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveType(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=iterableType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.position,""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + iterableType);
      m.addInfo(""String_Node_Str"" + varType);
    }
    return new IterableForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this),valueType,iterableType);
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=Types.CHAR;
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new StringForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this));
  }
  Marker m=markers.create(this.variable.position,""String_Node_Str"");
  m.addInfo(""String_Node_Str"" + varType);
  m.addInfo(""String_Node_Str"" + valueType);
  if (this.action != null) {
    this.action=this.action.resolve(markers,this);
  }
  this.context=null;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  IType varType=this.variable.type;
  IValue value=this.variable.value;
  this.variable.value=value=value.resolve(markers,context);
  if (value.valueTag() == IValue.RANGE_OPERATOR) {
    RangeOperator ro=(RangeOperator)value;
    IValue value1=ro.getFirstValue();
    IValue value2=ro.getLastValue();
    IType rangeType=ro.getElementType();
    if (varType == Types.UNKNOWN) {
      if (rangeType == Types.UNKNOWN) {
        rangeType=Types.findCommonSuperType(value1.getType(),value2.getType());
      }
      this.variable.type=varType=rangeType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.position,""String_Node_Str"",this.variable.name);
      }
    }
 else     if (rangeType == Types.UNKNOWN) {
      rangeType=varType;
    }
 else     if (!varType.isSuperTypeOf(rangeType)) {
      Marker marker=markers.create(value1.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + rangeType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new RangeForStatement(this.variable,value1,value2,this.action == null ? null : this.action.resolve(markers,this));
  }
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=valueType.getElementType();
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.classEquals(valueType.getElementType())) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new ArrayForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this),valueType);
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveType(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=iterableType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.position,""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + iterableType);
      m.addInfo(""String_Node_Str"" + varType);
    }
    return new IterableForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this),valueType,iterableType);
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=Types.CHAR;
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new StringForStatement(this.variable,this.action == null ? null : this.action.resolve(markers,this));
  }
  Marker m=markers.create(this.variable.position,""String_Node_Str"");
  m.addInfo(""String_Node_Str"" + varType);
  m.addInfo(""String_Node_Str"" + valueType);
  if (this.action != null) {
    this.action=this.action.resolve(markers,this);
  }
  this.context=null;
  return this;
}",0.9938225101702576
84691,"@Override public IClass getTheClass(){
  return null;
}","@Override public IClass getTheClass(){
  return Types.OBJECT_CLASS;
}",0.8225806451612904
84692,"@Override public void toString(String prefix,StringBuilder buffer){
  if (this.instance != null) {
    this.instance.toString(prefix,buffer);
  }
  if (this.genericData != null) {
    if (this.instance != null || this.instance.valueTag() != FIELD_ACCESS) {
      buffer.append(""String_Node_Str"");
    }
    this.genericData.toString(prefix,buffer);
  }
  this.arguments.toString(prefix,buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.instance != null) {
    this.instance.toString(prefix,buffer);
  }
  if (this.genericData != null) {
    if (this.instance != null && this.instance.valueTag() != FIELD_ACCESS) {
      buffer.append(""String_Node_Str"");
    }
    this.genericData.toString(prefix,buffer);
  }
  this.arguments.toString(prefix,buffer);
}",0.9949494949494948
84693,"@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    if (this.instance.valueTag() == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.instance != null) {
        fa.instance=fa.instance.resolve(markers,context);
      }
      IValue v1=fa.resolveFieldAccess(markers,context);
      if (v1 != null) {
        this.instance=v1;
        this.arguments.resolve(markers,context);
      }
 else {
        this.arguments.resolve(markers,context);
        IArguments arguments=new SingleArgument(new Array(((ArgumentList)this.arguments).getValues(),this.arguments.size()));
        IMethod m=ICall.resolveMethod(context,fa.instance,fa.name,arguments);
        if (m != null) {
          MethodCall mc=new MethodCall(fa.position,fa.instance,fa.name);
          mc.method=m;
          mc.arguments=arguments;
          mc.dotless=fa.dotless;
          mc.checkArguments(markers,context);
          return mc;
        }
        ICall.addResolveMarker(markers,this.position,fa.instance,fa.name,arguments);
        return this;
      }
    }
 else {
      this.instance=this.instance.resolve(markers,context);
      this.arguments.resolve(markers,context);
    }
  }
 else {
    this.arguments.resolve(markers,context);
  }
  int count=this.arguments.size();
  ArgumentList argumentList=new ArgumentList(count);
  for (int i=0; i < count; i++) {
    argumentList.addValue(this.arguments.getValue(i,null));
  }
  IMethod m=ICall.resolveMethod(context,this.instance,Name.subscript,argumentList);
  if (m != null) {
    this.arguments=argumentList;
    this.method=m;
    this.checkArguments(markers,context);
    return this;
  }
  ICall.addResolveMarker(markers,position,this.instance,Name.subscript,argumentList);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    if (this.instance.valueTag() == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.instance != null) {
        fa.instance=fa.instance.resolve(markers,context);
      }
      IValue v1=fa.resolveFieldAccess(markers,context);
      if (v1 != null) {
        this.instance=v1;
        this.arguments.resolve(markers,context);
      }
 else {
        this.arguments.resolve(markers,context);
        Array array=new Array(((ArgumentList)this.arguments).getValues(),this.arguments.size());
        array.position=this.arguments.getFirstValue().getPosition().to(this.arguments.getLastValue().getPosition());
        IArguments arguments=new SingleArgument(array);
        IMethod m=ICall.resolveMethod(context,fa.instance,fa.name,arguments);
        if (m != null) {
          MethodCall mc=new MethodCall(fa.position,fa.instance,fa.name);
          mc.method=m;
          mc.arguments=arguments;
          mc.dotless=fa.dotless;
          mc.checkArguments(markers,context);
          return mc;
        }
        ICall.addResolveMarker(markers,this.position,fa.instance,fa.name,arguments);
        return this;
      }
    }
 else {
      this.instance=this.instance.resolve(markers,context);
      this.arguments.resolve(markers,context);
    }
  }
 else {
    this.arguments.resolve(markers,context);
  }
  int count=this.arguments.size();
  ArgumentList argumentList=new ArgumentList(count);
  for (int i=0; i < count; i++) {
    argumentList.addValue(this.arguments.getValue(i,null));
  }
  IMethod m=ICall.resolveMethod(context,this.instance,Name.subscript,argumentList);
  if (m != null) {
    this.arguments=argumentList;
    this.method=m;
    this.checkArguments(markers,context);
    return this;
  }
  ICall.addResolveMarker(markers,position,this.instance,Name.subscript,argumentList);
  return this;
}",0.923529411764706
84694,"@Override public IType resolve(MarkerList markers,IContext context){
  this.resolveTypes(markers,context);
  return this;
}","@Override public IType resolve(MarkerList markers,IContext context){
  if (this.upperBound != null) {
    this.upperBound=this.upperBound.resolve(markers,context);
  }
  if (this.lowerBound != null) {
    this.lowerBound=this.lowerBound.resolve(markers,context);
  }
  return this;
}",0.4679802955665024
84695,"@Override public void writeTypeExpression(MethodWriter writer) throws BytecodeException {
  if (this.lowerBound != null) {
    this.lowerBound.writeTypeExpression(writer);
  }
 else {
    writer.writeInsn(Opcodes.ACONST_NULL);
  }
  writer.writeLDC(this.upperBoundCount);
  writer.writeNewArray(""String_Node_Str"",1);
  for (int i=0; i < this.upperBoundCount; i++) {
    writer.writeInsn(Opcodes.DUP);
    writer.writeLDC(i);
    this.upperBounds[i].writeTypeExpression(writer);
    writer.writeInsn(Opcodes.AASTORE);
  }
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}","@Override public void writeTypeExpression(MethodWriter writer) throws BytecodeException {
  if (this.lowerBound != null) {
    this.lowerBound.writeTypeExpression(writer);
  }
 else {
    writer.writeInsn(Opcodes.ACONST_NULL);
  }
  if (this.upperBound != null) {
    this.upperBound.writeTypeExpression(writer);
  }
 else {
    writer.writeInsn(Opcodes.ACONST_NULL);
  }
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}",0.7956795679567957
84696,"@Override public void appendSignature(StringBuilder buffer){
  if (this.lowerBound != null) {
    buffer.append('-');
    this.lowerBound.appendSignature(buffer);
  }
 else   if (this.upperBoundCount > 0) {
    buffer.append('+');
    this.upperBounds[0].appendSignature(buffer);
  }
 else {
    buffer.append(""String_Node_Str"");
  }
}","@Override public void appendSignature(StringBuilder buffer){
  if (this.lowerBound != null) {
    buffer.append('-');
    this.lowerBound.appendSignature(buffer);
  }
 else   if (this.upperBound != null) {
    buffer.append('+');
    this.upperBound.appendSignature(buffer);
  }
 else {
    buffer.append('*');
  }
}",0.9370199692780338
84697,"@Override public IType getSuperType(){
  return this.upperBoundCount == 0 ? Types.UNKNOWN : this.upperBounds[0];
}","@Override public IType getSuperType(){
  return this.upperBound == null ? Types.UNKNOWN : this.upperBound;
}",0.9369369369369368
84698,"@Override public IType getConcreteType(ITypeContext context){
  if (this.lowerBound != null) {
    return this.lowerBound.getConcreteType(context);
  }
  WildcardType type=new WildcardType(this.position);
  type.upperBounds=new IType[this.upperBoundCount];
  type.upperBoundCount=this.upperBoundCount;
  for (int i=0; i < this.upperBoundCount; i++) {
    type.upperBounds[i]=this.upperBounds[i].getConcreteType(context);
  }
  return type;
}","@Override public IType getConcreteType(ITypeContext context){
  if (this.lowerBound != null) {
    return this.lowerBound.getConcreteType(context);
  }
  if (this.upperBound != null) {
    WildcardType copy=new WildcardType(this.position);
    copy.upperBound=this.upperBound.getConcreteType(context);
    return copy;
  }
  return this;
}",0.6256410256410256
84699,"@Override public IClass getTheClass(){
  return null;
}","@Override public IClass getTheClass(){
  return this.upperBound != null ? this.upperBound.getTheClass() : Types.OBJECT_CLASS;
}",0.6043956043956044
84700,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  IType type;
  for (int i=0; i < this.upperBoundCount; i++) {
    type=this.upperBounds[i].resolveType(typeVar,concrete);
    if (type != null) {
      return type;
    }
  }
  return Types.ANY;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.upperBound != null) {
    return this.upperBound.resolveType(typeVar);
  }
  return Types.ANY;
}",0.6548672566371682
84701,"@Override public IDataMember resolveField(Name name){
  for (int i=0; i < this.upperBoundCount; i++) {
    IDataMember f=this.upperBounds[i].resolveField(name);
    if (f != null) {
      return f;
    }
  }
  return null;
}","@Override public IDataMember resolveField(Name name){
  if (this.upperBound != null) {
    return this.upperBound.resolveField(name);
  }
  return null;
}",0.6296296296296297
84702,"@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  if (this.upperBoundCount == 0) {
    Types.OBJECT_CLASS.getMethodMatches(list,instance,name,arguments);
    return;
  }
  for (int i=0; i < this.upperBoundCount; i++) {
    this.upperBounds[i].getMethodMatches(list,instance,name,arguments);
  }
}","@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  if (this.upperBound != null) {
    this.upperBound.getMethodMatches(list,instance,name,arguments);
  }
}",0.6875
84703,"@Override public String getInternalName(){
  if (this.upperBoundCount > 0) {
    return this.upperBounds[0].getInternalName();
  }
  return ""String_Node_Str"";
}","@Override public String getInternalName(){
  if (this.upperBound != null) {
    return this.upperBound.getInternalName();
  }
  return ""String_Node_Str"";
}",0.9396825396825396
84704,"@Override public boolean equals(IType type){
  if (this.upperBoundCount > 0) {
    for (int i=0; i < this.upperBoundCount; i++) {
      if (!this.upperBounds[i].isSuperTypeOf(type)) {
        return false;
      }
    }
  }
  if (this.lowerBound != null) {
    if (!type.isSuperTypeOf(this.lowerBound)) {
      return false;
    }
  }
  return !type.isPrimitive();
}","@Override public boolean equals(IType type){
  if (this.upperBound != null) {
    if (!this.upperBound.isSuperTypeOf(type)) {
      return false;
    }
  }
  if (this.lowerBound != null) {
    if (!type.isSuperTypeOf(this.lowerBound)) {
      return false;
    }
  }
  return true;
}",0.2218798151001541
84705,"@Override public WildcardType clone(){
  WildcardType clone=new WildcardType(this.position);
  clone.lowerBound=this.lowerBound;
  clone.upperBoundCount=this.upperBoundCount;
  clone.upperBounds=this.upperBounds;
  return clone;
}","@Override public WildcardType clone(){
  WildcardType clone=new WildcardType(this.position);
  clone.lowerBound=this.lowerBound;
  clone.upperBound=this.upperBound;
  return clone;
}",0.883495145631068
84706,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append('_');
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
  if (this.upperBoundCount > 0) {
    buffer.append(Formatting.Type.genericUpperBound);
    this.upperBounds[0].toString(prefix,buffer);
    for (int i=1; i < this.upperBoundCount; i++) {
      buffer.append(Formatting.Type.genericBoundSeperator);
      this.upperBounds[i].toString(prefix,buffer);
    }
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append('_');
  if (this.lowerBound != null) {
    buffer.append(Formatting.Type.genericLowerBound);
    this.lowerBound.toString(prefix,buffer);
  }
  if (this.upperBound != null) {
    buffer.append(Formatting.Type.genericUpperBound);
    this.upperBound.toString(prefix,buffer);
  }
}",0.7897664071190211
84707,"@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  for (int i=0; i < this.upperBoundCount; i++) {
    this.upperBounds[i].inferTypes(concrete,typeContext);
  }
}","@Override public void inferTypes(IType concrete,ITypeContext typeContext){
  if (this.upperBound != null) {
    this.upperBound.inferTypes(concrete,typeContext);
  }
}",0.8983050847457628
84708,"@Override public String toString(){
  StringBuilder buf=new StringBuilder();
  this.method.toString(""String_Node_Str"",buf);
  return buf.toString();
}","@Override public String toString(){
  StringBuilder buf=new StringBuilder();
  Util.methodSignatureToString(this.method,buf);
  return buf.toString();
}",0.8145695364238411
84709,"/** 
 * Returns true if   {@code type} is a subtype of this type
 * @param type
 * @return
 */
public default boolean isSuperTypeOf(IType type){
  if (this == type) {
    return true;
  }
  IClass thisClass=this.getTheClass();
  if (thisClass == Types.OBJECT_CLASS) {
    return true;
  }
  if (type.isArrayType()) {
    return false;
  }
  IClass thatClass=type.getTheClass();
  if (thatClass != null) {
    return thatClass == thisClass || thatClass.isSubTypeOf(this);
  }
  return type.equals(this);
}","/** 
 * Returns true if   {@code type} is a subtype of this type
 * @param type
 * @return
 */
public default boolean isSuperTypeOf(IType type){
  if (this == type) {
    return true;
  }
  IClass thisClass=this.getTheClass();
  if (thisClass == Types.OBJECT_CLASS) {
    return true;
  }
  if (type.typeTag() == WILDCARD_TYPE) {
    return type.equals(this);
  }
  if (type.isArrayType()) {
    return false;
  }
  IClass thatClass=type.getTheClass();
  if (thatClass != null) {
    return thatClass == thisClass || thatClass.isSubTypeOf(this);
  }
  return false;
}",0.903828197945845
84710,"private static int readTypeList(String desc,int start,ITypeList list){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    list.addType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
list.addType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
list.addType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'C':
list.addType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'S':
list.addType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'I':
list.addType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
list.addType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
list.addType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
list.addType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
list.addType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
list.addType(type);
return end1 + 1;
}
case '*':
list.addType(new WildcardType());
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.addUpperBound(readType(desc,start + 1,end1));
list.addType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setLowerBound(readType(desc,start + 1,end1));
list.addType(var);
return end1 + 1;
}
}
return start;
}","private static int readTypeList(String desc,int start,ITypeList list){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    list.addType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
list.addType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
list.addType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'C':
list.addType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'S':
list.addType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'I':
list.addType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
list.addType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
list.addType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
list.addType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
list.addType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
list.addType(type);
return end1 + 1;
}
case '*':
list.addType(new WildcardType());
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setUpperBound(readType(desc,start + 1,end1));
list.addType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setLowerBound(readType(desc,start + 1,end1));
list.addType(var);
return end1 + 1;
}
}
return start;
}",0.9983766233766234
84711,"private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType());
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.addUpperBound(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setLowerBound(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
}
return start;
}","private static int readTyped(String desc,int start,ITypeConsumer consumer){
  int array=0;
  char c;
  while ((c=desc.charAt(start)) == '[') {
    array++;
    start++;
  }
switch (c) {
case 'V':
    consumer.setType(ArrayType.getArrayType(Types.VOID,array));
  return start + 1;
case 'Z':
consumer.setType(ArrayType.getArrayType(Types.BOOLEAN,array));
return start + 1;
case 'B':
consumer.setType(ArrayType.getArrayType(Types.BYTE,array));
return start + 1;
case 'S':
consumer.setType(ArrayType.getArrayType(Types.SHORT,array));
return start + 1;
case 'C':
consumer.setType(ArrayType.getArrayType(Types.CHAR,array));
return start + 1;
case 'I':
consumer.setType(ArrayType.getArrayType(Types.INT,array));
return start + 1;
case 'J':
consumer.setType(ArrayType.getArrayType(Types.LONG,array));
return start + 1;
case 'F':
consumer.setType(ArrayType.getArrayType(Types.FLOAT,array));
return start + 1;
case 'D':
consumer.setType(ArrayType.getArrayType(Types.DOUBLE,array));
return start + 1;
case 'L':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
IType type=readReferenceType(desc,start + 1,end1);
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case 'T':
{
int end1=desc.indexOf(';',start);
IType type=new InternalTypeVarType(desc.substring(start + 1,end1));
if (array > 0) {
type=ArrayType.getArrayType(type,array);
}
consumer.setType(type);
return end1 + 1;
}
case '*':
consumer.setType(new WildcardType());
return start + 1;
case '+':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setUpperBound(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
case '-':
{
int end1=getMatchingSemicolon(desc,start,desc.length());
WildcardType var=new WildcardType();
var.setLowerBound(readType(desc,start + 1,end1));
consumer.setType(var);
return end1 + 1;
}
}
return start;
}",0.998428496595076
84712,"@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.resolve(markers,context);
  }
  IValue v=this.resolveFieldAccess(context);
  if (v != null) {
    return v;
  }
  Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
  marker.addInfo(""String_Node_Str"" + this.name.qualified);
  if (this.instance != null) {
    marker.addInfo(""String_Node_Str"" + this.instance.getType());
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance=this.instance.resolve(markers,context);
  }
  IValue v=this.resolveFieldAccess(markers,context);
  if (v != null) {
    return v;
  }
  Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
  marker.addInfo(""String_Node_Str"" + this.name.qualified);
  if (this.instance != null) {
    marker.addInfo(""String_Node_Str"" + this.instance.getType());
  }
  return this;
}",0.9921722113502937
84713,"protected IValue resolveFieldAccess(IContext context){
  IDataMember field=ICall.resolveField(context,this.instance,this.name);
  if (field != null) {
    if (field.isEnumConstant()) {
      EnumValue enumValue=new EnumValue(this.position);
      enumValue.name=this.name;
      enumValue.type=field.getType();
      return enumValue;
    }
    this.field=field;
    return this;
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,EmptyArguments.INSTANCE);
  if (method != null) {
    return this.toMethodCall(method);
  }
  if (this.instance == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass != null) {
      return new ClassAccess(this.position,iclass.getType());
    }
  }
  return null;
}","protected IValue resolveFieldAccess(MarkerList markers,IContext context){
  IDataMember field=ICall.resolveField(context,this.instance,this.name);
  if (field != null) {
    if (field.isEnumConstant()) {
      EnumValue enumValue=new EnumValue(this.position);
      enumValue.name=this.name;
      enumValue.type=field.getType();
      return enumValue;
    }
    this.field=field;
    return this;
  }
  IMethod method=ICall.resolveMethod(context,this.instance,this.name,EmptyArguments.INSTANCE);
  if (method != null) {
    AbstractCall mc=this.toMethodCall(method);
    mc.checkArguments(markers,context);
    return mc;
  }
  if (this.instance == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass != null) {
      return new ClassAccess(this.position,iclass.getType());
    }
  }
  return null;
}",0.9387239418825016
84714,"private AbstractCall resolveApply(MarkerList markers,IContext context){
  IValue instance;
  IMethod method;
  IDataMember field=context.resolveField(this.name);
  if (field == null) {
    IClass iclass=context.resolveClass(this.name);
    if (iclass == null) {
      return null;
    }
    IMethod match=IContext.resolveMethod(iclass,null,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=new ClassAccess(this.position,new ClassType(iclass));
  }
 else {
    FieldAccess access=new FieldAccess(this.position);
    access.field=field;
    access.name=this.name;
    access.dotless=this.dotless;
    IMethod match=IContext.resolveMethod(field.getType(),access,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=access;
  }
  ApplyMethodCall call=new ApplyMethodCall(this.position);
  call.method=method;
  call.instance=instance;
  call.arguments=this.arguments;
  call.genericData=this.genericData;
  return call;
}","private AbstractCall resolveApply(MarkerList markers,IContext context){
  IValue instance;
  IMethod method;
  IDataMember field=context.resolveField(this.name);
  if (field == null) {
    IClass iclass=IContext.resolveClass(context,this.name);
    if (iclass == null) {
      return null;
    }
    IMethod match=IContext.resolveMethod(iclass,null,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=new ClassAccess(this.position,new ClassType(iclass));
  }
 else {
    FieldAccess access=new FieldAccess(this.position);
    access.field=field;
    access.name=this.name;
    access.dotless=this.dotless;
    IMethod match=IContext.resolveMethod(field.getType(),access,Name.apply,this.arguments);
    if (match == null) {
      return null;
    }
    method=match;
    instance=access;
  }
  ApplyMethodCall call=new ApplyMethodCall(this.position);
  call.method=method;
  call.instance=instance;
  call.arguments=this.arguments;
  call.genericData=this.genericData;
  return call;
}",0.994693680656054
84715,"@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    if (this.instance.valueTag() == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.instance != null) {
        fa.instance=fa.instance.resolve(markers,context);
      }
      IValue v1=fa.resolveFieldAccess(context);
      if (v1 != null) {
        this.instance=v1;
        this.arguments.resolve(markers,context);
      }
 else {
        this.arguments.resolve(markers,context);
        IArguments arguments=new SingleArgument(new Array(((ArgumentList)this.arguments).getValues(),this.arguments.size()));
        IMethod m=ICall.resolveMethod(context,fa.instance,fa.name,arguments);
        if (m != null) {
          MethodCall mc=new MethodCall(fa.position,fa.instance,fa.name);
          mc.method=m;
          mc.arguments=arguments;
          mc.dotless=fa.dotless;
          mc.checkArguments(markers,context);
          return mc;
        }
        ICall.addResolveMarker(markers,this.position,fa.instance,fa.name,arguments);
        return this;
      }
    }
 else {
      this.instance=this.instance.resolve(markers,context);
      this.arguments.resolve(markers,context);
    }
  }
 else {
    this.arguments.resolve(markers,context);
  }
  int count=this.arguments.size();
  ArgumentList argumentList=new ArgumentList(count);
  for (int i=0; i < count; i++) {
    argumentList.addValue(this.arguments.getValue(i,null));
  }
  IMethod m=ICall.resolveMethod(context,this.instance,Name.subscript,argumentList);
  if (m != null) {
    this.arguments=argumentList;
    this.method=m;
    this.checkArguments(markers,context);
    return this;
  }
  ICall.addResolveMarker(markers,position,this.instance,Name.subscript,argumentList);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  if (this.instance != null) {
    if (this.instance.valueTag() == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.instance != null) {
        fa.instance=fa.instance.resolve(markers,context);
      }
      IValue v1=fa.resolveFieldAccess(markers,context);
      if (v1 != null) {
        this.instance=v1;
        this.arguments.resolve(markers,context);
      }
 else {
        this.arguments.resolve(markers,context);
        IArguments arguments=new SingleArgument(new Array(((ArgumentList)this.arguments).getValues(),this.arguments.size()));
        IMethod m=ICall.resolveMethod(context,fa.instance,fa.name,arguments);
        if (m != null) {
          MethodCall mc=new MethodCall(fa.position,fa.instance,fa.name);
          mc.method=m;
          mc.arguments=arguments;
          mc.dotless=fa.dotless;
          mc.checkArguments(markers,context);
          return mc;
        }
        ICall.addResolveMarker(markers,this.position,fa.instance,fa.name,arguments);
        return this;
      }
    }
 else {
      this.instance=this.instance.resolve(markers,context);
      this.arguments.resolve(markers,context);
    }
  }
 else {
    this.arguments.resolve(markers,context);
  }
  int count=this.arguments.size();
  ArgumentList argumentList=new ArgumentList(count);
  for (int i=0; i < count; i++) {
    argumentList.addValue(this.arguments.getValue(i,null));
  }
  IMethod m=ICall.resolveMethod(context,this.instance,Name.subscript,argumentList);
  if (m != null) {
    this.arguments=argumentList;
    this.method=m;
    this.checkArguments(markers,context);
    return this;
  }
  ICall.addResolveMarker(markers,position,this.instance,Name.subscript,argumentList);
  return this;
}",0.9977703455964324
84716,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    if (this.type == Types.UNKNOWN) {
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
      return;
    }
    IValue value1=this.value.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
    if (this.type == Types.UNKNOWN) {
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
    }
    IValue value1=this.value.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}",0.992090395480226
84717,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
  }
  if (this.type == Types.UNKNOWN) {
    this.type=this.value.getType();
    if (this.type == Types.UNKNOWN) {
      markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    }
    return;
  }
  IValue value1=this.value.withType(this.type,null,markers,context);
  if (value1 == null) {
    Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + this.value.getType());
  }
 else {
    this.value=value1;
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.value != null) {
    this.value=this.value.resolve(markers,context);
  }
  if (this.type == Types.UNKNOWN) {
    this.type=this.value.getType();
    if (this.type == Types.UNKNOWN) {
      markers.add(this.position,""String_Node_Str"",this.name.unqualified);
    }
  }
  IValue value1=this.value.withType(this.type,null,markers,context);
  if (value1 == null) {
    Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
    marker.addInfo(""String_Node_Str"" + this.type);
    marker.addInfo(""String_Node_Str"" + this.value.getType());
  }
 else {
    this.value=value1;
  }
}",0.9916782246879334
84718,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,this);
    if (this.type == Types.UNKNOWN) {
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
      return;
    }
    IValue value1=this.value.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,context);
  }
  if (this.value != null) {
    this.value=this.value.resolve(markers,this);
    if (this.type == Types.UNKNOWN) {
      this.type=this.value.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
    }
    IValue value1=this.value.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.position,""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}",0.992798353909465
84719,"private void checkTypeVarsInferred(MarkerList markers,ITypeContext typeContext){
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable typeVar=this.generics[i];
    IType type=typeContext.resolveType(typeVar);
    if (type == null || (type.typeTag() == IType.TYPE_VAR_TYPE && ((TypeVarType)type).typeVar == typeVar)) {
      markers.add(position,""String_Node_Str"",this.name,typeVar.getName());
      typeContext.addMapping(typeVar,Types.ANY);
    }
  }
}","private void checkTypeVarsInferred(MarkerList markers,ICodePosition position,ITypeContext typeContext){
  for (int i=0; i < this.genericCount; i++) {
    ITypeVariable typeVar=this.generics[i];
    IType type=typeContext.resolveType(typeVar);
    if (type == null || (type.typeTag() == IType.TYPE_VAR_TYPE && ((TypeVarType)type).typeVar == typeVar)) {
      markers.add(position,""String_Node_Str"",this.name,typeVar.getName());
      typeContext.addMapping(typeVar,Types.ANY);
    }
  }
}",0.9758149316508938
84720,"@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    IParameter par=this.parameters[0];
    parType=par.getType().getConcreteType(typeContext);
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
 else {
      instance=instance1;
    }
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
      for (int i=0; i < this.parameterCount - 2; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      return instance;
    }
    for (int i=0; i < this.parameterCount - 1; i++) {
      arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
    }
    return instance;
  }
 else   if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    return null;
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=instance.withType(this.theClass.getType().getConcreteType(typeContext),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,context.getThisClass().getType());
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    IParameter par=this.parameters[0];
    parType=par.getType().getConcreteType(typeContext);
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
 else {
      instance=instance1;
    }
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],typeContext,markers,context);
      for (int i=0; i < this.parameterCount - 2; i++) {
        arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
      }
      this.checkTypeVarsInferred(markers,position,typeContext);
      return instance;
    }
    for (int i=0; i < this.parameterCount - 1; i++) {
      arguments.checkValue(i,this.parameters[i + 1],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
 else   if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType().getConcreteType(typeContext);
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType,typeContext,markers,context);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return null;
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
      }
      instance=null;
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
 else     if (this.intrinsicOpcodes == null && instance.isPrimitive()) {
      instance=instance.withType(this.theClass.getType().getConcreteType(typeContext),typeContext,markers,context);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,context.getThisClass().getType());
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],typeContext,markers,null);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
    }
    this.checkTypeVarsInferred(markers,position,typeContext);
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],typeContext,markers,context);
  }
  this.checkTypeVarsInferred(markers,position,typeContext);
  return instance;
}",0.9529733009708736
84721,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue=this.defaultValue.resolve(markers,context);
    if (this.type == Types.UNKNOWN) {
      this.type=this.defaultValue.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
      return;
    }
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue=this.defaultValue.resolve(markers,context);
    if (this.type == Types.UNKNOWN) {
      this.type=this.defaultValue.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
    }
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}",0.9925611052072264
84722,"@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    context.getThisClass().addCompilable(this);
    this.defaultValue=this.defaultValue.resolve(markers,context);
    if (this.type == Types.UNKNOWN) {
      this.type=this.defaultValue.getType();
      if (this.type == Types.UNKNOWN) {
        markers.add(this.position,""String_Node_Str"",this.name.unqualified);
      }
      return;
    }
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
    }
    return;
  }
  if (this.type == Types.UNKNOWN) {
    markers.add(this.position,""String_Node_Str"",this.name.unqualified);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  super.resolve(markers,context);
  if (this.defaultValue != null) {
    context.getThisClass().addCompilable(this);
    this.defaultValue=this.defaultValue.resolve(markers,context);
    IValue value1=this.defaultValue.withType(this.type,null,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(this.defaultValue.getPosition(),""String_Node_Str"",this.name.unqualified);
      marker.addInfo(""String_Node_Str"" + this.type);
      marker.addInfo(""String_Node_Str"" + this.defaultValue.getType());
    }
 else {
      this.defaultValue=value1;
    }
    return;
  }
}",0.3787053841500302
84723,"@Override public void writeTypeExpression(MethodWriter writer) throws BytecodeException {
  if (this.bound != null) {
    this.bound.writeTypeExpression(writer);
  }
 else {
    writer.writeInsn(Opcodes.ACONST_NULL);
  }
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}","@Override public void writeTypeExpression(MethodWriter writer) throws BytecodeException {
  writer.writeFieldInsn(Opcodes.GETSTATIC,""String_Node_Str"",this.variance.name(),""String_Node_Str"");
  if (this.bound != null) {
    this.bound.writeTypeExpression(writer);
  }
 else {
    writer.writeInsn(Opcodes.ACONST_NULL);
  }
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}",0.8672798948751642
84724,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolve(markers,context,TypePosition.TYPE);
  GenericType generic=new GenericType(Types.CLASS_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolve(markers,context,TypePosition.CLASS);
  GenericType generic=new GenericType(Types.CLASS_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}",0.988110964332893
84725,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolve(markers,context,TypePosition.GENERIC_ARGUMENT);
  GenericType generic=new GenericType(Types.TYPE_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.type == null) {
    this.type=Types.UNKNOWN;
    markers.add(this.position,""String_Node_Str"");
    return;
  }
  this.type=this.type.resolve(markers,context,TypePosition.TYPE);
  GenericType generic=new GenericType(Types.TYPE_CLASS);
  generic.addType(this.type);
  this.genericType=generic;
}",0.9765013054830288
84726,"@Override public boolean isSuperTypeOf(IType type){
  IClass iclass=getTupleClass(this.typeCount);
  if (!iclass.isSubTypeOf(type)) {
    return false;
  }
  for (int i=0; i < this.typeCount; i++) {
    ITypeVariable typeVar=iclass.getTypeVariable(i);
    IType type1=type.resolveType(typeVar);
    if (!type1.isSuperTypeOf(this.types[i])) {
      return false;
    }
  }
  return true;
}","@Override public boolean isSuperTypeOf(IType type){
  IClass iclass=getTupleClass(this.typeCount);
  if (!iclass.isSubTypeOf(type)) {
    return false;
  }
  for (int i=0; i < this.typeCount; i++) {
    ITypeVariable typeVar=iclass.getTypeVariable(i);
    IType type1=type.resolveType(typeVar);
    if (!this.types[i].isSuperTypeOf(type1)) {
      return false;
    }
  }
  return true;
}",0.9278350515463918
84727,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
int nextType=token.next().type();
if (nextType == Symbols.CLOSE_PARENTHESIS) {
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
MethodCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(MethodCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
int nextType=token.next().type();
if (nextType == Symbols.CLOSE_PARENTHESIS) {
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
AbstractCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(AbstractCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.998167779086507
84728,"@Override public void appendGenericSignature(StringBuilder builder){
  if (this.lowerBound != null) {
    builder.append('-');
    this.lowerBound.appendGenericSignature(builder);
    return;
  }
  if (this.upperBound != null) {
    builder.append('+');
    this.upperBound.appendSignature(builder);
    return;
  }
  builder.append('*');
}","@Override public void appendGenericSignature(StringBuilder builder){
  if (this.bound != null) {
    if (this.variance == Variance.CONTRAVARIANT) {
      builder.append('-');
    }
 else {
      builder.append('+');
    }
    this.bound.appendSignature(builder);
    return;
  }
  builder.append('*');
}",0.5287713841368584
84729,"public WildcardType(Type lowerBound,Type upperBounds){
  this.lowerBound=lowerBound;
  this.upperBound=upperBounds;
}","public WildcardType(Variance variance,Type bound){
  this.variance=variance;
  this.bound=bound;
}",0.6325581395348837
84730,"public static <T>WildcardType<T> apply(Type lowerBound,Type upperBounds){
  return new WildcardType(lowerBound,upperBounds);
}","public static <T>WildcardType<T> apply(Variance variance,Type upperBounds){
  return new WildcardType(variance,upperBounds);
}",0.8333333333333334
84731,"@Override public void appendSignature(StringBuilder builder){
  if (this.lowerBound != null) {
    builder.append(""String_Node_Str"");
    return;
  }
  if (this.upperBound != null) {
    this.upperBound.appendSignature(builder);
  }
}","@Override public void appendSignature(StringBuilder builder){
  if (this.bound != null && this.variance == Variance.COVARIANT) {
    this.bound.appendSignature(builder);
    return;
  }
  builder.append(""String_Node_Str"");
}",0.5633187772925764
84732,"@Override public void toString(StringBuilder builder){
  builder.append('_');
  if (this.lowerBound != null) {
    builder.append(""String_Node_Str"");
    this.lowerBound.toString(builder);
  }
  if (this.upperBound != null) {
    builder.append(""String_Node_Str"");
    this.upperBound.toString(builder);
  }
}","@Override public void toString(StringBuilder builder){
  builder.append('_');
  if (this.bound != null) {
    if (this.variance == Variance.CONTRAVARIANT) {
      builder.append(""String_Node_Str"");
    }
 else {
      builder.append(""String_Node_Str"");
    }
    this.bound.toString(builder);
  }
}",0.3920922570016474
84733,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  return null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  return Types.ANY;
}",0.9851767388825542
84734,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  IType type;
  for (int i=0; i < this.upperBoundCount; i++) {
    type=this.upperBounds[i].resolveType(typeVar,concrete);
    if (type != null) {
      return type;
    }
  }
  return null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  IType type;
  for (int i=0; i < this.upperBoundCount; i++) {
    type=this.upperBounds[i].resolveType(typeVar,concrete);
    if (type != null) {
      return type;
    }
  }
  return Types.ANY;
}",0.9757914338919924
84735,"@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex >= 0) {
    writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  }
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,this.boxingMethod.getTheClass().getInternalName(),this.boxingMethod.getName().qualified,this.boxingMethod.getDescriptor(),false);
  this.pattern.writeInvJump(writer,-1,elseLabel);
}","@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex >= 0) {
    writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  }
  this.boxingMethod.writeInvoke(writer,null,null);
  this.pattern.writeInvJump(writer,-1,elseLabel);
}",0.7422096317280453
84736,"@Override public void writeJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex >= 0) {
    writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  }
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,this.boxingMethod.getTheClass().getInternalName(),this.boxingMethod.getName().qualified,this.boxingMethod.getDescriptor(),false);
  this.pattern.writeJump(writer,-1,elseLabel);
}","@Override public void writeJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex >= 0) {
    writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  }
  this.boxingMethod.writeInvoke(writer,null,null);
  this.pattern.writeJump(writer,-1,elseLabel);
}",0.7377521613832853
84737,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  return concrete.isArrayType() ? this.type.resolveType(typeVar,concrete.getElementType()) : null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  return concrete.isArrayType() ? this.type.resolveType(typeVar,concrete.getElementType()) : Types.ANY;
}",0.963172804532578
84738,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  IType type;
  if (concrete.typeTag() != GENERIC) {
    return null;
  }
  GenericType gt=(GenericType)concrete;
  if (gt.typeArgumentCount != this.typeArgumentCount) {
    return null;
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    type=this.typeArguments[i].resolveType(typeVar,gt.typeArguments[i]);
    if (type != null) {
      return type;
    }
  }
  return null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  IType type;
  if (concrete.typeTag() != GENERIC) {
    return Types.ANY;
  }
  GenericType gt=(GenericType)concrete;
  if (gt.typeArgumentCount != this.typeArgumentCount) {
    return Types.ANY;
  }
  for (int i=0; i < this.typeArgumentCount; i++) {
    type=this.typeArguments[i].resolveType(typeVar,gt.typeArguments[i]);
    if (type != null) {
      return type;
    }
  }
  return Types.ANY;
}",0.958109559613319
84739,"/** 
 * Returns the type argument in this generic type for the given type variable, where this is the template containing the type variable types and   {@code concrete} contains the concrete types.<p> Example:<br> <pre> GenericType gt1 = type[List].genericType // => List[E] GenericType gt2 = type[List[String]] ITypeVariable tv = type[List].getTypeVariable(""E"") gt1.resolveType(tv, gt2) // => String </pre>
 */
public default IType resolveType(ITypeVariable typeVar,IType concrete){
  return null;
}","/** 
 * Returns the type argument in this generic type for the given type variable, where this is the template containing the type variable types and   {@code concrete} contains the concrete types.<p> Example:<br> <pre> GenericType gt1 = type[List].genericType // => List[E] GenericType gt2 = type[List[String]] ITypeVariable tv = type[List].getTypeVariable(""E"") gt1.resolveType(tv, gt2) // => String </pre>
 */
public default IType resolveType(ITypeVariable typeVar,IType concrete){
  return Types.ANY;
}",0.9870646766169154
84740,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (concrete.typeTag() != LAMBDA) {
    return null;
  }
  LambdaType lambdaType=(LambdaType)concrete;
  if (lambdaType.parameterCount != this.parameterCount) {
    return null;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IType concreteType=lambdaType.parameterTypes[i];
    IType type=this.parameterTypes[i].resolveType(typeVar,concreteType);
    if (type != null) {
      return type;
    }
  }
  return this.returnType.resolveType(typeVar,lambdaType.returnType);
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (concrete.typeTag() != LAMBDA) {
    return Types.ANY;
  }
  LambdaType lambdaType=(LambdaType)concrete;
  if (lambdaType.parameterCount != this.parameterCount) {
    return Types.ANY;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IType concreteType=lambdaType.parameterTypes[i];
    IType type=this.parameterTypes[i].resolveType(typeVar,concreteType);
    if (type != null) {
      return type;
    }
  }
  return this.returnType.resolveType(typeVar,lambdaType.returnType);
}",0.9767857142857144
84741,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  return null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  return Types.ANY;
}",0.9297297297297298
84742,"private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=VALUE;
    this.field.setValue(lv);
    this.field=lv;
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.dotless=this.dotless;
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=0;
    pm.pushParser(new ExpressionParser(lv));
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.dotless=this.dotless;
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}",0.9850057670126874
84743,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
int nextType=token.next().type();
if (nextType == Symbols.CLOSE_PARENTHESIS) {
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.field.setValue(this.value);
pm.popParser();
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
MethodCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(MethodCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
switch (this.mode) {
case VALUE:
if (type == Symbols.OPEN_PARENTHESIS) {
int nextType=token.next().type();
if (nextType == Symbols.CLOSE_PARENTHESIS) {
  this.value=new VoidValue(token.to(token.next()));
  pm.skip();
  this.mode=0;
  return;
}
pm.pushParser(new LambdaOrTupleParser(this),true);
this.mode=ACCESS;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
Bytecode bc=new Bytecode(token);
pm.skip();
pm.pushParser(new BytecodeParser(bc));
this.mode=BYTECODE_END;
this.value=bc;
return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
pm.reparse();
return;
case PATTERN_IF:
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
case PATTERN_END:
if (type == Symbols.COLON) {
this.mode=0;
if (token.next().type() != Keywords.CASE) {
pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
case ARRAY_END:
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
case LIST_END:
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
pm.skip();
return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
case PARAMETERS_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case SUBSCRIPT_END:
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case CONSTRUCTOR:
{
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(cc.toClassConstructor(),pm);
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
case CONSTRUCTOR_END:
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
this.createBody(((ConstructorCall)this.value).toClassConstructor(),pm);
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case BYTECODE_END:
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
case TYPE_ARGUMENTS_END:
MethodCall mc=(MethodCall)this.value;
IToken next=token.next();
if (next.type() == Symbols.OPEN_PARENTHESIS) {
pm.skip();
mc.arguments=this.getArguments(pm,next.next());
}
 else {
mc.arguments=EmptyArguments.INSTANCE;
}
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ACCESS) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
SubscriptGetter getter=new SubscriptGetter(token,this.value);
this.value=getter;
this.mode=SUBSCRIPT_END;
pm.pushParser(new ExpressionListParser(getter.getArguments()));
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
MethodCall mc=new MethodCall(prev,null,prev.nameValue());
mc.arguments=args;
this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
MethodCall mc;
if (this.value.valueTag() == IValue.FIELD_ACCESS) {
mc=((FieldAccess)this.value).toMethodCall(null);
}
 else {
mc=(MethodCall)this.value;
}
mc.arguments=args;
this.value=mc;
}
 else {
ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
amc.instance=this.value;
amc.arguments=args;
this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.mode == ACCESS_2) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (this.dotless && this.operator != null) {
Operator operator=pm.getOperator(name);
int p;
if (operator == null || (p=this.operator.precedence) > operator.precedence) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
this.field.setValue(this.value);
pm.popParser(true);
return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.9968656131644248
84744,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  this.field.writeGet(writer,this.instance);
  writer.writeInsn(this.field.getType().getReturnOpcode());
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  this.writeExpression(writer);
  writer.writeInsn(this.field.getType().getReturnOpcode());
}",0.9159891598915988
84745,"@Override public int getTypeMatch(IType type){
  if (this.field == null) {
    return 0;
  }
  IType type1=this.field.getType();
  if (type.equals(type1)) {
    return 3;
  }
  if (type.isSuperTypeOf(type1)) {
    return 2;
  }
  return 0;
}","@Override public int getTypeMatch(IType type){
  if (this.field == null) {
    return 0;
  }
  IType type1=this.getType();
  if (type.equals(type1)) {
    return 3;
  }
  if (type.isSuperTypeOf(type1)) {
    return 2;
  }
  return 0;
}",0.9873949579831932
84746,"@Override public boolean isType(IType type){
  return this.field == null ? false : type.isSuperTypeOf(this.field.getType());
}","@Override public boolean isType(IType type){
  return this.field == null ? false : type.isSuperTypeOf(this.getType());
}",0.975609756097561
84747,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.field.writeGet(writer,this.instance);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  this.field.writeGet(writer,this.instance);
  if (!this.type.isSuperTypeOf(this.field.getType())) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  }
}",0.6649874055415617
84748,"@Override public IType getType(){
  return this.field == null ? Types.UNKNOWN : this.field.getType();
}","@Override public IType getType(){
  if (this.type == null) {
    if (this.field == null) {
      return Types.UNKNOWN;
    }
    if (this.instance == null) {
      return this.type=this.field.getType();
    }
    return this.type=this.field.getType().getConcreteType(this.instance.getType());
  }
  return this.type;
}",0.4323040380047506
84749,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  return Types.ANY;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != Types.ANY) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != Types.ANY) {
      return type.getConcreteType(concrete);
    }
  }
  return Types.ANY;
}",0.4125560538116592
84750,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.BOOLEAN) {
    return this;
  }
  if (type.isSuperTypeOf(Types.BOOLEAN)) {
    return new BoxedValue(this,Types.BOOLEAN.boxMethod);
  }
  if (type.getTheClass().getAnnotation(BOOLEAN_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.BOOLEAN) {
    return this;
  }
  if (type.isSuperTypeOf(Types.BOOLEAN)) {
    return new BoxedValue(this,Types.BOOLEAN.boxMethod);
  }
  if (type.getTheClass().getAnnotation(BOOLEAN_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9354066985645934
84751,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.CHAR) {
    return this;
  }
  if (type.isSuperTypeOf(Types.CHAR)) {
    return new BoxedValue(this,Types.CHAR.boxMethod);
  }
  if (type.getTheClass().getAnnotation(CHAR_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.CHAR) {
    return this;
  }
  if (type.isSuperTypeOf(Types.CHAR)) {
    return new BoxedValue(this,Types.CHAR.boxMethod);
  }
  if (type.getTheClass().getAnnotation(CHAR_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9334975369458128
84752,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.DOUBLE) {
    return this;
  }
  if (type.isSuperTypeOf(Types.DOUBLE)) {
    return new BoxedValue(this,Types.DOUBLE.boxMethod);
  }
  if (type.getTheClass().getAnnotation(DOUBLE_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.DOUBLE) {
    return this;
  }
  if (type.isSuperTypeOf(Types.DOUBLE)) {
    return new BoxedValue(this,Types.DOUBLE.boxMethod);
  }
  if (type.getTheClass().getAnnotation(DOUBLE_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9347826086956522
84753,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.FLOAT) {
    return this;
  }
  if (type.isSuperTypeOf(Types.FLOAT)) {
    return new BoxedValue(this,Types.FLOAT.boxMethod);
  }
  if (type.getTheClass().getAnnotation(FLOAT_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.FLOAT) {
    return this;
  }
  if (type.isSuperTypeOf(Types.FLOAT)) {
    return new BoxedValue(this,Types.FLOAT.boxMethod);
  }
  if (type.getTheClass().getAnnotation(FLOAT_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9341463414634148
84754,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.INT) {
    return this;
  }
  if (type.isSuperTypeOf(Types.INT)) {
    return new BoxedValue(this,Types.INT.boxMethod);
  }
  if (type.getTheClass().getAnnotation(INT_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.INT) {
    return this;
  }
  if (type.isSuperTypeOf(Types.INT)) {
    return new BoxedValue(this,Types.INT.boxMethod);
  }
  if (type.getTheClass().getAnnotation(INT_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9328358208955224
84755,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.LONG) {
    return this;
  }
  if (type.isSuperTypeOf(Types.LONG)) {
    return new BoxedValue(this,Types.LONG.boxMethod);
  }
  if (type.getTheClass().getAnnotation(LONG_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type == Types.LONG) {
    return this;
  }
  if (type.isSuperTypeOf(Types.LONG)) {
    return new BoxedValue(this,Types.LONG.boxMethod);
  }
  if (type.getTheClass().getAnnotation(LONG_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9334975369458128
84756,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  if (type.getTheClass().getAnnotation(STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  if (type.getTheClass().getAnnotation(STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9166666666666666
84757,"@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    if (iclass == Types.OBJECT_CLASS || iclass == null) {
      return this;
    }
    if (iclass.getAnnotation(ARRAY_CONVERTIBLE) != null) {
      return new LiteralExpression(arrayType,this);
    }
    return null;
  }
  IType elementType=arrayType.getElementType();
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}","@Override public IValue withType(IType arrayType,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!arrayType.isArrayType()) {
    IClass iclass=arrayType.getTheClass();
    if (iclass == Types.OBJECT_CLASS || iclass == null) {
      return this;
    }
    if (iclass.getAnnotation(ARRAY_CONVERTIBLE) != null) {
      return new LiteralExpression(this).withType(arrayType,typeContext,markers,context);
    }
    return null;
  }
  IType elementType=arrayType.getElementType();
  for (int i=0; i < this.valueCount; i++) {
    if (!this.values[i].isType(elementType)) {
      return null;
    }
  }
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(elementType,typeContext,markers,context);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
  }
  this.elementType=elementType;
  this.requiredType=arrayType;
  return this;
}",0.9803921568627452
84758,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  IClass iclass=type.getTheClass();
  if (iclass.getAnnotation(StringValue.STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  if (iclass.getAnnotation(FORMAT_STRING_CONVERTIBLE) != null) {
    StringValue string;
    int len=this.count / 2;
    if (len > 0) {
      StringBuilder builder=new StringBuilder();
      builder.append(this.strings[0]);
      for (int i=1; i <= len; i++) {
        builder.append('\\').append(i);
        builder.append(this.strings[i]);
      }
      string=new StringValue(this.position,builder.toString());
    }
 else {
      string=new StringValue(""String_Node_Str"");
    }
    ArgumentList list=new ArgumentList(1 + len);
    list.addValue(string);
    for (int i=0; i < len; i++) {
      list.addValue(this.values[i]);
    }
    return new LiteralExpression(type,list);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  IClass iclass=type.getTheClass();
  if (iclass.getAnnotation(StringValue.STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  if (iclass.getAnnotation(FORMAT_STRING_CONVERTIBLE) != null) {
    StringValue string;
    int len=this.count / 2;
    if (len > 0) {
      StringBuilder builder=new StringBuilder();
      builder.append(this.strings[0]);
      for (int i=1; i <= len; i++) {
        builder.append('\\').append(i);
        builder.append(this.strings[i]);
      }
      string=new StringValue(this.position,builder.toString());
    }
 else {
      string=new StringValue(""String_Node_Str"");
    }
    ArgumentList list=new ArgumentList(1 + len);
    list.addValue(string);
    for (int i=0; i < len; i++) {
      list.addValue(this.values[i]);
    }
    return new LiteralExpression(list).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9586466165413534
84759,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType();
        }
        param.setType(parType.getConcreteType(this.type));
      }
      this.returnType=this.method.getType().getConcreteType(this.type);
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    this.returnType=this.value.getType();
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(this.returnType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (!this.isType(type)) {
    return null;
  }
  this.type=type;
  this.method=type.getFunctionalMethod();
  if (this.method != null) {
    if (this.method.hasTypeVariables()) {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        IType parType=param.getType();
        if (parType == null) {
          parType=this.method.getParameter(i).getType();
        }
        param.setType(parType.getConcreteType(this.type));
      }
      this.returnType=this.method.getType().getConcreteType(this.type);
    }
 else {
      for (int i=0; i < this.parameterCount; i++) {
        IParameter param=this.parameters[i];
        if (param.getType() == null) {
          param.setType(this.method.getParameter(i).getType());
        }
      }
      this.returnType=this.method.getType();
    }
    this.context=context;
    this.value=this.value.resolve(markers,this);
    IValue value1=this.value.withType(this.returnType,typeContext,markers,this);
    if (value1 == null) {
      Marker marker=markers.create(this.value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.returnType);
      marker.addInfo(""String_Node_Str"" + this.value.getType());
    }
 else {
      this.value=value1;
    }
    this.returnType=this.value.getType();
    this.context=null;
    ITypeContext tempContext=new MapTypeContext();
    this.method.getType().inferTypes(this.returnType,tempContext);
    IType type1=this.method.getTheClass().getType().getConcreteType(tempContext);
    type.inferTypes(type1,typeContext);
  }
  if (this.type.typeTag() == IType.LAMBDA) {
    this.type=null;
    this.type=this.getType();
  }
 else {
    this.type=type.getConcreteType(typeContext);
  }
  return this;
}",0.9692094313453536
84760,"@Override public boolean isType(IType type){
  if (this.type != null && type.isSuperTypeOf(this.type)) {
    return true;
  }
  IClass iclass=type.getTheClass();
  if (iclass == null) {
    return false;
  }
  IMethod method=iclass.getFunctionalMethod();
  if (method == null) {
    return false;
  }
  if (this.parameterCount != method.parameterCount()) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter lambdaParam=this.parameters[i];
    IParameter param=method.getParameter(i);
    IType paramType=lambdaParam.getType();
    if (paramType == null) {
      continue;
    }
    if (!param.getType().equals(paramType)) {
      return false;
    }
  }
  this.type=type;
  this.method=method;
  return true;
}","@Override public boolean isType(IType type){
  if (this.type != null && type.isSuperTypeOf(this.type)) {
    return true;
  }
  IClass iclass=type.getTheClass();
  if (iclass == null) {
    return false;
  }
  IMethod method=iclass.getFunctionalMethod();
  if (method == null) {
    return false;
  }
  if (this.parameterCount != method.parameterCount()) {
    return false;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter lambdaParam=this.parameters[i];
    IParameter param=method.getParameter(i);
    IType lambdaParamType=lambdaParam.getType();
    if (lambdaParamType == null) {
      continue;
    }
    if (!param.getType().equals(lambdaParamType)) {
      return false;
    }
  }
  return true;
}",0.944141689373297
84761,"public LiteralExpression(IType type,IArguments arguments){
  this.type=type;
  this.arguments=arguments;
}","public LiteralExpression(IArguments arguments){
  this.arguments=arguments;
}",0.8415300546448088
84762,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  return this;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  IMethod method=IContext.resolveMethod(type,null,Name.apply,this.arguments);
  if (method == null) {
    IValue value=this.arguments.getFirstValue();
    StringBuilder builder=new StringBuilder();
    this.arguments.typesToString(builder);
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().getName(),this.type.toString(),builder);
    this.type=type;
  }
 else {
    this.method=method;
    GenericData data=method.getGenericData(null,null,this.arguments);
    method.checkArguments(markers,null,context,null,this.arguments,data);
    this.type=method.getType().getConcreteType(data);
    if (!type.isSuperTypeOf(this.type)) {
      Marker m=markers.create(this.arguments.getFirstValue().getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + type);
      m.addInfo(""String_Node_Str"" + this.type);
      StringBuilder sb=new StringBuilder(""String_Node_Str"");
      Util.methodSignatureToString(method,sb);
      m.addInfo(sb.toString());
    }
  }
  return this;
}",0.1788617886178861
84763,"@Override public void checkTypes(MarkerList markers,IContext context){
  IMethod match=IContext.resolveMethod(this.type,null,Name.apply,this.arguments);
  if (match == null) {
    IValue value=this.arguments.getFirstValue();
    StringBuilder builder=new StringBuilder();
    this.arguments.typesToString(builder);
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().getName(),this.type.toString(),builder);
  }
 else {
    this.method=match;
    GenericData data=match.getGenericData(null,null,this.arguments);
    match.checkArguments(markers,null,context,null,this.arguments,data);
    this.type=match.getType().getConcreteType(data);
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.arguments.checkTypes(markers,context);
}",0.286060606060606
84764,"@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  if (type.getTheClass().getAnnotation(StringValue.STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(type,this);
  }
  return null;
}","@Override public IValue withType(IType type,ITypeContext typeContext,MarkerList markers,IContext context){
  if (type.isSuperTypeOf(Types.STRING)) {
    return this;
  }
  if (type.getTheClass().getAnnotation(StringValue.STRING_CONVERTIBLE) != null) {
    return new LiteralExpression(this).withType(type,typeContext,markers,context);
  }
  return null;
}",0.9196428571428572
84765,"public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  Field field=new ExternalField(this);
  field.setName(Name.get(name));
  field.setModifiers(access);
  field.setType(ClassFormat.extendedToType(desc));
  if (value != null) {
    field.setValue(IValue.fromObject(value));
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0 && name.equals(""String_Node_Str"")) {
    this.metadata.setInstanceField(field);
    return null;
  }
  this.body.addField(field);
  return new SimpleFieldVisitor(field);
}","public FieldVisitor visitField(int access,String name,String desc,String signature,Object value){
  Field field=new ExternalField(this);
  field.setName(Name.get(name));
  field.setModifiers(access);
  field.setType(ClassFormat.extendedToType(signature == null ? desc : signature));
  if (value != null) {
    field.setValue(IValue.fromObject(value));
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0 && name.equals(""String_Node_Str"")) {
    this.metadata.setInstanceField(field);
    return null;
  }
  this.body.addField(field);
  return new SimpleFieldVisitor(field);
}",0.9645390070921984
84766,"private void resolveReturnType(){
  this.returnTypeResolved=true;
  this.type=this.type.resolve(null,Package.rootPackage);
}","private void resolveReturnType(){
  this.returnTypeResolved=true;
  this.type=this.type.resolve(null,this.theClass);
}",0.8760330578512396
84767,"public static IValue fromObject(Object o){
  if (o == null) {
    return new NullValue();
  }
  Class c=o.getClass();
  if (c == Character.class) {
    return new CharValue((Character)o);
  }
 else   if (c == Integer.class) {
    return new IntValue((Integer)o);
  }
 else   if (c == Long.class) {
    return new LongValue((Long)o);
  }
 else   if (c == Float.class) {
    return new FloatValue((Float)o);
  }
 else   if (c == Double.class) {
    return new DoubleValue((Double)o);
  }
 else   if (c == String.class) {
    return new StringValue((String)o);
  }
 else   if (c == int[].class) {
    Array valueList=new Array(null);
    valueList.requiredType=new ArrayType(Types.INT);
    valueList.elementType=Types.INT;
    for (    int i : (int[])o) {
      valueList.addValue(new IntValue(i));
    }
    return valueList;
  }
 else   if (c == long[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.LONG);
    valueList.elementType=Types.LONG;
    for (    long l : (long[])o) {
      valueList.addValue(new LongValue(l));
    }
    return valueList;
  }
 else   if (c == float[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.FLOAT);
    valueList.elementType=Types.FLOAT;
    for (    float f : (float[])o) {
      valueList.addValue(new FloatValue(f));
    }
    return valueList;
  }
 else   if (c == double[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.DOUBLE);
    valueList.elementType=Types.DOUBLE;
    for (    double d : (double[])o) {
      valueList.addValue(new DoubleValue(d));
    }
    return valueList;
  }
 else   if (c == org.objectweb.asm.Type.class) {
    org.objectweb.asm.Type type=(org.objectweb.asm.Type)o;
    return new ClassOperator(new InternalType(type.getInternalName()));
  }
  return null;
}","public static IValue fromObject(Object o){
  if (o == null) {
    return new NullValue();
  }
  Class c=o.getClass();
  if (c == Character.class) {
    return new CharValue((Character)o);
  }
 else   if (c == Integer.class) {
    return new IntValue((Integer)o);
  }
 else   if (c == Long.class) {
    return new LongValue((Long)o);
  }
 else   if (c == Float.class) {
    return new FloatValue((Float)o);
  }
 else   if (c == Double.class) {
    return new DoubleValue((Double)o);
  }
 else   if (c == String.class) {
    return new StringValue((String)o);
  }
 else   if (c == int[].class) {
    Array valueList=new Array(null);
    valueList.requiredType=new ArrayType(Types.INT);
    valueList.elementType=Types.INT;
    for (    int i : (int[])o) {
      valueList.addValue(new IntValue(i));
    }
    return valueList;
  }
 else   if (c == long[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.LONG);
    valueList.elementType=Types.LONG;
    for (    long l : (long[])o) {
      valueList.addValue(new LongValue(l));
    }
    return valueList;
  }
 else   if (c == float[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.FLOAT);
    valueList.elementType=Types.FLOAT;
    for (    float f : (float[])o) {
      valueList.addValue(new FloatValue(f));
    }
    return valueList;
  }
 else   if (c == double[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.DOUBLE);
    valueList.elementType=Types.DOUBLE;
    for (    double d : (double[])o) {
      valueList.addValue(new DoubleValue(d));
    }
    return valueList;
  }
 else   if (c == org.objectweb.asm.Type.class) {
    org.objectweb.asm.Type type=(org.objectweb.asm.Type)o;
    return new ClassOperator(Types.fromASMType(type));
  }
  return null;
}",0.9840151720400976
84768,"protected boolean argumentsMatch(IType type){
  for (int i=0; i < this.typeArgumentCount; i++) {
    ITypeVariable typeVar=this.theClass.getTypeVariable(i);
    IType otherType=type.resolveType(typeVar);
    if (!this.typeArguments[i].equals(otherType)) {
      return false;
    }
  }
  return true;
}","protected boolean argumentsMatch(IType type){
  int count=this.theClass.genericCount();
  for (int i=0; i < count; i++) {
    ITypeVariable typeVar=this.theClass.getTypeVariable(i);
    IType otherType=type.resolveType(typeVar);
    if (!this.typeArguments[i].equals(otherType)) {
      return false;
    }
  }
  return true;
}",0.90302066772655
84769,"private static int getMode(char c,String code,int i){
switch (c) {
case '`':
    return SPECIAL_IDENTIFIER;
case '#':
  if (code.charAt(i + 1) == '[') {
    return GENERIC_CALL;
  }
return IDENTIFIER | MOD_SYMBOL;
case '""':
return STRING;
case '\'':
return CHAR;
case '/':
char n=code.charAt(i + 1);
if (n == '*') {
return BLOCK_COMMENT;
}
 else if (n == '/') {
return LINE_COMMENT;
}
 else {
return IDENTIFIER | MOD_SYMBOL;
}
case '@':
n=code.charAt(i + 1);
if (n == '""') {
return STRING_2;
}
return IDENTIFIER | MOD_SYMBOL;
case '0':
n=code.charAt(i + 1);
if (n == 'b') {
return INT | MOD_BIN;
}
 else if (n == 'x') {
return INT | MOD_HEX;
}
 else if (isDigit(n)) {
return INT | MOD_OCT;
}
return INT;
case '(':
return Symbols.OPEN_PARENTHESIS;
case ')':
return Symbols.CLOSE_PARENTHESIS;
case '[':
return Symbols.OPEN_SQUARE_BRACKET;
case ']':
return Symbols.CLOSE_SQUARE_BRACKET;
case '{':
return Symbols.OPEN_CURLY_BRACKET;
case '}':
return Symbols.CLOSE_CURLY_BRACKET;
case '.':
n=code.charAt(i + 1);
if (n == '.') {
return IDENTIFIER | MOD_DOTS;
}
return Symbols.DOT;
case ';':
return Symbols.SEMICOLON;
case ',':
return Symbols.COMMA;
}
if (isDigit(c)) {
return INT;
}
 else if (isIdentifierSymbol(c)) {
return IDENTIFIER | MOD_SYMBOL;
}
 else if (isIdentifierPart(c)) {
return IDENTIFIER | MOD_LETTER;
}
return 0;
}","private static int getMode(char c,String code,int i){
switch (c) {
case '`':
    return SPECIAL_IDENTIFIER;
case '#':
  if (code.charAt(i + 1) == '[') {
    return GENERIC_CALL;
  }
return IDENTIFIER | MOD_SYMBOL;
case '""':
return STRING;
case '\'':
return CHAR;
case '/':
char n=code.charAt(i + 1);
if (n == '*') {
return BLOCK_COMMENT;
}
 else if (n == '/') {
return LINE_COMMENT;
}
 else {
return IDENTIFIER | MOD_SYMBOL;
}
case '@':
n=code.charAt(i + 1);
if (n == '""') {
return STRING_2;
}
return IDENTIFIER | MOD_SYMBOL;
case '0':
n=code.charAt(i + 1);
if (n == 'b') {
return INT | MOD_BIN;
}
 else if (n == 'x') {
return INT | MOD_HEX;
}
 else if (isDigit(n)) {
return INT | MOD_OCT;
}
return INT;
case '(':
return Symbols.OPEN_PARENTHESIS;
case ')':
return Symbols.CLOSE_PARENTHESIS;
case '[':
return Symbols.OPEN_SQUARE_BRACKET;
case ']':
return Symbols.CLOSE_SQUARE_BRACKET;
case '{':
return Symbols.OPEN_CURLY_BRACKET;
case '}':
return Symbols.CLOSE_CURLY_BRACKET;
case '.':
n=code.charAt(i + 1);
if (n == '.') {
return IDENTIFIER | MOD_DOTS;
}
return Symbols.DOT;
case ';':
return Symbols.SEMICOLON;
case ',':
return Symbols.COMMA;
case '_':
case '$':
return IDENTIFIER | MOD_SYMBOL | MOD_LETTER;
}
if (isDigit(c)) {
return INT;
}
 else if (isIdentifierSymbol(c)) {
return IDENTIFIER | MOD_SYMBOL;
}
 else if (isIdentifierPart(c)) {
return IDENTIFIER | MOD_LETTER;
}
return 0;
}",0.976041282712864
84770,"public static IToken tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
      if (subtype == MOD_DOTS) {
        if (c == '.') {
          buf.append(c);
        }
 else {
          addToken=true;
        }
      }
 else       if (c == '_' || c == '$') {
        subtype=MOD_SYMBOL | MOD_LETTER;
        buf.append(c);
      }
 else {
        boolean letter=(subtype & MOD_LETTER) != 0;
        boolean symbol=(subtype & MOD_SYMBOL) != 0;
        if (letter) {
          if (isIdentifierPart(c)) {
            subtype=MOD_LETTER;
            buf.append(c);
            continue;
          }
        }
        if (symbol) {
          if (isIdentifierSymbol(c)) {
            subtype=MOD_SYMBOL;
            buf.append(c);
            continue;
          }
        }
        addToken=true;
      }
    break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
    continue;
case '`':
  if (buf.length() == 0) {
    continue;
  }
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
if (c == '.') {
type=FLOAT;
buf.append('.');
}
 else if (c == 'l' || c == 'L') {
type=LONG;
addToken=true;
reparse=false;
}
 else if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return first.getNext();
}","public static IToken tokenize(String code){
  int len=code.length();
  StringBuilder buf=new StringBuilder(20);
  IToken first=new InferredSemicolon(0,0);
  IToken prev=first;
  int start=0;
  int lineNumber=1;
  char l=0;
  char c=0;
  int type=0;
  int subtype=0;
  boolean addToken=false;
  boolean reparse=true;
  boolean string=false;
  for (int i=0; i < len; ++i, l=c) {
    c=code.charAt(i);
    if (type == 0) {
      start=i;
      if (c == '\n') {
        lineNumber++;
        continue;
      }
      if (c <= ' ') {
        continue;
      }
      if (string && c == ')') {
        type=STRING_2;
        subtype=STRING_PART;
        continue;
      }
      int m=getMode(c,code,i);
      type=m & 0xFFFF;
      subtype=m & 0xFFFF0000;
    }
    typeswitch: switch (type) {
case IDENTIFIER:
switch (subtype) {
case MOD_DOTS:
        if (c == '.') {
          buf.append(c);
          continue;
        }
      addToken=true;
    break typeswitch;
case MOD_LETTER:
  if (c == '_' || c == '$') {
    buf.append(c);
    subtype=MOD_LETTER | MOD_SYMBOL;
    continue;
  }
if (isIdentifierPart(c)) {
  buf.append(c);
  continue;
}
addToken=true;
break typeswitch;
case MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
subtype=MOD_LETTER | MOD_SYMBOL;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
continue;
}
addToken=true;
break typeswitch;
case MOD_LETTER | MOD_SYMBOL:
if (c == '_' || c == '$') {
buf.append(c);
continue;
}
if (isIdentifierPart(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
if (isIdentifierSymbol(c)) {
buf.append(c);
subtype=MOD_LETTER;
continue;
}
addToken=true;
break typeswitch;
}
break;
case SPECIAL_IDENTIFIER:
switch (c) {
case '\n':
case '\t':
case '\b':
continue;
case '`':
if (buf.length() == 0) {
continue;
}
addToken=true;
reparse=false;
break typeswitch;
default :
buf.append(c);
continue;
}
case SYMBOL:
buf.append(c);
addToken=true;
reparse=false;
break;
case BRACKET:
buf.append(c);
addToken=true;
reparse=false;
break;
case COMMENT:
if (subtype == MOD_LINE) {
if (c == '\n') {
type=0;
lineNumber++;
continue;
}
}
 else if (subtype == MOD_BLOCK) {
if (c == '\n') {
lineNumber++;
}
 else if (l == '*' && c == '/') {
type=0;
continue;
}
}
break;
case INT:
case LONG:
if (c == '.') {
type=FLOAT;
buf.append('.');
}
 else if (c == 'l' || c == 'L') {
type=LONG;
addToken=true;
reparse=false;
}
 else if (subtype == MOD_DEC) {
if (isDigit(c)) {
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
type=FLOAT;
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_BIN) {
if (c == 'b' || isBinDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_OCT) {
if (isOctDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
 else if (subtype == MOD_HEX) {
if (c == 'x' || isHexDigit(c)) {
buf.append(c);
}
 else {
addToken=true;
}
}
break;
case FLOAT:
case DOUBLE:
if (c == 'x') {
subtype=MOD_HEX;
buf.append(c);
}
 else if (c == 'f' || c == 'F') {
addToken=true;
reparse=false;
}
 else if (c == 'd' || c == 'D') {
type=DOUBLE;
addToken=true;
reparse=false;
}
 else if (isDigit(c) || c == 'e') {
buf.append(c);
}
 else {
addToken=true;
}
break;
case STRING:
if (c == '""' && buf.length() > 0) {
buf.append('""');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case STRING_2:
if (c == '""' && (buf.length() > 1 || string)) {
if (!string && buf.charAt(0) == '@') {
subtype=STRING_2;
}
 else {
subtype=STRING_END;
}
string=false;
addToken=true;
reparse=false;
break;
}
 else if (c == '\\') {
char c1=code.charAt(i + 1);
if (c1 == '(') {
i+=2;
if (buf.length() == 0 || buf.charAt(0) != '@') {
subtype=STRING_PART;
}
 else {
subtype=STRING_START;
}
addToken=true;
string=true;
break;
}
 else if (appendEscape(buf,c1)) {
i++;
continue;
}
buf.append('\\');
break;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case CHAR:
if (c == '\'' && buf.length() > 0) {
buf.append('\'');
addToken=true;
reparse=false;
}
 else if (c == '\\' && appendEscape(buf,code.charAt(i + 1))) {
i++;
continue;
}
 else if (c != '\t') {
buf.append(c);
}
break;
case GENERIC_CALL:
if (c == '[') {
addToken=true;
reparse=false;
break;
}
continue;
}
if (addToken) {
prev=addToken(prev,buf,type | subtype,lineNumber,start);
addToken=false;
type=0;
if (reparse) {
i--;
}
 else {
reparse=true;
}
}
}
if (buf.length() > 0) {
addToken(prev,buf,type | subtype,lineNumber,start);
}
return first.getNext();
}",0.8705179282868526
84771,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON && token.isInferred()) {
    pm.popParser(true);
    return;
  }
  if (this.mode == 0) {
    this.mode=1;
    pm.pushParser(new TypeParser(this),true);
    return;
  }
  if (this.mode == 1) {
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=0;
    if (ParserUtil.isSeperator(type)) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if ((type == Symbols.SEMICOLON && token.isInferred()) || type == Symbols.OPEN_CURLY_BRACKET) {
    pm.popParser(true);
    return;
  }
  if (this.mode == 0) {
    this.mode=1;
    pm.pushParser(new TypeParser(this),true);
    return;
  }
  if (this.mode == 1) {
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=0;
    if (ParserUtil.isSeperator(type)) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.9650959860383944
84772,"private boolean computeVariable(REPLVariable field){
  this.currentClassName=""String_Node_Str"" + classIndex++;
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    return false;
  }
  field.foldConstants();
  for (  IClassCompilable icc : this.innerClassList) {
    try {
      String fileName=icc.getFileName();
      byte[] bytes=ClassWriter.compile(icc);
      ReflectUtils.unsafe.defineClass(fileName,bytes,0,bytes.length,null,null);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  field.compute(this.currentClassName,this.compilableList);
  this.compilableList.clear();
  this.innerClassList.clear();
  return true;
}","private boolean computeVariable(REPLVariable field){
  this.currentClassName=""String_Node_Str"" + classIndex++;
  MarkerList markers=new MarkerList();
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    this.compilableList.clear();
    this.innerClassList.clear();
    return false;
  }
  field.foldConstants();
  for (  IClassCompilable icc : this.innerClassList) {
    try {
      String fileName=icc.getFileName();
      byte[] bytes=ClassWriter.compile(icc);
      ReflectUtils.unsafe.defineClass(fileName,bytes,0,bytes.length,null,null);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  field.compute(this.currentClassName,this.compilableList);
  this.compilableList.clear();
  this.innerClassList.clear();
  return true;
}",0.9604790419161676
84773,"@Override public void addField(IField field){
  this.currentClassName=""String_Node_Str"" + classIndex++;
  REPLVariable var=new REPLVariable(field.getPosition(),field.getName(),field.getType(),field.getValue());
  if (this.computeVariable(var)) {
    this.variables.put(var.name,var);
    System.out.println(var.toString());
  }
}","@Override public void addField(IField field){
  this.currentClassName=""String_Node_Str"" + classIndex++;
  REPLVariable var=new REPLVariable(field.getPosition(),field.getName(),field.getType(),field.getValue());
  var.setAnnotations(field.getAnnotations(),field.annotationCount());
  var.modifiers=field.getModifiers();
  if (this.computeVariable(var)) {
    this.variables.put(var.name,var);
    System.out.println(var.toString());
  }
}",0.8590078328981723
84774,"@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer);
    if (value != null) {
      value.writeExpression(writer);
    }
  }
  String owner=this.theClass.getInternalName();
  String name=this.name.qualified;
  String desc=this.type.getExtendedName();
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    writer.writeFieldInsn(Opcodes.PUTSTATIC,owner,name,desc);
  }
 else {
    writer.writeFieldInsn(Opcodes.PUTFIELD,owner,name,desc);
  }
}","@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer);
  }
  if (value != null) {
    value.writeExpression(writer);
  }
  String owner=this.theClass.getInternalName();
  String name=this.name.qualified;
  String desc=this.type.getExtendedName();
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    writer.writeFieldInsn(Opcodes.PUTSTATIC,owner,name,desc);
  }
 else {
    writer.writeFieldInsn(Opcodes.PUTFIELD,owner,name,desc);
  }
}",0.9910233393177738
84775,"public void pop() throws StackUnderflowException {
  Object o=this.stack[--this.stackCount];
  if (o == LONG || o == DOUBLE) {
    this.actualStackCount-=2;
  }
 else {
    this.actualStackCount--;
  }
}","public void pop() throws StackUnderflowException {
  if (this.stackCount == 0) {
    throw new StackUnderflowException();
  }
  Object o=this.stack[--this.stackCount];
  if (o == LONG || o == DOUBLE) {
    this.actualStackCount-=2;
  }
 else {
    this.actualStackCount--;
  }
}",0.8440748440748441
84776,"private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int type1=next.type();
  if (type1 == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (type1 == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (type1 == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=VALUE;
    this.field.setValue(lv);
    this.field=lv;
    pm.skip();
    return;
  }
  if (type1 == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(type1)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(type1) && !ParserUtil.isTerminator2(next.next().type())) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int nextType=next.type();
  if (nextType == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token.raw(),this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS_END;
    pm.skip();
    call.setArguments(this.getArguments(pm,next.next()));
    return;
  }
  if (nextType == Symbols.OPEN_SQUARE_BRACKET) {
    SubscriptGetter getter=new SubscriptGetter(token,new FieldAccess(token.raw(),this.value,name));
    this.value=getter;
    this.mode=SUBSCRIPT_END;
    pm.skip();
    pm.pushParser(new ExpressionListParser(getter.getArguments()));
    return;
  }
  if (nextType == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=VALUE;
    this.field.setValue(lv);
    this.field=lv;
    pm.skip();
    return;
  }
  if (nextType == Symbols.GENERIC_CALL) {
    MethodCall mc=new MethodCall(token.raw(),this.value,token.nameValue());
    GenericData gd=new GenericData();
    mc.setGenericData(gd);
    mc.dotless=this.dotless;
    this.value=mc;
    this.mode=TYPE_ARGUMENTS_END;
    pm.skip();
    pm.pushParser(new TypeListParser(gd));
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(nextType)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(nextType)) {
      if (ParserUtil.isOperator(pm,next,nextType) || !ParserUtil.isTerminator2(next.next().type())) {
        FieldAccess access=new FieldAccess(token,this.value,name);
        access.dotless=this.dotless;
        this.value=access;
        this.mode=ACCESS;
        return;
      }
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}",0.9665775401069518
84777,"@Override public void setValue(IValue value){
  if (this.mode == WHILE) {
    this.statement.action=value;
  }
 else   if (this.mode == CONDITION_END) {
    this.statement.condition=value;
  }
}","@Override public void setValue(IValue value){
  if (this.mode == WHILE) {
    this.statement.action=value;
  }
 else   if (this.mode == END) {
    this.statement.condition=value;
  }
}",0.9735449735449736
84778,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == DO) {
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=WHILE;
    return;
  }
  int type=token.type();
  if (this.mode == WHILE) {
    if (type == Keywords.WHILE) {
      this.mode=CONDITION;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.next().type() == Keywords.WHILE) {
        pm.skip(1);
        this.mode=CONDITION;
        return;
      }
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == CONDITION) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ExpressionParser(this));
      this.mode=CONDITION_END;
      return;
    }
    pm.pushParser(new ExpressionParser(this));
    this.mode=CONDITION_END;
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == CONDITION_END) {
    if (type == Symbols.CLOSE_PARENTHESIS) {
      pm.popParser();
      return;
    }
    pm.popParser();
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == DO) {
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=WHILE;
    return;
  }
  int type=token.type();
  if (this.mode == WHILE) {
    if (type == Keywords.WHILE) {
      this.mode=END;
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    if (type == Symbols.SEMICOLON) {
      if (token.next().type() == Keywords.WHILE) {
        this.mode=END;
        pm.skip(1);
        pm.pushParser(new ExpressionParser(this));
        return;
      }
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == END) {
    pm.popParser(true);
    return;
  }
}",0.5439907993099482
84779,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == -1) {
    pm.popParser(true);
    return;
  }
  int type=token.type();
  if (this.mode == IF) {
    this.mode=CONDITION_END;
    pm.pushParser(new ExpressionParser(this));
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CONDITION_END) {
    this.mode=THEN;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == THEN) {
    if (ParserUtil.isTerminator(type)) {
      pm.popParser(true);
      return;
    }
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=ELSE;
    return;
  }
  if (this.mode == ELSE) {
    if (ParserUtil.isTerminator(type)) {
      if (token.next().type() == Keywords.ELSE) {
        return;
      }
      pm.popParser(true);
      return;
    }
    if (type == Keywords.ELSE) {
      pm.pushParser(new ExpressionParser(this));
      this.mode=-1;
      return;
    }
    pm.popParser(true);
    return;
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  if (this.mode == -1) {
    pm.popParser(true);
    return;
  }
  int type=token.type();
  if (this.mode == IF) {
    this.mode=CONDITION_END;
    pm.pushParser(new ExpressionParser(this));
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CONDITION_END) {
    this.mode=THEN;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == THEN) {
    if (ParserUtil.isTerminator(type)) {
      pm.popParser(true);
      return;
    }
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=ELSE;
    return;
  }
  if (this.mode == ELSE) {
    if (ParserUtil.isTerminator(type)) {
      IToken next=token.getNext();
      if (next != null && next.type() == Keywords.ELSE) {
        return;
      }
      pm.popParser(true);
      return;
    }
    if (type == Keywords.ELSE) {
      pm.pushParser(new ExpressionParser(this));
      this.mode=-1;
      return;
    }
    pm.popParser(true);
    return;
  }
}",0.9744256610316429
84780,"@Override public boolean isSuperTypeOf(IType type){
  int arrayDims=type.getArrayDimensions();
  if (arrayDims == 0) {
    return false;
  }
  int thisDims=this.getArrayDimensions();
  if (arrayDims > thisDims) {
    return this.type.getTheClass() == Types.OBJECT_CLASS;
  }
  IType elementType=type.getElementType();
  if (elementType.isPrimitive() != this.type.isPrimitive()) {
    return false;
  }
  return this.type.isSuperTypeOf(elementType);
}","@Override public boolean isSuperTypeOf(IType type){
  if (!type.isArrayType()) {
    return false;
  }
  return this.type.isSuperTypeOf(type.getElementType());
}",0.4713584288052373
84781,"private Annotation[] getAnnotations(){
  Annotation[] a=new Annotation[this.annotationCount];
  System.arraycopy(this.annotations,0,a,0,this.annotationCount);
  return a;
}","@Override public Annotation[] getAnnotations(){
  Annotation[] a=new Annotation[this.annotationCount];
  System.arraycopy(this.annotations,0,a,0,this.annotationCount);
  return a;
}",0.9518413597733713
84782,"private Annotation[] getAnnotations(){
  Annotation[] a=new Annotation[this.annotationCount];
  System.arraycopy(this.annotations,0,a,0,this.annotationCount);
  return a;
}","@Override public Annotation[] getAnnotations(){
  Annotation[] a=new Annotation[this.annotationCount];
  System.arraycopy(this.annotations,0,a,0,this.annotationCount);
  return a;
}",0.9518413597733713
84783,"protected void processValue(){
  if (this.value == null) {
    return;
  }
  MarkerList markers=new MarkerList();
  this.currentClassName=""String_Node_Str"" + classIndex++;
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  IValue value=this.value;
  IType type=Types.UNKNOWN;
  ICodePosition position=CODE_POSITION;
  this.value=null;
  REPLVariable field=new REPLVariable(position,name,type,value);
  field.modifiers=Modifiers.FINAL;
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    return;
  }
  field.foldConstants();
  for (  IClassCompilable icc : this.innerClassList) {
    try {
      String fileName=icc.getFileName();
      byte[] bytes=ClassWriter.compile(icc);
      ReflectUtils.unsafe.defineClass(fileName,bytes,0,bytes.length,null,null);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  field.compute(this.currentClassName,this.compilableList);
  this.compilableList.clear();
  this.innerClassList.clear();
  if (field.getType() != Types.VOID) {
    this.variables.put(name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}","protected void processValue(){
  if (this.value == null) {
    return;
  }
  IValue value=this.value;
  MarkerList markers=new MarkerList();
  this.currentClassName=""String_Node_Str"" + classIndex++;
  this.value=null;
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  REPLVariable field=new REPLVariable(CODE_POSITION,name,Types.UNKNOWN,value);
  field.modifiers=Modifiers.FINAL;
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    return;
  }
  field.foldConstants();
  for (  IClassCompilable icc : this.innerClassList) {
    try {
      String fileName=icc.getFileName();
      byte[] bytes=ClassWriter.compile(icc);
      ReflectUtils.unsafe.defineClass(fileName,bytes,0,bytes.length,null,null);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  field.compute(this.currentClassName,this.compilableList);
  this.compilableList.clear();
  this.innerClassList.clear();
  if (field.getType() != Types.VOID) {
    this.variables.put(name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}",0.8986599664991625
84784,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(this.value);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.value.getClass().isArray()) {
    ObjectArray.toString(this.value,buffer);
    return;
  }
  buffer.append(this.value);
}",0.5704697986577181
84785,"@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
}","@Override public void writeSet(MethodWriter writer,IValue instance,IValue value) throws BytecodeException {
  if (this.className == null) {
    writer.writeInsn(Opcodes.AUTO_POP);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.PUTSTATIC,this.className,""String_Node_Str"",extended);
}",0.4965831435079726
84786,"@Override public ICompilationUnit createUnit(Package pack,CodeFile inputFile,File outputFile){
  return new DyvilHeader(pack,inputFile,outputFile);
}","@Override public ICompilationUnit createUnit(Package pack,CodeFile inputFile,File outputFile){
  DyvilHeader header=new DyvilHeader(pack,inputFile,outputFile);
  pack.addHeader(header);
  return header;
}",0.7818696883852692
84787,"public static void writeToString(MethodWriter writer,IType type) throws BytecodeException {
  if (type.isArrayType()) {
    writer.writeInsn(Opcodes.SWAP);
    writer.writeInsn(Opcodes.DUP_X1);
    writeArrayToString(writer,type.getElementType());
    return;
  }
  StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.classEquals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
  desc.append(""String_Node_Str"");
  writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
  return;
}","public static void writeToString(MethodWriter writer,IType type) throws BytecodeException {
  if (type.isArrayType()) {
    writer.writeInsn(Opcodes.SWAP);
    writer.writeInsn(Opcodes.DUP_X1);
    writeArrayToString(writer,type.getElementType());
    return;
  }
  StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.equals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
  desc.append(""String_Node_Str"");
  writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
  return;
}",0.9947009841029524
84788,"@Override public void writeInvJump(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    if (this.intrinsicOpcodes != null) {
      this.writeInvIntrinsic(writer,dest,instance,arguments);
      return;
    }
  }
 else   if (this.intrinsicOpcodes != null && (instance == null || instance.isPrimitive())) {
    this.writeInvIntrinsic(writer,dest,instance,arguments);
    return;
  }
  this.writeArgumentsAndInvoke(writer,instance,arguments);
  writer.writeJumpInsn(IFNE,dest);
}","@Override public void writeInvJump(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    if (this.intrinsicOpcodes != null) {
      this.writeInvIntrinsic(writer,dest,instance,arguments);
      return;
    }
  }
 else   if (this.intrinsicOpcodes != null && (instance == null || instance.isPrimitive())) {
    this.writeInvIntrinsic(writer,dest,instance,arguments);
    return;
  }
  this.writeArgumentsAndInvoke(writer,instance,arguments);
  writer.writeJumpInsn(IFEQ,dest);
}",0.9982517482517482
84789,"@Override public void writeJump(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    if (this.intrinsicOpcodes != null) {
      this.writeIntrinsic(writer,dest,instance,arguments);
      return;
    }
  }
 else   if (this.intrinsicOpcodes != null && (instance == null || instance.isPrimitive())) {
    this.writeIntrinsic(writer,dest,instance,arguments);
    return;
  }
  this.writeArgumentsAndInvoke(writer,instance,arguments);
  writer.writeJumpInsn(IFEQ,dest);
}","@Override public void writeJump(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  if ((this.modifiers & Modifiers.STATIC) != 0) {
    if (this.intrinsicOpcodes != null) {
      this.writeIntrinsic(writer,dest,instance,arguments);
      return;
    }
  }
 else   if (this.intrinsicOpcodes != null && (instance == null || instance.isPrimitive())) {
    this.writeIntrinsic(writer,dest,instance,arguments);
    return;
  }
  this.writeArgumentsAndInvoke(writer,instance,arguments);
  writer.writeJumpInsn(IFNE,dest);
}",0.9982238010657194
84790,"public static String frameTypeName(Object o){
  if (o == BYTE) {
    return ""String_Node_Str"";
  }
  if (o == SHORT) {
    return ""String_Node_Str"";
  }
  if (o == CHAR) {
    return ""String_Node_Str"";
  }
  if (o == INT) {
    return ""String_Node_Str"";
  }
  if (o == LONG) {
    return ""String_Node_Str"";
  }
  if (o == FLOAT) {
    return ""String_Node_Str"";
  }
  if (o == DOUBLE) {
    return ""String_Node_Str"";
  }
  if (o == NULL) {
    return ""String_Node_Str"";
  }
  if (o == UNINITIALIZED_THIS) {
    return ""String_Node_Str"";
  }
  if (o == null) {
    return ""String_Node_Str"";
  }
  return o.toString();
}","public static String frameTypeName(Object o){
  if (o == BOOLEAN) {
    return ""String_Node_Str"";
  }
  if (o == BYTE) {
    return ""String_Node_Str"";
  }
  if (o == SHORT) {
    return ""String_Node_Str"";
  }
  if (o == CHAR) {
    return ""String_Node_Str"";
  }
  if (o == INT) {
    return ""String_Node_Str"";
  }
  if (o == LONG) {
    return ""String_Node_Str"";
  }
  if (o == FLOAT) {
    return ""String_Node_Str"";
  }
  if (o == DOUBLE) {
    return ""String_Node_Str"";
  }
  if (o == NULL) {
    return ""String_Node_Str"";
  }
  if (o == UNINITIALIZED_THIS) {
    return ""String_Node_Str"";
  }
  if (o == null) {
    return ""String_Node_Str"";
  }
  return o.toString();
}",0.9565891472868217
84791,"@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    private T current=SimpleRange.this.first;
    @Override public T next(){
      if (this.current.$gt(SimpleRange.this.last)) {
        throw new NoSuchElementException(""String_Node_Str"");
      }
      T c=this.current;
      this.current=this.current.next();
      return c;
    }
    @Override public boolean hasNext(){
      return this.current.$lt$eq(SimpleRange.this.last);
    }
  }
;
}","@Override public Iterator<T> iterator(){
  return new Iterator<T>(){
    private T current=SimpleRange.this.first;
    @Override public T next(){
      if (this.current.$gt(SimpleRange.this.last)) {
        throw new NoSuchElementException(""String_Node_Str"");
      }
      T c=this.current;
      this.current=this.current.next();
      return c;
    }
    @Override public boolean hasNext(){
      return this.current.$lt$eq(SimpleRange.this.last);
    }
    @Override public String toString(){
      return ""String_Node_Str"" + SimpleRange.this + ""String_Node_Str"";
    }
  }
;
}",0.8842105263157894
84792,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}",0.9927431059506532
84793,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  if (!this.typeHint && this.type.equals(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.value.checkTypes(markers,context);
    this.type=value1.getType();
    return this;
  }
  this.value.checkTypes(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.value.checkTypes(markers,context);
    this.type=value1.getType();
    return this;
  }
  if (!this.typeHint && this.type.equals(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  this.value.checkTypes(markers,context);
  return this;
}",0.6479057591623036
84794,"private IValue withElementType(IType type,IType elementType){
  IValue value1=this.value1.withType(elementType);
  if (value1 == null) {
    return null;
  }
  IValue value2=this.value2.withType(elementType);
  if (value2 == null) {
    return null;
  }
  this.value1=value1;
  this.value2=value2;
  this.type=type;
  this.elementType=elementType;
  return this;
}","private IValue withElementType(IType type,IType elementType){
  if (!this.value1.isType(elementType)) {
    return null;
  }
  if (!this.value2.isType(elementType)) {
    return null;
  }
  this.type=type;
  this.elementType=elementType;
  return this;
}",0.2394822006472491
84795,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.value1.checkTypes(markers,context);
  this.value2.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IValue value1=this.value1.withType(this.elementType);
  if (value1 == null) {
  }
 else {
    this.value1=value1;
  }
  value1=this.value2.withType(this.elementType);
  if (value1 == null) {
  }
 else {
    this.value2=value1;
  }
  this.value1.checkTypes(markers,context);
  this.value2.checkTypes(markers,context);
}",0.575591985428051
84796,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.instance=this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}",0.980225988700565
84797,"public static void writeToString(MethodWriter writer,IType type) throws BytecodeException {
  if (type.isArrayType()) {
    writer.writeInsn(Opcodes.SWAP);
    writer.writeInsn(Opcodes.DUP_X1);
    writeArrayToString(writer,type.getElementType());
    return;
  }
  StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.equals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
  desc.append(""String_Node_Str"");
  writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
  return;
}","public static void writeToString(MethodWriter writer,IType type) throws BytecodeException {
  if (type.isArrayType()) {
    writer.writeInsn(Opcodes.SWAP);
    writer.writeInsn(Opcodes.DUP_X1);
    writeArrayToString(writer,type.getElementType());
    return;
  }
  StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.classEquals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
  desc.append(""String_Node_Str"");
  writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
  return;
}",0.9947009841029524
84798,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.context=context;
  if (this.condition != null) {
    this.condition.checkTypes(markers,this);
  }
  if (this.type != Types.UNKNOWN) {
    IClass iclass=context.getThisClass();
    IDyvilHeader unit=iclass.getUnit();
    this.internalClassName=iclass.getInternalName() + ""String_Node_Str"" + unit.innerClassCount();
    unit.addInnerClass(this);
    if (this.pattern != null) {
      this.pattern.resolve(markers,context);
      IType type1=this.type.resolveType(PAR_TYPE);
      this.pattern=this.pattern.withType(type1);
      this.pattern.checkTypes(markers,context);
    }
    if (this.value != null) {
      IType type1=this.type.resolveType(RETURN_TYPE);
      this.value=this.value.withType(type1);
    }
  }
  if (this.value != null) {
    this.value.checkTypes(markers,this);
  }
  this.context=null;
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.context=context;
  if (this.condition != null) {
    this.condition.checkTypes(markers,this);
  }
  if (this.type != Types.UNKNOWN) {
    if (this.type == null) {
      this.getType();
    }
    IClass iclass=context.getThisClass();
    IDyvilHeader unit=iclass.getUnit();
    this.internalClassName=iclass.getInternalName() + ""String_Node_Str"" + unit.innerClassCount();
    unit.addInnerClass(this);
    if (this.pattern != null) {
      this.pattern.resolve(markers,context);
      IType type1=this.type.resolveType(PAR_TYPE);
      this.pattern=this.pattern.withType(type1);
      this.pattern.checkTypes(markers,context);
    }
    if (this.value != null) {
      IType type1=this.type.resolveType(RETURN_TYPE);
      this.value=this.value.withType(type1);
    }
  }
  if (this.value != null) {
    this.value.checkTypes(markers,this);
  }
  this.context=null;
}",0.9688694702348444
84799,"@Override public void write(ClassWriter writer) throws BytecodeException {
  IType parType=this.type.resolveType(PAR_TYPE);
  IType returnType=this.type.resolveType(RETURN_TYPE);
  String parFrameType=parType.getInternalName();
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  this.type.appendSignature(builder);
  String signature=builder.toString();
  writer.visit(DyvilCompiler.classVersion,0,this.internalClassName,signature,""String_Node_Str"",new String[]{""String_Node_Str""});
  MethodVisitor mv=writer.visitMethod(0,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  StringBuilder descBuilder=new StringBuilder();
  descBuilder.append('(');
  parType.appendExtendedName(descBuilder);
  String definedDesc=descBuilder.append(""String_Node_Str"").toString();
  StringBuilder signatureBuilder=new StringBuilder();
  signatureBuilder.append('(');
  parType.appendSignature(signatureBuilder);
  signature=signatureBuilder.append(""String_Node_Str"").toString();
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",definedDesc,signature,null));
  Label elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeLDC(1);
  mw.writeInsn(Opcodes.IRETURN);
  mw.writeLabel(elseLabel);
  mw.writeLDC(0);
  mw.writeInsn(Opcodes.IRETURN);
  mw.end();
  descBuilder.deleteCharAt(descBuilder.length() - 1);
  returnType.appendExtendedName(descBuilder);
  String applyDesc=descBuilder.toString();
  signatureBuilder.deleteCharAt(signatureBuilder.length() - 1);
  returnType.appendExtendedName(signatureBuilder);
  signature=signatureBuilder.toString();
  mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",applyDesc,signature,null));
  elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  mw.writeVarInsn(Opcodes.ALOAD,0);
  mw.writeVarInsn(Opcodes.ALOAD,1);
  mw.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
  mw.writeJumpInsn(Opcodes.IFNE,elseLabel);
  mw.writeInsn(Opcodes.ACONST_NULL);
  mw.writeInsn(Opcodes.ARETURN);
  mw.writeLabel(elseLabel);
  this.value.writeExpression(mw);
  mw.writeInsn(Opcodes.ARETURN);
  mw.end(returnType);
  if (!parType.classEquals(Types.OBJECT) || !returnType.classEquals(Types.OBJECT)) {
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
    mv.visitInsn(Opcodes.IRETURN);
    mv.visitMaxs(2,2);
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",applyDesc,false);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,2);
  }
}","@Override public void write(ClassWriter writer) throws BytecodeException {
  IType parType=this.type.resolveType(PAR_TYPE);
  IType returnType=this.type.resolveType(RETURN_TYPE);
  String parFrameType=parType.getInternalName();
  StringBuilder builder=new StringBuilder(""String_Node_Str"");
  this.type.appendSignature(builder);
  String signature=builder.toString();
  writer.visit(DyvilCompiler.classVersion,0,this.internalClassName,signature,""String_Node_Str"",new String[]{""String_Node_Str""});
  MethodVisitor mv=writer.visitMethod(0,""String_Node_Str"",""String_Node_Str"",null,null);
  mv.visitCode();
  mv.visitVarInsn(Opcodes.ALOAD,0);
  mv.visitMethodInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  mv.visitInsn(Opcodes.RETURN);
  mv.visitMaxs(1,1);
  mv.visitEnd();
  StringBuilder descBuilder=new StringBuilder();
  descBuilder.append('(');
  parType.appendExtendedName(descBuilder);
  String definedDesc=descBuilder.append(""String_Node_Str"").toString();
  StringBuilder signatureBuilder=new StringBuilder();
  signatureBuilder.append('(');
  parType.appendSignature(signatureBuilder);
  signature=signatureBuilder.append(""String_Node_Str"").toString();
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",definedDesc,signature,null));
  Label elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  this.pattern.writeInvJump(mw,1,elseLabel);
  if (this.condition != null) {
    this.condition.writeInvJump(mw,elseLabel);
  }
  mw.writeLDC(1);
  mw.writeInsn(Opcodes.IRETURN);
  mw.writeLabel(elseLabel);
  mw.writeLDC(0);
  mw.writeInsn(Opcodes.IRETURN);
  mw.end();
  descBuilder.deleteCharAt(descBuilder.length() - 1);
  returnType.appendExtendedName(descBuilder);
  String applyDesc=descBuilder.toString();
  signatureBuilder.deleteCharAt(signatureBuilder.length() - 1);
  returnType.appendExtendedName(signatureBuilder);
  signature=signatureBuilder.toString();
  mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",applyDesc,signature,null));
  elseLabel=new Label();
  mw.begin();
  mw.setThisType(this.internalClassName);
  mw.setLocalType(1,parFrameType);
  mw.writeVarInsn(Opcodes.ALOAD,0);
  mw.writeVarInsn(Opcodes.ALOAD,1);
  mw.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
  mw.writeJumpInsn(Opcodes.IFNE,elseLabel);
  mw.writeInsn(Opcodes.ACONST_NULL);
  mw.writeInsn(Opcodes.ARETURN);
  mw.writeLabel(elseLabel);
  if (this.value != null) {
    this.value.writeExpression(mw);
  }
 else {
    mw.writeInsn(Opcodes.ACONST_NULL);
  }
  mw.writeInsn(Opcodes.ARETURN);
  mw.end(returnType);
  if (!parType.classEquals(Types.OBJECT) || !returnType.classEquals(Types.OBJECT)) {
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",definedDesc,false);
    mv.visitInsn(Opcodes.IRETURN);
    mv.visitMaxs(2,2);
    mv=writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC | Modifiers.BRIDGE,""String_Node_Str"",""String_Node_Str"",null,null);
    mv.visitCode();
    mv.visitVarInsn(Opcodes.ALOAD,0);
    mv.visitVarInsn(Opcodes.ALOAD,1);
    mv.visitTypeInsn(Opcodes.CHECKCAST,parFrameType);
    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,this.internalClassName,""String_Node_Str"",applyDesc,false);
    mv.visitInsn(Opcodes.ARETURN);
    mv.visitMaxs(2,2);
  }
}",0.988458927359131
84800,"@Override public IType getType(){
  if (this.type == null) {
    GenericType gt=new GenericType(PARTIALFUNCTION_CLASS);
    IType t1=this.pattern.getType();
    if (t1.isPrimitive()) {
      t1=t1.getReferenceType();
    }
    gt.addType(t1);
    t1=this.value.getType();
    if (t1.isPrimitive()) {
      t1=t1.getReferenceType();
    }
    gt.addType(t1);
    return this.type=gt;
  }
  return this.type;
}","@Override public IType getType(){
  if (this.type == null) {
    GenericType gt=new GenericType(PARTIALFUNCTION_CLASS);
    IType t1=this.pattern.getType();
    if (t1.isPrimitive()) {
      t1=t1.getReferenceType();
    }
    gt.addType(t1);
    if (this.value != null) {
      t1=this.value.getType();
      if (t1.isPrimitive()) {
        t1=t1.getReferenceType();
      }
      gt.addType(t1);
    }
 else {
      gt.addType(new Type(Types.VOID_CLASS));
    }
    return this.type=gt;
  }
  return this.type;
}",0.8524945770065075
84801,"public default IValue withType(IType type){
  IType thisType=this.getType();
  if (thisType == null) {
    return null;
  }
  if (!type.isSuperTypeOf(thisType)) {
    return null;
  }
  boolean primitive=this.isPrimitive();
  if (primitive != type.isPrimitive()) {
    if (primitive) {
      return new BoxedValue(this,thisType.getBoxMethod());
    }
    return new BoxedValue(this,type.getUnboxMethod());
  }
  return this;
}","public default IValue withType(IType type){
  IType thisType=this.getType();
  if (thisType == null) {
    return null;
  }
  if (!type.isSuperTypeOf(thisType)) {
    return null;
  }
  boolean primitive=thisType.isPrimitive();
  if (primitive != type.isPrimitive()) {
    if (primitive) {
      return new BoxedValue(this,thisType.getBoxMethod());
    }
    return new BoxedValue(this,type.getUnboxMethod());
  }
  return this;
}",0.9953271028037384
84802,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  IType type=this.value.getType();
  for (int i=0; i < this.caseCount; i++) {
    CaseStatement c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPosition(),""String_Node_Str"");
    }
    IPattern pattern=c.pattern;
    pattern.resolve(markers,context);
    if (pattern.isExhaustive()) {
      if (c.condition == null) {
        this.exhaustive=true;
      }
    }
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker marker=markers.create(pattern.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + pattern.getType());
      marker.addInfo(""String_Node_Str"" + type);
    }
 else {
      c.pattern=pattern=pattern1;
    }
    pattern.checkTypes(markers,context);
    this.cases[i].resolve(markers,context);
  }
  if (type == Types.BOOLEAN && this.caseCount >= 2) {
    this.exhaustive=true;
  }
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  IType type=this.value.getType();
  for (int i=0; i < this.caseCount; i++) {
    CaseStatement c=this.cases[i];
    if (this.exhaustive) {
      markers.add(c.getPosition(),""String_Node_Str"");
    }
    IPattern pattern=c.pattern;
    pattern=pattern.resolve(markers,context);
    if (pattern.isExhaustive()) {
      if (c.condition == null) {
        this.exhaustive=true;
      }
    }
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker marker=markers.create(pattern.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + pattern.getType());
      marker.addInfo(""String_Node_Str"" + type);
    }
 else {
      pattern=pattern1;
    }
    pattern.checkTypes(markers,context);
    c.pattern=pattern;
    this.cases[i].resolve(markers,context);
  }
  if (type == Types.BOOLEAN && this.caseCount >= 2) {
    this.exhaustive=true;
  }
  return this;
}",0.9797930014785609
84803,"public static MatchExpression getMatchExpression(IValue arg1,IValue arg2){
  if (arg2.valueTag() == IValue.STATEMENT_LIST) {
    IValueList list=(IValueList)arg2;
    int len=list.valueCount();
    CaseStatement[] cases=new CaseStatement[len];
    for (int i=0; i < len; i++) {
      IValue v=list.getValue(i);
      if (v.valueTag() != IValue.CASE_STATEMENT) {
        return null;
      }
      cases[i]=(CaseStatement)v;
      cases[i].setMatchCase();
    }
    return new MatchExpression(arg1,cases);
  }
  if (arg2.valueTag() == IValue.CASE_STATEMENT) {
    return new MatchExpression(arg1,new CaseStatement[]{(CaseStatement)arg2});
  }
  return null;
}","public static MatchExpression getMatchExpression(IValue arg1,IValue arg2){
  if (arg2.valueTag() == IValue.STATEMENT_LIST) {
    IValueList list=(IValueList)arg2;
    int len=list.valueCount();
    CaseStatement[] cases=new CaseStatement[len];
    for (int i=0; i < len; i++) {
      IValue v=list.getValue(i);
      if (v.valueTag() != IValue.CASE_STATEMENT) {
        return null;
      }
      cases[i]=(CaseStatement)v;
      cases[i].setMatchCase();
    }
    return new MatchExpression(arg1,cases);
  }
  if (arg2.valueTag() == IValue.CASE_STATEMENT) {
    CaseStatement cs=(CaseStatement)arg2;
    cs.setMatchCase();
    return new MatchExpression(arg1,new CaseStatement[]{cs});
  }
  return null;
}",0.936950146627566
84804,"@Override public boolean isExhaustive(){
  return true;
}","@Override public boolean isExhaustive(){
  return this.type == Types.ANY || this.type == Types.UNKNOWN;
}",0.6790123456790124
84805,"@Override public IPattern withType(IType type){
  this.type=type;
  return this;
}","@Override public IPattern withType(IType type){
  if (this.type == Types.ANY || this.type == Types.UNKNOWN) {
    this.type=type;
    return this;
  }
  return type.isSuperTypeOf(this.type) ? this : null;
}",0.5694444444444444
84806,"@Override public void resolve(MarkerList markers,IContext context){
  this.type=this.type.resolve(markers,context);
}","@Override public IPattern resolve(MarkerList markers,IContext context){
  this.type=this.type.resolve(markers,context);
  for (int i=0; i < this.patternCount; i++) {
    this.patterns[i]=this.patterns[i].resolve(markers,context);
  }
  return this;
}",0.6158038147138964
84807,"@Override public void checkTypes(MarkerList markers,IContext context){
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  int paramCount=iclass.parameterCount();
  if (this.patternCount != paramCount) {
    Marker m=markers.create(this.position,""String_Node_Str"",this.type.toString());
    m.addInfo(""String_Node_Str"" + this.patternCount);
    m.addInfo(""String_Node_Str"" + paramCount);
    return;
  }
  for (int i=0; i < paramCount; i++) {
    IParameter param=iclass.getParameter(i);
    IType type=param.getType().getConcreteType(this.type);
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker m=markers.create(this.position,""String_Node_Str"",param.getName());
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type);
    }
 else {
      this.patterns[i]=pattern1;
    }
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IClass iclass=this.type.getTheClass();
  if (iclass == null) {
    return;
  }
  int paramCount=iclass.parameterCount();
  if (this.patternCount != paramCount) {
    Marker m=markers.create(this.position,""String_Node_Str"",this.type.toString());
    m.addInfo(""String_Node_Str"" + this.patternCount);
    m.addInfo(""String_Node_Str"" + paramCount);
    return;
  }
  for (int i=0; i < paramCount; i++) {
    IParameter param=iclass.getParameter(i);
    IType type=param.getType().getConcreteType(this.type);
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker m=markers.create(this.position,""String_Node_Str"",param.getName());
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type);
    }
 else {
      this.patterns[i]=pattern=pattern1;
    }
    pattern.checkTypes(markers,context);
  }
}",0.9742782152230972
84808,"public default void resolve(MarkerList markers,IContext context){
}","public default IPattern resolve(MarkerList markers,IContext context){
  return this;
}",0.8235294117647058
84809,"@Override public void checkTypes(MarkerList markers,IContext context){
  ITypeList typeList=(ITypeList)this.tupleType;
  for (int i=0; i < this.patternCount; i++) {
    IType type=typeList.getType(i);
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker m=markers.create(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type);
    }
 else {
      this.patterns[i]=pattern1;
    }
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  ITypeList typeList=(ITypeList)this.tupleType;
  for (int i=0; i < this.patternCount; i++) {
    IType type=typeList.getType(i);
    IPattern pattern=this.patterns[i];
    IPattern pattern1=pattern.withType(type);
    if (pattern1 == null) {
      Marker m=markers.create(pattern.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + pattern.getType());
      m.addInfo(""String_Node_Str"" + type);
    }
 else {
      this.patterns[i]=pattern=pattern1;
    }
    pattern.checkTypes(markers,context);
  }
}",0.9568281938325992
84810,"@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex < 0) {
    varIndex=writer.localCount();
    writer.writeVarInsn(Opcodes.ASTORE,varIndex);
  }
  writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  writer.writeTypeInsn(Opcodes.INSTANCEOF,this.type.getInternalName());
  writer.writeJumpInsn(Opcodes.IFEQ,elseLabel);
  writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  this.pattern.writeInvJump(writer,-1,elseLabel);
  writer.resetLocals(varIndex);
}","@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex < 0) {
    varIndex=writer.localCount();
    writer.writeVarInsn(Opcodes.ASTORE,varIndex);
  }
  writer.writeVarInsn(Opcodes.ALOAD,varIndex);
  writer.writeTypeInsn(Opcodes.INSTANCEOF,this.type.getInternalName());
  writer.writeJumpInsn(Opcodes.IFEQ,elseLabel);
  if (this.pattern.getPatternType() != WILDCARD) {
    writer.writeVarInsn(Opcodes.ALOAD,varIndex);
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
    this.pattern.writeInvJump(writer,-1,elseLabel);
  }
}",0.9263854425144749
84811,"@Override public void toString(String prefix,StringBuilder buffer){
  this.pattern.toString(prefix,buffer);
  buffer.append(""String_Node_Str"");
  this.type.toString(prefix,buffer);
}","@Override public void toString(String prefix,StringBuilder buffer){
  if (this.pattern != null) {
    this.pattern.toString(prefix,buffer);
  }
  if (!this.pattern.isType(this.type)) {
    buffer.append(""String_Node_Str"");
    this.type.toString(prefix,buffer);
  }
}",0.8106904231625836
84812,"@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
}","@Override public void writeInvJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex < 0) {
    writer.writeInsn(Opcodes.AUTO_POP);
  }
}",0.773972602739726
84813,"@Override public void writeJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  writer.writeInsn(Opcodes.AUTO_POP);
}","@Override public void writeJump(MethodWriter writer,int varIndex,Label elseLabel) throws BytecodeException {
  if (varIndex < 0) {
    writer.writeInsn(Opcodes.AUTO_POP);
  }
}",0.9135802469135802
84814,"@Override public void writeInsn(int opcode) throws BytecodeException {
  this.insnCallback();
  if (opcode <= 0) {
    return;
  }
  if (opcode > 255) {
switch (opcode) {
case Opcodes.LCONST_M1:
      this.mv.visitLdcInsn(LONG_MINUS_ONE);
    return;
case Opcodes.BINV:
{
    Label label1=new Label();
    Label label2=new Label();
    this.mv.visitJumpInsn(Opcodes.IFEQ,label1);
    this.mv.visitInsn(Opcodes.ICONST_0);
    this.mv.visitJumpInsn(Opcodes.GOTO,label2);
    this.mv.visitLabel(label1);
    this.mv.visitInsn(Opcodes.ICONST_1);
    this.mv.visitLabel(label2);
  }
case Opcodes.IINV:
this.mv.visitInsn(Opcodes.ICONST_M1);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.LINV:
this.mv.visitLdcInsn(LONG_MINUS_ONE);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.L2B:
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.L2S:
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.L2C:
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.F2B:
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.F2S:
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.F2C:
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.D2B:
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.D2S:
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.D2C:
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.OBJECT_EQUALS:
this.mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case Opcodes.AUTO_SWAP:
BackendUtil.swap(this);
return;
case Opcodes.AUTO_POP:
BackendUtil.pop(this);
return;
case Opcodes.AUTO_POP2:
BackendUtil.pop2(this);
return;
case Opcodes.AUTO_DUP:
BackendUtil.dup(this);
return;
case Opcodes.AUTO_DUP_X1:
BackendUtil.dupX1(this);
return;
}
if (opcode >= ICMPEQ && opcode <= ICMPLE) {
opcode-=ICMPEQ;
Label label1=new Label();
Label label2=new Label();
this.mv.visitJumpInsn(Opcodes.IF_ICMPEQ + opcode,label1);
this.mv.visitInsn(Opcodes.ICONST_0);
this.mv.visitJumpInsn(Opcodes.GOTO,label2);
this.mv.visitLabel(label1);
this.mv.visitInsn(Opcodes.ICONST_1);
this.mv.visitLabel(label2);
}
return;
}
this.frame.visitInsn(opcode);
if (opcode >= IRETURN && opcode <= RETURN || opcode == ATHROW) {
if (this.syncCount > 0) {
for (int i=0; i < this.syncCount; i++) {
this.mv.visitVarInsn(Opcodes.ALOAD,this.syncLocals[i]);
this.mv.visitInsn(Opcodes.MONITOREXIT);
}
}
this.visitFrame=true;
this.hasReturn=true;
}
this.mv.visitInsn(opcode);
}","@Override public void writeInsn(int opcode) throws BytecodeException {
  if (opcode <= 0) {
    return;
  }
  if (opcode > 255) {
switch (opcode) {
case Opcodes.LCONST_M1:
      this.frame.push(ClassFormat.LONG);
    this.mv.visitLdcInsn(LONG_MINUS_ONE);
  return;
case Opcodes.BINV:
{
  Label label1=new Label();
  Label label2=new Label();
  this.mv.visitJumpInsn(Opcodes.IFEQ,label1);
  this.mv.visitInsn(Opcodes.ICONST_0);
  this.mv.visitJumpInsn(Opcodes.GOTO,label2);
  this.mv.visitLabel(label1);
  this.mv.visitInsn(Opcodes.ICONST_1);
  this.mv.visitLabel(label2);
}
case Opcodes.IINV:
this.mv.visitInsn(Opcodes.ICONST_M1);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.LINV:
this.mv.visitLdcInsn(LONG_MINUS_ONE);
this.mv.visitInsn(Opcodes.IXOR);
return;
case Opcodes.L2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.L2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.L2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.L2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.F2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.F2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.F2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.F2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.D2B:
this.frame.set(ClassFormat.BYTE);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2B);
return;
case Opcodes.D2S:
this.frame.set(ClassFormat.SHORT);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2S);
return;
case Opcodes.D2C:
this.frame.set(ClassFormat.CHAR);
this.mv.visitInsn(Opcodes.D2I);
this.mv.visitInsn(Opcodes.I2C);
return;
case Opcodes.OBJECT_EQUALS:
this.frame.pop();
this.frame.pop();
this.frame.push(ClassFormat.INT);
this.mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case Opcodes.AUTO_SWAP:
BackendUtil.swap(this);
return;
case Opcodes.AUTO_POP:
BackendUtil.pop(this);
return;
case Opcodes.AUTO_POP2:
BackendUtil.pop2(this);
return;
case Opcodes.AUTO_DUP:
BackendUtil.dup(this);
return;
case Opcodes.AUTO_DUP_X1:
BackendUtil.dupX1(this);
return;
}
if (opcode >= ICMPEQ && opcode <= ICMPLE) {
opcode-=ICMPEQ;
Label label1=new Label();
Label label2=new Label();
this.mv.visitJumpInsn(Opcodes.IF_ICMPEQ + opcode,label1);
this.mv.visitInsn(Opcodes.ICONST_0);
this.mv.visitJumpInsn(Opcodes.GOTO,label2);
this.mv.visitLabel(label1);
this.mv.visitInsn(Opcodes.ICONST_1);
this.mv.visitLabel(label2);
}
return;
}
this.insnCallback();
this.frame.visitInsn(opcode);
if (opcode >= IRETURN && opcode <= RETURN || opcode == ATHROW) {
if (this.syncCount > 0) {
for (int i=0; i < this.syncCount; i++) {
this.mv.visitVarInsn(Opcodes.ALOAD,this.syncLocals[i]);
this.mv.visitInsn(Opcodes.MONITOREXIT);
}
}
this.visitFrame=true;
this.hasReturn=true;
}
this.mv.visitInsn(opcode);
}",0.8926846100759144
84815,"protected void processValue(){
  if (this.value == null) {
    return;
  }
  MarkerList markers=new MarkerList();
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  IValue value=this.value;
  IType type=Types.UNKNOWN;
  ICodePosition position=CODE_POSITION;
  this.value=null;
  REPLVariable field=new REPLVariable(position,name,type,value);
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  field.foldConstants();
  if (this.reportErrors(markers)) {
    return;
  }
  field.compute();
  if (field.getType() != Types.VOID) {
    this.variables.put(name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}","protected void processValue(){
  if (this.value == null) {
    return;
  }
  MarkerList markers=new MarkerList();
  Name name=Name.getQualified(""String_Node_Str"" + resultIndex);
  IValue value=this.value;
  IType type=Types.UNKNOWN;
  ICodePosition position=CODE_POSITION;
  this.value=null;
  REPLVariable field=new REPLVariable(position,name,type,value);
  field.modifiers=Modifiers.FINAL;
  field.resolveTypes(markers,this);
  field.resolve(markers,this);
  field.checkTypes(markers,this);
  field.check(markers,this);
  if (this.reportErrors(markers)) {
    return;
  }
  field.foldConstants();
  field.compute();
  if (field.getType() != Types.VOID) {
    this.variables.put(name,field);
    System.out.println(field.toString());
    resultIndex++;
  }
}",0.9062710721510452
84816,"protected void compute(){
  if (this.className != null || this.value.isConstant())   return;
  try {
    this.className=""String_Node_Str"" + classID++;
    Class c=generateClass(this.value,this.type,this.className);
    if (this.type != Types.VOID) {
      java.lang.reflect.Field[] fields=c.getDeclaredFields();
      Object result=fields[0].get(null);
      IValue v=IValue.fromObject(result);
      if (v != null) {
        this.value=v;
      }
 else {
        this.value=new REPLResult(result);
      }
    }
 else {
      ReflectUtils.unsafe.ensureClassInitialized(c);
    }
  }
 catch (  ExceptionInInitializerError t) {
    Throwable ex=t.getCause();
    System.err.println(ex.getClass().getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
    StackTraceElement[] trace=ex.getStackTrace();
    int len=trace.length - 10;
    for (int i=0; i < len; i++) {
      System.err.println(""String_Node_Str"" + trace[i]);
    }
    this.value=this.type.getDefaultValue();
  }
catch (  Throwable t) {
    t.printStackTrace();
  }
}","protected void compute(){
  if (this.className != null || isConstant(this.value))   return;
  try {
    this.className=""String_Node_Str"" + classID++;
    Class c=generateClass(this.value,this.type,this.className);
    if (this.type != Types.VOID) {
      java.lang.reflect.Field[] fields=c.getDeclaredFields();
      Object result=fields[0].get(null);
      IValue v=IValue.fromObject(result);
      if (v != null) {
        this.value=v;
      }
 else {
        this.value=new REPLResult(result);
      }
    }
 else {
      ReflectUtils.unsafe.ensureClassInitialized(c);
    }
  }
 catch (  ExceptionInInitializerError t) {
    Throwable ex=t.getCause();
    System.err.println(ex.getClass().getCanonicalName() + ""String_Node_Str"" + ex.getMessage());
    StackTraceElement[] trace=ex.getStackTrace();
    int len=trace.length - 10;
    for (int i=0; i < len; i++) {
      System.err.println(""String_Node_Str"" + trace[i]);
    }
    this.value=this.type.getDefaultValue();
  }
catch (  Throwable t) {
    t.printStackTrace();
  }
}",0.988861985472155
84817,"@Override public void writeGet(MethodWriter writer,IValue instance) throws BytecodeException {
  if (this.value.isConstant()) {
    this.value.writeExpression(writer);
    return;
  }
  if (this.className == null) {
    this.type.writeDefaultValue(writer);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.GETSTATIC,this.className,""String_Node_Str"",extended);
}","@Override public void writeGet(MethodWriter writer,IValue instance) throws BytecodeException {
  if (isConstant(this.value)) {
    this.value.writeExpression(writer);
    return;
  }
  if (this.className == null) {
    this.type.writeDefaultValue(writer);
    return;
  }
  String extended=this.type.getExtendedName();
  writer.writeFieldInsn(Opcodes.GETSTATIC,this.className,""String_Node_Str"",extended);
}",0.971709717097171
84818,"private IDyvilHeader loadHeader(String fileName,String name,Library library){
  InputStream is=library.getInputStream(fileName);
  if (is != null) {
    IDyvilHeader header=HeaderFile.read(is);
    this.units.add(header);
    return header;
  }
  return null;
}","private IDyvilHeader loadHeader(String fileName,String name,Library library){
  InputStream is=library.getInputStream(fileName);
  if (is != null) {
    DyvilHeader header=HeaderFile.read(is);
    header.pack=this;
    this.units.add(header);
    return header;
  }
  return null;
}",0.9576427255985268
84819,"@Override public void addInclude(IncludeDeclaration component){
  if (this.includes == null) {
    this.includes=new IncludeDeclaration[2];
    this.includes[0]=component;
    this.includeCount=1;
    if (!this.isHeader()) {
      this.inheritedOperators=new IdentityHashMap();
    }
  }
 else {
    int index=this.includeCount++;
    if (index >= this.includes.length) {
      IncludeDeclaration[] temp=new IncludeDeclaration[index + 1];
      System.arraycopy(this.includes,0,temp,0,this.includes.length);
      this.includes=temp;
    }
    this.includes[index]=component;
  }
  if (this.isHeader()) {
    this.markers.add(component.getPosition(),""String_Node_Str"");
    return;
  }
  component.resolve(this.markers);
  component.addOperators(this.inheritedOperators);
}","@Override public void addInclude(IncludeDeclaration component){
  this.addIncludeToArray(component);
  if (this.isHeader()) {
    this.markers.add(component.getPosition(),""String_Node_Str"");
    return;
  }
  component.resolve(this.markers);
  component.addOperators(this.inheritedOperators);
}",0.5023430178069354
84820,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA) {
    pm.popParser(true);
    return;
  }
  if (this.isInMode(IMPORT)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      MultiImport mi=new MultiImport(token);
      this.theImport.addImport(mi);
      this.theImport=mi;
      if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
        pm.pushParser(new ImportListParser(mi));
        this.mode=MULTIIMPORT;
        return;
      }
      this.mode=0;
      pm.skip();
      return;
    }
    if (type == Symbols.WILDCARD) {
      PackageImport pi=new PackageImport(token.raw());
      this.theImport.addImport(pi);
      this.mode=0;
      return;
    }
    if (type == Keywords.ANNOTATION) {
      SimpleImport si=new SimpleImport(token.raw(),annotation);
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
    if (type == Keywords.TYPE) {
      SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
  }
  if (this.isInMode(DOT)) {
    if (type == Symbols.DOT) {
      this.mode=IMPORT;
      return;
    }
  }
  if (this.isInMode(ALIAS)) {
    if (type == Symbols.ARROW_OPERATOR) {
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type())) {
        this.theImport.setAlias(token.nameValue());
        pm.skip();
        return;
      }
      this.mode=DOT | IMPORT;
      throw new SyntaxError(next,""String_Node_Str"");
    }
  }
  if (this.isInMode(MULTIIMPORT)) {
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      this.theImport.expandPosition(token);
      this.mode=0;
      return;
    }
  }
  pm.popParser(true);
  return;
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    pm.popParser();
    return;
  }
  if (type == Symbols.COMMA) {
    pm.popParser(true);
    return;
  }
  if (this.isInMode(IMPORT)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      MultiImport mi=new MultiImport(token);
      this.theImport.addImport(mi);
      this.theImport=mi;
      if (token.next().type() != Symbols.CLOSE_CURLY_BRACKET) {
        pm.pushParser(new ImportListParser(mi));
        this.mode=MULTIIMPORT;
        return;
      }
      this.mode=0;
      pm.skip();
      return;
    }
    if (type == Symbols.WILDCARD) {
      PackageImport pi=new PackageImport(token.raw());
      this.theImport.addImport(pi);
      this.mode=0;
      return;
    }
    if (type == Keywords.ANNOTATION) {
      SimpleImport si=new SimpleImport(token.raw(),annotation);
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
    if (type == Keywords.TYPE) {
      SimpleImport si=new SimpleImport(token.raw(),ImportParser.type);
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      SimpleImport si=new SimpleImport(token.raw(),token.nameValue());
      this.theImport.addImport(si);
      this.theImport=si;
      this.mode=DOT | ALIAS;
      return;
    }
  }
  if (this.isInMode(DOT)) {
    if (type == Symbols.DOT) {
      this.mode=IMPORT;
      return;
    }
  }
  if (this.isInMode(ALIAS)) {
    if (type == Symbols.ARROW_OPERATOR || type == Keywords.AS) {
      IToken next=token.next();
      if (ParserUtil.isIdentifier(next.type())) {
        this.theImport.setAlias(next.nameValue());
        pm.skip();
        return;
      }
      this.mode=DOT | IMPORT;
      throw new SyntaxError(next,""String_Node_Str"");
    }
  }
  if (this.isInMode(MULTIIMPORT)) {
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      this.theImport.expandPosition(token);
      this.mode=0;
      return;
    }
  }
  pm.popParser(true);
  return;
}",0.9925128685072532
84821,"protected void processHeader(){
  MarkerList markers=new MarkerList();
  if (tempClass != null) {
    tempClass.resolveTypes(markers,this);
    tempClass.resolve(markers,this);
    tempClass.checkTypes(markers,this);
    tempClass.check(markers,this);
    tempClass.foldConstants();
    super.addClass(tempClass);
    System.out.println(""String_Node_Str"" + tempClass.getName());
    tempClass=null;
  }
  if (this.headerComponent == null || this.headerComponent.theImport == null) {
    return;
  }
  headerComponent.resolveTypes(markers,this,false);
  if (this.reportErrors(markers)) {
    return;
  }
  boolean isStatic=headerComponent.isStatic;
  if (isStatic) {
    super.addStaticImport(headerComponent);
    System.out.println(""String_Node_Str"" + headerComponent.theImport);
  }
 else {
    super.addImport(headerComponent);
    System.out.println(""String_Node_Str"" + headerComponent.theImport);
  }
  headerComponent=null;
}","protected void processHeader(){
  MarkerList markers=new MarkerList();
  if (tempClass != null) {
    tempClass.resolveTypes(markers,this);
    tempClass.resolve(markers,this);
    tempClass.checkTypes(markers,this);
    tempClass.check(markers,this);
    tempClass.foldConstants();
    super.addClass(tempClass);
    System.out.println(""String_Node_Str"" + tempClass.getName());
    tempClass=null;
  }
  if (this.includeDeclaration != null) {
    IncludeDeclaration inc=this.includeDeclaration;
    this.includeDeclaration=null;
    inc.resolve(markers);
    if (this.reportErrors(markers)) {
      return;
    }
    this.addIncludeToArray(inc);
    System.out.println(""String_Node_Str"" + inc.getHeader().getFullName());
    return;
  }
  if (this.importDeclaration == null || this.importDeclaration.theImport == null) {
    return;
  }
  importDeclaration.resolveTypes(markers,this,false);
  if (this.reportErrors(markers)) {
    return;
  }
  boolean isStatic=importDeclaration.isStatic;
  if (isStatic) {
    super.addStaticImport(importDeclaration);
    System.out.println(""String_Node_Str"" + importDeclaration.theImport);
  }
 else {
    super.addImport(importDeclaration);
    System.out.println(""String_Node_Str"" + importDeclaration.theImport);
  }
  importDeclaration=null;
}",0.5137697516930022
84822,"@Override public void addStaticImport(ImportDeclaration component){
  headerComponent=component;
}","@Override public void addStaticImport(ImportDeclaration component){
  importDeclaration=component;
}",0.8787878787878788
84823,"@Override public void addImport(ImportDeclaration component){
  headerComponent=component;
}","@Override public void addImport(ImportDeclaration component){
  importDeclaration=component;
}",0.8709677419354839
84824,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  if (this.arguments.isEmpty()) {
    this.arguments=EmptyArguments.VISIBLE;
  }
 else {
    this.arguments.resolveTypes(markers,context);
  }
}",0.8126232741617357
84825,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  if (this.arguments.isEmpty()) {
    this.arguments=EmptyArguments.VISIBLE;
  }
 else {
    this.arguments.resolveTypes(markers,context);
  }
}",0.8126232741617357
84826,"@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolve(markers,context);
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  this.type=this.type.resolve(markers,context);
  if (this.arguments.isEmpty()) {
    this.arguments=EmptyArguments.VISIBLE;
  }
 else {
    this.arguments.resolveTypes(markers,context);
  }
}",0.7816091954022989
84827,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.genericData != null) {
    this.genericData.resolveTypes(markers,context);
  }
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.genericData != null) {
    this.genericData.resolveTypes(markers,context);
  }
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  if (this.arguments.isEmpty()) {
    this.arguments=EmptyArguments.VISIBLE;
  }
 else {
    this.arguments.resolveTypes(markers,context);
  }
}",0.858806404657933
84828,"@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  this.arguments.resolveTypes(markers,context);
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.resolveTypes(markers,context);
  }
  if (this.arguments.isEmpty()) {
    this.arguments=EmptyArguments.VISIBLE;
  }
 else {
    this.arguments.resolveTypes(markers,context);
  }
}",0.8126232741617357
84829,"public static IValue fromObject(Object o){
  if (o == null) {
    return new NullValue();
  }
  Class c=o.getClass();
  if (c == Character.class) {
    return new CharValue((Character)o);
  }
 else   if (c == Integer.class) {
    return new IntValue((Integer)o);
  }
 else   if (c == Long.class) {
    return new LongValue((Long)o);
  }
 else   if (c == Float.class) {
    return new FloatValue((Float)o);
  }
 else   if (c == Double.class) {
    return new DoubleValue((Double)o);
  }
 else   if (c == String.class) {
    return new StringValue((String)o);
  }
 else   if (c == int[].class) {
    Array valueList=new Array(null);
    for (    int i : (int[])o) {
      valueList.addValue(new IntValue(i));
    }
    return valueList;
  }
 else   if (c == long[].class) {
    Array valueList=new Array();
    for (    long l : (long[])o) {
      valueList.addValue(new LongValue(l));
    }
    return valueList;
  }
 else   if (c == float[].class) {
    Array valueList=new Array();
    for (    float f : (float[])o) {
      valueList.addValue(new FloatValue(f));
    }
    return valueList;
  }
 else   if (c == double[].class) {
    Array valueList=new Array();
    for (    double d : (double[])o) {
      valueList.addValue(new DoubleValue(d));
    }
    return valueList;
  }
 else   if (c == org.objectweb.asm.Type.class) {
    org.objectweb.asm.Type type=(org.objectweb.asm.Type)o;
    IType itype=new Type(Name.getQualified(type.getClassName()));
    return new ClassOperator(itype);
  }
  return null;
}","public static IValue fromObject(Object o){
  if (o == null) {
    return new NullValue();
  }
  Class c=o.getClass();
  if (c == Character.class) {
    return new CharValue((Character)o);
  }
 else   if (c == Integer.class) {
    return new IntValue((Integer)o);
  }
 else   if (c == Long.class) {
    return new LongValue((Long)o);
  }
 else   if (c == Float.class) {
    return new FloatValue((Float)o);
  }
 else   if (c == Double.class) {
    return new DoubleValue((Double)o);
  }
 else   if (c == String.class) {
    return new StringValue((String)o);
  }
 else   if (c == int[].class) {
    Array valueList=new Array(null);
    valueList.requiredType=new ArrayType(Types.INT);
    valueList.elementType=Types.INT;
    for (    int i : (int[])o) {
      valueList.addValue(new IntValue(i));
    }
    return valueList;
  }
 else   if (c == long[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.LONG);
    valueList.elementType=Types.LONG;
    for (    long l : (long[])o) {
      valueList.addValue(new LongValue(l));
    }
    return valueList;
  }
 else   if (c == float[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.FLOAT);
    valueList.elementType=Types.FLOAT;
    for (    float f : (float[])o) {
      valueList.addValue(new FloatValue(f));
    }
    return valueList;
  }
 else   if (c == double[].class) {
    Array valueList=new Array();
    valueList.requiredType=new ArrayType(Types.DOUBLE);
    valueList.elementType=Types.DOUBLE;
    for (    double d : (double[])o) {
      valueList.addValue(new DoubleValue(d));
    }
    return valueList;
  }
 else   if (c == org.objectweb.asm.Type.class) {
    org.objectweb.asm.Type type=(org.objectweb.asm.Type)o;
    IType itype=new Type(Name.getQualified(type.getClassName()));
    return new ClassOperator(itype);
  }
  return null;
}",0.8905238375515009
84830,"private void writeArguments(MethodWriter writer,IArguments arguments) throws BytecodeException {
  if ((this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    int len=this.parameterCount;
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      len--;
      IParameter param;
      for (int i=1, j=0; i < len; i++, j++) {
        param=this.parameters[i];
        arguments.writeValue(j,param.getName(),param.getValue(),writer);
      }
      param=this.parameters[len];
      arguments.writeVarargsValue(len - 1,param.getName(),param.getType(),writer);
      return;
    }
    for (int i=1, j=0; i < this.parameterCount; i++, j++) {
      IParameter param=this.parameters[i];
      arguments.writeValue(j,param.getName(),param.getValue(),writer);
    }
    return;
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    arguments.writeValue(0,Name._this,null,writer);
    return;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int len=this.parameterCount - 1;
    IParameter param;
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      arguments.writeValue(i,param.getName(),param.getValue(),writer);
    }
    param=this.parameters[len];
    arguments.writeVarargsValue(len,param.getName(),param.getType(),writer);
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    arguments.writeValue(i,param.getName(),param.getValue(),writer);
  }
}","private void writeArguments(MethodWriter writer,IValue instance,IArguments arguments) throws BytecodeException {
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    int len=this.parameterCount;
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      len--;
      IParameter param;
      for (int i=1, j=0; i < len; i++, j++) {
        param=this.parameters[i];
        arguments.writeValue(j,param.getName(),param.getValue(),writer);
      }
      param=this.parameters[len];
      arguments.writeVarargsValue(len - 1,param.getName(),param.getType(),writer);
      return;
    }
    for (int i=1, j=0; i < this.parameterCount; i++, j++) {
      IParameter param=this.parameters[i];
      arguments.writeValue(j,param.getName(),param.getValue(),writer);
    }
    return;
  }
  if ((this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    arguments.writeValue(0,Name._this,null,writer);
    return;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int len=this.parameterCount - 1;
    IParameter param;
    for (int i=0; i < len; i++) {
      param=this.parameters[i];
      arguments.writeValue(i,param.getName(),param.getValue(),writer);
    }
    param=this.parameters[len];
    arguments.writeVarargsValue(len,param.getName(),param.getType(),writer);
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    IParameter param=this.parameters[i];
    arguments.writeValue(i,param.getName(),param.getValue(),writer);
  }
}",0.9877467665078284
84831,"private void writeIntrinsic(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  for (  int i : this.intrinsicOpcodes) {
    if (i == INSTANCE) {
      instance.writeExpression(writer);
    }
 else     if (i == ARGUMENTS) {
      this.writeArguments(writer,arguments);
    }
 else     if (Opcodes.isJumpOpcode(i)) {
      writer.writeJumpInsn(i,dest);
    }
 else {
      writer.writeInsn(i);
    }
  }
}","private void writeIntrinsic(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  for (  int i : this.intrinsicOpcodes) {
    if (i == INSTANCE) {
      instance.writeExpression(writer);
    }
 else     if (i == ARGUMENTS) {
      this.writeArguments(writer,instance,arguments);
    }
 else     if (Opcodes.isJumpOpcode(i)) {
      writer.writeJumpInsn(i,dest);
    }
 else {
      writer.writeInsn(i);
    }
  }
}",0.9900771775082692
84832,"private void writeInvIntrinsic(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  for (  int i : this.intrinsicOpcodes) {
    if (i == INSTANCE) {
      instance.writeExpression(writer);
    }
 else     if (i == ARGUMENTS) {
      this.writeArguments(writer,arguments);
    }
 else     if (Opcodes.isJumpOpcode(i)) {
      writer.writeJumpInsn(Opcodes.getInverseOpcode(i),dest);
    }
 else {
      writer.writeInsn(i);
    }
  }
}","private void writeInvIntrinsic(MethodWriter writer,Label dest,IValue instance,IArguments arguments) throws BytecodeException {
  for (  int i : this.intrinsicOpcodes) {
    if (i == INSTANCE) {
      instance.writeExpression(writer);
    }
 else     if (i == ARGUMENTS) {
      this.writeArguments(writer,instance,arguments);
    }
 else     if (Opcodes.isJumpOpcode(i)) {
      writer.writeJumpInsn(Opcodes.getInverseOpcode(i),dest);
    }
 else {
      writer.writeInsn(i);
    }
  }
}",0.9906735751295336
84833,"private void writeInvoke(MethodWriter writer,IValue instance,IArguments arguments) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer);
  }
  this.writeArguments(writer,arguments);
  int opcode;
  int modifiers=this.modifiers;
  if ((modifiers & Modifiers.STATIC) != 0) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS) && this.value == null) {
    opcode=Opcodes.INVOKEINTERFACE;
  }
 else   if ((modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    opcode=Opcodes.INVOKESPECIAL;
  }
 else   if (instance != null && instance.valueTag() == IValue.SUPER) {
    opcode=Opcodes.INVOKESPECIAL;
  }
 else {
    opcode=Opcodes.INVOKEVIRTUAL;
  }
  String owner=this.theClass.getInternalName();
  String name=this.name.qualified;
  String desc=this.getDescriptor();
  writer.writeInvokeInsn(opcode,owner,name,desc,this.theClass.hasModifier(Modifiers.INTERFACE_CLASS));
}","private void writeInvoke(MethodWriter writer,IValue instance,IArguments arguments) throws BytecodeException {
  if (instance != null) {
    instance.writeExpression(writer);
  }
  this.writeArguments(writer,instance,arguments);
  int opcode;
  int modifiers=this.modifiers;
  if ((modifiers & Modifiers.STATIC) != 0) {
    opcode=Opcodes.INVOKESTATIC;
  }
 else   if (this.theClass.hasModifier(Modifiers.INTERFACE_CLASS) && this.value == null) {
    opcode=Opcodes.INVOKEINTERFACE;
  }
 else   if ((modifiers & Modifiers.PRIVATE) == Modifiers.PRIVATE) {
    opcode=Opcodes.INVOKESPECIAL;
  }
 else   if (instance != null && instance.valueTag() == IValue.SUPER) {
    opcode=Opcodes.INVOKESPECIAL;
  }
 else {
    opcode=Opcodes.INVOKEVIRTUAL;
  }
  String owner=this.theClass.getInternalName();
  String name=this.name.qualified;
  String desc=this.getDescriptor();
  writer.writeInvokeInsn(opcode,owner,name,desc,this.theClass.hasModifier(Modifiers.INTERFACE_CLASS));
}",0.9953392024857588
84834,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  if (!this.typeHint && this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.value.checkTypes(markers,context);
    this.type=value1.getType();
    return this;
  }
  this.value.checkTypes(markers,context);
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.value=this.value.resolve(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return this;
  }
  if (!this.type.isResolved()) {
    return this;
  }
  if (!this.typeHint && this.type.equals(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
    this.value.checkTypes(markers,context);
    this.type=value1.getType();
    return this;
  }
  this.value.checkTypes(markers,context);
  return this;
}",0.9876221498371336
84835,"@Override public HashMap<K,V> copy(){
  int len=MathUtils.powerOfTwo(this.size);
  HashEntry[] newEntries=new HashEntry[len];
  for (  HashEntry<K,V> e : this.entries) {
    while (e != null) {
      int index=index(e.hash,len);
      HashEntry<K,V> newEntry=new HashEntry(e.key,e.value,e.hash);
      if (newEntries[index] != null) {
        newEntry.next=newEntries[index];
      }
      newEntries[index]=newEntry;
      e=e.next;
    }
  }
  return new HashMap<>(this.size,this.loadFactor,newEntries);
}","@Override public HashMap<K,V> copy(){
  int len=MathUtils.powerOfTwo(this.size + 2);
  HashEntry[] newEntries=new HashEntry[len];
  for (  HashEntry<K,V> e : this.entries) {
    while (e != null) {
      int index=index(e.hash,len);
      HashEntry<K,V> newEntry=new HashEntry(e.key,e.value,e.hash);
      if (newEntries[index] != null) {
        newEntry.next=newEntries[index];
      }
      newEntries[index]=newEntry;
      e=e.next;
    }
  }
  return new HashMap<>(this.size,this.loadFactor,newEntries);
}",0.9960707269155208
84836,"@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  if (this.instanceField != null) {
    this.instanceField.write(writer);
  }
  super.write(writer,instanceFields);
  if (!this.hasToString) {
    MethodWriterImpl mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.begin();
    mw.writeLDC(this.theClass.getName().unqualified);
    mw.writeInsn(Opcodes.ARETURN);
    mw.end(Types.STRING);
  }
}","@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  if (this.instanceField != null) {
    this.instanceField.write(writer);
  }
  super.write(writer,instanceFields);
  if (!this.hasToString) {
    MethodWriterImpl mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.begin();
    mw.setThisType(this.theClass.getInternalName());
    mw.writeLDC(this.theClass.getName().unqualified);
    mw.writeInsn(Opcodes.ARETURN);
    mw.end(Types.STRING);
  }
}",0.9508804448563484
84837,"private void write(MethodWriter writer,boolean expr) throws BytecodeException {
  int varIndex=writer.localCount();
  IType type=this.value.getType();
  this.value.writeExpression(writer);
  writer.writeVarInsn(type.getStoreOpcode(),varIndex);
  int localCount=writer.localCount();
  Label elseLabel=new Label();
  Label endLabel=new Label();
  Label destLabel=null;
  for (int i=0; i < this.caseCount; ) {
    CaseStatement c=this.cases[i];
    IPattern pattern=c.pattern;
    IValue condition=c.condition;
    IValue value=c.value;
    if (value == null) {
      if (destLabel == null) {
        destLabel=new Label();
      }
      if (condition != null) {
        pattern.writeInvJump(writer,varIndex,elseLabel);
        condition.writeJump(writer,destLabel);
      }
 else {
        pattern.writeJump(writer,varIndex,destLabel);
      }
      writer.resetLocals(localCount);
      ++i;
      continue;
    }
    pattern.writeInvJump(writer,varIndex,elseLabel);
    if (condition != null) {
      condition.writeInvJump(writer,elseLabel);
    }
    if (destLabel != null) {
      writer.writeLabel(destLabel);
      destLabel=null;
    }
    if (expr) {
      value.writeExpression(writer);
    }
 else {
      value.writeStatement(writer);
    }
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
    writer.writeLabel(elseLabel);
    if (++i < this.caseCount) {
      elseLabel=new Label();
    }
  }
  writer.writeLabel(elseLabel);
  if (!this.exhaustive) {
    writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
    writer.writeInsn(Opcodes.DUP);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
    String desc=""String_Node_Str"" + (type.isPrimitive() ? type.getExtendedName() + ""String_Node_Str"" : ""String_Node_Str"");
    writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",desc,false);
    writer.writeInsn(Opcodes.ATHROW);
    writer.resetLocals(varIndex);
  }
  writer.writeLabel(endLabel);
}","private void write(MethodWriter writer,boolean expr) throws BytecodeException {
  int varIndex=writer.localCount();
  IType type=this.value.getType();
  this.value.writeExpression(writer);
  writer.writeVarInsn(type.getStoreOpcode(),varIndex);
  int localCount=writer.localCount();
  Object frameType=expr ? this.type.getFrameType() : null;
  Label elseLabel=new Label();
  Label endLabel=new Label();
  Label destLabel=null;
  for (int i=0; i < this.caseCount; ) {
    CaseStatement c=this.cases[i];
    IPattern pattern=c.pattern;
    IValue condition=c.condition;
    IValue value=c.value;
    if (value == null) {
      if (destLabel == null) {
        destLabel=new Label();
      }
      if (condition != null) {
        pattern.writeInvJump(writer,varIndex,elseLabel);
        condition.writeJump(writer,destLabel);
      }
 else {
        pattern.writeJump(writer,varIndex,destLabel);
      }
      writer.resetLocals(localCount);
      ++i;
      continue;
    }
    pattern.writeInvJump(writer,varIndex,elseLabel);
    if (condition != null) {
      condition.writeInvJump(writer,elseLabel);
    }
    if (destLabel != null) {
      writer.writeLabel(destLabel);
      destLabel=null;
    }
    if (expr) {
      value.writeExpression(writer);
      writer.getFrame().set(frameType);
    }
 else {
      value.writeStatement(writer);
    }
    writer.resetLocals(localCount);
    writer.writeJumpInsn(Opcodes.GOTO,endLabel);
    writer.writeLabel(elseLabel);
    if (++i < this.caseCount) {
      elseLabel=new Label();
    }
  }
  writer.writeLabel(elseLabel);
  if (!this.exhaustive) {
    writer.writeTypeInsn(Opcodes.NEW,""String_Node_Str"");
    writer.writeInsn(Opcodes.DUP);
    writer.writeVarInsn(type.getLoadOpcode(),varIndex);
    String desc=""String_Node_Str"" + (type.isPrimitive() ? type.getExtendedName() + ""String_Node_Str"" : ""String_Node_Str"");
    writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,""String_Node_Str"",""String_Node_Str"",desc,false);
    writer.writeInsn(Opcodes.ATHROW);
    writer.setHasReturn(false);
  }
  writer.writeLabel(endLabel);
  writer.resetLocals(varIndex);
}",0.9512374418034796
84838,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.tupleType instanceof TupleType) {
    ITypeList typeList=(ITypeList)this.tupleType;
    for (int i=0; i < this.valueCount; i++) {
      IValue v1=this.values[i].withType(typeList.getType(i));
      if (v1 != null) {
        this.values[i]=v1;
      }
 else {
      }
      this.values[i].checkTypes(markers,context);
    }
    return;
  }
  IMethod m=IContext.resolveMethod(this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,this.position,context,null,this.arguments,null);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.tupleType instanceof TupleType) {
    ITypeList typeList=(ITypeList)this.tupleType;
    for (int i=0; i < this.valueCount; i++) {
      IType type=typeList.getType(i);
      IValue value=this.values[i];
      IValue value1=value.withType(type);
      if (value1 == null) {
        Marker m=markers.create(value.getPosition(),""String_Node_Str"");
        m.addInfo(""String_Node_Str"" + value.getType());
        m.addInfo(""String_Node_Str"" + type);
      }
 else {
        this.values[i]=value=value1;
      }
      value.checkTypes(markers,context);
    }
    return;
  }
  IMethod m=IContext.resolveMethod(this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,this.position,context,null,this.arguments,null);
  }
}",0.8102099629477151
84839,"public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
Object o=this.stack[this.stackCount - 1];
if (o == LONG || o == DOUBLE) {
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount++]=o;
return;
}
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount];
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}","public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
Object o=this.stack[this.stackCount - 1];
if (o == LONG || o == DOUBLE) {
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount++]=o;
return;
}
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=this.stack[this.stackCount - 2];
this.stack[this.stackCount - 2]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}",0.9986184664978126
84840,"@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  int dims=this.requiredType.getArrayDimensions();
  if (dims > 0) {
    for (int i=0; i < dims; i++) {
      writer.writeLDC(0);
    }
    writer.writeNewArray(this.requiredType,dims);
    return;
  }
  this.method.writeCall(writer,null,EmptyArguments.INSTANCE,this.requiredType);
}","@Override public void writeExpression(MethodWriter writer) throws BytecodeException {
  if (this.requiredType.isArrayType()) {
    IType elementType=this.requiredType.getElementType();
    if (elementType.isPrimitive()) {
      writer.writeFieldInsn(Opcodes.GETSTATIC,this.requiredType.getTheClass().getInternalName(),""String_Node_Str"",this.requiredType.getExtendedName());
      return;
    }
    writer.writeLDC(0);
    int dims=1;
    while (elementType.isArrayType()) {
      elementType=elementType.getElementType();
      dims++;
      writer.writeLDC(0);
    }
    writer.writeNewArray(elementType,dims);
    return;
  }
  this.method.writeCall(writer,null,EmptyArguments.INSTANCE,this.requiredType);
}",0.5139146567717996
84841,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.elementType == null) {
    this.getType();
    for (int i=0; i < this.valueCount; i++) {
      this.values[i].checkTypes(markers,context);
    }
  }
  IType type=this.elementType;
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(type);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
    value.checkTypes(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.elementType == null) {
    if (this.valueCount == 0) {
      markers.add(this.position,""String_Node_Str"");
      return;
    }
    this.getType();
    for (int i=0; i < this.valueCount; i++) {
      this.values[i].checkTypes(markers,context);
    }
  }
  IType type=this.elementType;
  for (int i=0; i < this.valueCount; i++) {
    IValue value=this.values[i];
    IValue value1=value.withType(type);
    if (value1 == null) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.requiredType);
      marker.addInfo(""String_Node_Str"" + value.getType());
    }
 else {
      value=value1;
      this.values[i]=value1;
    }
    value.checkTypes(markers,context);
  }
}",0.4405228758169934
84842,"@Override public void writeNewArray(IType type,int dims) throws BytecodeException {
  if (dims == 1) {
    if (type.typeTag() == IType.PRIMITIVE_TYPE) {
      this.writeIntInsn(Opcodes.NEWARRAY,((PrimitiveType)type).typecode);
      return;
    }
    this.writeTypeInsn(Opcodes.ANEWARRAY,type.getInternalName());
    return;
  }
  this.insnCallback();
  String extended=type.getExtendedName();
  this.frame.visitNewArray(extended,dims);
  this.mv.visitMultiANewArrayInsn(extended,dims);
}","@Override public void writeNewArray(IType type,int dims) throws BytecodeException {
  if (dims == 1) {
    if (type.typeTag() == IType.PRIMITIVE_TYPE) {
      this.writeIntInsn(Opcodes.NEWARRAY,((PrimitiveType)type).typecode);
      return;
    }
    this.writeTypeInsn(Opcodes.ANEWARRAY,type.getInternalName());
    return;
  }
  this.insnCallback();
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < dims; i++) {
    builder.append('[');
  }
  type.appendExtendedName(builder);
  String extended=builder.toString();
  this.frame.visitNewArray(extended,dims);
  this.mv.visitMultiANewArrayInsn(extended,dims);
}",0.8466367713004485
84843,"/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as a statement. That means that this element is removedfrom the stack.
 * @param writer
 * @throws BytecodeException TODO
 */
public void writeStatement(MethodWriter writer) throws BytecodeException ;","/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as a statement. That means that this element is removedfrom the stack.
 * @param writer
 * @throws BytecodeException
 */
public void writeStatement(MethodWriter writer) throws BytecodeException ;",0.991150442477876
84844,"/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as a jump expression to the given {@link Label}{@code dest}. By default, this calls  {@link #writeExpression(MethodWriter)} and then writes an{@link Opcodes#IFEQ IFEQ} instruction pointing to {@code dest}. That means the JVM would jump to   {@code dest} if the current value on thestack equals  {@code 0}.
 * @param writer
 * @param dest
 * @throws BytecodeException TODO
 */
public default void writeInvJump(MethodWriter writer,Label dest) throws BytecodeException {
  this.writeExpression(writer);
  writer.writeJumpInsn(Opcodes.IFEQ,dest);
}","/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as a jump expression to the given {@link Label}{@code dest}. By default, this calls  {@link #writeExpression(MethodWriter)} and then writes an{@link Opcodes#IFEQ IFEQ} instruction pointing to {@code dest}. That means the JVM would jump to   {@code dest} if the current value on thestack equals  {@code 0}.
 * @param writer
 * @param dest
 * @throws BytecodeException
 */
public default void writeInvJump(MethodWriter writer,Label dest) throws BytecodeException {
  this.writeExpression(writer);
  writer.writeJumpInsn(Opcodes.IFEQ,dest);
}",0.9960095770151636
84845,"/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as an expression. That means that this element remains asthe first element of the stack.
 * @param visitor
 * @throws BytecodeException TODO
 */
public void writeExpression(MethodWriter writer) throws BytecodeException ;","/** 
 * Writes this   {@link IValue} to the given {@link MethodWriter}{@code writer} as an expression. That means that this element remains asthe first element of the stack.
 * @param visitor
 * @throws BytecodeException
 */
public void writeExpression(MethodWriter writer) throws BytecodeException ;",0.9917355371900828
84846,"@Override public NestedClass getInnerClass(int index){
  return null;
}","@Override public IClassCompilable getInnerClass(int index){
  return null;
}",0.8843537414965986
84847,"@Override public void addInnerClass(NestedClass iclass){
}","@Override public void addInnerClass(IClassCompilable iclass){
}",0.859504132231405
84848,"@Override public NestedClass getInnerClass(int index){
  return this.innerClasses[index];
}","@Override public IClassCompilable getInnerClass(int index){
  return this.innerClasses[index];
}",0.9090909090909092
84849,"@Override public void compile(){
  int size=this.markers.size();
  if (size > 0) {
    StringBuilder buf=new StringBuilder(""String_Node_Str"").append(this.inputFile).append(""String_Node_Str"");
    String code=this.inputFile.getCode();
    int warnings=this.markers.getWarnings();
    int errors=this.markers.getErrors();
    this.markers.sort();
    for (    Marker marker : this.markers) {
      marker.log(code,buf);
    }
    buf.append(errors).append(errors == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(warnings).append(warnings == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    DyvilCompiler.logger.info(buf.toString());
    if (errors > 0) {
      DyvilCompiler.logger.warning(this.name + ""String_Node_Str"");
      return;
    }
  }
  for (int i=0; i < this.classCount; i++) {
    IClass iclass=this.classes[i];
    String name=iclass.getName().qualified;
    if (!name.equals(this.name)) {
      name=this.name + ""String_Node_Str"" + name+ ""String_Node_Str"";
    }
 else {
      name+=""String_Node_Str"";
    }
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
    IClassBody body=iclass.getBody();
    if (body != null) {
      int len=body.classCount();
      for (int j=0; j < len; j++) {
        IClass iclass1=body.getClass(j);
        name=this.name + ""String_Node_Str"" + iclass1.getName().qualified+ ""String_Node_Str"";
        file=new File(this.outputDirectory,name);
        ClassWriter.compile(file,iclass1);
      }
    }
  }
  for (int i=0; i < this.innerClassCount; i++) {
    NestedClass iclass=this.innerClasses[i];
    String name=iclass.getName().qualified + ""String_Node_Str"";
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
  }
}","@Override public void compile(){
  int size=this.markers.size();
  if (size > 0) {
    StringBuilder buf=new StringBuilder(""String_Node_Str"").append(this.inputFile).append(""String_Node_Str"");
    String code=this.inputFile.getCode();
    int warnings=this.markers.getWarnings();
    int errors=this.markers.getErrors();
    this.markers.sort();
    for (    Marker marker : this.markers) {
      marker.log(code,buf);
    }
    buf.append(errors).append(errors == 1 ? ""String_Node_Str"" : ""String_Node_Str"").append(warnings).append(warnings == 1 ? ""String_Node_Str"" : ""String_Node_Str"");
    DyvilCompiler.logger.info(buf.toString());
    if (errors > 0) {
      DyvilCompiler.logger.warning(this.name + ""String_Node_Str"");
      return;
    }
  }
  for (int i=0; i < this.classCount; i++) {
    IClass iclass=this.classes[i];
    String name=iclass.getName().qualified;
    if (!name.equals(this.name)) {
      name=this.name + ""String_Node_Str"" + name+ ""String_Node_Str"";
    }
 else {
      name+=""String_Node_Str"";
    }
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
    IClassBody body=iclass.getBody();
    if (body != null) {
      int len=body.classCount();
      for (int j=0; j < len; j++) {
        IClass iclass1=body.getClass(j);
        name=this.name + ""String_Node_Str"" + iclass1.getName().qualified+ ""String_Node_Str"";
        file=new File(this.outputDirectory,name);
        ClassWriter.compile(file,iclass1);
      }
    }
  }
  for (int i=0; i < this.innerClassCount; i++) {
    IClassCompilable iclass=this.innerClasses[i];
    String name=iclass.getFileName() + ""String_Node_Str"";
    File file=new File(this.outputDirectory,name);
    ClassWriter.compile(file,iclass);
  }
}",0.953174375179546
84850,"@Override public void addInnerClass(NestedClass iclass){
  int index=this.innerClassCount++;
  if (index >= this.innerClasses.length) {
    NestedClass[] temp=new NestedClass[this.innerClassCount];
    System.arraycopy(this.innerClasses,0,temp,0,this.innerClasses.length);
    this.innerClasses=temp;
  }
  this.innerClasses[index]=iclass;
  iclass.setIndex(index);
}","@Override public void addInnerClass(IClassCompilable iclass){
  int index=this.innerClassCount++;
  if (index >= this.innerClasses.length) {
    IClassCompilable[] temp=new IClassCompilable[this.innerClassCount];
    System.arraycopy(this.innerClasses,0,temp,0,this.innerClasses.length);
    this.innerClasses=temp;
  }
  this.innerClasses[index]=iclass;
  iclass.setInnerIndex(index);
}",0.8859416445623343
84851,public NestedClass getInnerClass(int index);,public IClassCompilable getInnerClass(int index);,0.8172043010752689
84852,public void addInnerClass(NestedClass iclass);,public void addInnerClass(IClassCompilable iclass);,0.8247422680412371
84853,"@Override public final IType getReferenceType(){
  Type type=new Type(this.position,this.theClass);
  type.name=this.name;
  return type;
}","@Override public final IType getReferenceType(){
  Type type=new Type(this.position,this.theClass);
  if (this != Types.VOID) {
    type.name=this.name;
  }
  return type;
}",0.8910256410256411
84854,"public static void init(){
  VOID.theClass=VOID_CLASS;
  BOOLEAN.theClass=BOOLEAN_CLASS;
  BOOLEAN.boxMethod=BOOLEAN_CLASS.getBody().getMethod(Name.apply);
  BOOLEAN.unboxMethod=BOOLEAN_CLASS.getBody().getMethod(Name.unapply);
  BYTE.theClass=BYTE_CLASS;
  BYTE.boxMethod=BYTE_CLASS.getBody().getMethod(Name.apply);
  BYTE.unboxMethod=BYTE_CLASS.getBody().getMethod(Name.unapply);
  SHORT.theClass=SHORT_CLASS;
  SHORT.boxMethod=SHORT_CLASS.getBody().getMethod(Name.apply);
  SHORT.unboxMethod=SHORT_CLASS.getBody().getMethod(Name.unapply);
  CHAR.theClass=CHAR_CLASS;
  CHAR.boxMethod=CHAR_CLASS.getBody().getMethod(Name.apply);
  CHAR.unboxMethod=CHAR_CLASS.getBody().getMethod(Name.unapply);
  INT.theClass=INT_CLASS;
  INT.boxMethod=INT_CLASS.getBody().getMethod(Name.apply);
  INT.unboxMethod=INT_CLASS.getBody().getMethod(Name.unapply);
  LONG.theClass=LONG_CLASS;
  LONG.boxMethod=LONG_CLASS.getBody().getMethod(Name.apply);
  LONG.unboxMethod=LONG_CLASS.getBody().getMethod(Name.unapply);
  FLOAT.theClass=FLOAT_CLASS;
  FLOAT.boxMethod=FLOAT_CLASS.getBody().getMethod(Name.apply);
  FLOAT.unboxMethod=FLOAT_CLASS.getBody().getMethod(Name.unapply);
  DOUBLE.theClass=DOUBLE_CLASS;
  DOUBLE.boxMethod=DOUBLE_CLASS.getBody().getMethod(Name.apply);
  DOUBLE.unboxMethod=DOUBLE_CLASS.getBody().getMethod(Name.unapply);
  ANY.theClass=OBJECT_CLASS;
  OBJECT.theClass=OBJECT_CLASS;
  STRING.theClass=STRING_CLASS;
  CLASS.theClass=CLASS_CLASS;
  PREDEF.theClass=PREDEF_CLASS;
  TYPE.theClass=TYPE_CLASS;
  THROWABLE.theClass=THROWABLE_CLASS;
  RUNTIME_EXCEPTION.theClass=RUNTIME_EXCEPTION_CLASS;
  MAP.theClass=MAP_CLASS;
}","public static void init(){
  VOID.theClass=VOID_CLASS;
  VOID.boxMethod=VOID_CLASS.getBody().getMethod(Name.apply);
  VOID.unboxMethod=VOID_CLASS.getBody().getMethod(Name.unapply);
  BOOLEAN.theClass=BOOLEAN_CLASS;
  BOOLEAN.boxMethod=BOOLEAN_CLASS.getBody().getMethod(Name.apply);
  BOOLEAN.unboxMethod=BOOLEAN_CLASS.getBody().getMethod(Name.unapply);
  BYTE.theClass=BYTE_CLASS;
  BYTE.boxMethod=BYTE_CLASS.getBody().getMethod(Name.apply);
  BYTE.unboxMethod=BYTE_CLASS.getBody().getMethod(Name.unapply);
  SHORT.theClass=SHORT_CLASS;
  SHORT.boxMethod=SHORT_CLASS.getBody().getMethod(Name.apply);
  SHORT.unboxMethod=SHORT_CLASS.getBody().getMethod(Name.unapply);
  CHAR.theClass=CHAR_CLASS;
  CHAR.boxMethod=CHAR_CLASS.getBody().getMethod(Name.apply);
  CHAR.unboxMethod=CHAR_CLASS.getBody().getMethod(Name.unapply);
  INT.theClass=INT_CLASS;
  INT.boxMethod=INT_CLASS.getBody().getMethod(Name.apply);
  INT.unboxMethod=INT_CLASS.getBody().getMethod(Name.unapply);
  LONG.theClass=LONG_CLASS;
  LONG.boxMethod=LONG_CLASS.getBody().getMethod(Name.apply);
  LONG.unboxMethod=LONG_CLASS.getBody().getMethod(Name.unapply);
  FLOAT.theClass=FLOAT_CLASS;
  FLOAT.boxMethod=FLOAT_CLASS.getBody().getMethod(Name.apply);
  FLOAT.unboxMethod=FLOAT_CLASS.getBody().getMethod(Name.unapply);
  DOUBLE.theClass=DOUBLE_CLASS;
  DOUBLE.boxMethod=DOUBLE_CLASS.getBody().getMethod(Name.apply);
  DOUBLE.unboxMethod=DOUBLE_CLASS.getBody().getMethod(Name.unapply);
  ANY.theClass=OBJECT_CLASS;
  OBJECT.theClass=OBJECT_CLASS;
  STRING.theClass=STRING_CLASS;
  CLASS.theClass=CLASS_CLASS;
  PREDEF.theClass=PREDEF_CLASS;
  TYPE.theClass=TYPE_CLASS;
  THROWABLE.theClass=THROWABLE_CLASS;
  RUNTIME_EXCEPTION.theClass=RUNTIME_EXCEPTION_CLASS;
  MAP.theClass=MAP_CLASS;
}",0.9626777251184834
84855,"@Override public void addInnerClass(NestedClass iclass){
  this.tempClass=iclass;
}","@Override public void addInnerClass(IClassCompilable iclass){
}",0.7123287671232876
84856,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.instance=this.method.checkArguments(markers,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.instance=this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}",0.9685714285714284
84857,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
    int valueTag=this.instance.valueTag();
    if (valueTag == APPLY_METHOD_CALL) {
      ApplyMethodCall call=(ApplyMethodCall)this.instance;
      IValue instance1=call.instance;
      IArguments arguments1=call.arguments.addLastValue(call);
      IType type=instance1.getType();
      IMethod match=IContext.resolveMethod(type,instance1,Name.update,arguments1);
      if (match != null) {
        this.updateMethod=match;
      }
 else {
        Marker marker=markers.create(this.position,""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + type);
      }
    }
 else     if (valueTag == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.field != null) {
        fa.field.checkAssign(markers,this.instance.getPosition(),this.instance,this);
      }
    }
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
    int valueTag=this.instance.valueTag();
    if (valueTag == APPLY_METHOD_CALL) {
      ApplyMethodCall call=(ApplyMethodCall)this.instance;
      IValue instance1=call.instance;
      IArguments arguments1=call.arguments.addLastValue(call);
      IType type=instance1.getType();
      IMethod match=IContext.resolveMethod(type,instance1,Name.update,arguments1);
      if (match != null) {
        this.updateMethod=match;
      }
 else {
        Marker marker=markers.create(this.position,""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + type);
      }
    }
 else     if (valueTag == FIELD_ACCESS) {
      FieldAccess fa=(FieldAccess)this.instance;
      if (fa.field != null) {
        fa.field.checkAssign(markers,this.instance.getPosition(),this.instance,this);
      }
    }
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}",0.9902912621359224
84858,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.constructor != null) {
    this.constructor.checkArguments(markers,this.arguments);
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.constructor != null) {
    this.constructor.checkArguments(markers,this.position,context,this.arguments);
  }
  this.arguments.checkTypes(markers,context);
}",0.9517543859649122
84859,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.field != null) {
    this.instance=this.field.checkAccess(markers,this.position,this.instance);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.field != null) {
    this.instance=this.field.checkAccess(markers,this.position,this.instance,context);
  }
}",0.9851301115241636
84860,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.field != null) {
    this.instance=this.field.checkAccess(markers,this.position,this.instance);
    this.value=this.field.checkAssign(markers,this.position,this.instance,this.value);
  }
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.field != null) {
    this.instance=this.field.checkAccess(markers,this.position,this.instance,context);
    this.value=this.field.checkAssign(markers,this.position,this.instance,this.value);
  }
  this.value.checkTypes(markers,context);
}",0.9899497487437184
84861,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.instance=this.method.checkArguments(markers,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.instance=this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.checkTypes(markers,context);
}",0.9685714285714284
84862,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.instance != null) {
    this.instance.checkTypes(markers,context);
  }
  if (this.method != null) {
    this.method.checkArguments(markers,this.position,context,this.instance,this.arguments,this.getGenericData());
  }
  this.arguments.check(markers,context);
}",0.9667673716012084
84863,"@Override public IValue checkArguments(MarkerList markers,IValue instance,IArguments arguments,ITypeContext typeContext){
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  return instance;
}",0.8765432098765432
84864,"@Override public void checkTypes(MarkerList markers,IContext context){
  IMethod match=IContext.resolveMethod(this.type,null,Name.apply,this.arguments);
  if (match == null) {
    IValue value=this.arguments.getFirstValue();
    StringBuilder builder=new StringBuilder();
    this.arguments.typesToString(builder);
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().getName(),this.type.toString(),builder);
  }
 else {
    this.method=match;
    GenericData data=match.getGenericData(null,null,this.arguments);
    match.checkArguments(markers,null,this.arguments,data);
    this.type=match.getType().getConcreteType(data);
  }
  this.arguments.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IMethod match=IContext.resolveMethod(this.type,null,Name.apply,this.arguments);
  if (match == null) {
    IValue value=this.arguments.getFirstValue();
    StringBuilder builder=new StringBuilder();
    this.arguments.typesToString(builder);
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().getName(),this.type.toString(),builder);
  }
 else {
    this.method=match;
    GenericData data=match.getGenericData(null,null,this.arguments);
    match.checkArguments(markers,null,context,null,this.arguments,data);
    this.type=match.getType().getConcreteType(data);
  }
  this.arguments.checkTypes(markers,context);
}",0.9907209136331192
84865,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.tupleType instanceof TupleType) {
    ITypeList typeList=(ITypeList)this.tupleType;
    for (int i=0; i < this.valueCount; i++) {
      IValue v1=this.values[i].withType(typeList.getType(i));
      if (v1 != null) {
        this.values[i]=v1;
      }
 else {
      }
      this.values[i].checkTypes(markers,context);
    }
    return;
  }
  IMethod m=IContext.resolveMethod(this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,null,this.arguments,null);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.tupleType instanceof TupleType) {
    ITypeList typeList=(ITypeList)this.tupleType;
    for (int i=0; i < this.valueCount; i++) {
      IValue v1=this.values[i].withType(typeList.getType(i));
      if (v1 != null) {
        this.values[i]=v1;
      }
 else {
      }
      this.values[i].checkTypes(markers,context);
    }
    return;
  }
  IMethod m=IContext.resolveMethod(this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,this.position,context,null,this.arguments,null);
  }
}",0.9898897058823528
84866,"@Override public void checkArguments(MarkerList markers,IArguments arguments){
  if (!this.returnTypeResolved) {
    this.resolveReturnType();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  super.checkArguments(markers,arguments);
}","@Override public void checkArguments(MarkerList markers,ICodePosition position,IContext context,IArguments arguments){
  if (!this.returnTypeResolved) {
    this.resolveReturnType();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  super.checkArguments(markers,position,context,arguments);
}",0.9008695652173913
84867,"@Override public IValue checkArguments(MarkerList markers,IValue instance,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,instance,arguments,typeContext);
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if (!this.annotationsResolved) {
    this.resolveAnnotations();
  }
  if (!this.parametersResolved) {
    this.resolveParameters();
  }
  return super.checkArguments(markers,position,context,instance,arguments,typeContext);
}",0.9209431345353676
84868,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  if (instance == null) {
    markers.add(position,""String_Node_Str"",this.name);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance == null) {
    markers.add(position,""String_Node_Str"",this.name);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}",0.9684601113172542
84869,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  return this.variable.checkAccess(markers,position,instance);
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  return this.variable.checkAccess(markers,position,instance,context);
}",0.927536231884058
84870,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      return new ThisValue(position,this.theClass.getType());
    }
  }
  return instance;
}",0.9142091152815014
84871,"public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance);","public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context);",0.9090909090909092
84872,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}",0.9876900796524256
84873,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  return instance;
}",0.931726907630522
84874,"@Override public void checkArguments(MarkerList markers,IArguments arguments){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],markers,this.type);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],markers,this.type);
    }
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],markers,this.type);
  }
}","@Override public void checkArguments(MarkerList markers,ICodePosition position,IContext context,IArguments arguments){
  int len=arguments.size();
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],markers,this.type);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],markers,this.type);
    }
    return;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],markers,this.type);
  }
}",0.9623352165725048
84875,"public void checkArguments(MarkerList markers,IArguments arguments);","public void checkArguments(MarkerList markers,ICodePosition position,IContext context,IArguments arguments);",0.7727272727272727
84876,"public IValue checkArguments(MarkerList markers,IValue instance,IArguments arguments,ITypeContext typeContext);","public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext);",0.8473282442748091
84877,"@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getVisibility(this)) {
case IContext.STATIC:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.SEALED:
markers.add(position,""String_Node_Str"",this.name);
break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
if ((this.modifiers & Modifiers.PREFIX) != 0) {
this.checkMutating(markers,arguments.getFirstValue());
}
 else if (instance != null) {
this.checkMutating(markers,instance);
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}","@Override public void checkCall(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    markers.add(position,""String_Node_Str"",this.name);
  }
switch (context.getVisibility(this)) {
case IContext.STATIC:
    markers.add(position,""String_Node_Str"",this.name);
  break;
case IContext.SEALED:
markers.add(position,""String_Node_Str"",this.name);
break;
case IContext.INVISIBLE:
markers.add(position,""String_Node_Str"",this.name);
break;
}
if ((this.modifiers & Modifiers.PREFIX) != 0) {
IValue value=arguments.getFirstValue();
this.checkMutating(markers,value != null ? value : instance);
}
 else if (instance != null) {
this.checkMutating(markers,instance);
}
for (int i=0; i < this.exceptionCount; i++) {
IType type=this.exceptions[i];
if (!Types.RUNTIME_EXCEPTION.isSuperTypeOf(type) && !context.handleException(type)) {
markers.add(position,""String_Node_Str"",type.toString());
}
}
}",0.9505858380030564
84878,"@Override public void checkTypes(MarkerList markers,IContext context){
  super.checkTypes(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].checkTypes(markers,context);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,context);
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  super.checkTypes(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].checkTypes(markers,context);
  }
  if (this.value != null) {
    this.value.checkTypes(markers,this);
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0) {
    this.modifiers|=Modifiers.ABSTRACT;
  }
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
}",0.9886480908152736
84879,"@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  int mods=this.modifiers & Modifiers.INFIX;
  if (instance != null && mods == Modifiers.INFIX) {
    IType t2=this.parameters[0].getType();
    int m=instance.getTypeMatch(t2);
    if (m == 0) {
      return 0;
    }
    match+=m;
    parIndex=1;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}","@Override public int getSignatureMatch(Name name,IValue instance,IArguments arguments){
  if (name != null && name != this.name) {
    return 0;
  }
  if (arguments == null) {
    return 1;
  }
  if (instance == null && this.modifiers == Modifiers.PREFIX) {
    int m=arguments.getFirstValue().getTypeMatch(this.theClass.getType());
    if (m == 0) {
      return 0;
    }
    return 1 + m;
  }
  int parIndex=0;
  int match=1;
  int len=arguments.size();
  int mods=this.modifiers & Modifiers.INFIX;
  if (instance != null && mods == Modifiers.INFIX) {
    IType t2=this.parameters[0].getType();
    int m=instance.getTypeMatch(t2);
    if (m == 0) {
      return 0;
    }
    match+=m;
    parIndex=1;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    int parCount=this.parameterCount - 1;
    if (len <= parCount) {
      return 0;
    }
    int m;
    IParameter varParam=this.parameters[parCount];
    for (int i=parIndex; i < parCount; i++) {
      IParameter par=this.parameters[i + parIndex];
      m=arguments.getTypeMatch(i,par);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    for (int i=parCount + parIndex; i < len; i++) {
      m=arguments.getVarargsTypeMatch(i,varParam);
      if (m == 0) {
        return 0;
      }
      match+=m;
    }
    return match;
  }
 else   if (len > this.parameterCount) {
    return 0;
  }
  for (int i=0; parIndex < this.parameterCount; parIndex++, i++) {
    IParameter par=this.parameters[parIndex];
    int m=arguments.getTypeMatch(i,par);
    if (m == 0) {
      return 0;
    }
    match+=m;
  }
  return match;
}",0.9328881469115192
84880,"@Override public IValue checkArguments(MarkerList markers,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    IParameter par=this.parameters[0];
    parType=par.getType().getConcreteType(typeContext);
    IValue instance1=instance.withType(parType);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
 else {
      instance=instance1;
    }
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],markers,typeContext);
      for (int i=0; i < this.parameterCount - 2; i++) {
        arguments.checkValue(i,this.parameters[i + 1],markers,typeContext);
      }
      return instance;
    }
    for (int i=0; i < this.parameterCount - 1; i++) {
      arguments.checkValue(i,this.parameters[i + 1],markers,typeContext);
    }
    return instance;
  }
 else   if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType();
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    return null;
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],markers,typeContext);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],markers,typeContext);
    }
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],markers,typeContext);
  }
  return instance;
}","@Override public IValue checkArguments(MarkerList markers,ICodePosition position,IContext context,IValue instance,IArguments arguments,ITypeContext typeContext){
  int len=arguments.size();
  IType parType;
  if (instance != null && (this.modifiers & Modifiers.INFIX) == Modifiers.INFIX) {
    IParameter par=this.parameters[0];
    parType=par.getType().getConcreteType(typeContext);
    IValue instance1=instance.withType(parType);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",par.getName());
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
 else {
      instance=instance1;
    }
    if ((this.modifiers & Modifiers.VARARGS) != 0) {
      arguments.checkVarargsValue(this.parameterCount - 2,this.parameters[this.parameterCount - 1],markers,typeContext);
      for (int i=0; i < this.parameterCount - 2; i++) {
        arguments.checkValue(i,this.parameters[i + 1],markers,typeContext);
      }
      return instance;
    }
    for (int i=0; i < this.parameterCount - 1; i++) {
      arguments.checkValue(i,this.parameters[i + 1],markers,typeContext);
    }
    return instance;
  }
 else   if (instance == null && (this.modifiers & Modifiers.PREFIX) == Modifiers.PREFIX) {
    parType=this.theClass.getType();
    instance=arguments.getFirstValue();
    IValue instance1=instance.withType(parType);
    if (instance1 == null) {
      Marker marker=markers.create(instance.getPosition(),""String_Node_Str"",this.name);
      marker.addInfo(""String_Node_Str"" + parType);
      marker.addInfo(""String_Node_Str"" + instance.getType());
    }
    return null;
  }
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        instance=null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    if (context.isStatic()) {
      markers.add(position,""String_Node_Str"",this.name);
    }
 else {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
      instance=new ThisValue(position,context.getThisClass().getType());
    }
  }
  if ((this.modifiers & Modifiers.VARARGS) != 0) {
    len=this.parameterCount - 1;
    arguments.checkVarargsValue(len,this.parameters[len],markers,typeContext);
    for (int i=0; i < len; i++) {
      arguments.checkValue(i,this.parameters[i],markers,typeContext);
    }
    return instance;
  }
  for (int i=0; i < this.parameterCount; i++) {
    arguments.checkValue(i,this.parameters[i],markers,typeContext);
  }
  return instance;
}",0.8512026090501427
84881,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  if (instance != null) {
    if ((this.modifiers & Modifiers.STATIC) != 0) {
      if (instance.valueTag() != IValue.CLASS_ACCESS) {
        markers.add(position,""String_Node_Str"",this.name.unqualified);
        return null;
      }
    }
 else     if (instance.valueTag() == IValue.CLASS_ACCESS) {
      markers.add(position,""String_Node_Str"",this.name.unqualified);
    }
  }
 else   if ((this.modifiers & Modifiers.STATIC) == 0) {
    markers.add(position,""String_Node_Str"",this.name.unqualified);
    return new ThisValue(position,this.theClass.getType());
  }
  return instance;
}",0.9876900796524256
84882,"@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance){
  return instance;
}","@Override public IValue checkAccess(MarkerList markers,ICodePosition position,IValue instance,IContext context){
  return instance;
}",0.931726907630522
84883,"@Override public IType getType(){
  if (this.requiredType != null) {
    return this.requiredType;
  }
  return this.requiredType=this.values[this.valueCount - 1].getType();
}","@Override public IType getType(){
  if (this.requiredType != null) {
    return this.requiredType;
  }
  if (this.valueCount == 0) {
    return this.requiredType=Types.VOID;
  }
  return this.requiredType=this.values[this.valueCount - 1].getType();
}",0.6494117647058824
84884,"public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  Name name1=Name.get(name);
  if ((this.modifiers & Modifiers.ANNOTATION) != 0) {
    ClassParameter param=new ClassParameter();
    param.modifiers=access;
    param.name=name1;
    param.type=ClassFormat.readReturnType(desc);
    this.addParameter(param);
    return new AnnotationClassVisitor(param);
  }
  if (""String_Node_Str"".equals(name)) {
    Constructor constructor=new ExternalConstructor(this);
    constructor.setModifiers(access);
    ClassFormat.readConstructorType(desc,constructor);
    if ((access & Modifiers.VARARGS) != 0) {
      constructor.getParameter(constructor.parameterCount() - 1).setVarargs(true);
    }
    this.body.addConstructor(constructor);
    return new SimpleMethodVisitor(constructor);
  }
  ExternalMethod method=new ExternalMethod(this);
  method.name=name1;
  method.modifiers=access;
  method.descriptor=desc;
  if (signature != null) {
    method.setGeneric();
    ClassFormat.readMethodType(signature,method);
  }
 else {
    ClassFormat.readMethodType(desc,method);
  }
  if ((access & Modifiers.VARARGS) != 0) {
    method.getParameter(method.parameterCount() - 1).setVarargs(true);
  }
  boolean flag=true;
  if ((access & Modifiers.SYNTHETIC) != 0) {
    int index=name.indexOf('$');
    if (index != -1) {
      flag=this.addSpecialMethod(name.substring(0,index),name.substring(index + 1),method);
    }
  }
  if (flag) {
    this.body.addMethod(method);
  }
  return new BytecodeVisitor(method);
}","public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  Name name1=Name.get(name);
  if ((this.modifiers & Modifiers.ANNOTATION) != 0) {
    ClassParameter param=new ClassParameter();
    param.modifiers=access;
    param.name=name1;
    param.type=ClassFormat.readReturnType(desc);
    this.addParameter(param);
    return new AnnotationClassVisitor(param);
  }
  if (""String_Node_Str"".equals(name)) {
    Constructor constructor=new ExternalConstructor(this);
    constructor.setModifiers(access);
    ClassFormat.readConstructorType(desc,constructor);
    if ((access & Modifiers.VARARGS) != 0) {
      constructor.getParameter(constructor.parameterCount() - 1).setVarargs(true);
    }
    this.body.addConstructor(constructor);
    return new SimpleMethodVisitor(constructor);
  }
  ExternalMethod method=new ExternalMethod(this);
  method.name=name1;
  method.modifiers=access;
  method.descriptor=desc;
  if (signature != null) {
    method.setGeneric();
    ClassFormat.readMethodType(signature,method);
  }
 else {
    ClassFormat.readMethodType(desc,method);
    if (exceptions != null) {
      for (      String s : exceptions) {
        method.addException(ClassFormat.internalToType(s));
      }
    }
  }
  if ((access & Modifiers.VARARGS) != 0) {
    method.getParameter(method.parameterCount() - 1).setVarargs(true);
  }
  boolean flag=true;
  if ((access & Modifiers.SYNTHETIC) != 0) {
    int index=name.indexOf('$');
    if (index != -1) {
      flag=this.addSpecialMethod(name.substring(0,index),name.substring(index + 1),method);
    }
  }
  if (flag) {
    this.body.addMethod(method);
  }
  return new BytecodeVisitor(method);
}",0.9552147239263804
84885,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.value != null) {
    this.value.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
}",0.7962529274004684
84886,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.get != null) {
    this.get.check(markers,context);
  }
  if (this.set != null) {
    this.set.check(markers,context);
  }
 else   if (this.get == null) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.get != null) {
    this.get.check(markers,context);
  }
  if (this.set != null) {
    this.set.check(markers,context);
    if (this.type == Types.VOID) {
      markers.add(this.position,""String_Node_Str"");
    }
  }
 else   if (this.get == null) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
}",0.7989347536617842
84887,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  this.value.check(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
}",0.7576601671309192
84888,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
}",0.8087912087912088
84889,"@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
}","@Override public void check(MarkerList markers,IContext context){
  super.check(markers,context);
  if (this.defaultValue != null) {
    this.defaultValue.check(markers,context);
  }
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
}",0.8087912087912088
84890,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label conditionLabel=this.conditionLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeTargetLabel(startLabel);
  this.action.writeStatement(writer);
  writer.writeLabel(conditionLabel);
  this.condition.writeJump(writer,startLabel);
  writer.writeLabel(endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label conditionLabel=this.conditionLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeTargetLabel(startLabel);
  this.action.writeStatement(writer);
  writer.writeLabel(conditionLabel);
  if (this.condition != null) {
    this.condition.writeJump(writer,startLabel);
  }
 else {
    writer.writeJumpInsn(Opcodes.GOTO,startLabel);
  }
  writer.writeLabel(endLabel);
}",0.8833455612619222
84891,"@Override public void check(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.check(markers,context);
  }
  if (this.condition != null) {
    this.condition.check(markers,context);
  }
 else {
    markers.add(this.position,""String_Node_Str"");
  }
}","@Override public void check(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.check(markers,context);
  }
  if (this.condition != null) {
    this.condition.check(markers,context);
  }
}",0.876
84892,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.check(markers,context);
  }
  if (this.condition != null) {
    IValue condition1=this.condition.withType(Types.BOOLEAN);
    if (condition1 == null) {
      Marker marker=markers.create(this.condition.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.condition.getType());
    }
 else {
      this.condition=condition1;
    }
    this.condition.checkTypes(markers,context);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.action != null) {
    this.action.checkTypes(markers,context);
  }
  if (this.condition != null) {
    IValue condition1=this.condition.withType(Types.BOOLEAN);
    if (condition1 == null) {
      Marker marker=markers.create(this.condition.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + this.condition.getType());
    }
 else {
      this.condition=condition1;
    }
    this.condition.checkTypes(markers,context);
  }
}",0.9952696310312203
84893,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Statements.doStart);
  if (this.action != null) {
    buffer.append(' ');
    this.action.toString(prefix,buffer);
    buffer.append(' ');
  }
  buffer.append(Formatting.Statements.doWhile);
  if (this.condition != null) {
    this.condition.toString(prefix,buffer);
  }
  buffer.append(Formatting.Statements.doEnd);
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Statements.doStart);
  if (this.action != null) {
    buffer.append(' ');
    this.action.toString(prefix,buffer);
  }
  if (this.condition != null) {
    buffer.append(' ');
    buffer.append(Formatting.Statements.doWhile);
    this.condition.toString(prefix,buffer);
    buffer.append(Formatting.Statements.doEnd);
  }
}",0.8024096385542169
84894,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label elseStart=new org.objectweb.asm.Label();
  if (this.elseThen != null) {
    org.objectweb.asm.Label elseEnd=new org.objectweb.asm.Label();
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
    writer.writeLabel(elseStart);
    this.elseThen.writeStatement(writer);
    writer.writeLabel(elseEnd);
  }
 else {
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeLabel(elseStart);
  }
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.then == null) {
    this.condition.writeExpression(writer);
    writer.writeInsn(Opcodes.POP);
    return;
  }
  org.objectweb.asm.Label elseStart=new org.objectweb.asm.Label();
  if (this.elseThen != null) {
    org.objectweb.asm.Label elseEnd=new org.objectweb.asm.Label();
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeJumpInsn(Opcodes.GOTO,elseEnd);
    writer.writeLabel(elseStart);
    this.elseThen.writeStatement(writer);
    writer.writeLabel(elseEnd);
  }
 else {
    this.condition.writeInvJump(writer,elseStart);
    this.then.writeStatement(writer);
    writer.writeLabel(elseStart);
  }
}",0.9123563218390804
84895,"@Override public IType resolveType(ITypeVariable typeVar){
  return this.type.resolveType(typeVar);
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  return concrete.isArrayType() ? this.type.resolveType(typeVar,concrete.getElementType()) : null;
}",0.7345454545454545
84896,"public static IType getPrimitiveType(IType type){
  if (type.isArrayType()) {
    return type;
  }
  IClass iclass=type.getTheClass();
  if (iclass == Types.VOID_CLASS) {
    return Types.VOID;
  }
  if (iclass == Types.BYTE_CLASS) {
    return Types.BYTE;
  }
  if (iclass == Types.SHORT_CLASS) {
    return Types.SHORT;
  }
  if (iclass == Types.CHAR_CLASS) {
    return Types.CHAR;
  }
  if (iclass == Types.INT_CLASS) {
    return Types.INT;
  }
  if (iclass == Types.LONG_CLASS) {
    return Types.LONG;
  }
  if (iclass == Types.FLOAT_CLASS) {
    return Types.FLOAT;
  }
  if (iclass == Types.DOUBLE_CLASS) {
    return Types.DOUBLE;
  }
  return type;
}","public static IType getPrimitiveType(IType type){
  if (type.isArrayType()) {
    return type;
  }
  IClass iclass=type.getTheClass();
  if (iclass == Types.VOID_CLASS) {
    return Types.VOID;
  }
  if (iclass == Types.BOOLEAN_CLASS) {
    return Types.BOOLEAN;
  }
  if (iclass == Types.BYTE_CLASS) {
    return Types.BYTE;
  }
  if (iclass == Types.SHORT_CLASS) {
    return Types.SHORT;
  }
  if (iclass == Types.CHAR_CLASS) {
    return Types.CHAR;
  }
  if (iclass == Types.INT_CLASS) {
    return Types.INT;
  }
  if (iclass == Types.LONG_CLASS) {
    return Types.LONG;
  }
  if (iclass == Types.FLOAT_CLASS) {
    return Types.FLOAT;
  }
  if (iclass == Types.DOUBLE_CLASS) {
    return Types.DOUBLE;
  }
  return type;
}",0.918763479511143
84897,"public static void readMethodType(String desc,IMethodSignature method){
  int i=1;
  if (desc.charAt(0) == '<') {
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,method);
    }
    i+=2;
  }
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,method);
  }
  i++;
  readTyped(desc,i,method);
}","public static void readMethodType(String desc,IMethodSignature method){
  int i=1;
  if (desc.charAt(0) == '<') {
    while (desc.charAt(i) != '>') {
      i=readGeneric(desc,i,method);
    }
    i+=2;
  }
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,method);
  }
  i++;
  i=readTyped(desc,i,method);
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,method);
  }
}",0.8445040214477212
84898,"public static void readConstructorType(String desc,IConstructor constructor){
  int i=1;
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,constructor);
  }
}","public static void readConstructorType(String desc,IConstructor constructor){
  int i=1;
  while (desc.charAt(i) != ')') {
    i=readTypeList(desc,i,constructor);
  }
  i+=2;
  int len=desc.length();
  while (i < len && desc.charAt(i) == '^') {
    i=readException(desc,i + 1,constructor);
  }
}",0.7257019438444925
84899,"@Override public boolean addRawAnnotation(String type){
switch (type) {
case ""String_Node_Str"":
    this.modifiers|=Modifiers.INLINE;
  return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.INFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.PREFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.SEALED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.NATIVE;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.STRICT;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.DEPRECATED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.OVERRIDE;
return false;
}
return true;
}","@Override public boolean addRawAnnotation(String type){
switch (type) {
case ""String_Node_Str"":
    this.modifiers|=Modifiers.INLINE;
  return false;
case ""String_Node_Str"":
case ""String_Node_Str"":
this.modifiers|=Modifiers.INFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.PREFIX;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.SEALED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.NATIVE;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.STRICT;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.DEPRECATED;
return false;
case ""String_Node_Str"":
this.modifiers|=Modifiers.OVERRIDE;
return false;
}
return true;
}",0.982532751091703
84900,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
if (this.mode == VALUE) {
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=TUPLE_END;
Tuple tv=new Tuple(token);
this.value=tv;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_PARENTHESIS) {
  pm.pushParser(new ExpressionListParser(tv));
}
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
  pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
  pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
  Bytecode bc=new Bytecode(token);
  pm.skip();
  pm.pushParser(new BytecodeParser(bc));
  this.mode=BYTECODE_END;
  this.value=bc;
  return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
}
if (this.mode == PATTERN_IF) {
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
}
if (this.mode == PATTERN_END) {
if (type == Symbols.COLON) {
this.field.setValue(this.value);
pm.popParser();
if (token.next().type() != Keywords.CASE) {
  pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ARRAY_END) {
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == LIST_END) {
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
  this.mode=ACCESS_2;
  this.dotless=false;
  pm.skip();
  return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == TUPLE_END) {
this.mode=ACCESS | LAMBDA;
if (type == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS) {
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
ICall call=(ICall)this.value;
call.setArguments(this.getArguments(pm,token.next()));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS_END) {
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == CONSTRUCTOR_END) {
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc=((ConstructorCall)this.value).toClassConstructor();
pm.skip();
pm.pushParser(new ClassBodyParser(cc.getNestedClass()));
this.value=cc;
this.mode=LIST_END;
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == FUNCTION_POINTER) {
pm.popParser();
if (ParserUtil.isIdentifier(type)) {
FunctionPointer fl=new FunctionPointer(token.raw(),token.nameValue());
fl.instance=this.value;
this.field.setValue(fl);
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BYTECODE_END) {
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.isInMode(LAMBDA)) {
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression lv=getLambdaValue(this.value);
if (lv != null) {
  lv.expandPosition(token);
  this.field.setValue(lv);
  pm.popParser();
  pm.pushParser(new ExpressionParser(lv));
  return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
}
if (this.isInMode(ACCESS)) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
if (type == Symbols.HASH) {
this.mode=FUNCTION_POINTER;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
  MethodCall mc=new MethodCall(prev,null,prev.nameValue());
  mc.arguments=args;
  this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
  MethodCall mc;
  if (this.value.valueTag() == IValue.FIELD_ACCESS) {
    mc=((FieldAccess)this.value).toMethodCall(null);
  }
 else {
    mc=(MethodCall)this.value;
  }
  mc.arguments=args;
  this.value=mc;
}
 else {
  ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
  amc.instance=this.value;
  amc.arguments=args;
  this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.isInMode(ACCESS_2)) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
  this.field.setValue(this.value);
  pm.popParser(true);
  return;
}
if (this.dotless && this.operator != null) {
  Operator operator=pm.getOperator(name);
  int p=this.operator.precedence;
  if (p > operator.precedence) {
    this.field.setValue(this.value);
    pm.popParser(true);
    return;
  }
  if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
      this.field.setValue(this.value);
    pm.popParser(true);
  return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.isInMode(CONSTRUCTOR)) {
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc2=cc.toClassConstructor();
pm.pushParser(new ClassBodyParser(cc2.getNestedClass()));
this.mode=LIST_END;
this.value=cc2;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
if (this.mode == VALUE) {
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=TUPLE_END;
Tuple tv=new Tuple(token);
this.value=tv;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_PARENTHESIS) {
  pm.pushParser(new ExpressionListParser(tv));
}
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
  pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
  pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
  Bytecode bc=new Bytecode(token);
  pm.skip();
  pm.pushParser(new BytecodeParser(bc));
  this.mode=BYTECODE_END;
  this.value=bc;
  return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
}
if (this.mode == PATTERN_IF) {
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
}
if (this.mode == PATTERN_END) {
if (type == Symbols.COLON) {
this.field.setValue(this.value);
pm.popParser();
if (token.next().type() != Keywords.CASE) {
  pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ARRAY_END) {
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == LIST_END) {
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
  this.mode=ACCESS_2;
  this.dotless=false;
  pm.skip();
  return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == TUPLE_END) {
this.mode=ACCESS | LAMBDA;
if (type == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS) {
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
ICall call=(ICall)this.value;
call.setArguments(this.getArguments(pm,token.next()));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS_END) {
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == CONSTRUCTOR_END) {
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc=((ConstructorCall)this.value).toClassConstructor();
pm.skip();
pm.pushParser(new ClassBodyParser(cc.getNestedClass()));
this.value=cc;
this.mode=LIST_END;
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == FUNCTION_POINTER) {
pm.popParser();
if (ParserUtil.isIdentifier(type)) {
FunctionPointer fl=new FunctionPointer(token.raw(),token.nameValue());
fl.instance=this.value;
this.field.setValue(fl);
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BYTECODE_END) {
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.isInMode(LAMBDA)) {
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression lv=getLambdaValue(this.value);
if (lv != null) {
  lv.expandPosition(token);
  this.field.setValue(lv);
  pm.popParser();
  pm.pushParser(new ExpressionParser(lv));
  return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
}
if (this.isInMode(ACCESS)) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
if (type == Symbols.HASH) {
this.mode=FUNCTION_POINTER;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
  MethodCall mc=new MethodCall(prev,null,prev.nameValue());
  mc.arguments=args;
  this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
  MethodCall mc;
  if (this.value.valueTag() == IValue.FIELD_ACCESS) {
    mc=((FieldAccess)this.value).toMethodCall(null);
  }
 else {
    mc=(MethodCall)this.value;
  }
  mc.arguments=args;
  this.value=mc;
}
 else {
  ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
  amc.instance=this.value;
  amc.arguments=args;
  this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.isInMode(ACCESS_2)) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
  this.field.setValue(this.value);
  pm.popParser(true);
  return;
}
if (this.dotless && this.operator != null) {
  Operator operator=pm.getOperator(name);
  int p;
  if (operator == null || (p=this.operator.precedence) > operator.precedence) {
    this.field.setValue(this.value);
    pm.popParser(true);
    return;
  }
  if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
      this.field.setValue(this.value);
    pm.popParser(true);
  return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.isInMode(CONSTRUCTOR)) {
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc2=cc.toClassConstructor();
pm.pushParser(new ClassBodyParser(cc2.getNestedClass()));
this.mode=LIST_END;
this.value=cc2;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
if (ParserUtil.isTerminator2(type)) {
this.mode=ACCESS;
pm.reparse();
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.9946808510638298
84901,"@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  super.write(writer,instanceFields);
  MethodWriter mw;
  if ((this.methods & APPLY) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(this.applyMethod.getModifiers(),""String_Node_Str"",this.applyMethod.getDescriptor(),this.applyMethod.getSignature(),null));
    mw.begin();
    mw.writeTypeInsn(Opcodes.NEW,this.theClass.getType().getInternalName());
    mw.writeInsn(Opcodes.DUP);
    int len=this.theClass.parameterCount();
    for (int i=0; i < len; i++) {
      IParameter param=this.theClass.getParameter(i);
      param.write(mw);
      mw.writeVarInsn(param.getType().getLoadOpcode(),i);
    }
    this.constructor.writeInvoke(mw);
    mw.writeInsn(Opcodes.ARETURN);
    mw.end(this.theClass.getType());
  }
  String internal=this.theClass.getInternalName();
  if ((this.methods & EQUALS) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.registerParameter(0,""String_Node_Str"",Types.OBJECT,0);
    mw.begin();
    CaseClasses.writeEquals(mw,this.theClass);
    mw.end();
  }
  if ((this.methods & HASHCODE) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.begin();
    CaseClasses.writeHashCode(mw,this.theClass);
    mw.end();
  }
  if ((this.methods & TOSTRING) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.begin();
    CaseClasses.writeToString(mw,this.theClass);
    mw.end();
  }
}","@Override public void write(ClassWriter writer,IValue instanceFields) throws BytecodeException {
  super.write(writer,instanceFields);
  MethodWriter mw;
  if ((this.methods & APPLY) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(this.applyMethod.getModifiers(),""String_Node_Str"",this.applyMethod.getDescriptor(),this.applyMethod.getSignature(),null));
    mw.begin();
    mw.writeTypeInsn(Opcodes.NEW,this.theClass.getType().getInternalName());
    mw.writeInsn(Opcodes.DUP);
    int len=this.theClass.parameterCount();
    for (int i=0; i < len; i++) {
      IParameter param=this.theClass.getParameter(i);
      param.write(mw);
      mw.writeVarInsn(param.getType().getLoadOpcode(),i);
    }
    this.constructor.writeInvoke(mw);
    mw.writeInsn(Opcodes.ARETURN);
    mw.end(this.theClass.getType());
  }
  String internal=this.theClass.getInternalName();
  if ((this.methods & EQUALS) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.registerParameter(1,""String_Node_Str"",Types.OBJECT,0);
    mw.begin();
    CaseClasses.writeEquals(mw,this.theClass);
    mw.end();
  }
  if ((this.methods & HASHCODE) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.begin();
    CaseClasses.writeHashCode(mw,this.theClass);
    mw.end();
  }
  if ((this.methods & TOSTRING) == 0) {
    mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.PUBLIC | Modifiers.SYNTHETIC,""String_Node_Str"",""String_Node_Str"",null,null));
    mw.setThisType(internal);
    mw.begin();
    CaseClasses.writeToString(mw,this.theClass);
    mw.end();
  }
}",0.9994505494505496
84902,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label conditionLabel=this.conditionLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeLabel(startLabel);
  this.action.writeStatement(writer);
  writer.writeLabel(conditionLabel);
  this.condition.writeJump(writer,startLabel);
  writer.writeLabel(endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label conditionLabel=this.conditionLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeTargetLabel(startLabel);
  this.action.writeStatement(writer);
  writer.writeLabel(conditionLabel);
  this.condition.writeJump(writer,startLabel);
  writer.writeLabel(endLabel);
}",0.9952229299363056
84903,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Statements.doStart);
  if (this.action != null) {
    if (this.action.isStatement()) {
      buffer.append('\n').append(prefix);
      this.action.toString(prefix,buffer);
      buffer.append('\n').append(prefix);
    }
 else {
      buffer.append(' ');
      this.action.toString(prefix,buffer);
      buffer.append(' ');
    }
  }
  buffer.append(Formatting.Statements.doWhile);
  if (this.condition != null) {
    this.condition.toString(prefix,buffer);
  }
  buffer.append(Formatting.Statements.doEnd);
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Statements.doStart);
  if (this.action != null) {
    buffer.append(' ');
    this.action.toString(prefix,buffer);
    buffer.append(' ');
  }
  buffer.append(Formatting.Statements.doWhile);
  if (this.condition != null) {
    this.condition.toString(prefix,buffer);
  }
  buffer.append(Formatting.Statements.doEnd);
}",0.5570866141732284
84904,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeLabel(startLabel);
  this.condition.writeInvJump(writer,endLabel);
  this.action.writeStatement(writer);
  writer.writeJumpInsn(Opcodes.GOTO,startLabel);
  writer.writeLabel(endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  if (this.action == null) {
    this.condition.writeStatement(writer);
  }
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  writer.writeTargetLabel(startLabel);
  this.condition.writeInvJump(writer,endLabel);
  this.action.writeStatement(writer);
  writer.writeJumpInsn(Opcodes.GOTO,startLabel);
  writer.writeLabel(endLabel);
}",0.9944649446494463
84905,"public static void compile(File file,IClassCompilable iclass){
  FileUtils.createFile(file);
  try (OutputStream os=new BufferedOutputStream(new FileOutputStream(file))){
    ClassWriter writer=new ClassWriter();
    iclass.write(writer);
    writer.visitEnd();
    byte[] bytes=writer.toByteArray();
    os.write(bytes,0,bytes.length);
  }
 catch (  Throwable ex) {
    DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
  }
}","public static void compile(File file,IClassCompilable iclass){
  FileUtils.createFile(file);
  try (OutputStream os=new BufferedOutputStream(new FileOutputStream(file))){
    ClassWriter writer=new ClassWriter();
    iclass.write(writer);
    writer.visitEnd();
    byte[] bytes=writer.toByteArray();
    os.write(bytes,0,bytes.length);
  }
 catch (  Throwable ex) {
    DyvilCompiler.logger.warning(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
  }
}",0.9021190716448032
84906,"public void visitVarInsn(int opcode,int index) throws BytecodeException {
switch (opcode) {
case ILOAD:
    this.push(INT);
  return;
case LLOAD:
this.push(LONG);
return;
case FLOAD:
this.push(FLOAT);
return;
case DLOAD:
this.push(DOUBLE);
return;
case ALOAD:
this.push(this.locals[index]);
return;
case ISTORE:
this.setLocal(index,INT);
this.pop();
return;
case LSTORE:
this.setLocal(index,LONG);
this.pop();
return;
case FSTORE:
this.setLocal(index,FLOAT);
this.pop();
return;
case DSTORE:
this.setLocal(index,DOUBLE);
this.pop();
return;
case ASTORE:
if (index > this.localCount) {
this.setLocal(index,this.stack[this.stackCount - 1]);
}
this.pop();
return;
}
}","public void visitVarInsn(int opcode,int index) throws BytecodeException {
switch (opcode) {
case ILOAD:
    this.push(INT);
  return;
case LLOAD:
this.push(LONG);
return;
case FLOAD:
this.push(FLOAT);
return;
case DLOAD:
this.push(DOUBLE);
return;
case ALOAD:
this.push(this.locals[index]);
return;
case ISTORE:
this.setLocal(index,INT);
this.pop();
return;
case LSTORE:
this.setLocal(index,LONG);
this.pop();
return;
case FSTORE:
this.setLocal(index,FLOAT);
this.pop();
return;
case DSTORE:
this.setLocal(index,DOUBLE);
this.pop();
return;
case ASTORE:
if (index >= this.localCount) {
this.setLocal(index,this.peek());
}
this.pop();
return;
}
}",0.9763177998472116
84907,"public static Object fieldType(String desc){
  char c=desc.charAt(0);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc;
case 'L':
return desc.substring(1,desc.length() - 1);
default :
return null;
}
}","public static Object fieldType(String desc){
  char c=desc.charAt(0);
switch (c) {
case 'V':
    return null;
case 'Z':
  return ClassFormat.BOOLEAN;
case 'B':
return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc;
case 'L':
return desc.substring(1,desc.length() - 1);
default :
return null;
}
}",0.950207468879668
84908,"public static Object returnType(String desc){
  int index=desc.lastIndexOf(')') + 1;
  char c=desc.charAt(index);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc.substring(index);
case 'L':
return desc.substring(index + 1,desc.length() - 1);
default :
return null;
}
}","public static Object returnType(String desc){
  int index=desc.lastIndexOf(')') + 1;
  char c=desc.charAt(index);
switch (c) {
case 'V':
    return null;
case 'Z':
  return ClassFormat.BOOLEAN;
case 'B':
return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc.substring(index);
case 'L':
return desc.substring(index + 1,desc.length() - 1);
default :
return null;
}
}",0.956442831215971
84909,"public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount];
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}","public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount];
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}",0.9812522975125596
84910,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
switch (this.type) {
case DEFAULT:
{
      int locals=writer.localCount();
      if (var != null) {
        var.writeInit(writer,var.value);
      }
      writer.writeTargetLabel(startLabel);
      if (this.condition != null) {
        this.condition.writeInvJump(writer,endLabel);
      }
      if (this.then != null) {
        this.then.writeStatement(writer);
      }
      writer.writeLabel(updateLabel);
      if (this.update != null) {
        this.update.writeStatement(writer);
      }
      writer.writeJumpInsn(Opcodes.GOTO,startLabel);
      writer.resetLocals(locals);
      writer.writeLabel(endLabel);
      if (var != null) {
        var.writeLocal(writer,startLabel,endLabel);
      }
      return;
    }
case ARRAY:
{
    Variable arrayVar=this.var3;
    Variable indexVar=this.var1;
    Variable lengthVar=this.var2;
    org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
    writer.writeLabel(scopeLabel);
    var.value.writeExpression(writer);
    int locals=writer.localCount();
    var.index=locals + 1;
    indexVar.index=locals + 2;
    lengthVar.index=locals + 3;
    arrayVar.index=locals + 4;
    writer.writeInsn(Opcodes.DUP);
    arrayVar.writeSet(writer,null,null);
    writer.writeInsn(Opcodes.ARRAYLENGTH);
    lengthVar.writeSet(writer,null,null);
    writer.writeLDC(0);
    indexVar.writeSet(writer,null,null);
    writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
    writer.writeTargetLabel(startLabel);
    arrayVar.writeGet(writer,null);
    indexVar.writeGet(writer,null);
    writer.writeInsn(arrayVar.type.getArrayLoadOpcode());
    var.writeSet(writer,null,null);
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.writeIINC(indexVar.index,1);
    writer.writeLabel(updateLabel);
    indexVar.writeGet(writer,null);
    lengthVar.writeGet(writer,null);
    writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
    writer.resetLocals(locals);
    writer.writeLabel(endLabel);
    var.writeLocal(writer,scopeLabel,endLabel);
    indexVar.writeLocal(writer,scopeLabel,endLabel);
    lengthVar.writeLocal(writer,scopeLabel,endLabel);
    arrayVar.writeLocal(writer,scopeLabel,endLabel);
    return;
  }
case ITERATOR:
{
  Variable iteratorVar=this.var1;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  int locals=writer.localCount();
  var.index=locals;
  iteratorVar.index=locals + 1;
  writer.writeVarInsn(Opcodes.ASTORE,iteratorVar.index);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  if (!var.type.equals(Types.OBJECT)) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,var.type.getInternalName());
  }
  writer.writeVarInsn(Opcodes.ASTORE,var.index);
  if (this.then != null) {
    this.then.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  writer.writeJumpInsn(Opcodes.IFNE,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}
}
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
switch (this.type) {
case DEFAULT:
{
      int locals=writer.localCount();
      if (var != null) {
        var.writeInit(writer,var.value);
      }
      writer.writeTargetLabel(startLabel);
      if (this.condition != null) {
        this.condition.writeInvJump(writer,endLabel);
      }
      if (this.then != null) {
        this.then.writeStatement(writer);
      }
      writer.writeLabel(updateLabel);
      if (this.update != null) {
        this.update.writeStatement(writer);
      }
      writer.writeJumpInsn(Opcodes.GOTO,startLabel);
      writer.resetLocals(locals);
      writer.writeLabel(endLabel);
      if (var != null) {
        var.writeLocal(writer,startLabel,endLabel);
      }
      return;
    }
case ARRAY:
{
    Variable arrayVar=this.var3;
    Variable indexVar=this.var1;
    Variable lengthVar=this.var2;
    org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
    writer.writeLabel(scopeLabel);
    var.value.writeExpression(writer);
    int locals=writer.localCount();
    writer.writeInsn(Opcodes.DUP);
    arrayVar.writeInit(writer,null);
    writer.writeInsn(Opcodes.ARRAYLENGTH);
    lengthVar.writeInit(writer,null);
    writer.writeLDC(0);
    indexVar.writeInit(writer,null);
    writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
    writer.writeTargetLabel(startLabel);
    arrayVar.writeGet(writer,null);
    indexVar.writeGet(writer,null);
    writer.writeInsn(var.type.getArrayLoadOpcode());
    var.writeInit(writer,null);
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.writeIINC(indexVar.index,1);
    writer.writeLabel(updateLabel);
    indexVar.writeGet(writer,null);
    lengthVar.writeGet(writer,null);
    writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
    writer.resetLocals(locals);
    writer.writeLabel(endLabel);
    var.writeLocal(writer,scopeLabel,endLabel);
    indexVar.writeLocal(writer,scopeLabel,endLabel);
    lengthVar.writeLocal(writer,scopeLabel,endLabel);
    arrayVar.writeLocal(writer,scopeLabel,endLabel);
    return;
  }
case ITERATOR:
{
  Variable iteratorVar=this.var1;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  int locals=writer.localCount();
  var.index=locals;
  iteratorVar.index=locals + 1;
  writer.writeVarInsn(Opcodes.ASTORE,iteratorVar.index);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  if (!var.type.equals(Types.OBJECT)) {
    writer.writeTypeInsn(Opcodes.CHECKCAST,var.type.getInternalName());
  }
  writer.writeVarInsn(Opcodes.ASTORE,var.index);
  if (this.then != null) {
    this.then.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
  writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
  writer.writeJumpInsn(Opcodes.IFNE,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}
}
}",0.9663680041553044
84911,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  if (this.type != 0) {
    IType varType=this.variable.type;
    IValue value=this.variable.value;
    this.variable.value=value.resolve(markers,context);
    IType valueType=value.getType();
    int arrayDims=valueType.getArrayDimensions();
    if (arrayDims != 0) {
      this.type=ARRAY;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=valueType.getElementType();
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!valueType.classEquals(varType) || varType.getArrayDimensions() != arrayDims - 1) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$array;
      this.var3=var;
    }
 else     if (ITERABLE.isSuperTypeOf(valueType)) {
      this.type=ITERATOR;
      IType iterableType=valueType.resolveType(ITERABLE_TYPE);
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=iterableType;
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.isSuperTypeOf(iterableType)) {
        Marker m=markers.create(value.getPosition(),""String_Node_Str"");
        m.addInfo(""String_Node_Str"" + iterableType);
        m.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=valueType;
      var.name=$iterator;
      this.var1=var;
    }
  }
 else {
    if (this.variable != null) {
      this.variable.resolve(markers,context);
    }
    if (this.condition != null) {
      this.condition=this.condition.resolve(markers,this);
    }
    if (this.update != null) {
      this.update=this.update.resolve(markers,this);
    }
  }
  if (this.then != null) {
    this.then=this.then.resolve(markers,this);
  }
  this.context=null;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  if (this.type != 0) {
    IType varType=this.variable.type;
    IValue value=this.variable.value;
    this.variable.value=value.resolve(markers,context);
    IType valueType=value.getType();
    if (valueType.isArrayType()) {
      this.type=ARRAY;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=valueType.getElementType();
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.classEquals(valueType.getElementType())) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$array;
      this.var3=var;
    }
 else     if (ITERABLE.isSuperTypeOf(valueType)) {
      this.type=ITERATOR;
      IType iterableType=valueType.resolveType(ITERABLE_TYPE);
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=iterableType;
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.isSuperTypeOf(iterableType)) {
        Marker m=markers.create(value.getPosition(),""String_Node_Str"");
        m.addInfo(""String_Node_Str"" + iterableType);
        m.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=valueType;
      var.name=$iterator;
      this.var1=var;
    }
  }
 else {
    if (this.variable != null) {
      this.variable.resolve(markers,context);
    }
    if (this.condition != null) {
      this.condition=this.condition.resolve(markers,this);
    }
    if (this.update != null) {
      this.update=this.update.resolve(markers,this);
    }
  }
  if (this.then != null) {
    this.then=this.then.resolve(markers,this);
  }
  this.context=null;
  return this;
}",0.9691292314243134
84912,"public static Object fieldType(String desc){
  char c=desc.charAt(0);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case 'L':
return desc.substring(1,desc.length() - 1);
default :
return null;
}
}","public static Object fieldType(String desc){
  char c=desc.charAt(0);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc;
case 'L':
return desc.substring(1,desc.length() - 1);
default :
return null;
}
}",0.97452934662237
84913,"public static Object returnType(String desc){
  int index=desc.lastIndexOf(')') + 1;
  char c=desc.charAt(index);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case 'L':
return desc.substring(index + 1,desc.length() - 1);
default :
return null;
}
}","public static Object returnType(String desc){
  int index=desc.lastIndexOf(')') + 1;
  char c=desc.charAt(index);
switch (c) {
case 'V':
    return null;
case 'B':
  return ClassFormat.BYTE;
case 'S':
return ClassFormat.SHORT;
case 'C':
return ClassFormat.CHAR;
case 'I':
return ClassFormat.INT;
case 'J':
return ClassFormat.LONG;
case 'F':
return ClassFormat.FLOAT;
case 'D':
return ClassFormat.DOUBLE;
case '[':
return desc.substring(index);
case 'L':
return desc.substring(index + 1,desc.length() - 1);
default :
return null;
}
}",0.9609375
84914,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == FOR) {
    this.mode=TYPE;
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == TYPE) {
    if (type == Symbols.SEMICOLON) {
      pm.pushParser(new ExpressionParser(this));
      this.mode=CONDITION_END;
      return;
    }
    pm.pushParser(new TypeParser(this.forStatement),true);
    this.mode=VARIABLE;
    return;
  }
  if (this.mode == VARIABLE) {
    this.mode=SEPERATOR;
    if (ParserUtil.isIdentifier(type)) {
      this.forStatement.variable.setName(token.nameValue());
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == SEPERATOR) {
    if (type == Symbols.COLON) {
      this.mode=FOR_END;
      this.forStatement.type=3;
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    this.mode=VARIABLE_END;
    if (type == Symbols.EQUALS) {
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == VARIABLE_END) {
    this.mode=CONDITION_END;
    if (type == Symbols.SEMICOLON) {
      if (token.next().type() == Symbols.SEMICOLON) {
        return;
      }
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CONDITION_END) {
    this.mode=FOR_END;
    if (type == Symbols.SEMICOLON) {
      if (token.next().type() == Symbols.SEMICOLON) {
        return;
      }
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == FOR_END) {
    this.mode=STATEMENT;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == STATEMENT) {
    if (ParserUtil.isTerminator(type) && !token.isInferred()) {
      pm.popParser(true);
      return;
    }
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=STATEMENT_END;
    return;
  }
  if (this.mode == STATEMENT_END) {
    pm.popParser(true);
    return;
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == FOR) {
    this.mode=TYPE;
    if (type == Symbols.OPEN_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == TYPE) {
    if (type == Symbols.SEMICOLON) {
      pm.pushParser(new ExpressionParser(this));
      this.mode=CONDITION_END;
      return;
    }
    pm.pushParser(new TypeParser(this.forStatement),true);
    this.mode=VARIABLE;
    return;
  }
  if (this.mode == VARIABLE) {
    this.mode=SEPERATOR;
    if (ParserUtil.isIdentifier(type)) {
      this.forStatement.variable.setName(token.nameValue());
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == SEPERATOR) {
    if (type == Symbols.COLON) {
      this.mode=FOR_END;
      this.forStatement.type=-1;
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    this.mode=VARIABLE_END;
    if (type == Symbols.EQUALS) {
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == VARIABLE_END) {
    this.mode=CONDITION_END;
    if (type == Symbols.SEMICOLON) {
      if (token.next().type() == Symbols.SEMICOLON) {
        return;
      }
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == CONDITION_END) {
    this.mode=FOR_END;
    if (type == Symbols.SEMICOLON) {
      if (token.next().type() == Symbols.SEMICOLON) {
        return;
      }
      pm.pushParser(new ExpressionParser(this));
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == FOR_END) {
    this.mode=STATEMENT;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == STATEMENT) {
    if (ParserUtil.isTerminator(type) && !token.isInferred()) {
      pm.popParser(true);
      return;
    }
    pm.pushParser(new ExpressionParser(this),true);
    this.mode=STATEMENT_END;
    return;
  }
  if (this.mode == STATEMENT_END) {
    pm.popParser(true);
    return;
  }
}",0.9993399339933994
84915,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      TupleType tupleType=new TupleType();
      pm.pushParser(new TypeListParser(tupleType));
      this.type=tupleType;
      this.mode=TUPLE_END;
      return;
    }
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      this.mode=ARRAY_END;
      ArrayType at=new ArrayType();
      this.type=at;
      pm.pushParser(new TypeParser(at));
      return;
    }
    if (type == Symbols.ARROW_OPERATOR) {
      LambdaType lt=new LambdaType();
      this.type=lt;
      pm.pushParser(new TypeParser(lt));
      this.mode=LAMBDA_END;
      return;
    }
    if (type == Keywords.VAR) {
      this.type=Types.UNKNOWN;
      this.mode=ARRAY_END;
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      if (token.next().type() == Symbols.OPEN_SQUARE_BRACKET) {
        this.type=new GenericType(token,token.nameValue());
        this.mode=GENERICS;
        return;
      }
      this.type=new Type(token.raw(),token.nameValue());
      this.typed.setType(this.type);
      pm.popParser();
      return;
    }
    if (type == Symbols.WILDCARD) {
      this.type=new WildcardType(token.raw());
      this.mode=WILDCARD_TYPE;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      pm.popParser(true);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token);
  }
  if (this.mode == TUPLE_END) {
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_PARENTHESIS) {
      if (token.next().type() == Symbols.ARROW_OPERATOR) {
        TupleType tupleType=(TupleType)this.type;
        this.type=new LambdaType(tupleType);
        this.mode=LAMBDA_TYPE;
        return;
      }
      this.type.expandPosition(token);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == LAMBDA_TYPE) {
    pm.pushParser(new TypeParser((LambdaType)this.type));
    this.mode=LAMBDA_END;
    return;
  }
  if (this.mode == LAMBDA_END) {
    this.type.expandPosition(token.prev());
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == ARRAY_END) {
    this.type.expandPosition(token);
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == GENERICS) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeListParser((GenericType)this.type));
      this.mode=GENERICS_END;
      return;
    }
    this.type.expandPosition(token.prev());
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == WILDCARD_TYPE) {
    Name name=token.nameValue();
    if (this.boundMode == 0) {
      if (name == Name.lteq) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=LOWER;
        return;
      }
      if (name == Name.gteq) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=UPPER;
        return;
      }
    }
 else     if (this.boundMode == UPPER) {
      if (name == Name.amp) {
        pm.pushParser(new TypeParser(this));
        return;
      }
    }
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == GENERICS_END) {
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == NAME) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      TupleType tupleType=new TupleType();
      pm.pushParser(new TypeListParser(tupleType));
      this.type=tupleType;
      this.mode=TUPLE_END;
      return;
    }
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      this.mode=ARRAY_END;
      ArrayType at=new ArrayType();
      this.type=at;
      pm.pushParser(new TypeParser(at));
      return;
    }
    if (type == Symbols.ARROW_OPERATOR) {
      LambdaType lt=new LambdaType();
      this.type=lt;
      pm.pushParser(new TypeParser(lt));
      this.mode=LAMBDA_END;
      return;
    }
    if (type == Keywords.VAR) {
      this.typed.setType(Types.UNKNOWN);
      pm.popParser();
      return;
    }
    if (ParserUtil.isIdentifier(type)) {
      if (token.next().type() == Symbols.OPEN_SQUARE_BRACKET) {
        this.type=new GenericType(token,token.nameValue());
        this.mode=GENERICS;
        return;
      }
      this.type=new Type(token.raw(),token.nameValue());
      this.typed.setType(this.type);
      pm.popParser();
      return;
    }
    if (type == Symbols.WILDCARD) {
      this.type=new WildcardType(token.raw());
      this.mode=WILDCARD_TYPE;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      pm.popParser(true);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"" + token);
  }
  if (this.mode == TUPLE_END) {
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_PARENTHESIS) {
      if (token.next().type() == Symbols.ARROW_OPERATOR) {
        TupleType tupleType=(TupleType)this.type;
        this.type=new LambdaType(tupleType);
        this.mode=LAMBDA_TYPE;
        return;
      }
      this.type.expandPosition(token);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == LAMBDA_TYPE) {
    pm.pushParser(new TypeParser((LambdaType)this.type));
    this.mode=LAMBDA_END;
    return;
  }
  if (this.mode == LAMBDA_END) {
    this.type.expandPosition(token.prev());
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == ARRAY_END) {
    this.type.expandPosition(token);
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.mode == GENERICS) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeListParser((GenericType)this.type));
      this.mode=GENERICS_END;
      return;
    }
    this.type.expandPosition(token.prev());
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == WILDCARD_TYPE) {
    Name name=token.nameValue();
    if (this.boundMode == 0) {
      if (name == Name.lteq) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=LOWER;
        return;
      }
      if (name == Name.gteq) {
        pm.pushParser(new TypeParser(this));
        this.boundMode=UPPER;
        return;
      }
    }
 else     if (this.boundMode == UPPER) {
      if (name == Name.amp) {
        pm.pushParser(new TypeParser(this));
        return;
      }
    }
    this.typed.setType(this.type);
    pm.popParser(true);
    return;
  }
  if (this.mode == GENERICS_END) {
    this.typed.setType(this.type);
    pm.popParser();
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
}",0.9915053613702828
84916,"public static void compile(File file,IClassCompilable iclass){
  FileUtils.createFile(file);
  try (OutputStream os=new BufferedOutputStream(new FileOutputStream(file))){
    ClassWriter writer=new ClassWriter();
    iclass.write(writer);
    writer.visitEnd();
    byte[] bytes=writer.toByteArray();
    os.write(bytes,0,bytes.length);
  }
 catch (  Throwable ex) {
    DyvilCompiler.logger.warning(""String_Node_Str"" + file + ""String_Node_Str""+ ex.getMessage());
    DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
  }
}","public static void compile(File file,IClassCompilable iclass){
  byte[] bytes;
  try {
    ClassWriter writer=new ClassWriter();
    iclass.write(writer);
    writer.visitEnd();
    bytes=writer.toByteArray();
  }
 catch (  Throwable ex) {
    DyvilCompiler.logger.warning(""String_Node_Str"" + file + ""String_Node_Str""+ ex);
    DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
    return;
  }
  FileUtils.createFile(file);
  try (OutputStream os=new BufferedOutputStream(new FileOutputStream(file))){
    os.write(bytes,0,bytes.length);
  }
 catch (  IOException ex) {
    DyvilCompiler.logger.warning(""String_Node_Str"" + file + ""String_Node_Str""+ ex);
    DyvilCompiler.logger.throwing(""String_Node_Str"",""String_Node_Str"",ex);
  }
}",0.3618167821401077
84917,"public void visitFrame(MethodVisitor mv){
  int locals=this.localCount;
  while (locals > 0 && this.locals[locals - 1] == TOP) {
    locals--;
  }
  int stack=this.stackCount;
  while (stack > 0 && this.stack[stack - 1] == TOP) {
    stack--;
  }
  mv.visitFrame(org.objectweb.asm.Opcodes.F_NEW,locals,this.locals,stack,this.stack);
}","public void visitFrame(MethodVisitor mv){
  Object[] locals=new Object[this.localCount];
  int localIndex=0;
  for (int i=0; i < this.localCount; i++) {
    Object o=this.locals[i];
    locals[localIndex++]=o;
    if (o == LONG || o == DOUBLE) {
      i++;
    }
  }
  int stack=this.stackCount;
  while (stack > 0 && this.stack[stack - 1] == TOP) {
    stack--;
  }
  mv.visitFrame(org.objectweb.asm.Opcodes.F_NEW,localIndex,locals,stack,this.stack);
}",0.6836086404066074
84918,"public Object popAndGet() throws StackUnderflowException {
  Object o1=this.stack[--this.stackCount];
  if (o1 == TOP) {
    Object o=this.stack[this.stackCount - 1];
    if (o == LONG || o == DOUBLE) {
      --this.stackCount;
      return o;
    }
  }
  return o1;
}","public Object popAndGet() throws StackUnderflowException {
  Object o=this.stack[--this.stackCount];
  if (o == LONG || o == DOUBLE) {
    this.actualStackCount-=2;
  }
 else {
    this.actualStackCount--;
  }
  return o;
}",0.6883910386965377
84919,"public void push(Object type){
  if (type == LONG || type == DOUBLE) {
    this.ensureStack(this.stackCount + 2);
    this.stack[this.stackCount++]=type;
    this.stack[this.stackCount++]=TOP;
    return;
  }
  this.ensureStack(this.stackCount + 1);
  this.stack[this.stackCount++]=type;
}","public void push(Object type){
  if (type == LONG || type == DOUBLE) {
    this.actualStackCount+=2;
  }
 else {
    this.actualStackCount++;
  }
  this.ensureStack(this.stackCount + 1);
  this.stack[this.stackCount++]=type;
}",0.6679611650485436
84920,"public Object peek(){
  Object o=this.stack[this.stackCount - 1];
  if (o == TOP) {
    Object o1=this.stack[this.stackCount - 2];
    if (o1 == LONG || o1 == DOUBLE) {
      return o1;
    }
  }
  return o;
}","public Object peek(){
  return this.stack[this.stackCount - 1];
}",0.4452554744525547
84921,"public void pop() throws StackUnderflowException {
  if (this.stack[--this.stackCount] == TOP) {
    Object o=this.stack[this.stackCount - 1];
    if (o == LONG || o == DOUBLE) {
      --this.stackCount;
    }
  }
}","public void pop() throws StackUnderflowException {
  Object o=this.stack[--this.stackCount];
  if (o == LONG || o == DOUBLE) {
    this.actualStackCount-=2;
  }
 else {
    this.actualStackCount--;
  }
}",0.7129186602870813
84922,"private void ensureStack(int count){
  if (count > this.stack.length) {
    Object[] newLocals=new Object[count];
    System.arraycopy(this.stack,0,newLocals,0,this.stack.length);
    this.stack=newLocals;
  }
  if (count > this.maxStack) {
    this.maxStack=count;
  }
}","private void ensureStack(int count){
  if (count > this.stack.length) {
    Object[] newLocals=new Object[count];
    System.arraycopy(this.stack,0,newLocals,0,this.stack.length);
    this.stack=newLocals;
  }
  if (this.actualStackCount > this.maxStack) {
    this.maxStack=this.actualStackCount;
  }
}",0.9372822299651568
84923,"public Frame copy(){
  Frame copy=new Frame(this.stackCount,this.stack,this.localCount,this.locals);
  copy.maxLocals=this.maxLocals;
  copy.maxStack=this.maxStack;
  return copy;
}","public Frame copy(){
  Frame copy=new Frame(this.stackCount,this.stack,this.localCount,this.locals);
  copy.maxLocals=this.maxLocals;
  copy.maxStack=this.maxStack;
  copy.actualStackCount=this.actualStackCount;
  return copy;
}",0.8850855745721271
84924,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.COLON) {
      this.label=token.nameValue();
      pm.skip();
      return;
    }
    this.firstToken=token;
    this.parser=this.typeParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type == null) {
        this.typeParser.end();
      }
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.typeParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=EXPRESSION;
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    if (this.firstToken != null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=0;
      return;
    }
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.COLON) {
      this.label=token.nameValue();
      pm.skip();
      return;
    }
    this.firstToken=token;
    this.parser=this.typeParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type == null) {
        this.typeParser.end();
      }
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.typeParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    this.mode=EXPRESSION;
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.9345887016848364
84925,"private boolean writeIINC(MethodWriter writer,IField f) throws BytecodeException {
  if (this.arguments.size() == 1 && f.getType() == Types.INT && f.isVariable()) {
    boolean minus=false;
    if (this.name == Name.plus || (minus=this.name == Name.minus)) {
      IValue value1=this.arguments.getFirstValue();
      if (IValue.isNumeric(value1.valueTag())) {
        int count=((INumericValue)value1).intValue();
        writer.writeIINC(((IVariable)f).getIndex(),minus ? -count : count);
        return true;
      }
    }
  }
  return false;
}","private boolean writeIINC(MethodWriter writer,IField f) throws BytecodeException {
  if (this.arguments.size() == 1 && f.getType() == Types.INT && f.isVariable()) {
    if (((IVariable)f).isCaptureType()) {
      return false;
    }
    boolean minus=false;
    if (this.name == Name.plus || (minus=this.name == Name.minus)) {
      IValue value1=this.arguments.getFirstValue();
      if (IValue.isNumeric(value1.valueTag())) {
        int count=((INumericValue)value1).intValue();
        writer.writeIINC(((IVariable)f).getIndex(),minus ? -count : count);
        return true;
      }
    }
  }
  return false;
}",0.9413793103448276
84926,"public IType getCaptureType(){
  return this.refType != null ? this.refType : this.variable.getType();
}","@Override public IType getCaptureType(boolean init){
  return this.refType != null ? this.refType : this.variable.getCaptureType(init);
}",0.8630705394190872
84927,"@Override public void check(MarkerList markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
  super.check(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].check(markers,context);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    IType t=this.exceptions[i];
    if (!Types.THROWABLE.isSuperTypeOf(t)) {
      Marker m=markers.create(t.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + t);
    }
  }
  if (this.value != null) {
    this.value.check(markers,this);
  }
 else   if (this.isStatic()) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0 && !this.theClass.isAbstract()) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
}","@Override public void check(MarkerList markers,IContext context){
  if ((this.modifiers & Modifiers.STATIC) == 0) {
    this.checkOverride(markers,context);
  }
  super.check(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].check(markers,context);
  }
  for (int i=0; i < this.exceptionCount; i++) {
    IType t=this.exceptions[i];
    if (!Types.THROWABLE.isSuperTypeOf(t)) {
      Marker m=markers.create(t.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + t);
    }
  }
  if (this.value != null) {
    this.value.check(markers,this);
  }
 else   if (this.isStatic()) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
 else   if ((this.modifiers & Modifiers.ABSTRACT) == 0 && !this.theClass.isAbstract()) {
    markers.add(this.position,""String_Node_Str"",this.name);
  }
  String desc=this.getDescriptor();
  IClassBody body=this.theClass.getBody();
  for (int i=body.methodCount() - 1; i >= 0; i--) {
    IMethod m=body.getMethod(i);
    if (m != this && m.getName() == this.name) {
      if (m.getDescriptor().equals(desc)) {
        markers.add(this.position,""String_Node_Str"",this.name,desc);
      }
    }
  }
}",0.8317025440313112
84928,"@Override public boolean isType(IType type){
  return type == Types.VOID || type == Types.UNKNOWN;
}","@Override public boolean isType(IType type){
  return type == Types.VOID;
}",0.8571428571428571
84929,"@Override public IValue withType(IType type){
  return type == Types.VOID || type == Types.UNKNOWN ? this : null;
}","@Override public IValue withType(IType type){
  return type == Types.VOID ? this : null;
}",0.8780487804878049
84930,"@Override public void checkTypes(MarkerList markers,IContext context){
  this.left.checkTypes(markers,context);
  this.right.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  this.left.checkTypes(markers,context);
  this.right.checkTypes(markers,context);
  IType type1=this.left.getType();
  IType type2=this.right.getType();
  if (!type1.equals(type2)) {
    Marker m=markers.create(this.position,""String_Node_Str"");
    m.addInfo(""String_Node_Str"" + type1);
    m.addInfo(""String_Node_Str"" + type2);
  }
}",0.5525846702317291
84931,"@Override public IField resolveField(Name name){
  if (this.variable != null && this.variable.getName() == name) {
    return this.variable;
  }
switch (this.type) {
case ARRAY:
    if (name == $index) {
      return this.var1;
    }
  if (name == $length) {
    return this.var2;
  }
if (name == $array) {
  return this.var3;
}
break;
case STRING:
if (name == $index) {
return this.var1;
}
if (name == $length) {
return this.var2;
}
if (name == $string) {
return this.var3;
}
break;
case ITERATOR:
if (name == $iterator) {
return this.var1;
}
break;
}
if (this.type == ARRAY) {
}
return this.context.resolveField(name);
}","@Override public IField resolveField(Name name){
  if (this.variable != null && this.variable.getName() == name) {
    return this.variable;
  }
switch (this.type) {
case ARRAY:
    if (name == $index) {
      return this.var1;
    }
  if (name == $length) {
    return this.var2;
  }
if (name == $array) {
  return this.var3;
}
break;
case STRING:
if (name == $index) {
return this.var1;
}
if (name == $length) {
return this.var2;
}
if (name == $string) {
return this.var3;
}
break;
case ITERATOR:
if (name == $iterator) {
return this.var1;
}
break;
}
return this.context.resolveField(name);
}",0.9769736842105264
84932,"public static IMethod resolveMethod(IContext context,IValue instance,Name name,IArguments arguments){
  List<MethodMatch> matches=new ArrayList();
  if (instance != null) {
    IType type=instance.getType();
    if (type != null) {
      type.getMethodMatches(matches,instance,name,arguments);
      if (!matches.isEmpty()) {
        return IContext.getBestMethod(matches);
      }
    }
  }
 else   if (arguments.size() == 1) {
    IValue v=arguments.getFirstValue();
    IType type=v.getType();
    if (type != null) {
      type.getMethodMatches(matches,instance,name,EmptyArguments.INSTANCE);
      if (!matches.isEmpty()) {
        return IContext.getBestMethod(matches);
      }
    }
  }
  context.getMethodMatches(matches,instance,name,arguments);
  if (!matches.isEmpty()) {
    return IContext.getBestMethod(matches);
  }
  Types.PREDEF_CLASS.getMethodMatches(matches,instance,name,arguments);
  if (!matches.isEmpty()) {
    return IContext.getBestMethod(matches);
  }
  return null;
}","public static IMethod resolveMethod(IContext context,IValue instance,Name name,IArguments arguments){
  List<MethodMatch> matches=new ArrayList();
  if (instance != null) {
    IType type=instance.getType();
    if (type != null) {
      type.getMethodMatches(matches,instance,name,arguments);
      if (!matches.isEmpty()) {
        return IContext.getBestMethod(matches);
      }
    }
  }
  context.getMethodMatches(matches,instance,name,arguments);
  if (!matches.isEmpty()) {
    return IContext.getBestMethod(matches);
  }
  Types.PREDEF_CLASS.getMethodMatches(matches,instance,name,arguments);
  if (!matches.isEmpty()) {
    return IContext.getBestMethod(matches);
  }
  if (instance == null && arguments.size() == 1) {
    IValue v=arguments.getFirstValue();
    IType type=v.getType();
    if (type != null) {
      type.getMethodMatches(matches,instance,name,EmptyArguments.INSTANCE);
      if (!matches.isEmpty()) {
        return IContext.getBestMethod(matches);
      }
    }
  }
  return null;
}",0.6779661016949152
84933,"@Override public IType getType(){
  if (this.valueCount == 0) {
    return Types.VOID;
  }
  if (this.requiredType != null) {
    return this.requiredType;
  }
  int len=this.valueCount;
  if (len == 0) {
    this.elementType=Types.UNKNOWN;
    return this.requiredType=Types.UNKNOWN;
  }
  IType t=this.values[0].getType();
  for (int i=1; i < len; i++) {
    IType t1=this.values[i].getType();
    t=Type.findCommonSuperType(t,t1);
    if (t == null) {
      t=Types.ANY;
      break;
    }
  }
  this.elementType=t;
  if (t.getTheClass() == Types.TUPLE2_CLASS) {
    GenericType type=new GenericType(Types.MAP_CLASS);
    type.genericCount=2;
switch (t.typeTag()) {
case IType.GENERIC_TYPE:
case IType.TUPLE_TYPE:
      ITypeList t1=(ITypeList)t;
    type.generics[0]=t1.getType(0);
  type.generics[1]=t1.getType(1);
break;
default :
type.generics[0]=type.generics[1]=Types.ANY;
}
return this.requiredType=type;
}
return this.requiredType=new ArrayType(t);
}","@Override public IType getType(){
  if (this.valueCount == 0) {
    return Types.VOID;
  }
  if (this.requiredType != null) {
    return this.requiredType;
  }
  int len=this.valueCount;
  if (len == 0) {
    this.elementType=Types.UNKNOWN;
    return this.requiredType=Types.UNKNOWN;
  }
  IType t=this.values[0].getType();
  for (int i=1; i < len; i++) {
    IType t1=this.values[i].getType();
    t=Types.findCommonSuperType(t,t1);
    if (t == null) {
      t=Types.ANY;
      break;
    }
  }
  this.elementType=t;
  if (t.getTheClass() == Types.TUPLE2_CLASS) {
    GenericType type=new GenericType(Types.MAP_CLASS);
    type.genericCount=2;
switch (t.typeTag()) {
case IType.GENERIC_TYPE:
case IType.TUPLE_TYPE:
      ITypeList t1=(ITypeList)t;
    type.generics[0]=t1.getType(0);
  type.generics[1]=t1.getType(1);
break;
default :
type.generics[0]=type.generics[1]=Types.ANY;
}
return this.requiredType=type;
}
return this.requiredType=new ArrayType(t);
}",0.999479979199168
84934,"@Override public IType getType(){
  if (this.type != null) {
    return this.type;
  }
  int len=this.caseCount;
  if (len == 0) {
    this.type=Types.VOID;
    return this.type;
  }
  IType t=null;
  for (int i=0; i < len; i++) {
    IValue v=this.cases[i].value;
    if (v == null) {
      continue;
    }
    IType t1=this.cases[i].value.getType();
    if (t == null) {
      t=t1;
      continue;
    }
    t=Type.findCommonSuperType(t,t1);
    if (t == null) {
      return this.type=Types.VOID;
    }
  }
  if (t == null) {
    return this.type=Types.VOID;
  }
  return this.type=t;
}","@Override public IType getType(){
  if (this.type != null) {
    return this.type;
  }
  int len=this.caseCount;
  if (len == 0) {
    this.type=Types.VOID;
    return this.type;
  }
  IType t=null;
  for (int i=0; i < len; i++) {
    IValue v=this.cases[i].value;
    if (v == null) {
      continue;
    }
    IType t1=this.cases[i].value.getType();
    if (t == null) {
      t=t1;
      continue;
    }
    t=Types.findCommonSuperType(t,t1);
    if (t == null) {
      return this.type=Types.VOID;
    }
  }
  if (t == null) {
    return this.type=Types.VOID;
  }
  return this.type=t;
}",0.9991532599491956
84935,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
switch (this.type) {
case DEFAULT:
{
      int locals=writer.localCount();
      if (var != null) {
        var.writeInit(writer,var.value);
      }
      writer.writeTargetLabel(startLabel);
      if (this.condition != null) {
        this.condition.writeInvJump(writer,endLabel);
      }
      if (this.then != null) {
        this.then.writeStatement(writer);
      }
      writer.writeLabel(updateLabel);
      if (this.update != null) {
        this.update.writeStatement(writer);
      }
      writer.writeJumpInsn(Opcodes.GOTO,startLabel);
      writer.resetLocals(locals);
      writer.writeLabel(endLabel);
      if (var != null) {
        var.writeLocal(writer,startLabel,endLabel);
      }
      return;
    }
case ARRAY:
{
    Variable arrayVar=this.var3;
    Variable indexVar=this.var1;
    Variable lengthVar=this.var2;
    org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
    writer.writeLabel(scopeLabel);
    var.value.writeExpression(writer);
    int locals=writer.localCount();
    writer.writeInsn(Opcodes.DUP);
    arrayVar.writeInit(writer,null);
    writer.writeInsn(Opcodes.ARRAYLENGTH);
    lengthVar.writeInit(writer,null);
    writer.writeLDC(0);
    indexVar.writeInit(writer,null);
    writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
    writer.writeTargetLabel(startLabel);
    arrayVar.writeGet(writer,null);
    indexVar.writeGet(writer,null);
    writer.writeInsn(var.type.getArrayLoadOpcode());
    var.writeInit(writer,null);
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.writeIINC(indexVar.index,1);
    writer.writeLabel(updateLabel);
    indexVar.writeGet(writer,null);
    lengthVar.writeGet(writer,null);
    writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
    writer.resetLocals(locals);
    writer.writeLabel(endLabel);
    var.writeLocal(writer,scopeLabel,endLabel);
    indexVar.writeLocal(writer,scopeLabel,endLabel);
    lengthVar.writeLocal(writer,scopeLabel,endLabel);
    arrayVar.writeLocal(writer,scopeLabel,endLabel);
    return;
  }
case STRING:
{
  Variable stringVar=this.var3;
  Variable indexVar=this.var1;
  Variable lengthVar=this.var2;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.then != null) {
    this.then.writeStatement(writer);
  }
  writer.writeIINC(indexVar.index,1);
  writer.writeLabel(updateLabel);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
  return;
}
case ITERATOR:
{
Variable iteratorVar=this.var1;
org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
writer.writeLabel(scopeLabel);
var.value.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
int locals=writer.localCount();
var.index=locals;
iteratorVar.index=locals + 1;
writer.writeVarInsn(Opcodes.ASTORE,iteratorVar.index);
writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
writer.writeTargetLabel(startLabel);
writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
if (!var.type.equals(Types.OBJECT)) {
  writer.writeTypeInsn(Opcodes.CHECKCAST,var.type.getInternalName());
}
writer.writeVarInsn(Opcodes.ASTORE,var.index);
if (this.then != null) {
  this.then.writeStatement(writer);
}
writer.writeLabel(updateLabel);
writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
writer.writeJumpInsn(Opcodes.IFNE,startLabel);
writer.resetLocals(locals);
writer.writeLabel(endLabel);
var.writeLocal(writer,scopeLabel,endLabel);
iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}
}
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
switch (this.type) {
case DEFAULT:
{
      int locals=writer.localCount();
      if (var != null) {
        var.writeInit(writer,var.value);
      }
      writer.writeTargetLabel(startLabel);
      if (this.condition != null) {
        this.condition.writeInvJump(writer,endLabel);
      }
      if (this.then != null) {
        this.then.writeStatement(writer);
      }
      writer.writeLabel(updateLabel);
      if (this.update != null) {
        this.update.writeStatement(writer);
      }
      writer.writeJumpInsn(Opcodes.GOTO,startLabel);
      writer.resetLocals(locals);
      writer.writeLabel(endLabel);
      if (var != null) {
        var.writeLocal(writer,startLabel,endLabel);
      }
      return;
    }
case ARRAY:
{
    Variable arrayVar=this.var3;
    Variable indexVar=this.var1;
    Variable lengthVar=this.var2;
    org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
    writer.writeLabel(scopeLabel);
    var.value.writeExpression(writer);
    int locals=writer.localCount();
    writer.writeInsn(Opcodes.DUP);
    arrayVar.writeInit(writer,null);
    writer.writeInsn(Opcodes.ARRAYLENGTH);
    lengthVar.writeInit(writer,null);
    writer.writeLDC(0);
    indexVar.writeInit(writer,null);
    writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
    writer.writeTargetLabel(startLabel);
    arrayVar.writeGet(writer,null);
    indexVar.writeGet(writer,null);
    writer.writeInsn(var.type.getArrayLoadOpcode());
    var.writeInit(writer,null);
    if (this.then != null) {
      this.then.writeStatement(writer);
    }
    writer.writeIINC(indexVar.index,1);
    writer.writeLabel(updateLabel);
    indexVar.writeGet(writer,null);
    lengthVar.writeGet(writer,null);
    writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
    writer.resetLocals(locals);
    writer.writeLabel(endLabel);
    var.writeLocal(writer,scopeLabel,endLabel);
    indexVar.writeLocal(writer,scopeLabel,endLabel);
    lengthVar.writeLocal(writer,scopeLabel,endLabel);
    arrayVar.writeLocal(writer,scopeLabel,endLabel);
    return;
  }
case STRING:
{
  Variable stringVar=this.var3;
  Variable indexVar=this.var1;
  Variable lengthVar=this.var2;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.then != null) {
    this.then.writeStatement(writer);
  }
  writer.writeIINC(indexVar.index,1);
  writer.writeLabel(updateLabel);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
  return;
}
case ITERATOR:
{
Variable iteratorVar=this.var1;
org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
writer.writeLabel(scopeLabel);
var.value.writeExpression(writer);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
int locals=writer.localCount();
var.index=locals + 1;
writer.writeVarInsn(Opcodes.ASTORE,iteratorVar.index=locals);
writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
writer.writeTargetLabel(startLabel);
writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
if (!var.type.equals(Types.OBJECT)) {
  writer.writeTypeInsn(Opcodes.CHECKCAST,var.type.getInternalName());
}
writer.writeVarInsn(Opcodes.ASTORE,var.index);
if (this.then != null) {
  this.then.writeStatement(writer);
}
writer.writeLabel(updateLabel);
writer.writeVarInsn(Opcodes.ALOAD,iteratorVar.index);
writer.writeInvokeInsn(Opcodes.INVOKEINTERFACE,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
writer.writeJumpInsn(Opcodes.IFNE,startLabel);
writer.resetLocals(locals);
writer.writeLabel(endLabel);
var.writeLocal(writer,scopeLabel,endLabel);
iteratorVar.writeLocal(writer,scopeLabel,endLabel);
}
}
}",0.996766291033807
84936,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  if (this.type != 0) {
    IType varType=this.variable.type;
    IValue value=this.variable.value;
    this.variable.value=value.resolve(markers,context);
    IType valueType=value.getType();
    if (valueType.isArrayType()) {
      this.type=ARRAY;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=valueType.getElementType();
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.classEquals(valueType.getElementType())) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$array;
      this.var3=var;
    }
 else     if (ITERABLE.isSuperTypeOf(valueType)) {
      this.type=ITERATOR;
      IType iterableType=valueType.resolveType(ITERABLE_TYPE);
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=iterableType;
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.isSuperTypeOf(iterableType)) {
        Marker m=markers.create(value.getPosition(),""String_Node_Str"");
        m.addInfo(""String_Node_Str"" + iterableType);
        m.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=valueType;
      var.name=$iterator;
      this.var1=var;
    }
 else     if (Types.STRING.isSuperTypeOf(valueType)) {
      this.type=STRING;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=Types.CHAR;
      }
 else       if (!varType.classEquals(Types.CHAR)) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$string;
      this.var3=var;
    }
  }
 else {
    if (this.variable != null) {
      this.variable.resolve(markers,context);
    }
    if (this.condition != null) {
      this.condition=this.condition.resolve(markers,this);
    }
    if (this.update != null) {
      this.update=this.update.resolve(markers,this);
    }
  }
  if (this.then != null) {
    this.then=this.then.resolve(markers,this);
  }
  this.context=null;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  if (this.type != 0) {
    IType varType=this.variable.type;
    IValue value=this.variable.value;
    this.variable.value=value=value.resolve(markers,context);
    IType valueType=value.getType();
    if (valueType.isArrayType()) {
      this.type=ARRAY;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=valueType.getElementType();
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.classEquals(valueType.getElementType())) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + valueType);
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$array;
      this.var3=var;
    }
 else     if (ITERABLE.isSuperTypeOf(valueType)) {
      this.type=ITERATOR;
      IType iterableType=valueType.resolveType(ITERABLE_TYPE);
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=iterableType;
        if (varType == Types.UNKNOWN) {
          markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
        }
      }
 else       if (!varType.isSuperTypeOf(iterableType)) {
        Marker m=markers.create(value.getPosition(),""String_Node_Str"");
        m.addInfo(""String_Node_Str"" + iterableType);
        m.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=valueType;
      var.name=$iterator;
      this.var1=var;
    }
 else     if (Types.STRING.isSuperTypeOf(valueType)) {
      this.type=STRING;
      if (varType == Types.UNKNOWN) {
        this.variable.type=varType=Types.CHAR;
      }
 else       if (!varType.classEquals(Types.CHAR)) {
        Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
        marker.addInfo(""String_Node_Str"" + varType);
      }
      Variable var=new Variable();
      var.type=Types.INT;
      var.name=$index;
      this.var1=var;
      var=new Variable();
      var.type=Types.INT;
      var.name=$length;
      this.var2=var;
      var=new Variable();
      var.type=valueType;
      var.name=$string;
      this.var3=var;
    }
 else {
      Marker m=markers.create(this.position,""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + varType);
      m.addInfo(""String_Node_Str"" + valueType);
    }
  }
 else {
    if (this.variable != null) {
      this.variable.resolve(markers,context);
    }
    if (this.condition != null) {
      this.condition=this.condition.resolve(markers,this);
    }
    if (this.update != null) {
      this.update=this.update.resolve(markers,this);
    }
  }
  if (this.then != null) {
    this.then=this.then.resolve(markers,this);
  }
  this.context=null;
  return this;
}",0.9709908735332464
84937,"@Override public IType getType(){
  if (this.commonType != null) {
    return this.commonType;
  }
  if (this.then != null) {
    if (this.elseThen != null) {
      return this.commonType=Type.findCommonSuperType(this.then.getType(),this.elseThen.getType());
    }
    return this.commonType=this.then.getType();
  }
  return this.commonType=Types.VOID;
}","@Override public IType getType(){
  if (this.commonType != null) {
    return this.commonType;
  }
  if (this.then != null) {
    if (this.elseThen != null) {
      return this.commonType=Types.findCommonSuperType(this.then.getType(),this.elseThen.getType());
    }
    return this.commonType=this.then.getType();
  }
  return this.commonType=Types.VOID;
}",0.9985935302391
84938,"@Override public IType getType(){
  if (this.commonType != null) {
    return this.commonType;
  }
  if (this.finallyBlock != null) {
    return this.commonType=this.finallyBlock.getType();
  }
  if (this.action == null) {
    return Types.UNKNOWN;
  }
  IType type=this.action.getType();
  for (int i=0; i < this.catchBlockCount; i++) {
    IType t1=this.catchBlocks[i].action.getType();
    type=Type.findCommonSuperType(type,t1);
    if (type == null) {
      return this.commonType=Types.ANY;
    }
  }
  return this.commonType=type;
}","@Override public IType getType(){
  if (this.commonType != null) {
    return this.commonType;
  }
  if (this.finallyBlock != null) {
    return this.commonType=this.finallyBlock.getType();
  }
  if (this.action == null) {
    return Types.UNKNOWN;
  }
  IType type=this.action.getType();
  for (int i=0; i < this.catchBlockCount; i++) {
    IType t1=this.catchBlocks[i].action.getType();
    type=Types.findCommonSuperType(type,t1);
    if (type == null) {
      return this.commonType=Types.ANY;
    }
  }
  return this.commonType=type;
}",0.9990732159406858
84939,"@Override public IType getType(){
  if (this.type == null) {
    if (this.elementType == null) {
      this.elementType=Types.findCommonSuperType(this.value1.getType(),this.value2.getType());
    }
    GenericType gt=new GenericType(RANGE_CLASS);
    if (this.elementType.isPrimitive()) {
      this.elementType=this.elementType.getReferenceType();
      this.value1=this.value1.withType(this.elementType);
      this.value2=this.value2.withType(this.elementType);
    }
    gt.addType(this.elementType);
    this.type=gt;
  }
  return this.type;
}","@Override public IType getType(){
  if (this.type == null) {
    if (this.elementType == Types.UNKNOWN) {
      this.elementType=Types.findCommonSuperType(this.value1.getType(),this.value2.getType());
    }
    GenericType gt=new GenericType(RANGE_CLASS);
    if (this.elementType.isPrimitive()) {
      this.elementType=this.elementType.getReferenceType();
      this.value1=this.value1.withType(this.elementType);
      this.value2=this.value2.withType(this.elementType);
    }
    gt.addType(this.elementType);
    this.type=gt;
  }
  return this.type;
}",0.9846153846153848
84940,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
  Variable arrayVar=this.arrayVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  arrayVar.writeInit(writer,null);
  writer.writeInsn(Opcodes.ARRAYLENGTH);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  arrayVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInsn(var.type.getArrayLoadOpcode());
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeIINC(indexVar.index,1);
  writer.writeLabel(updateLabel);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  arrayVar.writeLocal(writer,scopeLabel,endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
  Variable arrayVar=this.arrayVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  arrayVar.writeInit(writer,null);
  writer.writeInsn(Opcodes.ARRAYLENGTH);
  writer.writeInsn(Opcodes.DUP);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.IFEQ,endLabel);
  writer.writeTargetLabel(startLabel);
  arrayVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInsn(var.type.getArrayLoadOpcode());
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeIINC(indexVar.index,1);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  arrayVar.writeLocal(writer,scopeLabel,endLabel);
}",0.9636363636363636
84941,"@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  IType varType=this.variable.type;
  IValue value=this.variable.value;
  this.variable.value=value=value.resolve(markers,context);
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=valueType.getElementType();
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
      }
    }
 else     if (!varType.classEquals(valueType.getElementType())) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new ArrayForStatement(this.variable,this.action.resolve(markers,this),valueType);
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveType(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=iterableType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name.unqualified);
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + iterableType);
      m.addInfo(""String_Node_Str"" + varType);
    }
    return new IterableForStatement(this.variable,this.action.resolve(markers,this),valueType);
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=Types.CHAR;
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new StringForStatement(this.variable,this.action.resolve(markers,this));
  }
  Marker m=markers.create(this.variable.position,""String_Node_Str"");
  m.addInfo(""String_Node_Str"" + varType);
  m.addInfo(""String_Node_Str"" + valueType);
  if (this.action != null) {
    this.action=this.action.resolve(markers,this);
  }
  this.context=null;
  return this;
}","@Override public IValue resolve(MarkerList markers,IContext context){
  this.context=context;
  IType varType=this.variable.type;
  IValue value=this.variable.value;
  this.variable.value=value=value.resolve(markers,context);
  IType valueType=value.getType();
  if (valueType.isArrayType()) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=valueType.getElementType();
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.getPosition(),""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.classEquals(valueType.getElementType())) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + valueType);
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new ArrayForStatement(this.variable,this.action.resolve(markers,this),valueType);
  }
  if (Types.ITERABLE.isSuperTypeOf(valueType)) {
    IType iterableType=valueType.resolveType(IterableForStatement.ITERABLE_TYPE);
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=iterableType;
      if (varType == Types.UNKNOWN) {
        markers.add(this.variable.position,""String_Node_Str"",this.variable.name);
      }
    }
 else     if (!varType.isSuperTypeOf(iterableType)) {
      Marker m=markers.create(value.getPosition(),""String_Node_Str"");
      m.addInfo(""String_Node_Str"" + iterableType);
      m.addInfo(""String_Node_Str"" + varType);
    }
    return new IterableForStatement(this.variable,this.action.resolve(markers,this),valueType);
  }
  if (Types.STRING.isSuperTypeOf(valueType)) {
    if (varType == Types.UNKNOWN) {
      this.variable.type=varType=Types.CHAR;
    }
 else     if (!varType.classEquals(Types.CHAR)) {
      Marker marker=markers.create(value.getPosition(),""String_Node_Str"");
      marker.addInfo(""String_Node_Str"" + varType);
    }
    return new StringForStatement(this.variable,this.action.resolve(markers,this));
  }
  Marker m=markers.create(this.variable.position,""String_Node_Str"");
  m.addInfo(""String_Node_Str"" + varType);
  m.addInfo(""String_Node_Str"" + valueType);
  if (this.action != null) {
    this.action=this.action.resolve(markers,this);
  }
  this.context=null;
  return this;
}",0.9824249165739712
84942,"@Override public IField resolveField(Name name){
  if (this.variable != null && this.variable.name == name) {
    return this.variable;
  }
  return this.context.resolveField(name);
}","@Override public IField resolveField(Name name){
  if (this.variable.name == name) {
    return this.variable;
  }
  return this.context.resolveField(name);
}",0.9266862170087976
84943,"@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
  Variable stringVar=this.stringVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.GOTO,updateLabel);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeIINC(indexVar.index,1);
  writer.writeLabel(updateLabel);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
}","@Override public void writeStatement(MethodWriter writer) throws BytecodeException {
  org.objectweb.asm.Label startLabel=this.startLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label updateLabel=this.updateLabel.target=new org.objectweb.asm.Label();
  org.objectweb.asm.Label endLabel=this.endLabel.target=new org.objectweb.asm.Label();
  Variable var=this.variable;
  Variable stringVar=this.stringVar;
  Variable indexVar=this.indexVar;
  Variable lengthVar=this.lengthVar;
  org.objectweb.asm.Label scopeLabel=new org.objectweb.asm.Label();
  writer.writeLabel(scopeLabel);
  var.value.writeExpression(writer);
  int locals=writer.localCount();
  writer.writeInsn(Opcodes.DUP);
  stringVar.writeInit(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  writer.writeInsn(Opcodes.DUP);
  lengthVar.writeInit(writer,null);
  writer.writeLDC(0);
  indexVar.writeInit(writer,null);
  writer.writeJumpInsn(Opcodes.IFEQ,endLabel);
  writer.writeTargetLabel(startLabel);
  stringVar.writeGet(writer,null);
  indexVar.writeGet(writer,null);
  writer.writeInvokeInsn(Opcodes.INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
  var.writeInit(writer,null);
  if (this.action != null) {
    this.action.writeStatement(writer);
  }
  writer.writeLabel(updateLabel);
  writer.writeIINC(indexVar.index,1);
  indexVar.writeGet(writer,null);
  lengthVar.writeGet(writer,null);
  writer.writeJumpInsn(Opcodes.IF_ICMPLT,startLabel);
  writer.resetLocals(locals);
  writer.writeLabel(endLabel);
  var.writeLocal(writer,scopeLabel,endLabel);
  indexVar.writeLocal(writer,scopeLabel,endLabel);
  lengthVar.writeLocal(writer,scopeLabel,endLabel);
  stringVar.writeLocal(writer,scopeLabel,endLabel);
}",0.9663110612015722
84944,"public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount];
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}","public void visitInsn(int opcode) throws BytecodeException {
switch (opcode) {
case NOP:
    return;
case ACONST_NULL:
  this.push(NULL);
return;
case ICONST_M1:
case ICONST_0:
case ICONST_1:
case ICONST_2:
case ICONST_3:
case ICONST_4:
case ICONST_5:
this.push(INT);
return;
case LCONST_M1:
case LCONST_0:
case LCONST_1:
this.push(LONG);
return;
case FCONST_0:
case FCONST_1:
case FCONST_2:
this.push(FLOAT);
return;
case DCONST_0:
case DCONST_1:
this.push(DOUBLE);
return;
case IALOAD:
this.pop();
this.pop();
this.push(INT);
return;
case LALOAD:
this.pop();
this.pop();
this.push(LONG);
return;
case FALOAD:
this.pop();
this.pop();
this.push(FLOAT);
return;
case DALOAD:
this.pop();
this.pop();
this.push(DOUBLE);
return;
case AALOAD:
this.pop();
this.pop();
this.push(TOP);
return;
case BALOAD:
this.pop();
this.pop();
this.push(BYTE);
return;
case CALOAD:
this.pop();
this.pop();
this.push(CHAR);
return;
case SALOAD:
this.pop();
this.pop();
this.push(SHORT);
return;
case IASTORE:
this.pop();
this.pop();
this.pop();
return;
case LASTORE:
this.pop();
this.pop();
this.pop();
return;
case FASTORE:
this.pop();
this.pop();
this.pop();
return;
case DASTORE:
this.pop();
this.pop();
this.pop();
return;
case AASTORE:
this.pop();
this.pop();
this.pop();
return;
case BASTORE:
this.pop();
this.pop();
this.pop();
return;
case CASTORE:
this.pop();
this.pop();
this.pop();
return;
case SASTORE:
this.pop();
this.pop();
this.pop();
return;
case POP:
this.pop();
return;
case POP2:
this.pop();
this.pop();
return;
case DUP:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stackCount++;
return;
}
case DUP_X1:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stackCount++;
return;
}
case DUP_X2:
{
this.actualStackCount++;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stackCount++;
return;
}
case DUP2:
{
Object o=this.stack[this.stackCount - 1];
if (o == LONG || o == DOUBLE) {
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 1);
this.stack[this.stackCount++]=o;
return;
}
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 2];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 1];
this.stackCount+=2;
return;
}
case DUP2_X1:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 3];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 2];
this.stackCount+=2;
return;
}
case DUP2_X2:
{
this.actualStackCount+=2;
this.ensureStack(this.stackCount + 2);
this.stack[this.stackCount]=this.stack[this.stackCount - 4];
this.stack[this.stackCount + 1]=this.stack[this.stackCount - 3];
this.stackCount+=2;
return;
}
case SWAP:
{
Object o=this.stack[this.stackCount];
this.stack[this.stackCount]=this.stack[this.stackCount - 1];
this.stack[this.stackCount - 1]=o;
return;
}
case IADD:
case ISUB:
case IMUL:
case IDIV:
case IREM:
case ISHL:
case ISHR:
case IUSHR:
case IAND:
case IOR:
case IXOR:
this.pop();
return;
case LADD:
case LSUB:
case LMUL:
case LDIV:
case LREM:
case LSHL:
case LSHR:
case LUSHR:
case LAND:
case LOR:
case LXOR:
this.pop();
return;
case FADD:
case FSUB:
case FMUL:
case FDIV:
case FREM:
this.pop();
return;
case DADD:
case DSUB:
case DMUL:
case DDIV:
case DREM:
this.pop();
return;
case INEG:
case LNEG:
case FNEG:
case DNEG:
return;
case L2I:
case F2I:
case D2I:
this.pop();
this.push(INT);
return;
case I2L:
case F2L:
case D2L:
this.pop();
this.push(LONG);
return;
case I2F:
case L2F:
case D2F:
this.pop();
this.push(FLOAT);
return;
case I2D:
case L2D:
case F2D:
this.pop();
this.push(DOUBLE);
return;
case I2B:
this.pop();
this.push(BYTE);
return;
case I2C:
this.pop();
this.push(CHAR);
return;
case I2S:
this.pop();
this.push(SHORT);
return;
case LCMP:
case FCMPL:
case FCMPG:
case DCMPL:
case DCMPG:
this.pop();
this.pop();
this.push(INT);
return;
case IRETURN:
case LRETURN:
case FRETURN:
case DRETURN:
case ARETURN:
this.pop();
return;
case RETURN:
return;
case ARRAYLENGTH:
this.pop();
this.push(INT);
return;
case ATHROW:
case MONITORENTER:
case MONITOREXIT:
case TABLESWITCH:
case LOOKUPSWITCH:
this.pop();
return;
}
}",0.978578154425612
84945,"public static void writeHashCode(MethodWriter writer,IField field){
  writer.writeVarInsn(ALOAD,0);
  field.writeGet(writer,null);
  IType type=field.getType();
  if (type.isPrimitive()) {
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
{
        Label elseLabel=new Label();
        Label endLabel=new Label();
        writer.writeJumpInsn(IFEQ,elseLabel);
        writer.writeLDC(1231);
        writer.writeJumpInsn(GOTO,endLabel);
        writer.writeLabel(elseLabel);
        writer.writeLDC(1237);
        writer.writeLabel(endLabel);
        return;
      }
case ClassFormat.T_BYTE:
    return;
case ClassFormat.T_SHORT:
  return;
case ClassFormat.T_CHAR:
return;
case ClassFormat.T_INT:
return;
case ClassFormat.T_LONG:
writer.writeInsn(DUP2);
writer.writeLDC(32);
writer.writeInsn(LUSHR);
writer.writeInsn(LOR);
writer.writeInsn(L2I);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
writer.writeInsn(DUP2);
writer.writeLDC(32);
writer.writeInsn(LUSHR);
writer.writeInsn(LOR);
writer.writeInsn(L2I);
return;
}
}
Label elseLabel=new Label();
Label endLabel=new Label();
writer.writeInsn(DUP);
writer.writeJumpInsn(IFNULL,elseLabel);
writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
writer.writeJumpInsn(GOTO,endLabel);
writer.writeLabel(elseLabel);
writer.writeInsn(POP);
writer.writeLDC(0);
writer.writeLabel(endLabel);
}","public static void writeHashCode(MethodWriter writer,IType type){
  if (type.isPrimitive()) {
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
{
        Label elseLabel=new Label();
        Label endLabel=new Label();
        writer.writeJumpInsn(IFEQ,elseLabel);
        writer.writeLDC(1231);
        writer.writeJumpInsn(GOTO,endLabel);
        writer.writeLabel(elseLabel);
        writer.writeLDC(1237);
        writer.writeLabel(endLabel);
        return;
      }
case ClassFormat.T_BYTE:
    return;
case ClassFormat.T_SHORT:
  return;
case ClassFormat.T_CHAR:
return;
case ClassFormat.T_INT:
return;
case ClassFormat.T_LONG:
writer.writeInsn(DUP2);
writer.writeLDC(32);
writer.writeInsn(LUSHR);
writer.writeInsn(LOR);
writer.writeInsn(L2I);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
writer.writeInsn(DUP2);
writer.writeLDC(32);
writer.writeInsn(LUSHR);
writer.writeInsn(LOR);
writer.writeInsn(L2I);
return;
}
}
Label elseLabel=new Label();
Label endLabel=new Label();
writer.writeInsn(DUP);
writer.writeJumpInsn(IFNULL,elseLabel);
if (type.isArrayType()) {
writeArrayHashCode(writer,type.getElementType());
}
 else {
writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}
writer.writeJumpInsn(GOTO,endLabel);
writer.writeLabel(elseLabel);
writer.writeInsn(POP);
writer.writeLDC(0);
writer.writeLabel(endLabel);
}",0.9420514409668422
84946,"public static void writeEquals(MethodWriter writer,IField field){
  IType type=field.getType();
  if (type.isPrimitive()) {
    writer.writeVarInsn(ALOAD,0);
    field.writeGet(writer,null);
    writer.writeVarInsn(ALOAD,2);
    field.writeGet(writer,null);
    Label label=new Label();
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
case ClassFormat.T_BYTE:
case ClassFormat.T_SHORT:
case ClassFormat.T_CHAR:
case ClassFormat.T_INT:
      writer.writeJumpInsn(IF_ICMPEQ,label);
    break;
case ClassFormat.T_LONG:
  writer.writeJumpInsn(IF_LCMPEQ,label);
break;
case ClassFormat.T_FLOAT:
writer.writeJumpInsn(IF_FCMPEQ,label);
break;
case ClassFormat.T_DOUBLE:
writer.writeJumpInsn(IF_FCMPEQ,label);
break;
}
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(label);
return;
}
Label elseLabel=new Label();
Label endLabel=new Label();
writer.writeVarInsn(ALOAD,0);
field.writeGet(writer,null);
writer.writeJumpInsn(IFNONNULL,elseLabel);
writer.writeVarInsn(ALOAD,2);
field.writeGet(writer,null);
writer.writeJumpInsn(IFNULL,endLabel);
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(elseLabel);
writer.writeVarInsn(ALOAD,0);
field.writeGet(writer,null);
writer.writeVarInsn(ALOAD,2);
field.writeGet(writer,null);
writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
writer.writeJumpInsn(IFNE,endLabel);
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(endLabel);
}","public static void writeEquals(MethodWriter writer,IField field){
  IType type=field.getType();
  if (type.isPrimitive()) {
    writer.writeVarInsn(ALOAD,0);
    field.writeGet(writer,null);
    writer.writeVarInsn(ALOAD,2);
    field.writeGet(writer,null);
    Label label=new Label();
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
case ClassFormat.T_BYTE:
case ClassFormat.T_SHORT:
case ClassFormat.T_CHAR:
case ClassFormat.T_INT:
      writer.writeJumpInsn(IF_ICMPEQ,label);
    break;
case ClassFormat.T_LONG:
  writer.writeJumpInsn(IF_LCMPEQ,label);
break;
case ClassFormat.T_FLOAT:
writer.writeJumpInsn(IF_FCMPEQ,label);
break;
case ClassFormat.T_DOUBLE:
writer.writeJumpInsn(IF_FCMPEQ,label);
break;
}
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(label);
return;
}
Label elseLabel=new Label();
Label endLabel=new Label();
writer.writeVarInsn(ALOAD,0);
field.writeGet(writer,null);
writer.writeJumpInsn(IFNONNULL,elseLabel);
writer.writeVarInsn(ALOAD,2);
field.writeGet(writer,null);
writer.writeJumpInsn(IFNULL,endLabel);
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(elseLabel);
writer.writeVarInsn(ALOAD,0);
field.writeGet(writer,null);
writer.writeVarInsn(ALOAD,2);
field.writeGet(writer,null);
if (type.isArrayType()) {
writeArrayEquals(writer,type.getElementType());
}
 else {
writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",false);
}
writer.writeJumpInsn(IFNE,endLabel);
writer.writeLDC(0);
writer.writeInsn(IRETURN);
writer.writeLabel(endLabel);
}",0.9717847769028872
84947,"public static String keywordToString(int type){
switch (type) {
case ABSTRACT:
    return ""String_Node_Str"";
case ANNOTATION:
  return ""String_Node_Str"";
case AS:
return ""String_Node_Str"";
case BREAK:
return ""String_Node_Str"";
case BYTE:
return ""String_Node_Str"";
case CASE:
return ""String_Node_Str"";
case CATCH:
return ""String_Node_Str"";
case CLASS:
return ""String_Node_Str"";
case CONST:
return ""String_Node_Str"";
case CONTINUE:
return ""String_Node_Str"";
case DERIVED:
return ""String_Node_Str"";
case DEPRECATED:
return ""String_Node_Str"";
case DO:
return ""String_Node_Str"";
case ELSE:
return ""String_Node_Str"";
case ENUM:
return ""String_Node_Str"";
case EXTENDS:
return ""String_Node_Str"";
case FALSE:
return ""String_Node_Str"";
case FINAL:
return ""String_Node_Str"";
case FINALLY:
return ""String_Node_Str"";
case FOR:
return ""String_Node_Str"";
case FUNCTIONAL:
return ""String_Node_Str"";
case GOTO:
return ""String_Node_Str"";
case IF:
return ""String_Node_Str"";
case IMPLEMENTS:
return ""String_Node_Str"";
case IMPORT:
return ""String_Node_Str"";
case INCLUDE:
return ""String_Node_Str"";
case INLINE:
return ""String_Node_Str"";
case INFIX:
return ""String_Node_Str"";
case INTERFACE:
return ""String_Node_Str"";
case IS:
return ""String_Node_Str"";
case LAZY:
return ""String_Node_Str"";
case NEW:
return ""String_Node_Str"";
case NIL:
return ""String_Node_Str"";
case NULL:
return ""String_Node_Str"";
case OBJECT:
return ""String_Node_Str"";
case OPERATOR:
return ""String_Node_Str"";
case OVERRIDE:
return ""String_Node_Str"";
case PACKAGE:
return ""String_Node_Str"";
case POSTFIX:
return ""String_Node_Str"";
case PRIVATE:
return ""String_Node_Str"";
case PROTECTED:
return ""String_Node_Str"";
case PUBLIC:
return ""String_Node_Str"";
case RETURN:
return ""String_Node_Str"";
case SEALED:
return ""String_Node_Str"";
case STATIC:
return ""String_Node_Str"";
case SUPER:
return ""String_Node_Str"";
case SYNCHRONIZED:
return ""String_Node_Str"";
case THIS:
return ""String_Node_Str"";
case THROW:
return ""String_Node_Str"";
case THROWS:
return ""String_Node_Str"";
case TRUE:
return ""String_Node_Str"";
case TRY:
return ""String_Node_Str"";
case USING:
return ""String_Node_Str"";
case VAR:
return ""String_Node_Str"";
case WHILE:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}","public static String keywordToString(int type){
switch (type) {
case ABSTRACT:
    return ""String_Node_Str"";
case ANNOTATION:
  return ""String_Node_Str"";
case AS:
return ""String_Node_Str"";
case BREAK:
return ""String_Node_Str"";
case CASE:
return ""String_Node_Str"";
case CATCH:
return ""String_Node_Str"";
case CLASS:
return ""String_Node_Str"";
case CONST:
return ""String_Node_Str"";
case CONTINUE:
return ""String_Node_Str"";
case DERIVED:
return ""String_Node_Str"";
case DEPRECATED:
return ""String_Node_Str"";
case DO:
return ""String_Node_Str"";
case ELSE:
return ""String_Node_Str"";
case ENUM:
return ""String_Node_Str"";
case EXTENDS:
return ""String_Node_Str"";
case FALSE:
return ""String_Node_Str"";
case FINAL:
return ""String_Node_Str"";
case FINALLY:
return ""String_Node_Str"";
case FOR:
return ""String_Node_Str"";
case FUNCTIONAL:
return ""String_Node_Str"";
case GOTO:
return ""String_Node_Str"";
case IF:
return ""String_Node_Str"";
case IMPLEMENTS:
return ""String_Node_Str"";
case IMPORT:
return ""String_Node_Str"";
case INCLUDE:
return ""String_Node_Str"";
case INLINE:
return ""String_Node_Str"";
case INFIX:
return ""String_Node_Str"";
case INTERFACE:
return ""String_Node_Str"";
case IS:
return ""String_Node_Str"";
case LAZY:
return ""String_Node_Str"";
case NEW:
return ""String_Node_Str"";
case NIL:
return ""String_Node_Str"";
case NULL:
return ""String_Node_Str"";
case OBJECT:
return ""String_Node_Str"";
case OPERATOR:
return ""String_Node_Str"";
case OVERRIDE:
return ""String_Node_Str"";
case PACKAGE:
return ""String_Node_Str"";
case POSTFIX:
return ""String_Node_Str"";
case PRIVATE:
return ""String_Node_Str"";
case PROTECTED:
return ""String_Node_Str"";
case PUBLIC:
return ""String_Node_Str"";
case RETURN:
return ""String_Node_Str"";
case SEALED:
return ""String_Node_Str"";
case STATIC:
return ""String_Node_Str"";
case SUPER:
return ""String_Node_Str"";
case SYNCHRONIZED:
return ""String_Node_Str"";
case THIS:
return ""String_Node_Str"";
case THROW:
return ""String_Node_Str"";
case THROWS:
return ""String_Node_Str"";
case TRUE:
return ""String_Node_Str"";
case TRY:
return ""String_Node_Str"";
case USING:
return ""String_Node_Str"";
case VAR:
return ""String_Node_Str"";
case WHILE:
return ""String_Node_Str"";
}
return ""String_Node_Str"";
}",0.9916232737151912
84948,"public static int getKeywordType(String s){
switch (s) {
case ""String_Node_Str"":
    return ABSTRACT;
case ""String_Node_Str"":
  return ANNOTATION;
case ""String_Node_Str"":
return AS;
case ""String_Node_Str"":
return BREAK;
case ""String_Node_Str"":
return BYTE;
case ""String_Node_Str"":
return CASE;
case ""String_Node_Str"":
return CATCH;
case ""String_Node_Str"":
return CLASS;
case ""String_Node_Str"":
return CONST;
case ""String_Node_Str"":
return CONTINUE;
case ""String_Node_Str"":
return DERIVED;
case ""String_Node_Str"":
return DEPRECATED;
case ""String_Node_Str"":
return DO;
case ""String_Node_Str"":
return ELSE;
case ""String_Node_Str"":
return ENUM;
case ""String_Node_Str"":
return EXTENDS;
case ""String_Node_Str"":
return FALSE;
case ""String_Node_Str"":
return FINAL;
case ""String_Node_Str"":
return FINALLY;
case ""String_Node_Str"":
return FOR;
case ""String_Node_Str"":
return FUNCTIONAL;
case ""String_Node_Str"":
return GOTO;
case ""String_Node_Str"":
return IF;
case ""String_Node_Str"":
return IMPLEMENTS;
case ""String_Node_Str"":
return IMPORT;
case ""String_Node_Str"":
return INCLUDE;
case ""String_Node_Str"":
return INLINE;
case ""String_Node_Str"":
return INFIX;
case ""String_Node_Str"":
return INTERFACE;
case ""String_Node_Str"":
return IS;
case ""String_Node_Str"":
return LAZY;
case ""String_Node_Str"":
return NEW;
case ""String_Node_Str"":
return NIL;
case ""String_Node_Str"":
return NULL;
case ""String_Node_Str"":
return OBJECT;
case ""String_Node_Str"":
return OPERATOR;
case ""String_Node_Str"":
return OVERRIDE;
case ""String_Node_Str"":
return PACKAGE;
case ""String_Node_Str"":
return POSTFIX;
case ""String_Node_Str"":
return PRIVATE;
case ""String_Node_Str"":
return PROTECTED;
case ""String_Node_Str"":
return PUBLIC;
case ""String_Node_Str"":
return RETURN;
case ""String_Node_Str"":
return SEALED;
case ""String_Node_Str"":
return STATIC;
case ""String_Node_Str"":
return SUPER;
case ""String_Node_Str"":
return SYNCHRONIZED;
case ""String_Node_Str"":
return THIS;
case ""String_Node_Str"":
return THROW;
case ""String_Node_Str"":
return THROWS;
case ""String_Node_Str"":
return TRUE;
case ""String_Node_Str"":
return TRY;
case ""String_Node_Str"":
return USING;
case ""String_Node_Str"":
return VAR;
case ""String_Node_Str"":
return WHILE;
}
return 0;
}","public static int getKeywordType(String s){
switch (s) {
case ""String_Node_Str"":
    return ABSTRACT;
case ""String_Node_Str"":
  return ANNOTATION;
case ""String_Node_Str"":
return AS;
case ""String_Node_Str"":
return BREAK;
case ""String_Node_Str"":
return CASE;
case ""String_Node_Str"":
return CATCH;
case ""String_Node_Str"":
return CLASS;
case ""String_Node_Str"":
return CONST;
case ""String_Node_Str"":
return CONTINUE;
case ""String_Node_Str"":
return DERIVED;
case ""String_Node_Str"":
return DEPRECATED;
case ""String_Node_Str"":
return DO;
case ""String_Node_Str"":
return ELSE;
case ""String_Node_Str"":
return ENUM;
case ""String_Node_Str"":
return EXTENDS;
case ""String_Node_Str"":
return FALSE;
case ""String_Node_Str"":
return FINAL;
case ""String_Node_Str"":
return FINALLY;
case ""String_Node_Str"":
return FOR;
case ""String_Node_Str"":
return FUNCTIONAL;
case ""String_Node_Str"":
return GOTO;
case ""String_Node_Str"":
return IF;
case ""String_Node_Str"":
return IMPLEMENTS;
case ""String_Node_Str"":
return IMPORT;
case ""String_Node_Str"":
return INCLUDE;
case ""String_Node_Str"":
return INLINE;
case ""String_Node_Str"":
return INFIX;
case ""String_Node_Str"":
return INTERFACE;
case ""String_Node_Str"":
return IS;
case ""String_Node_Str"":
return LAZY;
case ""String_Node_Str"":
return NEW;
case ""String_Node_Str"":
return NIL;
case ""String_Node_Str"":
return NULL;
case ""String_Node_Str"":
return OBJECT;
case ""String_Node_Str"":
return OPERATOR;
case ""String_Node_Str"":
return OVERRIDE;
case ""String_Node_Str"":
return PACKAGE;
case ""String_Node_Str"":
return POSTFIX;
case ""String_Node_Str"":
return PRIVATE;
case ""String_Node_Str"":
return PROTECTED;
case ""String_Node_Str"":
return PUBLIC;
case ""String_Node_Str"":
return RETURN;
case ""String_Node_Str"":
return SEALED;
case ""String_Node_Str"":
return STATIC;
case ""String_Node_Str"":
return SUPER;
case ""String_Node_Str"":
return SYNCHRONIZED;
case ""String_Node_Str"":
return THIS;
case ""String_Node_Str"":
return THROW;
case ""String_Node_Str"":
return THROWS;
case ""String_Node_Str"":
return TRUE;
case ""String_Node_Str"":
return TRY;
case ""String_Node_Str"":
return USING;
case ""String_Node_Str"":
return VAR;
case ""String_Node_Str"":
return WHILE;
}
return 0;
}",0.9915351178220086
84949,"@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != null) {
      return type.getConcreteType(concrete);
    }
  }
  return null;
}","@Override public IType resolveType(ITypeVariable typeVar,IType concrete){
  if (this.superType != null) {
    IType type=this.superType.resolveType(typeVar);
    if (type != Types.ANY) {
      return type.getConcreteType(concrete);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i].resolveType(typeVar);
    if (type != Types.ANY) {
      return type.getConcreteType(concrete);
    }
  }
  return Types.ANY;
}",0.9560315670800452
84950,"public void addCommonType(IType type1,IType type2,IType common){
  StringBuilder buf=new StringBuilder();
  buf.append(type1.getInternalName()).append(type2.getInternalName());
  this.commonTypes.put(buf.toString(),common.getInternalName());
}","public void addCommonType(IType type1,IType type2,IType common){
  this.commonTypes.put(type1.getInternalName().concat(type2.getInternalName()),common.getInternalName());
}",0.7325301204819277
84951,"@Override protected String getCommonSuperClass(String type1,String type2){
  StringBuilder buf=new StringBuilder();
  buf.append(type1).append(type2);
  return this.commonTypes.get(buf.toString());
}","@Override protected String getCommonSuperClass(String type1,String type2){
  String common=this.commonTypes.get(type1.concat(type2));
  return common == null ? ""String_Node_Str"" : common;
}",0.6030927835051546
84952,"@Override public int getTypeMatch(IType type){
  if (!type.isArrayType()) {
    IClass iclass=type.getTheClass();
    return iclass == Types.OBJECT_CLASS || iclass.getAnnotation(ARRAY_CONVERTIBLE) != null ? 2 : 0;
  }
  if (this.valueCount == 0) {
    return 3;
  }
  IType type1=type.getElementType();
  int total=0;
  for (int i=0; i < this.valueCount; i++) {
    int m=this.values[i].getTypeMatch(type1);
    if (m == 0) {
      return 0;
    }
    total+=m;
  }
  return total / this.valueCount;
}","@Override public int getTypeMatch(IType type){
  if (!type.isArrayType()) {
    IClass iclass=type.getTheClass();
    return iclass == Types.OBJECT_CLASS || iclass.getAnnotation(ARRAY_CONVERTIBLE) != null ? 2 : 0;
  }
  if (this.valueCount == 0) {
    return 3;
  }
  IType type1=type.getElementType();
  int total=0;
  for (int i=0; i < this.valueCount; i++) {
    int m=this.values[i].getTypeMatch(type1);
    if (m == 0) {
      return 0;
    }
    total+=m;
  }
  return 1 + total / this.valueCount;
}",0.9960238568588468
84953,"@Override public void appendSignature(StringBuilder buffer){
  if (this.lowerBound != null) {
    buffer.append('-');
    this.lowerBound.appendSignature(buffer);
  }
 else {
    buffer.append('+');
    this.upperBounds[0].appendSignature(buffer);
  }
}","@Override public void appendSignature(StringBuilder buffer){
  if (this.lowerBound != null) {
    buffer.append('-');
    this.lowerBound.appendSignature(buffer);
  }
 else   if (this.upperBoundCount > 0) {
    buffer.append('+');
    this.upperBounds[0].appendSignature(buffer);
  }
 else {
    buffer.append(""String_Node_Str"");
  }
}",0.8605442176870748
84954,"private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int type1=next.type();
  if (type1 == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token,this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS;
    return;
  }
  if (type1 == Symbols.OPEN_SQUARE_BRACKET) {
    MethodCall call=new MethodCall(token,this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=GENERICS;
    return;
  }
  if (type1 == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=VALUE;
    this.field.setValue(lv);
    this.field=lv;
    pm.skip();
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(type1)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(type1) && !ParserUtil.isTerminator2(next.next().type())) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}","private void getAccess(IParserManager pm,Name name,IToken token,int type) throws SyntaxError {
  IToken next=token.next();
  int type1=next.type();
  if (type1 == Symbols.OPEN_PARENTHESIS) {
    MethodCall call=new MethodCall(token,this.value,name);
    call.dotless=this.dotless;
    this.value=call;
    this.mode=PARAMETERS;
    return;
  }
  if (type1 == Symbols.ARROW_OPERATOR) {
    LambdaExpression lv=new LambdaExpression(next.raw(),name);
    this.mode=VALUE;
    this.field.setValue(lv);
    this.field=lv;
    pm.skip();
    return;
  }
  Operator op=pm.getOperator(name);
  if (op != null) {
    if (this.value == null || op.type == Operator.PREFIX) {
      MethodCall call=new MethodCall(token,null,name);
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      call.dotless=this.dotless;
      this.value=call;
      this.mode=ACCESS;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      parser.prefix=true;
      pm.pushParser(parser);
      return;
    }
    MethodCall call=new MethodCall(token,this.value,name);
    this.value=call;
    this.mode=ACCESS;
    call.dotless=this.dotless;
    if (op.type != Operator.POSTFIX) {
      SingleArgument sa=new SingleArgument();
      call.arguments=sa;
      ExpressionParser parser=new ExpressionParser(sa);
      parser.operator=op;
      pm.pushParser(parser);
    }
    return;
  }
  if (!name.qualified.endsWith(""String_Node_Str"")) {
    if (ParserUtil.isTerminator2(type1)) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
    if (ParserUtil.isIdentifier(type1) && !ParserUtil.isTerminator2(next.next().type())) {
      FieldAccess access=new FieldAccess(token,this.value,name);
      access.dotless=this.dotless;
      this.value=access;
      this.mode=ACCESS;
      return;
    }
  }
  MethodCall call=new MethodCall(token,this.value,name);
  this.value=call;
  this.mode=ACCESS;
  call.dotless=this.dotless;
  SingleArgument sa=new SingleArgument();
  call.arguments=sa;
  ExpressionParser parser=new ExpressionParser(sa);
  parser.operator=op;
  pm.pushParser(parser);
  return;
}",0.9576980888984324
84955,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
if (this.mode == VALUE) {
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=TUPLE_END;
Tuple tv=new Tuple(token);
this.value=tv;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_PARENTHESIS) {
  pm.pushParser(new ExpressionListParser(tv));
}
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
  pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
  pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
  Bytecode bc=new Bytecode(token);
  pm.skip();
  pm.pushParser(new BytecodeParser(bc));
  this.mode=BYTECODE_END;
  this.value=bc;
  return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
}
if (this.mode == PATTERN_IF) {
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
}
if (this.mode == PATTERN_END) {
if (type == Symbols.COLON) {
this.field.setValue(this.value);
pm.popParser();
if (token.next().type() != Keywords.CASE) {
  pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ARRAY_END) {
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == LIST_END) {
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
  this.mode=ACCESS_2;
  this.dotless=false;
  pm.skip();
  return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == TUPLE_END) {
this.mode=ACCESS | LAMBDA;
if (type == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS) {
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
ICall call=(ICall)this.value;
call.setArguments(this.getArguments(pm,token.next()));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS_END) {
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == CONSTRUCTOR_END) {
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc=((ConstructorCall)this.value).toClassConstructor();
pm.skip();
pm.pushParser(new ClassBodyParser(cc.getNestedClass()));
this.value=cc;
this.mode=LIST_END;
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == GENERICS) {
this.mode=GENERICS_END;
if (type == Symbols.OPEN_SQUARE_BRACKET) {
pm.pushParser(new TypeListParser((ITypeList)this.value));
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == GENERICS_END) {
this.mode=ACCESS;
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == FUNCTION_POINTER) {
pm.popParser();
if (ParserUtil.isIdentifier(type)) {
FunctionPointer fl=new FunctionPointer(token.raw(),token.nameValue());
fl.instance=this.value;
this.field.setValue(fl);
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BYTECODE_END) {
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.isInMode(LAMBDA)) {
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression lv=getLambdaValue(this.value);
if (lv != null) {
  lv.expandPosition(token);
  this.field.setValue(lv);
  pm.popParser();
  pm.pushParser(new ExpressionParser(lv));
  return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
}
if (this.isInMode(ACCESS)) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
if (type == Symbols.HASH) {
this.mode=FUNCTION_POINTER;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
  MethodCall mc=new MethodCall(prev,null,prev.nameValue());
  mc.arguments=args;
  this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
  MethodCall mc;
  if (this.value.valueTag() == IValue.FIELD_ACCESS) {
    mc=((FieldAccess)this.value).toMethodCall(null);
  }
 else {
    mc=(MethodCall)this.value;
  }
  mc.arguments=args;
  this.value=mc;
}
 else {
  ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
  amc.instance=this.value;
  amc.arguments=args;
  this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.isInMode(ACCESS_2)) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
  this.field.setValue(this.value);
  pm.popParser(true);
  return;
}
if (this.dotless && this.operator != null) {
  Operator operator=pm.getOperator(name);
  int p=this.operator.precedence;
  if (p > operator.precedence) {
    this.field.setValue(this.value);
    pm.popParser(true);
    return;
  }
  if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
      this.field.setValue(this.value);
    pm.popParser(true);
  return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.isInMode(CONSTRUCTOR)) {
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc2=cc.toClassConstructor();
pm.pushParser(new ClassBodyParser(cc2.getNestedClass()));
this.mode=LIST_END;
this.value=cc2;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == 0) {
    if (this.value != null) {
      this.field.setValue(this.value);
    }
    pm.popParser(true);
    return;
  }
switch (type) {
case Symbols.SEMICOLON:
case Symbols.COMMA:
case Tokens.STRING_PART:
case Tokens.STRING_END:
    if (this.value != null) {
      this.field.setValue(this.value);
    }
  pm.popParser(true);
return;
}
if (this.mode == VALUE) {
if (type == Symbols.OPEN_PARENTHESIS) {
this.mode=TUPLE_END;
Tuple tv=new Tuple(token);
this.value=tv;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_PARENTHESIS) {
  pm.pushParser(new ExpressionListParser(tv));
}
return;
}
if (type == Symbols.OPEN_SQUARE_BRACKET) {
this.mode=ARRAY_END;
Array vl=new Array(token);
this.value=vl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_SQUARE_BRACKET) {
  pm.pushParser(new ExpressionListParser(vl));
}
return;
}
if (type == Symbols.OPEN_CURLY_BRACKET) {
this.mode=LIST_END;
StatementList sl=new StatementList(token);
this.value=sl;
int nextType=token.next().type();
if (nextType != Symbols.CLOSE_CURLY_BRACKET) {
  pm.pushParser(new StatementListParser(sl));
}
return;
}
if (type == Tokens.SYMBOL_IDENTIFIER) {
if (token.nameValue() == Name.at && token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
  Bytecode bc=new Bytecode(token);
  pm.skip();
  pm.pushParser(new BytecodeParser(bc));
  this.mode=BYTECODE_END;
  this.value=bc;
  return;
}
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if ((type & Tokens.IDENTIFIER) != 0) {
this.getAccess(pm,token.nameValue(),token,type);
return;
}
if (this.parseKeyword(pm,token,type)) {
return;
}
this.mode=ACCESS;
}
if (this.mode == PATTERN_IF) {
this.mode=PATTERN_END;
if (type == Keywords.IF) {
pm.pushParser(new ExpressionParser(this));
return;
}
}
if (this.mode == PATTERN_END) {
if (type == Symbols.COLON) {
this.field.setValue(this.value);
pm.popParser();
if (token.next().type() != Keywords.CASE) {
  pm.pushParser(new ExpressionParser((IValued)this.value));
}
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (type == Symbols.COLON) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.mode == ARRAY_END) {
this.value.expandPosition(token);
if (type == Symbols.CLOSE_SQUARE_BRACKET) {
this.mode=ACCESS;
return;
}
this.field.setValue(this.value);
pm.popParser();
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == LIST_END) {
this.field.setValue(this.value);
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
if (token.next().type() == Symbols.DOT) {
  this.mode=ACCESS_2;
  this.dotless=false;
  pm.skip();
  return;
}
pm.popParser();
return;
}
pm.popParser(true);
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == TUPLE_END) {
this.mode=ACCESS | LAMBDA;
if (type == Symbols.CLOSE_PARENTHESIS) {
this.value.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS) {
this.mode=PARAMETERS_END;
if (type == Symbols.OPEN_PARENTHESIS) {
ICall call=(ICall)this.value;
call.setArguments(this.getArguments(pm,token.next()));
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == PARAMETERS_END) {
this.mode=ACCESS;
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == CONSTRUCTOR_END) {
this.mode=ACCESS;
if (token.next().type() == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc=((ConstructorCall)this.value).toClassConstructor();
pm.skip();
pm.pushParser(new ClassBodyParser(cc.getNestedClass()));
this.value=cc;
this.mode=LIST_END;
return;
}
this.value.expandPosition(token);
if (type == Symbols.CLOSE_PARENTHESIS) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.mode == FUNCTION_POINTER) {
pm.popParser();
if (ParserUtil.isIdentifier(type)) {
FunctionPointer fl=new FunctionPointer(token.raw(),token.nameValue());
fl.instance=this.value;
this.field.setValue(fl);
return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
if (this.mode == BYTECODE_END) {
this.field.setValue(this.value);
pm.popParser();
this.value.expandPosition(token);
if (type == Symbols.CLOSE_CURLY_BRACKET) {
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (ParserUtil.isCloseBracket(type)) {
if (this.value != null) {
this.field.setValue(this.value);
}
pm.popParser(true);
return;
}
if (this.isInMode(LAMBDA)) {
if (type == Symbols.ARROW_OPERATOR) {
LambdaExpression lv=getLambdaValue(this.value);
if (lv != null) {
  lv.expandPosition(token);
  this.field.setValue(lv);
  pm.popParser();
  pm.pushParser(new ExpressionParser(lv));
  return;
}
throw new SyntaxError(token,""String_Node_Str"");
}
}
if (this.isInMode(ACCESS)) {
if (type == Symbols.DOT) {
this.mode=ACCESS_2;
this.dotless=false;
return;
}
if (type == Symbols.HASH) {
this.mode=FUNCTION_POINTER;
return;
}
this.dotless=true;
this.mode=ACCESS_2;
if (type == Keywords.ELSE) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
if (type == Symbols.EQUALS) {
this.getAssign(pm,token);
return;
}
if (type == Keywords.AS) {
CastOperator co=new CastOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(co));
this.value=co;
return;
}
if (type == Keywords.IS) {
InstanceOfOperator io=new InstanceOfOperator(token.raw(),this.value);
pm.pushParser(new TypeParser(io));
this.value=io;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
IToken prev=token.prev();
IToken next=token.next();
IArguments args;
args=this.getArguments(pm,next);
int prevType=prev.type();
if (ParserUtil.isIdentifier(prevType)) {
  MethodCall mc=new MethodCall(prev,null,prev.nameValue());
  mc.arguments=args;
  this.value=mc;
}
 else if (prevType == Symbols.CLOSE_SQUARE_BRACKET) {
  MethodCall mc;
  if (this.value.valueTag() == IValue.FIELD_ACCESS) {
    mc=((FieldAccess)this.value).toMethodCall(null);
  }
 else {
    mc=(MethodCall)this.value;
  }
  mc.arguments=args;
  this.value=mc;
}
 else {
  ApplyMethodCall amc=new ApplyMethodCall(this.value.getPosition());
  amc.instance=this.value;
  amc.arguments=args;
  this.value=amc;
}
this.mode=PARAMETERS_END;
return;
}
}
if (this.isInMode(ACCESS_2)) {
if (ParserUtil.isIdentifier(type)) {
Name name=token.nameValue();
if (this.prefix) {
  this.field.setValue(this.value);
  pm.popParser(true);
  return;
}
if (this.dotless && this.operator != null) {
  Operator operator=pm.getOperator(name);
  int p=this.operator.precedence;
  if (p > operator.precedence) {
    this.field.setValue(this.value);
    pm.popParser(true);
    return;
  }
  if (p == operator.precedence) {
switch (operator.type) {
case Operator.INFIX_LEFT:
      this.field.setValue(this.value);
    pm.popParser(true);
  return;
case Operator.INFIX_NONE:
throw new SyntaxError(token,""String_Node_Str"" + name + ""String_Node_Str"");
case Operator.INFIX_RIGHT:
}
}
}
this.getAccess(pm,name,token,type);
return;
}
if (ParserUtil.isTerminator(type)) {
this.field.setValue(this.value);
pm.popParser(true);
return;
}
IToken prev=token.prev();
if (ParserUtil.isIdentifier(prev.type())) {
this.value=null;
pm.reparse();
this.getAccess(pm,prev.nameValue(),prev,type);
return;
}
if (this.value != null) {
ApplyMethodCall call=new ApplyMethodCall(token.raw());
call.instance=this.value;
SingleArgument sa=new SingleArgument();
call.arguments=sa;
this.value=call;
this.mode=0;
pm.pushParser(new ExpressionParser(sa),true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}
if (this.isInMode(CONSTRUCTOR)) {
ConstructorCall cc=(ConstructorCall)this.value;
if (type == Symbols.OPEN_CURLY_BRACKET) {
ClassConstructor cc2=cc.toClassConstructor();
pm.pushParser(new ClassBodyParser(cc2.getNestedClass()));
this.mode=LIST_END;
this.value=cc2;
return;
}
if (type == Symbols.OPEN_PARENTHESIS) {
ArgumentList list=new ArgumentList();
cc.arguments=list;
pm.pushParser(new ExpressionListParser(list));
this.mode=CONSTRUCTOR_END;
return;
}
SingleArgument sa=new SingleArgument();
cc.arguments=sa;
pm.pushParser(new ExpressionParser(sa),true);
this.mode=0;
return;
}
if (this.value != null) {
this.value.expandPosition(token);
this.field.setValue(this.value);
pm.popParser(true);
return;
}
throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.978429882504238
84956,"@Override public void run(){
  String mainType=DyvilCompiler.config.mainType;
  String[] args=DyvilCompiler.config.getMainArgs();
  PrintStream out=System.out;
  PrintStream err=System.err;
  System.setOut(DyvilCompiler.loggerOut);
  System.setErr(DyvilCompiler.loggerErr);
  try {
    long now=System.currentTimeMillis();
    URL url=DyvilCompiler.config.outputDir.toURI().toURL();
    Class c=Class.forName(mainType,false,new URLClassLoader(new URL[]{url},ClassLoader.getSystemClassLoader()));
    Method m=c.getMethod(""String_Node_Str"",String[].class);
    m.invoke(null,new Object[]{args});
    now=System.currentTimeMillis() - now;
    DyvilCompiler.logger.log(Level.INFO,""String_Node_Str"" + Util.toTime(now) + ""String_Node_Str"");
  }
 catch (  VerifyError ve) {
    System.setOut(out);
    System.setErr(err);
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(mainType).append('\n');
    builder.append(""String_Node_Str"").append(Arrays.toString(args));
    builder.append(""String_Node_Str"");
    DyvilCompiler.logger.log(Level.SEVERE,builder.toString(),ve);
  }
catch (  InvocationTargetException ex) {
    System.setOut(out);
    System.setErr(err);
    DyvilCompiler.logger.log(Level.SEVERE,""String_Node_Str"",ex.getCause());
    return;
  }
catch (  Throwable ex) {
    System.setOut(out);
    System.setErr(err);
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(mainType).append('\n');
    builder.append(""String_Node_Str"").append(Arrays.toString(args));
    builder.append(""String_Node_Str"");
    DyvilCompiler.logger.log(Level.SEVERE,builder.toString(),ex);
    return;
  }
  System.setOut(out);
  System.setErr(err);
}","@Override public void run(){
  String mainType=DyvilCompiler.config.mainType;
  String[] args=DyvilCompiler.config.getMainArgs();
  PrintStream out=System.out;
  PrintStream err=System.err;
  System.setOut(DyvilCompiler.loggerOut);
  System.setErr(DyvilCompiler.loggerErr);
  try {
    long now=System.currentTimeMillis();
    Class c=Class.forName(mainType,false,createClassLoader());
    Method m=c.getMethod(""String_Node_Str"",String[].class);
    m.invoke(null,new Object[]{args});
    now=System.currentTimeMillis() - now;
    DyvilCompiler.logger.log(Level.INFO,""String_Node_Str"" + Util.toTime(now) + ""String_Node_Str"");
  }
 catch (  VerifyError ve) {
    System.setOut(out);
    System.setErr(err);
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(mainType).append('\n');
    builder.append(""String_Node_Str"").append(Arrays.toString(args));
    builder.append(""String_Node_Str"");
    DyvilCompiler.logger.log(Level.SEVERE,builder.toString(),ve);
  }
catch (  InvocationTargetException ex) {
    System.setOut(out);
    System.setErr(err);
    DyvilCompiler.logger.log(Level.SEVERE,""String_Node_Str"",ex.getCause());
    return;
  }
catch (  Throwable ex) {
    System.setOut(out);
    System.setErr(err);
    StringBuilder builder=new StringBuilder(""String_Node_Str"");
    builder.append(""String_Node_Str"").append(mainType).append('\n');
    builder.append(""String_Node_Str"").append(Arrays.toString(args));
    builder.append(""String_Node_Str"");
    DyvilCompiler.logger.log(Level.SEVERE,builder.toString(),ex);
    return;
  }
  System.setOut(out);
  System.setErr(err);
}",0.9574970484061394
84957,"/** 
 * Returns an empty collection. This method is primarily for use with the  {@code nil} literal in <i>Dyvil</i>.
 * @see List#apply()
 * @return an empty collection
 */
public static <E>Collection<E> apply(){
  return List.apply();
}","public static <E>Collection<E> apply(E... elements){
  return List.apply(elements);
}",0.3975155279503105
84958,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.isInMode(MODIFIERS)) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.theClass.addModifier(i);
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.theClass.addModifier(i);
      this.theClass.setMetadata(IClass.getClassMetadata(this.theClass,this.theClass.getModifiers()));
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.theClass.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
  }
  if (this.isInMode(NAME)) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass.setPosition(token.raw());
      this.theClass.setName(token.nameValue());
      this.classList.addClass(this.theClass);
      this.mode=PARAMETERS | GENERICS | EXTENDS| IMPLEMENTS| BODY;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.isInMode(PARAMETERS_END)) {
    this.mode=GENERICS | EXTENDS | IMPLEMENTS| BODY;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.isInMode(GENERICS_END)) {
    this.mode=PARAMETERS | EXTENDS | IMPLEMENTS| BODY;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      pm.pushParser(new TypeParser(this));
      this.mode=IMPLEMENTS | BODY;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      pm.pushParser(new ClassBodyParser(this.theClass));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      pm.popParser();
      this.theClass.expandPosition(token);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(BODY_END)) {
    if (type == Symbols.CLOSE_CURLY_BRACKET) {
      pm.popParser();
      this.theClass.expandPosition(token);
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.isInMode(MODIFIERS)) {
    int i=0;
    if ((i=ModifierTypes.CLASS.parse(type)) != -1) {
      this.theClass.addModifier(i);
      return;
    }
    if ((i=ModifierTypes.CLASS_TYPE.parse(type)) != -1) {
      this.theClass.addModifier(i);
      this.theClass.setMetadata(IClass.getClassMetadata(this.theClass,this.theClass.getModifiers()));
      this.mode=NAME;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.theClass.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
  }
  if (this.isInMode(NAME)) {
    if (ParserUtil.isIdentifier(type)) {
      this.theClass.setPosition(token.raw());
      this.theClass.setName(token.nameValue());
      this.classList.addClass(this.theClass);
      this.mode=PARAMETERS | GENERICS | EXTENDS| IMPLEMENTS| BODY;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.isInMode(PARAMETERS)) {
    if (type == Symbols.OPEN_PARENTHESIS) {
      pm.pushParser(new ParameterListParser(this.theClass));
      this.mode=PARAMETERS_END;
      return;
    }
  }
  if (this.isInMode(PARAMETERS_END)) {
    this.mode=GENERICS | EXTENDS | IMPLEMENTS| BODY;
    if (type == Symbols.CLOSE_PARENTHESIS) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(GENERICS)) {
    if (type == Symbols.OPEN_SQUARE_BRACKET) {
      pm.pushParser(new TypeVariableListParser(this.theClass));
      this.theClass.setGeneric();
      this.mode=GENERICS_END;
      return;
    }
  }
  if (this.isInMode(GENERICS_END)) {
    this.mode=PARAMETERS | EXTENDS | IMPLEMENTS| BODY;
    if (type == Symbols.CLOSE_SQUARE_BRACKET) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"",true);
  }
  if (this.isInMode(EXTENDS)) {
    if (type == Keywords.EXTENDS) {
      pm.pushParser(new TypeParser(this));
      this.mode=IMPLEMENTS | BODY;
      return;
    }
  }
  if (this.isInMode(IMPLEMENTS)) {
    if (type == Keywords.IMPLEMENTS) {
      pm.pushParser(new TypeListParser(this));
      this.mode=BODY;
      return;
    }
  }
  if (this.isInMode(BODY)) {
    if (type == Symbols.OPEN_CURLY_BRACKET) {
      pm.pushParser(new ClassBodyParser(this.theClass));
      this.mode=BODY_END;
      return;
    }
    if (ParserUtil.isTerminator(type)) {
      if (token.isInferred()) {
        int nextType=token.next().type();
switch (nextType) {
case Keywords.EXTENDS:
          this.mode=EXTENDS;
        return;
case Keywords.IMPLEMENTS:
      this.mode=IMPLEMENTS;
    return;
case Symbols.OPEN_SQUARE_BRACKET:
  this.mode=GENERICS;
return;
case Symbols.OPEN_PARENTHESIS:
this.mode=PARAMETERS;
return;
}
}
pm.popParser();
this.theClass.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
if (this.isInMode(BODY_END)) {
if (type == Symbols.CLOSE_CURLY_BRACKET) {
pm.popParser();
this.theClass.expandPosition(token);
return;
}
throw new SyntaxError(token,""String_Node_Str"",true);
}
}",0.9140586189766516
84959,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.packageDeclaration.setPackage(this.buffer.toString());
    pm.popParser();
    return;
  }
  if (type == Symbols.DOT) {
    this.buffer.append('.');
    return;
  }
  if (ParserUtil.isIdentifier(type)) {
    this.buffer.append(token.nameValue().qualified);
    return;
  }
  throw new SyntaxError(token,""String_Node_Str"" + token);
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.SEMICOLON) {
    this.packageDeclaration.setPackage(this.buffer.toString());
    pm.popParser();
    return;
  }
  if (type == Keywords.TYPE) {
    this.buffer.append(""String_Node_Str"");
    return;
  }
  if (type == Keywords.ANNOTATION) {
    this.buffer.append(""String_Node_Str"");
    return;
  }
  if (type == Symbols.DOT) {
    this.buffer.append('.');
    return;
  }
  if (ParserUtil.isIdentifier(type)) {
    this.buffer.append(token.nameValue().qualified);
    return;
  }
  throw new SyntaxError(token,""String_Node_Str"" + token);
}",0.8382608695652174
84960,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == TYPE) {
    int i=0;
    if ((i=ModifierTypes.PARAMETER.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=NAME;
    pm.pushParser(new TypeParser(this),true);
    return;
  }
  if (this.mode == NAME) {
    if (type == Symbols.ELLIPSIS) {
      this.varargs=true;
      return;
    }
    this.mode=SEPERATOR;
    if (ParserUtil.isIdentifier(type)) {
      if (this.varargs) {
        this.paramList.setVarargs();
        this.type=new ArrayType(this.type);
      }
      this.parameter=this.paramList instanceof IClass ? new ClassParameter(token.nameValue(),this.type) : new MethodParameter(token.nameValue(),this.type);
      this.parameter.setModifiers(this.modifiers);
      this.parameter.setAnnotations(this.getAnnotations(),this.annotationCount);
      this.parameter.setVarargs(this.varargs);
      this.paramList.addParameter(this.parameter);
      this.varargs=false;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == SEPERATOR) {
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    if (type == Symbols.EQUALS) {
      pm.pushParser(new ExpressionParser(this.parameter));
      return;
    }
    this.reset();
    if (type == Symbols.COMMA) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (this.mode == TYPE) {
    if (type == Symbols.SEMICOLON && token.isInferred()) {
      return;
    }
    int i=0;
    if ((i=ModifierTypes.PARAMETER.parse(type)) != -1) {
      this.modifiers|=i;
      return;
    }
    if (token.nameValue() == Name.at) {
      Annotation annotation=new Annotation(token.raw());
      this.addAnnotation(annotation);
      pm.pushParser(new AnnotationParser(annotation));
      return;
    }
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=NAME;
    pm.pushParser(new TypeParser(this),true);
    return;
  }
  if (this.mode == NAME) {
    if (type == Symbols.ELLIPSIS) {
      this.varargs=true;
      return;
    }
    this.mode=SEPERATOR;
    if (ParserUtil.isIdentifier(type)) {
      if (this.varargs) {
        this.paramList.setVarargs();
        this.type=new ArrayType(this.type);
      }
      this.parameter=this.paramList instanceof IClass ? new ClassParameter(token.nameValue(),this.type) : new MethodParameter(token.nameValue(),this.type);
      this.parameter.setModifiers(this.modifiers);
      this.parameter.setAnnotations(this.getAnnotations(),this.annotationCount);
      this.parameter.setVarargs(this.varargs);
      this.paramList.addParameter(this.parameter);
      this.varargs=false;
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
  if (this.mode == SEPERATOR) {
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    if (type == Symbols.EQUALS) {
      pm.pushParser(new ExpressionParser(this.parameter));
      return;
    }
    this.reset();
    if (type == Symbols.COMMA || type == Symbols.SEMICOLON) {
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.9703622392974752
84961,"@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.COLON) {
      this.label=token.nameValue();
      pm.skip();
      return;
    }
    this.firstToken=token;
    this.parser=this.typeParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type == null) {
        this.typeParser.end();
      }
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.typeParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      this.mode=EXPRESSION;
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}","@Override public void parse(IParserManager pm,IToken token) throws SyntaxError {
  int type=token.type();
  if (type == Symbols.CLOSE_CURLY_BRACKET) {
    pm.popParser(true);
    return;
  }
  if (this.mode == EXPRESSION) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.COLON) {
      this.label=token.nameValue();
      pm.skip();
      return;
    }
    this.firstToken=token;
    this.parser=this.typeParser=new TypeParser(this);
    this.pm=pm;
    this.mode=TYPE;
  }
  if (this.mode == TYPE) {
    if (ParserUtil.isIdentifier(type) && token.next().type() == Symbols.EQUALS) {
      if (this.type == null) {
        this.typeParser.end();
      }
      if (this.type != null) {
        FieldInitializer fi=new FieldInitializer(token.raw(),token.nameValue(),this.type);
        pm.pushParser(new ExpressionParser(fi));
        this.statementList.addValue(fi);
      }
 else {
        FieldAssign fa=new FieldAssign(token.raw(),null,token.nameValue());
        pm.pushParser(new ExpressionParser(fa));
        this.statementList.addValue(fa);
      }
      this.reset();
      this.mode=SEPARATOR;
      pm.skip();
      return;
    }
 else     if (this.typeParser == null) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
      return;
    }
    try {
      this.parser.parse(this,token);
    }
 catch (    Throwable ex) {
      pm.jump(this.firstToken);
      this.reset();
      pm.pushParser(new ExpressionParser(this));
      this.mode=SEPARATOR;
    }
    return;
  }
  if (this.mode == SEPARATOR) {
    if (type == Symbols.SEMICOLON) {
      this.mode=EXPRESSION;
      return;
    }
    if (ParserUtil.isCloseBracket(type)) {
      pm.popParser(true);
      return;
    }
    this.mode=EXPRESSION;
    if (token.prev().type() == Symbols.CLOSE_CURLY_BRACKET) {
      pm.reparse();
      return;
    }
    throw new SyntaxError(token,""String_Node_Str"");
  }
}",0.986336032388664
84962,"@Override public void apply(Collection<ICompilationUnit> units){
  for (  ICompilationUnit unit : units) {
    this.apply.accept(unit);
  }
}","@Override public void apply(Collection<ICompilationUnit> units){
  for (  ICompilationUnit unit : units) {
    try {
      this.apply.accept(unit);
    }
 catch (    Throwable t) {
      DyvilCompiler.logger.warning(this.name + ""String_Node_Str"" + unit.getInputFile()+ ""String_Node_Str"");
      DyvilCompiler.logger.throwing(this.name,""String_Node_Str"",t);
    }
  }
}",0.5540275049115914
84963,"@Override public void write(ClassWriter writer){
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  writer.visit(DyvilCompiler.classVersion,this.modifiers & 0xFFFF,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  StatementList staticFields=new StatementList();
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.value=f.getValue();
      assign.field=f;
      staticFields.addValue(assign);
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  this.metadata.write(writer,instanceFields);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].write(writer);
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  IField instanceField=this.metadata.getInstanceField();
  if (instanceField != null) {
    FieldAssign assign=new FieldAssign(null);
    assign.name=Name.instance;
    assign.field=instanceField;
    ConstructorCall call=new ConstructorCall(null);
    call.type=this.type;
    call.constructor=this.metadata.getConstructor();
    assign.value=call;
    staticFields.addValue(assign);
  }
 else   if (staticFields.isEmpty()) {
    return;
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  staticFields.writeStatement(mw);
  mw.end(Types.VOID);
}","@Override public void write(ClassWriter writer){
  String internalName=this.getInternalName();
  String signature=this.getSignature();
  String superClass=null;
  String[] interfaces=this.getInterfaceArray();
  if (this.superType != null) {
    superClass=this.superType.getInternalName();
  }
  writer.visit(DyvilCompiler.classVersion,this.modifiers & 0xFFFF | Opcodes.ACC_SUPER,internalName,signature,superClass,interfaces);
  if (this.outerClass != null) {
    writer.visitOuterClass(this.outerClass.getInternalName(),null,null);
  }
  if ((this.modifiers & Modifiers.OBJECT_CLASS) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.SEALED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",false);
  }
  if ((this.modifiers & Modifiers.DEPRECATED) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  if ((this.modifiers & Modifiers.FUNCTIONAL) != 0) {
    writer.visitAnnotation(""String_Node_Str"",true);
  }
  for (int i=0; i < this.annotationCount; i++) {
    this.annotations[i].write(writer);
  }
  if (this.outerClass != null) {
    this.writeInnerClassInfo(writer);
  }
  if (this.superType != null) {
    IClass iclass=this.superType.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  for (int i=0; i < this.interfaceCount; i++) {
    IType type=this.interfaces[i];
    IClass iclass=type.getTheClass();
    if (iclass != null) {
      iclass.writeInnerClassInfo(writer);
    }
  }
  int fields=0;
  int constructors=0;
  int methods=0;
  int properties=0;
  if (this.body != null) {
    fields=this.body.fieldCount();
    methods=this.body.methodCount();
    constructors=this.body.constructorCount();
    properties=this.body.propertyCount();
    int classes=this.body.classCount();
    for (int i=0; i < classes; i++) {
      this.body.getClass(i).writeInnerClassInfo(writer);
    }
  }
  ThisValue thisValue=new ThisValue(this.type);
  StatementList instanceFields=new StatementList();
  StatementList staticFields=new StatementList();
  for (int i=0; i < fields; i++) {
    IField f=this.body.getField(i);
    f.write(writer);
    if (f.hasModifier(Modifiers.LAZY)) {
      continue;
    }
    if (f.hasModifier(Modifiers.STATIC)) {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.value=f.getValue();
      assign.field=f;
      staticFields.addValue(assign);
    }
 else {
      FieldAssign assign=new FieldAssign(null);
      assign.name=f.getName();
      assign.instance=thisValue;
      assign.value=f.getValue();
      assign.field=f;
      instanceFields.addValue(assign);
    }
  }
  this.metadata.write(writer,instanceFields);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].write(writer);
  }
  for (int i=0; i < constructors; i++) {
    this.body.getConstructor(i).write(writer,instanceFields);
  }
  for (int i=0; i < properties; i++) {
    this.body.getProperty(i).write(writer);
  }
  for (int i=0; i < methods; i++) {
    this.body.getMethod(i).write(writer);
  }
  for (int i=0; i < this.compilableCount; i++) {
    this.compilables[i].write(writer);
  }
  IField instanceField=this.metadata.getInstanceField();
  if (instanceField != null) {
    FieldAssign assign=new FieldAssign(null);
    assign.name=Name.instance;
    assign.field=instanceField;
    ConstructorCall call=new ConstructorCall(null);
    call.type=this.type;
    call.constructor=this.metadata.getConstructor();
    assign.value=call;
    staticFields.addValue(assign);
  }
 else   if (staticFields.isEmpty()) {
    return;
  }
  MethodWriter mw=new MethodWriterImpl(writer,writer.visitMethod(Modifiers.STATIC,""String_Node_Str"",""String_Node_Str"",null,null));
  mw.begin();
  staticFields.writeStatement(mw);
  mw.end(Types.VOID);
}",0.997366341848828
84964,"@Override public String getSignature(){
  if (this.genericCount == 0 && !this.theClass.isGeneric()) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  if (this.genericCount > 0) {
    buffer.append('<');
    for (int i=0; i < this.genericCount; i++) {
      this.generics[i].appendSignature(buffer);
    }
    buffer.append('>');
  }
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendSignature(buffer);
  }
  buffer.append(')');
  this.type.appendExtendedName(buffer);
  return buffer.toString();
}","@Override public String getSignature(){
  if (this.genericCount == 0 && !this.theClass.isGeneric()) {
    return null;
  }
  StringBuilder buffer=new StringBuilder();
  if (this.genericCount > 0) {
    buffer.append('<');
    for (int i=0; i < this.genericCount; i++) {
      this.generics[i].appendSignature(buffer);
    }
    buffer.append('>');
  }
  buffer.append('(');
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].getType().appendSignature(buffer);
  }
  buffer.append(')');
  this.type.appendSignature(buffer);
  return buffer.toString();
}",0.983435047951177
84965,@Override public int columnOf(E element);,@Override public int columnOf(Object element);,0.9195402298850576
84966,"@Override public Tuple2<Int,Int> cellOf(E element);","@Override public Tuple2<Int,Int> cellOf(Object element);",0.9345794392523364
84967,@Override public int rowOf(E element);,@Override public int rowOf(Object element);,0.9135802469135802
84968,@Override public int columnOf(E element);,@Override public int columnOf(Object element);,0.9195402298850576
84969,"@Override public Tuple2<Int,Int> cellOf(E element);","@Override public Tuple2<Int,Int> cellOf(Object element);",0.9345794392523364
84970,@Override public int rowOf(E element);,@Override public int rowOf(Object element);,0.9135802469135802
84971,public int columnOf(E element);,public int columnOf(Object element);,0.8955223880597015
84972,"public Tuple2<Int,Int> cellOf(E element);","public Tuple2<Int,Int> cellOf(Object element);",0.9195402298850576
84973,public int rowOf(E element);,public int rowOf(Object element);,0.8852459016393442
84974,"@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Class.bodyStart).append('\n');
  String prefix1=prefix + Formatting.Class.bodyIndent;
  if (this.classCount > 0) {
    for (int i=0; i < this.classCount; i++) {
      IClass c=this.classes[i];
      if (c != this.theClass) {
        c.toString(prefix1,buffer);
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.fieldCount > 0) {
    for (int i=0; i < this.fieldCount; i++) {
      this.fields[i].toString(prefix1,buffer);
      buffer.append('\n');
    }
    buffer.append('\n');
  }
  if (this.constructorCount > 0) {
    for (int i=0; i < this.constructorCount; i++) {
      this.constructors[i].toString(prefix1,buffer);
      if (i + 1 < this.constructorCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.propertyCount > 0) {
    for (int i=0; i < this.propertyCount; i++) {
      this.properties[i].toString(prefix1,buffer);
      if (i + 1 < this.propertyCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.methodCount > 0) {
    for (int i=0; i < this.methodCount; i++) {
      IMethod method=this.methods[i];
      method.toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.methodCount) {
        buffer.append('\n');
      }
    }
  }
  buffer.append(prefix).append(Formatting.Class.bodyEnd);
}","@Override public void toString(String prefix,StringBuilder buffer){
  buffer.append(Formatting.Class.bodyStart).append('\n');
  String prefix1=prefix + Formatting.Class.bodyIndent;
  if (this.classCount > 0) {
    for (int i=0; i < this.classCount; i++) {
      this.classes[i].toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.classCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.fieldCount > 0) {
    for (int i=0; i < this.fieldCount; i++) {
      this.fields[i].toString(prefix1,buffer);
      buffer.append('\n');
    }
    buffer.append('\n');
  }
  if (this.constructorCount > 0) {
    for (int i=0; i < this.constructorCount; i++) {
      this.constructors[i].toString(prefix1,buffer);
      if (i + 1 < this.constructorCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.propertyCount > 0) {
    for (int i=0; i < this.propertyCount; i++) {
      this.properties[i].toString(prefix1,buffer);
      if (i + 1 < this.propertyCount) {
        buffer.append('\n');
      }
    }
    buffer.append('\n');
  }
  if (this.methodCount > 0) {
    for (int i=0; i < this.methodCount; i++) {
      IMethod method=this.methods[i];
      method.toString(prefix1,buffer);
      buffer.append('\n');
      if (i + 1 < this.methodCount) {
        buffer.append('\n');
      }
    }
  }
  buffer.append(prefix).append(Formatting.Class.bodyEnd);
}",0.9597780859916782
84975,"@Override public void resolve(MarkerList markers,IContext context){
  for (int i=0; i < this.annotationCount; i++) {
    Annotation a=this.annotations[i];
    String fullName=a.type.getInternalName();
    if (fullName != null && this.addRawAnnotation(fullName)) {
      this.removeAnnotation(i--);
      continue;
    }
    a.resolve(markers,context);
  }
  this.metadata.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,this);
  }
  if (this.body != null) {
    this.body.resolve(markers,this);
  }
}","@Override public void resolve(MarkerList markers,IContext context){
  for (int i=0; i < this.annotationCount; i++) {
    Annotation a=this.annotations[i];
    String fullName=a.type.getInternalName();
    if (fullName != null && !this.addRawAnnotation(fullName)) {
      this.removeAnnotation(i--);
      continue;
    }
    a.resolve(markers,context);
  }
  this.metadata.resolve(markers,context);
  for (int i=0; i < this.parameterCount; i++) {
    this.parameters[i].resolve(markers,this);
  }
  if (this.body != null) {
    this.body.resolve(markers,this);
  }
}",0.9991158267020336
84976,"@Override public void toString(String prefix,StringBuilder buffer){
  for (int i=0; i < this.annotationCount; i++) {
    buffer.append(prefix);
    this.annotations[i].toString(prefix,buffer);
    buffer.append('\n');
  }
  buffer.append(prefix).append(ModifierTypes.CLASS.toString(this.modifiers));
  buffer.append(ModifierTypes.CLASS_TYPE.toString(this.modifiers)).append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  if (this.parameterCount > 0) {
    buffer.append('(');
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(')');
  }
  if (this.superType == null) {
    buffer.append(""String_Node_Str"");
  }
 else   if (this.superType != Types.OBJECT) {
    buffer.append(""String_Node_Str"");
    this.superType.toString(""String_Node_Str"",buffer);
  }
  if (this.interfaceCount > 0) {
    buffer.append(""String_Node_Str"");
    Util.astToString(prefix,this.interfaces,this.interfaceCount,Formatting.Class.superClassesSeperator,buffer);
  }
  if (this.body != null) {
    buffer.append('\n');
    this.body.toString(prefix,buffer);
  }
 else {
    buffer.append(';');
  }
}","@Override public void toString(String prefix,StringBuilder buffer){
  for (int i=0; i < this.annotationCount; i++) {
    buffer.append(prefix);
    this.annotations[i].toString(prefix,buffer);
    buffer.append('\n');
  }
  buffer.append(prefix).append(ModifierTypes.CLASS.toString(this.modifiers));
  buffer.append(ModifierTypes.CLASS_TYPE.toString(this.modifiers)).append(this.name);
  if (this.genericCount > 0) {
    buffer.append('[');
    Util.astToString(prefix,this.generics,this.genericCount,Formatting.Type.genericSeperator,buffer);
    buffer.append(']');
  }
  if (this.parameterCount > 0) {
    buffer.append('(');
    Util.astToString(prefix,this.parameters,this.parameterCount,Formatting.Method.parameterSeperator,buffer);
    buffer.append(')');
  }
  if (this.superType == null) {
    buffer.append(""String_Node_Str"");
  }
 else   if (this.superType != Types.OBJECT) {
    buffer.append(""String_Node_Str"");
    this.superType.toString(""String_Node_Str"",buffer);
  }
  if (this.interfaceCount > 0) {
    buffer.append(""String_Node_Str"");
    Util.astToString(prefix,this.interfaces,this.interfaceCount,Formatting.Class.superClassesSeperator,buffer);
  }
  if (this.body != null) {
    buffer.append('\n').append(prefix);
    this.body.toString(prefix,buffer);
  }
 else {
    buffer.append(';');
  }
}",0.9942726231386024
84977,"@Override public int getTypeMatch(IType type){
  if (this.type.equals(type)) {
    return 3;
  }
 else   if (type.isSuperTypeOf(this.type)) {
    return 2;
  }
  return 0;
}","@Override public int getTypeMatch(IType type){
  if (this.type.equals(type)) {
    return 3;
  }
  if (type.isSuperTypeOf(this.type)) {
    return 2;
  }
  return 0;
}",0.9823529411764704
84978,"@Override public void check(MarkerList markers,IContext context){
  this.value.check(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (primitiveType) {
    if (!primitiveValue) {
      markers.add(this.position,""String_Node_Str"");
    }
  }
 else   if (primitiveValue) {
    markers.add(this.position,""String_Node_Str"");
  }
 else   if (this.value.isType(this.type)) {
    markers.add(this.position,""String_Node_Str"");
  }
}","@Override public void check(MarkerList markers,IContext context){
  this.value.check(markers,context);
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
  }
  boolean primitiveType=this.type.isPrimitive();
  boolean primitiveValue=this.value.isPrimitive();
  if (primitiveType) {
    if (!primitiveValue) {
      markers.add(this.position,""String_Node_Str"");
    }
  }
 else   if (primitiveValue) {
    markers.add(this.position,""String_Node_Str"");
  }
}",0.9085820895522388
84979,"@Override public void checkTypes(MarkerList markers,IContext context){
  IValue value1=this.value.withType(this.type);
  if (value1 != null) {
    this.value=value1;
  }
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
  }
  this.value.checkTypes(markers,context);
}",0.7620751341681574
84980,"public static void writeToString(MethodWriter writer,IType type){
  int dims=type.getArrayDimensions();
switch (dims) {
case 0:
    StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.classEquals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
desc.append(""String_Node_Str"");
writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
return;
case 1:
writer.writeInsn(Opcodes.SWAP);
writer.writeInsn(Opcodes.DUP_X1);
writeArrayToString(writer,type);
return;
default :
writer.writeInsn(Opcodes.SWAP);
writer.writeInsn(Opcodes.DUP_X1);
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
}
}","public static void writeToString(MethodWriter writer,IType type){
  if (type.isArrayType()) {
    writer.writeInsn(Opcodes.SWAP);
    writer.writeInsn(Opcodes.DUP_X1);
    writeArrayToString(writer,type.getElementType());
    return;
  }
  StringBuilder desc=new StringBuilder().append('(');
  if (type.isPrimitive()) {
    type.appendExtendedName(desc);
  }
 else   if (type.classEquals(Types.STRING)) {
    desc.append(""String_Node_Str"");
  }
 else {
    desc.append(""String_Node_Str"");
  }
  desc.append(""String_Node_Str"");
  writer.writeInvokeInsn(INVOKEVIRTUAL,""String_Node_Str"",""String_Node_Str"",desc.toString(),false);
  return;
}",0.5912208504801097
84981,"public static void writeArrayToString(MethodWriter writer,IType type){
  if (type.typeTag() == IType.PRIMITIVE_TYPE) {
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
      writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    return;
case ClassFormat.T_BYTE:
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_SHORT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_CHAR:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_INT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_LONG:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
}
}
 else {
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
}
}","public static void writeArrayToString(MethodWriter writer,IType type){
switch (type.typeTag()) {
case IType.PRIMITIVE_TYPE:
switch (((PrimitiveType)type).typecode) {
case ClassFormat.T_BOOLEAN:
      writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
    return;
case ClassFormat.T_BYTE:
  writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_SHORT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_CHAR:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_INT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_LONG:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_FLOAT:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
case ClassFormat.T_DOUBLE:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
default :
return;
}
case IType.ARRAY_TYPE:
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
default :
writer.writeInvokeInsn(Opcodes.INVOKESTATIC,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",true);
return;
}
}",0.93104608139926
84982,"@Override public void writeExpression(MethodWriter writer){
  if (this.method != null) {
    this.method.writeCall(writer,null,this.arguments,this.tupleType);
    return;
  }
  TupleType tt=(TupleType)this.tupleType;
  writer.writeTypeInsn(Opcodes.NEW,this.tupleType.getInternalName());
  writer.writeInsn(Opcodes.DUP);
  for (int i=0; i < this.valueCount; i++) {
    this.values[i].writeExpression(writer);
  }
  String owner=tt.getInternalName();
  String desc=tt.getConstructorDescriptor();
  writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,owner,""String_Node_Str"",desc,false);
}","@Override public void writeExpression(MethodWriter writer){
  if (this.method != null) {
    this.method.writeCall(writer,null,this.arguments,this.tupleType);
    return;
  }
  String internal=this.tupleType.getInternalName();
  writer.writeTypeInsn(Opcodes.NEW,internal);
  writer.writeInsn(Opcodes.DUP);
  for (int i=0; i < this.valueCount; i++) {
    this.values[i].writeExpression(writer);
  }
  String owner=internal;
  String desc=TupleType.getConstructorDescriptor(this.valueCount);
  writer.writeInvokeInsn(Opcodes.INVOKESPECIAL,owner,""String_Node_Str"",desc,false);
}",0.8578856152512998
84983,"@Override public void checkTypes(MarkerList markers,IContext context){
  for (int i=0; i < this.valueCount; i++) {
    this.values[i].checkTypes(markers,context);
  }
  if (this.tupleType instanceof TupleType) {
    return;
  }
  IMethod m=IContext.resolveMethod(markers,this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,null,this.arguments,null);
  }
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.tupleType instanceof TupleType) {
    ITypeList typeList=(ITypeList)this.tupleType;
    for (int i=0; i < this.valueCount; i++) {
      IValue v1=this.values[i].withType(typeList.getType(i));
      if (v1 != null) {
        this.values[i]=v1;
      }
 else {
      }
      this.values[i].checkTypes(markers,context);
    }
    return;
  }
  IMethod m=IContext.resolveMethod(markers,this.getType(),null,Name.apply,this.arguments=new ArgumentList(this.values,this.valueCount));
  if (m == null) {
    StringBuilder builder=new StringBuilder();
    if (this.valueCount > 0) {
      this.values[0].getType().toString(""String_Node_Str"",builder);
      for (int i=1; i < this.valueCount; i++) {
        builder.append(""String_Node_Str"");
        this.values[i].getType().toString(""String_Node_Str"",builder);
      }
    }
    markers.add(this.position,""String_Node_Str"",builder.toString(),this.tupleType.toString());
  }
 else {
    this.method=m;
    m.checkArguments(markers,null,this.arguments,null);
  }
}",0.8568538189175519
84984,"@Override public void resolveTypes(MarkerList markers,IContext context){
  TupleType type=new TupleType();
  for (int i=0; i < this.valueCount; i++) {
    IValue v=this.values[i];
    v.resolveTypes(markers,context);
    type.addType(v.getType());
  }
  type.getTheClass();
  this.tupleType=type;
}","@Override public void resolveTypes(MarkerList markers,IContext context){
  TupleType tupleType=new TupleType();
  for (int i=0; i < this.valueCount; i++) {
    IValue v=this.values[i];
    v.resolveTypes(markers,context);
    IType t=v.getType();
    if (t.isPrimitive()) {
      tupleType.addType(t.getReferenceType());
    }
 else {
      tupleType.addType(t);
    }
  }
  this.tupleType=tupleType;
}",0.7371428571428571
84985,"@Override public IClass resolveClass(String name){
  for (  IClass iclass : this.classes) {
    if (name.equals(iclass.getName().qualified)) {
      return iclass;
    }
  }
  return this.loadClass(name);
}","@Override public synchronized IClass resolveClass(String name){
  for (  IClass iclass : this.classes) {
    if (name.equals(iclass.getName().qualified)) {
      return iclass;
    }
  }
  return this.loadClass(name);
}",0.9694117647058824
84986,"private IClass loadClass(String name){
synchronized (this) {
    InputStream is=this.library.getInputStream(this.internalName + name + ""String_Node_Str"");
    if (is != null) {
      ExternalClass bclass=new ExternalClass(Name.getQualified(name));
      this.classes.add(bclass);
      return ClassReader.loadClass(bclass,is,false);
    }
  }
  return null;
}","private IClass loadClass(String name,Library library){
  InputStream is=library.getInputStream(this.internalName + name + ""String_Node_Str"");
  if (is != null) {
    ExternalClass bclass=new ExternalClass(Name.getQualified(name));
    this.classes.add(bclass);
    return ClassReader.loadClass(bclass,is,false);
  }
  return null;
}",0.8769898697539797
84987,"@Override public Package resolvePackage(String name){
  Package pack=super.resolvePackage(name);
  if (pack != null) {
    return pack;
  }
  String name1=this.internalName + name;
  pack=this.library.resolvePackage(name1);
  if (pack != null) {
    this.addSubPackage(pack);
    return pack;
  }
  return null;
}","@Override public Package resolvePackage(String name){
  Package pack=super.resolvePackage(name);
  if (pack != null) {
    return pack;
  }
  String name1=this.internalName + name;
  pack=this.library.resolvePackage(name1);
  if (pack != null) {
    this.addSubPackage(pack);
    return pack;
  }
  for (  Library lib : DyvilCompiler.config.libraries) {
    if (lib == this.library) {
      continue;
    }
    pack=lib.resolvePackage(name1);
    if (pack != null) {
      this.addSubPackage(pack);
    }
  }
  return null;
}",0.7159904534606205
84988,"@Override public IClass getTheClass(){
  IClass iclass=tupleClasses[this.typeCount];
  if (iclass != null) {
    return iclass;
  }
  iclass=Package.dyvilTuple.resolveClass(""String_Node_Str"" + this.typeCount);
  tupleClasses[this.typeCount]=iclass;
  return iclass;
}","@Override public IClass getTheClass(){
  return getTupleClass(this.typeCount);
}",0.4092219020172911
84989,"@Override public IField resolveField(Name name){
  IField field=this.body.getProperty(name);
  if (field != null) {
    return field;
  }
  field=this.body.getField(name);
  if (field != null) {
    return field;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    IField match=this.superType.resolveField(name);
    if (match != null) {
      return match;
    }
  }
  return null;
}","@Override public IField resolveField(Name name){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  IField field=this.body.getProperty(name);
  if (field != null) {
    return field;
  }
  field=this.body.getField(name);
  if (field != null) {
    return field;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    IField match=this.superType.resolveField(name);
    if (match != null) {
      return match;
    }
  }
  return null;
}",0.9322033898305084
84990,"@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  this.body.getMethodMatches(list,instance,name,arguments);
  if (!list.isEmpty()) {
    return;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    this.superType.getMethodMatches(list,instance,name,arguments);
  }
  if (!list.isEmpty()) {
    return;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    this.interfaces[i].getMethodMatches(list,instance,name,arguments);
  }
}","@Override public void getMethodMatches(List<MethodMatch> list,IValue instance,Name name,IArguments arguments){
  if (!this.genericsResolved) {
    this.resolveGenerics();
  }
  this.body.getMethodMatches(list,instance,name,arguments);
  if (!list.isEmpty()) {
    return;
  }
  if (!this.superTypesResolved) {
    this.resolveSuperTypes();
  }
  if (this.superType != null) {
    this.superType.getMethodMatches(list,instance,name,arguments);
  }
  if (!list.isEmpty()) {
    return;
  }
  for (int i=0; i < this.interfaceCount; i++) {
    this.interfaces[i].getMethodMatches(list,instance,name,arguments);
  }
}",0.9448275862068966
84991,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return;
  }
  if (!this.typeHint && this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
  }
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type == Types.VOID) {
    markers.add(this.position,""String_Node_Str"");
    this.value.checkTypes(markers,context);
    return;
  }
  if (!this.typeHint && this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  if (this.type.isResolved()) {
    IValue value1=this.value.withType(this.type);
    if (value1 != null && value1 != this.value) {
      this.value=value1;
      this.typeHint=true;
    }
    this.value.checkTypes(markers,context);
  }
}",0.9585492227979274
84992,"@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(this.elements[0]);
  for (int i=1; i < this.size; i++) {
    buf.append(""String_Node_Str"");
    buf.append(this.elements[i]);
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder buf=new StringBuilder(this.size * 10).append('[');
  buf.append(this.elements[0]);
  for (int i=1; i < this.size; i++) {
    buf.append(""String_Node_Str"");
    buf.append(this.elements[i]);
  }
  buf.append(']');
  return buf.toString();
}",0.9103840682788052
84993,"@Override public String toString(){
  return ""String_Node_Str"" + this.element + ""String_Node_Str"";
}","@Override public String toString(){
  return new StringBuilder('[').append(this.element).append(']').toString();
}",0.7009345794392523
84994,"@Override public void $plus$plus$eq(Collection<? extends E> collection){
  int len=collection.size();
  this.ensureCapacity(this.size + len);
  Object[] array=collection.toArray();
  System.arraycopy(array,0,this.elements,this.size,len);
}","@Override public void $plus$plus$eq(Collection<? extends E> collection){
  int len=collection.size();
  this.ensureCapacity(this.size + len);
  Object[] array=collection.toArray();
  System.arraycopy(array,0,this.elements,this.size,len);
  this.size+=len;
}",0.9637096774193548
84995,"@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder buf=new StringBuilder(""String_Node_Str"");
  buf.append(this.elements[0]);
  for (int i=1; i < this.size; i++) {
    buf.append(""String_Node_Str"");
    buf.append(this.elements[i]);
  }
  buf.append(""String_Node_Str"");
  return buf.toString();
}","@Override public String toString(){
  if (this.size == 0) {
    return ""String_Node_Str"";
  }
  StringBuilder buf=new StringBuilder(this.size * 10).append('[');
  buf.append(this.elements[0]);
  for (int i=1; i < this.size; i++) {
    buf.append(""String_Node_Str"");
    buf.append(this.elements[i]);
  }
  buf.append(']');
  return buf.toString();
}",0.9103840682788052
84996,"@Override public void checkTypes(MarkerList markers,IContext context){
  IMethod match=IContext.resolveMethod(markers,this.type,null,Name.apply,this.argument);
  if (match == null) {
    IValue value=this.argument.getFirstValue();
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().toString(),this.type.toString());
  }
 else {
    this.method=match;
  }
  match.checkArguments(markers,null,this.argument,null);
  this.argument.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  IMethod match=IContext.resolveMethod(markers,this.type,null,Name.apply,this.argument);
  if (match == null) {
    IValue value=this.argument.getFirstValue();
    markers.add(value.getPosition(),""String_Node_Str"",value.getType().toString(),this.type.toString());
  }
 else {
    this.method=match;
    match.checkArguments(markers,null,this.argument,null);
  }
  this.argument.checkTypes(markers,context);
}",0.8786610878661087
84997,"@Override public void writeExpression(MethodWriter writer){
  this.value.writeExpression(writer);
  if (this.type.isPrimitive()) {
    writePrimitiveCast(this.value.getType(),(PrimitiveType)this.type,writer);
  }
 else {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  }
}","@Override public void writeExpression(MethodWriter writer){
  this.value.writeExpression(writer);
  if (this.typeHint) {
    return;
  }
  if (this.type.isPrimitive()) {
    writePrimitiveCast(this.value.getType(),(PrimitiveType)this.type,writer);
  }
 else {
    writer.writeTypeInsn(Opcodes.CHECKCAST,this.type.getInternalName());
  }
}",0.9387755102040816
84998,"@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
  }
  this.value.checkTypes(markers,context);
}","@Override public void checkTypes(MarkerList markers,IContext context){
  if (this.type.isSuperTypeOf(this.value.getType())) {
    markers.add(this.position,""String_Node_Str"");
    this.typeHint=true;
  }
  IValue value1=this.value.withType(this.type);
  if (value1 != null && value1 != this.value) {
    this.value=value1;
    this.typeHint=true;
  }
  this.value.checkTypes(markers,context);
}",0.9351351351351352
84999,"@Override public void reset(){
  this.mode=NAME;
  this.boundMode=0;
  this.type=null;
  this.arrayDimensions=0;
  this.arrayDimensions2=0;
}","@Override public void reset(){
  this.mode=NAME;
  this.boundMode=0;
  this.type=null;
}",0.7685589519650655
85000,"public void end(){
  if (this.type != null && this.arrayDimensions > 0) {
    this.type=ArrayType.getArrayType(this.type,this.arrayDimensions);
  }
  this.typed.setType(this.type);
}","public void end(){
  this.typed.setType(this.type);
}",0.451063829787234
