record_number,buggy_code,fixed_code,code_similarity
67001,"public static String ellipsisString(String str,int iVisChar){
  if (iVisChar > 0) {
    return str.substring(0,iVisChar) + ELLIPSIS_STRING;
  }
 else {
    return str;
  }
}","public static String ellipsisString(String str,int iVisChar){
  if (iVisChar > 0 && iVisChar < str.length()) {
    return str.substring(0,iVisChar) + ELLIPSIS_STRING;
  }
 else {
    return str;
  }
}",0.9276139410187668
67002,"private void updateReportParameterValue(int index){
}","private void updateReportParameterValue(int index,String bindedReportParameterName){
}",0.762589928057554
67003,"private void updateReportParameter(int index){
  String setting=UIPlugin.getDefault().getPreferenceStore().getString(""String_Node_Str"");
  if (MessageDialogWithToggle.ALWAYS.equals(setting)) {
    updateReportParameterValue(index);
  }
 else {
    OdaDataSetParameterHandle datasetParameter=(OdaDataSetParameterHandle)viewer.getViewer().getTable().getItem(index).getData();
    if (datasetParameter != null && datasetParameter.getParamName() != null) {
      MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(Workbench.getInstance().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,UIPlugin.getDefault().getPreferenceStore(),""String_Node_Str"");
      if (dialog.getReturnCode() == MessageDialogWithToggle.INFORMATION) {
        updateReportParameterValue(index);
      }
    }
  }
}","private void updateReportParameter(int index,String bindedReportParameterName){
  String setting=UIPlugin.getDefault().getPreferenceStore().getString(""String_Node_Str"");
  if (MessageDialogWithToggle.ALWAYS.equals(setting)) {
    updateReportParameterValue(index,bindedReportParameterName);
  }
 else {
    OdaDataSetParameterHandle datasetParameter=(OdaDataSetParameterHandle)viewer.getViewer().getTable().getItem(index).getData();
    if (datasetParameter != null && datasetParameter.getParamName() != null) {
      MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(Workbench.getInstance().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,UIPlugin.getDefault().getPreferenceStore(),""String_Node_Str"");
      if (dialog.getReturnCode() == MessageDialogWithToggle.INFORMATION) {
        updateReportParameterValue(index,bindedReportParameterName);
      }
    }
 else     if (datasetParameter.getParamName() == null && (!bindedReportParameterName.equals(Messages.getString(""String_Node_Str"")))) {
      MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(Workbench.getInstance().getDisplay().getActiveShell(),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""),false,UIPlugin.getDefault().getPreferenceStore(),""String_Node_Str"");
      if (dialog.getReturnCode() == MessageDialogWithToggle.INFORMATION) {
        ScalarParameterHandle reportParameter=ParameterPageUtil.getScalarParameter(bindedReportParameterName,false);
        if (reportParameter != null) {
          try {
            reportParameter.setValueType(DesignChoiceConstants.PARAM_VALUE_TYPE_STATIC);
            reportParameter.setControlType(DesignChoiceConstants.PARAM_CONTROL_TEXT_BOX);
            reportParameter.setDefaultValue(datasetParameter.getDefaultValue());
          }
 catch (          SemanticException e) {
          }
        }
      }
    }
  }
}",0.6154891304347826
67004,"private void doNew(){
  DataSetParameter newParam=null;
  if (isOdaDataSetHandle)   newParam=new OdaDataSetParameter();
 else   newParam=new DataSetParameter();
  int position=viewer.getViewer().getTable().getItemCount();
  newParam.setName(getUniqueName());
  newParam.setIsInput(true);
  newParam.setPosition(new Integer(position + 1));
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(newParam,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    updateReportParameter(position);
    refreshMessage();
    refreshLinkedReportParamStatus();
    stack.commit();
  }
 else {
    stack.rollback();
  }
}","private void doNew(){
  DataSetParameter newParam=null;
  if (isOdaDataSetHandle)   newParam=new OdaDataSetParameter();
 else   newParam=new DataSetParameter();
  int position=viewer.getViewer().getTable().getItemCount();
  newParam.setName(getUniqueName());
  newParam.setIsInput(true);
  newParam.setPosition(new Integer(position + 1));
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(newParam,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
    stack.commit();
    updateReportParameter(position,Messages.getString(""String_Node_Str""));
  }
 else {
    stack.rollback();
  }
}",0.9272727272727272
67005,"private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.setVisibleItemCount(30);
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      linkToSalarParameterChanged();
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          ReportParameterAdapter adapter=new ReportParameterAdapter();
          try {
            adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,dataSetParameterHandle,((DataSetEditor)getContainer()).getCurrentDataSetDesign());
          }
 catch (          SemanticException e) {
          }
catch (          OdaException e) {
          }
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      handle.addListener(new ScalarParameterListener());
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
    }
  }
;
  parameterButton=new Button(reportParamComposite,SWT.PUSH);
  parameterButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER));
  parameterButton.addSelectionListener(listener);
  checkParameterButtonTooltip();
}","private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.setVisibleItemCount(30);
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      linkToSalarParameterChanged();
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          ReportParameterAdapter adapter=new ReportParameterAdapter();
          try {
            adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,dataSetParameterHandle,((DataSetEditor)getContainer()).getCurrentDataSetDesign());
          }
 catch (          SemanticException e) {
          }
catch (          OdaException e) {
          }
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      handle.addListener(new ScalarParameterListener());
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
    }
  }
;
  parameterButton=new Button(reportParamComposite,SWT.PUSH);
  parameterButton.setImage(ReportPlatformUIImages.getImage(IReportGraphicConstants.ICON_ELEMENT_PARAMETER));
  parameterButton.addSelectionListener(listener);
  checkParameterButtonTooltip();
  bindedReportParameterName=linkToSalarParameter.getText();
}",0.9917987971569164
67006,"private void doEdit(){
  int index=viewer.getViewer().getTable().getSelectionIndex();
  if (index == -1)   return;
  DataSetParameterHandle handle=(DataSetParameterHandle)viewer.getViewer().getTable().getItem(index).getData();
  originalStructure=(DataSetParameter)handle.getStructure().copy();
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(handle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    updateReportParameter(index);
    refreshMessage();
    refreshLinkedReportParamStatus();
    stack.commit();
  }
 else {
    stack.rollback();
  }
}","private void doEdit(){
  int index=viewer.getViewer().getTable().getSelectionIndex();
  if (index == -1)   return;
  DataSetParameterHandle handle=(DataSetParameterHandle)viewer.getViewer().getTable().getItem(index).getData();
  originalStructure=(DataSetParameter)handle.getStructure().copy();
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(handle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
    String bindedReportParameterName=dlg.bindedReportParameterName;
    updateReportParameter(index,bindedReportParameterName);
    stack.commit();
  }
 else {
    stack.rollback();
  }
}",0.8918558077436582
67007,"/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @param expressions the extended expressions.
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 * @since 2.5.2
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent,String[] expressions) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=getCubeHandle();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartCubeUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemConstants.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (parent instanceof ICubeQueryDefinition) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (subQuery != null) {
        if (ChartCubeUtil.isPlotChart(handle)) {
          addMinMaxBinding((ICubeQueryDefinition)parent);
        }
        return subQuery;
      }
      Iterator<ComputedColumnHandle> bindings=handle.columnBindingsIterator();
      if (!bindings.hasNext()) {
        return (ICubeQueryDefinition)parent;
      }
    }
  }
  cubeQuery=getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  ExpressionSet exprSet=getExpressions(expressions,sdList);
  for (  String expr : exprSet) {
    bindExpression(expr,cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery,cubeHandle);
  sortLevelDefinition(cubeQuery.getEdge(ICubeQueryDefinition.ROW_EDGE),cubeHandle);
  sortLevelDefinition(cubeQuery.getEdge(ICubeQueryDefinition.COLUMN_EDGE),cubeHandle);
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  addAggregateOnToMeasures(levelsInOrder);
  return cubeQuery;
}","/** 
 * Creates the cube query definition for chart. If parent definition is null, it's usually used for Live preview in chart builder. If chart in xtab, will return sub cube query definition.
 * @param parent
 * @param expressions the extended expressions.
 * @return ICubeQueryDefinition for cube consuming orISubCubeQueryDefinition for chart in xtab case
 * @throws BirtException
 * @since 2.5.2
 */
public IBaseCubeQueryDefinition createCubeQuery(IDataQueryDefinition parent,String[] expressions) throws BirtException {
  bSingleChart=parent == null;
  CubeHandle cubeHandle=getCubeHandle();
  ICubeQueryDefinition cubeQuery=null;
  if (cubeHandle == null) {
    cubeHandle=ChartCubeUtil.getBindingCube(handle);
    if (cubeHandle == null) {
      throw new ChartException(ChartReportItemConstants.ID,ChartException.NULL_DATASET,Messages.getString(""String_Node_Str""));
    }
    if (parent instanceof ICubeQueryDefinition) {
      ISubCubeQueryDefinition subQuery=createSubCubeQuery();
      if (ChartCubeUtil.isPlotChart(handle)) {
        addMinMaxBinding((ICubeQueryDefinition)parent);
      }
      if (subQuery != null) {
        return subQuery;
      }
      Iterator<ComputedColumnHandle> bindings=handle.columnBindingsIterator();
      if (!bindings.hasNext()) {
        return (ICubeQueryDefinition)parent;
      }
    }
  }
  cubeQuery=getCubeElementFactory().createCubeQuery(cubeHandle.getQualifiedName());
  initBindings(cubeQuery,cubeHandle);
  List<SeriesDefinition> sdList=getAllSeriesDefinitions(cm);
  ExpressionSet exprSet=getExpressions(expressions,sdList);
  for (  String expr : exprSet) {
    bindExpression(expr,cubeQuery,cubeHandle);
  }
  for (int i=0; i < sdList.size(); i++) {
    SeriesDefinition sd=sdList.get(i);
    addSorting(cubeQuery,cubeHandle,sd,i);
  }
  addCubeFilter(cubeQuery,cubeHandle);
  sortLevelDefinition(cubeQuery.getEdge(ICubeQueryDefinition.ROW_EDGE),cubeHandle);
  sortLevelDefinition(cubeQuery.getEdge(ICubeQueryDefinition.COLUMN_EDGE),cubeHandle);
  Collection<ILevelDefinition> levelsInOrder=getAllLevelsInHierarchyOrder(cubeHandle,cubeQuery);
  addAggregateOnToMeasures(levelsInOrder);
  return cubeQuery;
}",0.9474412171507608
67008,"public IReportItemExecutor getNextChild(){
  IReportItemExecutor nextExecutor=null;
  try {
    while (walker.hasNext()) {
      ColumnEvent ev=walker.next();
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
case ColumnEvent.MEASURE_HEADER_CHANGE:
        if (blankStarted && ev.type != ColumnEvent.ROW_EDGE_CHANGE && ev.type != ColumnEvent.MEASURE_HEADER_CHANGE) {
          nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
          ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
          blankStarted=false;
          hasLast=false;
        }
      break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
    nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(lastMeasureIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
  ((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,getSubTotalMeasureHeaderCell(COLUMN_AXIS_TYPE,lastDimensionIndex,lastLevelIndex,lastMeasureIndex),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(lastMeasureIndex).getHeader(null),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
hasLast=false;
break;
}
if (ev.type == ColumnEvent.MEASURE_CHANGE || ev.type == ColumnEvent.COLUMN_TOTAL_CHANGE || ev.type == ColumnEvent.COLUMN_EDGE_CHANGE || ev.type == ColumnEvent.GRAND_TOTAL_CHANGE) {
rowSpan=1;
colSpan=0;
lastMeasureIndex=ev.measureIndex;
lastDimensionIndex=ev.dimensionIndex;
lastLevelIndex=ev.levelIndex;
hasLast=true;
}
 else if (!blankStarted && !hasColumnGroups && (ev.type == ColumnEvent.ROW_EDGE_CHANGE || ev.type == ColumnEvent.MEASURE_HEADER_CHANGE)) {
blankStarted=true;
rowSpan=1;
colSpan=0;
hasLast=true;
}
currentEdgePosition=ev.dataPosition;
currentChangeType=ev.type;
colSpan++;
currentColIndex++;
if (nextExecutor != null) {
return nextExecutor;
}
}
}
 catch (OLAPException e) {
logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
}
if (hasLast) {
hasLast=false;
switch (currentChangeType) {
case ColumnEvent.ROW_EDGE_CHANGE:
case ColumnEvent.MEASURE_HEADER_CHANGE:
if (blankStarted) {
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
}
break;
case ColumnEvent.MEASURE_CHANGE:
case ColumnEvent.COLUMN_EDGE_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(lastMeasureIndex).getHeader(),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.COLUMN_TOTAL_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,getSubTotalMeasureHeaderCell(COLUMN_AXIS_TYPE,lastDimensionIndex,lastLevelIndex,lastMeasureIndex),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
case ColumnEvent.GRAND_TOTAL_CHANGE:
nextExecutor=new CrosstabCellExecutor(this,crosstabItem.getMeasure(lastMeasureIndex).getHeader(null),rowSpan,colSpan,currentColIndex - colSpan + 1);
((CrosstabCellExecutor)nextExecutor).setPosition(currentEdgePosition);
break;
}
}
return nextExecutor;
}","public IReportItemExecutor getNextChild(){
  IReportItemExecutor childExecutor=nextExecutor;
  nextExecutor=null;
  advance();
  return childExecutor;
}",0.0616621983914209
67009,"private void prepareChildren(){
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  blankStarted=false;
  hasColumnGroups=columnGroups != null && columnGroups.size() > 0;
  totalMeasureCount=crosstabItem.getMeasureCount();
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  lastDimensionIndex=-1;
  lastLevelIndex=-1;
  hasLast=false;
  walker.reload();
}","private void prepareChildren(){
  isFirst=true;
  currentChangeType=ColumnEvent.UNKNOWN_CHANGE;
  currentColIndex=-1;
  currentEdgePosition=-1;
  blankStarted=false;
  hasColumnGroups=columnGroups != null && columnGroups.size() > 0;
  totalMeasureCount=crosstabItem.getMeasureCount();
  rowSpan=1;
  colSpan=0;
  lastMeasureIndex=-1;
  lastDimensionIndex=-1;
  lastLevelIndex=-1;
  hasLast=false;
  walker.reload();
}",0.980440097799511
67010,"public boolean hasNextChild(){
  try {
    return walker.hasNext() || hasLast;
  }
 catch (  OLAPException e) {
    logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
  }
  return false;
}","public boolean hasNextChild(){
  if (isFirst) {
    isFirst=false;
    advance();
  }
  return nextExecutor != null;
}",0.4174454828660436
67011,"/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1)) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        if (index.containsKey(rsMeta.getFieldName(i + 1))) {
          obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
        }
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
      obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}","/** 
 * @param dis
 * @param rsMeta
 * @param count
 * @return
 * @throws IOException
 */
public static IResultObject readResultObject(DataInputStream dis,IResultClass rsMeta,int count,Map<String,StringTable> stringTableMap,Map<String,DataSetInMemoryStringIndex> index) throws DataException {
  int i=0;
  try {
    Object[] obs=new Object[rsMeta.getFieldCount()];
    for (i=0; i < count; i++) {
      if (rsMeta.isIndexColumn(i + 1)) {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        if (index.containsKey(rsMeta.getFieldName(i + 1))) {
          obs[i]=index.get(rsMeta.getFieldName(i + 1)).getKeyValue(obs[i]);
        }
      }
 else       if (rsMeta.getFieldMetaData(i + 1).getDataType() == String.class && rsMeta.isCompressedColumn(i + 1)) {
        StringTable stringTable=null;
        if (stringTableMap != null) {
          stringTable=stringTableMap.get(rsMeta.getFieldName(i + 1));
        }
        if (stringTable != null) {
          obs[i]=stringTable.getStringValue(IOUtil.readInt(dis));
        }
 else {
          obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
        }
      }
 else {
        obs[i]=IOUtil.readObject(dis,DataEngineSession.getCurrentClassLoader());
      }
    }
    return new ResultObject(rsMeta,obs);
  }
 catch (  IOException e) {
    Throwable t=e.getCause();
    if (t instanceof ClassNotFoundException) {
      throw new DataException(ResourceConstants.FAIL_LOAD_CLASS,e,new String[]{t.getMessage(),rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
 else {
      throw new DataException(ResourceConstants.FAIL_LOAD_COLUMN_VALUE,e,new String[]{rsMeta.getFieldNativeTypeName(i + 1),rsMeta.getFieldName(i + 1)});
    }
  }
}",0.9948512585812356
67012,"protected void writeContent(int type,String txt,IContent content){
  if (inForeign) {
    hasPInside=true;
  }
  context.addContainer(false);
  InlineFlag inlineFlag=InlineFlag.BLOCK;
  IStyle computedStyle=content.getComputedStyle();
  IStyle inlineStyle=null;
  if (""String_Node_Str"".equalsIgnoreCase(content.getComputedStyle().getDisplay())) {
    if (context.isFirstInline()) {
      context.startInline();
      inlineFlag=InlineFlag.FIRST_INLINE;
      computedStyle=computeStyle(computedStyle);
    }
 else     inlineFlag=InlineFlag.MIDDLE_INLINE;
    if (!inlineStyles.isEmpty()) {
      inlineStyle=mergeStyles(inlineStyles);
    }
  }
 else {
    adjustInline();
  }
  writeBookmark(content);
  writeToc(content);
  writeText(type,txt,content,inlineFlag,computedStyle,inlineStyle);
  context.setLastIsTable(false);
}","protected void writeContent(int type,String txt,IContent content){
  if (inForeign) {
    hasPInside=true;
  }
  context.addContainer(false);
  InlineFlag inlineFlag=InlineFlag.BLOCK;
  IStyle computedStyle=content.getComputedStyle();
  IStyle inlineStyle=null;
  if (""String_Node_Str"".equalsIgnoreCase(content.getComputedStyle().getDisplay())) {
    if (context.isFirstInline()) {
      context.startInline();
      inlineFlag=InlineFlag.FIRST_INLINE;
      if (!styles.isEmpty()) {
        computedStyle=new CompositeStyle(styles.peek(),content.getStyle());
      }
    }
 else     inlineFlag=InlineFlag.MIDDLE_INLINE;
    if (!inlineStyles.isEmpty()) {
      inlineStyle=mergeStyles(inlineStyles);
    }
  }
 else {
    adjustInline();
  }
  writeBookmark(content);
  writeToc(content);
  writeText(type,txt,content,inlineFlag,computedStyle,inlineStyle);
  context.setLastIsTable(false);
}",0.9289871944121072
67013,"public boolean isAggregationFilter(){
  return this.dimName == null;
}","public boolean isAggregationFilter(){
  if (this.isAxisFilter)   return true;
  return this.dimName == null;
}",0.7777777777777778
67014,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference());
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          Map appContext=new HashMap();
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference());
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        Map appContext=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          IResultIterator itr=previewer.preview();
          metaData=itr.getResultMetaData();
          populateRecords(itr);
          monitor.done();
        }
 catch (        BirtException e) {
          metaData=null;
          throw new InvocationTargetException(e);
        }
 finally {
          try {
            AppContextResourceReleaser.release(appContext);
            previewer.close();
          }
 catch (          BirtException e) {
            e.printStackTrace();
          }
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}",0.9747252747252748
67015,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign(),false);
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}",0.999465811965812
67016,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994097973637616
67017,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994321408290744
67018,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}",0.9995927786073028
67019,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),12);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),12);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994450610432852
67020,"private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext();
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.close();
}","private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext();
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.close();
}",0.9996172004593594
67021,"private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}","private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}",0.9993212669683258
67022,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),3);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),3);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.99943661971831
67023,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
  facttableRowIterator.close();
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
  facttableRowIterator.close();
}",0.9994468006638392
67024,"/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,long cacheSize,StopSign stopSign,boolean suppressInvalidFacttableRow) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,cacheSize,stopSign,suppressInvalidFacttableRow);
  cube.close();
  documentManager.flush();
}","/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,cacheSize,stopSign);
  cube.close();
  documentManager.flush();
}",0.9611178614823817
67025,"/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign,boolean suppressInvalidFacttableRow) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTableConstructor.setMemoryCacheSize(cacheSize);
  factTable=factTableConstructor.saveFactTable(name,factTableJointColumnNames,DimJointColumnNames,iterator,tDimensions,measureColumnName,stopSign,suppressInvalidFacttableRow);
  documentObject.close();
  documentManager.flush();
}","/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTableConstructor.setMemoryCacheSize(cacheSize);
  factTable=factTableConstructor.saveFactTable(name,factTableJointColumnNames,DimJointColumnNames,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}",0.9750584567420107
67026,"/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign,boolean suppressInvalidFacttableRow) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,factTableJointColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(DimJointColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows(stopSign)));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper saveHelper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  start:   while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        if (suppressInvalidFacttableRow) {
          popObject=sortedFactTableRows.pop();
          lastRow=currentRow;
          continue start;
        }
        String[] args=new String[4];
        args[0]=factTableName;
        args[1]=Arrays.toString(factTableJointColumnNames[i]);
        args[2]=currentRow.getDimensionKeys()[i].toString();
        args[3]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    saveHelper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].getDataType(),currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  saveHelper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}","/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,factTableJointColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(DimJointColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows(stopSign)));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper saveHelper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[4];
        args[0]=factTableName;
        args[1]=Arrays.toString(factTableJointColumnNames[i]);
        args[2]=currentRow.getDimensionKeys()[i].toString();
        args[3]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    saveHelper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].getDataType(),currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  saveHelper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}",0.9715257118572036
67027,"/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle,String cubeName) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=sessionImpl.createQuery(sessionImpl,hierHandle,metaList,cubeName);
  return new DataSetIterator(this.sessionImpl,defn,metaList,appContext,null,null);
}","/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle,String cubeName) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=sessionImpl.createQuery(sessionImpl,hierHandle,metaList,cubeName);
  return new DataSetIterator(this.sessionImpl,defn,metaList,appContext);
}",0.98989898989899
67028,"public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,ScriptContext context) throws AdapterException {
  try {
    IDataScriptEngine engine=(IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME);
    Scriptable scope=engine.getJSScope(context);
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      String queryName=((IPreparedCubeQuery)query).getCubeQueryDefinition().getName();
      if (this.cubeHandleMap.get(queryName) != null) {
        this.materializeCube((CubeHandle)this.cubeHandleMap.get(queryName),this.sessionContext.getAppContext(),false);
        this.cubeHandleMap.remove(queryName);
      }
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,ScriptContext context) throws AdapterException {
  try {
    IDataScriptEngine engine=(IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME);
    Scriptable scope=engine.getJSScope(context);
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      String queryName=((IPreparedCubeQuery)query).getCubeQueryDefinition().getName();
      if (this.cubeHandleMap.get(queryName) != null) {
        this.materializeCube((CubeHandle)this.cubeHandleMap.get(queryName),this.sessionContext.getAppContext());
        this.cubeHandleMap.remove(queryName);
      }
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.996935648621042
67029,"/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
void materializeCube(CubeHandle cubeHandle,Map appContext,boolean isTransient) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    if (appContext == null)     appContext=sessionContext.getAppContext();
    String memoryUsage=(String)(appContext.get(DataEngine.MEMORY_USAGE));
    MemoryUsageSetting.setMemoryUsage(memoryUsage);
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      CubeMaterializer cm=getCubeMaterializer(size);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext,isTransient);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      CubeMaterializer cm=getCubeMaterializer(0);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext,isTransient);
      cm.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),this.dataEngine.getSession().getStopSign());
    }
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
void materializeCube(CubeHandle cubeHandle,Map appContext) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    if (appContext == null)     appContext=sessionContext.getAppContext();
    String memoryUsage=(String)(appContext.get(DataEngine.MEMORY_USAGE));
    MemoryUsageSetting.setMemoryUsage(memoryUsage);
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      CubeMaterializer cm=getCubeMaterializer(size);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      CubeMaterializer cm=getCubeMaterializer(0);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext);
      cm.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),this.dataEngine.getSession().getStopSign());
    }
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.9834212509419744
67030,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,boolean isTransient) throws BirtException {
  SecurityListener sl=new SecurityListener(this,isTransient);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=cubeQueryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=cubeMetaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext,null,null),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign(),isTransient);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=cubeQueryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=cubeMetaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.99551867219917
67031,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext,sl,dim.getName());
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.989178445229682
67032,"/** 
 * Create DataSetIterator for fact table.
 * @param session
 * @param cubeHandle
 * @throws BirtException
 */
public DataSetIterator(DataRequestSessionImpl session,IQueryDefinition query,List<ColumnMeta> meta,Map appContext,SecurityListener listener,String dimensionName) throws BirtException {
  this.defaultCalendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.defaultCalendar.setTimeZone(TimeZone.getDefault());
  this.defaultCalendar.clear();
  this.calendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.calendar.setTimeZone(session.getDataSessionContext().getDataEngineContext().getTimeZone());
  this.calendar.clear();
  this.calendar.set(0,0,1,0,0,0);
  this.nullTime=this.calendar.getTimeInMillis();
  this.calendar.clear();
  this.securityListener=listener;
  this.dimName=dimensionName;
  if (this.securityListener != null) {
    List<IFilterDefinition> additionalFilters4TransientProcessing=this.securityListener.populateSecurityFilter(this.dimName,appContext);
    if (additionalFilters4TransientProcessing != null)     query.getFilters().addAll(additionalFilters4TransientProcessing);
  }
  executeQuery(session,query,appContext);
  this.metadata=new ResultMeta(meta);
}","/** 
 * Create DataSetIterator for fact table.
 * @param session
 * @param cubeHandle
 * @throws BirtException
 */
public DataSetIterator(DataRequestSessionImpl session,IQueryDefinition query,List<ColumnMeta> meta,Map appContext) throws BirtException {
  this.defaultCalendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.defaultCalendar.setTimeZone(TimeZone.getDefault());
  this.defaultCalendar.clear();
  this.calendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.calendar.setTimeZone(session.getDataSessionContext().getDataEngineContext().getTimeZone());
  this.calendar.clear();
  this.calendar.set(0,0,1,0,0,0);
  this.nullTime=this.calendar.getTimeInMillis();
  this.calendar.clear();
  executeQuery(session,query,appContext);
  this.metadata=new ResultMeta(meta);
}",0.2158671586715867
67033,"public SecurityListener(DataRequestSessionImpl session,boolean isTransient){
}","public SecurityListener(DataRequestSessionImpl session){
}",0.8529411764705882
67034,"private int getSortTypeOnMirroredLevel(int level){
  AggrSortDefinition aggrSort=this.findAggregationSort(level);
  int sortType;
  if (aggrSort != null) {
    if (aggrSort.getAxisQualifierLevel().length == 0)     sortType=aggrSort.getSortDirection();
 else     sortType=IDimensionSortDefn.SORT_UNDEFINED;
  }
 else {
    sortType=this.rs.getSortType(level);
    if (sortType == IDimensionSortDefn.SORT_UNDEFINED)     sortType=IDimensionSortDefn.SORT_ASC;
  }
  return sortType;
}","private int getSortTypeOnMirroredLevel(int level){
  return this.findAggregationSort(level);
}",0.3170731707317073
67035,"/** 
 * @param levelIndex
 * @return
 */
private AggrSortDefinition findAggregationSort(int levelIndex){
  AggrSortDefinition aggrSortDefn=null;
  if (this.sortList != null) {
    DimLevel level=this.rs.getLevel(levelIndex);
    for (int i=0; i < this.sortList.size(); i++) {
      AggrSortDefinition defn=(AggrSortDefinition)sortList.get(i);
      if (level.equals(defn.getTargetLevel())) {
        aggrSortDefn=defn;
        break;
      }
    }
  }
  return aggrSortDefn;
}","/** 
 * @param levelIndex
 * @return
 */
private int findAggregationSort(int levelIndex){
  int sortType=IDimensionSortDefn.SORT_UNDEFINED;
  if (this.sortList != null) {
    DimLevel level=this.rs.getLevel(levelIndex);
    for (int i=0; i < this.sortList.size(); i++) {
      if (sortList.get(i) instanceof AggrSortDefinition) {
        AggrSortDefinition defn=(AggrSortDefinition)sortList.get(i);
        if (level.equals(defn.getTargetLevel())) {
          if (defn.getAxisQualifierLevel().length == 0)           sortType=defn.getSortDirection();
 else           sortType=IDimensionSortDefn.SORT_UNDEFINED;
          return sortType;
        }
      }
 else       if (sortList.get(i) instanceof DimensionSortEvalHelper) {
        DimensionSortEvalHelper dimSort=(DimensionSortEvalHelper)sortList.get(i);
        if (dimSort.getTargetLevel().equals(level)) {
          return IDimensionSortDefn.SORT_UNDEFINED;
        }
      }
    }
  }
  sortType=this.rs.getSortType(levelIndex);
  if (sortType == IDimensionSortDefn.SORT_UNDEFINED)   sortType=IDimensionSortDefn.SORT_ASC;
  return sortType;
}",0.48284625158831
67036,"/** 
 * @throws IOException
 * @throws DataException 
 */
private void loadFromDisk() throws IOException, DataException {
  openReadDocumentObject();
  keyDataType=new int[documentObject.readInt()];
  for (int i=0; i < keyDataType.length; i++) {
    keyDataType[i]=documentObject.readInt();
  }
  keyCount=documentObject.readInt();
  degree=documentObject.readInt();
  if (degree > 10000) {
    this.currentVersion=degree / 10000;
  }
  rootNodeOffset=documentObject.readInt();
  numberOfLevel=documentObject.readShort();
  if (numberOfLevel < 1 || numberOfLevel > 1000 || Math.pow(degree,numberOfLevel) < keyCount) {
    throw new DataException(ResourceConstants.OLAPFILE_FORMAT_INVALID,name);
  }
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private void loadFromDisk() throws IOException, DataException {
  openReadDocumentObject();
  keyDataType=new int[documentObject.readInt()];
  for (int i=0; i < keyDataType.length; i++) {
    keyDataType[i]=documentObject.readInt();
  }
  keyCount=documentObject.readInt();
  degree=documentObject.readInt();
  if (degree > 10000) {
    this.currentVersion=degree / 10000;
  }
 else {
    this.currentVersion=0;
  }
  rootNodeOffset=documentObject.readInt();
  numberOfLevel=documentObject.readShort();
  if (numberOfLevel < 1 || numberOfLevel > 1000 || Math.pow(degree,numberOfLevel) < keyCount) {
    throw new DataException(ResourceConstants.OLAPFILE_FORMAT_INVALID,name);
  }
}",0.9728978457261988
67037,"/** 
 * @param expr
 * @return
 * @throws DataException
 */
public static DimLevel getTargetDimLevel(String expr) throws DataException {
  if (expr != null && expr.matches(""String_Node_Str"")) {
    Set<DimLevel> s=OlapExpressionCompiler.getReferencedDimLevel(new ScriptExpression(expr),Collections.EMPTY_LIST);
    if (s != null && s.size() == 1) {
      return s.iterator().next();
    }
  }
  throw new DataException(ResourceConstants.LEVEL_NAME_NOT_FOUND,expr);
}","/** 
 * @param expr
 * @return
 * @throws DataException
 */
public static DimLevel getTargetDimLevel(String expr) throws DataException {
  if (expr != null && expr.trim().matches(""String_Node_Str"")) {
    Set<DimLevel> s=OlapExpressionCompiler.getReferencedDimLevel(new ScriptExpression(expr.trim()),Collections.EMPTY_LIST);
    if (s != null && s.size() == 1) {
      return s.iterator().next();
    }
  }
  throw new DataException(ResourceConstants.LEVEL_NAME_NOT_FOUND,expr);
}",0.985200845665962
67038,"public void generatePageHints(IPageContent page) throws BirtException {
  PageArea pageArea=(PageArea)page.getExtension(IContent.LAYOUT_EXTENSION);
  if (pageArea != null) {
    reset();
    htmlUnresolvedRowHints=htmlLayoutContext.getPageHintManager().getUnresolvedRowHints();
    for (Iterator<IArea> i=pageArea.getBody().getChildren(); i.hasNext(); ) {
      IArea child=i.next();
      traverse(child);
    }
  }
  if (startContent != null) {
    if (currentContent != null) {
      fixedLayoutPageHints.add(new SizeBasedContent[]{startContent,currentContent});
    }
  }
}","public void generatePageHints(IPageContent page) throws BirtException {
  PageArea pageArea=(PageArea)page.getExtension(IContent.LAYOUT_EXTENSION);
  if (pageArea != null) {
    reset();
    for (Iterator<IArea> i=pageArea.getBody().getChildren(); i.hasNext(); ) {
      IArea child=i.next();
      traverse(child);
    }
    HTMLLayoutPageHintManager pm=htmlLayoutContext.getPageHintManager();
    pm.generatePageRowHints(getTableKeys());
    htmlUnresolvedRowHints=pm.getUnresolvedRowHints();
  }
  if (startContent != null) {
    if (currentContent != null) {
      fixedLayoutPageHints.add(new SizeBasedContent[]{startContent,currentContent});
    }
  }
}",0.7864077669902912
67039,"public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
clearGrouping();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.9988257235615112
67040,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
    }
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    Element group=svg_g2d.createElement(""String_Node_Str"");
    group.appendChild(elm);
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(group);
    elm=group;
    hotspotLayer.appendChild(aLink);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
        Action action=tg.getAction();
        if (action instanceof MultipleActions) {
          addMultiActionsJSCode(elm,src,tg,scriptEvent,bDblClick,(MultipleActions)action);
        }
 else {
          addActionJSCode(elm,src,tg,scriptEvent,bDblClick,action);
        }
      }
    }
  }
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    Element group=svg_g2d.createElement(""String_Node_Str"");
    group.appendChild(elm);
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(group);
    elm=group;
    hotspotLayer.appendChild(aLink);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
        Action action=tg.getAction();
        if (action instanceof MultipleActions) {
          addMultiActionsJSCode(elm,src,tg,scriptEvent,bDblClick,(MultipleActions)action);
        }
 else {
          addActionJSCode(elm,src,tg,scriptEvent,bDblClick,action);
        }
      }
    }
  }
}",0.7371338083927158
67041,"protected void performDefaults(){
  maxRowEditor.setStringValue(String.valueOf(DEFAULT_MAX_ROW));
  super.performDefaults();
}","protected void performDefaults(){
  maxRowEditor.setStringValue(String.valueOf(DEFAULT_MAX_ROW));
  promptButton.setSelection(false);
  super.performDefaults();
}",0.875
67042,"protected void performDefaults(){
  maxDisplaySchemaEditor.setStringValue(String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA));
  maxDisplayTableEditor.setStringValue(String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA));
  enableCodeAssistCheckbox.setSelection(true);
  timeOutLimitEditor.setStringValue(String.valueOf(DEFAULT_TIMEOUT_LIMIT));
  super.performDefaults();
}","protected void performDefaults(){
  maxDisplaySchemaEditor.setStringValue(String.valueOf(DEFAULT_MAX_NUM_OF_SCHEMA));
  maxDisplayTableEditor.setStringValue(String.valueOf(DEFAULT_MAX_NUM_OF_TABLE_EACH_SCHEMA));
  enableCodeAssistCheckbox.setSelection(true);
  schemasPrefetchConfigCheckbox.setSelection(true);
  timeOutLimitEditor.setStringValue(String.valueOf(DEFAULT_TIMEOUT_LIMIT));
  super.performDefaults();
}",0.9331619537275064
67043,"public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_PRESENTATION) {
      this.cubeCursor=createCursor(null);
      return this.cubeCursor;
    }
    stopSign.start();
    Set<String> involvedDerivedMeasure=new HashSet<String>();
    Set<String> derivedMeasureNames=OlapExpressionUtil.getDerivedMeasureNames(this.cubeQueryDefinition.getBindings());
    List<IBinding> bindingSet=new ArrayList<IBinding>();
    bindingSet.addAll(this.cubeQueryDefinition.getBindings());
    if (this.cubeQueryDefinition instanceof PreparedCubeQueryDefinition) {
      Set<IBinding> binding4NestedAggr=((PreparedCubeQueryDefinition)this.cubeQueryDefinition).getBindingsForNestAggregation();
      for (      IBinding binding : binding4NestedAggr) {
        derivedMeasureNames.add(binding.getBindingName());
      }
      bindingSet.addAll(binding4NestedAggr);
    }
    List<IFilterDefinition> derivedMeasureFilters=new ArrayList<IFilterDefinition>();
    if (!this.cubeQueryDefinition.getFilters().isEmpty()) {
      for (      IFilterDefinition filter : (List<IFilterDefinition>)this.cubeQueryDefinition.getFilters()) {
        IBaseExpression expr=filter.getExpression();
        Set<String> temp=this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings());
        if (temp.size() > 0)         derivedMeasureFilters.add(filter);
        involvedDerivedMeasure.addAll(temp);
      }
    }
    if (!this.cubeQueryDefinition.getSorts().isEmpty()) {
      for (      ISortDefinition sort : (List<ISortDefinition>)this.cubeQueryDefinition.getSorts()) {
        IBaseExpression expr=sort.getExpression();
        involvedDerivedMeasure.addAll(this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings()));
      }
    }
    if (involvedDerivedMeasure.isEmpty()) {
      this.cubeCursor=createCursor(null);
    }
 else {
      List<String> candidateBindingOfInteresting=new ArrayList<String>();
      candidateBindingOfInteresting.addAll(involvedDerivedMeasure);
      List<Set<String>> bindingDimLevels=new ArrayList<Set<String>>();
      for (      String bindingName : candidateBindingOfInteresting) {
        Set<IDimLevel> dimLevels=OlapExpressionUtil.getAggregateOnLevel(bindingName,bindingSet);
        Set<String> temp=new HashSet<String>();
        for (        IDimLevel dl : dimLevels) {
          temp.add(OlapExpressionUtil.getAttrReference(dl.getDimensionName(),dl.getLevelName(),dl.getLevelName()));
        }
        bindingDimLevels.add(temp);
      }
      List<IFilterDefinition> filterTemp=new ArrayList<IFilterDefinition>();
      List<ISortDefinition> sortTemp=new ArrayList<ISortDefinition>();
      filterTemp.addAll(this.cubeQueryDefinition.getFilters());
      sortTemp.addAll(this.cubeQueryDefinition.getSorts());
      this.cubeQueryDefinition.getFilters().removeAll(derivedMeasureFilters);
      this.cubeQueryDefinition.getSorts().clear();
      this.cubeCursor=createCursor(null);
      this.cubeQueryDefinition.getFilters().clear();
      this.cubeQueryDefinition.getFilters().addAll(filterTemp);
      this.cubeQueryDefinition.getSorts().addAll(sortTemp);
      BindingValueFetcher fetcher=new BindingValueFetcher(this.cubeCursor,this.cubeQueryDefinition,candidateBindingOfInteresting,bindingDimLevels);
      this.cubeCursor=createCursor(fetcher);
    }
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    if (this.session.getEngineContext().getMode() == DataEngineContext.MODE_PRESENTATION) {
      this.cubeCursor=createCursor(null);
      return this.cubeCursor;
    }
    stopSign.start();
    Set<String> involvedDerivedMeasure=new HashSet<String>();
    Set<String> derivedMeasureNames=OlapExpressionUtil.getDerivedMeasureNames(this.cubeQueryDefinition.getBindings());
    List<IBinding> bindingSet=new ArrayList<IBinding>();
    bindingSet.addAll(this.cubeQueryDefinition.getBindings());
    if (this.cubeQueryDefinition instanceof PreparedCubeQueryDefinition) {
      Set<IBinding> binding4NestedAggr=((PreparedCubeQueryDefinition)this.cubeQueryDefinition).getBindingsForNestAggregation();
      for (      IBinding binding : binding4NestedAggr) {
        derivedMeasureNames.add(binding.getBindingName());
      }
      bindingSet.addAll(binding4NestedAggr);
    }
    List<IFilterDefinition> derivedMeasureFilters=new ArrayList<IFilterDefinition>();
    if (!this.cubeQueryDefinition.getFilters().isEmpty()) {
      for (      IFilterDefinition filter : (List<IFilterDefinition>)this.cubeQueryDefinition.getFilters()) {
        IBaseExpression expr=filter.getExpression();
        Set<String> temp=this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings());
        if (temp.size() > 0)         derivedMeasureFilters.add(filter);
        involvedDerivedMeasure.addAll(temp);
      }
    }
    if (!this.cubeQueryDefinition.getSorts().isEmpty()) {
      for (      ISortDefinition sort : (List<ISortDefinition>)this.cubeQueryDefinition.getSorts()) {
        IBaseExpression expr=sort.getExpression();
        involvedDerivedMeasure.addAll(this.getInvolvedDerivedMeasure(expr,derivedMeasureNames,this.cubeQueryDefinition.getBindings()));
      }
    }
    if (involvedDerivedMeasure.isEmpty()) {
      this.cubeCursor=createCursor(null);
    }
 else {
      List<String> candidateBindingOfInteresting=new ArrayList<String>();
      candidateBindingOfInteresting.addAll(involvedDerivedMeasure);
      List<Set<String>> bindingDimLevels=new ArrayList<Set<String>>();
      Set<IDimLevel> mostDetailedMeasureDimLevel=new HashSet<IDimLevel>();
      for (      String bindingName : candidateBindingOfInteresting) {
        Set<IDimLevel> dimLevels=OlapExpressionUtil.getAggregateOnLevel(bindingName,bindingSet,getMeasureDimLevel());
        Set<String> temp=new HashSet<String>();
        for (        IDimLevel dl : dimLevels) {
          temp.add(OlapExpressionUtil.getAttrReference(dl.getDimensionName(),dl.getLevelName(),dl.getLevelName()));
        }
        bindingDimLevels.add(temp);
      }
      List<IFilterDefinition> filterTemp=new ArrayList<IFilterDefinition>();
      List<ISortDefinition> sortTemp=new ArrayList<ISortDefinition>();
      filterTemp.addAll(this.cubeQueryDefinition.getFilters());
      sortTemp.addAll(this.cubeQueryDefinition.getSorts());
      this.cubeQueryDefinition.getFilters().removeAll(derivedMeasureFilters);
      this.cubeQueryDefinition.getSorts().clear();
      this.cubeCursor=createCursor(null);
      this.cubeQueryDefinition.getFilters().clear();
      this.cubeQueryDefinition.getFilters().addAll(filterTemp);
      this.cubeQueryDefinition.getSorts().addAll(sortTemp);
      BindingValueFetcher fetcher=new BindingValueFetcher(this.cubeCursor,this.cubeQueryDefinition,candidateBindingOfInteresting,bindingDimLevels);
      this.cubeCursor=createCursor(fetcher);
    }
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9871692060946272
67044,"private static void getBindings(Set<String> visited,Set<IDimLevel> aggOn,IBinding binding,List<IBinding> bindings) throws DataException, CoreException {
  if (binding == null || visited.contains(binding.getBindingName())) {
    return;
  }
  List<String> currentVisitBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATA_INDICATOR);
  currentVisitBindings.removeAll(visited);
  for (  String expr : ((List<String>)binding.getAggregatOns())) {
    aggOn.addAll(ExpressionUtil.getReferencedDimLevel(expr));
  }
  aggOn.addAll(ExpressionUtil.getReferencedDimLevel(((IScriptExpression)binding.getExpression()).getText()));
  visited.add(binding.getBindingName());
  for (  String bindingName : currentVisitBindings) {
    getBindings(visited,aggOn,getBinding(bindingName,bindings),bindings);
  }
}","private static void getBindings(Set<String> visited,Set<IDimLevel> aggOn,IBinding binding,List<IBinding> bindings,Set<IDimLevel> mostDetailed) throws DataException, CoreException {
  if (binding == null || visited.contains(binding.getBindingName())) {
    return;
  }
  List<String> currentVisitBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATA_INDICATOR);
  currentVisitBindings.removeAll(visited);
  for (  String expr : ((List<String>)binding.getAggregatOns())) {
    aggOn.addAll(ExpressionUtil.getReferencedDimLevel(expr));
  }
  String text=((IScriptExpression)binding.getExpression()).getText();
  aggOn.addAll(ExpressionUtil.getReferencedDimLevel(text));
  if (binding.getAggregatOns().isEmpty() && binding.getAggrFunction() == null) {
    List<String> result=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),""String_Node_Str"");
    if (result != null && result.size() > 0) {
      aggOn.addAll(mostDetailed);
    }
  }
  visited.add(binding.getBindingName());
  for (  String bindingName : currentVisitBindings) {
    getBindings(visited,aggOn,getBinding(bindingName,bindings),bindings,mostDetailed);
  }
}",0.7749259624876604
67045,"public static Set<IDimLevel> getAggregateOnLevel(IBaseExpression expr,List<IBinding> bindings) throws DataException {
  Set<String> visited=new HashSet<String>();
  Set<IDimLevel> valid=new HashSet<IDimLevel>();
  try {
    getBindings(visited,valid,expr,bindings);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  return valid;
}","public static Set<IDimLevel> getAggregateOnLevel(IBaseExpression expr,List<IBinding> bindings,Set<IDimLevel> mostDetailed) throws DataException {
  Set<String> visited=new HashSet<String>();
  Set<IDimLevel> valid=new HashSet<IDimLevel>();
  try {
    getBindings(visited,valid,expr,bindings,mostDetailed);
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
  return valid;
}",0.9451137884872824
67046,"/** 
 * to check whether the expression directly reference to a dimension or measure
 * @param expression
 * @param bindings
 * @return
 * @throws DataException
 */
public static boolean isDirectRerenrence(IBaseExpression expression,List<IBinding> bindings) throws DataException {
  if (!(expression instanceof IScriptExpression))   return false;
  String expr=((IScriptExpression)expression).getText();
  if (expr == null)   return false;
  if (expr.matches(""String_Node_Str"") || expr.matches(""String_Node_Str""))   return true;
 else   if (expr.matches(""String_Node_Str""))   return true;
 else   if (expr.matches(""String_Node_Str"")) {
    String bindingName=getBindingName(expr);
    for (    IBinding binding : bindings) {
      if (binding.getBindingName().equals(bindingName)) {
        return isDirectRerenrence(binding.getExpression(),bindings);
      }
    }
  }
  return false;
}","/** 
 * to check whether the expression directly reference to a dimension or measure
 * @param expression
 * @param bindings
 * @return
 * @throws DataException
 */
public static boolean isDirectRerenrence(IBaseExpression expression,List<IBinding> bindings) throws DataException {
  if (!(expression instanceof IScriptExpression))   return false;
  String expr=((IScriptExpression)expression).getText();
  if (expr == null)   return false;
  if (expr.matches(""String_Node_Str"") || expr.matches(""String_Node_Str""))   return true;
 else   if (findMeasure(expr) != null)   return true;
 else   if (expr.matches(""String_Node_Str"")) {
    String bindingName=getBindingName(expr);
    for (    IBinding binding : bindings) {
      if (binding.getBindingName().equals(bindingName)) {
        return isDirectRerenrence(binding.getExpression(),bindings);
      }
    }
  }
  return false;
}",0.9355203619909502
67047,"/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    boolean redirect=false;
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      redirect=MultiActionValuesScriptGenerator.containsRedirection(tg.getAction());
    }
    if (redirect) {
      Element aLink=svg_g2d.createElement(""String_Node_Str"");
      Element group=svg_g2d.createElement(""String_Node_Str"");
      group.appendChild(elm);
      aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
      aLink.appendChild(group);
      elm=group;
      hotspotLayer.appendChild(aLink);
    }
 else     hotspotLayer.appendChild(elm);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
        Action action=tg.getAction();
        if (action instanceof MultipleActions) {
          addMultiActionsJSCode(elm,src,tg,scriptEvent,bDblClick,(MultipleActions)action);
        }
 else {
          addActionJSCode(elm,src,tg,scriptEvent,bDblClick,action);
        }
      }
    }
  }
}","/** 
 * Add event handling to the hotspot
 */
private void addEventHandling(Element elm,StructureSource src,Trigger[] triggers,Cursor cursor){
  if (elm != null && triggers != null) {
    if (triggers != null && triggers.length > 0) {
      setCursorAttribute(elm,cursor,defaultCursor);
    }
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
    }
    Element aLink=svg_g2d.createElement(""String_Node_Str"");
    Element group=svg_g2d.createElement(""String_Node_Str"");
    group.appendChild(elm);
    aLink.setAttribute(""String_Node_Str"",""String_Node_Str"");
    aLink.appendChild(group);
    elm=group;
    hotspotLayer.appendChild(aLink);
    for (int x=0; x < triggers.length; x++) {
      Trigger tg=triggers[x];
      String scriptEvent=getJsScriptEvent(tg.getCondition().getValue());
      if (scriptEvent != null) {
        boolean bDblClick=false;
        if (scriptEvent.equals(""String_Node_Str"")) {
          scriptEvent=""String_Node_Str"";
          bDblClick=true;
        }
        Action action=tg.getAction();
        if (action instanceof MultipleActions) {
          addMultiActionsJSCode(elm,src,tg,scriptEvent,bDblClick,(MultipleActions)action);
        }
 else {
          addActionJSCode(elm,src,tg,scriptEvent,bDblClick,action);
        }
      }
    }
  }
}",0.9307637401855816
67048,"/** 
 * @throws IOException
 * @throws DataException 
 */
private void loadFromDisk() throws IOException, DataException {
  openReadDocumentObject();
  keyDataType=new int[documentObject.readInt()];
  for (int i=0; i < keyDataType.length; i++) {
    keyDataType[i]=documentObject.readInt();
  }
  keyCount=documentObject.readInt();
  degree=documentObject.readInt();
  rootNodeOffset=documentObject.readInt();
  numberOfLevel=documentObject.readShort();
  if (numberOfLevel < 1 || numberOfLevel > 1000 || Math.pow(degree,numberOfLevel) < keyCount) {
    throw new DataException(ResourceConstants.OLAPFILE_FORMAT_INVALID,name);
  }
}","/** 
 * @throws IOException
 * @throws DataException 
 */
private void loadFromDisk() throws IOException, DataException {
  openReadDocumentObject();
  keyDataType=new int[documentObject.readInt()];
  for (int i=0; i < keyDataType.length; i++) {
    keyDataType[i]=documentObject.readInt();
  }
  keyCount=documentObject.readInt();
  degree=documentObject.readInt();
  if (degree > 10000) {
    this.currentVersion=degree / 10000;
  }
  rootNodeOffset=documentObject.readInt();
  numberOfLevel=documentObject.readShort();
  if (numberOfLevel < 1 || numberOfLevel > 1000 || Math.pow(degree,numberOfLevel) < keyCount) {
    throw new DataException(ResourceConstants.OLAPFILE_FORMAT_INVALID,name);
  }
}",0.948948948948949
67049,"/** 
 * @return
 * @throws IOException
 */
private IndexKey readKeyObject() throws IOException {
  IndexKey keyObject=new IndexKey();
  int[] dimensionPos=new int[documentObject.readInt()];
  for (int i=0; i < dimensionPos.length; i++) {
    dimensionPos[i]=documentObject.readInt();
  }
  keyObject.setDimensionPos(dimensionPos);
  keyObject.setKey(DocumentObjectUtil.readValue(documentObject,keyDataType));
  int[] offset=new int[documentObject.readInt()];
  for (int i=0; i < offset.length; i++) {
    offset[i]=documentObject.readInt();
  }
  keyObject.setOffset(offset);
  return keyObject;
}","/** 
 * @return
 * @throws IOException
 */
private IndexKey readKeyObject() throws IOException {
  IndexKey keyObject=new IndexKey();
  int[] dimensionPos=null;
  if (currentVersion > 0) {
    dimensionPos=new int[documentObject.readInt()];
    for (int i=0; i < dimensionPos.length; i++) {
      dimensionPos[i]=documentObject.readInt();
    }
    keyObject.setDimensionPos(dimensionPos);
  }
 else {
    dimensionPos=new int[1];
    dimensionPos[0]=documentObject.readInt();
    keyObject.setDimensionPos(dimensionPos);
  }
  keyObject.setKey(DocumentObjectUtil.readValue(documentObject,keyDataType));
  int[] offset=null;
  if (currentVersion > 0) {
    offset=new int[documentObject.readInt()];
    for (int i=0; i < offset.length; i++) {
      offset[i]=documentObject.readInt();
    }
    keyObject.setOffset(offset);
  }
 else {
    offset=new int[1];
    offset[0]=documentObject.readInt();
    keyObject.setOffset(offset);
  }
  return keyObject;
}",0.758043758043758
67050,"/** 
 * @return
 * @throws IOException
 */
private int saveIndexHeader() throws IOException {
  documentObject.writeInt(keyDataType.length);
  for (int i=0; i < keyDataType.length; i++) {
    documentObject.writeInt(keyDataType[i]);
  }
  documentObject.writeInt(keyCount);
  documentObject.writeInt(degree);
  byte[] b=new byte[6];
  documentObject.write(b,0,6);
  return (int)(documentObject.getFilePointer());
}","/** 
 * @return
 * @throws IOException
 */
private int saveIndexHeader() throws IOException {
  documentObject.writeInt(keyDataType.length);
  for (int i=0; i < keyDataType.length; i++) {
    documentObject.writeInt(keyDataType[i]);
  }
  documentObject.writeInt(keyCount);
  documentObject.writeInt(degree + VERSION);
  byte[] b=new byte[6];
  documentObject.write(b,0,6);
  return (int)(documentObject.getFilePointer());
}",0.9880668257756564
67051,"protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    if (fieldReaders[i].getDataType() != fieldWriters[i].getDataType())     fieldReaders[i].setDataType(fieldWriters[i].getDataType());
    if (i >= fieldReaders.length) {
      objects[i]=fieldReaders[fieldReaders.length - 1].read(randomAccessFile);
    }
 else {
      objects[i]=fieldReaders[i].read(randomAccessFile);
    }
  }
  return creator.createInstance(objects);
}","protected Object readObject() throws IOException {
  short fieldCount=randomAccessFile.readShort();
  if (fieldCount == NULL_VALUE) {
    return null;
  }
  Object[] objects=new Object[fieldCount];
  for (int i=0; i < objects.length; i++) {
    if (i < fieldReaders.length && fieldReaders[i].getDataType() != fieldWriters[i].getDataType())     fieldReaders[i].setDataType(fieldWriters[i].getDataType());
    if (i >= fieldReaders.length) {
      objects[i]=fieldReaders[fieldReaders.length - 1].read(randomAccessFile);
    }
 else {
      objects[i]=fieldReaders[i].read(randomAccessFile);
    }
  }
  return creator.createInstance(objects);
}",0.9785544082605242
67052,"public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    boolean okToLeave=((DataSetEditorPage)propertyPage).okToLeave();
    if (okToLeave) {
      try {
        DataSetDesign requestDesign=null;
        DesignSessionResponse response=null;
        if (dataSetSession != null) {
          requestDesign=dataSetSession.getRequest().getDataSetDesign();
          response=dataSetSession.flush().getResponse();
        }
 else         response=((DataSetEditorPage)propertyPage).collectPageResponse();
        DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return okToLeave;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}","public boolean canLeave(){
  if (propertyPage instanceof DataSetEditorPage) {
    boolean okToLeave=((DataSetEditorPage)propertyPage).okToLeave();
    if (okToLeave) {
      try {
        DataSetDesign requestDesign=null;
        DesignSessionResponse response=null;
        if (dataSetSession != null) {
          requestDesign=dataSetSession.getRequest().getDataSetDesign();
          response=dataSetSession.flush().getResponse();
        }
 else         response=((DataSetEditorPage)propertyPage).collectPageResponse();
        DTPUtil.getInstance().updateDataSetHandle(response,requestDesign,(OdaDataSetHandle)((DataSetEditor)getContainer()).getModel(),false);
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return true;
  }
  if (propertyPage instanceof DataSourceEditorPage) {
    if (propertyPage.okToLeave()) {
      try {
        DataSourceDesign requestDesign=null;
        if (this.dataSourceSession != null)         requestDesign=this.dataSourceSession.getRequest().getDataSourceDesign();
        DTPUtil.getInstance().updateDataSourceHandle(((DataSourceEditorPage)propertyPage).getEditSessionResponse().getResponse(),requestDesign,(OdaDataSourceHandle)(getContainer()).getModel());
        ((DataSourceEditor)this.getContainer()).updateDesignSession();
      }
 catch (      OdaException e) {
        ExceptionHandler.handle(e);
      }
    }
    return propertyPage.okToLeave();
  }
  return super.canLeave();
}",0.9962724500169434
67053,"private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        Object tmp=idsp.getMinimum(ds);
        if (tmp != null)         bnMin=NumberUtil.asBigDecimal((Number)tmp);
        tmp=idsp.getMaximum(ds);
        if (tmp != null)         bnMax=NumberUtil.asBigDecimal((Number)tmp);
        continue;
      }
      Object tmp=idsp.getMinimum(ds);
      if (tmp != null)       bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)tmp));
      tmp=idsp.getMaximum(ds);
      if (tmp != null)       bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)tmp));
    }
    if (bnMin == null || bnMax == null) {
      return;
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    if (absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=BigDecimal.ONE.divide(NumberUtil.HUNDRED.divide(bnMin,NumberUtil.DEFAULT_MATHCONTEXT),NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=bnMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}","private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        Object tmp=idsp.getMinimum(ds);
        if (tmp != null)         bnMin=NumberUtil.asBigDecimal((Number)tmp);
        tmp=idsp.getMaximum(ds);
        if (tmp != null)         bnMax=NumberUtil.asBigDecimal((Number)tmp);
        continue;
      }
      Object tmp=idsp.getMinimum(ds);
      if (tmp != null)       bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)tmp));
      tmp=idsp.getMaximum(ds);
      if (tmp != null)       bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)tmp));
    }
    if (bnMin == null || bnMax == null) {
      return;
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    BigDecimal absMin=bnMin.abs();
    if (absMin.compareTo(absMax) > 0) {
      absMax=absMin;
    }
    if (absMax.compareTo(BigDecimal.ZERO) > 0 && absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=absMax.divide(NumberUtil.DOUBLE_MAX,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=absMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}",0.5075239398084815
67054,"private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        bnMin=NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds));
        bnMax=NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds));
        continue;
      }
      bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds)));
      bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds)));
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    if (absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=BigDecimal.ONE.divide(NumberUtil.HUNDRED.divide(bnMin,NumberUtil.DEFAULT_MATHCONTEXT),NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=bnMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}","private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        Object tmp=idsp.getMinimum(ds);
        if (tmp != null)         bnMin=NumberUtil.asBigDecimal((Number)tmp);
        tmp=idsp.getMaximum(ds);
        if (tmp != null)         bnMax=NumberUtil.asBigDecimal((Number)tmp);
        continue;
      }
      Object tmp=idsp.getMinimum(ds);
      if (tmp != null)       bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)tmp));
      tmp=idsp.getMaximum(ds);
      if (tmp != null)       bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)tmp));
    }
    if (bnMin == null || bnMax == null) {
      return;
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    if (absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=BigDecimal.ONE.divide(NumberUtil.HUNDRED.divide(bnMin,NumberUtil.DEFAULT_MATHCONTEXT),NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=bnMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}",0.9396203554119548
67055,"/** 
 * @param action
 * @param source
 */
private void processActionImpl(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      generateURLValue(source,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        generateURLValue(source,uv);
      }
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      if (!dph.isVirtual()) {
        tv.setText(ChartUtil.stringValue(dph.getUserValue(tv.getText())));
      }
 else {
        tv.setText(null);
      }
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      LegendItemHints lih=(LegendItemHints)source.getSource();
      if (tv.getText() == null || tv.getText().equals(""String_Node_Str"")) {
        tv.setText(lih.getItemText());
      }
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap<String,String>();
    }
    String evaluatResult=cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}","/** 
 * @param action
 * @param source
 */
private void processActionImpl(Action action,StructureSource source){
  if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      generateURLValue(source,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        generateURLValue(source,uv);
      }
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      if (!dph.isVirtual()) {
        Object value=dph.getUserValue(tv.getText());
        if (value instanceof Number) {
          tv.setText(ChartUtil.getDefaultNumberFormat().format(value));
        }
 else {
          tv.setText(ChartUtil.stringValue(value));
        }
      }
 else {
        tv.setText(null);
      }
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      LegendItemHints lih=(LegendItemHints)source.getSource();
      if (tv.getText() == null || tv.getText().equals(""String_Node_Str"")) {
        tv.setText(lih.getItemText());
      }
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap<String,String>();
    }
    String evaluatResult=cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}",0.93048128342246
67056,"/** 
 * Add listener to a column
 * @param column
 * @param n
 */
private void addColumnSortListener(TableColumn column,final int index){
  column.addSelectionListener(new SelectionListener(){
    private boolean asc=false;
    public void widgetSelected(    SelectionEvent e){
      sort(index,asc);
      asc=!asc;
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
}","/** 
 * Add listener to a column
 * @param column
 * @param n
 */
private void addColumnSortListener(TableColumn column,final int index){
}",0.5176908752327747
67057,"/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] queryDefns) throws DataException {
  if (queryDefns != null) {
    List temp=new ArrayList();
    for (int i=0; i < queryDefns.length; i++) {
      if (queryDefns[i] instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)queryDefns[i];
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof IOdaDataSetDesign || design instanceof IScriptDataSetDesign)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp);
        }
      }
    }
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}","/** 
 * @param dataEngine
 * @param queryDefns
 * @throws DataException
 */
void populateCachedDataSets(DataEngineImpl dataEngine,IDataQueryDefinition[] qds) throws DataException {
  if (qds != null) {
    queryDefns.addAll(Arrays.asList(qds));
    List temp=new ArrayList();
    for (    IDataQueryDefinition query : queryDefns) {
      if (query instanceof IQueryDefinition) {
        IQueryDefinition qd=(IQueryDefinition)query;
        String dataSetName=qd.getDataSetName();
        if (dataSetName != null) {
          IBaseDataSetDesign design=dataEngine.getDataSetDesign(dataSetName);
          if (design instanceof IOdaDataSetDesign || design instanceof IScriptDataSetDesign)           this.populateDataSetNames(dataEngine.getDataSetDesign(dataSetName),dataEngine,temp);
        }
      }
    }
    this.cachedDataSetNames.clear();
    Set tempSet=new HashSet();
    for (int i=0; i < temp.size(); i++) {
      if (tempSet.contains(temp.get(i)))       this.cachedDataSetNames.add(temp.get(i));
 else       tempSet.add(temp.get(i));
    }
  }
}",0.287109375
67058,"String getMemberProperty(Module module,StructureHandle handle,String name){
  MemberHandle prop=handle.getMember(name);
  if (prop != null) {
    Object value=prop.getContext().getLocalValue(module);
    if (value == null) {
      return null;
    }
    return prop.getStringValue();
  }
  return null;
}","String getMemberProperty(Module module,StructureHandle handle,String name){
  MemberHandle prop=handle.getMember(name);
  if (prop != null) {
    Object value=prop.getContext().getLocalValue(module);
    if (value != null)     return prop.getStringValue();
    if (handle instanceof HighlightRuleHandle) {
      StyleHandle styleHandle=((HighlightRuleHandle)handle).getStyle();
      if (styleHandle == null)       return null;
      FactoryPropertyHandle propHandle=styleHandle.getFactoryPropertyHandle(name);
      if (propHandle == null)       return null;
      return propHandle.getStringValue();
    }
 else {
      return null;
    }
  }
  return null;
}",0.4974093264248704
67059,"protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          cell.isDummy=true;
          addChildByColumnId(cell);
        }
 else {
          SplitResult splitCell=cells[i].split(height,force);
          CellArea cell=(CellArea)splitCell.getResult();
          if (cell != null) {
            CellArea oc=((DummyCell)cells[i]).getCell();
            ArrayList temp=cell.children;
            cell.children=oc.children;
            oc.children=temp;
            oc.updateChildrenPosition();
            cell.updateChildrenPosition();
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
 else {
            cell=cells[i].cloneArea();
            cell.setHeight(0);
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}","protected void _splitSpanCell(int height,boolean force) throws BirtException {
  if (cells.length != children.size()) {
    for (int i=0; i < cells.length; i++) {
      if (cells[i] instanceof DummyCell) {
        int oh=((DummyCell)cells[i]).getCell().getHeight();
        int ch=((DummyCell)cells[i]).getDelta();
        int rowSpan=((DummyCell)cells[i]).getRowSpan();
        if (ch >= oh) {
          CellArea cell=cells[i].cloneArea();
          cell.setHeight(0);
          cell.setRowSpan(rowSpan);
          cell.setParent(this);
          cell.isDummy=true;
          addChildByColumnId(cell);
        }
 else {
          SplitResult splitCell=cells[i].split(height,force);
          CellArea cell=(CellArea)splitCell.getResult();
          if (cell != null) {
            CellArea oc=((DummyCell)cells[i]).getCell();
            ArrayList temp=cell.children;
            cell.children=oc.children;
            oc.children=temp;
            oc.updateChildrenPosition();
            cell.updateChildrenPosition();
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            cell.isDummy=true;
            addChildByColumnId(cell);
          }
 else {
            cell=cells[i].cloneArea();
            cell.setHeight(0);
            cell.setRowSpan(rowSpan);
            cell.setParent(this);
            addChildByColumnId(cell);
          }
        }
        i=i + cells[i].getColSpan() - 1;
      }
    }
  }
}",0.9891570479188528
67060,"protected Map<String,String> getValidFilterExpressions(ExtendedItemHandle handle) throws ExtendedElementException {
  Map<String,String> exprMap=new LinkedHashMap<String,String>();
  for (  LevelHandle lh : ChartCubeUtil.getAllLevels(handle.getCube())) {
    exprCodec.setBindingName(ChartCubeUtil.createLevelBindingName(lh),true);
    String expr=adaptExpr(exprCodec);
    exprMap.put(exprCodec.getBindingName(),expr);
  }
  for (  MeasureHandle mh : ChartCubeUtil.getAllMeasures(handle.getCube())) {
    exprCodec.setBindingName(ChartCubeUtil.createMeasureBindingName(mh),true);
    String expr=adaptExpr(exprCodec);
    exprMap.put(exprCodec.getBindingName(),expr);
  }
  return exprMap;
}","protected Map<String,String> getValidFilterExpressions(ExtendedItemHandle handle) throws ExtendedElementException {
  Map<String,String> exprMap=new LinkedHashMap<String,String>();
  measureList=new ArrayList<String>();
  for (  LevelHandle lh : ChartCubeUtil.getAllLevels(handle.getCube())) {
    exprCodec.setBindingName(ChartCubeUtil.createLevelBindingName(lh),true);
    String expr=adaptExpr(exprCodec);
    exprMap.put(exprCodec.getBindingName(),expr);
  }
  for (  MeasureHandle mh : ChartCubeUtil.getAllMeasures(handle.getCube())) {
    exprCodec.setBindingName(ChartCubeUtil.createMeasureBindingName(mh),true);
    String expr=adaptExpr(exprCodec);
    exprMap.put(exprCodec.getBindingName(),expr);
    measureList.add(exprCodec.getBindingName());
  }
  return exprMap;
}",0.9402173913043478
67061,"private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.add(CHOICE_SELECT_VALUE);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  return expressionValue;
}","private CCombo createExpressionValue(Composite parent){
  final CCombo expressionValue=new CCombo(parent,SWT.BORDER);
  expressionValue.add(CHOICE_SELECT_VALUE);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  expressionValue.addListener(SWT.MouseDown,new Listener(){
    public void handleEvent(    Event arg0){
      if (isMeasureSelected()) {
        if (expressionValue.getItemCount() > 0) {
          expressionValue.remove(0);
        }
        expressionValue.setVisibleItemCount(0);
      }
 else {
        if (expressionValue.getItemCount() == 0) {
          expressionValue.add(CHOICE_SELECT_VALUE);
        }
        expressionValue.setVisibleItemCount(1);
      }
    }
  }
);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  return expressionValue;
}",0.7252747252747253
67062,"protected void editValue(Control control){
  String initValue=null;
  if (control instanceof Text) {
    initValue=((Text)control).getText();
  }
 else   if (control instanceof Combo) {
    initValue=((Combo)control).getText();
  }
  ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
  if (designHandle != null) {
    if (expressionProvider == null) {
      ExpressionProvider exprProvider=new ChartCubeFilterExpressionProvider(designHandle,fExprMap.values().toArray(new String[]{}));
      expressionBuilder.setExpressionProvider(exprProvider);
    }
 else     expressionBuilder.setExpressionProvider(expressionProvider);
  }
  if (expressionBuilder.open() == OK) {
    String result=DEUtil.resolveNull(expressionBuilder.getResult());
    if (control instanceof Text) {
      ((Text)control).setText(result);
    }
 else     if (control instanceof Combo) {
      ((Combo)control).setText(result);
    }
  }
  updateButtons();
}","protected void editValue(Control control){
  String initValue=null;
  if (control instanceof Text) {
    initValue=((Text)control).getText();
  }
 else   if (control instanceof Combo) {
    initValue=((Combo)control).getText();
  }
 else   if (control instanceof CCombo) {
    initValue=((CCombo)control).getText();
  }
  ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
  if (designHandle != null) {
    if (expressionProvider == null) {
      ExpressionProvider exprProvider=new ChartCubeFilterExpressionProvider(designHandle,fExprMap.values().toArray(new String[]{}));
      expressionBuilder.setExpressionProvider(exprProvider);
    }
 else     expressionBuilder.setExpressionProvider(expressionProvider);
  }
  if (expressionBuilder.open() == OK) {
    String result=DEUtil.resolveNull(expressionBuilder.getResult());
    if (control instanceof Text) {
      ((Text)control).setText(result);
    }
 else     if (control instanceof Combo) {
      ((Combo)control).setText(result);
    }
 else     if (control instanceof CCombo) {
      ((CCombo)control).setText(result);
    }
  }
  updateButtons();
}",0.9150763358778626
67063,"/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
      columns[n].setFormatValue(hint.getValueFormat());
      columns[n].setIndexColumn(hint.isIndexColumn());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}","/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
      columns[n].setFormatValue(hint.getValueFormat());
      columns[n].setIndexColumn(hint.isIndexColumn());
      columns[n].setRemoveDuplicateValues(hint.isCompressed());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}",0.9856308935788056
67064,"/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(getDefaultAnalysisType(columns[n].getName(),columns[n].getDataTypeName(),hint.getAnalysis()));
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(columns[n].getAnalysis())) {
            columns[n].setAnalysisColumn(hint.getAnalysis());
          }
 else {
            columns[n].setAnalysisColumn(null);
            columns[n].setIndexColumn(hint.isIndexColumn());
          }
          columns[n].setAnalysisColumn(hint.getAnalysisColumn());
          columns[n].setACLExpression(hint.getACLExpression());
          break;
        }
      }
    }
  }
}","/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(getDefaultAnalysisType(columns[n].getName(),columns[n].getDataTypeName(),hint.getAnalysis()));
          if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(columns[n].getAnalysis())) {
            columns[n].setAnalysisColumn(hint.getAnalysis());
          }
 else {
            columns[n].setAnalysisColumn(null);
          }
          columns[n].setAnalysisColumn(hint.getAnalysisColumn());
          columns[n].setACLExpression(hint.getACLExpression());
          columns[n].setIndexColumn(hint.isIndexColumn());
          columns[n].setRemoveDuplicateValues(hint.isCompressed());
          break;
        }
      }
    }
  }
}",0.9616483068135456
67065,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
        items[i].setIndexColumn(hint.isIndexColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(hint.getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
        items[i].setIndexColumn(hint.isIndexColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9882797731569
67066,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
          items[i].setIndexColumn(hint.isIndexColumn());
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn()) {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
        if (DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(items[i].getAnalysis())) {
          items[i].setAnalysisColumn(hint.getAnalysisColumn());
        }
 else {
          items[i].setAnalysisColumn(null);
        }
      }
 else {
        items[i].setAnalysis(hint.getAnalysis());
        items[i].setAnalysisColumn(hint.getAnalysisColumn());
      }
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
      items[i].setIndexColumn(hint.isIndexColumn());
      items[i].setRemoveDuplicateValues(hint.isCompressed());
    }
 else {
      if (items[i].isComputedColumn()) {
        items[i].setAnalysis(null);
        items[i].setAnalysisColumn(null);
      }
 else {
        items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
        items[i].setAnalysisColumn(null);
      }
    }
  }
  return items;
}",0.96280276816609
67067,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
public static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.9951605807303124
67068,"/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  if (content != null) {
    if (IOUtil.getScriptObjectType(content) == -1) {
      content=content.toString();
    }
  }
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}","/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  if (content != null) {
    if (!isSupportedType(content)) {
      content=content.toString();
    }
  }
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}",0.9833852544132918
67069,"/** 
 * To populate the relational measures from binding list of queryDefn
 * @param queryDefn
 */
private static void populateMeasureFromBinding(ICubeQueryDefinition queryDefn,ScriptContext cx) throws DataException {
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    createRelationalMeasures(queryDefn,(IBaseExpression)((IBinding)queryDefn.getBindings().get(i)).getExpression(),cx);
  }
}","/** 
 * To populate the relational measures from binding list of queryDefn
 * @param queryDefn
 */
private static void populateMeasureFromBinding(ICubeQueryDefinition queryDefn,ScriptContext cx) throws DataException {
  for (int i=0; i < queryDefn.getBindings().size(); i++) {
    List measureList=createRelationalMeasures(queryDefn,(IBaseExpression)((IBinding)queryDefn.getBindings().get(i)).getExpression(),cx);
    String functionName=((IBinding)queryDefn.getBindings().get(i)).getAggrFunction();
    if (functionName != null) {
      for (int j=0; j < measureList.size(); j++) {
        ((IMeasureDefinition)measureList.get(j)).setAggrFunction(functionName);
      }
    }
  }
}",0.7416974169741697
67070,"/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
public static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      if (obValue instanceof IdScriptableObject) {
        IdScriptableObject jsObject=((IdScriptableObject)obValue);
        if (jsObject.getClassName().equals(""String_Node_Str"")) {
          return TYPE_JSObject;
        }
        return -1;
      }
 else       if (obValue instanceof NativeJavaObject) {
        return TYPE_JSObject;
      }
      return -1;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}","/** 
 * from object class to its type index value
 * @param obValue
 * @return
 */
private static int getTypeIndex(Object obValue){
  if (obValue == null)   return TYPE_NULL;
  if (obValue instanceof String) {
    if (isLongString((String)obValue)) {
      return TYPE_LONG_STRING;
    }
 else {
      return TYPE_STRING;
    }
  }
  Integer indexOb=(Integer)type2IndexMap.get(obValue.getClass());
  if (indexOb == null) {
    if (obValue instanceof Map) {
      return TYPE_MAP;
    }
    if (obValue instanceof List) {
      return TYPE_LIST;
    }
    if (obValue instanceof Scriptable) {
      return TYPE_JSObject;
    }
    if (Timestamp.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME_STAMP;
    }
    if (Time.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_TIME;
    }
    if (java.sql.Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE;
    }
    if (Date.class.isAssignableFrom(obValue.getClass())) {
      return TYPE_DATE_TIME;
    }
    if (obValue instanceof Serializable) {
      return TYPE_SERIALIZABLE;
    }
    return -1;
  }
  return indexOb.intValue();
}",0.8676639815880323
67071,"/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  if (content != null) {
    if (IOUtil.getTypeIndex(content) == -1) {
      content=content.toString();
    }
  }
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}","/** 
 * execute the multiline text. multiline text have two expressions define the value and type. If the value type is HTML, the value returns string in HTML. If the value type is PLAIN_TEXT, the value returns string in plain text. the handling process is: <li> create forign object <li> push it into the context <li> execute the dataset if any <li> seek to the first record <li> intialize the content <li> process style, action, bookmark, visiblity <li> evaluate the type and value <li> set the rawType to html or text. <li> call the onCreate if necessary <li> pass it to emitter <li> close the data set <li> pop the context.
 * @see org.eclipse.birt.report.engine.executor.ReportItemExecutor#excute(org.eclipse.birt.report.engine.ir.ReportItemDesign,org.eclipse.birt.report.engine.emitter.IReportEmitter)
 */
public IContent execute(){
  DynamicTextItemDesign textDesign=(DynamicTextItemDesign)getDesign();
  IForeignContent textContent=report.createForeignContent();
  setContent(textContent);
  executeQuery();
  initializeContent(textDesign,textContent);
  processStyle(textDesign,textContent);
  processBookmark(textDesign,textContent);
  processVisibility(textDesign,textContent);
  processAction(textDesign,textContent);
  processUserProperties(textDesign,textContent);
  String contentType=textDesign.getContentType();
  if (contentType == null) {
    contentType=TextItemDesign.AUTO_TEXT;
  }
  Object content=evaluate(textDesign.getContent());
  if (content != null) {
    if (IOUtil.getScriptObjectType(content) == -1) {
      content=content.toString();
    }
  }
  String rawType=ForeignContent.getTextRawType(contentType,content);
  if (IForeignContent.TEXT_TYPE.equals(rawType)) {
    rawType=IForeignContent.VALUE_TYPE;
  }
  textContent.setRawType(rawType);
  textContent.setRawValue(content);
  if (context.isInFactory()) {
    handleOnCreate(textContent);
  }
  startTOCEntry(textContent);
  return textContent;
}",0.9935249935249936
67072,"public String formatValue(Object value) throws BirtException {
  if (directFormatter == null) {
    if (value instanceof java.util.Date) {
      directFormatter=new DateFormatter(pattern,this.locale,this.timeZone);
    }
 else     if (value instanceof Number) {
      directFormatter=new NumberFormatter(pattern,this.locale);
    }
 else     if (value instanceof String) {
      directFormatter=new StringFormatter(pattern,this.locale);
    }
 else {
      directFormatter=new DefaultFormatter(locale);
    }
  }
  return directFormatter.formatValue(value);
}","public String formatValue(Object value) throws BirtException {
  if (directFormatter == null) {
    if (value instanceof java.util.Date) {
      directFormatter=new DateFormatter(pattern,this.locale,this.timeZone);
    }
 else     if (value instanceof Number) {
      directFormatter=new NumberFormatter(pattern,this.locale);
    }
 else     if (pattern != null && value instanceof String) {
      directFormatter=new StringFormatter(pattern,this.locale);
    }
 else {
      directFormatter=new DefaultFormatter(locale);
    }
  }
  return directFormatter.formatValue(value);
}",0.9832893579595426
67073,"/** 
 * Returns the string value by object, according the the isLocaleNeutral option and the user specified formats(date format, number format, string format), if available.
 * @param dataIterator
 * @param columnNames
 * @param index
 * @return string representation of the object
 * @throws BirtException
 */
protected String getStringValue(IDataIterator dataIterator,String[] columnNames,int index) throws BirtException {
  Object obj=dataIterator.getValue(columnNames[index]);
  String value=null;
  if (isLocaleNeutral) {
    value=DataTypeUtil.toLocaleNeutralString(obj);
  }
 else {
    value=valueFormatters[index].formatValue(obj);
  }
  return value;
}","/** 
 * Returns the string value by object, according the the isLocaleNeutral option and the user specified formats(date format, number format, string format), if available.
 * @param dataIterator
 * @param columnNames
 * @param index
 * @return string representation of the object
 * @throws BirtException
 */
protected String getStringValue(IDataIterator dataIterator,String[] columnNames,int index) throws BirtException {
  Object obj=dataIterator.getValue(columnNames[index]);
  String value=null;
  if (isLocaleNeutral) {
    value=DataTypeUtil.toLocaleNeutralString(obj);
  }
 else   if (obj != null) {
    value=valueFormatters[index].formatValue(obj);
  }
  return value;
}",0.9858525688756516
67074,"protected void createFormatters(String[] columnNames,int[] columnTypes){
  int length=columnNames.length;
  valueFormatters=new IFormatter[length];
  String[] patterns=getPatterns(columnNames);
  for (int i=0; i < length; i++) {
switch (columnTypes[i]) {
case DataType.ANY_TYPE:
case DataType.UNKNOWN_TYPE:
case DataType.JAVA_OBJECT_TYPE:
      valueFormatters[i]=new AutoFormatter(patterns[i],this.locale,this.timeZone);
    break;
case DataType.DATE_TYPE:
case DataType.SQL_DATE_TYPE:
case DataType.SQL_TIME_TYPE:
  if (patterns[i] != null) {
    valueFormatters[i]=createDateFormatter(patterns[i],this.locale,this.timeZone);
  }
 else {
    valueFormatters[i]=dateFormatter;
  }
break;
case DataType.DECIMAL_TYPE:
case DataType.DOUBLE_TYPE:
case DataType.INTEGER_TYPE:
valueFormatters[i]=new NumberFormatter(patterns[i],this.locale);
break;
case DataType.STRING_TYPE:
valueFormatters[i]=new StringFormatter(patterns[i],this.locale);
break;
default :
valueFormatters[i]=new DefaultFormatter(this.locale);
break;
}
}
}","protected void createFormatters(String[] columnNames,int[] columnTypes){
  int length=columnNames.length;
  valueFormatters=new IFormatter[length];
  String[] patterns=getPatterns(columnNames);
  for (int i=0; i < length; i++) {
switch (columnTypes[i]) {
case DataType.ANY_TYPE:
case DataType.UNKNOWN_TYPE:
case DataType.JAVA_OBJECT_TYPE:
      valueFormatters[i]=new AutoFormatter(patterns[i],this.locale,this.timeZone);
    break;
case DataType.DATE_TYPE:
case DataType.SQL_DATE_TYPE:
case DataType.SQL_TIME_TYPE:
  if (patterns[i] != null) {
    valueFormatters[i]=createDateFormatter(patterns[i],this.locale,this.timeZone);
  }
 else {
    valueFormatters[i]=dateFormatter;
  }
break;
case DataType.DECIMAL_TYPE:
case DataType.DOUBLE_TYPE:
case DataType.INTEGER_TYPE:
valueFormatters[i]=new NumberFormatter(patterns[i],this.locale);
break;
case DataType.STRING_TYPE:
if (patterns[i] != null) {
valueFormatters[i]=new StringFormatter(patterns[i],this.locale);
}
 else {
valueFormatters[i]=new DefaultFormatter(this.locale);
}
break;
default :
valueFormatters[i]=new DefaultFormatter(this.locale);
break;
}
}
}",0.9563585171281088
67075,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  if (CubeHandleUtil.defineCube(this.dataEngine,cubeHandle,this.sessionContext.getAppContext()))   return;
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
      DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
    }
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  if (CubeHandleUtil.defineCube(this.dataEngine,cubeHandle,this.sessionContext.getAppContext()))   return;
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
      DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
    }
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
  prepareForCubeGeneration((TabularCubeHandle)cubeHandle);
}",0.9713731198447356
67076,"/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(TabularCubeHandle cubeHandle,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap) throws BirtException {
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    for (    Object o : query.getGroups()) {
      IGroupDefinition gd=(IGroupDefinition)o;
      SortDefinition sd=new SortDefinition();
      sd.setExpression(gd.getKeyExpression());
      query.getSorts().add(sd);
    }
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  queryMap.put(cubeHandle,query);
  metaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      if (CubeHandleUtil.isTimeDimension(dim))       continue;
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        for (        Object o : query.getGroups()) {
          IGroupDefinition gd=(IGroupDefinition)o;
          SortDefinition sd=new SortDefinition();
          sd.setExpression(gd.getKeyExpression());
          query.getSorts().add(sd);
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      queryMap.put(hier,query);
      metaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}","/** 
 * @param cubeHandle
 * @throws BirtException 
 */
private void prepareForCubeGeneration(CubeHandle cHandle) throws BirtException {
  TabularCubeHandle cubeHandle=null;
  if (cHandle instanceof TabularCubeHandle) {
    cubeHandle=(TabularCubeHandle)cHandle;
  }
  List<IQueryDefinition> queryDefns=new ArrayList<IQueryDefinition>();
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  QueryDefinition query=createQuery(this,cubeHandle,metaList);
  if (cubeHandle.autoPrimaryKey()) {
    for (    Object o : query.getGroups()) {
      IGroupDefinition gd=(IGroupDefinition)o;
      SortDefinition sd=new SortDefinition();
      sd.setExpression(gd.getKeyExpression());
      query.getSorts().add(sd);
    }
    query.setUsesDetails(true);
    query.getGroups().clear();
  }
  queryDefns.add(query);
  cubeQueryMap.put(cubeHandle,query);
  cubeMetaMap.put(cubeHandle,metaList);
  List<DimensionHandle> dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  for (  DimensionHandle dim : dimHandles) {
    List<TabularHierarchyHandle> hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
    for (    TabularHierarchyHandle hier : hiers) {
      if (CubeHandleUtil.isTimeDimension(dim))       continue;
      String columnForDeepestLevel=null;
      List levels=hier.getContents(TabularHierarchyHandle.LEVELS_PROP);
      if (levels.size() >= 1) {
        TabularLevelHandle level=(TabularLevelHandle)levels.get(levels.size() - 1);
        columnForDeepestLevel=level.getColumnName();
      }
      metaList=new ArrayList<ColumnMeta>();
      query=createQuery(this,hier,metaList,String.valueOf(cubeHandle.getElement().getID()));
      String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hier);
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{columnForDeepestLevel})) {
          for (          String key : jointHierarchyKeys) {
            String exprString=ExpressionUtil.createJSDataSetRowExpression(key);
            query.addBinding(new Binding(getDummyLevelNameForJointHierarchyKey(key),new ScriptExpression(exprString)));
            DataSetIterator.ColumnMeta temp=new DataSetIterator.ColumnMeta(getDummyLevelNameForJointHierarchyKey(key),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
            temp.setDataType(getColumnDataType(hier.getDataSet(),key));
            metaList.add(temp);
          }
        }
        for (        Object o : query.getGroups()) {
          IGroupDefinition gd=(IGroupDefinition)o;
          SortDefinition sd=new SortDefinition();
          sd.setExpression(gd.getKeyExpression());
          query.getSorts().add(sd);
        }
        query.setUsesDetails(true);
        query.getGroups().clear();
      }
      queryDefns.add(query);
      cubeQueryMap.put(hier,query);
      cubeMetaMap.put(hier,metaList);
    }
  }
  this.dataEngine.registerQueries(queryDefns.toArray(new IDataQueryDefinition[0]));
}",0.9532678631899764
67077,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,boolean isTransient) throws BirtException {
  SecurityListener sl=new SecurityListener(this,isTransient);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext,null,null),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign(),isTransient);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,boolean isTransient) throws BirtException {
  SecurityListener sl=new SecurityListener(this,isTransient);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=cubeQueryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=cubeMetaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,cubeQueryMap.get(cubeHandle),cubeMetaMap.get(cubeHandle),appContext,null,null),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign(),isTransient);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.9751838978255598
67078,"/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dh=(DimensionHandle)dimHandles.get(i);
    IDimension dim=createdDimensions.get(dh.getName());
    if (dim == null) {
      dim=populateDimension(cubeMaterializer,dh,cubeHandle,appContext,queryMap,metaMap,sl);
      createdDimensions.put(dh.getName(),dim);
    }
    result.add(dim);
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}","/** 
 * Populate all dimensions.
 * @param cubeMaterializer
 * @param dimHandles
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension[] populateDimensions(CubeMaterializer cubeMaterializer,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List dimHandles=cubeHandle.getContents(CubeHandle.DIMENSIONS_PROP);
  List result=new ArrayList();
  for (int i=0; i < dimHandles.size(); i++) {
    DimensionHandle dh=(DimensionHandle)dimHandles.get(i);
    IDimension dim=createdDimensions.get(dh.getName());
    if (dim == null) {
      dim=populateDimension(cubeMaterializer,dh,cubeHandle,appContext,sl);
      createdDimensions.put(dh.getName(),dim);
    }
    result.add(dim);
  }
  IDimension[] dimArray=new IDimension[dimHandles.size()];
  for (int i=0; i < result.size(); i++) {
    dimArray[i]=(IDimension)result.get(i);
  }
  return dimArray;
}",0.9440993788819876
67079,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext,sl,dim.getName());
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,cubeQueryMap.get(hierhandle),cubeMetaMap.get(hierhandle),appContext,sl,dim.getName());
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.987662480722626
67080,"private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (hint == null && (handle instanceof DerivedDataSetHandle)) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return hint;
}","private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (hint == null && (handle instanceof DerivedDataSetHandle)) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return null;
}",0.9947848761408083
67081,"private void openReportDocument() throws EngineException {
  try {
    if (archiveWriter == null) {
      openArchive();
    }
    String[] exts=executionContext.getEngineExtensions();
    writer=new ReportDocumentWriter(engine,archiveWriter,exts);
    executionContext.setReportDocWriter(writer);
    DocumentDataSource ds=executionContext.getDataSource();
    if (ds != null) {
      writer.saveReportletDocument(ds.getBookmark(),ds.getInstanceID());
    }
  }
 catch (  IOException ex) {
    throw new EngineException(MessageConstants.REPORT_ARCHIVE_OPEN_ERROR,ex);
  }
}","private void openReportDocument() throws EngineException {
  try {
    if (archiveWriter == null) {
      openArchive();
    }
    String[] exts=executionContext.getEngineExtensions();
    writer=new ReportDocumentWriter(engine,archiveWriter,exts);
    executionContext.setReportDocWriter(writer);
    DocumentDataSource ds=executionContext.getDataSource();
    if (ds != null && ds.isReportletDocument()) {
      writer.saveReportletDocument(ds.getBookmark(),ds.getInstanceID());
    }
  }
 catch (  IOException ex) {
    throw new EngineException(MessageConstants.REPORT_ARCHIVE_OPEN_ERROR,ex);
  }
}",0.9761904761904762
67082,"protected void writeContent(int type,String txt,IContent content){
  if (inForeign) {
    hasPInside=true;
  }
  context.addContainer(false);
  InlineFlag inlineFlag=InlineFlag.BLOCK;
  IStyle computedStyle=content.getComputedStyle();
  IStyle inlineStyle=null;
  if (""String_Node_Str"".equalsIgnoreCase(content.getComputedStyle().getDisplay())) {
    if (context.isFirstInline()) {
      context.startInline();
      inlineFlag=InlineFlag.FIRST_INLINE;
      if (!styles.isEmpty()) {
        computedStyle=styles.peek();
      }
    }
 else     inlineFlag=InlineFlag.MIDDLE_INLINE;
    if (!inlineStyles.isEmpty()) {
      inlineStyle=mergeStyles(inlineStyles);
    }
  }
 else {
    adjustInline();
  }
  writeBookmark(content);
  writeToc(content);
  writeText(type,txt,content,inlineFlag,computedStyle,inlineStyle);
  context.setLastIsTable(false);
}","protected void writeContent(int type,String txt,IContent content){
  if (inForeign) {
    hasPInside=true;
  }
  context.addContainer(false);
  InlineFlag inlineFlag=InlineFlag.BLOCK;
  IStyle computedStyle=content.getComputedStyle();
  IStyle inlineStyle=null;
  if (""String_Node_Str"".equalsIgnoreCase(content.getComputedStyle().getDisplay())) {
    if (context.isFirstInline()) {
      context.startInline();
      inlineFlag=InlineFlag.FIRST_INLINE;
      computedStyle=computeStyle(computedStyle);
    }
 else     inlineFlag=InlineFlag.MIDDLE_INLINE;
    if (!inlineStyles.isEmpty()) {
      inlineStyle=mergeStyles(inlineStyles);
    }
  }
 else {
    adjustInline();
  }
  writeBookmark(content);
  writeToc(content);
  writeText(type,txt,content,inlineFlag,computedStyle,inlineStyle);
  context.setLastIsTable(false);
}",0.950565812983919
67083,"/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else     if (newObject instanceof MasterPageHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.PAGE_SLOT);
      ReportRequest r=new ReportRequest();
      r.setType(ReportRequest.SELECTION);
      List selection=new ArrayList();
      selection.add(newObject);
      r.setSelectionObject(selection);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
      r=new ReportRequest();
      r.setType(ReportRequest.OPEN_EDITOR);
      r.setSelectionObject(selection);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
    }
 else     if (DEUtil.getDefaultSlotID(parent) != -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
 else     if (DEUtil.getDefaultSlotID(parent) == -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after,DEUtil.getDefaultContentName(parent));
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject,pos);
      }
 else {
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject);
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}","/** 
 * Executes the Command. This method should not be called if the Command is not executable.
 */
public void execute(){
  DesignElementHandle newObject=getNewObject();
  if (DesignerConstants.TRACING_COMMANDS) {
    System.out.println(""String_Node_Str"");
  }
  try {
    if (parent instanceof SlotHandle) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition(((SlotHandle)parent).getElementHandle(),(DesignElementHandle)after,((SlotHandle)parent).getSlotID());
        ((SlotHandle)parent).add(newObject,pos);
      }
 else {
        ((SlotHandle)parent).add(newObject);
      }
    }
 else     if (newObject instanceof DataSourceHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.DATA_SOURCE_SLOT);
    }
 else     if (newObject instanceof MasterPageHandle) {
      ((DesignElementHandle)parent).addElement(newObject,ReportDesignHandle.PAGE_SLOT);
      ReportRequest r=new ReportRequest();
      r.setType(ReportRequest.SELECTION);
      List selection=new ArrayList();
      selection.add(newObject);
      r.setSelectionObject(selection);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
      r=new ReportRequest();
      r.setType(ReportRequest.OPEN_EDITOR);
      r.setSelectionObject(selection);
      SessionHandleAdapter.getInstance().getMediator().notifyRequest(r);
    }
 else     if (parent instanceof CellHandle && newObject instanceof TableGroupHandle) {
      DesignElementHandle cellHandle=(CellHandle)parent;
      TableHandle tableHandle=null;
      while (cellHandle.getContainer() != null) {
        cellHandle=cellHandle.getContainer();
        if (cellHandle instanceof TableHandle) {
          tableHandle=(TableHandle)cellHandle;
          break;
        }
      }
      if (tableHandle != null) {
        tableHandle.getGroups().add(newObject,tableHandle.getGroups().getCount());
      }
    }
 else     if (DEUtil.getDefaultSlotID(parent) != -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after);
        int slotID=DEUtil.findSlotID(parent,after);
        ((DesignElementHandle)parent).addElement(newObject,slotID,pos);
      }
 else {
        ((DesignElementHandle)parent).addElement(newObject,DEUtil.getDefaultSlotID(parent));
      }
    }
 else     if (DEUtil.getDefaultSlotID(parent) == -1) {
      if (after != null) {
        int pos=DEUtil.findInsertPosition((DesignElementHandle)parent,(DesignElementHandle)after,DEUtil.getDefaultContentName(parent));
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject,pos);
      }
 else {
        ((DesignElementHandle)parent).add(DEUtil.getDefaultContentName(parent),newObject);
      }
    }
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"" + DEUtil.getDisplayLabel(newObject) + ""String_Node_Str"");
    }
  }
 catch (  SemanticException e) {
    if (DesignerConstants.TRACING_COMMANDS) {
      System.out.println(""String_Node_Str"");
    }
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
}",0.905207413945278
67084,"/** 
 * Adds new object to container
 * @param container container, not null
 * @param handle new object. If new object is null, create nothing
 * @throws SemanticException
 */
public static void addElementHandle(Object container,DesignElementHandle handle) throws SemanticException {
  assert(container != null);
  if (handle == null) {
    return;
  }
  container=unwrapToModel(container);
  if (container instanceof DesignElementHandle) {
    ((DesignElementHandle)container).addElement(handle,DEUtil.getDefaultSlotID(container));
  }
 else   if (container instanceof SlotHandle) {
    ((SlotHandle)container).add(handle);
  }
}","/** 
 * Adds new object to container
 * @param container container, not null
 * @param handle new object. If new object is null, create nothing
 * @throws SemanticException
 */
public static void addElementHandle(Object container,DesignElementHandle handle) throws SemanticException {
  assert(container != null);
  if (handle == null) {
    return;
  }
  container=unwrapToModel(container);
  if (container instanceof CellHandle && handle instanceof TableGroupHandle) {
    DesignElementHandle cellHandle=(CellHandle)container;
    TableHandle tableHandle=null;
    while (cellHandle.getContainer() != null) {
      cellHandle=cellHandle.getContainer();
      if (cellHandle instanceof TableHandle) {
        tableHandle=(TableHandle)cellHandle;
        break;
      }
    }
    if (tableHandle != null) {
      tableHandle.getGroups().add(handle,tableHandle.getGroups().getCount());
    }
  }
 else   if (container instanceof DesignElementHandle) {
    ((DesignElementHandle)container).addElement(handle,DEUtil.getDefaultSlotID(container));
  }
 else   if (container instanceof SlotHandle) {
    ((SlotHandle)container).add(handle);
  }
}",0.7125917560700169
67085,"/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        slotHandle.add(groupHandle,slotHandle.getCount());
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  ActionHandle actionHandle=UIUtil.getColumnAction(model);
  if (actionHandle != null) {
    List source=new ArrayList();
    source.add(actionHandle.getStructure());
    List newAction=ModelUtil.cloneStructList(source);
    dataHandle.setAction((Action)newAction.get(0));
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}","/** 
 * Inserts dataset column into the target. Add label or group key if possible
 * @param model column item
 * @param target insert target like cell or ListBandProxy
 * @param targetParent target container like table or list
 * @return to be inserted data item
 * @throws SemanticException
 */
protected static DesignElementHandle performInsertDataSetColumn(ResultSetColumnHandle model,Object target,Object targetParent) throws SemanticException {
  DataItemHandle dataHandle=DesignElementFactory.getInstance().newDataItem(null);
  DataSetHandle dataSet=(DataSetHandle)model.getElementHandle();
  if (targetParent instanceof TableHandle) {
    TableHandle tableHandle=(TableHandle)targetParent;
    if (tableHandle.isSummaryTable()) {
      tableHandle.setDataSet(dataSet);
      if (DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION.equals(UIUtil.getColumnAnalysis(model))) {
        ComputedColumn bindingColumn=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
        bindingColumn.setDataType(model.getDataType());
        ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
        bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
        String displayKey=UIUtil.getColumnDisplayNameKey(model);
        if (displayKey != null)         bindingColumn.setDisplayNameID(displayKey);
        tableHandle.addColumnBinding(bindingColumn,false);
        dataHandle.setResultSetColumn(model.getColumnName());
        SlotHandle slotHandle=tableHandle.getGroups();
        for (        Object o : slotHandle.getContents()) {
          GroupHandle group=(GroupHandle)o;
          if (group.getName().equals(model.getColumnName()))           return null;
        }
        DesignElementFactory factory=DesignElementFactory.getInstance(tableHandle.getModuleHandle());
        GroupHandle groupHandle=factory.newTableGroup();
        int columnCount=tableHandle.getColumnCount();
        groupHandle.getHeader().add(factory.newTableRow(columnCount));
        groupHandle.getFooter().add(factory.newTableRow(columnCount));
        groupHandle.setName(model.getColumnName());
        Expression newKeyExpr=new Expression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)),ExpressionType.JAVASCRIPT);
        groupHandle.setExpressionProperty(IGroupElementModel.KEY_EXPR_PROP,newKeyExpr);
        TOC toc=StructureFactory.createTOC();
        toc.setExpression(ExpressionUtility.getColumnExpression(model.getColumnName(),ExpressionUtility.getExpressionConverter(ExpressionType.JAVASCRIPT)));
        groupHandle.addTOC(toc);
        RowHandle rowHandle=((RowHandle)groupHandle.getHeader().get(0));
        CellHandle cellHandle=(CellHandle)rowHandle.getCells().get(0);
        cellHandle.getContent().add(dataHandle);
        return groupHandle;
      }
 else       if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)) || DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE.equals(UIUtil.getColumnAnalysis(model))) {
        if (target instanceof CellHandle && ((CellHandle)target).getContainer().getContainer() instanceof GroupHandle) {
          CellHandle cellHandle=(CellHandle)target;
          GroupHandle group=(GroupHandle)cellHandle.getContainer().getContainer();
          ComputedColumn column=StructureFactory.newComputedColumn(tableHandle,model.getColumnName());
          ComputedColumnHandle binding=DEUtil.addColumn(tableHandle,column,true);
          binding.setAggregateOn(group.getName());
          if (DesignChoiceConstants.ANALYSIS_TYPE_MEASURE.equals(UIUtil.getColumnAnalysis(model)))           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_SUM);
 else           binding.setAggregateFunction(DesignChoiceConstants.MEASURE_FUNCTION_MAX);
          binding.setExpression(ExpressionUtil.createJSRowExpression(model.getColumnName()));
          dataHandle.setResultSetColumn(binding.getName());
          InsertInLayoutRule rule=new LabelAddRule(target);
          if (rule.canInsert()) {
            LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
            label.setText(UIUtil.getColumnDisplayName(model));
            rule.insert(label);
          }
          rule=new GroupKeySetRule(target,model);
          if (rule.canInsert()) {
            rule.insert(model);
          }
          return dataHandle;
        }
      }
    }
  }
  dataHandle.setResultSetColumn(model.getColumnName());
  formatDataHandle(dataHandle,model);
  if (targetParent instanceof ReportItemHandle) {
    ReportItemHandle container=(ReportItemHandle)targetParent;
    ReportItemHandle root=DEUtil.getBindingRoot(container);
    if (root == null) {
      container=DEUtil.getListingContainer(container);
      if (container == null) {
        ComputedColumn bindingColumn=createBindingColumn(target,dataHandle,model);
        dataHandle.setDataSet(dataSet);
        dataHandle.addColumnBinding(bindingColumn,false);
      }
 else {
        ComputedColumn bindingColumn=createBindingColumn(target,container,model);
        container.setDataSet(dataSet);
        container.addColumnBinding(bindingColumn,false);
      }
    }
 else     if (root.getDataSet() == dataSet) {
      container=DEUtil.getBindingHolder(container);
      ComputedColumn bindingColumn=createBindingColumn(target,container,model);
      container.addColumnBinding(bindingColumn,false);
    }
 else {
      ReportItemHandle listingHandle=DEUtil.getListingContainer(container);
      if (listingHandle != null && DEUtil.getBindingRoot(listingHandle) == root && DEUtil.getBindingHolder(listingHandle) != listingHandle) {
        ComputedColumn bindingColumn=createBindingColumn(target,listingHandle,model);
        listingHandle.setDataSet(dataSet);
        listingHandle.addColumnBinding(bindingColumn,false);
      }
    }
  }
 else {
    ComputedColumn bindingColumn=StructureFactory.newComputedColumn(dataHandle,model.getColumnName());
    bindingColumn.setDataType(model.getDataType());
    ExpressionUtility.setBindingColumnExpression(model,bindingColumn);
    bindingColumn.setDisplayName(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null)     bindingColumn.setDisplayNameID(displayKey);
    if (target instanceof DesignElementHandle) {
      if (ExpressionUtil.hasAggregation(bindingColumn.getExpression())) {
        String groupType=DEUtil.getGroupControlType((DesignElementHandle)target);
        if (groupType.equals(DEUtil.TYPE_GROUP_GROUP))         bindingColumn.setAggregateOn(((GroupHandle)DEUtil.getGroups((DesignElementHandle)target).get(0)).getName());
 else         if (groupType.equals(DEUtil.TYPE_GROUP_LISTING))         bindingColumn.setAggregateOn(null);
      }
    }
    dataHandle.addColumnBinding(bindingColumn,false);
    dataHandle.setDataSet(dataSet);
  }
  ActionHandle actionHandle=UIUtil.getColumnAction(model);
  if (actionHandle != null) {
    List source=new ArrayList();
    source.add(actionHandle.getStructure());
    List newAction=ModelUtil.cloneStructList(source);
    dataHandle.setAction((Action)newAction.get(0));
  }
  InsertInLayoutRule rule=new LabelAddRule(target);
  if (rule.canInsert()) {
    LabelHandle label=DesignElementFactory.getInstance().newLabel(null);
    label.setText(UIUtil.getColumnDisplayName(model));
    String displayKey=UIUtil.getColumnDisplayNameKey(model);
    if (displayKey != null) {
      label.setTextKey(displayKey);
    }
    rule.insert(label);
  }
  rule=new GroupKeySetRule(target,model);
  if (rule.canInsert()) {
    rule.insert(model);
  }
  return dataHandle;
}",0.9961765277687772
67086,"/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  int maxRows=CacheUtil.getMaxRows(eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while ((odaObject=rowResultSet.next()) != null && !session.getStopSign().isStopped()) {
    if (memoryCacheSize == 0 || usedMemorySize < memoryCacheSize) {
      dataCount++;
      if (maxRows > 0 && dataCount > maxRows) {
        throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
      }
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.fine(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,maxRows,this.session);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.fine(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.fine(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}","/** 
 * Populate the smartCache.
 * @param rsMeta
 * @param rowResultSet
 * @param sortSpec
 * @param stopSign
 * @throws DataException
 */
private void populateData(IRowResultSet rowResultSet,IResultClass rsMeta,SortSpec sortSpec) throws DataException {
  long startTime=System.currentTimeMillis();
  SizeOfUtil sizeOfUtil=new SizeOfUtil(rsMeta);
  long memoryCacheSize=CacheUtil.computeMemoryBufferSize(eventHandler.getAppContext());
  int maxRows=CacheUtil.getMaxRows(eventHandler.getAppContext());
  IResultObject odaObject;
  IResultObject[] resultObjects;
  List resultObjectsList=new ArrayList();
  int dataCount=0;
  long usedMemorySize=0;
  while (!session.getStopSign().isStopped() && (odaObject=rowResultSet.next()) != null) {
    if (memoryCacheSize == 0 || usedMemorySize < memoryCacheSize) {
      dataCount++;
      if (maxRows > 0 && dataCount > maxRows) {
        throw new DataException(ResourceConstants.EXCEED_MAX_DATA_OBJECT_ROWS);
      }
      int odaObjectFieldCount=odaObject.getResultClass().getFieldCount();
      int metaFieldCount=rsMeta.getFieldCount();
      if (odaObjectFieldCount < metaFieldCount) {
        Object[] obs=new Object[metaFieldCount];
        for (int i=1; i <= odaObjectFieldCount; i++) {
          obs[i - 1]=odaObject.getFieldValue(i);
        }
        ResultObject temp=new ResultObject(rsMeta,obs);
        resultObjectsList.add(temp);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(temp);
      }
 else {
        resultObjectsList.add(odaObject);
        if (memoryCacheSize != 0)         usedMemorySize+=sizeOfUtil.sizeOf(odaObject);
      }
    }
 else {
      logger.fine(""String_Node_Str"");
      resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
      resultSetCache=new DiskCache(resultObjects,odaObject,rowResultSet,rsMeta,getComparator(sortSpec,eventHandler),dataCount,maxRows,this.session);
      break;
    }
  }
  if (resultSetCache == null) {
    logger.fine(""String_Node_Str"");
    resultObjects=(IResultObject[])resultObjectsList.toArray(new IResultObject[0]);
    resultSetCache=new MemoryCache(resultObjects,rsMeta,getComparator(sortSpec,eventHandler));
  }
  odaObject=null;
  resultObjects=null;
  resultObjectsList=null;
  rowResultSet=null;
  long consumedTime=(System.currentTimeMillis() - startTime) / 1000;
  logger.fine(""String_Node_Str"" + consumedTime + ""String_Node_Str"");
}",0.984258492129246
67087,"private void openReportDocument() throws EngineException {
  try {
    if (archiveWriter == null) {
      openArchive();
    }
    String[] exts=executionContext.getEngineExtensions();
    writer=new ReportDocumentWriter(engine,archiveWriter,exts);
    executionContext.setReportDocWriter(writer);
    DocumentDataSource ds=executionContext.getDataSource();
    if (ds != null && ds.isReportletDocument()) {
      writer.saveReportletDocument(ds.getBookmark(),ds.getInstanceID());
    }
  }
 catch (  IOException ex) {
    throw new EngineException(MessageConstants.REPORT_ARCHIVE_OPEN_ERROR,ex);
  }
}","private void openReportDocument() throws EngineException {
  try {
    if (archiveWriter == null) {
      openArchive();
    }
    String[] exts=executionContext.getEngineExtensions();
    writer=new ReportDocumentWriter(engine,archiveWriter,exts);
    executionContext.setReportDocWriter(writer);
    DocumentDataSource ds=executionContext.getDataSource();
    if (ds != null) {
      if (ds.isReportletDocument()) {
        writer.saveReportletDocument(ds.getBookmark(),ds.getInstanceID());
      }
 else {
        writer.removeReportletDoucment();
      }
    }
  }
 catch (  IOException ex) {
    throw new EngineException(MessageConstants.REPORT_ARCHIVE_OPEN_ERROR,ex);
  }
}",0.9329173166926678
67088,"public void flush() throws BirtException {
  if (page != null) {
    context.getPageHintManager().addTableColumnHints(columnHints);
    context.getPageHintManager().generatePageRowHints(getTableKeys());
    updatePageNumber();
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.getPageHintManager().clearPageHint();
    currentNode=null;
  }
}","public void flush() throws BirtException {
  if (page != null) {
    context.getPageHintManager().addTableColumnHints(columnHints);
    context.getPageHintManager().generatePageRowHints(getTableKeys());
    updatePageContent();
    page.flush();
    pageBreakEvent();
    if (!page.finished) {
      context.setPageNumber(context.getPageNumber() + 1);
      context.setPageCount(context.getPageCount() + 1);
    }
    generator.reset();
    context.getPageHintManager().clearPageHint();
    currentNode=null;
  }
}",0.9873417721518988
67089,"protected void handlePageBreakInterval(){
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign.getGroupLevel() == listingExecutor.pageBreakLevel) {
    listingExecutor.next();
    if (listingExecutor.needSoftBreakAfter()) {
      listingExecutor.softBreakBefore=true;
      listingExecutor.pageRowCount=0;
    }
 else     if (listingExecutor.softBreakBefore) {
      IStyle style=content.getStyle();
      if (style != null) {
        CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
        if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
          style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
        }
      }
      listingExecutor.softBreakBefore=false;
      listingExecutor.previous();
      listingExecutor.addAfterBreak=true;
    }
  }
}","protected void handlePageBreakInterval(){
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign.getGroupLevel() == listingExecutor.pageBreakLevel) {
    if (listingExecutor.softBreakBefore) {
      IStyle style=content.getStyle();
      if (style != null) {
        CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
        if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
          style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
        }
      }
      listingExecutor.softBreakBefore=false;
      listingExecutor.addAfterBreak=true;
      listingExecutor.pageRowCount=0;
    }
    listingExecutor.next();
    if (listingExecutor.needSoftBreakAfter()) {
      listingExecutor.softBreakBefore=true;
    }
  }
}",0.7694235588972431
67090,"protected void handlePageBreakInterval(){
  if (listExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      listExecutor.next();
      if (listExecutor.needSoftBreakAfter()) {
        listExecutor.softBreakBefore=true;
        listExecutor.pageRowCount=0;
      }
 else       if (listExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        listExecutor.softBreakBefore=false;
        listExecutor.previous();
        listExecutor.addAfterBreak=true;
      }
    }
  }
}","protected void handlePageBreakInterval(){
  if (listExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      if (listExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        listExecutor.softBreakBefore=false;
        listExecutor.addAfterBreak=true;
        listExecutor.pageRowCount=0;
      }
      listExecutor.next();
      if (listExecutor.needSoftBreakAfter()) {
        listExecutor.softBreakBefore=true;
      }
    }
  }
}",0.7891891891891892
67091,"protected void handlePageBreakInterval(){
  if (tableExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      tableExecutor.next();
      if (tableExecutor.needSoftBreakAfter()) {
        tableExecutor.softBreakBefore=true;
        tableExecutor.pageRowCount=0;
      }
 else       if (tableExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        tableExecutor.softBreakBefore=false;
        tableExecutor.previous();
        tableExecutor.addAfterBreak=true;
      }
    }
  }
}","protected void handlePageBreakInterval(){
  if (tableExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      if (tableExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        tableExecutor.softBreakBefore=false;
        tableExecutor.addAfterBreak=true;
        tableExecutor.pageRowCount=0;
      }
      tableExecutor.next();
      if (tableExecutor.needSoftBreakAfter()) {
        tableExecutor.softBreakBefore=true;
      }
    }
  }
}",0.7871581450653984
67092,"/** 
 * Remove all available computed column if it has been pre-calculated by computerColumnHelper.
 */
private void removeAvailableComputedColumns(){
  if (iccState != null) {
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        for (int k=0; k < this.populator.getQuery().getFetchEvents().size(); k++) {
          if (this.populator.getQuery().getFetchEvents().get(k) instanceof ComputedColumnHelper) {
            ComputedColumnHelper helper=(ComputedColumnHelper)this.populator.getQuery().getFetchEvents().get(k);
            helper.getComputedColumnList().remove(iccState.getComputedColumn(i));
            break;
          }
        }
      }
    }
  }
}","/** 
 * Remove all available computed column if it has been pre-calculated by computerColumnHelper.
 */
private void removeAvailableComputedColumns(){
  if (iccState != null) {
    for (int i=0; i < iccState.getCount(); i++) {
      if (iccState.isValueAvailable(i)) {
        for (int k=0; k < this.populator.getQuery().getFetchEvents().size(); k++) {
          if (this.populator.getQuery().getFetchEvents().get(k) instanceof ComputedColumnHelper) {
            ComputedColumnHelper helper=(ComputedColumnHelper)this.populator.getQuery().getFetchEvents().get(k);
            helper.removeAvailableComputedColumn(iccState.getComputedColumn(i));
            break;
          }
        }
      }
    }
  }
}",0.9582448690728944
67093,"public ComputedColumnHelperInstance(DataSetRuntime dataSet,List computedColumns,Mode mode,ScriptContext cx) throws DataException {
  this.ccList=new ArrayList();
  for (int i=0; i < computedColumns.size(); i++)   this.ccList.add(computedColumns.get(i));
  this.isPrepared=false;
  this.dataSet=dataSet;
  this.mode=mode;
  this.cx=cx.newContext(this.dataSet.getScriptScope());
}","public ComputedColumnHelperInstance(DataSetRuntime dataSet,List computedColumns,Mode mode,ScriptContext cx) throws DataException {
  this.ccList=new ArrayList();
  this.removedCCName=new ArrayList();
  for (int i=0; i < computedColumns.size(); i++)   this.ccList.add(computedColumns.get(i));
  this.isPrepared=false;
  this.dataSet=dataSet;
  this.mode=mode;
  this.cx=cx.newContext(this.dataSet.getScriptScope());
}",0.9521410579345088
67094,"/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  try {
    DataRequestSession session=getDteSession();
    session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=getChartModel(item);
    ChartCubeQueryHelper ccqh=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm,session.getModelAdaptor());
    String expr=expButton.getExpression();
    if (expr != null && expr.equals(expButton.getExpression())) {
      cubeQueryDefn=ccqh.createCubeQuery(null,new String[]{expr});
    }
 else {
      cubeQueryDefn=ccqh.createCubeQuery(null);
    }
    String bindingName=exprCodec.getBindingName(expr);
    exprCodec.setBindingName(bindingName,true,ExpressionType.JAVASCRIPT);
    iter=session.getCubeQueryUtil().getMemberValueIterator(cube,exprCodec.getExpression(),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}","/** 
 * @return
 */
private List getSelectValueList(){
  if (needRefreshList == false) {
    return selValueList;
  }
  CubeHandle cube=null;
  if (designHandle instanceof ExtendedItemHandle) {
    cube=((ExtendedItemHandle)designHandle).getCube();
  }
  if (cube == null || expression.getText().length() == 0) {
    return new ArrayList();
  }
  Iterator iter=null;
  IBaseCubeQueryDefinition cubeQueryDefn=null;
  try {
    ReportDesignHandle copy=(ReportDesignHandle)(designHandle.getModuleHandle().copy().getHandle(null));
    EngineConfig config=new EngineConfig();
    config.setProperty(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,DataSetProvider.getCustomScriptClassLoader(Thread.currentThread().getContextClassLoader(),copy));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(config);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    session=engineTask.getDataSession();
    engineTask.run();
    DataService.getInstance().registerSession(cube,session);
    IReportItem item=((ExtendedItemHandle)designHandle).getReportItem();
    Chart cm=getChartModel(item);
    ChartCubeQueryHelper ccqh=new ChartCubeQueryHelper((ExtendedItemHandle)designHandle,cm,session.getModelAdaptor());
    String expr=expButton.getExpression();
    if (expr != null && expr.equals(expButton.getExpression())) {
      cubeQueryDefn=ccqh.createCubeQuery(null,new String[]{expr});
    }
 else {
      cubeQueryDefn=ccqh.createCubeQuery(null);
    }
    String bindingName=exprCodec.getBindingName(expr);
    exprCodec.setBindingName(bindingName,true,ExpressionType.JAVASCRIPT);
    iter=session.getCubeQueryUtil().getMemberValueIterator(cube,exprCodec.getExpression(),(ICubeQueryDefinition)cubeQueryDefn);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
  selValueList=new ArrayList();
  while (iter != null && iter.hasNext()) {
    Object obj=iter.next();
    if (obj != null) {
      if (selValueList.indexOf(obj) < 0) {
        selValueList.add(obj);
      }
    }
  }
  needRefreshList=false;
  return selValueList;
}",0.7994736842105263
67095,"/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isCrosstabReference=referredHandle != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)referredHandle).getExtensionName());
  if (referredHandle != null && isCrosstabReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && !isCrosstabReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}","/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isCrosstabReference=referredHandle != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)referredHandle).getExtensionName());
  if (referredHandle != null && isCrosstabReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && isCrosstabReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}",0.9997575757575756
67096,"/** 
 * Parse the dimension levels on row edge and column edge to find out the level index used by category series and Y optional.
 * @param queryDefintion
 * @param cm
 */
private void parseLevelIndex(IBaseCubeQueryDefinition queryDefintion,Chart cm){
  fRowInnerLevelIndex=-1;
  fColInnerLevelIndex=-1;
  if (queryDefintion instanceof ICubeQueryDefinition) {
    List<String> rowLevelNames=Collections.emptyList();
    List<String> colLevelNames=Collections.emptyList();
    String[] categoryExprs=ChartUtil.getCategoryExpressions(cm);
    ICubeQueryDefinition cqd=(ICubeQueryDefinition)queryDefintion;
    IEdgeDefinition rowED=cqd.getEdge(ICubeQueryDefinition.ROW_EDGE);
    IEdgeDefinition colED=cqd.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    Map<String,String> cubeBindingMap=new HashMap<String,String>();
    List bindingList=cqd.getBindings();
    for (int i=0; i < bindingList.size(); i++) {
      Binding b=(Binding)bindingList.get(i);
      if (b.getExpression() instanceof IScriptExpression) {
        cubeBindingMap.put(b.getBindingName(),((IScriptExpression)b.getExpression()).getText());
      }
    }
    if (rowED != null) {
      rowLevelNames=getLevelNames(rowED);
      if (categoryExprs != null && categoryExprs.length > 0) {
        fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
        if (fRowInnerLevelIndex < 0 && colED != null) {
          rowLevelNames=getLevelNames(colED);
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
          fIsColEdgeAsMainCursor=true;
          return;
        }
      }
    }
    if (colED != null) {
      if (rowED == null && fRowInnerLevelIndex < 0) {
        rowLevelNames=getLevelNames(colED);
        if (categoryExprs != null && categoryExprs.length > 0) {
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
          fIsColEdgeAsMainCursor=true;
        }
      }
 else {
        colLevelNames=getLevelNames(colED);
        String[] yOptionalExprs=ChartUtil.getYOptoinalExpressions(cm);
        if (yOptionalExprs != null && yOptionalExprs.length > 0) {
          fColInnerLevelIndex=findInnerLevelIndex(yOptionalExprs[0],colLevelNames,cubeBindingMap);
        }
      }
    }
  }
}","/** 
 * Parse the dimension levels on row edge and column edge to find out the level index used by category series and Y optional.
 * @param queryDefintion
 * @param cm
 */
private void parseLevelIndex(IBaseCubeQueryDefinition queryDefintion,Chart cm){
  fCategoryInnerLevelIndex=-1;
  fYOptionalInnerLevelIndex=-1;
  if (queryDefintion instanceof ICubeQueryDefinition) {
    List<String> rowLevelNames=Collections.emptyList();
    List<String> colLevelNames=Collections.emptyList();
    String[] categoryExprs=ChartUtil.getCategoryExpressions(cm);
    ICubeQueryDefinition cqd=(ICubeQueryDefinition)queryDefintion;
    IEdgeDefinition rowED=cqd.getEdge(ICubeQueryDefinition.ROW_EDGE);
    IEdgeDefinition colED=cqd.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    Map<String,String> cubeBindingMap=new HashMap<String,String>();
    List bindingList=cqd.getBindings();
    for (int i=0; i < bindingList.size(); i++) {
      Binding b=(Binding)bindingList.get(i);
      if (b.getExpression() instanceof IScriptExpression) {
        cubeBindingMap.put(b.getBindingName(),((IScriptExpression)b.getExpression()).getText());
      }
    }
    if (categoryExprs != null && categoryExprs.length > 0) {
      if (rowED != null) {
        rowLevelNames=getLevelNames(rowED);
        fCategoryInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
      }
      if (fCategoryInnerLevelIndex < 0 && colED != null) {
        rowLevelNames=getLevelNames(colED);
        fCategoryInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
        fIsColEdgeAsCategoryCursor=true;
      }
    }
    if (fCategoryInnerLevelIndex < 0) {
      return;
    }
    String[] yOptionalExprs=ChartUtil.getYOptoinalExpressions(cm);
    if (yOptionalExprs != null && yOptionalExprs.length > 0) {
      if (fIsColEdgeAsCategoryCursor && rowED != null) {
        colLevelNames=getLevelNames(rowED);
        fYOptionalInnerLevelIndex=findInnerLevelIndex(yOptionalExprs[0],colLevelNames,cubeBindingMap);
      }
 else       if (colED != null) {
        colLevelNames=getLevelNames(colED);
        fYOptionalInnerLevelIndex=findInnerLevelIndex(yOptionalExprs[0],colLevelNames,cubeBindingMap);
      }
    }
  }
}",0.7726669615214506
67097,"protected void initCubeCursor() throws OLAPException, BirtException {
  if (cubeCursor == null) {
    cubeCursor=getCubeCursor();
    List<EdgeCursor> edges=cubeCursor.getOrdinateEdge();
    if (edges.size() == 0) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,Messages.getString(""String_Node_Str""));
    }
 else     if (edges.size() == 1) {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=null;
    }
 else {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=(EdgeCursor)edges.get(1);
    }
  }
  if (fRowInnerLevelIndex >= 0 && fColInnerLevelIndex < 0 && subEdgeCursor != null) {
    if (!fIsColEdgeAsMainCursor) {
      mainEdgeCursor=subEdgeCursor;
    }
    subEdgeCursor=null;
  }
  if (subEdgeCursor == null) {
    List dimCursors=mainEdgeCursor.getDimensionCursor();
    if (fRowInnerLevelIndex >= 0) {
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fRowInnerLevelIndex);
    }
 else     if (fColInnerLevelIndex >= 0) {
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fColInnerLevelIndex);
    }
  }
 else {
    if (fRowInnerLevelIndex >= 0) {
      List dimCursors=subEdgeCursor.getDimensionCursor();
      fSubPositionNodes=initCursorPositionsNodes(dimCursors,fRowInnerLevelIndex);
    }
    if (fColInnerLevelIndex >= 0) {
      List dimCursors=mainEdgeCursor.getDimensionCursor();
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fColInnerLevelIndex);
    }
  }
}","protected void initCubeCursor() throws OLAPException, BirtException {
  if (cubeCursor == null) {
    cubeCursor=getCubeCursor();
    List<EdgeCursor> edges=cubeCursor.getOrdinateEdge();
    if (edges.size() == 0) {
      throw new ChartException(ChartReportItemPlugin.ID,ChartException.DATA_BINDING,Messages.getString(""String_Node_Str""));
    }
 else     if (edges.size() == 1) {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=null;
    }
 else {
      this.mainEdgeCursor=(EdgeCursor)edges.get(0);
      this.subEdgeCursor=(EdgeCursor)edges.get(1);
    }
  }
  if (fCategoryInnerLevelIndex >= 0 && fYOptionalInnerLevelIndex < 0 && subEdgeCursor != null) {
    if (!fIsColEdgeAsCategoryCursor) {
      mainEdgeCursor=subEdgeCursor;
    }
    subEdgeCursor=null;
  }
 else   if (fCategoryInnerLevelIndex >= 0 && fYOptionalInnerLevelIndex >= 0 && fIsColEdgeAsCategoryCursor) {
    EdgeCursor tmp=mainEdgeCursor;
    mainEdgeCursor=subEdgeCursor;
    subEdgeCursor=tmp;
  }
  if (subEdgeCursor == null) {
    List dimCursors=mainEdgeCursor.getDimensionCursor();
    if (fCategoryInnerLevelIndex >= 0) {
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fCategoryInnerLevelIndex);
    }
 else     if (fYOptionalInnerLevelIndex >= 0) {
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fYOptionalInnerLevelIndex);
    }
  }
 else {
    if (fCategoryInnerLevelIndex >= 0) {
      List dimCursors=subEdgeCursor.getDimensionCursor();
      fSubPositionNodes=initCursorPositionsNodes(dimCursors,fCategoryInnerLevelIndex);
    }
    if (fYOptionalInnerLevelIndex >= 0) {
      List dimCursors=mainEdgeCursor.getDimensionCursor();
      fMainPositionNodes=initCursorPositionsNodes(dimCursors,fYOptionalInnerLevelIndex);
    }
  }
}",0.6575258988421694
67098,"/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String id=configs[j].getAttribute(""String_Node_Str"");
      String overridePriority=configs[j].getAttribute(""String_Node_Str"");
      int priority=0;
      if (null != overridePriority) {
        priority=new Integer(overridePriority).intValue();
      }
      EmitterInfo info=(EmitterInfo)emitters.get(id);
      if (info != null) {
        if (info.getOverridePriority() >= priority) {
          continue;
        }
 else {
          emitterExtensions.remove(info);
        }
      }
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      String supportedImageFormats=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      boolean needOutputResultSet=Boolean.valueOf(configs[j].getAttribute(""String_Node_Str""));
      EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,supportedImageFormats,needOutputResultSet,configs[j]);
      emitterInfo.setOverridePriority(priority);
      emitterExtensions.add(emitterInfo);
      assert(format != null);
      formats.put(format,emitterInfo);
      emitters.put(id,emitterInfo);
      logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
    }
  }
}","/** 
 * load report item emitters extension definitions
 */
protected void loadEmitterExtensionDefns(){
  IExtension[] exts=getExtensions(EXTENSION_POINT_EMITTERS);
  if (exts == null) {
    return;
  }
  for (int i=0; i < exts.length; i++) {
    String namespace=exts[i].getNamespace();
    IConfigurationElement[] configs=exts[i].getConfigurationElements();
    for (int j=0; j < configs.length; j++) {
      String id=configs[j].getAttribute(""String_Node_Str"");
      String overridePriority=configs[j].getAttribute(""String_Node_Str"");
      int priority=0;
      if (null != overridePriority) {
        priority=new Integer(overridePriority).intValue();
      }
      EmitterInfo info=(EmitterInfo)emitters.get(id);
      if (info != null) {
        if (info.getOverridePriority() >= priority) {
          continue;
        }
 else {
          emitterExtensions.remove(info);
        }
      }
      String format=configs[j].getAttribute(""String_Node_Str"");
      String mimeType=configs[j].getAttribute(""String_Node_Str"");
      String pagination=configs[j].getAttribute(""String_Node_Str"");
      String supportedImageFormats=configs[j].getAttribute(""String_Node_Str"");
      if (pagination == null) {
        pagination=PAGE_BREAK_PAGINATION;
      }
      String icon=configs[j].getAttribute(""String_Node_Str"");
      Boolean outDisplayNone=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      String fileExtension=configs[j].getAttribute(""String_Node_Str"");
      Boolean isHidden=new Boolean(configs[j].getAttribute(""String_Node_Str""));
      boolean needOutputResultSet=Boolean.valueOf(configs[j].getAttribute(""String_Node_Str""));
      if (!Pattern.matches(emitterFormatPattern,format)) {
        logger.log(Level.SEVERE,""String_Node_Str"" + format + ""String_Node_Str"");
      }
 else {
        EmitterInfo emitterInfo=new EmitterInfo(format,id,pagination,mimeType,icon,namespace,fileExtension,outDisplayNone,isHidden,supportedImageFormats,needOutputResultSet,configs[j]);
        emitterInfo.setOverridePriority(priority);
        emitterExtensions.add(emitterInfo);
        assert(format != null);
        formats.put(format,emitterInfo);
        emitters.put(id,emitterInfo);
        logger.log(Level.FINE,""String_Node_Str"",new String[]{format,id});
      }
    }
  }
}",0.9596005447117568
67099,"private static void populateSummaryBinding(IQueryDefinition queryDefn,IResultClass rsMeta) throws DataException {
  Set<String> nameSet=new HashSet<String>();
  for (int i=1; i < rsMeta.getFieldCount(); i++) {
    nameSet.add(rsMeta.getFieldName(i));
  }
  Iterator<IBinding> bindingIt=queryDefn.getBindings().values().iterator();
  while (bindingIt.hasNext()) {
    IBinding binding=bindingIt.next();
    if (nameSet.contains(binding.getBindingName())) {
      binding.setAggrFunction(null);
      binding.getAggregatOns().clear();
      binding.getArguments().clear();
      binding.setExpression(new ScriptExpression(ExpressionUtil.createDataSetRowExpression(binding.getBindingName())));
    }
  }
}","private static void populateSummaryBinding(IQueryDefinition queryDefn,IResultClass rsMeta) throws DataException {
  Set<String> nameSet=new HashSet<String>();
  for (int i=1; i <= rsMeta.getFieldCount(); i++) {
    nameSet.add(rsMeta.getFieldName(i));
  }
  Iterator<IBinding> bindingIt=queryDefn.getBindings().values().iterator();
  while (bindingIt.hasNext()) {
    IBinding binding=bindingIt.next();
    if (nameSet.contains(binding.getBindingName())) {
      binding.setAggrFunction(null);
      binding.getAggregatOns().clear();
      binding.getArguments().clear();
      binding.setExpression(new ScriptExpression(ExpressionUtil.createDataSetRowExpression(binding.getBindingName())));
    }
  }
}",0.999288256227758
67100,"/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition previousQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(dataEngine.getContext().getMode(),previousQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
 else {
    if (queryDefn.isSummaryQuery()) {
      IResultClass rsMeta=rdLoad.loadExprDataResultSet(true).getResultClass();
      populateSummaryBinding(queryDefn,rsMeta);
    }
    return BASED_ON_DATASET;
  }
}","/** 
 * Whether query is running based on the result set of report document or the data set.
 * @param dataEngine
 * @param queryDefn
 * @return true, running on result set
 * @throws DataException
 */
private static int runQueryOnRS(DataEngineImpl dataEngine,IQueryDefinition queryDefn) throws DataException {
  String queryResultID=queryDefn.getQueryResultsID();
  String rootQueryResultID=QueryResultIDUtil.get1PartID(queryResultID);
  String parentQueryResultID=null;
  if (rootQueryResultID != null)   parentQueryResultID=QueryResultIDUtil.get2PartID(queryResultID);
 else   rootQueryResultID=queryResultID;
  QueryResultInfo queryResultInfo=new QueryResultInfo(rootQueryResultID,parentQueryResultID,null,null,-1);
  RDLoad rdLoad=RDUtil.newLoad(dataEngine.getSession().getTempDir(),dataEngine.getContext(),queryResultInfo);
  IBaseQueryDefinition previousQueryDefn=rdLoad.loadQueryDefn(StreamManager.ROOT_STREAM,StreamManager.PARENT_SCOPE);
  if (QueryCompUtil.isIVQueryDefnEqual(dataEngine.getContext().getMode(),previousQueryDefn,queryDefn)) {
    return BASED_ON_PRESENTATION;
  }
 else {
    if (queryDefn.isSummaryQuery()) {
      IResultClass rsMeta=rdLoad.loadResultClass();
      populateSummaryBinding(queryDefn,rsMeta);
    }
    return BASED_ON_DATASET;
  }
}",0.9895308259015122
67101,"public void generatePageRowHints(Collection<String> keys){
  lastPageUnresolvedRowHints.clear();
  Iterator<String> iter=keys.iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    UnresolvedRowHint hint=parallelPagesUnresolvedRowHints.get(key);
    if (hint != null) {
      lastPageUnresolvedRowHints.put(key,hint);
    }
  }
}","public void generatePageRowHints(Collection<String> keys){
  pageRowHint.clear();
  Iterator<String> iter=keys.iterator();
  while (iter.hasNext()) {
    String key=iter.next();
    UnresolvedRowHint hint=hints.get(key);
    if (hint != null) {
      pageRowHint.put(key,hint);
    }
  }
}",0.8391167192429022
67102,"public HashMap<String,UnresolvedRowHint> getUnresolvedRowHints(){
  return lastPageUnresolvedRowHints;
}","public HashMap<String,UnresolvedRowHint> getUnresolvedRowHints(){
  return pageRowHint;
}",0.911917098445596
67103,"public void addUnresolvedRowHint(String key,UnresolvedRowHint hint){
  currentPageUnresolvedRowHints.put(key,hint);
}","public void addUnresolvedRowHint(String key,UnresolvedRowHint hint){
  currentHints.put(key,hint);
}",0.9216589861751152
67104,"public UnresolvedRowHint getUnresolvedRowHint(String key){
  if (parallelPagesUnresolvedRowHints.size() > 0) {
    return parallelPagesUnresolvedRowHints.get(key);
  }
  return null;
}","public UnresolvedRowHint getUnresolvedRowHint(String key){
  if (hints.size() > 0) {
    return hints.get(key);
  }
  return null;
}",0.8227848101265823
67105,"public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    context.pageNumber=pageHint.getPageNumber();
    context.masterPage=pageHint.getMasterPage();
    int count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
    count=pageHint.getUnresolvedRowCount();
    if (count > 0) {
      for (int i=0; i < count; i++) {
        UnresolvedRowHint hint=pageHint.getUnresolvedRowHint(i);
        String key=getHintMapKey(hint.getTableId());
        parallelPagesUnresolvedRowHints.put(key,hint);
      }
    }
    for (int i=0; i < pageHint.getSectionCount(); i++) {
      PageSection section=pageHint.getSection(i);
      if (section instanceof SizeBasedPageSection) {
        SizeBasedPageSection sizeBasedSection=(SizeBasedPageSection)section;
        if (sizeBasedSection.start.dimension != -1) {
          InstanceID startID=sizeBasedSection.starts[sizeBasedSection.starts.length - 1].getInstanceID();
          if (startID != null) {
            sizeBasedContentMapping.put(startID.toUniqueString(),sizeBasedSection.start);
          }
        }
        if (sizeBasedSection.end.dimension != -1) {
          InstanceID endID=sizeBasedSection.ends[sizeBasedSection.ends.length - 1].getInstanceID();
          if (endID != null) {
            sizeBasedContentMapping.put(endID.toUniqueString(),sizeBasedSection.end);
          }
        }
      }
    }
  }
}","public void setLayoutPageHint(IPageHint pageHint){
  if (pageHint != null) {
    context.pageNumber=pageHint.getPageNumber();
    context.masterPage=pageHint.getMasterPage();
    int count=pageHint.getTableColumnHintCount();
    for (int i=0; i < count; i++) {
      columnHints.add(pageHint.getTableColumnHint(i));
    }
    count=pageHint.getUnresolvedRowCount();
    if (count > 0) {
      for (int i=0; i < count; i++) {
        UnresolvedRowHint hint=pageHint.getUnresolvedRowHint(i);
        String key=getHintMapKey(hint.getTableId());
        hints.put(key,hint);
      }
    }
    for (int i=0; i < pageHint.getSectionCount(); i++) {
      PageSection section=pageHint.getSection(i);
      if (section instanceof SizeBasedPageSection) {
        SizeBasedPageSection sizeBasedSection=(SizeBasedPageSection)section;
        if (sizeBasedSection.start.dimension != -1) {
          InstanceID startID=sizeBasedSection.starts[sizeBasedSection.starts.length - 1].getInstanceID();
          if (startID != null) {
            sizeBasedContentMapping.put(startID.toUniqueString(),sizeBasedSection.start);
          }
        }
        if (sizeBasedSection.end.dimension != -1) {
          InstanceID endID=sizeBasedSection.ends[sizeBasedSection.ends.length - 1].getInstanceID();
          if (endID != null) {
            sizeBasedContentMapping.put(endID.toUniqueString(),sizeBasedSection.end);
          }
        }
      }
    }
  }
}",0.9903514817367332
67106,"public void resetRowHint(){
  if (!context.emptyPage) {
    parallelPagesUnresolvedRowHints.clear();
    parallelPagesUnresolvedRowHints.putAll(currentPageUnresolvedRowHints);
    currentPageUnresolvedRowHints.clear();
  }
}","public void resetRowHint(){
  if (!context.emptyPage) {
    hints.clear();
    hints.putAll(currentHints);
    currentHints.clear();
  }
}",0.7513812154696132
67107,"protected void end(boolean finished) throws BirtException {
  if (!finished) {
    context.getPageHintManager().resetRowHint();
  }
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  context.setEmptyPage(false);
}","protected void end(boolean finished) throws BirtException {
  if (emitter != null) {
    context.getPageBufferManager().endContainer(pageContent,finished,emitter,true);
    context.getBufferFactory().close();
  }
  if (!finished) {
    context.getPageHintManager().resetRowHint();
  }
  context.setEmptyPage(false);
}",0.5173501577287066
67108,"protected void handlePageBreakInterval(){
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign.getGroupLevel() == listingExecutor.pageBreakLevel) {
    listingExecutor.next();
    if (listingExecutor.needSoftBreakAfter()) {
      IStyle style=content.getStyle();
      if (style != null) {
        CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
        if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
          style.setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.SOFT_VALUE);
        }
      }
    }
  }
}","protected void handlePageBreakInterval(){
  GroupDesign groupDesign=(GroupDesign)design;
  if (groupDesign.getGroupLevel() == listingExecutor.pageBreakLevel) {
    listingExecutor.next();
    if (listingExecutor.needSoftBreakAfter()) {
      listingExecutor.softBreakBefore=true;
      listingExecutor.pageRowCount=0;
    }
 else     if (listingExecutor.softBreakBefore) {
      IStyle style=content.getStyle();
      if (style != null) {
        CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
        if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
          style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
        }
      }
      listingExecutor.softBreakBefore=false;
      listingExecutor.previous();
      listingExecutor.addAfterBreak=true;
    }
  }
}",0.8023255813953488
67109,"protected void handlePageBreakInterval(){
  if (listExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      listExecutor.next();
      if (listExecutor.needSoftBreakAfter()) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.SOFT_VALUE);
          }
        }
      }
    }
  }
}","protected void handlePageBreakInterval(){
  if (listExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      listExecutor.next();
      if (listExecutor.needSoftBreakAfter()) {
        listExecutor.softBreakBefore=true;
        listExecutor.pageRowCount=0;
      }
 else       if (listExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        listExecutor.softBreakBefore=false;
        listExecutor.previous();
        listExecutor.addAfterBreak=true;
      }
    }
  }
}",0.8149171270718232
67110,"public void onPageBreak(){
  pageRowCount=0;
}","public void onPageBreak(){
  pageRowCount=0;
  if (addAfterBreak) {
    next();
    addAfterBreak=false;
  }
}",0.5897435897435898
67111,"/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void close() throws BirtException {
  if (pageBreakInterval != -1) {
    context.removePageBreakListener(this);
  }
  rsetCursor=-1;
  needPageBreak=false;
  pageRowCount=0;
  pageBreakInterval=-1;
  executableElements=null;
  totalElements=0;
  currentElement=0;
  endOfListing=false;
  breakOnDetailBand=false;
  pageBreakLevel=-1;
  super.close();
}","/** 
 * access the query and create the contents. the execution process is: <li> the cursor is at the begin of result set. <li> call listing's onStart event <li> create the header <li> for each row: <ul> <li> call onRow event. <li> if the row start some groups, create the group header for that group. <li> create the detail row. <li> if the row end some groups, create the group footer for that group. </ul> <li> create the footer. <li> call the onFinish event.
 */
public void close() throws BirtException {
  if (pageBreakInterval != -1) {
    context.removePageBreakListener(this);
  }
  rsetCursor=-1;
  needPageBreak=false;
  pageRowCount=0;
  pageBreakInterval=-1;
  executableElements=null;
  totalElements=0;
  currentElement=0;
  endOfListing=false;
  breakOnDetailBand=false;
  pageBreakLevel=-1;
  softBreakBefore=false;
  addAfterBreak=false;
  super.close();
}",0.971764705882353
67112,"protected void handlePageBreakInterval(){
  if (tableExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      tableExecutor.next();
      if (tableExecutor.needSoftBreakAfter()) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_AFTER);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_AFTER,IStyle.SOFT_VALUE);
          }
        }
      }
    }
  }
}","protected void handlePageBreakInterval(){
  if (tableExecutor.breakOnDetailBand) {
    BandDesign band=(BandDesign)design;
    if (band.getBandType() == BandDesign.BAND_DETAIL) {
      tableExecutor.next();
      if (tableExecutor.needSoftBreakAfter()) {
        tableExecutor.softBreakBefore=true;
        tableExecutor.pageRowCount=0;
      }
 else       if (tableExecutor.softBreakBefore) {
        IStyle style=content.getStyle();
        if (style != null) {
          CSSValue pageBreak=style.getProperty(IStyle.STYLE_PAGE_BREAK_BEFORE);
          if (pageBreak == null || IStyle.AUTO_VALUE.equals(pageBreak)) {
            style.setProperty(IStyle.STYLE_PAGE_BREAK_BEFORE,IStyle.SOFT_VALUE);
          }
        }
        tableExecutor.softBreakBefore=false;
        tableExecutor.previous();
        tableExecutor.addAfterBreak=true;
      }
    }
  }
}",0.8123287671232877
67113,"private void populateFilterHelpers() throws DataException {
  List filters=defn.getFilters();
  List results=new ArrayList();
  Set<DimLevel> dimLevelInCubeQuery=this.getDimLevelsDefinedInCubeQuery();
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
    this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
  }
}
}
}","private void populateFilterHelpers() throws DataException {
  List filters=defn.getFilters();
  List results=new ArrayList();
  Set<String> dimLevelInCubeQuery=this.getDimensionDefinedInCubeQuery();
  for (int i=0; i < filters.size(); i++) {
    IFilterDefinition filter=(IFilterDefinition)filters.get(i);
switch (this.getFilterType(filter,dimLevelInCubeQuery)) {
case CubeQueryExecutor.DIMENSION_FILTER:
{
        SimpleLevelFilter simpleLevelfilter=createSimpleLevelFilter(filter,defn.getBindings());
        if (simpleLevelfilter == null) {
          this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
        }
 else {
          boolean existLevelFilter=false;
          for (int j=0; j < this.dimensionSimpleFilter.size(); j++) {
            if (dimensionSimpleFilter.get(j).getDimensionName().equals(simpleLevelfilter.getDimensionName()) && dimensionSimpleFilter.get(j).getLevelName().equals(simpleLevelfilter.getLevelName())) {
              this.dimensionFilterEvalHelpers.add(BaseDimensionFilterEvalHelper.createFilterHelper(this.outResults,this.scope,defn,filter,this.session.getEngineContext().getScriptContext()));
              existLevelFilter=true;
              break;
            }
          }
          if (!existLevelFilter)           this.dimensionSimpleFilter.add(simpleLevelfilter);
        }
        break;
      }
case CubeQueryExecutor.AGGR_MEASURE_FILTER:
{
      this.aggrMeasureFilterEvalHelpers.add(new AggrMeasureFilterEvalHelper(this.outResults,scope,defn,filter,session.getEngineContext().getScriptContext()));
      break;
    }
case CubeQueryExecutor.FACTTABLE_FILTER:
default :
{
    this.advancedFacttableBasedFilterEvalHelper.add(new JSFacttableFilterEvalHelper(scope,this.session.getEngineContext().getScriptContext(),filter,this.outResults,this.defn));
  }
}
}
}",0.993260756868844
67114,"private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      if (existAggregationBinding(bindingName,this.defn.getBindings()))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}","private int getFilterType(IFilterDefinition filter,Set<String> dimNamesInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        Iterator dimLevels=OlapExpressionCompiler.getReferencedDimLevel(exprsIterator.next(),this.defn.getBindings()).iterator();
        while (dimLevels.hasNext())         dimensionSet.add(((DimLevel)dimLevels.next()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null) {
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
 else {
    String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
    if (measure != null)     return CubeQueryExecutor.FACTTABLE_FILTER;
    List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
    if (bindingName.size() > 0) {
      if (existAggregationBinding(bindingName,this.defn.getBindings()))       return CubeQueryExecutor.AGGR_MEASURE_FILTER;
      return CubeQueryExecutor.FACTTABLE_FILTER;
    }
 else {
      List dimensionName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DIMENSION_SCRIPTABLE);
      if (dimensionName.size() > 1 || !dimNamesInCubeQuery.containsAll(dimensionName)) {
        return FACTTABLE_FILTER;
      }
      return DIMENSION_FILTER;
    }
  }
}",0.9807346519393784
67115,"public CubeCursorImpl(IBaseQueryResults outerResults,CubeCursor cursor,Scriptable scope,ScriptContext cx,ICubeQueryDefinition queryDefn,BirtCubeView view) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  this.cubeView=view;
  this.cx=cx;
  this.dimensionCursorMap=new HashMap<DimLevel,DimensionCursor>();
  populateDimensionCursor();
  this.outerResults=OlapExpressionUtil.createQueryResultsScriptable(outerResults);
  this.bindingMap=new HashMap();
  this.validBindingSet=new HashSet();
  this.dataTypeMap=new HashMap();
  List<IBinding> allBindings=CubeQueryDefinitionUtil.getAllBindings(queryDefn);
  for (int i=0; i < allBindings.size(); i++) {
    IBinding binding=(IBinding)allBindings.get(i);
    final String bindingName=binding.getBindingName();
    validBindingSet.add(bindingName);
    final IBaseExpression expr=binding.getExpression();
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(bindingName,expr);
      OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
    }
    dataTypeMap.put(bindingName,new Integer(binding.getDataType()));
  }
  this.scope.put(ScriptConstants.DATA_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
  this.scope.put(ScriptConstants.DATA_SET_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
}","public CubeCursorImpl(IBaseQueryResults outerResults,CubeCursor cursor,Scriptable scope,ScriptContext cx,ICubeQueryDefinition queryDefn,BirtCubeView view) throws DataException {
  this.cursor=cursor;
  this.scope=scope;
  this.queryDefn=queryDefn;
  this.cubeView=view;
  this.cx=cx;
  this.dimensionCursorMap=new HashMap<DimLevel,DimensionCursor>();
  populateDimensionCursor();
  this.outerResults=OlapExpressionUtil.createQueryResultsScriptable(outerResults);
  this.bindingMap=new HashMap();
  this.validBindingSet=new HashSet();
  this.dataTypeMap=new HashMap();
  List<IBinding> allBindings=CubeQueryDefinitionUtil.getAllBindings(queryDefn);
  for (int i=0; i < allBindings.size(); i++) {
    IBinding binding=(IBinding)allBindings.get(i);
    final String bindingName=binding.getBindingName();
    validBindingSet.add(bindingName);
    final IBaseExpression expr=binding.getExpression();
    if (binding.getAggrFunction() == null) {
      this.bindingMap.put(bindingName,expr);
      if (expr instanceof IScriptExpression) {
        if (!isSimpleDimensionExpression(((IScriptExpression)expr).getText()))         OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
      }
 else       OLAPExpressionCompiler.compile(cx.newContext(this.scope),expr);
    }
    dataTypeMap.put(bindingName,new Integer(binding.getDataType()));
  }
  this.scope.put(ScriptConstants.DATA_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
  this.scope.put(ScriptConstants.DATA_SET_BINDING_SCRIPTABLE,this.scope,new JSCubeBindingObject(this));
}",0.9266435986159168
67116,"/** 
 * @param is
 * @return
 * @throws IOException
 * @throws DataException
 */
public static ObjectInputStream createObjectInputStream(final InputStream is) throws IOException, DataException {
  try {
    return AccessController.doPrivileged(new PrivilegedExceptionAction<ObjectInputStream>(){
      public ObjectInputStream run() throws IOException {
        return new ObjectInputStream(is);
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
    throw new DataException(e.getMessage());
  }
}","public static ObjectInputStream createObjectInputStream(final InputStream is,final ClassLoader classLoader) throws IOException, DataException {
  try {
    return AccessController.doPrivileged(new PrivilegedExceptionAction<ObjectInputStream>(){
      public ObjectInputStream run() throws IOException {
        return new ObjectInputStream(is){
          protected Class resolveClass(          ObjectStreamClass desc) throws IOException, ClassNotFoundException {
            return Class.forName(desc.getName(),false,classLoader);
          }
        }
;
      }
    }
);
  }
 catch (  PrivilegedActionException e) {
    Exception typedException=e.getException();
    if (typedException instanceof IOException) {
      throw (IOException)typedException;
    }
    throw new DataException(e.getMessage());
  }
}",0.5037645448323066
67117,"/** 
 * @return fetched ResultObject
 * @throws IOException
 */
public IResultObject fetch() throws DataException {
  if (curIndex < dataCount) {
    try {
      curIndex++;
      return roUtil.readData(intputStream,1)[0];
    }
 catch (    IOException e) {
      throw new DataException(""String_Node_Str"",e);
    }
  }
  return null;
}","/** 
 * @return fetched ResultObject
 * @throws IOException
 */
public IResultObject fetch() throws DataException {
  if (curIndex < dataCount) {
    try {
      curIndex++;
      return roUtil.readData(intputStream,this.loader,1)[0];
    }
 catch (    IOException e) {
      throw new DataException(""String_Node_Str"",e);
    }
  }
  return null;
}",0.9824561403508772
67118,"/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    int readSize=bis.read(rowDataBytes);
    int totalSize=readSize;
    while (readSize > 0 && totalSize < rowLen) {
      readSize=bis.read(rowDataBytes,totalSize,rowLen - totalSize);
      totalSize+=readSize;
    }
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (Date.class.isAssignableFrom(fieldType))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=ObjectSecurity.createObjectInputStream(dis);
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}","/** 
 * Deserialze result object array from input stream. The reading procedure is strictly sequential, that means there is no random access. Datatype Corresponds to executor#setDataType
 * @param br input stream
 * @param length how many objects needs to be read
 * @param stopSign
 * @return result object array
 * @throws IOException
 * @throws DataException 
 */
public IResultObject[] readData(InputStream bis,ClassLoader classLoader,int length) throws IOException, DataException {
  ResultObject[] rowDatas=new ResultObject[length];
  int rowLen;
  byte[] rowDataBytes;
  ByteArrayInputStream bais;
  DataInputStream dis;
  for (int i=0; i < length; i++) {
    if (session.getStopSign().isStopped())     break;
    rowLen=IOUtil.readInt(bis);
    rowDataBytes=new byte[rowLen];
    int readSize=bis.read(rowDataBytes);
    int totalSize=readSize;
    while (readSize > 0 && totalSize < rowLen) {
      readSize=bis.read(rowDataBytes,totalSize,rowLen - totalSize);
      totalSize+=readSize;
    }
    bais=new ByteArrayInputStream(rowDataBytes);
    dis=new DataInputStream(bais);
    Object[] obs=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      Class fieldType=typeArray[j];
      if (dis.readByte() == 0) {
        obs[j]=null;
        continue;
      }
      if (fieldType.equals(Integer.class))       obs[j]=new Integer(dis.readInt());
 else       if (fieldType.equals(Double.class))       obs[j]=new Double(dis.readDouble());
 else       if (fieldType.equals(BigDecimal.class))       obs[j]=new BigDecimal(dis.readUTF());
 else       if (fieldType.equals(Time.class))       obs[j]=new Time(dis.readLong());
 else       if (fieldType.equals(Timestamp.class))       obs[j]=new Timestamp(dis.readLong());
 else       if (fieldType.equals(java.sql.Date.class))       obs[j]=new java.sql.Date(dis.readLong());
 else       if (Date.class.isAssignableFrom(fieldType))       obs[j]=new Date(dis.readLong());
 else       if (fieldType.equals(Boolean.class))       obs[j]=new Boolean(dis.readBoolean());
 else       if (fieldType.equals(String.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IClob.class) || fieldType.equals(Clob.class))       obs[j]=IOUtil.readString(dis);
 else       if (fieldType.equals(IBlob.class) || fieldType.equals(Blob.class)) {
        int len=IOUtil.readInt(dis);
        if (len == 0) {
          obs[j]=null;
        }
 else {
          byte[] bytes=new byte[len];
          dis.read(bytes);
          obs[j]=bytes;
        }
      }
 else       if (fieldType.equals(Object.class) || fieldType.equals(DataType.getClass(DataType.ANY_TYPE))) {
        ObjectInputStream ois=null;
        if (classLoader != null) {
          ois=ObjectSecurity.createObjectInputStream(dis,classLoader);
        }
 else {
          ois=ObjectSecurity.createObjectInputStream(dis);
        }
        try {
          obs[j]=ObjectSecurity.readObject(ois);
        }
 catch (        Exception e) {
        }
        ois.close();
      }
 else {
        throw new DataException(ResourceConstants.BAD_DATA_TYPE,fieldType.toString());
      }
    }
    rowDatas[i]=newResultObject(obs);
    rowDataBytes=null;
    dis=null;
    bais=null;
  }
  return rowDatas;
}",0.9709728867623604
67119,"/** 
 * Read the specified length of objects from file. Notice to improve the efficienly of reading, the order of reading only can be sequencial. The caller has responsibility to design a good algorithm to achive this goal.
 * @param length
 * @param stopSign
 * @throws IOException , exception of reading file
 * @return ResultObject array
 * @throws DataException 
 */
IResultObject[] read(int length) throws IOException, DataException {
  if (isOpen == false) {
    try {
      fis=FileSecurity.createFileInputStream(file);
    }
 catch (    Exception e) {
    }
    bis=new BufferedInputStream(fis);
    isOpen=true;
  }
  return resultObjectUtil.readData(bis,length);
}","/** 
 * Read the specified length of objects from file. Notice to improve the efficienly of reading, the order of reading only can be sequencial. The caller has responsibility to design a good algorithm to achive this goal.
 * @param length
 * @param stopSign
 * @throws IOException , exception of reading file
 * @return ResultObject array
 * @throws DataException 
 */
IResultObject[] read(int length) throws IOException, DataException {
  if (isOpen == false) {
    try {
      fis=FileSecurity.createFileInputStream(file);
    }
 catch (    Exception e) {
    }
    bis=new BufferedInputStream(fis);
    isOpen=true;
  }
  return resultObjectUtil.readData(bis,null,length);
}",0.9963045084996304
67120,"private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  try {
    IParameterMetaData paramMetaData=getParameterMetaData();
    if (paramMetaData != null && paramMetaData.getParameterCount() >= i)     return paramMetaData.getParameterType(i);
 else     return parameterDefn.getParameterType(i);
  }
 catch (  OdaException ex) {
    return parameterDefn.getParameterType(i);
  }
}","private int getParameterType(int i) throws OdaException {
  if (parameterDefn.getParameterType(i) != Types.CHAR)   return parameterDefn.getParameterType(i);
  try {
    IParameterMetaData paramMetaData=getParameterMetaData();
    if (paramMetaData != null && paramMetaData.getParameterCount() >= i)     return paramMetaData.getParameterType(i);
  }
 catch (  Exception ex) {
  }
  return parameterDefn.getParameterType(i);
}",0.932596685082873
67121,"public void setNull(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    if (this.getParameterMetaData() != null) {
      this.callStat.setNull(parameterId,getParameterType(parameterId));
    }
 else {
      this.callStat.setNull(parameterId,java.sql.Types.OTHER);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}","public void setNull(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    if (this.parameterDefn != null) {
      this.callStat.setNull(parameterId,getParameterType(parameterId));
    }
 else {
      this.callStat.setNull(parameterId,java.sql.Types.OTHER);
    }
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.PREPARESTATEMENT_CANNOT_SET_NULL_VALUE,e);
  }
}",0.9604790419161676
67122,"/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,int type) throws DataException {
  List columnSort;
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
    columnSort=executor.getColumnEdgeSort();
  break;
case ICubeQueryDefinition.ROW_EDGE:
columnSort=executor.getRowEdgeSort();
break;
case ICubeQueryDefinition.PAGE_EDGE:
columnSort=executor.getPageEdgeSort();
default :
return;
}
for (int i=0; i < columnSort.size(); i++) {
ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
ICubeQueryDefinition queryDefn=executor.getCubeQueryDefinition();
String expr=cubeSort.getExpression().getText();
ITargetSort targetSort=null;
if ((cubeSort.getAxisQualifierLevels().length == 0 && (OlapExpressionUtil.isComplexDimensionExpr(expr) || OlapExpressionUtil.isReferenceToAttribute(cubeSort.getExpression(),queryDefn.getBindings()))) || (!OlapExpressionUtil.isDirectRerenrence(cubeSort.getExpression(),executor.getCubeQueryDefinition().getBindings()))) {
Scriptable scope=executor.getSession().getSharedScope();
targetSort=new DimensionSortEvalHelper(executor.getOuterResults(),scope,queryDefn,cubeSort,executor.getSession().getEngineContext().getScriptContext());
}
 else {
String bindingName=OlapExpressionUtil.getBindingName(expr);
if (bindingName == null) continue;
List bindings=queryDefn.getBindings();
List aggrOns=null;
IBinding binding=null;
for (int j=0; j < bindings.size(); j++) {
binding=(IBinding)bindings.get(j);
if (binding.getBindingName().equals(bindingName)) {
aggrOns=binding.getAggregatOns();
break;
}
}
DimLevel[] aggrOnLevels=null;
if (aggrOns == null || aggrOns.size() == 0) {
if (binding == null) continue;
String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
if (measureName != null) {
List measureAggrOns=CubeQueryDefinitionUtil.populateMeasureAggrOns(queryDefn);
aggrOnLevels=new DimLevel[measureAggrOns.size()];
for (int k=0; k < measureAggrOns.size(); k++) {
aggrOnLevels[k]=(DimLevel)measureAggrOns.get(k);
}
}
}
 else {
aggrOnLevels=new DimLevel[aggrOns.size()];
for (int j=0; j < aggrOnLevels.length; j++) {
aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
}
}
DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevels().length];
for (int k=0; k < axisLevels.length; k++) {
axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevels()[k]);
}
targetSort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValues(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection());
}
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
cubeQueryExcutorHelper.addColumnSort(targetSort);
break;
case ICubeQueryDefinition.ROW_EDGE:
cubeQueryExcutorHelper.addRowSort(targetSort);
break;
case ICubeQueryDefinition.PAGE_EDGE:
cubeQueryExcutorHelper.addPageSort(targetSort);
}
}
}","/** 
 * @param cubeQueryDefinition
 * @param cubeQueryExcutorHelper
 * @throws DataException
 */
private void populateAggregationSort(CubeQueryExecutor executor,CubeQueryExecutorHelper cubeQueryExcutorHelper,int type) throws DataException {
  List columnSort;
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
    columnSort=executor.getColumnEdgeSort();
  break;
case ICubeQueryDefinition.ROW_EDGE:
columnSort=executor.getRowEdgeSort();
break;
case ICubeQueryDefinition.PAGE_EDGE:
columnSort=executor.getPageEdgeSort();
default :
return;
}
for (int i=0; i < columnSort.size(); i++) {
ICubeSortDefinition cubeSort=(ICubeSortDefinition)columnSort.get(i);
ICubeQueryDefinition queryDefn=executor.getCubeQueryDefinition();
String expr=cubeSort.getExpression().getText();
ITargetSort targetSort=null;
if ((cubeSort.getAxisQualifierLevels().length == 0 && (OlapExpressionUtil.isComplexDimensionExpr(expr) || OlapExpressionUtil.isReferenceToAttribute(cubeSort.getExpression(),queryDefn.getBindings()))) || (!OlapExpressionUtil.isDirectRerenrence(cubeSort.getExpression(),executor.getCubeQueryDefinition().getBindings()))) {
Scriptable scope=executor.getSession().getSharedScope();
targetSort=new DimensionSortEvalHelper(executor.getOuterResults(),scope,queryDefn,cubeSort,executor.getSession().getEngineContext().getScriptContext());
}
 else {
String bindingName=OlapExpressionUtil.getBindingName(expr);
if (bindingName == null) continue;
List bindings=queryDefn.getBindings();
List aggrOns=null;
IBinding binding=null;
for (int j=0; j < bindings.size(); j++) {
binding=(IBinding)bindings.get(j);
if (binding.getBindingName().equals(bindingName)) {
aggrOns=binding.getAggregatOns();
break;
}
}
DimLevel[] aggrOnLevels=null;
if (aggrOns == null || aggrOns.size() == 0) {
if (binding == null) continue;
String measureName=OlapExpressionCompiler.getReferencedScriptObject(binding.getExpression(),ScriptConstants.MEASURE_SCRIPTABLE);
if (measureName == null) {
IBinding referBinding=OlapExpressionUtil.getDirectMeasureBinding(binding,bindings);
if (referBinding != null) {
measureName=OlapExpressionUtil.getMeasure(referBinding.getExpression());
bindingName=referBinding.getBindingName();
}
}
if (measureName != null) {
List measureAggrOns=CubeQueryDefinitionUtil.populateMeasureAggrOns(queryDefn);
aggrOnLevels=new DimLevel[measureAggrOns.size()];
for (int k=0; k < measureAggrOns.size(); k++) {
aggrOnLevels[k]=(DimLevel)measureAggrOns.get(k);
}
}
}
 else {
aggrOnLevels=new DimLevel[aggrOns.size()];
for (int j=0; j < aggrOnLevels.length; j++) {
aggrOnLevels[j]=OlapExpressionUtil.getTargetDimLevel(aggrOns.get(j).toString());
}
}
DimLevel[] axisLevels=new DimLevel[cubeSort.getAxisQualifierLevels().length];
for (int k=0; k < axisLevels.length; k++) {
axisLevels[k]=new DimLevel(cubeSort.getAxisQualifierLevels()[k]);
}
targetSort=new AggrSortDefinition(aggrOnLevels,bindingName,axisLevels,cubeSort.getAxisQualifierValues(),new DimLevel(cubeSort.getTargetLevel()),cubeSort.getSortDirection());
}
switch (type) {
case ICubeQueryDefinition.COLUMN_EDGE:
cubeQueryExcutorHelper.addColumnSort(targetSort);
break;
case ICubeQueryDefinition.ROW_EDGE:
cubeQueryExcutorHelper.addRowSort(targetSort);
break;
case ICubeQueryDefinition.PAGE_EDGE:
cubeQueryExcutorHelper.addPageSort(targetSort);
}
}
}",0.9589865399841648
67123,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(Radar.TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(Radar.TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      copyChartProperties(helperModel,currentChart);
      currentChart.setType(Radar.TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    copyChartProperties(helperModel,currentChart);
    currentChart.setType(Radar.TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(Radar.TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      copyChartProperties(helperModel,currentChart);
      currentChart.setType(Radar.TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9264094104145748
67124,"/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=Calendar.getInstance(timeZone);
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}","/** 
 * @param d
 * @return
 */
private static Calendar getCalendar(Date d){
  Calendar c=Calendar.getInstance(defaultLocale);
  if (d instanceof java.sql.Date) {
    c.setTimeZone(TimeZone.getDefault());
  }
 else {
    c.setTimeZone(timeZone);
  }
  if (d == null) {
    c.clear();
    c.set(1970,0,1);
  }
 else {
    c.setTime(d);
  }
  return c;
}",0.7673611111111112
67125,"/** 
 * evaluate the script with specified script language.
 * @param language
 * @param script
 * @return
 * @throws BirtException
 */
Object evaluate(String language,String script) throws BirtException ;","/** 
 * Evaluate the script.
 * @param script
 * @return
 * @throws BirtException
 */
Object evaluate(Expression script) throws BirtException ;",0.7758620689655172
67126,"public Object evaluate(String language,String script) throws BirtException {
  if (null != script && script.length() > 0) {
    return context.evaluateInlineScript(language,script);
  }
  return null;
}","public Object evaluate(Expression script) throws BirtException {
  return context.evaluate(script);
}",0.6204620462046204
67127,"protected void updateMetaInfo(){
  for (int i=0; i < newMetaInfo.size(); i++) {
    String[] info=newMetaInfo.get(i);
    String pRsetId=info[0];
    String rawId=info[1];
    String queryId=info[2];
    String rsetId=info[3];
    String rowId=info[4];
    removeMetaInfo(pRsetId,queryId);
  }
  for (int i=0; i < metaInfo.size(); i++) {
    String[] info=metaInfo.get(i);
    storeDteMetaInfo(info[0],info[1],info[2],info[3],info[4]);
  }
  newMetaInfo.clear();
  metaInfo.clear();
}","protected void updateMetaInfo(){
  for (int i=0; i < newMetaInfo.size(); i++) {
    String[] info=newMetaInfo.get(i);
    String pRsetId=info[0];
    String rawId=info[1];
    String queryId=info[2];
    String rsetId=info[3];
    String rowId=info[4];
    removeMetaInfo(pRsetId,queryId,rsetId);
  }
  for (int i=0; i < metaInfo.size(); i++) {
    String[] info=metaInfo.get(i);
    storeDteMetaInfo(info[0],info[1],info[2],info[3],info[4]);
  }
  newMetaInfo.clear();
  metaInfo.clear();
}",0.9928205128205128
67128,"/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  List<ColumnBindingInfo> commons=new LinkedList<ColumnBindingInfo>();
  List<ColumnBindingInfo> aggs=new LinkedList<ColumnBindingInfo>();
  List<ColumnBindingInfo> groups=new LinkedList<ColumnBindingInfo>();
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.add(headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.add(headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.add(headers[i]);
break;
}
}
List<ColumnBindingInfo> groupsWithAgg=new LinkedList<ColumnBindingInfo>();
List<ColumnBindingInfo> groupsWithoutAgg=new LinkedList<ColumnBindingInfo>(groups);
for (Iterator<ColumnBindingInfo> iter=groupsWithoutAgg.iterator(); iter.hasNext(); ) {
ColumnBindingInfo cbiGroup=iter.next();
String groupName=cbiGroup.getName();
for (ColumnBindingInfo cbiAggr : aggs) {
if (groupName.equals(((ComputedColumnHandle)cbiAggr.getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.add(cbiGroup);
break;
}
}
}
ColumnBindingInfo[] categorys=new ColumnBindingInfo[groups.size() + commons.size()];
int index=0;
for (ColumnBindingInfo cbi : groups) {
categorys[index++]=cbi;
}
for (ColumnBindingInfo cbi : commons) {
categorys[index++]=cbi;
}
ColumnBindingInfo[] optionals=null;
if (isInheritColumnsGroups() && groups.size() > 0) {
List<ColumnBindingInfo> g=new LinkedList<ColumnBindingInfo>();
DesignElementHandle reh=itemHandle;
while (reh != null) {
if (reh.getContainer() instanceof TableGroupHandle) {
reh=reh.getContainer();
for (ColumnBindingInfo cbi : groups) {
g.add(cbi);
if (reh.getName().equals(cbi.getName())) {
break;
}
}
break;
}
 else if (reh.getContainer() instanceof RowHandle && reh.getContainer() != null && !(reh.getContainer().getContainer() instanceof TableGroupHandle)) {
DesignElementHandle deh=reh;
while (deh != null) {
if (deh.getContainer() instanceof ListingHandle) {
deh=deh.getContainer();
break;
}
deh=deh.getContainer();
}
if (deh != null && deh instanceof ListingHandle) {
if (((ListingHandle)deh).getDetail().findPosn(reh.getContainer()) >= 0) {
g=groups;
}
 else if (((ListingHandle)deh).getHeader().findPosn(reh.getContainer()) >= 0) {
g.add(groups.get(0));
}
}
break;
}
 else if (reh.getContainer() instanceof ListingHandle) {
reh=null;
break;
}
reh=reh.getContainer();
}
optionals=new ColumnBindingInfo[g.size()];
int i=0;
for (ColumnBindingInfo cbi : g) {
optionals[i++]=cbi;
}
}
 else {
int size=(groups.size() > 0) ? 1 : 0;
optionals=new ColumnBindingInfo[size];
if (groups.size() > 0) {
optionals[0]=groups.get(0);
}
}
ColumnBindingInfo[] values=new ColumnBindingInfo[aggs.size() + commons.size()];
index=0;
for (ColumnBindingInfo cbi : aggs) {
values[index++]=cbi;
}
for (ColumnBindingInfo cbi : commons) {
values[index++]=cbi;
}
return new Object[]{categorys,optionals,values};
}","/** 
 * Returns predefined expressions for sharing case.
 * @param headers
 * @return
 */
private Object[] getPredefinedExpressionsForSharing(ColumnBindingInfo[] headers){
  List<ColumnBindingInfo> commons=new LinkedList<ColumnBindingInfo>();
  List<ColumnBindingInfo> aggs=new LinkedList<ColumnBindingInfo>();
  List<ColumnBindingInfo> groups=new LinkedList<ColumnBindingInfo>();
  for (int i=0; i < headers.length; i++) {
    int type=headers[i].getColumnType();
switch (type) {
case ColumnBindingInfo.COMMON_COLUMN:
      commons.add(headers[i]);
    break;
case ColumnBindingInfo.AGGREGATE_COLUMN:
  aggs.add(headers[i]);
break;
case ColumnBindingInfo.GROUP_COLUMN:
groups.add(headers[i]);
break;
}
}
List<ColumnBindingInfo> groupsWithAgg=new LinkedList<ColumnBindingInfo>();
List<ColumnBindingInfo> groupsWithoutAgg=new LinkedList<ColumnBindingInfo>(groups);
for (Iterator<ColumnBindingInfo> iter=groupsWithoutAgg.iterator(); iter.hasNext(); ) {
ColumnBindingInfo cbiGroup=iter.next();
String groupName=cbiGroup.getName();
for (ColumnBindingInfo cbiAggr : aggs) {
if (groupName.equals(((ComputedColumnHandle)cbiAggr.getObjectHandle()).getAggregateOn())) {
iter.remove();
groupsWithAgg.add(cbiGroup);
break;
}
}
}
ColumnBindingInfo[] categorys=new ColumnBindingInfo[groups.size() + commons.size()];
int index=0;
for (ColumnBindingInfo cbi : groups) {
categorys[index++]=cbi;
}
for (ColumnBindingInfo cbi : commons) {
categorys[index++]=cbi;
}
ColumnBindingInfo[] optionals=null;
if (isInheritColumnsGroups() && groups.size() > 0) {
List<ColumnBindingInfo> g=new LinkedList<ColumnBindingInfo>();
DesignElementHandle reh=itemHandle;
while (reh != null) {
if (reh.getContainer() instanceof GroupHandle) {
reh=reh.getContainer();
for (ColumnBindingInfo cbi : groups) {
g.add(cbi);
if (reh.getName().equals(cbi.getName())) {
break;
}
}
break;
}
 else if (reh.getContainer() instanceof RowHandle && reh.getContainer() != null && !(reh.getContainer().getContainer() instanceof GroupHandle)) {
DesignElementHandle deh=reh;
while (deh != null) {
if (deh.getContainer() instanceof ListingHandle) {
deh=deh.getContainer();
break;
}
deh=deh.getContainer();
}
if (deh != null && deh instanceof ListingHandle) {
if (((ListingHandle)deh).getDetail().findPosn(reh.getContainer()) >= 0) {
g=groups;
}
 else if (((ListingHandle)deh).getHeader().findPosn(reh.getContainer()) >= 0) {
g.add(groups.get(0));
}
}
break;
}
 else if (reh.getContainer() instanceof ListingHandle) {
reh=null;
break;
}
reh=reh.getContainer();
}
optionals=new ColumnBindingInfo[g.size()];
int i=0;
for (ColumnBindingInfo cbi : g) {
optionals[i++]=cbi;
}
}
 else {
int size=(groups.size() > 0) ? 1 : 0;
optionals=new ColumnBindingInfo[size];
if (groups.size() > 0) {
optionals[0]=groups.get(0);
}
}
ColumnBindingInfo[] values=new ColumnBindingInfo[aggs.size() + commons.size()];
index=0;
for (ColumnBindingInfo cbi : aggs) {
values[index++]=cbi;
}
for (ColumnBindingInfo cbi : commons) {
values[index++]=cbi;
}
return new Object[]{categorys,optionals,values};
}",0.9983465608465608
67129,"public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            Orientation currentOrientation=this.orientation;
            this.orientation=ChartUIUtil.getChartType(sType).getDefaultOrientation();
            if (currentOrientation != this.orientation) {
              this.rotateAxisTitle((ChartWithAxes)chartModel);
            }
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((ChartWithAxes)chartModel).getAxes().get(0).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
        String sDisplayName=overlayAxis.getSeriesDefinitions().get(0).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=cbDimension.getItem(cbDimension.getSelectionIndex());
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
    updateDimensionCombo(sType);
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}","public void widgetSelected(SelectionEvent e){
  boolean needUpdateModel=false;
  Object oSelected=e.getSource();
  if (oSelected.getClass().equals(Button.class)) {
    needUpdateModel=true;
    if (oSelected.equals(cbOrientation)) {
      if (cbOrientation.getSelection()) {
        orientation=Orientation.HORIZONTAL_LITERAL;
      }
 else {
        orientation=Orientation.VERTICAL_LITERAL;
      }
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      ChartCacheManager.getInstance().cacheOrientation(sType,orientation);
    }
 else {
      Button btn=(Button)e.getSource();
      if (btn.getSelection()) {
        if (this.sSubType != null && !getSubtypeFromButton(btn).equals(sSubType)) {
          int iTypeIndex=vSubTypeNames.indexOf(sSubType);
          if (iTypeIndex >= 0) {
            ((Button)cmpTypeButtons.getChildren()[iTypeIndex]).setSelection(false);
            cmpTypeButtons.redraw();
          }
        }
        ChartUIUtil.saveLabelPositionIntoCache(getSeriesDefinitionForProcessing());
        sSubType=getSubtypeFromButton(btn);
        ChartCacheManager.getInstance().cacheSubtype(sType,sSubType);
      }
 else {
        if (this.sSubType != null && getSubtypeFromButton(btn).equals(sSubType)) {
          btn.setSelection(true);
        }
      }
    }
  }
 else   if (oSelected.getClass().equals(Table.class)) {
    sType=((String)((TableItem)e.item).getData()).trim();
    if (!sOldType.equals(sType)) {
      sOldType=sType;
      if (!getDataServiceProvider().checkState(IDataServiceProvider.PART_CHART)) {
        if (chartModel != null && chartModel instanceof ChartWithAxes) {
          Orientation lastOrientation=ChartCacheManager.getInstance().findOrientation(sType);
          if (lastOrientation != null && this.orientation != lastOrientation) {
            this.orientation=lastOrientation;
            this.rotateAxisTitle((ChartWithAxes)chartModel);
          }
          if (lastOrientation == null) {
            Orientation currentOrientation=this.orientation;
            this.orientation=ChartUIUtil.getChartType(sType).getDefaultOrientation();
            if (currentOrientation != this.orientation) {
              this.rotateAxisTitle((ChartWithAxes)chartModel);
            }
          }
        }
      }
      if (chartModel != null && chartModel instanceof ChartWithAxes && ChartCacheManager.getInstance().findCategory(sType) != null) {
        boolean bCategory=ChartCacheManager.getInstance().findCategory(sType).booleanValue();
        ((ChartWithAxes)chartModel).getAxes().get(0).setCategoryAxis(bCategory);
      }
      sSubType=null;
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      cmpMisc.layout();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbMultipleY)) {
    needUpdateModel=true;
    lblSeriesType.setEnabled(isTwoAxesEnabled());
    Axis xAxis=((ChartWithAxes)chartModel).getAxes().get(0);
    ((ChartWizardContext)getContext()).setMoreAxesSupported(cbMultipleY.getSelectionIndex() == 2);
    if (chartModel instanceof ChartWithoutAxes) {
      throw new IllegalArgumentException(Messages.getString(""String_Node_Str""));
    }
    ChartAdapter.beginIgnoreNotifications();
    int iAxisNumber=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
    if (cbMultipleY.getSelectionIndex() == 0) {
      ChartCacheManager.getInstance().cacheSeriesType(null);
      if (iAxisNumber > 1) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 1);
      }
    }
 else     if (cbMultipleY.getSelectionIndex() == 1) {
      if (iAxisNumber == 1) {
        ChartUIUtil.addAxis((ChartWithAxes)chartModel);
      }
 else       if (iAxisNumber > 2) {
        ChartUIUtil.removeLastAxes((ChartWithAxes)chartModel,iAxisNumber - 2);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    if (xAxis.getAssociatedAxes().size() > 1) {
      String lastSeriesType=ChartCacheManager.getInstance().findSeriesType();
      if (lastSeriesType != null) {
        cbSeriesType.setText(lastSeriesType);
      }
 else {
        Axis overlayAxis=xAxis.getAssociatedAxes().get(1);
        String sDisplayName=overlayAxis.getSeriesDefinitions().get(0).getDesignTimeSeries().getDisplayName();
        cbSeriesType.setText(sDisplayName);
      }
      changeOverlaySeriesType();
    }
    cbSeriesType.setEnabled(isTwoAxesEnabled());
    if (updateDimensionCombo(sType)) {
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
    }
    cmpMisc.layout();
  }
 else   if (oSelected.equals(cbDimension)) {
    String newDimension=((String[])cbDimension.getData())[cbDimension.getSelectionIndex()];
    if (!newDimension.equals(sDimension)) {
      sDimension=newDimension;
      ChartCacheManager.getInstance().cacheDimension(sType,sDimension);
      createAndDisplayTypesSheet(sType);
      setDefaultSubtypeSelection();
      populateSeriesTypesList();
      needUpdateModel=true;
    }
  }
 else   if (oSelected.equals(cbSeriesType)) {
    needUpdateModel=true;
    changeOverlaySeriesType();
    updateDimensionCombo(sType);
  }
  if (needUpdateModel) {
    ChartAdapter.notifyUpdateApply();
    refreshChart();
    if (oSelected.getClass().equals(Table.class)) {
      populateSeriesTypesList();
    }
 else     if (oSelected.equals(cbOrientation)) {
      if (chartModel instanceof ChartWithAxes) {
        rotateAxisTitle((ChartWithAxes)chartModel);
      }
    }
    doPreview();
  }
}",0.9921632950610534
67130,"/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
private boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  boolean bAreaSeriesMixed=isAreaSeriesMixed();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      if (bAreaSeriesMixed && dimensionArray[i].equals(IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE)) {
        continue;
      }
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  if (cache != null) {
    sDimension=cache;
    isOldExist=true;
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}","/** 
 * Updates the dimension combo according to chart type and axes number
 * @param sSelectedType Chart type
 * @return whether the dimension is changed after updating
 */
protected boolean updateDimensionCombo(String sSelectedType){
  boolean isOldExist=false;
  IChartType chartType=ChartUIUtil.getChartType(sSelectedType);
  String[] dimensionArray=chartType.getSupportedDimensions();
  int axesNum=ChartUIUtil.getOrthogonalAxisNumber(chartModel);
  if (sDimension == null) {
    sDimension=chartType.getDefaultDimension();
    isOldExist=true;
  }
  cbDimension.removeAll();
  boolean bAreaSeriesMixed=isAreaSeriesMixed();
  for (int i=0; i < dimensionArray.length; i++) {
    boolean isSupported=chartType.isDimensionSupported(dimensionArray[i],(ChartWizardContext)context,axesNum,0);
    if (isSupported) {
      if (bAreaSeriesMixed && dimensionArray[i].equals(IChartType.TWO_DIMENSION_WITH_DEPTH_TYPE)) {
        continue;
      }
      cbDimension.add(dimensionArray[i]);
    }
    if (!isOldExist && sDimension.equals(dimensionArray[i])) {
      isOldExist=isSupported;
    }
  }
  cbDimension.setData(cbDimension.getItems());
  String cache=ChartCacheManager.getInstance().getDimension(sSelectedType);
  if (cache != null) {
    sDimension=cache;
    isOldExist=true;
  }
  if (!isOldExist) {
    sDimension=chartType.getDefaultDimension();
  }
  cbDimension.setText(sDimension);
  return !isOldExist;
}",0.978799856270212
67131,"private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        ChartAdapter.beginIgnoreNotifications();
        if (query.getGrouping() == null) {
          query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
        }
        SeriesGrouping group=query.getGrouping();
        group.setEnabled(true);
        group.setAggregateExpression(""String_Node_Str"");
        ChartAdapter.endIgnoreNotifications();
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    if (ChartUIUtil.hasLimitOnCategorySortKey(context) && ChartUtil.hasSorting(seriesdefinition)) {
      Query sortQuery=seriesdefinition.getSortKey();
      if (sortQuery == null) {
        sortQuery=QueryImpl.create(expression);
        sortQuery.eAdapters().addAll(seriesdefinition.eAdapters());
        seriesdefinition.setSortKey(sortQuery);
      }
 else {
        sortQuery.setDefinition(expression);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      if (seriesdefinition.getSortKey() != null) {
        seriesdefinition.getSortKey().setDefinition(null);
      }
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}","private void setQueryExpression(String expression){
  if (ChartUIConstants.QUERY_VALUE.equals(queryType)) {
    if (!(context.getChartType() instanceof GanttChart) && !context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
      if (context.getDataServiceProvider().getDataType(expression) == DataType.DATE_TIME_LITERAL) {
        SeriesGrouping basegrouping=ChartUtil.getBaseSeriesDefinitions(context.getModel()).get(0).getGrouping();
        if (basegrouping != null && basegrouping.isEnabled() && !ChartUIUtil.isDataTimeSupportedAgg(basegrouping.getAggregateExpression())) {
          ChartAdapter.beginIgnoreNotifications();
          if (query.getGrouping() == null) {
            query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
          }
          SeriesGrouping group=query.getGrouping();
          group.setEnabled(true);
          if (!ChartUIUtil.isDataTimeSupportedAgg(group.getAggregateExpression())) {
            group.setAggregateExpression(""String_Node_Str"");
          }
          ChartAdapter.endIgnoreNotifications();
        }
      }
    }
  }
 else   if (ChartUIConstants.QUERY_CATEGORY.equals(queryType)) {
    DataType type=context.getDataServiceProvider().getDataType(expression);
    ChartAdapter.beginIgnoreNotifications();
    if (seriesdefinition.getGrouping() == null) {
      seriesdefinition.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
    }
    seriesdefinition.getGrouping().setGroupType(type);
    if (type == DataType.DATE_TIME_LITERAL) {
      seriesdefinition.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
    }
    if (ChartUIUtil.hasLimitOnCategorySortKey(context) && ChartUtil.hasSorting(seriesdefinition)) {
      Query sortQuery=seriesdefinition.getSortKey();
      if (sortQuery == null) {
        sortQuery=QueryImpl.create(expression);
        sortQuery.eAdapters().addAll(seriesdefinition.eAdapters());
        seriesdefinition.setSortKey(sortQuery);
      }
 else {
        sortQuery.setDefinition(expression);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
 else   if (ChartUIConstants.QUERY_OPTIONAL.equals(queryType)) {
    ChartAdapter.beginIgnoreNotifications();
    if (expression == null || expression.trim().length() == 0) {
      seriesdefinition.eUnset(DataPackage.eINSTANCE.getSeriesDefinition_Sorting());
      if (seriesdefinition.getSortKey() != null) {
        seriesdefinition.getSortKey().setDefinition(null);
      }
    }
 else {
      if (seriesdefinition.getSortKey() != null && seriesdefinition.getSortKey().getDefinition() != null && seriesdefinition.getSortKey().getDefinition().equals(query.getDefinition())) {
        seriesdefinition.getSortKey().setDefinition(expression);
      }
      DataType type=context.getDataServiceProvider().getDataType(expression);
      if (query.getGrouping() == null) {
        query.setGrouping(DataFactoryImpl.init().createSeriesGrouping());
      }
      query.getGrouping().setGroupType(type);
      if (type == DataType.DATE_TIME_LITERAL && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_DATA_SET)) {
        query.getGrouping().setGroupingUnit(GroupingUnitType.YEARS_LITERAL);
      }
    }
    ChartAdapter.endIgnoreNotifications();
  }
  if (query != null) {
    query.setDefinition(expression);
  }
 else {
    query=QueryImpl.create(expression);
    query.eAdapters().addAll(seriesdefinition.eAdapters());
    seriesdefinition.setQuery(query);
  }
}",0.9380189798339263
67132,"private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        bnMin=NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds));
        bnMax=NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds));
        continue;
      }
      bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds)));
      bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds)));
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    BigDecimal absMin=bnMin.abs();
    if (absMin.compareTo(NumberUtil.DOUBLE_MIN) >= 0 && absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=BigDecimal.ONE.divide(NumberUtil.DEFAULT_MULTIPLIER.divide(bnMin,NumberUtil.DEFAULT_MATHCONTEXT),NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=bnMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}","private static void adjustDataSets(Series[] seriesArray,BigDecimal bnMinFixed,BigDecimal bnMaxFixed) throws ChartException {
  IDataSetProcessor idsp;
  boolean hasBigNumber=false;
  Number[] doaDataSet=null;
  BigDecimal bnMin=null;
  BigDecimal bnMax=null;
  for (  Series series : seriesArray) {
    DataSet ds=series.getDataSet();
    hasBigNumber=((DataSetImpl)ds).isBigNumber();
    if (hasBigNumber) {
      break;
    }
  }
  if (hasBigNumber) {
    for (    Series series : seriesArray) {
      DataSet ds=series.getDataSet();
      idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
      if (bnMin == null) {
        bnMin=NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds));
        bnMax=NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds));
        continue;
      }
      bnMin=bnMin.min(NumberUtil.asBigDecimal((Number)idsp.getMinimum(ds)));
      bnMax=bnMax.max(NumberUtil.asBigDecimal((Number)idsp.getMaximum(ds)));
    }
    bnMin=bnMinFixed != null ? bnMinFixed : bnMin;
    bnMax=bnMaxFixed != null ? bnMaxFixed : bnMax;
    BigDecimal absMax=bnMax.abs();
    BigDecimal absMin=bnMin.abs();
    if (absMax.compareTo(NumberUtil.DOUBLE_MAX) <= 0) {
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        ((DataSetImpl)ds).setIsBigNumber(false);
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] newDoaDataSet=new Double[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            newDoaDataSet[j]=NumberUtil.asDouble(doaDataSet[j]);
          }
          ds.setValues(newDoaDataSet);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new Number[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asDouble(nums[k]);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else     if (absMax.compareTo(NumberUtil.DOUBLE_MIN) < 0) {
      BigDecimal divisor=BigDecimal.ONE.divide(NumberUtil.DEFAULT_MULTIPLIER.divide(bnMin,NumberUtil.DEFAULT_MATHCONTEXT),NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
 else {
      BigDecimal divisor=bnMax.divide(NumberUtil.DEFAULT_DIVISOR,NumberUtil.DEFAULT_MATHCONTEXT);
      for (      Series series : seriesArray) {
        DataSet ds=series.getDataSet();
        idsp=PluginSettings.instance().getDataSetProcessor(series.getClass());
        if (ds.getValues() instanceof Number[]) {
          doaDataSet=(Number[])ds.getValues();
          Number[] numbers=new BigNumber[doaDataSet.length];
          for (int j=0; j < doaDataSet.length; j++) {
            numbers[j]=NumberUtil.asBigNumber(doaDataSet[j],divisor);
          }
          ds.setValues(numbers);
        }
 else         if (ds.getValues() instanceof NumberDataPointEntry[]) {
          NumberDataPointEntry[] ndpe=(NumberDataPointEntry[])ds.getValues();
          for (int j=0; j < ndpe.length; j++) {
            Number[] nums=ndpe[j].getNumberData();
            if (nums == null || nums.length == 0) {
              continue;
            }
            Number[] newNums=new BigNumber[nums.length];
            for (int k=0; k < nums.length; k++) {
              newNums[k]=NumberUtil.asBigNumber(nums[k],divisor);
            }
            ndpe[j].setNumberData(newNums);
          }
        }
      }
    }
  }
}",0.99510603588907
67133,"private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  return null;
}","private ColumnHintHandle findColumnHint(DataSetHandle handle,String columnName){
  if (columnName == null || columnName.trim().length() == 0)   return null;
  ColumnHintHandle hint=null;
  Iterator iter=handle.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP).iterator();
  while (iter.hasNext()) {
    hint=(ColumnHintHandle)iter.next();
    if (columnName.equals(hint.getColumnName())) {
      return hint;
    }
  }
  if (hint == null && (handle instanceof DerivedDataSetHandle)) {
    List<DataSetHandle> inputDataSets=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSets.size(); i++) {
      hint=findColumnHint(inputDataSets.get(i),columnName);
      if (hint != null) {
        return hint;
      }
    }
  }
  return hint;
}",0.7032418952618454
67134,"private void maintainCompatibility(Chart cm){
  ChartUtil.reviseVersion(cm);
  if (cm.getInteractivity() == null) {
    Interactivity interactivity=InteractivityImpl.create();
    interactivity.eAdapters().addAll(cm.eAdapters());
    cm.setInteractivity(interactivity);
  }
  if (cm.getLegend().getSeparator() == null) {
    LineAttributes separator=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
    separator.setVisible(true);
    separator.eAdapters().addAll(cm.eAdapters());
    cm.getLegend().setSeparator(separator);
  }
  if (cm.getExtendedProperties().isEmpty()) {
    ChartModelHelper.instance().updateExtendedProperties(cm.getExtendedProperties());
  }
}","private void maintainCompatibility(Chart cm){
  ChartUtil.reviseVersion(cm);
  if (cm.getInteractivity() == null) {
    Interactivity interactivity=InteractivityImpl.create();
    interactivity.eAdapters().addAll(cm.eAdapters());
    cm.setInteractivity(interactivity);
  }
  if (cm.getLegend().getSeparator() == null) {
    LineAttributes separator=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1);
    separator.setVisible(true);
    separator.eAdapters().addAll(cm.eAdapters());
    cm.getLegend().setSeparator(separator);
  }
  if (cm.getExtendedProperties().isEmpty()) {
    ChartModelHelper.instance().updateExtendedProperties(cm.getExtendedProperties());
  }
  if (cm.getSampleData() == null) {
    SampleData sampleData=DataFactory.eINSTANCE.createSampleData();
    sampleData.getBaseSampleData().clear();
    sampleData.getOrthogonalSampleData().clear();
    if (cm instanceof ChartWithoutAxes) {
      BaseSampleData sdBase=DataFactory.eINSTANCE.createBaseSampleData();
      sdBase.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.TEXT_LITERAL,0));
      sampleData.getBaseSampleData().add(sdBase);
      for (int i=0; i < ChartUtil.getAllOrthogonalSeriesDefinitions(cm).size(); i++) {
        OrthogonalSampleData oSample=DataFactory.eINSTANCE.createOrthogonalSampleData();
        oSample.setDataSetRepresentation(ChartUtil.getNewSampleData(AxisType.LINEAR_LITERAL,i));
        oSample.setSeriesDefinitionIndex(i);
        sampleData.getOrthogonalSampleData().add(oSample);
      }
    }
 else     if (cm instanceof ChartWithAxes) {
      ChartWithAxes chart=(ChartWithAxes)cm;
      BaseSampleData sdBase=DataFactory.eINSTANCE.createBaseSampleData();
      sdBase.setDataSetRepresentation(ChartUtil.getNewSampleData(ChartUIUtil.getAxisXForProcessing(chart).getType(),0));
      sampleData.getBaseSampleData().add(sdBase);
      int i=0;
      for (      Axis axis : ChartUIUtil.getAxisXForProcessing(chart).getAssociatedAxes()) {
        for (        SeriesDefinition sd : axis.getSeriesDefinitions()) {
          OrthogonalSampleData oSample=DataFactory.eINSTANCE.createOrthogonalSampleData();
          oSample.setDataSetRepresentation(ChartUtil.getNewSampleData(axis.getType(),i));
          oSample.setSeriesDefinitionIndex(i);
          sampleData.getOrthogonalSampleData().add(oSample);
          i++;
        }
      }
    }
    cm.setSampleData(sampleData);
  }
}",0.4469309462915601
67135,"/** 
 * Checks if given dimension cusor is associated with a dummy group
 */
public static boolean isDummyGroup(DimensionCursor dc) throws OLAPException {
  return dc.getEdgeStart() == -1 && dc.getEdgeEnd() == -1;
}","/** 
 * Checks if given dimension cusor is associated with a dummy group
 */
public static boolean isDummyGroup(DimensionCursor dc) throws OLAPException {
  return dc.getExtent() == -1;
}",0.9154228855721394
67136,"public void testAction() throws Exception {
  Report report=loadDesign(""String_Node_Str"");
  ActionDesign action=report.getContent(0).getAction();
  assertEquals(ActionDesign.ACTION_HYPERLINK,action.getActionType());
  assertEquals(""String_Node_Str"",action.getTargetWindow());
  assertExpression(""String_Node_Str"",action.getHyperlink());
  assertEquals(""String_Node_Str"",action.getTooltip());
  assertEquals(null,action.getBookmark());
  assertEquals(null,action.getDrillThrough());
  action=report.getContent(1).getAction();
  assertEquals(ActionDesign.ACTION_HYPERLINK,action.getActionType());
  assertConstant(""String_Node_Str"",action.getHyperlink());
  action=report.getContent(2).getAction();
  assertEquals(ActionDesign.ACTION_BOOKMARK,action.getActionType());
  assertEquals(null,action.getHyperlink());
  assertExpression(""String_Node_Str"",action.getBookmark());
  assertEquals(null,action.getDrillThrough());
  action=report.getContent(3).getAction();
  assertEquals(ActionDesign.ACTION_BOOKMARK,action.getActionType());
  assertConstant(""String_Node_Str"",action.getBookmark());
  action=report.getContent(4).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  assertEquals(null,action.getBookmark());
  assertEquals(null,action.getHyperlink());
  DrillThroughActionDesign drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  assertEquals(true,drill.getBookmarkType());
  assertExpression(""String_Node_Str"",drill.getBookmark());
  assertEquals(""String_Node_Str"",drill.getFormat());
  Map<String,Expression> exprs=drill.getParameters();
  assertEquals(2,exprs.size());
  assertExpression(""String_Node_Str"",exprs.get(""String_Node_Str""));
  assertConstant(""String_Node_Str"",exprs.get(""String_Node_Str""));
  action=report.getContent(5).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  assertEquals(false,drill.getBookmarkType());
  assertConstant(""String_Node_Str"",drill.getBookmark());
  action=report.getContent(6).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  action=report.getContent(7).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
}","public void testAction() throws Exception {
  Report report=loadDesign(""String_Node_Str"");
  ActionDesign action=report.getContent(0).getAction();
  assertEquals(ActionDesign.ACTION_HYPERLINK,action.getActionType());
  assertEquals(""String_Node_Str"",action.getTargetWindow());
  assertExpression(""String_Node_Str"",action.getHyperlink());
  assertEquals(""String_Node_Str"",action.getTooltip());
  assertEquals(null,action.getBookmark());
  assertEquals(null,action.getDrillThrough());
  action=report.getContent(1).getAction();
  assertEquals(ActionDesign.ACTION_HYPERLINK,action.getActionType());
  assertConstant(""String_Node_Str"",action.getHyperlink());
  action=report.getContent(2).getAction();
  assertEquals(ActionDesign.ACTION_BOOKMARK,action.getActionType());
  assertEquals(null,action.getHyperlink());
  assertExpression(""String_Node_Str"",action.getBookmark());
  assertEquals(null,action.getDrillThrough());
  action=report.getContent(3).getAction();
  assertEquals(ActionDesign.ACTION_BOOKMARK,action.getActionType());
  assertConstant(""String_Node_Str"",action.getBookmark());
  action=report.getContent(4).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  assertEquals(null,action.getBookmark());
  assertEquals(null,action.getHyperlink());
  DrillThroughActionDesign drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  assertEquals(true,drill.getBookmarkType());
  assertExpression(""String_Node_Str"",drill.getBookmark());
  assertEquals(""String_Node_Str"",drill.getFormat());
  Map<String,List<Expression>> exprs=drill.getParameters();
  assertEquals(2,exprs.size());
  assertExpression(""String_Node_Str"",exprs.get(""String_Node_Str"").get(0));
  assertConstant(""String_Node_Str"",exprs.get(""String_Node_Str"").get(0));
  action=report.getContent(5).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  assertEquals(false,drill.getBookmarkType());
  assertConstant(""String_Node_Str"",drill.getBookmark());
  action=report.getContent(6).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
  action=report.getContent(7).getAction();
  assertEquals(ActionDesign.ACTION_DRILLTHROUGH,action.getActionType());
  drill=action.getDrillThrough();
  assertEquals(""String_Node_Str"",drill.getTargetFileType());
  assertConstant(""String_Node_Str"",drill.getReportName());
}",0.99639379733141
67137,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight){
  IStyle style=getElementStyle(cell);
  if (fixedReport && style != null) {
    HTMLEmitterUtil.buildOverflowStyle(styleBuffer,style,true);
  }
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  if (null != style) {
    CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
    if (IStyle.NONE_VALUE == display) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    if (fixedCellHeight) {
      styleBuffer.append(""String_Node_Str"");
    }
 else {
      AttributeBuilder.buildPaddings(styleBuffer,style);
    }
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  if (fixedCellHeight) {
    styleBuffer.append(""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  }
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight){
  IStyle style=getElementStyle(cell);
  if (fixedReport) {
    HTMLEmitterUtil.buildOverflowStyle(styleBuffer,style,true);
  }
  IStyle cellMergedStyle=new CellMergedStyle(cell);
  if (null != style) {
    CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
    if (IStyle.NONE_VALUE == display) {
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildFont(styleBuffer,style);
  }
  AttributeBuilder.buildFont(styleBuffer,cellMergedStyle);
  if (isHead) {
    String fontWeight=null;
    if (null != style) {
      fontWeight=style.getFontWeight();
    }
    String mergedFontWeight=cellMergedStyle.getFontWeight();
    if (null == fontWeight && null == mergedFontWeight) {
      IStyle cellComputedStyle=cell.getComputedStyle();
      if (null != cellComputedStyle) {
        fontWeight=cellComputedStyle.getFontWeight();
      }
      if (fontWeight == null) {
        fontWeight=""String_Node_Str"";
      }
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(fontWeight);
      styleBuffer.append(""String_Node_Str"");
    }
  }
  if (null != style) {
    AttributeBuilder.buildMargins(styleBuffer,style);
    if (fixedCellHeight) {
      styleBuffer.append(""String_Node_Str"");
    }
 else {
      AttributeBuilder.buildPaddings(styleBuffer,style);
    }
  }
  AttributeBuilder.buildMargins(styleBuffer,cellMergedStyle);
  if (fixedCellHeight) {
    styleBuffer.append(""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildPaddings(styleBuffer,cellMergedStyle);
  }
  buildCellBorder(cell,styleBuffer);
  if (null != style) {
    AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
    AttributeBuilder.buildText(styleBuffer,style);
    AttributeBuilder.buildVisual(styleBuffer,style);
  }
  AttributeBuilder.buildBackground(styleBuffer,cellMergedStyle,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,cellMergedStyle);
  AttributeBuilder.buildVisual(styleBuffer,cellMergedStyle);
}",0.9960419091967404
67138,"/** 
 * build overflow style which displays the vertical or horizontal scrollbar automatically if content inside the div tag exceed the limit in any aspect.
 * @param buf - the buffer to build the overflow style
 * @param style - the style of current report item
 * @param outputHidden - whether to output the overflow property with hidden value
 */
public static void buildOverflowStyle(StringBuffer buf,IStyle style,boolean outputHidden){
  if (style != null) {
    String overflow=style.getOverflow();
    if (outputHidden || (overflow != null && !CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE.equals(overflow))) {
      buf.append(""String_Node_Str"");
      buf.append(overflow != null ? overflow : CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE);
      buf.append(""String_Node_Str"");
    }
  }
}","/** 
 * build overflow style which displays the vertical or horizontal scrollbar automatically if content inside the div tag exceed the limit in any aspect.
 * @param buf - the buffer to build the overflow style
 * @param style - the style of current report item
 * @param outputHidden - whether to output the overflow property with hidden value
 */
public static void buildOverflowStyle(StringBuffer buf,IStyle style,boolean outputHidden){
  String overflow=null;
  if (style != null) {
    overflow=style.getOverflow();
  }
  if (outputHidden || (overflow != null && !CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE.equals(overflow))) {
    buf.append(""String_Node_Str"");
    buf.append(overflow != null ? overflow : CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE);
    buf.append(""String_Node_Str"");
  }
}",0.9714285714285714
67139,"public void restart(){
  this.isCancelled=false;
}","public void restart() throws EngineException {
  getDataEngine().getDTESession().restart();
  this.isCancelled=false;
}",0.591715976331361
67140,"public void modifyText(ModifyEvent e){
  if (e.widget.equals(txtHeight)) {
    if (txtHeight.isSetValue()) {
      getBlockForProcessing().setHeightHint(txtHeight.getValue());
    }
 else {
      getBlockForProcessing().unsetHeightHint();
    }
  }
 else   if (e.widget.equals(txtWidth)) {
    if (txtWidth.isSetValue()) {
      getBlockForProcessing().setWidthHint(txtWidth.getValue());
    }
 else {
      getBlockForProcessing().unsetWidthHint();
    }
  }
}","public void modifyText(ModifyEvent e){
  if (e.widget.equals(txtHeight)) {
    if (txtHeight.isSetValue()) {
      double height=txtHeight.getValue();
      double max=getChart().getBlock().getBounds().getHeight();
      max=max > 0 ? max : 130;
      height=height > max ? max : height;
      getBlockForProcessing().setHeightHint(height);
      if (height != txtHeight.getValue()) {
        txtHeight.setValue(height);
      }
    }
 else {
      getBlockForProcessing().unsetHeightHint();
    }
  }
 else   if (e.widget.equals(txtWidth)) {
    if (txtWidth.isSetValue()) {
      double width=txtWidth.getValue();
      double max=getChart().getBlock().getBounds().getWidth();
      max=max > 0 ? max : 220;
      width=width > max ? max : width;
      getBlockForProcessing().setWidthHint(width);
      if (width != txtWidth.getValue()) {
        txtWidth.setValue(width);
      }
    }
 else {
      getBlockForProcessing().unsetWidthHint();
    }
  }
}",0.6473906911142454
67141,"private BindingColumn(String columnName,IBaseExpression baseExpr,boolean isAggregation,int type){
  this.columnName=columnName;
  this.baseExpr=baseExpr;
  this.isAggregation=isAggregation;
  this.type=type;
  if (this.baseExpr instanceof ScriptExpression) {
    ((ScriptExpression)this.baseExpr).setDataType(type);
  }
}","private BindingColumn(String columnName,IBaseExpression baseExpr,boolean isAggregation,int type){
  this.columnName=columnName;
  this.baseExpr=baseExpr;
  this.isAggregation=isAggregation;
  this.type=type;
}",0.7886792452830189
67142,"private void doNew(){
  doEdit(new ComputedColumn());
}","private void doNew(){
  doEdit(new ComputedColumn(),true);
}",0.9565217391304348
67143,"protected void doEdit(Object structureOrHandle){
  ComputedColumnInputDialog dlg=new ComputedColumnInputDialog(structureOrHandle);
  if (dlg.open() == Window.OK) {
    updateComputedColumn(structureOrHandle);
  }
}","protected void doEdit(Object structureOrHandle,boolean applyAnalysis){
  ComputedColumnInputDialog dlg=new ComputedColumnInputDialog(structureOrHandle,applyAnalysis);
  if (dlg.open() == Window.OK) {
    updateComputedColumn(structureOrHandle);
  }
}",0.9224137931034484
67144,"/** 
 * @param structureOrHandle
 */
private ComputedColumnInputDialog(Object structureOrHandle){
  super(structureOrHandle);
  populateFunctions();
}","/** 
 * @param structureOrHandle
 */
private ComputedColumnInputDialog(Object structureOrHandle,boolean applyAnalysis){
  super(structureOrHandle);
  populateFunctions();
}",0.9316770186335404
67145,"public boolean next() throws DataException {
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.currResultObj.getResultClass().getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet,streamsWrapper.getOutputStringTable(this.currResultObj.getResultClass()),streamsWrapper.getStreamForIndex(this.currResultObj.getResultClass()),this.rowCount - 1);
      }
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
  this.currResultObj=this.rowResultSet.next();
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}","public boolean next() throws DataException {
  if (currResultObj == null)   return false;
  if (this.streamsWrapper != null && currResultObj != null) {
    try {
      if (dataSetStream != null) {
        int colCount=this.currResultObj.getResultClass().getFieldCount();
        IOUtil.writeLong(dataSetLenStream,offset);
        offset+=ResultSetUtil.writeResultObject(new DataOutputStream(dataSetStream),currResultObj,colCount,resultSetNameSet,streamsWrapper.getOutputStringTable(this.currResultObj.getResultClass()),streamsWrapper.getStreamForIndex(this.currResultObj.getResultClass()),this.rowCount - 1);
      }
    }
 catch (    IOException e) {
      throw new DataException(e.getLocalizedMessage(),e);
    }
  }
  try {
    this.currResultObj=this.rowResultSet.next();
  }
 catch (  DataException e) {
    this.currResultObj=null;
    throw e;
  }
  if (this.currResultObj != null)   rowCount++;
  return this.currResultObj != null;
}",0.9234285714285714
67146,"/** 
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 * @param action
 */
private void addURLRedirectJSCode(Element elm,StructureSource src,String scriptEvent,boolean bDblClick,Action action){
  ActionValue av=action.getValue();
  if (av instanceof URLValue) {
    URLValue urlValue=(URLValue)av;
    setURLValueAttributes(urlValue,elm,src,scriptEvent,bDblClick);
  }
 else   if (av instanceof MultiURLValues) {
    MultiURLValues muv=(MultiURLValues)av;
    List<URLValue> validURLValues=MultiActionValuesScriptGenerator.getValidURLValues(muv);
    int size=validURLValues.size();
    if (size == 1) {
      setURLValueAttributes(validURLValues.get(0),elm,src,scriptEvent,bDblClick);
    }
 else     if (size > 1) {
      setMultiURLValuesAttributes(muv,elm,src,scriptEvent,bDblClick);
    }
    setTooltipForURLRedirect(elm,src,muv.getTooltip());
  }
}","/** 
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 * @param action
 */
private void addURLRedirectJSCode(Element elm,StructureSource src,String scriptEvent,boolean bDblClick,Action action){
  ActionValue av=action.getValue();
  if (av instanceof URLValue) {
    URLValue urlValue=(URLValue)av;
    setURLValueAttributes(urlValue,elm,src,scriptEvent,bDblClick);
  }
 else   if (av instanceof MultiURLValues) {
    MultiURLValues muv=(MultiURLValues)av;
    setTooltipForURLRedirect(elm,src,muv.getTooltip());
    List<URLValue> validURLValues=MultiActionValuesScriptGenerator.getValidURLValues(muv);
    int size=validURLValues.size();
    if (size == 1) {
      setURLValueAttributes(validURLValues.get(0),elm,src,scriptEvent,bDblClick);
    }
 else     if (size > 1) {
      setMultiURLValuesAttributes(muv,elm,src,scriptEvent,bDblClick);
    }
  }
}",0.9360730593607306
67147,"/** 
 * Set SVG attributes for URL value.
 * @param urlValue
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 */
private void setURLValueAttributes(URLValue urlValue,Element elm,StructureSource src,String scriptEvent,boolean bDblClick){
  String url=""String_Node_Str"";
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"";
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    url=urlValue.getBaseUrl();
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    String jsRedirect=""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"";
    url=""String_Node_Str"" + jsRedirect + ""String_Node_Str""+ jsRedirect+ ""String_Node_Str"";
  }
  elm.setAttribute(scriptEvent,wrapJS(bDblClick,url));
  setTooltipForURLRedirect(elm,src,urlValue);
}","/** 
 * Set SVG attributes for URL value.
 * @param urlValue
 * @param elm
 * @param src
 * @param scriptEvent
 * @param bDblClick
 */
private void setURLValueAttributes(URLValue urlValue,Element elm,StructureSource src,String scriptEvent,boolean bDblClick){
  setTooltipForURLRedirect(elm,src,urlValue);
  String url=""String_Node_Str"";
  if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    url=""String_Node_Str"" + urlValue.getBaseUrl() + ""String_Node_Str"";
  }
 else   if (urlValue.getBaseUrl().startsWith(""String_Node_Str"")) {
    url=urlValue.getBaseUrl();
  }
 else {
    String target=urlValue.getTarget();
    if (target == null)     target=""String_Node_Str"";
    String jsRedirect=""String_Node_Str"" + target + ""String_Node_Str""+ urlValue.getBaseUrl()+ ""String_Node_Str"";
    url=""String_Node_Str"" + jsRedirect + ""String_Node_Str""+ jsRedirect+ ""String_Node_Str"";
  }
  elm.setAttribute(scriptEvent,wrapJS(bDblClick,url));
}",0.325531914893617
67148,"public String getText(){
  IForeignContent fc=(IForeignContent)content;
  String type=fc.getRawType();
  if (IForeignContent.TEMPLATE_TYPE.equals(type)) {
    Object[] rawValue=(Object[])fc.getRawValue();
    if (rawValue[0] != null) {
      return (String)rawValue[0];
    }
  }
 else   if (IForeignContent.HTML_TYPE.equals(type) || IForeignContent.TEXT_TYPE.equals(type)) {
    return (fc.getRawValue() == null ? null : fc.getRawValue().toString());
  }
  return null;
}","public String getText(){
  IForeignContent fc=(IForeignContent)content;
  String type=fc.getRawType();
  if (IForeignContent.TEMPLATE_TYPE.equals(type)) {
    String text=null;
    Object[] rawValue=(Object[])fc.getRawValue();
    if (rawValue[0] != null) {
      text=(String)rawValue[0];
    }
    if (text == null) {
      if (fc.getGenerateBy() instanceof TextItemDesign) {
        TextItemDesign design=(TextItemDesign)fc.getGenerateBy();
        text=design.getText();
      }
    }
    return text;
  }
 else   if (IForeignContent.HTML_TYPE.equals(type) || IForeignContent.TEXT_TYPE.equals(type)) {
    return (fc.getRawValue() == null ? null : fc.getRawValue().toString());
  }
  return null;
}",0.7921635434412265
67149,"/** 
 * Returns preview row data for table shared binding, it will share table's bindings and get them data.
 * @param headers
 * @param rowCount
 * @param isStringType
 * @return
 * @throws ChartException
 * @since 2.3
 */
private List<Object[]> getPreviewRowData(ColumnBindingInfo[] headers,int rowCount,boolean isStringType) throws ChartException {
  List<Object[]> dataList=new ArrayList<Object[]>();
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  try {
    QueryDefinition queryDefn=new QueryDefinition();
    queryDefn.setMaxRows(getMaxRow());
    List<String> columns=generateShareBindingsWithTable(headers,queryDefn,session,new HashMap<String,String>());
    Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(IExtendedItemModel.FILTER_PROP));
    if (filtersIterator != null) {
      while (filtersIterator.hasNext()) {
        IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
        queryDefn.addFilter(filter);
      }
    }
    IQueryResults actualResultSet=executeSharedQuery(queryDefn);
    if (actualResultSet != null) {
      int columnCount=columns.size();
      IResultIterator iter=actualResultSet.getResultIterator();
      while (iter.next()) {
        if (isStringType) {
          String[] record=new String[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=DataTypeUtil.toString(iter.getValue(columns.get(n)));
          }
          dataList.add(record);
        }
 else {
          Object[] record=new Object[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=iter.getValue(columns.get(n));
          }
          dataList.add(record);
        }
      }
      actualResultSet.close();
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
  return dataList;
}","/** 
 * Returns preview row data for table shared binding, it will share table's bindings and get them data.
 * @param headers
 * @param rowCount
 * @param isStringType
 * @return
 * @throws ChartException
 * @since 2.3
 */
private List<Object[]> getPreviewRowData(ColumnBindingInfo[] headers,int rowCount,boolean isStringType) throws ChartException {
  List<Object[]> dataList=new ArrayList<Object[]>();
  ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
  ClassLoader parentLoader=oldContextLoader;
  if (parentLoader == null)   parentLoader=this.getClass().getClassLoader();
  ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,itemHandle.getModuleHandle());
  Thread.currentThread().setContextClassLoader(newContextLoader);
  try {
    QueryDefinition queryDefn=new QueryDefinition();
    queryDefn.setMaxRows(getMaxRow());
    List<String> columns=generateShareBindingsWithTable(headers,queryDefn,session,new HashMap<String,String>());
    Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(IExtendedItemModel.FILTER_PROP));
    if (filtersIterator != null) {
      while (filtersIterator.hasNext()) {
        IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
        queryDefn.addFilter(filter);
      }
    }
    IQueryResults actualResultSet=executeSharedQuery(queryDefn);
    if (actualResultSet != null) {
      int columnCount=columns.size();
      IResultIterator iter=actualResultSet.getResultIterator();
      while (iter.next()) {
        if (isStringType) {
          String[] record=new String[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=valueAsString(iter.getValue(columns.get(n)));
          }
          dataList.add(record);
        }
 else {
          Object[] record=new Object[columnCount];
          for (int n=0; n < columnCount; n++) {
            record[n]=iter.getValue(columns.get(n));
          }
          dataList.add(record);
        }
      }
      actualResultSet.close();
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
 finally {
    Thread.currentThread().setContextClassLoader(oldContextLoader);
  }
  return dataList;
}",0.995295124037639
67150,"protected boolean isSameInstance(InstanceID a,InstanceID b){
  if (a == b) {
    return true;
  }
  if (a != null && b != null) {
    if (a.getUniqueID() == b.getUniqueID()) {
      return true;
    }
  }
  return false;
}","protected boolean isSameInstance(InstanceID a,InstanceID b){
  if (a == b) {
    return true;
  }
  if (a != null && b != null) {
    if (a.getComponentID() == b.getComponentID() && a.getUniqueID() == b.getUniqueID()) {
      return true;
    }
  }
  return false;
}",0.9098360655737704
67151,"public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping,modelAdapter);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping,modelAdapter);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(aah.getName(),modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}","public static ICubeQueryDefinition createCubeQuery(CrosstabReportItemHandle crosstabItem,IDataQueryDefinition parentQuery,boolean needMeasure,boolean needRowDimension,boolean needColumnDimension,boolean needBinding,boolean needSorting,boolean needFilter) throws BirtException {
  ICubeQueryDefinition cubeQuery=getCubeElementFactory().createCubeQuery(crosstabItem.getCubeName());
  List<String> rowLevelNameList=new ArrayList<String>();
  List<String> columnLevelNameList=new ArrayList<String>();
  List<LevelViewHandle> levelViewList=new ArrayList<LevelViewHandle>();
  Map<LevelHandle,ILevelDefinition> levelMapping=new HashMap<LevelHandle,ILevelDefinition>();
  DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
  try {
    IModelAdapter modelAdapter=session.getModelAdaptor();
    if (needMeasure) {
      for (int i=0; i < crosstabItem.getMeasureCount(); i++) {
        MeasureViewHandle mv=crosstabItem.getMeasure(i);
        addFactTableOrMeasureFilter(mv.filtersIterator(),cubeQuery,modelAdapter);
        if (mv instanceof ComputedMeasureViewHandle) {
          continue;
        }
        if (mv.getCubeMeasure() == null) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",mv.getCubeMeasureName()));
        }
        IMeasureDefinition mDef=cubeQuery.createMeasure(mv.getCubeMeasure().getName());
        mDef.setAggrFunction(mv.getCubeMeasure().getFunction() == null ? null : DataAdapterUtil.getRollUpAggregationName(mv.getCubeMeasure().getFunction()));
      }
    }
    if (needRowDimension && crosstabItem.getDimensionCount(ROW_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,ROW_AXIS_TYPE,rowLevelNameList,levelViewList,levelMapping,modelAdapter);
    }
    if (needColumnDimension && crosstabItem.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
      addEdgeDefinition(cubeQuery,crosstabItem,COLUMN_AXIS_TYPE,columnLevelNameList,levelViewList,levelMapping,modelAdapter);
    }
    addFactTableOrMeasureFilter(crosstabItem.filtersIterator(),cubeQuery,modelAdapter);
    if (needSorting) {
      addLevelSorting(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needFilter) {
      addLevelFilter(levelViewList,levelMapping,cubeQuery,modelAdapter);
    }
    if (needBinding) {
      Iterator bindingItr=((ExtendedItemHandle)crosstabItem.getModelHandle()).columnBindingsIterator();
      ModuleHandle module=((ExtendedItemHandle)crosstabItem.getModelHandle()).getModuleHandle();
      if (bindingItr != null) {
        Map<String,String> cache=new HashMap<String,String>();
        while (bindingItr.hasNext()) {
          ComputedColumnHandle column=(ComputedColumnHandle)bindingItr.next();
          Binding binding=new Binding(column.getName());
          binding.setAggrFunction(column.getAggregateFunction() == null ? null : DataAdapterUtil.adaptModelAggregationType(column.getAggregateFunction()));
          binding.setExpression(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.EXPRESSION_MEMBER).getValue(),ExpressionLocation.CUBE));
          binding.setDataType(DataAdapterUtil.adaptModelDataType(column.getDataType()));
          if (column.getFilterExpression() != null) {
            binding.setFilter(modelAdapter.adaptExpression((Expression)column.getExpressionProperty(ComputedColumn.FILTER_MEMBER).getValue(),ExpressionLocation.CUBE));
          }
          for (Iterator argItr=column.argumentsIterator(); argItr.hasNext(); ) {
            AggregationArgumentHandle aah=(AggregationArgumentHandle)argItr.next();
            if (aah.getValue() != null) {
              binding.addArgument(aah.getName(),modelAdapter.adaptExpression((Expression)aah.getExpressionProperty(AggregationArgument.VALUE_MEMBER).getValue(),ExpressionLocation.CUBE));
            }
          }
          List aggrList=column.getAggregateOnList();
          if (aggrList != null) {
            for (Iterator aggrItr=aggrList.iterator(); aggrItr.hasNext(); ) {
              String baseLevel=(String)aggrItr.next();
              CrosstabUtil.addHierachyAggregateOn(module,binding,baseLevel,rowLevelNameList,columnLevelNameList,cache);
            }
          }
          cubeQuery.addBinding(binding);
        }
      }
    }
  }
  finally {
    session.shutdown();
  }
  return cubeQuery;
}",0.9812098991750688
67152,"public boolean isIndexColumn(){
  if (this.columnHintHandle != null)   return columnHintHandle.isIndexColumn();
 else   return (Boolean)columnHint.getProperty(null,ColumnHint.INDEX_COLUMN_MEMBER);
}","public boolean isIndexColumn(){
  if (this.columnHintHandle != null) {
    return columnHintHandle.isIndexColumn();
  }
 else {
    if (columnHint.getProperty(null,ColumnHint.INDEX_COLUMN_MEMBER) instanceof Boolean) {
      return (Boolean)columnHint.getProperty(null,ColumnHint.INDEX_COLUMN_MEMBER);
    }
    return false;
  }
}",0.6628787878787878
67153,"/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && !(measureView instanceof ComputedMeasureViewHandle)) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equals(defaultFunction)) {
      try {
        column.setDataType(DataAdapterUtil.adapterToModelDataType(getAggregationManager().getAggregation(column.getAggregateFunction()).getDataType()));
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}","/** 
 * @param crosstab
 * @param measureView
 * @param function
 * @param rowDimension
 * @param rowLevel
 * @param colDimension
 * @param colLevel
 * @throws SemanticException
 */
public static void addDataItem(CrosstabReportItemHandle crosstab,AggregationCellHandle cell,MeasureViewHandle measureView,String function,String rowDimension,String rowLevel,String colDimension,String colLevel,boolean forceAdd) throws SemanticException {
  if (crosstab == null || measureView == null)   return;
  if (cell == null) {
    cell=measureView.getAggregationCell(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell == null && forceAdd) {
    cell=measureView.addAggregation(rowDimension,rowLevel,colDimension,colLevel);
  }
  if (cell != null && !(measureView instanceof ComputedMeasureViewHandle)) {
    String name=CrosstabModelUtil.generateComputedColumnName(measureView,colLevel,rowLevel);
    ComputedColumn column=StructureFactory.newComputedColumn(crosstab.getModelHandle(),name);
    String dataType=measureView.getDataType();
    column.setDataType(dataType);
    column.setExpression(ExpressionUtil.createJSMeasureExpression(measureView.getCubeMeasureName()));
    String defaultFunction=getDefaultMeasureAggregationFunction(measureView);
    column.setAggregateFunction(function != null ? function : defaultFunction);
    if (function != null && !function.equals(defaultFunction)) {
      try {
        String targetType=DataAdapterUtil.adapterToModelDataType(getAggregationManager().getAggregation(column.getAggregateFunction()).getDataType());
        if (!DesignChoiceConstants.COLUMN_DATA_TYPE_ANY.equals(targetType)) {
          column.setDataType(targetType);
        }
      }
 catch (      BirtException e) {
      }
    }
    if (rowLevel != null) {
      column.addAggregateOn(rowLevel);
    }
    if (colLevel != null) {
      column.addAggregateOn(colLevel);
    }
    ComputedColumnHandle columnHandle=((ReportItemHandle)crosstab.getModelHandle()).addColumnBinding(column,false);
    if (cell.getContents().size() == 0) {
      DataItemHandle dataItem=crosstab.getModuleHandle().getElementFactory().newDataItem(null);
      dataItem.setResultSetColumn(columnHandle.getName());
      cell.addContent(dataItem);
    }
 else     if (cell.getContents().size() == 1 && cell.getContents().get(0) instanceof DataItemHandle) {
      DataItemHandle dataItem=(DataItemHandle)cell.getContents().get(0);
      dataItem.setResultSetColumn(columnHandle.getName());
    }
  }
}",0.966996699669967
67154,"public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    RAInputStream aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    DataInputStream valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    RAInputStream aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    DataInputStream valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        if (manager.getVersion() >= VersionManager.VERSION_2_5_2_1) {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
        }
 else {
          valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
        }
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.8815471394037067
67155,"@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (emptyVlaue != null && handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      ArrayList<MapRule> rules=mapHandle.getListValue();
      if (rules != null) {
        List<MapRule> removeList=new ArrayList<MapRule>();
        for (        MapRule rl : rules) {
          if (rl.getTestExpression() != null && rl.getTestExpression().startsWith(AUTO_EMPTY_VALUE_EXPR_PREFIX)) {
            removeList.add(rl);
          }
        }
        if (removeList.size() > 0) {
          mapHandle.removeItems(removeList);
        }
      }
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(AUTO_EMPTY_VALUE_EXPR_PREFIX + ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      ArrayList<MapRule> rules=mapHandle.getListValue();
      if (rules != null) {
        List<MapRule> removeList=new ArrayList<MapRule>();
        for (        MapRule rl : rules) {
          if (rl.getTestExpression() != null && rl.getTestExpression().startsWith(AUTO_EMPTY_VALUE_EXPR_PREFIX)) {
            removeList.add(rl);
          }
        }
        if (removeList.size() > 0) {
          mapHandle.removeItems(removeList);
        }
      }
      if (emptyVlaue != null) {
        MapRule rule=StructureFactory.createMapRule();
        rule.setTestExpression(AUTO_EMPTY_VALUE_EXPR_PREFIX + ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
        rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
        rule.setDisplay(emptyVlaue);
        try {
          mapHandle.addItem(rule);
        }
 catch (        SemanticException e) {
          logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
        }
      }
    }
  }
}",0.975121359223301
67156,"public void testTotalQuartile() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_QUARTILE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertFalse(!ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0)});
  }
  ac.finish();
  Object value=ac.getValue();
  assertEquals(value,new Double(10));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(1)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(12.5));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(2)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(30));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(3)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(85));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(4)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(300));
  try {
    ac.start();
    for (int i=0; i < doubleArray3.length; i++) {
      ac.onRow(new Object[]{doubleArray3[i],new Double(5)});
    }
    ac.finish();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
  ac=ag.newAccumulator();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i],new Double(1)});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(""String_Node_Str"").compareTo((BigDecimal)ret) == 0);
}","public void testTotalQuartile() throws Exception {
  IAggrFunction ag=buildInAggrFactory.getAggregation(""String_Node_Str"");
  Accumulator ac=ag.newAccumulator();
  assertEquals(IBuildInAggregation.TOTAL_QUARTILE_FUNC,ag.getName());
  assertEquals(IAggrFunction.SUMMARY_AGGR,ag.getType());
  assertEquals(2,ag.getParameterDefn().length);
  assertTrue(!ag.getParameterDefn()[0].isOptional());
  assertFalse(ag.getParameterDefn()[1].isOptional());
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(0)});
  }
  ac.finish();
  Object value=ac.getValue();
  assertEquals(value,new Double(10));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(1)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(12.5));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(2)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(30));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(3)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(85));
  ac.start();
  for (int i=0; i < doubleArray3.length; i++) {
    ac.onRow(new Object[]{doubleArray3[i],new Double(4)});
  }
  ac.finish();
  value=ac.getValue();
  assertEquals(value,new Double(300));
  try {
    ac.start();
    for (int i=0; i < doubleArray3.length; i++) {
      ac.onRow(new Object[]{doubleArray3[i],new Double(5)});
    }
    ac.finish();
    fail(""String_Node_Str"");
  }
 catch (  DataException e) {
  }
  ac=ag.newAccumulator();
  ac.start();
  for (int i=0; i < bigDecimalArray.length; i++) {
    ac.onRow(new Object[]{bigDecimalArray[i],new Double(1)});
  }
  ac.finish();
  Object ret=ac.getValue();
  assertTrue(ret instanceof BigDecimal);
  assertTrue(new BigDecimal(""String_Node_Str"").compareTo((BigDecimal)ret) == 0);
}",0.9997509339975094
67157,"public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    RAInputStream aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    DataInputStream valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset + 1,-1));
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public RDAggrUtil(StreamManager manager,IBaseQueryDefinition qd) throws DataException {
  this.qd=qd;
  try {
    RAInputStream aggrIndexStream=manager.getInStream(DataEngineContext.AGGR_INDEX_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
    int aggrSize=IOUtil.readInt(aggrIndexStream);
    DataInputStream aggrIndexDis=new DataInputStream(aggrIndexStream);
    DataInputStream valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),0,-1));
    for (int i=0; i < aggrSize; i++) {
      RDAggrValueHolder holder=new RDAggrValueHolder(valueStream);
      holders.put(holder.getName(),holder);
      if (i < aggrSize - 1) {
        long offset=IOUtil.readLong(aggrIndexDis);
        valueStream=new DataInputStream(new WrapperedRAInputStream(manager.getInStream(DataEngineContext.AGGR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE),offset,-1));
      }
    }
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.998175182481752
67158,"/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    RAOutputStream outputStream=context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        outputStream.seek(outputStream.length());
        outputStream.writeInt(0);
        outputStream.writeInt(0);
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return outputStream;
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}","/** 
 * @param streamType
 * @param streamPos
 * @param streamScope
 * @return
 * @throws DataException
 */
public OutputStream getOutStream(int streamType,int streamPos,int streamScope) throws DataException {
  StreamID streamID=getStreamID(streamType,streamPos,streamScope);
  if (!useTempStream(streamType)) {
    RAOutputStream outputStream=context.getOutputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (this.version >= VersionManager.VERSION_2_5_2_1)     return outputStream;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        outputStream.seek(outputStream.length());
        outputStream.writeInt(0);
        outputStream.writeInt(0);
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return outputStream;
  }
 else {
    int sType=DataEngineContext.META_STREAM;
    if (streamType == DataEngineContext.DATASET_DATA_STREAM || streamType == DataEngineContext.DATASET_META_STREAM)     sType=DataEngineContext.DATASET_DATA_STREAM;
    return this.getTempStreamManager(getStreamID(sType,streamPos,streamScope)).getOutputStream(streamType);
  }
}",0.9191020753917832
67159,"/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.DATASET_DATA_LEN_STREAM:
return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.PLS_GROUPLEVEL_STREAM:
return false;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
case DataEngineContext.AGGR_INDEX_STREAM:
return true;
case DataEngineContext.AGGR_VALUE_STREAM:
return true;
default :
return false;
}
}","/** 
 * @param streamType
 * @return
 */
private boolean useTempStream(int streamType){
  if (this.version < VersionManager.VERSION_2_2 || this.version >= VersionManager.VERSION_2_5_2_1)   return false;
switch (streamType) {
case DataEngineContext.DATASET_DATA_STREAM:
    return false;
case DataEngineContext.DATASET_META_STREAM:
  return !(this.version < VersionManager.VERSION_2_2_0);
case DataEngineContext.DATASET_DATA_LEN_STREAM:
return false;
case DataEngineContext.EXPR_VALUE_STREAM:
return false;
case DataEngineContext.EXPR_ROWLEN_STREAM:
return this.version < VersionManager.VERSION_2_2_0;
case DataEngineContext.EXPR_META_STREAM:
return true;
case DataEngineContext.GROUP_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_INFO_STREAM:
return false;
case DataEngineContext.QUERY_DEFN_STREAM:
return true;
case DataEngineContext.ORIGINAL_QUERY_DEFN_STREAM:
return false;
case DataEngineContext.ROW_INDEX_STREAM:
return true;
case DataEngineContext.QUERYID_INFO_STREAM:
return true;
case DataEngineContext.SUBQUERY_PARENTINDEX_STREAM:
return true;
case DataEngineContext.PLS_GROUPLEVEL_STREAM:
return false;
case DataEngineContext.META_STREAM:
return false;
case DataEngineContext.META_INDEX_STREAM:
return false;
case DataEngineContext.AGGR_INDEX_STREAM:
return true;
case DataEngineContext.AGGR_VALUE_STREAM:
return true;
default :
return false;
}
}",0.98138495904691
67160,"private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    RAInputStream stream=(RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        stream.readInt();
        int size=stream.readInt();
        stream.skip(size);
        stream.readInt();
        stream.readInt();
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return stream;
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}","private RAInputStream createInputStream(StreamID streamID,int streamType) throws DataException {
  if (!useTempStream(streamType)) {
    RAInputStream stream=(RAInputStream)context.getInputStream(streamID.getStartStream(),streamID.getSubQueryStream(),streamType);
    if (this.version >= VersionManager.VERSION_2_5_2_1) {
      return stream;
    }
    if (streamType == DataEngineContext.DATASET_DATA_STREAM && this.version >= VersionManager.VERSION_2_2_0) {
      try {
        stream.readInt();
        int size=stream.readInt();
        stream.skip(size);
        stream.readInt();
        stream.readInt();
      }
 catch (      IOException e) {
        logger.log(Level.FINE,e.getMessage(),e);
      }
    }
    return stream;
  }
 else {
    return this.getMetaManager(streamID,streamType).getRAInputStream(streamType);
  }
}",0.9461684610512984
67161,"/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_5_2_0;
}","/** 
 * @return
 */
public static int getLatestVersion(){
  return VERSION_2_5_2_1;
}",0.9882352941176472
67162,"public static AggregationManager getAggregationManager() throws BirtException {
  if (manager == null) {
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    manager=session.getAggregationManager();
    session.shutdown();
  }
  return manager;
}","private static AggregationManager getAggregationManager() throws BirtException {
  if (manager == null) {
    DataRequestSession session=DataRequestSession.newSession(new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION));
    manager=session.getAggregationManager();
    session.shutdown();
  }
  return manager;
}",0.9832572298325722
67163,"@Override public void setExpressionType(String exprType){
  if (getExpressionType().equals(exprType)) {
    return;
  }
  super.setExpressionType(exprType);
  ComboProxy cp=ComboProxy.getInstance(control);
  if (cp != null) {
    String[] itemsOld=cp.getItems();
    String userExpr=cp.getText();
    cp.removeAll();
    for (    String oldItem : itemsOld) {
      IExpressionDescriptor desc=(IExpressionDescriptor)cp.getData(oldItem);
      addComboItem(cp,desc);
    }
    cp.setText(userExpr);
  }
}","@Override public void setExpressionType(String exprType){
  if (getExpressionType().equals(exprType)) {
    return;
  }
  super.setExpressionType(exprType);
  ComboProxy cp=ComboProxy.getInstance(control);
  if (cp != null) {
    String[] itemsOld=cp.getItems();
    String userExpr=cp.getText();
    cp.removeAll();
    for (    String oldItem : itemsOld) {
      IExpressionDescriptor desc=(IExpressionDescriptor)cp.getData(oldItem);
      if (desc != null) {
        addComboItem(cp,desc);
      }
 else {
        cp.add(oldItem);
      }
    }
    cp.setText(userExpr);
  }
}",0.8825161887141536
67164,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expressionProvider=ep;
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expressionProvider=ep;
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(getIndexForOperatorValue(""String_Node_Str""));
  }
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9725430789623176
67165,"private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  ceb.setPredefinedQuery(new String[]{CHOICE_SELECT_VALUE});
  return expressionValue;
}","private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.add(CHOICE_SELECT_VALUE);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  return expressionValue;
}",0.8862453531598513
67166,"private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  andLable.setVisible(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.setVisible(false);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}","private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  andLable.setVisible(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.setVisible(false);
  ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
  condition.getParent().layout(true,true);
  return 1;
}",0.8428270042194093
67167,"/** 
 * Gets the aggregation function expression
 * @param orthoSD
 * @param strBaseAggExp
 * @throws ChartException 
 * @since BIRT 2.3
 */
public static String getAggregateFunctionExpr(SeriesDefinition orthoSD,String strBaseAggExp,Query orthQuery) throws ChartException {
  String strOrthoAgg=null;
  SeriesGrouping grouping=orthoSD.getGrouping();
  if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
    strOrthoAgg=orthQuery.getGrouping().getAggregateExpression();
  }
 else   if (grouping != null && grouping.isEnabled()) {
    strOrthoAgg=grouping.getAggregateExpression();
  }
  if (strBaseAggExp == null && strOrthoAgg != null) {
    IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(strOrthoAgg);
    if (aFunc.getType() != IAggregateFunction.RUNNING_AGGR) {
      strOrthoAgg=null;
    }
  }
  if (strOrthoAgg == null || ""String_Node_Str"".equals(strOrthoAgg)) {
    strOrthoAgg=strBaseAggExp;
  }
  return strOrthoAgg;
}","/** 
 * Gets the aggregation function expression
 * @param orthoSD
 * @param strBaseAggExp
 * @throws ChartException 
 * @since BIRT 2.3
 */
public static String getAggregateFunctionExpr(SeriesDefinition orthoSD,String strBaseAggExp,Query orthQuery) throws ChartException {
  String strOrthoAgg=null;
  SeriesGrouping grouping=orthoSD.getGrouping();
  if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
    strOrthoAgg=orthQuery.getGrouping().getAggregateExpression();
  }
 else   if (grouping != null && grouping.isEnabled()) {
    strOrthoAgg=grouping.getAggregateExpression();
  }
  if (strBaseAggExp == null && strOrthoAgg != null) {
    IAggregateFunction aFunc=PluginSettings.instance().getAggregateFunction(strOrthoAgg);
    if (aFunc != null && aFunc.getType() != IAggregateFunction.RUNNING_AGGR) {
      strOrthoAgg=null;
    }
  }
  if (strOrthoAgg == null || ""String_Node_Str"".equals(strOrthoAgg)) {
    strOrthoAgg=strBaseAggExp;
  }
  return strOrthoAgg;
}",0.991571641051066
67168,"private void convertSampleData(Axis axis,AxisType axisType){
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=chartModel.getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation(),0));
  }
 else {
    int iStartIndex=getFirstSeriesDefinitionIndexForAxis(axis);
    int iEndIndex=iStartIndex + axis.getSeriesDefinitions().size();
    int iOSDSize=chartModel.getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=chartModel.getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= iStartIndex && osd.getSeriesDefinitionIndex() < iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation(),i));
      }
    }
  }
}","private void convertSampleData(Axis axis,AxisType axisType){
  if (chartModel.getSampleData() == null) {
    return;
  }
  if ((axis.getAssociatedAxes() != null) && (axis.getAssociatedAxes().size() != 0)) {
    BaseSampleData bsd=chartModel.getSampleData().getBaseSampleData().get(0);
    bsd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,bsd.getDataSetRepresentation(),0));
  }
 else {
    int iStartIndex=getFirstSeriesDefinitionIndexForAxis(axis);
    int iEndIndex=iStartIndex + axis.getSeriesDefinitions().size();
    int iOSDSize=chartModel.getSampleData().getOrthogonalSampleData().size();
    for (int i=0; i < iOSDSize; i++) {
      OrthogonalSampleData osd=chartModel.getSampleData().getOrthogonalSampleData().get(i);
      if (osd.getSeriesDefinitionIndex() >= iStartIndex && osd.getSeriesDefinitionIndex() < iEndIndex) {
        osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisType,osd.getDataSetRepresentation(),i));
      }
    }
  }
}",0.9696969696969696
67169,"protected String[] getAllReportItemReferences(){
  List<ReportItemHandle> referenceList=itemHandle.getNamedDataBindingReferenceList();
  List<String> itemsWithName=new ArrayList<String>();
  for (int i=0; i < referenceList.size(); i++) {
    String qualfiedName=referenceList.get(i).getQualifiedName();
    if (qualfiedName != null && qualfiedName.length() > 0) {
      itemsWithName.add(qualfiedName);
    }
  }
  return itemsWithName.toArray(new String[itemsWithName.size()]);
}","protected String[] getAllReportItemReferences(){
  List<ReportItemHandle> referenceList=itemHandle.getNamedDataBindingReferenceList();
  List<String> itemsWithName=new ArrayList<String>();
  for (int i=0; i < referenceList.size(); i++) {
    ReportItemHandle itemhandle=referenceList.get(i);
    if (itemhandle.getCube() != null) {
      if (!ChartItemUtil.isChartHandle(itemhandle) && !ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)itemhandle).getExtensionName())) {
        continue;
      }
    }
    String qualfiedName=itemhandle.getQualifiedName();
    if (qualfiedName != null && qualfiedName.length() > 0) {
      itemsWithName.add(qualfiedName);
    }
  }
  return itemsWithName.toArray(new String[itemsWithName.size()]);
}",0.6806790622473726
67170,"/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isChartCubeReference=isChartReportItemHandle(referredHandle);
  if (referredHandle != null && !isChartCubeReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && !isChartCubeReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}","/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isCrosstabReference=referredHandle != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)referredHandle).getExtensionName());
  if (referredHandle != null && isCrosstabReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && !isCrosstabReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}",0.9412930393856824
67171,"/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartCubeUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=ChartReportItemUtil.getReportItemReference((ReportItemHandle)handle);
      try {
        ChartFilterFactory cff=ChartReportItemUIUtil.createChartFilterFactory(handle);
        if (cff.isChartHandle(ref)) {
          currentProvider=new ChartShareCubeFiltersHandleProvider(new FilterHandleProvider());
        }
 else {
          currentProvider=new ChartShareCrosstabFiltersHandleProvider();
        }
      }
 catch (      ExtendedElementException e) {
        ChartWizard.displayException(e);
        currentProvider=new ChartCubeFilterHandleProvider(new FilterHandleProvider());
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(new FilterHandleProvider());
    }
  }
 else {
    if (ChartItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  if (input != null) {
    currentProvider.setInput(input);
  }
  return currentProvider;
}","/** 
 * Create filter provider by specified input.
 * @param input
 * @param providerInput
 * @return the created filter provider
 * @since 2.3
 */
public static AbstractFilterHandleProvider createFilterProvider(Object input,Object providerInput){
  AbstractFilterHandleProvider currentProvider=null;
  Object handle=null;
  if (input instanceof List<?>) {
    handle=((List<?>)input).get(0);
  }
 else {
    handle=input;
  }
  AbstractFilterHandleProvider baseProvider=getAdapter(new ChartPageGenerator(),AbstractFilterHandleProvider.class);
  if (baseProvider == null) {
    baseProvider=new FilterHandleProvider();
  }
  if (handle instanceof ReportItemHandle && ChartCubeUtil.getBindingCube((DesignElementHandle)handle) != null) {
    if (((ReportItemHandle)handle).getCube() != null && (ChartItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle) || ((ReportItemHandle)handle).getDataBindingReference() != null)) {
      ReportItemHandle ref=ChartReportItemUtil.getReportItemReference((ReportItemHandle)handle);
      if (ref != null && ICrosstabConstants.CROSSTAB_EXTENSION_NAME.equals(((ExtendedItemHandle)ref).getExtensionName())) {
        currentProvider=new ChartShareCrosstabFiltersHandleProvider();
      }
 else {
        currentProvider=new ChartShareCubeFiltersHandleProvider(new FilterHandleProvider());
      }
    }
 else {
      currentProvider=new ChartCubeFilterHandleProvider(new FilterHandleProvider());
    }
  }
 else {
    if (ChartItemUtil.isChildOfMultiViewsHandle((DesignElementHandle)handle)) {
      currentProvider=new ChartShareFiltersHandleProvider(baseProvider);
    }
 else {
      currentProvider=new ChartFilterHandleProvider(baseProvider);
    }
  }
  if (input != null) {
    currentProvider.setInput(input);
  }
  return currentProvider;
}",0.562912160379847
67172,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @throws AdapterException 
 */
private static void populateParameter(IModelAdapter adapter,DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws AdapterException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression(defaultValueExpr,modelParam.getDataType()));
        }
 else {
          ExpressionHandle handle=modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression((Expression)handle.getValue(),modelParam.getDataType()));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),adapter.adaptExpression((Expression)modelParamBinding.getExpressionProperty(ParamBinding.EXPRESSION_MEMBER).getValue()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      IScriptExpression expression=(IScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParameterBinding((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @throws AdapterException 
 */
private static void populateParameter(IModelAdapter adapter,DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws AdapterException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression(defaultValueExpr,modelParam.getDataType()));
        }
 else {
          ExpressionHandle handle=modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression((Expression)handle.getValue(),modelParam.getDataType()));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),adapter.adaptExpression(modelParamBinding.getExpressionListHandle().getListValue().get(0)));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      IScriptExpression expression=(IScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParameterBinding((String)paramName,expression));
    }
  }
}",0.9732666811562704
67173,"/** 
 * Gets all measure handles in the cube.
 * @param cube cube handle
 * @return all measure handles or empty list if no measure. The element inlist is <code>MeasureHandle</code>
 * @since 2.3
 */
@SuppressWarnings(""String_Node_Str"") public static List<MeasureHandle> getAllMeasures(CubeHandle cube){
  if (cube.getContentCount(ICubeModel.MEASURE_GROUPS_PROP) > 0) {
    List<MeasureHandle> measures=new ArrayList<MeasureHandle>();
    Iterator measureGroups=cube.getContents(ICubeModel.MEASURE_GROUPS_PROP).iterator();
    while (measureGroups.hasNext()) {
      MeasureGroupHandle measureGroup=(MeasureGroupHandle)measureGroups.next();
      measures.addAll(measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP));
    }
    return measures;
  }
  return Collections.emptyList();
}","/** 
 * Gets all measure handles in the cube.
 * @param cube cube handle
 * @return all measure handles or empty list if no measure. The element inlist is <code>MeasureHandle</code>
 * @since 2.3
 */
@SuppressWarnings(""String_Node_Str"") public static List<MeasureHandle> getAllMeasures(CubeHandle cube){
  if (cube.getContentCount(ICubeModel.MEASURE_GROUPS_PROP) > 0) {
    List<MeasureHandle> measures=new ArrayList<MeasureHandle>();
    Iterator<?> measureGroups=cube.getContents(ICubeModel.MEASURE_GROUPS_PROP).iterator();
    while (measureGroups.hasNext()) {
      MeasureGroupHandle measureGroup=(MeasureGroupHandle)measureGroups.next();
      measures.addAll(measureGroup.getContents(MeasureGroupHandle.MEASURES_PROP));
    }
    return measures;
  }
  return Collections.emptyList();
}",0.998104864181933
67174,"private static void initCellSize(AggregationCellHandle cell) throws BirtException {
  if (cell.getWidth() != null || cell.getWidth().getMeasure() == 0) {
    cell.getCrosstab().setColumnWidth(cell,DEFAULT_COLUMN_WIDTH);
  }
  if (cell.getHeight() != null || cell.getHeight().getMeasure() == 0) {
    cell.getCrosstab().setRowHeight(cell,DEFAULT_ROW_HEIGHT);
  }
}","private static void initCellSize(AggregationCellHandle cell) throws BirtException {
  if (cell.getWidth() == null || cell.getWidth().getMeasure() == 0) {
    cell.getCrosstab().setColumnWidth(cell,DEFAULT_COLUMN_WIDTH);
  }
  if (cell.getHeight() == null || cell.getHeight().getMeasure() == 0) {
    cell.getCrosstab().setRowHeight(cell,DEFAULT_ROW_HEIGHT);
  }
}",0.9944903581267218
67175,"public static Object getFirstContent(CrosstabCellHandle cell){
  if (cell != null) {
    List contents=cell.getContents();
    if (contents != null && contents.size() >= 1) {
      return contents.get(0);
    }
  }
  return null;
}","public static Object getFirstContent(CrosstabCellHandle cell){
  if (cell != null) {
    List<?> contents=cell.getContents();
    if (contents != null && contents.size() >= 1) {
      return contents.get(0);
    }
  }
  return null;
}",0.9935483870967742
67176,"public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null || expr.getStringExpression() == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setConstant(true);
    return jsExpr;
  }
 else   jsExpr=new ExpressionAdapter(expr,el);
  return jsExpr;
}","public ScriptExpression adaptExpression(Expression expr,ExpressionLocation el){
  if (expr == null || expr.getStringExpression() == null)   return null;
  ScriptExpression jsExpr=null;
  if (ExpressionType.CONSTANT.equals(expr.getType())) {
    jsExpr=new ScriptExpression(JavascriptEvalUtil.transformToJsExpression(expr.getStringExpression()));
    jsExpr.setConstant(true);
    jsExpr.setConstantValue(expr.getExpression());
    return jsExpr;
  }
 else   jsExpr=new ExpressionAdapter(expr,el);
  return jsExpr;
}",0.947906026557712
67177,"/** 
 * @param dataSet
 * @throws BirtException
 */
private void doDefineDataSet(DataSetHandle dataSet) throws BirtException {
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=((JointDataSetHandle)jointDataSet).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          doDefineDataSource(childDataSource);
        }
        doDefineDataSet(childDataSet);
      }
    }
  }
  dteSession.defineDataSet(this.appendRuntimeInfoToDataSet(dataSet,dteSession.getModelAdaptor().adaptDataSet(dataSet)));
}","/** 
 * @param dataSet
 * @throws BirtException
 */
private void doDefineDataSet(DataSetHandle dataSet) throws BirtException {
  if (dataSet instanceof JointDataSetHandle) {
    JointDataSetHandle jointDataSet=(JointDataSetHandle)dataSet;
    Iterator iter=((JointDataSetHandle)jointDataSet).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          doDefineDataSource(childDataSource);
        }
        doDefineDataSet(childDataSet);
      }
    }
  }
 else   if (dataSet instanceof DerivedDataSetHandle) {
    DerivedDataSetHandle handle=(DerivedDataSetHandle)dataSet;
    Iterator iter=handle.getInputDataSets().iterator();
    while (iter.hasNext()) {
      DataSetHandle childDataSet=(DataSetHandle)iter.next();
      if (childDataSet != null) {
        DataSourceHandle childDataSource=childDataSet.getDataSource();
        if (childDataSource != null) {
          doDefineDataSource(childDataSource);
        }
        doDefineDataSet(childDataSet);
      }
    }
  }
  dteSession.defineDataSet(this.appendRuntimeInfoToDataSet(dataSet,dteSession.getModelAdaptor().adaptDataSet(dataSet)));
}",0.7497603068072867
67178,"private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  return expressionValue;
}","private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  ceb.setPredefinedQuery(new String[]{CHOICE_SELECT_VALUE});
  return expressionValue;
}",0.916218293620292
67179,"protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance(currentItem.getModuleHandle()).newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      filter.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          filter.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          filter.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemConstants.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          inputHandle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          inputHandle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      inputHandle.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance(currentItem.getModuleHandle()).newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      filter.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          List valueList=new ArrayList();
          valueList.add(ExpressionButtonUtil.getExpression(expressionValue1));
          filter.setValue1(valueList);
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          ExpressionButtonUtil.saveExpressionButtonControl(expressionValue2,filter,FilterCondition.VALUE2_MEMBER);
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemConstants.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          List valueList=new ArrayList();
          valueList.add(ExpressionButtonUtil.getExpression(expressionValue1));
          inputHandle.setValue1(valueList);
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          ExpressionButtonUtil.saveExpressionButtonControl(expressionValue2,inputHandle,FilterCondition.VALUE2_MEMBER);
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      inputHandle.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  super.okPressed();
}",0.8658687577383409
67180,"/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  ChartItemUtil.loadExpression(exprCodec,inputHandle);
  expButton.setExpression(exprCodec.encode());
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
    expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(false);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(true);
    ;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(true);
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}","/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  ChartItemUtil.loadExpression(exprCodec,inputHandle);
  expButton.setExpression(exprCodec.encode());
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    if (inputHandle != null) {
      if (inputHandle.getValue1ExpressionList().getListValue() != null && inputHandle.getValue1ExpressionList().getListValue().size() > 0) {
        ExpressionButtonUtil.initExpressionButtonControl(expressionValue1,inputHandle.getValue1ExpressionList().getListValue().get(0));
      }
      ExpressionButtonUtil.initExpressionButtonControl(expressionValue2,inputHandle,FilterCondition.VALUE2_MEMBER);
    }
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(false);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(true);
    ;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(true);
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}",0.886244645406949
67181,"private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().dispose();
    expressionValue1.dispose();
    expressionValue1=null;
    dummy1.dispose();
    dummy1=null;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().dispose();
    expressionValue2.dispose();
    expressionValue2=null;
    dummy2.dispose();
    dummy2=null;
    andLable.dispose();
    andLable=null;
  }
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.horizontalAlignment=SWT.BEGINNING;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=5;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=createExpressionValue(group);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_VERTICAL);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        int index=table.getSelectionIndex();
        if (index > -1) {
          valueList.remove(index);
          tableViewer.refresh();
          if (valueList.size() > 0) {
            if (valueList.size() <= index) {
              index=index - 1;
            }
            table.select(index);
          }
          updateButtons();
        }
 else {
          delBtn.setEnabled(false);
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvider(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvider(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvier(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvier(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=table.getSelectionIndex();
      if (index > -1) {
        valueList.remove(index);
        tableViewer.refresh();
        if (valueList.size() > 0) {
          if (valueList.size() <= index) {
            index=index - 1;
          }
          table.select(index);
        }
        updateButtons();
      }
 else {
        delBtn.setEnabled(false);
      }
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  addExpressionValue.add(CHOICE_SELECT_VALUE);
  parent.getParent().layout(true,true);
  return 1;
}","private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().dispose();
    expressionValue1.dispose();
    expressionValue1=null;
    dummy1.dispose();
    dummy1=null;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().dispose();
    expressionValue2.dispose();
    expressionValue2=null;
    dummy2.dispose();
    dummy2=null;
    andLable.dispose();
    andLable=null;
  }
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.horizontalAlignment=SWT.BEGINNING;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=5;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=createExpressionValue(group);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_VERTICAL);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        int index=table.getSelectionIndex();
        if (index > -1) {
          valueList.remove(index);
          tableViewer.refresh();
          if (valueList.size() > 0) {
            if (valueList.size() <= index) {
              index=index - 1;
            }
            table.select(index);
          }
          updateButtons();
        }
 else {
          delBtn.setEnabled(false);
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvider(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvider(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvier(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvier(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=table.getSelectionIndex();
      if (index > -1) {
        valueList.remove(index);
        tableViewer.refresh();
        if (valueList.size() > 0) {
          if (valueList.size() <= index) {
            index=index - 1;
          }
          table.select(index);
        }
        updateButtons();
      }
 else {
        delBtn.setEnabled(false);
      }
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  parent.getParent().layout(true,true);
  return 1;
}",0.9971485773220894
67182,"private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  expressionValue1.add(CHOICE_SELECT_VALUE);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  andLable.setVisible(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.add(CHOICE_SELECT_VALUE);
  expressionValue2.setVisible(false);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}","private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  andLable.setVisible(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.setVisible(false);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}",0.9549098196392786
67183,"private static void getBindings(Set<String> visited,Set<IDimLevel> aggOn,IBinding binding,List<IBinding> bindings) throws DataException, CoreException {
  if (visited.contains(binding.getBindingName())) {
    return;
  }
  List<String> currentVisitBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATA_INDICATOR);
  currentVisitBindings.removeAll(visited);
  for (  String expr : ((List<String>)binding.getAggregatOns())) {
    aggOn.addAll(ExpressionUtil.getReferencedDimLevel(expr));
  }
  aggOn.addAll(ExpressionUtil.getReferencedDimLevel(((IScriptExpression)binding.getExpression()).getText()));
  visited.add(binding.getBindingName());
  for (  String bindingName : currentVisitBindings) {
    getBindings(visited,aggOn,getBinding(bindingName,bindings),bindings);
  }
}","private static void getBindings(Set<String> visited,Set<IDimLevel> aggOn,IBinding binding,List<IBinding> bindings) throws DataException, CoreException {
  if (binding == null || visited.contains(binding.getBindingName())) {
    return;
  }
  List<String> currentVisitBindings=ExpressionCompilerUtil.extractColumnExpression(binding.getExpression(),ExpressionUtil.DATA_INDICATOR);
  currentVisitBindings.removeAll(visited);
  for (  String expr : ((List<String>)binding.getAggregatOns())) {
    aggOn.addAll(ExpressionUtil.getReferencedDimLevel(expr));
  }
  aggOn.addAll(ExpressionUtil.getReferencedDimLevel(((IScriptExpression)binding.getExpression()).getText()));
  visited.add(binding.getBindingName());
  for (  String bindingName : currentVisitBindings) {
    getBindings(visited,aggOn,getBinding(bindingName,bindings),bindings);
  }
}",0.9885473176612416
67184,"private void updateDragDataSource(){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    if (columnListDescription != null) {
      ((GridData)columnListDescription.getLayoutData()).exclude=true;
      columnListDescription.setVisible(false);
      cmpColumnsList.layout();
    }
    if (dataPreviewDescription != null) {
      ((GridData)dataPreviewDescription.getLayoutData()).exclude=true;
      dataPreviewDescription.setVisible(false);
      cmpDataPreview.layout();
    }
  }
  if (isCubeMode()) {
    if (getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
        cmpColumnsList.layout();
      }
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
    return;
  }
  if (columnListDescription != null) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      ((GridData)columnListDescription.getLayoutData()).exclude=false;
      columnListDescription.setVisible(true);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
      cmpColumnsList.layout();
    }
  }
  btnShowDataPreviewB.setEnabled(true);
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    if (columnListDescription != null) {
      ((GridData)columnListDescription.getLayoutData()).exclude=true;
      columnListDescription.setVisible(false);
      cmpColumnsList.layout();
    }
    if (dataPreviewDescription != null) {
      ((GridData)dataPreviewDescription.getLayoutData()).exclude=true;
      dataPreviewDescription.setVisible(false);
      cmpDataPreview.layout();
    }
  }
  if (isCubeMode()) {
    if (getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
        cmpColumnsList.layout();
      }
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else     if (getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_CUBE)) {
      stackLayout.topControl=cmpColumnsList;
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
    return;
  }
  if (columnListDescription != null) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      ((GridData)columnListDescription.getLayoutData()).exclude=false;
      columnListDescription.setVisible(true);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
      cmpColumnsList.layout();
    }
  }
  btnShowDataPreviewB.setEnabled(true);
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.94583615436696
67185,"public void setACLExpression(Expression expr) throws SemanticException {
  if (this.columnHintHandle != null)   columnHintHandle.setExpressionProperty(ColumnHint.ACL_EXPRESSION_MEMBER,expr);
 else   columnHint.setExpressionProperty(ColumnHint.ACL_EXPRESSION_MEMBER,expr);
}","public void setACLExpression(Expression expr) throws SemanticException {
  if (this.columnHintHandle != null)   columnHintHandle.setExpressionProperty(ColumnHint.ACL_EXPRESSION_MEMBER,expr);
 else   columnHint.setProperty(ColumnHint.ACL_EXPRESSION_MEMBER,expr);
}",0.9813432835820896
67186,"/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    DataSessionContext context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
    session=DataRequestSession.newSession(context);
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults actualResultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  Exception ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}","/** 
 * update output parameter table result
 */
private void updateResults(){
  int outputParamsSize=outputParametersSize();
  if (outputParamsSize == 0)   return;
  DataRequestSession session=null;
  try {
    ModuleHandle handle=null;
    DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
    handle=dsHandle.getModuleHandle();
    EngineConfig ec=new EngineConfig();
    ClassLoader parent=Thread.currentThread().getContextClassLoader();
    if (parent == null) {
      parent=this.getClass().getClassLoader();
    }
    ClassLoader customClassLoader=DataSetProvider.getCustomScriptClassLoader(parent,handle);
    ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,customClassLoader);
    ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
    engineTask.setAppContext(appContext);
    engineTask.run();
    session=engineTask.getDataSession();
    QueryDefinition query=new QueryDefinition();
    query.setDataSetName(((DataSetEditor)getContainer()).getHandle().getQualifiedName());
    query.setMaxRows(1);
    PropertyHandle propertyHandle=((DataSetEditor)getContainer()).getHandle().getPropertyHandle(DataSetHandle.PARAMETERS_PROP);
    int paramsSize=propertyHandle.getListValue().size();
    Iterator paramIter=propertyHandle.iterator();
    int outputParamIndex=0;
    TableLayout layout=new TableLayout();
    TableColumn column=null;
    TableItem tableItem=null;
    List paramColumnBindingNames=new ArrayList();
    for (int n=1; n <= paramsSize; n++) {
      DataSetParameterHandle paramDefn=(DataSetParameterHandle)paramIter.next();
      if (!paramDefn.isOutput())       continue;
      column=new TableColumn(outputParameterTable,SWT.LEFT);
      column.setText(paramDefn.getName());
      column.setResizable(true);
      layout.addColumnData(new ColumnPixelData(120,true));
      String bindingName=PREFIX_PARAMETER + (outputParamIndex++);
      IBinding binding=new Binding(bindingName);
      binding.setExpression(new ScriptExpression(PREFIX_OUTPUTPARAMETER + ""String_Node_Str"" + paramDefn.getName()+ ""String_Node_Str""));
      binding.setDataType(DataAdapterUtil.adaptModelDataType(paramDefn.getDataType()));
      paramColumnBindingNames.add(bindingName);
      query.addBinding(binding);
      column.pack();
    }
    outputParameterTable.setLayout(layout);
    outputParameterTable.layout(true);
    DataSetExecutorHelper helper=new DataSetExecutorHelper();
    IQueryResults actualResultSet=helper.execute(((DataSetEditor)getContainer()).getHandle(),query,true,true,session);
    if (actualResultSet != null) {
      IResultIterator iter=actualResultSet.getResultIterator();
      iter.next();
      String[] record=new String[outputParamIndex];
      for (int n=0; n < record.length; n++) {
        record[n]=iter.getString(paramColumnBindingNames.get(n).toString());
      }
      tableItem=new TableItem(outputParameterTable,SWT.NONE);
      tableItem.setText(record);
      actualResultSet.close();
    }
  }
 catch (  Exception ex) {
    ExceptionHandler.handle(ex);
  }
 finally {
    if (session != null) {
      session.shutdown();
    }
  }
}",0.8076923076923077
67187,"/** 
 * Renders chart and returns the drawable object in emitter
 * @param rowAdapter
 * @param externalContext
 * @param bEmpty
 * @return drawable object
 * @throws ChartException
 */
protected Object generateRenderObject(IDataRowExpressionEvaluator rowAdapter,BIRTExternalContext externalContext,boolean bEmpty) throws ChartException {
  prepareDeviceRenderer();
  GeneratedChartState gcs=buildChart(rowAdapter,externalContext);
  renderToImageFile(gcs);
  if (rtc.getSharedScale() != null && !rtc.getSharedScale().isShared()) {
    rtc.getSharedScale().setShared(true);
    ((ChartReportItemImpl)getReportItem(modelHandle)).setSharedScale(rtc.getSharedScale());
  }
  return getImageToDisplay();
}","protected Object generateRenderObject(IDataRowExpressionEvaluator rowAdapter,BIRTExternalContext externalContext,boolean bEmpty,IStyleProcessor externalProcessor) throws ChartException {
  if (externalProcessor == null) {
    externalProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
  }
  prepareDeviceRenderer();
  GeneratedChartState gcs=buildChart(rowAdapter,externalContext,externalProcessor);
  renderToImageFile(gcs);
  if (rtc.getSharedScale() != null && !rtc.getSharedScale().isShared()) {
    rtc.getSharedScale().setShared(true);
    ((ChartReportItemImpl)getReportItem(modelHandle)).setSharedScale(rtc.getSharedScale());
  }
  return getImageToDisplay();
}",0.7367668097281831
67188,"public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    return new Object[]{new byte[]{0}};
  }
  boolean bEmpty=false;
  if (ChartReportItemUtil.isEmpty(resultSet)) {
    if (isAutoHide()) {
      return null;
    }
    bEmpty=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  try {
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    updateChartModel();
    if (!bindData(rowAdapter,evaluator) && isAutoHide()) {
      return null;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty);
    rowAdapter.close();
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}","public Object onRowSets(IBaseResultSet[] baseResultSet) throws BirtException {
  if (cm == null) {
    return null;
  }
  IBaseResultSet resultSet=getDataToRender(baseResultSet);
  if (resultSet == null || !ChartItemUtil.checkChartBindingComplete(cm)) {
    return new Object[]{new byte[]{0}};
  }
  boolean bEmpty=false;
  if (ChartReportItemUtil.isEmpty(resultSet)) {
    if (isAutoHide()) {
      return null;
    }
    bEmpty=true;
  }
  Bounds bo=cm.getBlock().getBounds();
  if (bo.getWidth() == 0 && bo.getHeight() == 0 && (bo.isSetHeight() || bo.isSetWidth())) {
    return null;
  }
  try {
    if (rtc.getSharedScale() == null && ChartReportItemUtil.canScaleShared(modelHandle,cm)) {
      rtc.setSharedScale(createSharedScale(resultSet));
    }
    boolean isSharingQuery=false;
    if (modelHandle.getDataBindingReference() != null || modelHandle.getContainer() instanceof MultiViewsHandle || ChartItemUtil.isChartInheritGroups(modelHandle)) {
      isSharingQuery=true;
      isSharingQuery&=!ChartItemUtil.isChartHandle(ChartItemUtil.getReportItemReference(modelHandle));
    }
    rtc.setSharingQuery(isSharingQuery);
    BIRTExternalContext externalContext=new BIRTExternalContext(context);
    if (rtc.getScriptContext() != null && rtc.getScriptContext() instanceof ChartScriptContext) {
      ((ChartScriptContext)rtc.getScriptContext()).setExternalContext(externalContext);
    }
    initializeScriptHandler(externalContext);
    IDataRowExpressionEvaluator rowAdapter=createEvaluator(resultSet);
    IActionEvaluator evaluator=new BIRTActionEvaluator();
    updateChartModel();
    ChartReportStyleProcessor styleProcessor=new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi);
    styleProcessor.applyDefaultHyperlink(this.cm);
    if (!bindData(rowAdapter,evaluator) && isAutoHide()) {
      return null;
    }
    Object renderObject=generateRenderObject(rowAdapter,externalContext,bEmpty,styleProcessor);
    rowAdapter.close();
    return renderObject;
  }
 catch (  RuntimeException ex) {
    logger.log(ILogger.ERROR,Messages.getString(""String_Node_Str""));
    logger.log(ex);
    throw new ChartException(ChartReportItemPlugin.ID,ChartException.GENERATION,ex);
  }
}",0.9575070821529744
67189,"protected GeneratedChartState buildChart(IDataRowExpressionEvaluator rowAdapter,BIRTExternalContext externalContext) throws ChartException {
  final Bounds bo=computeBounds();
  initializeRuntimeContext(rowAdapter,bo);
  GeneratedChartState gcs=Generator.instance().build(idr.getDisplayServer(),cm,bo,externalContext,rtc,new ChartReportStyleProcessor(modelHandle,true,this.style,this.dpi));
  boundsRuntime=gcs.getChartModel().getBlock().getBounds();
  return gcs;
}","protected GeneratedChartState buildChart(IDataRowExpressionEvaluator rowAdapter,BIRTExternalContext externalContext,IStyleProcessor externalProcessor) throws ChartException {
  final Bounds bo=computeBounds();
  initializeRuntimeContext(rowAdapter,bo);
  GeneratedChartState gcs=Generator.instance().build(idr.getDisplayServer(),cm,bo,externalContext,rtc,externalProcessor);
  boundsRuntime=gcs.getChartModel().getBlock().getBounds();
  return gcs;
}",0.722707423580786
67190,"/** 
 * Gets if the values of the condition is(are) available.
 */
protected boolean checkValues(){
  if (valueVisible == 3) {
    if (valueList.size() <= 0) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    assert(!expressionValue1.isDisposed());
    assert(!expressionValue2.isDisposed());
    if (expressionValue1.getVisible()) {
      if (expressionValue1.getText() == null || expressionValue1.getText().trim().length() == 0) {
        return false;
      }
    }
    if (expressionValue2.getVisible()) {
      if (expressionValue2.getText() == null || expressionValue2.getText().trim().length() == 0) {
        return false;
      }
    }
  }
  return true;
}","/** 
 * Gets if the values of the condition is(are) available.
 */
protected boolean checkValues(){
  if (valueVisible == 3) {
    if (valueList.size() <= 0) {
      return false;
    }
 else {
      return true;
    }
  }
 else {
    assert(!expressionValue1.isDisposed());
    assert(!expressionValue2.isDisposed());
    if (expressionValue1 != null && expressionValue1.getVisible()) {
      if (expressionValue1.getText() == null || expressionValue1.getText().trim().length() == 0) {
        return false;
      }
    }
    if (expressionValue2 != null && expressionValue2.getVisible()) {
      if (expressionValue2.getText() == null || expressionValue2.getText().trim().length() == 0) {
        return false;
      }
    }
  }
  return true;
}",0.96105702364395
67191,"/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  ChartItemUtil.loadExpression(exprCodec,inputHandle);
  expButton.setExpression(exprCodec.encode());
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
    expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(true);
    ;
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}","/** 
 * SYNC the control value according to the handle.
 */
protected void syncViewProperties(){
  ChartItemUtil.loadExpression(exprCodec,inputHandle);
  expButton.setExpression(exprCodec.encode());
  operator.select(getIndexForOperatorValue(inputHandle.getOperator()));
  valueVisible=determineValueVisible(inputHandle.getOperator());
  if (valueVisible == 3) {
    createValueListComposite(operator.getParent());
    valueList=new ArrayList(inputHandle.getValue1List());
    tableViewer.setInput(valueList);
  }
 else {
    create2ValueComposite(operator.getParent());
    expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
    expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(false);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(true);
    ;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(true);
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
 else   if (valueVisible == 3) {
    if (expression.getText().length() == 0) {
      valueListComposite.setEnabled(false);
    }
 else {
      valueListComposite.setEnabled(true);
    }
  }
}",0.8305945622945922
67192,"protected void checkEditDelButtonStatus(){
  if (tableViewer == null) {
    return;
  }
  boolean enabled=(tableViewer.getSelection() == null) ? false : true;
  if (enabled == true && tableViewer.getSelection() instanceof StructuredSelection) {
    StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
    if (selection.toList().size() <= 0) {
      enabled=false;
    }
  }
  editBtn.setEnabled(enabled);
  delBtn.setEnabled(enabled);
  enabled=table.getItemCount() > 0 ? true : false;
  delAllBtn.setEnabled(enabled);
}","protected void checkEditDelButtonStatus(){
  if (tableViewer == null || table.isDisposed()) {
    return;
  }
  boolean enabled=(tableViewer.getSelection() == null) ? false : true;
  if (enabled == true && tableViewer.getSelection() instanceof StructuredSelection) {
    StructuredSelection selection=(StructuredSelection)tableViewer.getSelection();
    if (selection.toList().size() <= 0) {
      enabled=false;
    }
  }
  editBtn.setEnabled(enabled);
  delBtn.setEnabled(enabled);
  enabled=table.getItemCount() > 0 ? true : false;
  delAllBtn.setEnabled(enabled);
}",0.9802867383512543
67193,"protected void checkAddButtonStatus(){
  if (addExpressionValue != null) {
    String value=addExpressionValue.getText();
    if (value == null || value.length() == 0 || value.trim().length() == 0) {
      addBtn.setEnabled(false);
      return;
    }
    if (value != null) {
      value=value.trim();
    }
    if (valueList.indexOf(value) < 0) {
      addBtn.setEnabled(true);
    }
 else {
      addBtn.setEnabled(false);
    }
  }
}","protected void checkAddButtonStatus(){
  if (addExpressionValue != null && !addExpressionValue.isDisposed()) {
    String value=addExpressionValue.getText();
    if (value == null || value.length() == 0 || value.trim().length() == 0) {
      addBtn.setEnabled(false);
      return;
    }
    if (value != null) {
      value=value.trim();
    }
    if (valueList.indexOf(value) < 0) {
      addBtn.setEnabled(true);
    }
 else {
      addBtn.setEnabled(false);
    }
  }
}",0.9142857142857144
67194,"private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  expressionValue1.add(CHOICE_SELECT_VALUE);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.add(CHOICE_SELECT_VALUE);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}","private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  expressionValue1.add(CHOICE_SELECT_VALUE);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  andLable.setVisible(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.add(CHOICE_SELECT_VALUE);
  expressionValue2.setVisible(false);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}",0.9663032705649156
67195,"private void getDsMinMax(){
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  DataSet dst;
  EList<SeriesDefinition> el=((ChartWithoutAxes)getModel()).getSeriesDefinitions();
  ArrayList<Series> al=new ArrayList<Series>();
  ((ChartWithoutAxesImpl)getModel()).recursivelyGetSeries(el,al,0,0);
  final Series[] sea=al.toArray(new Series[al.size()]);
  for (int i=0; i < sea.length; i++) {
    try {
      iDSP=ps.getDataSetProcessor(sea[i].getClass());
      dst=sea[i].getDataSet();
      Double min=(Double)iDSP.getMinimum(dst);
      Double max=(Double)iDSP.getMaximum(dst);
      if (min != null && min < axisMin) {
        this.axisMin=min;
      }
      if (max != null && max > axisMax) {
        this.axisMax=max;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private void getDsMinMax(){
  PluginSettings ps=PluginSettings.instance();
  IDataSetProcessor iDSP=null;
  DataSet dst;
  EList<SeriesDefinition> el=((ChartWithoutAxes)getModel()).getSeriesDefinitions();
  ArrayList<Series> al=new ArrayList<Series>();
  ((ChartWithoutAxesImpl)getModel()).recursivelyGetSeries(el,al,0,0);
  final Series[] sea=al.toArray(new Series[al.size()]);
  for (int i=0; i < sea.length; i++) {
    try {
      iDSP=ps.getDataSetProcessor(sea[i].getClass());
      dst=sea[i].getDataSet();
      Double min=(Double)((Number)iDSP.getMinimum(dst)).doubleValue();
      Double max=(Double)((Number)iDSP.getMaximum(dst)).doubleValue();
      if (min != null && min < axisMin) {
        this.axisMin=min;
      }
      if (max != null && max > axisMax) {
        this.axisMax=max;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0.9543325526932084
67196,"/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
private final void render(IDeviceRenderer idr,Bounds bo,RadarSeries se,SeriesDefinition sd) throws ChartException {
  List<Series> rts=sd.getRunTimeSeries();
  int iThisSeriesIndex=rts.indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  int totalSeriesCnt=getSeriesCount();
  int currSeriesIdx=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  dc=getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  double dh=boCA.getHeight() - (boCA.getHeight() * percentReduce);
  double dl=boCA.getLeft() + (boCA.getWidth() * percentReduce) / 2;
  double dt=boCA.getTop() + (boCA.getHeight() * percentReduce) / 2;
  double dw=boCA.getWidth() - (boCA.getWidth() * percentReduce);
  double centrePointX=Math.round(dl + dw / 2);
  double centrePointY=Math.round(dt + dh / 2);
  double mag=dh / 2;
  Location cntpt=LocationImpl.create(centrePointX,centrePointY);
  if (currSeriesIdx == 1) {
    if (BULLSEYE_SUBTYPE_LITERAL.equals(getModel().getSubType())) {
      renderOvalBackgrounds(idr,cntpt,se,mag);
    }
  }
  PolarCoordinate pc=new PolarCoordinate(cntpt,dpha.length,getSeriesCount() - 1,getSeriesIndex() - 1);
  final boolean bPaletteByCategory=isPaletteByCategory();
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,se);
  }
  Location loAxis=LocationImpl.create(centrePointX,centrePointY);
  List<Location> loList=new LinkedList<Location>();
  for (int index=0; index < dpha.length; index++) {
    DataPointHints dph=dpha[index];
    if (isNaN(dph.getOrthogonalValue())) {
      continue;
    }
    double currval=((Double)dph.getOrthogonalValue()).doubleValue();
    if (currval < 0) {
      continue;
    }
    pc.computeLocation(loAxis,index,mag);
    Location lo=pc.createLocation(index,mag * (currval / getAxisMax()));
    loList.add(lo);
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,index);
      updateTranslucency(fPaletteEntry,se);
    }
    LineAttributes llia=se.getLineAttributes();
    if (se.isPaletteLineColor() && index == 0) {
      llia.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    Marker m=se.getMarker();
    if (m != null) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dph);
      renderMarker(se,idr,m,lo,llia,fPaletteEntry,dph,m.getSize(),true,false);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dph);
    }
    drawSeriesLabel(idr,pc,dph,loAxis);
  }
  renderPolys(idr,loList.toArray(new Location[loList.size()]),se,sd);
  if (currSeriesIdx == (totalSeriesCnt - 1)) {
    if (se.getWebLineAttributes() != null && se.getWebLineAttributes().isVisible()) {
      renderAxes(idr,pc,mag);
    }
    RadarSeries rsd=getFirstSeries();
    if (rsd.isShowWebLabels()) {
      Location loLabel=LocationImpl.create(0,0);
      for (int sc=0; sc <= scaleCount; sc++) {
        final TextRenderEvent stre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),TextRenderEvent.class);
        Label la=goFactory.copyOf(rsd.getLabel());
        la.setVisible(true);
        stre.setTextPosition(TextRenderEvent.RIGHT);
        double lblperc=((double)sc / scaleCount) * 100;
        DecimalFormat decform=new DecimalFormat(""String_Node_Str"");
        lblperc=Double.valueOf(decform.format(lblperc));
        la.getCaption().setValue(lblperc + ""String_Node_Str"");
        stre.setLabel(la);
        stre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
        double ycord=mag * sc / scaleCount;
        ycord=Math.round(centrePointY - ycord);
        double xcord=Math.round(centrePointX - 10);
        loLabel.set(xcord,ycord);
        stre.setLocation(loLabel);
        dc.addLabel(stre);
      }
    }
  }
}","/** 
 * @param idr
 * @param bo
 * @throws ChartException
 */
private final void render(IDeviceRenderer idr,Bounds bo,RadarSeries se,SeriesDefinition sd) throws ChartException {
  List<Series> rts=sd.getRunTimeSeries();
  int iThisSeriesIndex=rts.indexOf(se);
  if (iThisSeriesIndex == -1)   iThisSeriesIndex=getSeriesIndex();
  int totalSeriesCnt=getSeriesCount();
  int currSeriesIdx=getSeriesIndex();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  dc=getDeferredCache();
  Bounds boCA=goFactory.copyOf(bo);
  double dh=boCA.getHeight() - (boCA.getHeight() * percentReduce);
  double dl=boCA.getLeft() + (boCA.getWidth() * percentReduce) / 2;
  double dt=boCA.getTop() + (boCA.getHeight() * percentReduce) / 2;
  double dw=boCA.getWidth() - (boCA.getWidth() * percentReduce);
  double centrePointX=Math.round(dl + dw / 2);
  double centrePointY=Math.round(dt + dh / 2);
  double mag=dh / 2;
  Location cntpt=LocationImpl.create(centrePointX,centrePointY);
  if (currSeriesIdx == 1) {
    if (BULLSEYE_SUBTYPE_LITERAL.equals(getModel().getSubType())) {
      renderOvalBackgrounds(idr,cntpt,se,mag);
    }
  }
  PolarCoordinate pc=new PolarCoordinate(cntpt,dpha.length,getSeriesCount() - 1,getSeriesIndex() - 1);
  final boolean bPaletteByCategory=isPaletteByCategory();
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,se);
  }
  Location loAxis=LocationImpl.create(centrePointX,centrePointY);
  List<Location> loList=new LinkedList<Location>();
  for (int index=0; index < dpha.length; index++) {
    DataPointHints dph=dpha[index];
    if (isNaN(dph.getOrthogonalValue())) {
      continue;
    }
    double currval=((Number)dph.getOrthogonalValue()).doubleValue();
    if (currval < 0) {
      continue;
    }
    pc.computeLocation(loAxis,index,mag);
    Location lo=pc.createLocation(index,mag * (currval / getAxisMax()));
    loList.add(lo);
    if (bPaletteByCategory) {
      fPaletteEntry=FillUtil.getPaletteFill(elPalette,index);
      updateTranslucency(fPaletteEntry,se);
    }
    LineAttributes llia=se.getLineAttributes();
    if (se.isPaletteLineColor() && index == 0) {
      llia.setColor(goFactory.copyOf(FillUtil.getColor(fPaletteEntry)));
    }
    Marker m=se.getMarker();
    if (m != null) {
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dph);
      renderMarker(se,idr,m,lo,llia,fPaletteEntry,dph,m.getSize(),true,false);
      ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dph,fPaletteEntry,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dph);
    }
    drawSeriesLabel(idr,pc,dph,loAxis);
  }
  renderPolys(idr,loList.toArray(new Location[loList.size()]),se,sd);
  if (currSeriesIdx == (totalSeriesCnt - 1)) {
    if (se.getWebLineAttributes() != null && se.getWebLineAttributes().isVisible()) {
      renderAxes(idr,pc,mag);
    }
    RadarSeries rsd=getFirstSeries();
    if (rsd.isShowWebLabels()) {
      Location loLabel=LocationImpl.create(0,0);
      for (int sc=0; sc <= scaleCount; sc++) {
        final TextRenderEvent stre=((EventObjectCache)idr).getEventObject(StructureSource.createSeries(se),TextRenderEvent.class);
        Label la=goFactory.copyOf(rsd.getLabel());
        la.setVisible(true);
        stre.setTextPosition(TextRenderEvent.RIGHT);
        double lblperc=((double)sc / scaleCount) * 100;
        DecimalFormat decform=new DecimalFormat(""String_Node_Str"");
        lblperc=Double.valueOf(decform.format(lblperc));
        la.getCaption().setValue(lblperc + ""String_Node_Str"");
        stre.setLabel(la);
        stre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
        double ycord=mag * sc / scaleCount;
        ycord=Math.round(centrePointY - ycord);
        double xcord=Math.round(centrePointX - 10);
        loLabel.set(xcord,ycord);
        stre.setLocation(loLabel);
        dc.addLabel(stre);
      }
    }
  }
}",0.9986040018613308
67197,"public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    context.endInline();
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    wordWriter.startTable(foreign.getComputedStyle(),context.getCurrentWidth());
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(context.getCurrentWidth(),foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}","public void startForeign(IForeignContent foreign) throws BirtException {
  if (IForeignContent.HTML_TYPE.equalsIgnoreCase(foreign.getRawType())) {
    inForeign=true;
    boolean inlineBrother=!context.isFirstInline();
    context.endInline();
    HTML2Content.html2Content(foreign);
    context.startCell();
    if (context.isLastTable()) {
      wordWriter.insertHiddenParagraph();
    }
    int width=WordUtil.convertTo(foreign.getWidth(),context.getCurrentWidth(),reportDpi);
    width=Math.min(width,context.getCurrentWidth());
    wordWriter.startTable(foreign.getComputedStyle(),width);
    wordWriter.startTableRow(-1);
    wordWriter.startTableCell(width,foreign.getComputedStyle(),null);
    writeToc(foreign);
    contentVisitor.visitChildren(foreign,null);
    adjustInline();
    wordWriter.endTableCell(context.needEmptyP());
    context.endCell();
    wordWriter.endTableRow();
    wordWriter.endTable();
    context.setLastIsTable(true);
    context.addContainer(true);
    hasPInside=false;
    if (inlineBrother) {
      context.startInline();
    }
    inForeign=false;
  }
 else {
    Object rawValue=foreign.getRawValue();
    String text=rawValue == null ? ""String_Node_Str"" : rawValue.toString();
    writeContent(DocEmitterImpl.NORMAL,text,foreign);
  }
}",0.9173116089613036
67198,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName,String levelColumnName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        ExpressionHandle displayExprHandle=level.getExpressionProperty(ITabularLevelModel.DISPLAY_COLUMN_NAME_PROP);
        if (displayExprHandle != null) {
          query.addBinding(new Binding(meta.getName(),modelAdaptor.adaptJSExpression(displayExprHandle.getStringExpression(),displayExprHandle.getType())));
        }
      }
      if (level.getMemberACLExpression() != null && level.getMemberACLExpression().getExpression() != null) {
        String aclExprName=DataSetIterator.createLevelACLName(level.getName());
        IScriptExpression expr=modelAdaptor.adaptExpression((Expression)level.getMemberACLExpression().getValue());
        query.addBinding(new Binding(aclExprName,expr));
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(aclExprName,null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        metaList.add(meta);
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      if (ExpressionUtil.getColumnName(exprString) != null) {
        gd.setKeyExpression(exprString);
      }
 else {
        gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      }
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName,String levelColumnName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        ExpressionHandle displayExprHandle=level.getExpressionProperty(ITabularLevelModel.DISPLAY_COLUMN_NAME_PROP);
        if (displayExprHandle != null) {
          query.addBinding(new Binding(meta.getName(),modelAdaptor.adaptJSExpression(displayExprHandle.getStringExpression(),displayExprHandle.getType())));
        }
      }
      if (level.getMemberACLExpression() != null && level.getMemberACLExpression().getExpression() != null) {
        String aclExprName=DataSetIterator.createLevelACLName(level.getName());
        IScriptExpression expr=modelAdaptor.adaptExpression((Expression)level.getMemberACLExpression().getValue());
        query.addBinding(new Binding(aclExprName,expr));
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(aclExprName,null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        metaList.add(meta);
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
{
        gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      }
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9916909310418294
67199,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference());
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          Map appContext=new HashMap();
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          populateRecords(previewer.preview());
          previewer.close();
          monitor.done();
        }
 catch (        BirtException e) {
          throw new InvocationTargetException(e);
        }
 finally {
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ModuleHandle handle=null;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        DataSetPreviewer previewer=new DataSetPreviewer(dsHandle,getMaxRowPreference());
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
          Map appContext=new HashMap();
          ResourceIdentifiers identifiers=new ResourceIdentifiers();
          String resouceIDs=ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS;
          identifiers.setApplResourceBaseURI(DTPUtil.getInstance().getBIRTResourcePath());
          identifiers.setDesignResourceBaseURI(DTPUtil.getInstance().getReportDesignPath());
          appContext.put(resouceIDs,identifiers);
          AppContextPopulator.populateApplicationContext(dsHandle,appContext);
          previewer.open(appContext,getEngineConfig(handle));
          populateRecords(previewer.preview());
          previewer.close();
          monitor.done();
        }
 catch (        BirtException e) {
          throw new InvocationTargetException(e);
        }
 finally {
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getCause().getLocalizedMessage(),e.getCause());
  }
catch (  InterruptedException e) {
    org.eclipse.datatools.connectivity.internal.ui.dialogs.ExceptionHandler.showException(resultSetTable.getShell(),Messages.getString(""String_Node_Str""),e.getLocalizedMessage(),e);
  }
  updateResultSetTableUI();
}",0.9138986013986014
67200,"public int getColId(){
  return colId;
}","public int getColId(){
  if (status == CELL_SPANED) {
    Cell cell=getCell();
    if (cell != null) {
      return cell.getColId();
    }
  }
  return colId;
}",0.4
67201,"public int getRowId(){
  return rowId;
}","public int getRowId(){
  if (status == CELL_SPANED) {
    Cell cell=getCell();
    if (cell != null) {
      return cell.getRowId();
    }
  }
  return rowId;
}",0.4
67202,"public ListBandRenderFigure(){
  setLayoutManager(new ReportFlowLayout(){
    protected Dimension getChildSize(    IFigure child,    int wHint,    int hHint){
      if (child instanceof TableFigure) {
        IFigure grandFigure=getParent().getParent();
        if (grandFigure instanceof ListFigure && ((ListFigure)grandFigure).isDirty()) {
          int oldWidth=getBounds().width;
          int oldHeight=getBounds().height;
          int width=wHint + getInsets().getWidth();
          int height=hHint + getInsets().getHeight();
          if (width != oldWidth || height != oldHeight) {
            if (child instanceof TableFigure) {
              IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
              LayoutManager layoutManager=tablePane.getLayoutManager();
              if (layoutManager instanceof TableLayout) {
                ((ListFigure)grandFigure).markDirty(false);
                ((TableLayout)layoutManager).markDirty();
                getBounds().width=width;
                getBounds().height=height;
                tablePane.validate();
                getBounds().width=oldWidth;
                getBounds().height=oldHeight;
              }
            }
          }
        }
      }
      return super.getChildSize(child,wHint,hHint);
    }
  }
);
  setBorder(new MarginBorder(margin));
}","public ListBandRenderFigure(){
  setLayoutManager(new ReportFlowLayout(){
    protected Dimension getChildSize(    IFigure child,    int wHint,    int hHint){
      if (child instanceof TableFigure) {
        IFigure grandFigure=getParent().getParent();
        if (grandFigure instanceof ListFigure && ((ListFigure)grandFigure).isDirty()) {
          int oldWidth=getBounds().width;
          int oldHeight=getBounds().height;
          int width=wHint + getInsets().getWidth();
          int height=hHint + getInsets().getHeight();
          if (width != oldWidth || height != oldHeight) {
            if (child instanceof TableFigure) {
              IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
              LayoutManager layoutManager=tablePane.getLayoutManager();
              if (layoutManager instanceof TableLayout && !(getParent().getParent().getParent() instanceof ListBandRenderFigure)) {
                ((ListFigure)grandFigure).markDirty(false);
                ((TableLayout)layoutManager).markDirty();
                getBounds().width=width;
                getBounds().height=height;
                tablePane.validate();
                getBounds().width=oldWidth;
                getBounds().height=oldHeight;
              }
            }
          }
        }
      }
      return super.getChildSize(child,wHint,hHint);
    }
  }
);
  setBorder(new MarginBorder(margin));
}",0.975016880486158
67203,"protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  if (child instanceof TableFigure) {
    IFigure grandFigure=getParent().getParent();
    if (grandFigure instanceof ListFigure && ((ListFigure)grandFigure).isDirty()) {
      int oldWidth=getBounds().width;
      int oldHeight=getBounds().height;
      int width=wHint + getInsets().getWidth();
      int height=hHint + getInsets().getHeight();
      if (width != oldWidth || height != oldHeight) {
        if (child instanceof TableFigure) {
          IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
          LayoutManager layoutManager=tablePane.getLayoutManager();
          if (layoutManager instanceof TableLayout) {
            ((ListFigure)grandFigure).markDirty(false);
            ((TableLayout)layoutManager).markDirty();
            getBounds().width=width;
            getBounds().height=height;
            tablePane.validate();
            getBounds().width=oldWidth;
            getBounds().height=oldHeight;
          }
        }
      }
    }
  }
  return super.getChildSize(child,wHint,hHint);
}","protected Dimension getChildSize(IFigure child,int wHint,int hHint){
  if (child instanceof TableFigure) {
    IFigure grandFigure=getParent().getParent();
    if (grandFigure instanceof ListFigure && ((ListFigure)grandFigure).isDirty()) {
      int oldWidth=getBounds().width;
      int oldHeight=getBounds().height;
      int width=wHint + getInsets().getWidth();
      int height=hHint + getInsets().getHeight();
      if (width != oldWidth || height != oldHeight) {
        if (child instanceof TableFigure) {
          IFigure tablePane=((LayeredPane)((LayeredPane)((TableFigure)child).getContents()).getLayer(LayerConstants.PRINTABLE_LAYERS)).getLayer(LayerConstants.PRIMARY_LAYER);
          LayoutManager layoutManager=tablePane.getLayoutManager();
          if (layoutManager instanceof TableLayout && !(getParent().getParent().getParent() instanceof ListBandRenderFigure)) {
            ((ListFigure)grandFigure).markDirty(false);
            ((TableLayout)layoutManager).markDirty();
            getBounds().width=width;
            getBounds().height=height;
            tablePane.validate();
            getBounds().width=oldWidth;
            getBounds().height=oldHeight;
          }
        }
      }
    }
  }
  return super.getChildSize(child,wHint,hHint);
}",0.970137207425343
67204,"/** 
 * Set related data set on specified session.
 * @param handle the handle which contains related data set.
 * @param session data request session handle
 * @param keepDataSetFilter 
 * @param disAllowAggregation
 * @throws AdapterException
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") public void defineDataSet(DataSetHandle handle,DataRequestSession session,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=session.getModelAdaptor().adaptDataSource(dataSourceHandle);
    session.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        defineDataSet(dsHandle,session,true,false);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),session,keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=session.getModelAdaptor().adaptDataSet(handle);
  if (baseDS == null) {
    return;
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  new ModelDteApiAdapter().defineDataSet(handle,session);
}","/** 
 * Set related data set on specified session.
 * @param handle the handle which contains related data set.
 * @param session data request session handle
 * @param keepDataSetFilter 
 * @param disAllowAggregation
 * @throws AdapterException
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") public void defineDataSet(DataSetHandle handle,DataRequestSession session,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=session.getModelAdaptor().adaptDataSource(dataSourceHandle);
    session.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        defineDataSet(dsHandle,session,true,false);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),session,keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=session.getModelAdaptor().adaptDataSet(handle);
  if (baseDS == null) {
    return;
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  if (executionContext == null) {
    new ModelDteApiAdapter().defineDataSet(handle,session);
  }
 else {
    new ModelDteApiAdapter(executionContext).defineDataSet(handle,session);
  }
}",0.9709223080417992
67205,"/** 
 * Initializes some instance handles for query execution.
 * @throws ChartException
 */
public void initialize() throws ChartException {
  try {
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new ChartDummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()),itemHandle.getModuleHandle());
      session=engineTask.getDataSession();
      engineTask.run();
    }
 else {
      DataSessionContext dsc=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,getReportDesignHandle());
      session=DataRequestSession.newSession(dsc);
    }
  }
 catch (  BirtException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
}","/** 
 * Initializes some instance handles for query execution.
 * @throws ChartException
 */
public void initialize() throws ChartException {
  try {
    if (isReportDesignHandle()) {
      engine=(ReportEngine)new ReportEngineFactory().createReportEngine(new EngineConfig());
      engineTask=new ChartDummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign((ReportDesignHandle)itemHandle.getModuleHandle()),itemHandle.getModuleHandle());
      session=engineTask.getDataSession();
      engineTask.run();
      dteAdapter.setExecutionContext(engineTask.getExecutionContext());
    }
 else {
      DataSessionContext dsc=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,getReportDesignHandle());
      session=DataRequestSession.newSession(dsc);
    }
  }
 catch (  BirtException e) {
    if (engine == null && session != null) {
      session.shutdown();
    }
    if (engineTask != null) {
      engineTask.close();
    }
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
}",0.9646365422396856
67206,"/** 
 * Updates cube bindings due to the change of cube set.
 * @return
 */
protected boolean updateCubeBindings(){
  boolean updated=false;
  try {
    CubeHandle cubeHandle=itemHandle.getCube();
    if (cubeHandle != null) {
      List<ComputedColumn> columnList=generateComputedColumns(cubeHandle);
      if (columnList.size() > 0) {
        List<String> bindingNameList=new ArrayList<String>();
        for (Iterator<ComputedColumnHandle> iter=itemHandle.columnBindingsIterator(); iter.hasNext(); ) {
          ComputedColumnHandle cch=iter.next();
          bindingNameList.add(cch.getName());
        }
        for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
          ComputedColumn cc=iter.next();
          if (!bindingNameList.contains(cc.getName())) {
            DEUtil.addColumn(itemHandle,cc,false);
            updated=true;
          }
        }
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Cube_ID,e.getLocalizedMessage());
  }
  return updated;
}","/** 
 * Updates cube bindings due to the change of cube set.
 * @return
 */
protected boolean updateCubeBindings(){
  boolean updated=false;
  try {
    CubeHandle cubeHandle=itemHandle.getCube();
    if (cubeHandle != null) {
      List<ComputedColumn> columnList=ChartXTabUIUtil.generateComputedColumns(itemHandle,cubeHandle);
      if (columnList.size() > 0) {
        List<String> bindingNameList=new ArrayList<String>();
        for (Iterator<ComputedColumnHandle> iter=itemHandle.columnBindingsIterator(); iter.hasNext(); ) {
          ComputedColumnHandle cch=iter.next();
          bindingNameList.add(cch.getName());
        }
        for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
          ComputedColumn cc=iter.next();
          if (!bindingNameList.contains(cc.getName())) {
            DEUtil.addColumn(itemHandle,cc,false);
            updated=true;
          }
        }
      }
    }
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Cube_ID,e.getLocalizedMessage());
  }
  return updated;
}",0.964936886395512
67207,"private List<ComputedColumn> generateComputedColumns(CubeHandle cubeHandle){
  if (cubeHandle != null) {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    String exprType=UIUtil.getDefaultScriptType();
    IExpressionConverter exprConverter=ExpressionUtility.getExpressionConverter(exprType);
    for (    LevelHandle levelHandle : ChartCubeUtil.getAllLevels(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelBindingName(levelHandle));
      column.setDataType(levelHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),null),exprType));
      columnList.add(column);
      Iterator itLevelAttr=levelHandle.attributesIterator();
      while (itLevelAttr.hasNext()) {
        LevelAttributeHandle laHandle=(LevelAttributeHandle)itLevelAttr.next();
        ComputedColumn columnLA=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createLevelAttrBindingName(levelHandle,laHandle));
        columnLA.setDataType(laHandle.getDataType());
        columnLA.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getDimensionExpression(levelHandle.getContainer().getContainer().getName(),levelHandle.getName(),laHandle.getName()),exprType));
        columnList.add(columnLA);
      }
    }
    for (    MeasureHandle measureHandle : ChartCubeUtil.getAllMeasures(cubeHandle)) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,ChartCubeUtil.createMeasureBindingName(measureHandle));
      column.setDataType(measureHandle.getDataType());
      column.setExpressionProperty(ComputedColumn.EXPRESSION_MEMBER,new Expression(exprConverter.getMeasureExpression(measureHandle.getName()),exprType));
      column.setAggregateFunction(measureHandle.getFunction());
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}","/** 
 * Generate computed columns for the given report item with the closest data set available.
 * @param dataSetHandle Data Set. No aggregation created.
 * @return true if succeed,or fail if no column generated.
 * @see DataUtil#generateComputedColumns(ReportItemHandle)
 */
private List<ComputedColumn> generateComputedColumns(DataSetHandle dataSetHandle) throws SemanticException {
  if (dataSetHandle != null) {
    List<ResultSetColumnHandle> resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    for (    ResultSetColumnHandle resultSetColumn : resultSetColumnList) {
      ComputedColumn column=StructureFactory.newComputedColumn(itemHandle,resultSetColumn.getColumnName());
      column.setDataType(resultSetColumn.getDataType());
      ExpressionUtility.setBindingColumnExpression(resultSetColumn,column);
      columnList.add(column);
    }
    return columnList;
  }
  return Collections.emptyList();
}",0.1283982967572879
67208,"void setDataCube(String cubeName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setDataSet(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
      clearBindings();
    }
 else {
      if (!cubeName.equals(getDataCube()) || isPreviousDataBindingReference) {
        CubeHandle cubeHandle=getReportDesignHandle().findCube(cubeName);
        itemHandle.setCube(cubeHandle);
        clearBindings();
        generateBindings(generateComputedColumns(cubeHandle));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Cube_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Cube_ID,e.getLocalizedMessage());
  }
}","void setDataCube(String cubeName){
  try {
    boolean isPreviousDataBindingReference=false;
    if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF) {
      isPreviousDataBindingReference=true;
      itemHandle.setDataBindingReference(null);
    }
    itemHandle.setDataSet(null);
    if (cubeName == null) {
      itemHandle.setCube(null);
      clearBindings();
    }
 else {
      if (!cubeName.equals(getDataCube()) || isPreviousDataBindingReference) {
        CubeHandle cubeHandle=getReportDesignHandle().findCube(cubeName);
        itemHandle.setCube(cubeHandle);
        clearBindings();
        generateBindings(ChartXTabUIUtil.generateComputedColumns(itemHandle,cubeHandle));
      }
    }
    ChartWizard.removeException(ChartWizard.RepDSProvider_Cube_ID);
  }
 catch (  SemanticException e) {
    ChartWizard.showException(ChartWizard.RepDSProvider_Cube_ID,e.getLocalizedMessage());
  }
}",0.9853975121687398
67209,"protected int addButtons(Composite cmp,final Table table){
  Listener[] listeners=getAggregationButton().getListeners(SWT.Selection);
  if (listeners.length > 0) {
    getAggregationButton().removeListener(SWT.Selection,listeners[0]);
  }
  getAggregationButton().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(inputElement,null,context);
      dialog.setExpressionProvider(expressionProvider);
      dialog.setAggreate(true);
      if (dialog.open() == Dialog.OK) {
        if (bindingTable != null) {
          refreshBindingTable();
          bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
        }
      }
      refreshBindingTable();
      if (table.getItemCount() > 0)       setSelectionInTable(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  btnRefresh=new Button(cmp,SWT.PUSH);
  btnRefresh.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  data.widthHint=Math.max(60,btnRefresh.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnRefresh.setLayoutData(data);
  btnRefresh.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      try {
        List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
        CubeHandle cubeHandle=ChartCubeUtil.getBindingCube(inputElement);
        if (cubeHandle != null) {
          if (inputElement.getCube() == null) {
            refreshBindingTable();
          }
 else {
            List<LevelHandle> levels=ChartCubeUtil.getAllLevels(cubeHandle);
            for (Iterator<LevelHandle> iter=levels.iterator(); iter.hasNext(); ) {
              LevelHandle levelHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartCubeUtil.createLevelBindingName(levelHandle));
              column.setDataType(levelHandle.getDataType());
              column.setExpression(ChartCubeUtil.createDimensionExpression(levelHandle));
              columnList.add(column);
            }
            List<MeasureHandle> measures=ChartCubeUtil.getAllMeasures(cubeHandle);
            for (Iterator<MeasureHandle> iter=measures.iterator(); iter.hasNext(); ) {
              MeasureHandle measureHandle=iter.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartCubeUtil.createMeasureBindingName(measureHandle));
              column.setDataType(measureHandle.getDataType());
              column.setExpression(ExpressionUtil.createJSMeasureExpression(measureHandle.getName()));
              column.setAggregateFunction(measureHandle.getFunction());
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
 else {
          DataSetHandle dataSetHandle=inputElement.getDataSet();
          if (dataSetHandle == null) {
            refreshBindingTable();
          }
 else {
            List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
            for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
              ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
              column.setDataType(resultSetColumn.getDataType());
              column.setExpression(DEUtil.getExpression(resultSetColumn));
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
        bindingTable.setInput(inputElement);
      }
 catch (      SemanticException e) {
        WizardBase.displayException(e);
      }
    }
  }
);
  return 2;
}","protected int addButtons(Composite cmp,final Table table){
  Listener[] listeners=getAggregationButton().getListeners(SWT.Selection);
  if (listeners.length > 0) {
    getAggregationButton().removeListener(SWT.Selection,listeners[0]);
  }
  getAggregationButton().addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      DataColumnBindingDialog dialog=new DataColumnBindingDialog(true);
      dialog.setInput(inputElement,null,context);
      dialog.setExpressionProvider(expressionProvider);
      dialog.setAggreate(true);
      if (dialog.open() == Dialog.OK) {
        if (bindingTable != null) {
          refreshBindingTable();
          bindingTable.getTable().setSelection(bindingTable.getTable().getItemCount() - 1);
        }
      }
      refreshBindingTable();
      if (table.getItemCount() > 0)       setSelectionInTable(table.getItemCount() - 1);
      updateButtons();
    }
  }
);
  btnRefresh=new Button(cmp,SWT.PUSH);
  btnRefresh.setText(Messages.getString(""String_Node_Str""));
  GridData data=new GridData(GridData.VERTICAL_ALIGN_BEGINNING);
  data.widthHint=Math.max(60,btnRefresh.computeSize(SWT.DEFAULT,SWT.DEFAULT,true).x);
  btnRefresh.setLayoutData(data);
  btnRefresh.addListener(SWT.Selection,new Listener(){
    public void handleEvent(    Event event){
      try {
        List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
        CubeHandle cubeHandle=ChartCubeUtil.getBindingCube(inputElement);
        if (cubeHandle != null) {
          if (inputElement.getCube() == null) {
            refreshBindingTable();
          }
 else {
            inputElement.getColumnBindings().clearValue();
            columnList=ChartXTabUIUtil.generateComputedColumns((ExtendedItemHandle)inputElement,cubeHandle);
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
 else {
          DataSetHandle dataSetHandle=inputElement.getDataSet();
          if (dataSetHandle == null) {
            refreshBindingTable();
          }
 else {
            List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
            for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
              ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
              ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
              column.setDataType(resultSetColumn.getDataType());
              column.setExpression(DEUtil.getExpression(resultSetColumn));
              columnList.add(column);
            }
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
        }
        bindingTable.setInput(inputElement);
      }
 catch (      SemanticException e) {
        WizardBase.displayException(e);
      }
    }
  }
);
  return 2;
}",0.8255296181352044
67210,"public void handleEvent(Event event){
  try {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    CubeHandle cubeHandle=ChartCubeUtil.getBindingCube(inputElement);
    if (cubeHandle != null) {
      if (inputElement.getCube() == null) {
        refreshBindingTable();
      }
 else {
        List<LevelHandle> levels=ChartCubeUtil.getAllLevels(cubeHandle);
        for (Iterator<LevelHandle> iter=levels.iterator(); iter.hasNext(); ) {
          LevelHandle levelHandle=iter.next();
          ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartCubeUtil.createLevelBindingName(levelHandle));
          column.setDataType(levelHandle.getDataType());
          column.setExpression(ChartCubeUtil.createDimensionExpression(levelHandle));
          columnList.add(column);
        }
        List<MeasureHandle> measures=ChartCubeUtil.getAllMeasures(cubeHandle);
        for (Iterator<MeasureHandle> iter=measures.iterator(); iter.hasNext(); ) {
          MeasureHandle measureHandle=iter.next();
          ComputedColumn column=StructureFactory.newComputedColumn(inputElement,ChartCubeUtil.createMeasureBindingName(measureHandle));
          column.setDataType(measureHandle.getDataType());
          column.setExpression(ExpressionUtil.createJSMeasureExpression(measureHandle.getName()));
          column.setAggregateFunction(measureHandle.getFunction());
          columnList.add(column);
        }
        if (columnList.size() > 0) {
          for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
            DEUtil.addColumn(inputElement,iter.next(),false);
          }
        }
      }
    }
 else {
      DataSetHandle dataSetHandle=inputElement.getDataSet();
      if (dataSetHandle == null) {
        refreshBindingTable();
      }
 else {
        List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
        for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
          ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
          ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
          column.setDataType(resultSetColumn.getDataType());
          column.setExpression(DEUtil.getExpression(resultSetColumn));
          columnList.add(column);
        }
        if (columnList.size() > 0) {
          for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
            DEUtil.addColumn(inputElement,iter.next(),false);
          }
        }
      }
    }
    bindingTable.setInput(inputElement);
  }
 catch (  SemanticException e) {
    WizardBase.displayException(e);
  }
}","public void handleEvent(Event event){
  try {
    List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
    CubeHandle cubeHandle=ChartCubeUtil.getBindingCube(inputElement);
    if (cubeHandle != null) {
      if (inputElement.getCube() == null) {
        refreshBindingTable();
      }
 else {
        inputElement.getColumnBindings().clearValue();
        columnList=ChartXTabUIUtil.generateComputedColumns((ExtendedItemHandle)inputElement,cubeHandle);
        if (columnList.size() > 0) {
          for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
            DEUtil.addColumn(inputElement,iter.next(),false);
          }
        }
      }
    }
 else {
      DataSetHandle dataSetHandle=inputElement.getDataSet();
      if (dataSetHandle == null) {
        refreshBindingTable();
      }
 else {
        List resultSetColumnList=DataUtil.getColumnList(dataSetHandle);
        for (Iterator iterator=resultSetColumnList.iterator(); iterator.hasNext(); ) {
          ResultSetColumnHandle resultSetColumn=(ResultSetColumnHandle)iterator.next();
          ComputedColumn column=StructureFactory.newComputedColumn(inputElement,resultSetColumn.getColumnName());
          column.setDataType(resultSetColumn.getDataType());
          column.setExpression(DEUtil.getExpression(resultSetColumn));
          columnList.add(column);
        }
        if (columnList.size() > 0) {
          for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
            DEUtil.addColumn(inputElement,iter.next(),false);
          }
        }
      }
    }
    bindingTable.setInput(inputElement);
  }
 catch (  SemanticException e) {
    WizardBase.displayException(e);
  }
}",0.397281993204983
67211,"/** 
 * Disable/enable button to make all items in the dialog read-only.
 * @since 2.3
 */
private void updateButtonStatusForReadOnly(){
  if (fIsReadOnly) {
    btnAdd.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);
    getAggregationButton().setEnabled(false);
    btnRefresh.setEnabled(false);
  }
}","/** 
 * Disable/enable button to make all items in the dialog read-only.
 * @since 2.3
 */
private void updateButtonStatusForReadOnly(){
  if (fIsReadOnly) {
    btnAdd.setEnabled(false);
    btnEdit.setEnabled(false);
    btnDel.setEnabled(false);
    getAggregationButton().setEnabled(false);
  }
}",0.946372239747634
67212,"/** 
 * Create different dataset provider for common and sharing case.
 * @return
 * @since 2.3
 */
protected AggregateOnBindingsFormHandleProvider createDataSetFormProvider(){
  return new AggregateOnBindingsFormHandleProvider(){
    @Override public boolean isEditable(){
      if (input == null) {
        return super.isEditable();
      }
      final ReportItemHandle rih;
      if (input instanceof List) {
        rih=(ExtendedItemHandle)((List)input).get(0);
      }
 else {
        rih=(ExtendedItemHandle)input;
      }
      if (ChartReportItemUtil.isChildOfMultiViewsHandle(rih)) {
        return false;
      }
      boolean isSharing=false;
      if (ChartItemUtil.getReportItemReference(rih) != null) {
        isSharing=true;
      }
      boolean useCube=(rih.getCube() != null);
      return !isSharing && (!useCube) && !ChartItemUtil.isChartInheritGroups(rih)&& !ChartCubeUtil.isAxisChart(rih)&& !ChartCubeUtil.isPlotChart(rih);
    }
  }
;
}","/** 
 * Create different dataset provider for common and sharing case.
 * @return
 * @since 2.3
 */
protected AggregateOnBindingsFormHandleProvider createDataSetFormProvider(){
  return new AggregateOnBindingsFormHandleProvider(){
    @Override public boolean isEditable(){
      if (input == null) {
        return super.isEditable();
      }
      final ReportItemHandle rih;
      if (input instanceof List) {
        rih=(ExtendedItemHandle)((List)input).get(0);
      }
 else {
        rih=(ExtendedItemHandle)input;
      }
      if (ChartReportItemUtil.isChildOfMultiViewsHandle(rih)) {
        return false;
      }
      boolean isSharing=false;
      if (ChartItemUtil.getReportItemReference(rih) != null) {
        isSharing=true;
      }
      boolean useCube=(rih.getCube() != null);
      return !isSharing && (!useCube) && !ChartItemUtil.isChartInheritGroups(rih)&& !ChartCubeUtil.isAxisChart(rih)&& !ChartCubeUtil.isPlotChart(rih);
    }
    @Override public void generateAllBindingColumns(){
      super.generateAllBindingColumns();
      if (getBindingObject() != null) {
        CubeHandle cube=null;
        if (getBindingObject() instanceof ExtendedItemHandle) {
          cube=((ExtendedItemHandle)getBindingObject()).getCube();
        }
        if (cube != null) {
          try {
            ExtendedItemHandle inputElement=(ExtendedItemHandle)getBindingObject();
            List<ComputedColumn> columnList=new ArrayList<ComputedColumn>();
            inputElement.getColumnBindings().clearValue();
            columnList=ChartXTabUIUtil.generateComputedColumns(inputElement,cube);
            if (columnList.size() > 0) {
              for (Iterator<ComputedColumn> iter=columnList.iterator(); iter.hasNext(); ) {
                DEUtil.addColumn(inputElement,iter.next(),false);
              }
            }
          }
 catch (          SemanticException e) {
          }
        }
      }
    }
  }
;
}",0.6641326883206634
67213,"protected void applyCustomSections(){
  ChartBindingGroupDescriptorProvider bindingProvider=new ChartBindingGroupDescriptorProvider();
  bindingProvider.setRefrenceSection(((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)));
  ((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).setProvider(bindingProvider);
  AggregateOnBindingsFormHandleProvider dataSetFormProvider=createDataSetFormProvider();
  ((SortingFormSection)getSection(PageSectionId.BINDING_DATASET_FORM)).setCustomForm(new AggregateOnBindingsFormDescriptor(true));
  ((SortingFormSection)getSection(PageSectionId.BINDING_DATASET_FORM)).setProvider(dataSetFormProvider);
  if (((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).getProvider() != null) {
    IDescriptorProvider dataSetProvider=((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).getProvider();
    if (dataSetProvider instanceof BindingGroupDescriptorProvider)     ((BindingGroupDescriptorProvider)dataSetProvider).setDependedProvider(dataSetFormProvider);
  }
}","protected void applyCustomSections(){
  ChartBindingGroupDescriptorProvider bindingProvider=new ChartBindingGroupDescriptorProvider();
  bindingProvider.setRefrenceSection(((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)));
  ((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).setProvider(bindingProvider);
  AggregateOnBindingsFormHandleProvider dataSetFormProvider=createDataSetFormProvider();
  ((SortingFormSection)getSection(PageSectionId.BINDING_DATASET_FORM)).setCustomForm(new AggregateOnBindingsFormDescriptor(true){
    @Override public void setInput(    Object object){
      super.setInput(object);
      btnRefresh.setEnabled(true);
    }
  }
);
  ((SortingFormSection)getSection(PageSectionId.BINDING_DATASET_FORM)).setProvider(dataSetFormProvider);
  if (((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).getProvider() != null) {
    IDescriptorProvider dataSetProvider=((BindingGroupSection)getSection(PageSectionId.BINDING_GROUP)).getProvider();
    if (dataSetProvider instanceof BindingGroupDescriptorProvider)     ((BindingGroupDescriptorProvider)dataSetProvider).setDependedProvider(dataSetFormProvider);
  }
}",0.9401631912964642
67214,"/** 
 * @param absolute fileName the archive file name
 */
public FolderArchive(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(""String_Node_Str"");
  this.folderName=new File(folderName).getCanonicalPath();
  try {
    this.writer=new FolderArchiveWriter(folderName);
    this.reader=new FolderArchiveReader(folderName);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}","/** 
 * @param absolute fileName the archive file name
 */
public FolderArchive(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  this.folderName=new File(folderName).getCanonicalPath();
  try {
    this.writer=new FolderArchiveWriter(folderName);
    this.reader=new FolderArchiveReader(folderName);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}",0.943157894736842
67215,"/** 
 * @param folderName -the absolute name of the folder archive
 */
public FolderArchiveReader(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0) {
    throw new IOException(""String_Node_Str"");
  }
  File fd=new File(folderName);
  if (!fd.isDirectory()) {
    throw new IOException(""String_Node_Str"");
  }
  this.folderName=fd.getCanonicalPath();
}","/** 
 * @param folderName -the absolute name of the folder archive
 */
public FolderArchiveReader(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0) {
    throw new IllegalArgumentException(folderName);
  }
  File fd=new File(folderName);
  if (!fd.exists() || !fd.isDirectory()) {
    throw new FileNotFoundException(Messages.getFormattedString(ResourceConstants.INVALID_ARCHIVE_NAME,folderName));
  }
  this.folderName=fd.getCanonicalPath();
}",0.8289920724801813
67216,"public RAInputStream getStream(String relativePath) throws IOException {
  String path=ArchiveUtil.generateFullPath(folderName,relativePath);
  File file=new File(path);
  if (file.exists()) {
    return new RAFolderInputStream(inputStreams,file);
  }
  throw new IOException(relativePath + ""String_Node_Str"");
}","public RAInputStream getStream(String relativePath) throws IOException {
  String path=ArchiveUtil.generateFullPath(folderName,relativePath);
  File file=new File(path);
  if (file.exists()) {
    return new RAFolderInputStream(inputStreams,file);
  }
  throw new FileNotFoundException(relativePath);
}",0.9446254071661238
67217,"public RAInputStream getInputStream(String relativePath) throws IOException {
  String path=ArchiveUtil.generateFullPath(folderName,relativePath);
  File file=new File(path);
  if (file.exists()) {
    RAFolderInputStream in=new RAFolderInputStream(inputStreams,file);
    return in;
  }
  throw new IOException(relativePath + ""String_Node_Str"");
}","public RAInputStream getInputStream(String relativePath) throws IOException {
  String path=ArchiveUtil.generateFullPath(folderName,relativePath);
  File file=new File(path);
  if (file.exists()) {
    RAFolderInputStream in=new RAFolderInputStream(inputStreams,file);
    return in;
  }
  throw new FileNotFoundException(relativePath);
}",0.9504373177842566
67218,"/** 
 * @param absolute fileName the archive file name
 */
public FolderArchiveWriter(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(""String_Node_Str"");
  File fd=new File(folderName);
  if (!fd.exists()) {
    fd.mkdirs();
  }
  this.folderName=fd.getCanonicalPath();
}","/** 
 * @param absolute fileName the archive file name
 */
public FolderArchiveWriter(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  File fd=new File(folderName);
  if (!fd.exists()) {
    fd.mkdirs();
  }
  this.folderName=fd.getCanonicalPath();
}",0.925207756232687
67219,"/** 
 * Move the file pointer to the new location in the stream
 * @param localPos - the new local postion in the stream. The localPos starts from 0.  
 */
public void seek(long localPos) throws IOException {
  if (localPosToGlobalPos(localPos) >= endPos)   throw new IOException(""String_Node_Str"");
  if (localPos < cur - bufLen || localPos > cur) {
    cur=localPos;
    bufCur=0;
    bufLen=0;
  }
 else {
    bufCur=bufLen - (int)(cur - localPos);
  }
}","/** 
 * Move the file pointer to the new location in the stream
 * @param localPos - the new local postion in the stream. The localPos starts from 0.  
 */
public void seek(long localPos) throws IOException {
  if (localPosToGlobalPos(localPos) >= endPos)   throw new IOException(Messages.getString(ResourceConstants.OUT_OF_RANGE));
  if (localPos < cur - bufLen || localPos > cur) {
    cur=localPos;
    bufCur=0;
    bufLen=0;
  }
 else {
    bufCur=bufLen - (int)(cur - localPos);
  }
}",0.9461457233368532
67220,"public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(""String_Node_Str"" + localPos);
  }
  if (localPos >= entry.getLength()) {
    throw new EOFException(""String_Node_Str"");
  }
  if (localPos < offset || localPos > offset + buffer_size) {
    offset=localPos;
    buffer_size=0;
    buffer_offset=0;
    return;
  }
  buffer_offset=(int)(localPos - offset);
}","public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos >= entry.getLength()) {
    throw new EOFException(Messages.getString(ResourceConstants.EXCEED_FILE_LENGTH));
  }
  if (localPos < offset || localPos > offset + buffer_size) {
    offset=localPos;
    buffer_size=0;
    buffer_offset=0;
    return;
  }
  buffer_offset=(int)(localPos - offset);
}",0.8275109170305677
67221,"public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(""String_Node_Str"" + localPos);
  }
  if (localPos > entry.getLength()) {
    entry.setLength(localPos);
  }
  if (offset + buffer_offset != localPos) {
    flushBuffer();
    offset=localPos;
  }
}","public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos > entry.getLength()) {
    entry.setLength(localPos);
  }
  if (offset + buffer_offset != localPos) {
    flushBuffer();
    offset=localPos;
  }
}",0.8493150684931506
67222,"private Block loadBlock(int blockId) throws IOException {
  if (cachedBlockId == blockId) {
    return cachedBlock;
  }
  if (cachedBlock != null) {
    af.unloadBlock(cachedBlock);
    cachedBlock=null;
  }
  cachedBlockId=blockId;
  int fileBlockId=index.getBlock(blockId);
  if (fileBlockId != -1) {
    cachedBlock=af.loadBlock(fileBlockId);
    return cachedBlock;
  }
  throw new IOException(""String_Node_Str"" + blockId);
}","private Block loadBlock(int blockId) throws IOException {
  if (cachedBlockId == blockId) {
    return cachedBlock;
  }
  if (cachedBlock != null) {
    af.unloadBlock(cachedBlock);
    cachedBlock=null;
  }
  cachedBlockId=blockId;
  int fileBlockId=index.getBlock(blockId);
  if (fileBlockId != -1) {
    cachedBlock=af.loadBlock(fileBlockId);
    return cachedBlock;
  }
  throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_INDEX,new Object[]{blockId}));
}",0.891566265060241
67223,"synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}","synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.7836734693877551
67224,"/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.save();
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}","/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.save();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.8938906752411575
67225,"public ArchiveFile(String systemId,String fileName,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(""String_Node_Str"");
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.systemId=systemId;
  if (""String_Node_Str"".equals(mode)) {
    openArchiveForReading();
  }
 else   if (""String_Node_Str"".equals(mode)) {
    openArchiveForAppending();
  }
 else {
    ArchiveFileV3 f3=new ArchiveFileV3(fileName,mode);
    f3.setSystemId(systemId);
    this.af=f3;
  }
}","public ArchiveFile(String systemId,String fileName,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FILE_NAME_IS_NULL));
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.systemId=systemId;
  if (""String_Node_Str"".equals(mode)) {
    openArchiveForReading();
  }
 else   if (""String_Node_Str"".equals(mode)) {
    openArchiveForAppending();
  }
 else {
    ArchiveFileV3 f3=new ArchiveFileV3(fileName,mode);
    f3.setSystemId(systemId);
    this.af=f3;
  }
}",0.9435897435897436
67226,"synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}","synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.8307692307692308
67227,"synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}","synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.8341708542713567
67228,"synchronized public ArchiveEntry openEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.openEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}","synchronized public ArchiveEntry openEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.openEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.7845528455284553
67229,"synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(""String_Node_Str"" + name + ""String_Node_Str""+ systemId);
  }
}","synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.788
67230,"public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(""String_Node_Str"" + systemId);
  }
}","public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.8450704225352113
67231,"public synchronized boolean removeEntry(String name) throws IOException {
  throw new IOException(""String_Node_Str"");
}","public synchronized boolean removeEntry(String name) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.8043478260869565
67232,"public synchronized void save() throws IOException {
  throw new IOException(""String_Node_Str"");
}","public synchronized void save() throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.7692307692307693
67233,"public void flush() throws IOException {
  throw new IOException(""String_Node_Str"");
}","public void flush() throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.7428571428571429
67234,"public synchronized ArchiveEntry createEntry(String name) throws IOException {
  throw new IOException(""String_Node_Str"");
}","public synchronized ArchiveEntry createEntry(String name) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.8111888111888111
67235,"public void unlockEntry(Object locker) throws IOException {
  if (!(locker instanceof ArchiveEntryV1)) {
    throw new IOException(""String_Node_Str"" + locker);
  }
}","public void unlockEntry(Object locker) throws IOException {
  if (!(locker instanceof ArchiveEntryV1)) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_LOCK_TYPE,new Object[]{locker}));
  }
}",0.7557840616966581
67236,"synchronized void write(long pos,byte[] b,int off,int len) throws IOException {
  throw new IOException(""String_Node_Str"");
}","synchronized void write(long pos,byte[] b,int off,int len) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.8125
67237,"/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isChartCubeReference=isChartReportItemHandle(referredHandle);
  if (referredHandle != null && !isChartCubeReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    boolean disableFilter=false;
    if (referredHandle.getContainer() instanceof ReportItemHandle) {
      disableFilter=true;
    }
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,!disableFilter);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && !isChartCubeReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}","/** 
 * Creates the evaluator for Cube Live preview.
 * @param cube
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") protected IDataRowExpressionEvaluator createCubeEvaluator(CubeHandle cube,final Chart cm,List<String> columnExpression) throws BirtException {
  IBaseCubeQueryDefinition qd=null;
  ReportItemHandle referredHandle=ChartReportItemUtil.getReportItemReference(itemHandle);
  boolean isChartCubeReference=isChartReportItemHandle(referredHandle);
  if (referredHandle != null && !isChartCubeReference) {
    ExtendedItemHandle bindingHandle=(ExtendedItemHandle)referredHandle;
    qd=CrosstabQueryUtil.createCubeQuery((CrosstabReportItemHandle)bindingHandle.getReportItem(),null,true,true,true,true,true,true);
    ICubeQueryDefinition queryDef=(ICubeQueryDefinition)qd;
    if (columnExpression != null) {
      ExpressionSet exprSet=new ExpressionSet();
      exprSet.addAll(columnExpression);
      for (      String expr : exprSet) {
        exprCodec.decode(expr);
        String bindingName=exprCodec.getExpression();
        Binding colBinding=new Binding(bindingName);
        colBinding.setDataType(org.eclipse.birt.core.data.DataType.ANY_TYPE);
        colBinding.setExpression(ChartReportItemUtil.adaptExpression(exprCodec,session.getModelAdaptor(),true));
        queryDef.addBinding(colBinding);
      }
    }
  }
 else {
    qd=new ChartCubeQueryHelper(itemHandle,cm,session.getModelAdaptor()).createCubeQuery(null,columnExpression.toArray(new String[columnExpression.size()]));
  }
  resetCubeQuery(qd);
  if (needDefineCube(cube)) {
    DataService.getInstance().registerSession(cube,session);
    session.defineCube(cube);
  }
  setRowLimit(session,getMaxRow(),true);
  ICubeQueryResults cqr=dteAdapter.executeQuery(session,(ICubeQueryDefinition)qd);
  if (referredHandle != null && !isChartCubeReference) {
    return new SharedCubeResultSetEvaluator(cqr,qd,cm);
  }
  return new BIRTCubeResultSetEvaluator(cqr);
}",0.958011583011583
67238,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expressionProvider=ep;
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9951085893171592
67239,"private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  ExpressionButtonUtil.createExpressionButton(parent,expressionValue,expressionProvider,designHandle,listener);
  return expressionValue;
}","private Combo createExpressionValue(Composite parent){
  Combo expressionValue=new Combo(parent,SWT.None);
  expressionValue.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue.addListener(SWT.Selection,expValueSelectionListener);
  Listener listener=new Listener(){
    public void handleEvent(    Event event){
      updateButtons();
    }
  }
;
  expressionValue.addListener(SWT.Modify,listener);
  IExpressionButton ceb=ChartExpressionButtonUtil.createExpressionButton(parent,expressionValue,(ExtendedItemHandle)designHandle,expressionProvider);
  ceb.addListener(listener);
  return expressionValue;
}",0.9190110826939472
67240,"/** 
 * @param absolute fileName the archive file name
 */
public FolderArchive(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  this.folderName=new File(folderName).getCanonicalPath();
  try {
    this.writer=new FolderArchiveWriter(folderName);
    this.reader=new FolderArchiveReader(folderName);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}","/** 
 * @param absolute fileName the archive file name
 */
public FolderArchive(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(CoreMessages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  this.folderName=new File(folderName).getCanonicalPath();
  try {
    this.writer=new FolderArchiveWriter(folderName);
    this.reader=new FolderArchiveReader(folderName);
  }
 catch (  IOException ex) {
    close();
    throw ex;
  }
}",0.9959758551307848
67241,"/** 
 * @param folderName -the absolute name of the folder archive
 */
public FolderArchiveReader(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0) {
    throw new IllegalArgumentException(folderName);
  }
  File fd=new File(folderName);
  if (!fd.exists() || !fd.isDirectory()) {
    throw new FileNotFoundException(Messages.getFormattedString(ResourceConstants.INVALID_ARCHIVE_NAME,folderName));
  }
  this.folderName=fd.getCanonicalPath();
}","/** 
 * @param folderName -the absolute name of the folder archive
 */
public FolderArchiveReader(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0) {
    throw new IllegalArgumentException(folderName);
  }
  File fd=new File(folderName);
  if (!fd.exists() || !fd.isDirectory()) {
    throw new FileNotFoundException(CoreMessages.getFormattedString(ResourceConstants.INVALID_ARCHIVE_NAME,folderName));
  }
  this.folderName=fd.getCanonicalPath();
}",0.9959183673469388
67242,"/** 
 * @param absolute fileName the archive file name
 */
public FolderArchiveWriter(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  File fd=new File(folderName);
  if (!fd.exists()) {
    fd.mkdirs();
  }
  this.folderName=fd.getCanonicalPath();
}","/** 
 * @param absolute fileName the archive file name
 */
public FolderArchiveWriter(String folderName) throws IOException {
  if (folderName == null || folderName.length() == 0)   throw new IOException(CoreMessages.getString(ResourceConstants.FOLDER_NAME_IS_NULL));
  File fd=new File(folderName);
  if (!fd.exists()) {
    fd.mkdirs();
  }
  this.folderName=fd.getCanonicalPath();
}",0.9947780678851176
67243,"/** 
 * Move the file pointer to the new location in the stream
 * @param localPos - the new local postion in the stream. The localPos starts from 0.  
 */
public void seek(long localPos) throws IOException {
  if (localPosToGlobalPos(localPos) >= endPos)   throw new IOException(Messages.getString(ResourceConstants.OUT_OF_RANGE));
  if (localPos < cur - bufLen || localPos > cur) {
    cur=localPos;
    bufCur=0;
    bufLen=0;
  }
 else {
    bufCur=bufLen - (int)(cur - localPos);
  }
}","/** 
 * Move the file pointer to the new location in the stream
 * @param localPos - the new local postion in the stream. The localPos starts from 0.  
 */
public void seek(long localPos) throws IOException {
  if (localPosToGlobalPos(localPos) >= endPos)   throw new IOException(CoreMessages.getString(ResourceConstants.OUT_OF_RANGE));
  if (localPos < cur - bufLen || localPos > cur) {
    cur=localPos;
    bufCur=0;
    bufLen=0;
  }
 else {
    bufCur=bufLen - (int)(cur - localPos);
  }
}",0.9959349593495936
67244,"public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos >= entry.getLength()) {
    throw new EOFException(Messages.getString(ResourceConstants.EXCEED_FILE_LENGTH));
  }
  if (localPos < offset || localPos > offset + buffer_size) {
    offset=localPos;
    buffer_size=0;
    buffer_offset=0;
    return;
  }
  buffer_offset=(int)(localPos - offset);
}","public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos >= entry.getLength()) {
    throw new EOFException(CoreMessages.getString(ResourceConstants.EXCEED_FILE_LENGTH));
  }
  if (localPos < offset || localPos > offset + buffer_size) {
    offset=localPos;
    buffer_size=0;
    buffer_offset=0;
    return;
  }
  buffer_offset=(int)(localPos - offset);
}",0.9921875
67245,"public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos > entry.getLength()) {
    entry.setLength(localPos);
  }
  if (offset + buffer_offset != localPos) {
    flushBuffer();
    offset=localPos;
  }
}","public void seek(long localPos) throws IOException {
  if (localPos < 0) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.INVALID_SEEK_OFFSET,new Object[]{localPos}));
  }
  if (localPos > entry.getLength()) {
    entry.setLength(localPos);
  }
  if (offset + buffer_offset != localPos) {
    flushBuffer();
    offset=localPos;
  }
}",0.994459833795014
67246,"private Block loadBlock(int blockId) throws IOException {
  if (cachedBlockId == blockId) {
    return cachedBlock;
  }
  if (cachedBlock != null) {
    af.unloadBlock(cachedBlock);
    cachedBlock=null;
  }
  cachedBlockId=blockId;
  int fileBlockId=index.getBlock(blockId);
  if (fileBlockId != -1) {
    cachedBlock=af.loadBlock(fileBlockId);
    return cachedBlock;
  }
  throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_INDEX,new Object[]{blockId}));
}","private Block loadBlock(int blockId) throws IOException {
  if (cachedBlockId == blockId) {
    return cachedBlock;
  }
  if (cachedBlock != null) {
    af.unloadBlock(cachedBlock);
    cachedBlock=null;
  }
  cachedBlockId=blockId;
  int fileBlockId=index.getBlock(blockId);
  if (fileBlockId != -1) {
    cachedBlock=af.loadBlock(fileBlockId);
    return cachedBlock;
  }
  throw new IOException(CoreMessages.getFormattedString(ResourceConstants.INVALID_INDEX,new Object[]{blockId}));
}",0.9958847736625516
67247,"synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","synchronized public boolean removeEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.removeEntry(name);
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9919678714859438
67248,"/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.save();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","/** 
 * save the file. If the file is transient file, after saving, it will be converts to normal file.
 * @throws IOException
 */
public void save() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.save();
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9939024390243902
67249,"public ArchiveFile(String systemId,String fileName,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FILE_NAME_IS_NULL));
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.systemId=systemId;
  if (""String_Node_Str"".equals(mode)) {
    openArchiveForReading();
  }
 else   if (""String_Node_Str"".equals(mode)) {
    openArchiveForAppending();
  }
 else {
    ArchiveFileV3 f3=new ArchiveFileV3(fileName,mode);
    f3.setSystemId(systemId);
    this.af=f3;
  }
}","public ArchiveFile(String systemId,String fileName,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(CoreMessages.getString(ResourceConstants.FILE_NAME_IS_NULL));
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.systemId=systemId;
  if (""String_Node_Str"".equals(mode)) {
    openArchiveForReading();
  }
 else   if (""String_Node_Str"".equals(mode)) {
    openArchiveForAppending();
  }
 else {
    ArchiveFileV3 f3=new ArchiveFileV3(fileName,mode);
    f3.setSystemId(systemId);
    this.af=f3;
  }
}",0.9966996699669968
67250,"synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","synchronized public void flush() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.flush();
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9905660377358492
67251,"synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","synchronized public void refresh() throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.refresh();
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9907407407407408
67252,"synchronized public ArchiveEntry openEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.openEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","synchronized public ArchiveEntry openEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.openEntry(name);
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.992
67253,"synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","synchronized public ArchiveEntry createEntry(String name) throws IOException {
  if (isArchiveFileAvailable(af)) {
    return af.createEntry(name);
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9921259842519684
67254,"public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","public void unlockEntry(Object locker) throws IOException {
  if (isArchiveFileAvailable(af)) {
    af.unlockEntry(locker);
  }
 else {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.991304347826087
67255,"public synchronized boolean removeEntry(String name) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}","public synchronized boolean removeEntry(String name) throws IOException {
  throw new IOException(CoreMessages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.9874213836477987
67256,"public synchronized void save() throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}","public synchronized void save() throws IOException {
  throw new IOException(CoreMessages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.9855072463768116
67257,"public void flush() throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}","public void flush() throws IOException {
  throw new IOException(CoreMessages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.984126984126984
67258,"public synchronized ArchiveEntry createEntry(String name) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}","public synchronized ArchiveEntry createEntry(String name) throws IOException {
  throw new IOException(CoreMessages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.9878048780487804
67259,"public void unlockEntry(Object locker) throws IOException {
  if (!(locker instanceof ArchiveEntryV1)) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_LOCK_TYPE,new Object[]{locker}));
  }
}","public void unlockEntry(Object locker) throws IOException {
  if (!(locker instanceof ArchiveEntryV1)) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.INVALID_LOCK_TYPE,new Object[]{locker}));
  }
}",0.991150442477876
67260,"synchronized void write(long pos,byte[] b,int off,int len) throws IOException {
  throw new IOException(Messages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}","synchronized void write(long pos,byte[] b,int off,int len) throws IOException {
  throw new IOException(CoreMessages.getString(ResourceConstants.READ_ONLY_ARCHIVE));
}",0.987878787878788
67261,"/** 
 * create the archive file.
 * @param fileName file name.
 * @param mode open mode.
 * @throws IOException
 */
public ArchiveFileV2(String systemId,String dependId,String fileName,RandomAccessFile rf,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(Messages.getString(ResourceConstants.FILE_NAME_IS_NULL));
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.rf=rf;
  this.systemId=systemId;
  this.dependId=dependId;
  this.caches=new FileCacheManager();
  caches.setCacheListener(new ArchiveFileV2CacheListener());
  caches.setSystemCacheManager(ArchiveFile.systemCacheManager);
  setupArchiveMode(mode);
  if (isWritable && !isAppend) {
    createDocument();
  }
 else   if (isWritable && isAppend) {
    if (!(new File(fileName)).exists()) {
      createDocument();
    }
 else {
      openDocument();
    }
  }
 else {
    openDocument();
  }
  isClosed=false;
}","/** 
 * create the archive file.
 * @param fileName file name.
 * @param mode open mode.
 * @throws IOException
 */
public ArchiveFileV2(String systemId,String dependId,String fileName,RandomAccessFile rf,String mode) throws IOException {
  if (fileName == null || fileName.length() == 0)   throw new IOException(CoreMessages.getString(ResourceConstants.FILE_NAME_IS_NULL));
  File fd=new File(fileName);
  fileName=fd.getCanonicalPath();
  this.archiveName=fileName;
  this.rf=rf;
  this.systemId=systemId;
  this.dependId=dependId;
  this.caches=new FileCacheManager();
  caches.setCacheListener(new ArchiveFileV2CacheListener());
  caches.setSystemCacheManager(ArchiveFile.systemCacheManager);
  setupArchiveMode(mode);
  if (isWritable && !isAppend) {
    createDocument();
  }
 else   if (isWritable && isAppend) {
    if (!(new File(fileName)).exists()) {
      createDocument();
    }
 else {
      openDocument();
    }
  }
 else {
    openDocument();
  }
  isClosed=false;
}",0.99796126401631
67262,"private void assertWritable() throws IOException {
  assertOpen();
  if (!isWritable) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.ARCHIVE_OPEN_FOR_WRITE,new Object[]{systemId}));
  }
}","private void assertWritable() throws IOException {
  assertOpen();
  if (!isWritable) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.ARCHIVE_OPEN_FOR_WRITE,new Object[]{systemId}));
  }
}",0.9907407407407408
67263,"private void assertOpen() throws IOException {
  if (isClosed) {
    throw new IOException(Messages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}","private void assertOpen() throws IOException {
  if (isClosed) {
    throw new IOException(CoreMessages.getString(ResourceConstants.FILE_HAS_BEEN_CLOSED));
  }
}",0.9874213836477987
67264,"synchronized public void unlockEntry(Object locker) throws IOException {
  assertOpen();
  if (!(locker instanceof NameEntry)) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.INVALID_LOCK_TYPE,new Object[]{locker}));
  }
}","synchronized public void unlockEntry(Object locker) throws IOException {
  assertOpen();
  if (!(locker instanceof NameEntry)) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.INVALID_LOCK_TYPE,new Object[]{locker}));
  }
}",0.992
67265,"static ArchiveHeader read(RandomAccessFile rf) throws IOException {
  ArchiveHeader header=new ArchiveHeader();
  byte[] b=new byte[HEADER_LENGTH];
  rf.seek(0);
  rf.read(b);
  DataInputStream in=new DataInputStream(new ByteArrayInputStream(b));
  long magicTag=in.readLong();
  if (magicTag != DOCUMENT_TAG) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.NOT_COMPOUND_FILE,new Object[]{magicTag}));
  }
  long version=in.readLong();
  if (version != DOCUMENT_VERSION_0 && version != DOCUMENT_VERSION_1) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.UNSUPPORTED_ARCHIVE_VERSION,new Object[]{version}));
  }
  header.fileStatus=in.readInt();
  header.blockSize=in.readInt();
  if (header.blockSize == 0) {
    header.blockSize=DEFAULT_BLOCK_SIZE;
  }
  if (version == DOCUMENT_VERSION_1) {
    header.systemId=IOUtil.readString(in);
    header.dependId=IOUtil.readString(in);
  }
  return header;
}","static ArchiveHeader read(RandomAccessFile rf) throws IOException {
  ArchiveHeader header=new ArchiveHeader();
  byte[] b=new byte[HEADER_LENGTH];
  rf.seek(0);
  rf.read(b);
  DataInputStream in=new DataInputStream(new ByteArrayInputStream(b));
  long magicTag=in.readLong();
  if (magicTag != DOCUMENT_TAG) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.NOT_COMPOUND_FILE,new Object[]{magicTag}));
  }
  long version=in.readLong();
  if (version != DOCUMENT_VERSION_0 && version != DOCUMENT_VERSION_1) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.UNSUPPORTED_ARCHIVE_VERSION,new Object[]{version}));
  }
  header.fileStatus=in.readInt();
  header.blockSize=in.readInt();
  if (header.blockSize == 0) {
    header.blockSize=DEFAULT_BLOCK_SIZE;
  }
  if (version == DOCUMENT_VERSION_1) {
    header.systemId=IOUtil.readString(in);
    header.dependId=IOUtil.readString(in);
  }
  return header;
}",0.9958202716823408
67266,"/** 
 * Write header information to disk
 * @throws IOException
 */
void flush(ArchiveFileV2 af) throws IOException {
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(buffer);
  out.writeLong(DOCUMENT_TAG);
  out.writeLong(DOCUMENT_VERSION_1);
  out.writeInt(fileStatus);
  out.writeInt(blockSize);
  IOUtil.writeString(out,af.systemId);
  IOUtil.writeString(out,af.dependId);
  byte[] b=buffer.toByteArray();
  if (b.length > DEFAULT_BLOCK_SIZE) {
    throw new IOException(Messages.getFormattedString(ResourceConstants.EXCEED_MAX_BLOCK_SIZE,new Object[]{DEFAULT_BLOCK_SIZE}));
  }
  af.write(0,0,b,0,b.length);
}","/** 
 * Write header information to disk
 * @throws IOException
 */
void flush(ArchiveFileV2 af) throws IOException {
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  DataOutputStream out=new DataOutputStream(buffer);
  out.writeLong(DOCUMENT_TAG);
  out.writeLong(DOCUMENT_VERSION_1);
  out.writeInt(fileStatus);
  out.writeInt(blockSize);
  IOUtil.writeString(out,af.systemId);
  IOUtil.writeString(out,af.dependId);
  byte[] b=buffer.toByteArray();
  if (b.length > DEFAULT_BLOCK_SIZE) {
    throw new IOException(CoreMessages.getFormattedString(ResourceConstants.EXCEED_MAX_BLOCK_SIZE,new Object[]{DEFAULT_BLOCK_SIZE}));
  }
  af.write(0,0,b,0,b.length);
}",0.9970193740685545
67267,"public ArchiveReader(String archiveName) throws IOException {
  if (archiveName == null || archiveName.length() == 0) {
    throw new IllegalArgumentException(archiveName);
  }
  File fd=new File(archiveName);
  if (!fd.isFile() || !fd.exists()) {
    throw new FileNotFoundException(Messages.getFormattedString(ResourceConstants.INVALID_ARCHIVE_NAME,archiveName));
  }
  archiveName=fd.getCanonicalPath();
  shareArchive=false;
  archive=new ArchiveFile(archiveName,""String_Node_Str"");
}","public ArchiveReader(String archiveName) throws IOException {
  if (archiveName == null || archiveName.length() == 0) {
    throw new IllegalArgumentException(archiveName);
  }
  File fd=new File(archiveName);
  if (!fd.isFile() || !fd.exists()) {
    throw new FileNotFoundException(CoreMessages.getFormattedString(ResourceConstants.INVALID_ARCHIVE_NAME,archiveName));
  }
  archiveName=fd.getCanonicalPath();
  shareArchive=false;
  archive=new ArchiveFile(archiveName,""String_Node_Str"");
}",0.9959183673469388
67268,"/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=textStyle.getLetterSpacing() * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(textStyle.getWordSpacing())) {
        textArea.addWordSpacing(textStyle.getWordSpacing());
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
        lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
      }
    }
  }
 else {
    if (isNewLine && textArea.isEmpty()) {
      if (context.isEnableHyphenation()) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
    lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
  }
}","/** 
 * layout a word, add the word to the line buffer.
 * @param word the word
 */
private void addWordIntoTextArea(TextArea textArea,Word word){
  int textLength=word.getLength();
  int wordWidth=getWordWidth(fontInfo,word);
  wordWidth+=textStyle.getLetterSpacing() * textLength;
  if (textArea.hasSpace(wordWidth)) {
    addWord(textArea,textLength,wordWidth);
    wordVestige=null;
    if (remainWords.hasWord()) {
      if (textArea.hasSpace(textStyle.getWordSpacing())) {
        textArea.addWordSpacing(textStyle.getWordSpacing());
      }
 else {
        textArea.setLineBreak(true);
        hasLineBreak=true;
        lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
      }
    }
  }
 else {
    if (!textWrapping && insertFirstExceedWord) {
      addWord(textArea,textLength,wordWidth);
      wordVestige=null;
      insertFirstExceedWord=false;
    }
    if (isNewLine && textArea.isEmpty()) {
      if (context.isEnableHyphenation()) {
        doHyphenation(word.getValue(),textArea);
      }
 else {
        addWord(textArea,textLength,wordWidth);
      }
    }
 else {
      wordVestige=null;
      remainWord=word;
    }
    textArea.setLineBreak(true);
    hasLineBreak=true;
    lineBreakCollapse=LINE_BREAK_COLLAPSE_STANDING_BY;
  }
}",0.931518502764781
67269,"public void setNewLineStatus(boolean status){
  isNewLine=status;
}","public void setNewLineStatus(boolean status){
  isNewLine=status;
  if (isNewLine && !textWrapping) {
    insertFirstExceedWord=true;
  }
}",0.6504854368932039
67270,"protected void addNewDefn(ColumnDefn defn) throws SemanticException {
  String name=defn.getColumnName();
  if (rsColumnMap != null) {
    if (rsColumnMap.get(name) != null) {
      name=getUniqueColumnName();
      defn.setColumnName(name);
    }
    ResultSetColumnHandle rsHandle;
    if (rsColumns != null && columnHints != null) {
      rsColumns.addItem(defn.getResultSetColumn());
      columnHints.addItem(defn.getColumnHint());
      rsColumnMap.put(name,defn.getResultSetColumn());
      columnHintMap.put(name,defn.getColumnHint());
    }
  }
}","protected ColumnHintHandle addNewDefn(ColumnDefn defn) throws SemanticException {
  ColumnHintHandle column=null;
  String name=defn.getColumnName();
  if (rsColumnMap != null) {
    if (rsColumnMap.get(name) != null) {
      name=getUniqueColumnName();
      defn.setColumnName(name);
    }
    ResultSetColumnHandle rsHandle;
    if (rsColumns != null && columnHints != null) {
      rsColumns.addItem(defn.getResultSetColumn());
      column=(ColumnHintHandle)columnHints.addItem(defn.getColumnHint());
      rsColumnMap.put(name,defn.getResultSetColumn());
      columnHintMap.put(name,defn.getColumnHint());
    }
  }
  return column;
}",0.9214046822742477
67271,"protected void updateColumnHintProperties(ResultSetColumnModel model,ColumnHintHandle columnHintHandle) throws SemanticException {
  columnHintHandle.setAnalysis(model.analysis);
  columnHintHandle.setAlias(model.alias);
  columnHintHandle.setDisplayName(model.displayName);
  columnHintHandle.setHelpText(model.helpText);
}","protected void updateColumnHintProperties(ResultSetColumnModel model,ColumnHintHandle columnHintHandle) throws SemanticException {
  columnHintHandle.setAnalysis(model.analysisType);
  columnHintHandle.setAlias(model.alias);
  columnHintHandle.setDisplayName(model.displayName);
  columnHintHandle.setHelpText(model.helpText);
}",0.9938650306748468
67272,"/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}","/** 
 * @param dataSet
 * @param resultSet
 * @throws BirtException
 */
private void saveResultToDataItems(DataSetHandle dataSet,IQueryResults resultSet) throws BirtException {
  IResultMetaData metaData=resultSet.getResultMetaData();
  int columnCount=0;
  if (metaData != null)   columnCount=metaData.getColumnCount();
  DataSetViewData[] columns=new DataSetViewData[columnCount];
  HashSet orgColumnNameSet=new HashSet();
  HashSet uniqueColumnNameSet=new HashSet();
  for (int n=0; n < columns.length; n++) {
    orgColumnNameSet.add(metaData.getColumnName(n + 1));
  }
  for (int n=0; n < columns.length; n++) {
    columns[n]=new DataSetViewData();
    columns[n].setParent(dataSet);
    columns[n].setDataType(metaData.getColumnType(n + 1));
    columns[n].setDataTypeName(metaData.getColumnTypeName(n + 1));
    columns[n].setPosition(n + 1);
    columns[n].setAlias(metaData.getColumnAlias(n + 1));
    columns[n].setComputedColumn(metaData.isComputedColumn(n + 1));
    String columnName=metaData.getColumnName(n + 1);
    String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,n);
    columns[n].setDataSetColumnName(uniqueColumnName);
    uniqueColumnNameSet.add(uniqueColumnName);
    ColumnHintHandle hint=findColumnHint(dataSet,columns[n].getName());
    if (hint != null) {
      columns[n].setAnalysis(hint.getAnalysis());
      columns[n].setAnalysisColumn(hint.getAnalysisColumn());
      columns[n].setACLExpression(hint.getACLExpression());
      columns[n].setFormat(hint.getFormat());
      columns[n].setDisplayLength(hint.getDisplayLength());
      columns[n].setHeading(hint.getHeading());
      columns[n].setHelpText(hint.getHelpText());
      columns[n].setHorizontalAlign(hint.getHorizontalAlign());
      columns[n].setTextFormat(hint.getTextFormat());
      columns[n].setDescription(hint.getDescription());
      columns[n].setWordWrap(hint.wordWrap());
      columns[n].setFormatValue(hint.getValueFormat());
    }
    if (!uniqueColumnName.equals(columnName))     updateModelColumn(dataSet,columns[n]);
  }
  updateModel(dataSet,columns);
  htColumns.put(dataSet,columns);
}",0.9867424242424242
67273,"public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target != null && transfer instanceof CubeHandle) {
    SlotHandle targetSlot=getTargetSlotHandle(target,ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
    if (targetSlot != null) {
      if (DNDUtil.handleValidateTargetCanContainType(targetSlot,""String_Node_Str"") && DNDUtil.handleValidateTargetCanContainMore(targetSlot,0))       return DNDService.LOGIC_TRUE;
    }
 else {
      IStructuredSelection models=InsertInLayoutUtil.editPart2Model(new StructuredSelection(target));
      if (!models.isEmpty()) {
        Object model=DNDUtil.unwrapToModel(models.getFirstElement());
        if (model instanceof DesignElementHandle) {
          DesignElementHandle targetHandle=(DesignElementHandle)model;
          if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),ICrosstabConstants.CROSSTAB_EXTENSION_NAME))           return DNDService.LOGIC_TRUE;
        }
      }
    }
  }
  return DNDService.LOGIC_UNKNOW;
}","public int canDrop(Object transfer,Object target,int operation,DNDLocation location){
  if (target != null && transfer instanceof CubeHandle) {
    SlotHandle targetSlot=getTargetSlotHandle(target,ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
    if (targetSlot != null) {
      if (DNDUtil.handleValidateTargetCanContainType(targetSlot,""String_Node_Str"") && DNDUtil.handleValidateTargetCanContainMore(targetSlot,0))       return DNDService.LOGIC_TRUE;
    }
 else {
      if (target instanceof CrosstabCellEditPart) {
        Object model=DNDUtil.unwrapToModel(((CrosstabCellEditPart)target).getModel());
        if (model == null) {
          return DNDService.LOGIC_FALSE;
        }
        ExtendedItemHandle handle=null;
        String name=ReportPlugin.getDefault().getCustomName(ICrosstabConstants.CROSSTAB_EXTENSION_NAME);
        try {
          handle=CrosstabExtendedItemFactory.createCrosstabReportItem(SessionHandleAdapter.getInstance().getReportDesignHandle(),null,name);
          handle.setProperty(IReportItemModel.CUBE_PROP,(CubeHandle)transfer);
          int flag=DNDUtil.handleValidateTargetCanContain(model,handle,false);
          if (flag == DNDUtil.CONTAIN_NO) {
            return DNDService.LOGIC_FALSE;
          }
        }
 catch (        Exception e) {
          return DNDService.LOGIC_FALSE;
        }
      }
      IStructuredSelection models=InsertInLayoutUtil.editPart2Model(new StructuredSelection(target));
      if (!models.isEmpty()) {
        Object model=DNDUtil.unwrapToModel(models.getFirstElement());
        if (model instanceof DesignElementHandle) {
          DesignElementHandle targetHandle=(DesignElementHandle)model;
          if (targetHandle.canContain(DEUtil.getDefaultContentName(targetHandle),ICrosstabConstants.CROSSTAB_EXTENSION_NAME))           return DNDService.LOGIC_TRUE;
        }
      }
    }
  }
  return DNDService.LOGIC_UNKNOW;
}",0.4852638793694311
67274,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign());
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException {
  long startTime=System.currentTimeMillis();
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  int[] data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[0]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[1]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  ;
  iterator=new DimensionForTest(levelNames);
  data=new int[BigLevelsAndFactTableDataset.dimensionPositionLength[2]];
  for (int i=0; i < data.length; i++) {
    data[i]=i;
  }
  iterator.setLevelMember(0,data);
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  IDatasetIterator facttableIterator=new BigLevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  startTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"");
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),facttableIterator,dimensions,measureColumnName,new StopSign(),false);
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  System.out.println(""String_Node_Str"");
  startTime=System.currentTimeMillis();
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[0]);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[1]);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),BigLevelsAndFactTableDataset.dimensionPositionLength[2]);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(99));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(10));
  dimensionPosition[1].add(new Integer(99));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(9));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  while (facttableRowIterator.next()) {
    System.out.print(facttableRowIterator.getDimensionPosition(0) + ""String_Node_Str"" + facttableRowIterator.getDimensionPosition(1)+ ""String_Node_Str""+ facttableRowIterator.getDimensionPosition(2)+ ""String_Node_Str"");
    System.out.println(facttableRowIterator.getMeasure(0) + ""String_Node_Str"" + facttableRowIterator.getMeasure(1));
  }
  System.out.println(""String_Node_Str"" + (System.currentTimeMillis() - startTime) / 1000);
}",0.999465811965812
67275,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(6));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994097973637616
67276,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994321408290744
67277,"private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}","private void testFactTableSaveAndLoad3(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  ILevel[] level=dimensions[1].getHierarchy().getLevels();
  ISelection[][] filter=new ISelection[1][1];
  filter[0][0]=SelectionFactory.createRangeSelection(new Object[]{new Integer(1)},new Object[]{new Integer(3)},true,false);
  Level[] findLevel=new Level[1];
  findLevel[0]=(Level)level[0];
  IDiskArray[] positionForFilter=null;
  positionForFilter=new IDiskArray[2];
  IDiskArray positionArray=dimensions[1].find(findLevel,filter);
  positionForFilter[0]=positionArray;
  assertEquals(positionArray.size(),2);
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[2];
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[1],positionArray,new StopSign());
  positionArray=dimensions[2].findAll();
  dimesionResultSets[1]=new DimensionResultIterator(dimensions[2],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[2];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  dimensionNamesForFilter[1]=""String_Node_Str"";
  positionForFilter[1]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[2];
  int[] sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel21};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel31};
  aggregations[1]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),2);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel21),0);
  assertEquals(resultSet[0].getLevelKeyDataType(dimLevel21,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  assertEquals(resultSet[1].length(),8);
  assertEquals(resultSet[1].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[1].getLevelIndex(dimLevel31),0);
  assertEquals(resultSet[1].getLevelKeyDataType(dimLevel31,""String_Node_Str""),DataType.INTEGER_TYPE);
  resultSet[1].seek(0);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(0));
  resultSet[1].seek(1);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(1));
  resultSet[1].seek(2);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(2));
  resultSet[1].seek(3);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(4));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(3));
  resultSet[1].seek(4);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(5));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(4));
  resultSet[1].seek(5);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(6));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(5));
  resultSet[1].seek(6);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(7));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(6));
  resultSet[1].seek(7);
  assertEquals(resultSet[1].getLevelKeyValue(0)[0],new Integer(8));
  assertEquals(resultSet[1].getAggregationValue(0),new Double(7));
  closeResultSets(resultSet);
}",0.9995927786073028
67278,"private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),12);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad2(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable2.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),12);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(3));
  dimensionPosition[2].add(new Integer(4));
  dimensionPosition[2].add(new Integer(5));
  dimensionPosition[2].add(new Integer(10));
  dimensionPosition[2].add(new Integer(11));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(10,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(11,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.9994450610432852
67279,"private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext();
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.close();
}","private void testNestAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  int[] sortType=new int[2];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  sortType[1]=IDimensionSortDefn.SORT_ASC;
  DimLevel[] levelsForFilter=new DimLevel[]{dimLevel11,dimLevel12};
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),6);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  assertEquals(resultSet[0].getLevelIndex(dimLevel12),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(1));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(5));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(9));
  resultSet[0].seek(3);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(13));
  resultSet[0].seek(4);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(17));
  resultSet[0].seek(5);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  IAggregationResultSet sourceAggrResultSet=resultSet[0];
  aggregations=new AggregationDefinition[1];
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  Context context=Context.enter();
  ScriptableObject scope=context.initStandardObjects();
  ScriptContext cx=new ScriptContext();
  IAggregationResultSet ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),new Double(21));
  aggregations=new AggregationDefinition[1];
  sortType=new int[1];
  sortType[0]=IDimensionSortDefn.SORT_ASC;
  levelsForFilter=new DimLevel[]{dimLevel11};
  funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_SUM_FUNC);
  aggregations[0]=new AggregationDefinition(levelsForFilter,sortType,funcitons);
  ars=new AggregationResultSetWithOneMoreDummyAggr(sourceAggrResultSet,""String_Node_Str"",new ScriptExpression(""String_Node_Str""),scope,cx);
  resultSet=AggregationHelper.execute(ars,aggregations,new StopSign());
  assertEquals(resultSet[0].length(),3);
  assertEquals(resultSet[0].getAggregationDataType(0),DataType.DOUBLE_TYPE);
  assertEquals(resultSet[0].getLevelIndex(dimLevel11),0);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(1));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(6));
  resultSet[0].seek(1);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(2));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(22));
  resultSet[0].seek(2);
  assertEquals(resultSet[0].getLevelKeyValue(0)[0],new Integer(3));
  assertEquals(resultSet[0].getAggregationValue(0),new Double(38));
  closeResultSets(resultSet);
  Context.exit();
  cx.close();
}",0.9996172004593594
67280,"private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}","private void testMaxAggregation(IDocumentManager documentManager) throws IOException, BirtException, DataException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L1Col);
  iterator.setLevelMember(1,FactTable2.L2Col);
  iterator.setLevelMember(2,FactTable2.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable2.L3Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable2.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable2.L3Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),12);
  FactTable2 factTable2=new FactTable2();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable2,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  DimensionResultIterator[] dimesionResultSets=new DimensionResultIterator[1];
  IDiskArray positionArray=dimensions[0].findAll();
  dimesionResultSets[0]=new DimensionResultIterator(dimensions[0],positionArray,new StopSign());
  String[] dimensionNamesForFilter=new String[1];
  dimensionNamesForFilter[0]=""String_Node_Str"";
  IDiskArray[] positionsForFilter=new IDiskArray[1];
  positionsForFilter[0]=positionArray;
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNamesForFilter,positionsForFilter,new StopSign());
  assertTrue(facttableRowIterator != null);
  AggregationDefinition[] aggregations=new AggregationDefinition[1];
  AggregationFunctionDefinition[] funcitons=new AggregationFunctionDefinition[1];
  funcitons[0]=new AggregationFunctionDefinition(""String_Node_Str"",""String_Node_Str"",IBuildInAggregation.TOTAL_MAX_FUNC);
  aggregations[0]=new AggregationDefinition(null,null,funcitons);
  IDataSet4Aggregation dataSet4Aggregation=new DataSetFromOriginalCube(facttableRowIterator,dimesionResultSets,null);
  AggregationExecutor aggregationCalculatorExecutor=new AggregationExecutor(null,dataSet4Aggregation,aggregations);
  IAggregationResultSet[] resultSet=aggregationCalculatorExecutor.execute(new StopSign());
  assertEquals(resultSet[0].length(),1);
  resultSet[0].seek(0);
  assertEquals(resultSet[0].getAggregationValue(0),11);
  closeResultSets(resultSet);
}",0.9993212669683258
67281,"private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign());
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),3);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}","private void testFactTableSaveAndLoad(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  String[] levelNames=new String[3];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,FactTable1.L1Col);
  iterator.setLevelMember(1,FactTable1.L2Col);
  iterator.setLevelMember(2,FactTable1.L3Col);
  ILevelDefn[] levelDefs=new ILevelDefn[3];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[0].length(),FactTable1.L1Col.length);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(FactTable1.L1Col));
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[1].length(),3);
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  int[] lL1Col={1,2,3};
  iterator.setLevelMember(0,lL1Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  assertEquals(dimensions[2].length(),3);
  FactTable1 factTable1=new FactTable1();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTable1,dimensions,measureColumnName,new StopSign(),false);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),FactTable1.L1Col.length);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),3);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[3];
  dimensionNames[0]=""String_Node_Str"";
  dimensionNames[1]=""String_Node_Str"";
  dimensionNames[2]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[3];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(10));
  dimensionPosition[0].add(new Integer(11));
  dimensionPosition[1]=new BufferedPrimitiveDiskArray();
  dimensionPosition[1].add(new Integer(1));
  dimensionPosition[1].add(new Integer(2));
  dimensionPosition[2]=new BufferedPrimitiveDiskArray();
  dimensionPosition[2].add(new Integer(1));
  dimensionPosition[2].add(new Integer(2));
  dimensionPosition[2].add(new Integer(3));
  FactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(10,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(10),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(10),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(11,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(2,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(11),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(11),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
}",0.99943661971831
67282,"private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
  facttableRowIterator.close();
}","private void testFactTableSaveAndLoad1(IDocumentManager documentManager) throws IOException, BirtException {
  Dimension[] dimensions=new Dimension[3];
  ILevelDefn[] levelDefs=new ILevelDefn[1];
  String[] levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension1Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension2Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,distinct(LevelsAndFactTableDataset.dimension3Col));
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[2]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[2].getHierarchy();
  assertEquals(hierarchy.getName(),""String_Node_Str"");
  IDatasetIterator factTableIterator=new LevelsAndFactTableDataset();
  String[] measureColumnName=new String[2];
  measureColumnName[0]=""String_Node_Str"";
  measureColumnName[1]=""String_Node_Str"";
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  FactTable factTable=factTableConstructor.saveFactTable(NamingUtil.getFactTableName(""String_Node_Str""),CubeUtility.getKeyColNames(dimensions),CubeUtility.getKeyColNames(dimensions),factTableIterator,dimensions,measureColumnName,new StopSign(),false);
  assertEquals(factTable.getSegmentCount(),1);
  factTable=factTableConstructor.load(NamingUtil.getFactTableName(""String_Node_Str""),new StopSign());
  assertEquals(factTable.getSegmentCount(),1);
  assertEquals(factTable.getDimensionInfo()[0].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[0].getDimensionLength(),3);
  assertEquals(factTable.getDimensionInfo()[1].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[1].getDimensionLength(),7);
  assertEquals(factTable.getDimensionInfo()[2].getDimensionName(),""String_Node_Str"");
  assertEquals(factTable.getDimensionInfo()[2].getDimensionLength(),14);
  assertEquals(factTable.getMeasureInfo()[0].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[0].getDataType(),DataType.INTEGER_TYPE);
  assertEquals(factTable.getMeasureInfo()[1].getMeasureName(),""String_Node_Str"");
  assertEquals(factTable.getMeasureInfo()[1].getDataType(),DataType.DOUBLE_TYPE);
  String[] dimensionNames=new String[1];
  dimensionNames[0]=""String_Node_Str"";
  IDiskArray[] dimensionPosition=new IDiskArray[1];
  dimensionPosition[0]=new BufferedPrimitiveDiskArray();
  dimensionPosition[0].add(new Integer(1));
  dimensionPosition[0].add(new Integer(2));
  IFactTableRowIterator facttableRowIterator=new FactTableRowIterator(factTable,dimensionNames,dimensionPosition,new StopSign());
  facttableRowIterator=new FactTableRowIteratorWithFilter(dimensions,facttableRowIterator,new StopSign());
  assertTrue(facttableRowIterator != null);
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(3,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(121),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(121),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(0,facttableRowIterator.getDimensionPosition(0));
  assertEquals(1,facttableRowIterator.getDimensionPosition(1));
  assertEquals(4,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(122),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(122),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(5,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(211),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(211),facttableRowIterator.getMeasure(1));
  assertTrue(facttableRowIterator.next());
  assertEquals(1,facttableRowIterator.getDimensionPosition(0));
  assertEquals(2,facttableRowIterator.getDimensionPosition(1));
  assertEquals(6,facttableRowIterator.getDimensionPosition(2));
  assertEquals(new Integer(212),facttableRowIterator.getMeasure(0));
  assertEquals(new Double(212),facttableRowIterator.getMeasure(1));
  assertFalse(facttableRowIterator.next());
  facttableRowIterator.close();
}",0.9994468006638392
67283,"/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,cacheSize,stopSign);
  cube.close();
  documentManager.flush();
}","/** 
 * @param name
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimensions
 * @param factTable
 * @param measureColumns
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void createCube(String name,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimensions,IDatasetIterator factTable,String[] measureColumns,long cacheSize,StopSign stopSign,boolean suppressInvalidFacttableRow) throws IOException, BirtException {
  if (dimensions.length == 0) {
    throw new DataException(ResourceConstants.MISSING_DIMENSION_IN_CUBE,name);
  }
  Cube cube=new Cube(name,documentManager);
  cube.create(factTableJointColumnNames,DimJointColumnNames,dimensions,factTable,measureColumns,cacheSize,stopSign,suppressInvalidFacttableRow);
  cube.close();
  documentManager.flush();
}",0.9611178614823817
67284,"/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTableConstructor.setMemoryCacheSize(cacheSize);
  factTable=factTableConstructor.saveFactTable(name,factTableJointColumnNames,DimJointColumnNames,iterator,tDimensions,measureColumnName,stopSign);
  documentObject.close();
  documentManager.flush();
}","/** 
 * @param factTableJointColumnNames
 * @param DimJointColumnNames
 * @param dimension
 * @param iterator
 * @param measureColumnName
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
public void create(String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDimension[] dimension,IDatasetIterator iterator,String[] measureColumnName,long cacheSize,StopSign stopSign,boolean suppressInvalidFacttableRow) throws IOException, BirtException {
  IDocumentObject documentObject=documentManager.createDocumentObject(NamingUtil.getCubeDocName(name));
  documentObject.writeString(name);
  documentObject.writeInt(dimension.length);
  for (int i=0; i < dimension.length; i++) {
    documentObject.writeString(dimension[i].getName());
  }
  this.dimension=dimension;
  Dimension[] tDimensions=new Dimension[dimension.length];
  for (int i=0; i < tDimensions.length; i++) {
    tDimensions[i]=(Dimension)dimension[i];
  }
  FactTableAccessor factTableConstructor=new FactTableAccessor(documentManager);
  factTableConstructor.setMemoryCacheSize(cacheSize);
  factTable=factTableConstructor.saveFactTable(name,factTableJointColumnNames,DimJointColumnNames,iterator,tDimensions,measureColumnName,stopSign,suppressInvalidFacttableRow);
  documentObject.close();
  documentManager.flush();
}",0.9750584567420107
67285,"/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,factTableJointColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(DimJointColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows(stopSign)));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper saveHelper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        String[] args=new String[4];
        args[0]=factTableName;
        args[1]=Arrays.toString(factTableJointColumnNames[i]);
        args[2]=currentRow.getDimensionKeys()[i].toString();
        args[3]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    saveHelper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].getDataType(),currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  saveHelper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}","/** 
 * @param factTableName
 * @param iterator
 * @param dimensions
 * @param measureColumnName
 * @param stopSign
 * @return
 * @throws BirtException
 * @throws IOException
 */
public FactTable saveFactTable(String factTableName,String[][] factTableJointColumnNames,String[][] DimJointColumnNames,IDatasetIterator iterator,Dimension[] dimensions,String[] measureColumnName,StopSign stopSign,boolean suppressInvalidFacttableRow) throws BirtException, IOException {
  DiskSortedStack sortedFactTableRows=getSortedFactTableRows(iterator,factTableJointColumnNames,measureColumnName,stopSign);
  int segmentCount=getSegmentCount(sortedFactTableRows.size());
  DimensionInfo[] dimensionInfo=getDimensionInfo(dimensions);
  MeasureInfo[] measureInfo=getMeasureInfo(iterator,measureColumnName);
  saveFactTableMetadata(factTableName,dimensionInfo,measureInfo,segmentCount);
  DimensionDivision[] subDimensions=calculateDimensionDivision(getDimensionMemberCount(dimensions),segmentCount);
  int[][][] columnIndex=getColumnIndex(DimJointColumnNames,dimensions);
  DimensionPositionSeeker[] dimensionSeekers=new DimensionPositionSeeker[dimensions.length];
  for (int i=0; i < dimensionSeekers.length; i++) {
    dimensionSeekers[i]=new DimensionPositionSeeker(getDimCombinatedKey(columnIndex[i],dimensions[i].getAllRows(stopSign)));
  }
  FactTableRow currentRow=null;
  FactTableRow lastRow=null;
  int[] dimensionPosition=new int[dimensions.length];
  DocumentObjectCache documentObjectManager=new DocumentObjectCache(documentManager);
  CombinedPositionContructor combinedPositionCalculator=new CombinedPositionContructor(subDimensions);
  FTSUNameSaveHelper saveHelper=new FTSUNameSaveHelper(documentManager,factTableName);
  Object popObject=sortedFactTableRows.pop();
  start:   while (popObject != null && !stopSign.isStopped()) {
    currentRow=(FactTableRow)popObject;
    if (lastRow != null && currentRow.equals(lastRow)) {
      throw new DataException(ResourceConstants.FACTTABLE_ROW_NOT_DISTINCT,currentRow.toString());
    }
    for (int i=0; i < dimensionPosition.length; i++) {
      dimensionPosition[i]=dimensionSeekers[i].find(currentRow.getDimensionKeys()[i]);
      if (dimensionPosition[i] < 0) {
        if (suppressInvalidFacttableRow) {
          popObject=sortedFactTableRows.pop();
          lastRow=currentRow;
          continue start;
        }
        String[] args=new String[4];
        args[0]=factTableName;
        args[1]=Arrays.toString(factTableJointColumnNames[i]);
        args[2]=currentRow.getDimensionKeys()[i].toString();
        args[3]=dimensions[i].getName();
        throw new DataException(ResourceConstants.INVALID_DIMENSIONPOSITION_OF_FACTTABLEROW,args);
      }
    }
    int[] subDimensionIndex=getSubDimensionIndex(dimensionPosition,subDimensions);
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTableName),subDimensionIndex);
    saveHelper.add(FTSUDocName);
    IDocumentObject documentObject=documentObjectManager.getIDocumentObject(FTSUDocName);
    documentObject.writeBytes(new Bytes(combinedPositionCalculator.calculateCombinedPosition(subDimensionIndex,dimensionPosition).toByteArray()));
    for (int i=0; i < measureInfo.length; i++) {
      DocumentObjectUtil.writeValue(documentObject,measureInfo[i].getDataType(),currentRow.getMeasures()[i]);
    }
    popObject=sortedFactTableRows.pop();
    lastRow=currentRow;
  }
  saveHelper.save();
  documentObjectManager.closeAll();
  documentManager.flush();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentCount,subDimensions);
}",0.9715257118572036
67286,"/** 
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,Object[] ops,CompareHints compareHints) throws DataException {
  ExprTextAndValue[] opTextAndValue=new ExprTextAndValue[ops.length];
  for (int i=0; i < ops.length; i++) {
    opTextAndValue[i]=createExprTextAndValueInstance(ops[i]);
  }
  Object resultObject=obj;
  Object[] resultOp=new Object[ops.length];
  for (int i=0; i < ops.length; i++) {
    resultOp[i]=opTextAndValue[i].value;
  }
  Object[] obArray=MiscUtil.isComparable(obj,operator,opTextAndValue);
  if (obArray != null) {
    resultObject=obArray[0];
    for (int i=1; i < obArray.length; i++) {
      resultOp[i - 1]=obArray[i];
    }
  }
  if (logger.isLoggable(Level.FINER)) {
    String logStr=""String_Node_Str"";
    for (int i=0; i < ops.length; i++) {
      logStr+=resultOp[i] == null ? null : (""String_Node_Str"" + i + ""String_Node_Str""+ LogUtil.toString(resultOp[i]));
    }
    logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ logStr);
  }
  boolean result=false;
  if (compareHints != null && IBaseDataSetDesign.NULLS_ORDERING_EXCLUDE_NULLS.equals(compareHints.getNullType())) {
    if (resultObject == null)     return false;
  }
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp[0],compareHints) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp[0],compareHints) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp[0],compareHints) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp[0],compareHints) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp[0],compareHints) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp[0],compareHints) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp[0],resultOp[1],compareHints);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp[0],resultOp[1],compareHints));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_LIKE:
result=!like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_TOP_N:
case IConditionalExpression.OP_BOTTOM_N:
case IConditionalExpression.OP_TOP_PERCENT:
case IConditionalExpression.OP_BOTTOM_PERCENT:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_MATCH:
result=!match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_IN:
result=in(resultObject,resultOp);
break;
case IConditionalExpression.OP_NOT_IN:
result=!in(resultObject,resultOp);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}","/** 
 * @param obj
 * @param operator
 * @param op1
 * @param op2
 * @return A Boolean result
 * @throws DataException
 */
public static Object evalConditionalExpr(Object obj,int operator,Object[] ops,CompareHints compareHints) throws DataException {
  ExprTextAndValue[] opTextAndValue=new ExprTextAndValue[ops.length];
  for (int i=0; i < ops.length; i++) {
    opTextAndValue[i]=createExprTextAndValueInstance(ops[i]);
  }
  Object resultObject=obj;
  Object[] resultOp=new Object[ops.length];
  for (int i=0; i < ops.length; i++) {
    resultOp[i]=opTextAndValue[i].value;
  }
  Object[] obArray=MiscUtil.isComparable(obj,operator,opTextAndValue);
  if (obArray != null) {
    resultObject=obArray[0];
    for (int i=1; i < obArray.length; i++) {
      resultOp[i - 1]=obArray[i];
    }
  }
  if (logger.isLoggable(Level.FINER)) {
    String logStr=""String_Node_Str"";
    for (int i=0; i < ops.length; i++) {
      logStr+=resultOp[i] == null ? null : (""String_Node_Str"" + i + ""String_Node_Str""+ LogUtil.toString(resultOp[i]));
    }
    logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(resultObject) + ""String_Node_Str""+ operator+ logStr);
  }
  boolean result=false;
  if (compareHints != null && IBaseDataSetDesign.NULLS_ORDERING_EXCLUDE_NULLS.equals(compareHints.getNullType())) {
    if (resultObject == null)     return false;
  }
switch (operator) {
case IConditionalExpression.OP_EQ:
    result=compare(resultObject,resultOp[0],compareHints) == 0;
  break;
case IConditionalExpression.OP_NE:
result=compare(resultObject,resultOp[0],compareHints) != 0;
break;
case IConditionalExpression.OP_LT:
result=compare(resultObject,resultOp[0],compareHints) < 0;
break;
case IConditionalExpression.OP_LE:
result=compare(resultObject,resultOp[0],compareHints) <= 0;
break;
case IConditionalExpression.OP_GE:
result=compare(resultObject,resultOp[0],compareHints) >= 0;
break;
case IConditionalExpression.OP_GT:
result=compare(resultObject,resultOp[0],compareHints) > 0;
break;
case IConditionalExpression.OP_BETWEEN:
result=between(resultObject,resultOp[0],resultOp[1],compareHints);
break;
case IConditionalExpression.OP_NOT_BETWEEN:
result=!(between(resultObject,resultOp[0],resultOp[1],compareHints));
break;
case IConditionalExpression.OP_NULL:
result=resultObject == null;
break;
case IConditionalExpression.OP_NOT_NULL:
result=resultObject != null;
break;
case IConditionalExpression.OP_TRUE:
result=isTrueOrFalse(resultObject,Boolean.TRUE);
break;
case IConditionalExpression.OP_FALSE:
result=isTrueOrFalse(resultObject,Boolean.FALSE);
break;
case IConditionalExpression.OP_LIKE:
result=like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_LIKE:
result=!like(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_TOP_N:
case IConditionalExpression.OP_BOTTOM_N:
case IConditionalExpression.OP_TOP_PERCENT:
case IConditionalExpression.OP_BOTTOM_PERCENT:
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,""String_Node_Str"");
case IConditionalExpression.OP_MATCH:
result=match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_NOT_MATCH:
result=!match(resultObject,resultOp[0]);
break;
case IConditionalExpression.OP_IN:
result=in(resultObject,resultOp);
break;
case IConditionalExpression.OP_NOT_IN:
result=!in(resultObject,resultOp);
break;
case IConditionalExpression.OP_JOINT:
result=joint(resultObject,resultOp[0]);
break;
default :
throw new DataException(ResourceConstants.UNSUPPORTTED_COND_OPERATOR,new Integer(operator));
}
logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",new Boolean(result));
return new Boolean(result);
}",0.9882839421088904
67287,"/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle,String cubeName) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=sessionImpl.createQuery(sessionImpl,hierHandle,metaList,cubeName);
  return new DataSetIterator(this.sessionImpl,defn,metaList,appContext);
}","/** 
 * @param appContext
 * @param hierHandle
 * @return
 * @throws AdapterException
 * @throws BirtException
 */
private DataSetIterator createDataSetIterator(Map appContext,TabularHierarchyHandle hierHandle,String cubeName) throws AdapterException, BirtException {
  List<ColumnMeta> metaList=new ArrayList<ColumnMeta>();
  IQueryDefinition defn=sessionImpl.createQuery(sessionImpl,hierHandle,metaList,cubeName);
  return new DataSetIterator(this.sessionImpl,defn,metaList,appContext,null,null);
}",0.98989898989899
67288,"public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,ScriptContext context) throws AdapterException {
  try {
    IDataScriptEngine engine=(IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME);
    Scriptable scope=engine.getJSScope(context);
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      String queryName=((IPreparedCubeQuery)query).getCubeQueryDefinition().getName();
      if (this.cubeHandleMap.get(queryName) != null) {
        this.materializeCube((CubeHandle)this.cubeHandleMap.get(queryName),this.sessionContext.getAppContext());
        this.cubeHandleMap.remove(queryName);
      }
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","public IBaseQueryResults execute(IBasePreparedQuery query,IBaseQueryResults outerResults,ScriptContext context) throws AdapterException {
  try {
    IDataScriptEngine engine=(IDataScriptEngine)context.getScriptEngine(IDataScriptEngine.ENGINE_NAME);
    Scriptable scope=engine.getJSScope(context);
    if (query instanceof IPreparedQuery) {
      return ((IPreparedQuery)query).execute(outerResults,scope);
    }
 else     if (query instanceof IPreparedCubeQuery) {
      String queryName=((IPreparedCubeQuery)query).getCubeQueryDefinition().getName();
      if (this.cubeHandleMap.get(queryName) != null) {
        this.materializeCube((CubeHandle)this.cubeHandleMap.get(queryName),this.sessionContext.getAppContext(),false);
        this.cubeHandleMap.remove(queryName);
      }
      return ((IPreparedCubeQuery)query).execute(outerResults,scope);
    }
    return null;
  }
 catch (  BirtException e) {
    throw new AdapterException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.996935648621042
67289,"/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
void materializeCube(CubeHandle cubeHandle,Map appContext) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    if (appContext == null)     appContext=sessionContext.getAppContext();
    String memoryUsage=(String)(appContext.get(DataEngine.MEMORY_USAGE));
    MemoryUsageSetting.setMemoryUsage(memoryUsage);
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      CubeMaterializer cm=getCubeMaterializer(size);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      CubeMaterializer cm=getCubeMaterializer(0);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext);
      cm.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),this.dataEngine.getSession().getStopSign());
    }
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}","/** 
 * @param cubeHandle
 * @param appContext
 * @param stopSign
 * @throws BirtException
 */
void materializeCube(CubeHandle cubeHandle,Map appContext,boolean isTransient) throws BirtException {
  int mode=this.sessionContext.getDataEngineContext().getMode();
  try {
    if (appContext == null)     appContext=sessionContext.getAppContext();
    String memoryUsage=(String)(appContext.get(DataEngine.MEMORY_USAGE));
    MemoryUsageSetting.setMemoryUsage(memoryUsage);
    if (mode == DataEngineContext.DIRECT_PRESENTATION) {
      int size=0;
      if (appContext != null) {
        Integer value=DataTypeUtil.toInteger(appContext.get(DataEngine.IN_MEMORY_CUBE_SIZE));
        if (value != null && value.intValue() > 0) {
          size=value.intValue();
        }
      }
      CubeMaterializer cm=getCubeMaterializer(size);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext,isTransient);
    }
 else     if (mode == DataEngineContext.MODE_GENERATION) {
      CubeMaterializer cm=getCubeMaterializer(0);
      createCube((TabularCubeHandle)cubeHandle,cm,appContext,isTransient);
      cm.saveCubeToReportDocument(cubeHandle.getQualifiedName(),this.sessionContext.getDocumentWriter(),this.dataEngine.getSession().getStopSign());
    }
  }
 catch (  Exception e) {
    throw new DataException(ResourceConstants.EXCEPTION_ERROR,e);
  }
}",0.9834212509419744
67290,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext,boolean isTransient) throws BirtException {
  SecurityListener sl=new SecurityListener(this,isTransient);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext,null,null),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign(),isTransient);
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  sl.end();
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.993801652892562
67291,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext,sl,dim.getName());
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9915584415584416
67292,"/** 
 * Create DataSetIterator for fact table.
 * @param session
 * @param cubeHandle
 * @throws BirtException
 */
public DataSetIterator(DataRequestSessionImpl session,IQueryDefinition query,List<ColumnMeta> meta,Map appContext) throws BirtException {
  this.calendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.calendar.setTimeZone(session.getDataSessionContext().getDataEngineContext().getTimeZone());
  this.calendar.clear();
  this.calendar.set(0,0,1,0,0,0);
  this.nullTime=this.calendar.getTimeInMillis();
  this.calendar.clear();
  executeQuery(session,query,appContext);
  this.metadata=new ResultMeta(meta);
}","/** 
 * Create DataSetIterator for fact table.
 * @param session
 * @param cubeHandle
 * @throws BirtException
 */
public DataSetIterator(DataRequestSessionImpl session,IQueryDefinition query,List<ColumnMeta> meta,Map appContext,SecurityListener listener,String dimensionName) throws BirtException {
  this.calendar=Calendar.getInstance(session.getDataSessionContext().getDataEngineContext().getLocale());
  this.calendar.setTimeZone(session.getDataSessionContext().getDataEngineContext().getTimeZone());
  this.calendar.clear();
  this.calendar.set(0,0,1,0,0,0);
  this.nullTime=this.calendar.getTimeInMillis();
  this.calendar.clear();
  this.securityListener=listener;
  this.dimName=dimensionName;
  if (this.securityListener != null) {
    List<IFilterDefinition> additionalFilters4TransientProcessing=this.securityListener.populateSecurityFilter(this.dimName,appContext);
    if (additionalFilters4TransientProcessing != null)     query.getFilters().addAll(additionalFilters4TransientProcessing);
  }
  executeQuery(session,query,appContext);
  this.metadata=new ResultMeta(meta);
}",0.7636363636363637
67293,"protected boolean calculateEnabled(){
  List selected=getSelectedObjects();
  if (selected.size() != 1 || !(selected.get(0) instanceof EditPart)) {
    return false;
  }
  EditPart part=(EditPart)selected.get(0);
  Object model=part.getModel();
  if (!(model instanceof ReportItemHandle) && model instanceof IAdaptable) {
    model=((IAdaptable)model).getAdapter(DesignElementHandle.class);
  }
  if (!(model instanceof ReportItemHandle) || DEUtil.isReferenceElement((ReportItemHandle)model)) {
    return false;
  }
  Object[] objs=ElementAdapterManager.getAdapters(model,IReportItemViewProvider.class);
  if (objs == null || objs.length > 1) {
    return false;
  }
  if (((ReportItemHandle)model).getViews().size() != 0) {
    return false;
  }
  return true;
}","protected boolean calculateEnabled(){
  List selected=getSelectedObjects();
  if (selected.size() != 1 || !(selected.get(0) instanceof EditPart)) {
    return false;
  }
  EditPart part=(EditPart)selected.get(0);
  Object model=part.getModel();
  if (!(model instanceof ReportItemHandle) && model instanceof IAdaptable) {
    model=((IAdaptable)model).getAdapter(DesignElementHandle.class);
  }
  if (!(model instanceof ReportItemHandle) || DEUtil.isReferenceElement((ReportItemHandle)model)) {
    return false;
  }
  Object[] objs=ElementAdapterManager.getAdapters(model,IReportItemViewProvider.class);
  if (objs == null || objs.length > 1) {
    return false;
  }
  if (((ReportItemHandle)model).getViews().size() != 0 || !((ReportItemHandle)model).canAddView(""String_Node_Str"")) {
    return false;
  }
  return true;
}",0.9622166246851386
67294,"private Element createEmbeddeImage(BufferedImage img){
  if (img == null) {
    return null;
  }
  int width=img.getWidth();
  int height=img.getHeight();
  ImageWriter iw=ImageWriterFactory.instance().createByFormatName(""String_Node_Str"");
  ByteArrayOutputStream baos=new ByteArrayOutputStream(8192 * 2);
  String sUrl=null;
  try {
    final ImageOutputStream ios=SecurityUtil.newImageOutputStream(baos);
    ImageWriteParam iwp=iw.getDefaultWriteParam();
    iw.setOutput(ios);
    iw.write((IIOMetadata)null,new IIOImage(img,null,null),iwp);
    img.flush();
    ios.close();
    sUrl=SVGImage.BASE64 + new String(Base64.encodeBase64(baos.toByteArray()));
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    iw.dispose();
  }
  Element elem=dom.createElement(""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"" + img.hashCode());
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",Integer.toString(width));
  elem.setAttribute(""String_Node_Str"",Integer.toString(height));
  elem.setAttribute(""String_Node_Str"",sUrl);
  return elem;
}","private Element createEmbeddeImage(BufferedImage img){
  if (img == null) {
    return null;
  }
  int width=img.getWidth();
  int height=img.getHeight();
  ImageWriter iw=ImageWriterFactory.instance().createByFormatName(""String_Node_Str"");
  ByteArrayOutputStream baos=new ByteArrayOutputStream(8192 * 2);
  String sUrl=null;
  try {
    final ImageOutputStream ios=SecurityUtil.newImageOutputStream(baos);
    ImageWriteParam iwp=iw.getDefaultWriteParam();
    iw.setOutput(ios);
    iw.write((IIOMetadata)null,new IIOImage(img,null,null),iwp);
    img.flush();
    ios.close();
    sUrl=SVGImage.BASE64 + new String(Base64.encodeBase64(baos.toByteArray()));
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    iw.dispose();
  }
  Element elemG=dom.createElement(""String_Node_Str"");
  elemG.setAttribute(""String_Node_Str"",""String_Node_Str"" + img.hashCode());
  Element elem=dom.createElement(""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",""String_Node_Str"");
  elem.setAttribute(""String_Node_Str"",Integer.toString(width));
  elem.setAttribute(""String_Node_Str"",Integer.toString(height));
  elem.setAttribute(""String_Node_Str"",sUrl);
  elemG.appendChild(elem);
  return elemG;
}",0.9570903146710258
67295,"/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
 else       if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}","/** 
 * Populate the dimension.
 * @param cubeMaterializer
 * @param dim
 * @param stopSign
 * @return
 * @throws AdapterException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private IDimension populateDimension(CubeMaterializer cubeMaterializer,DimensionHandle dim,TabularCubeHandle cubeHandle,Map appContext,Map<ReportElementHandle,QueryDefinition> queryMap,Map<ReportElementHandle,List<ColumnMeta>> metaMap,SecurityListener sl) throws AdapterException {
  List hiers=dim.getContents(DimensionHandle.HIERARCHIES_PROP);
  List iHiers=new ArrayList();
  for (int j=0; j < hiers.size(); j++) {
    TabularHierarchyHandle hierhandle=(TabularHierarchyHandle)hiers.get(0);
    List levels=hierhandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    List<ILevelDefn> levelInHier=new ArrayList<ILevelDefn>();
    List<String> leafLevelKeyColumn=new ArrayList<String>();
    Set<String> columnNamesForLevels=new HashSet<String>();
    for (int k=0; k < levels.size(); k++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(k);
      columnNamesForLevels.add(level.getColumnName());
      List levelAttrs=new ArrayList();
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        levelAttrs.add(OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName()));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        levelAttrs.add(OlapExpressionUtil.getDisplayColumnName(level.getName()));
      }
      leafLevelKeyColumn.add(level.getName());
      levelInHier.add(CubeElementFactory.createLevelDefinition(level.getName(),new String[]{level.getName()},this.toStringArray(levelAttrs)));
    }
    String[] jointHierarchyKeys=getJointHierarchyKeys(cubeHandle,hierhandle);
    if (!cubeHandle.autoPrimaryKey()) {
      for (      String jointKey : jointHierarchyKeys) {
        if (!columnNamesForLevels.contains(jointKey)) {
          throw new AdapterException(ResourceConstants.CUBE_JOINT_COLUMN_NOT_IN_LEVELS,new String[]{jointKey,dim.getName()});
        }
      }
    }
    if (levelInHier.size() >= 1) {
      if (cubeHandle.autoPrimaryKey() && jointHierarchyKeys.length > 0) {
        if (!Arrays.deepEquals(jointHierarchyKeys,new String[]{((TabularLevelHandle)levels.get(levels.size() - 1)).getColumnName()})) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",getDummyLevelNamesForJointHierarchyKeys(jointHierarchyKeys),new String[0]));
        }
 else         if (levelInHier.size() > 1 && isDateTimeDimension(hierhandle)) {
          levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
        }
      }
 else       if (levelInHier.size() > 1) {
        levelInHier.add(CubeElementFactory.createLevelDefinition(""String_Node_Str"",leafLevelKeyColumn.toArray(new String[0]),new String[0]));
      }
    }
    try {
      sl.process(dim);
      Object originalMemCache=null;
      if (!(cubeHandle.getDataSet().equals(hierhandle.getDataSet()) || hierhandle.getDataSet() == null)) {
        originalMemCache=appContext.remove(DataEngine.MEMORY_DATA_SET_CACHE);
      }
      IDatasetIterator valueIt=null;
      String[] timeType=getTimeLevelType(hierhandle);
      for (int i=0; i < timeType.length; i++) {
        levelInHier.get(i).setTimeType(timeType[i]);
      }
      if (!CubeHandleUtil.isTimeDimension(dim)) {
        valueIt=new DataSetIterator(this,queryMap.get(hierhandle),metaMap.get(hierhandle),appContext);
        ((DataSetIterator)valueIt).initSecurityListenerAndDimension(dim.getName(),sl);
      }
 else {
        valueIt=new TimeDimensionDatasetIterator(this,CubeHandleUtil.getStartTime(dim),CubeHandleUtil.getEndTime(dim),getFieldName(hierhandle),timeType);
      }
      iHiers.add(cubeMaterializer.createHierarchy(dim.getName(),hierhandle.getName(),valueIt,levelInHier.toArray(new ILevelDefn[0]),dataEngine.getSession().getStopSign()));
      if (originalMemCache != null) {
        appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,originalMemCache);
      }
    }
 catch (    Exception e) {
      throw new AdapterException(ResourceConstants.CUBE_HIERARCHY_CREATION_ERROR,e,dim.getName() + ""String_Node_Str"" + hierhandle.getName());
    }
  }
  try {
    return cubeMaterializer.createDimension(dim.getName(),(IHierarchy)iHiers.get(0));
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_DIMENSION_CREATION_ERROR,e,dim.getName());
  }
}",0.9045571797076526
67296,"public String getKeyValue() throws DataException {
  try {
    if (keyValue != null) {
      if (keyValue instanceof String)       return (String)this.keyValue;
      if (keyValue instanceof SoftReference) {
        String result=((SoftReference<String>)keyValue).get();
        if (result != null)         return result;
      }
    }
    if (keyStream == null)     return null;
    this.keyStream.seek(this.keyOffset);
    this.keyValue=new SoftReference<String>(IOUtil.readString(new DataInputStream(this.keyStream)));
    return ((SoftReference<String>)this.keyValue).get();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public String getKeyValue() throws DataException {
  try {
    if (keyValue != null) {
      if (keyValue instanceof String)       return (String)this.keyValue;
      if (keyValue instanceof SoftReference) {
        String result=((SoftReference<String>)keyValue).get();
        if (result != null)         return result;
      }
    }
    if (keyStream == null)     return null;
synchronized (this.keyStream) {
      if (keyValue != null) {
        if (keyValue instanceof String)         return (String)this.keyValue;
        if (keyValue instanceof SoftReference) {
          String result=((SoftReference<String>)keyValue).get();
          if (result != null)           return result;
        }
      }
      this.keyStream.seek(this.keyOffset);
      this.keyValue=new SoftReference<String>(IOUtil.readString(new DataInputStream(this.keyStream)));
    }
    return ((SoftReference<String>)this.keyValue).get();
  }
 catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.7945205479452054
67297,"private void setEnabledForButtons(){
  if (isCubeMode()) {
    boolean inheritXTab=getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_CUBE);
    if (inheritXTab) {
      btnFilters.setEnabled(false);
      btnBinding.setEnabled(false);
    }
 else {
      boolean disabled=getDataServiceProvider().isInXTabAggrCell() || getDataServiceProvider().isInXTabMeasureCell();
      btnFilters.setEnabled(!disabled && !getDataServiceProvider().isInheritColumnsGroups());
      btnBinding.setEnabled(!getDataServiceProvider().isInheritColumnsGroups() && getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding());
    }
    btnParameters.setEnabled(false);
  }
 else {
    btnFilters.setEnabled(hasDataSet() && !getDataServiceProvider().isInheritColumnsGroups());
    btnParameters.setEnabled(getDataServiceProvider().getDataSet() != null && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && !getDataServiceProvider().isInheritColumnsGroups() && (getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding()));
  }
}","private void setEnabledForButtons(){
  if (isCubeMode()) {
    boolean inheritXTab=getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_CUBE);
    if (inheritXTab) {
      btnFilters.setEnabled(false);
      btnBinding.setEnabled(false);
    }
 else {
      boolean disabled=getDataServiceProvider().isInXTabAggrCell() || getDataServiceProvider().isInXTabMeasureCell();
      btnFilters.setEnabled(!disabled && (getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE) || !getDataServiceProvider().isInheritColumnsGroups()));
      btnBinding.setEnabled((getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE) || !getDataServiceProvider().isInheritColumnsGroups()) && getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding());
    }
    btnParameters.setEnabled(false);
  }
 else {
    btnFilters.setEnabled(hasDataSet() && !getDataServiceProvider().isInheritColumnsGroups());
    btnParameters.setEnabled(getDataServiceProvider().getDataSet() != null && getDataServiceProvider().isInvokingSupported());
    btnBinding.setEnabled(hasDataSet() && !getDataServiceProvider().isInheritColumnsGroups() && (getDataServiceProvider().isInvokingSupported() || getDataServiceProvider().isSharedBinding()));
  }
}",0.94
67298,"public static void completeParamDefalutValues(IEngineTask engineTask,ModuleHandle moduleHandle){
  List paramsList=moduleHandle.getAllParameters();
  for (int i=0; i < paramsList.size(); i++) {
    Object parameterObject=paramsList.get(i);
    if (parameterObject instanceof ScalarParameterHandle) {
      ScalarParameterHandle parameterHandle=(ScalarParameterHandle)parameterObject;
      if (parameterHandle.getDefaultValueList() == null || parameterHandle.getDefaultValueList().size() == 0) {
        engineTask.setParameter(parameterHandle.getName(),getDummyDefaultValue(parameterHandle),parameterHandle.getDisplayName());
      }
    }
 else     if (parameterObject instanceof DynamicFilterParameterHandle) {
      List defaultValue=((DynamicFilterParameterHandle)parameterObject).getDefaultValueList();
      if (defaultValue == null || defaultValue.size() == 0) {
        engineTask.setParameter(((DynamicFilterParameterHandle)parameterObject).getName(),""String_Node_Str"",((DynamicFilterParameterHandle)parameterObject).getDisplayName());
      }
    }
  }
}","public static void completeParamDefalutValues(IEngineTask engineTask,ModuleHandle moduleHandle){
  List paramsList=moduleHandle.getAllParameters();
  for (int i=0; i < paramsList.size(); i++) {
    Object parameterObject=paramsList.get(i);
    if (parameterObject instanceof ScalarParameterHandle) {
      ScalarParameterHandle parameterHandle=(ScalarParameterHandle)parameterObject;
      if (parameterHandle.getDefaultValueList() == null || parameterHandle.getDefaultValueList().size() == 0) {
        String paramType=parameterHandle.getParamType();
        if (DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(paramType)) {
          engineTask.setParameter(parameterHandle.getName(),new Object[]{getDummyDefaultValue(parameterHandle)},parameterHandle.getDisplayName());
        }
 else         engineTask.setParameter(parameterHandle.getName(),getDummyDefaultValue(parameterHandle),parameterHandle.getDisplayName());
      }
    }
 else     if (parameterObject instanceof DynamicFilterParameterHandle) {
      List defaultValue=((DynamicFilterParameterHandle)parameterObject).getDefaultValueList();
      if (defaultValue == null || defaultValue.size() == 0) {
        engineTask.setParameter(((DynamicFilterParameterHandle)parameterObject).getName(),""String_Node_Str"",((DynamicFilterParameterHandle)parameterObject).getDisplayName());
      }
    }
  }
}",0.6209445585215606
67299,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || isDateTimeDimension(hier)) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    DimensionJoinConditionHandle condition=getFacttableJointKey(cubeHandle,hier);
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || (isDateTimeDimension(hier) && existColumnName(hier,condition.getHierarchyKey()))) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.988945372387638
67300,"public IAggregationResultSet[] execute(IAggregationResultSet[] rs,BirtCubeView view,CubeQueryExecutorHelper cubeQueryExecutorHelper) throws IOException {
  ICubeQueryDefinition query=view.getCubeQueryDefinition();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  IMirroredDefinition columnMirror=null, rowMirror=null;
  if (columnEdge != null)   columnMirror=columnEdge.getMirroredDefinition();
  if (rowEdge != null)   rowMirror=rowEdge.getMirroredDefinition();
  int index=0;
  if (columnEdge != null) {
    if (columnMirror != null) {
      rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(columnMirror,columnEdge,view),cubeQueryExecutorHelper.getColumnSort());
    }
    index++;
  }
  if (rowMirror != null) {
    rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(rowMirror,rowEdge,view),cubeQueryExecutorHelper.getRowSort());
  }
  return rs;
}","public IAggregationResultSet[] execute(IAggregationResultSet[] rs,BirtCubeView view,CubeQueryExecutorHelper cubeQueryExecutorHelper) throws IOException, DataException {
  ICubeQueryDefinition query=view.getCubeQueryDefinition();
  IEdgeDefinition columnEdge=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
  IEdgeDefinition rowEdge=query.getEdge(ICubeQueryDefinition.ROW_EDGE);
  IMirroredDefinition columnMirror=null, rowMirror=null;
  if (columnEdge != null)   columnMirror=columnEdge.getMirroredDefinition();
  if (rowEdge != null)   rowMirror=rowEdge.getMirroredDefinition();
  int index=0;
  if (columnEdge != null) {
    if (columnMirror != null) {
      rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(columnMirror,columnEdge,view),cubeQueryExecutorHelper.getColumnSort());
    }
    index++;
  }
  if (rowMirror != null) {
    rs[index]=new MirroredAggregationResultSet(rs[index],new MirrorMetaInfo(rowMirror,rowEdge,view),cubeQueryExecutorHelper.getRowSort());
  }
  if (rowMirror != null || columnMirror != null) {
    boolean hasAggregationSort=false;
    List sort=cubeQueryExecutorHelper.getColumnSort();
    for (int i=0; i < sort.size(); i++) {
      if (sort.get(i) instanceof AggrSortDefinition && ((AggrSortDefinition)sort.get(i)).getAxisQualifierLevel().length > 0) {
        hasAggregationSort=true;
        break;
      }
    }
    if (!hasAggregationSort) {
      sort=cubeQueryExecutorHelper.getRowSort();
      for (int i=0; i < sort.size(); i++) {
        if (sort.get(i) instanceof AggrSortDefinition && ((AggrSortDefinition)sort.get(i)).getAxisQualifierLevel().length > 0) {
          hasAggregationSort=true;
          break;
        }
      }
    }
    if (hasAggregationSort) {
      for (int i=0; i < rs.length; i++) {
        if (rs[i].getAggregationCount() == 0) {
          rs[i]=sortAggregationResultSet(rs[i]);
        }
      }
      cubeQueryExecutorHelper.applyAggrSort(rs);
    }
  }
  return rs;
}",0.6666666666666666
67301,"protected ChartPreviewPainterBase(ChartWizardContext wizardContext){
  this.wizardContext=wizardContext;
  this.chart=wizardContext.getModel();
  if (this.chart != null) {
    chart=chart.copyInstance();
  }
}","protected ChartPreviewPainterBase(ChartWizardContext wizardContext){
  this.wizardContext=wizardContext;
}",0.6730158730158731
67302,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(5,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9996067636649626
67303,"protected void enableInput(boolean val){
  operator.setEnabled(val);
  if (valueVisible != 3) {
    if (expressionValue1 != null)     expressionValue1.setEnabled(val);
    if (expressionValue2 != null)     expressionValue2.setEnabled(val);
    if (andLable != null) {
      andLable.setEnabled(val);
    }
  }
 else {
    setControlEnable(valueListComposite,val);
    if (val) {
      checkAddButtonStatus();
      checkEditDelButtonStatus();
    }
  }
}","protected void enableInput(boolean val){
  operator.setEnabled(val);
  if (valueVisible != 3) {
    if (expressionValue1 != null) {
      expressionValue1.setEnabled(val);
      ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setEnabled(val);
    }
    if (expressionValue2 != null) {
      expressionValue2.setEnabled(val);
      ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setEnabled(val);
    }
    if (andLable != null) {
      andLable.setEnabled(val);
    }
  }
 else {
    setControlEnable(valueListComposite,val);
    if (val) {
      checkAddButtonStatus();
      checkEditDelButtonStatus();
    }
  }
}",0.8121645796064401
67304,"protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance(currentItem.getModuleHandle()).newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      filter.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          filter.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          filter.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemConstants.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          inputHandle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          inputHandle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      inputHandle.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
    }
  }
 catch (  Exception e) {
    WidgetUtil.processError(getShell(),e);
  }
  super.okPressed();
}","protected void okPressed(){
  try {
    if (inputHandle == null) {
      FilterConditionElementHandle filter=DesignElementFactory.getInstance(currentItem.getModuleHandle()).newFilterConditionElement();
      filter.setProperty(IFilterConditionElementModel.OPERATOR_PROP,DEUtil.resolveNull(getValueForOperator(operator.getText())));
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      filter.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
      if (valueVisible == 3) {
        filter.setValue1(valueList);
        filter.setValue2(""String_Node_Str"");
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          filter.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          filter.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          filter.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          filter.setValue2(NULL_STRING);
        }
      }
      PropertyHandle propertyHandle=designHandle.getPropertyHandle(ChartReportItemConstants.PROPERTY_CUBE_FILTER);
      propertyHandle.add(filter);
    }
 else {
      inputHandle.setOperator(DEUtil.resolveNull(getValueForOperator(operator.getText())));
      if (valueVisible == 3) {
        inputHandle.setValue1(valueList);
        inputHandle.setValue2(NULL_STRING);
      }
 else {
        assert(!expressionValue1.isDisposed());
        assert(!expressionValue2.isDisposed());
        if (expressionValue1.getVisible()) {
          inputHandle.setValue1(DEUtil.resolveNull(expressionValue1.getText()));
        }
 else {
          inputHandle.setValue1(NULL_STRING);
        }
        if (expressionValue2.getVisible()) {
          inputHandle.setValue2(DEUtil.resolveNull(expressionValue2.getText()));
        }
 else {
          inputHandle.setValue2(NULL_STRING);
        }
      }
      Expression expression=new Expression(expButton.getDisplayExpression(),expButton.getExpressionType());
      inputHandle.setExpressionProperty(FilterCondition.EXPR_MEMBER,expression);
    }
  }
 catch (  Exception e) {
    ExceptionUtil.handle(e);
  }
  super.okPressed();
}",0.9904638058084092
67305,"private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    expressionValue1.dispose();
    expressionValue1=null;
    dummy1.dispose();
    dummy1=null;
    expressionValue2.dispose();
    expressionValue2=null;
    dummy2.dispose();
    dummy2=null;
    andLable.dispose();
    andLable=null;
  }
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.horizontalAlignment=SWT.BEGINNING;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=4;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=new Combo(group,SWT.NONE);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_VERTICAL);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        int index=table.getSelectionIndex();
        if (index > -1) {
          valueList.remove(index);
          tableViewer.refresh();
          if (valueList.size() > 0) {
            if (valueList.size() <= index) {
              index=index - 1;
            }
            table.select(index);
          }
          updateButtons();
        }
 else {
          delBtn.setEnabled(false);
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvider(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvider(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvier(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvier(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=table.getSelectionIndex();
      if (index > -1) {
        valueList.remove(index);
        tableViewer.refresh();
        if (valueList.size() > 0) {
          if (valueList.size() <= index) {
            index=index - 1;
          }
          table.select(index);
        }
        updateButtons();
      }
 else {
        delBtn.setEnabled(false);
      }
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  addExpressionValue.addListener(SWT.Verify,expValueVerifyListener);
  addExpressionValue.addListener(SWT.Selection,expValueSelectionListener);
  refreshList();
  addExpressionValue.setItems(popupItems);
  parent.getParent().layout(true,true);
  return 1;
}","private int createValueListComposite(Composite parent){
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    return 0;
  }
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().dispose();
    expressionValue1.dispose();
    expressionValue1=null;
    dummy1.dispose();
    dummy1=null;
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().dispose();
    expressionValue2.dispose();
    expressionValue2=null;
    dummy2.dispose();
    dummy2=null;
    andLable.dispose();
    andLable=null;
  }
  valueListComposite=new Composite(parent,SWT.NONE);
  GridData gdata=new GridData(GridData.FILL_HORIZONTAL);
  gdata.horizontalSpan=4;
  valueListComposite.setLayoutData(gdata);
  GridLayout layout=new GridLayout();
  layout.numColumns=4;
  valueListComposite.setLayout(layout);
  Group group=new Group(valueListComposite,SWT.NONE);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=118;
  data.horizontalSpan=3;
  data.horizontalIndent=0;
  data.horizontalAlignment=SWT.BEGINNING;
  data.grabExcessHorizontalSpace=true;
  group.setLayoutData(data);
  layout=new GridLayout();
  layout.numColumns=5;
  group.setLayout(layout);
  new Label(group,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  GridData expgd=new GridData();
  expgd.widthHint=100;
  addExpressionValue=createExpressionValue(group);
  addExpressionValue.setLayoutData(expgd);
  addBtn=new Button(group,SWT.PUSH);
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(addBtn);
  addBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      String value=addExpressionValue.getText().trim();
      if (valueList.indexOf(value) < 0) {
        valueList.add(value);
        tableViewer.refresh();
        updateButtons();
        addExpressionValue.setFocus();
        addExpressionValue.setText(""String_Node_Str"");
      }
 else {
        addBtn.setEnabled(false);
      }
    }
  }
);
  new Label(group,SWT.NONE);
  int tableStyle=SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION;
  table=new Table(group,tableStyle);
  data=new GridData(GridData.FILL_VERTICAL);
  data.horizontalSpan=4;
  table.setLayoutData(data);
  table.setHeaderVisible(false);
  table.setLinesVisible(true);
  TableColumn column;
  int i;
  String[] columNames=new String[]{Messages.getString(""String_Node_Str"")};
  int[] columLength=new int[]{288};
  for (i=0; i < columNames.length; i++) {
    column=new TableColumn(table,SWT.NONE,i);
    column.setText(columNames[i]);
    column.setWidth(columLength[i]);
  }
  table.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      checkEditDelButtonStatus();
    }
  }
);
  table.addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        int index=table.getSelectionIndex();
        if (index > -1) {
          valueList.remove(index);
          tableViewer.refresh();
          if (valueList.size() > 0) {
            if (valueList.size() <= index) {
              index=index - 1;
            }
            table.select(index);
          }
          updateButtons();
        }
 else {
          delBtn.setEnabled(false);
        }
      }
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvider(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvider(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  tableViewer=new TableViewer(table);
  tableViewer.setUseHashlookup(true);
  tableViewer.setColumnProperties(columNames);
  tableViewer.setLabelProvider(tableLableProvier);
  tableViewer.setContentProvider(tableContentProvider);
  Composite rightPart=new Composite(valueListComposite,SWT.NONE);
  data=new GridData(GridData.FILL_BOTH | GridData.VERTICAL_ALIGN_END);
  rightPart.setLayoutData(data);
  layout=new GridLayout();
  layout.makeColumnsEqualWidth=true;
  rightPart.setLayout(layout);
  editBtn=new Button(rightPart,SWT.PUSH);
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(editBtn);
  editBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();
      if (selection.getFirstElement() != null && selection.getFirstElement() instanceof String) {
        String initValue=(String)selection.getFirstElement();
        ExpressionBuilder expressionBuilder=new ExpressionBuilder(getShell(),initValue);
        if (designHandle != null) {
          if (expressionProvider == null)           expressionBuilder.setExpressionProvier(new ExpressionProvider(designHandle));
 else           expressionBuilder.setExpressionProvier(expressionProvider);
        }
        if (expressionBuilder.open() == OK) {
          String result=DEUtil.resolveNull(expressionBuilder.getResult());
          int index=table.getSelectionIndex();
          valueList.remove(index);
          valueList.add(index,result);
          tableViewer.refresh();
          table.select(index);
        }
        updateButtons();
      }
 else {
        editBtn.setEnabled(false);
      }
    }
  }
);
  delBtn=new Button(rightPart,SWT.PUSH);
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delBtn);
  delBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int index=table.getSelectionIndex();
      if (index > -1) {
        valueList.remove(index);
        tableViewer.refresh();
        if (valueList.size() > 0) {
          if (valueList.size() <= index) {
            index=index - 1;
          }
          table.select(index);
        }
        updateButtons();
      }
 else {
        delBtn.setEnabled(false);
      }
    }
  }
);
  delAllBtn=new Button(rightPart,SWT.PUSH);
  delAllBtn.setText(Messages.getString(""String_Node_Str""));
  delAllBtn.setToolTipText(Messages.getString(""String_Node_Str""));
  setButtonLayoutData(delAllBtn);
  delAllBtn.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      int count=valueList.size();
      if (count > 0) {
        valueList.clear();
        tableViewer.refresh();
        updateButtons();
      }
 else {
        delAllBtn.setEnabled(false);
      }
    }
  }
);
  addExpressionValue.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      checkAddButtonStatus();
      updateButtons();
    }
  }
);
  addExpressionValue.add(CHOICE_SELECT_VALUE);
  parent.getParent().layout(true,true);
  return 1;
}",0.9705632949727436
67306,"private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=new Combo(condition,SWT.NONE);
  expressionValue1.setLayoutData(expgd);
  expressionValue1.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  expressionValue1.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue1.addListener(SWT.Selection,expValueSelectionListener);
  refreshList();
  expressionValue1.setItems(popupItems);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  dummy2=createDummy(condition,3);
  expressionValue2=new Combo(condition,SWT.NONE);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  expressionValue2.addListener(SWT.Verify,expValueVerifyListener);
  expressionValue2.addListener(SWT.Selection,expValueSelectionListener);
  expressionValue2.setItems(popupItems);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}","private int create2ValueComposite(Composite condition){
  if (expressionValue1 != null && !expressionValue1.isDisposed()) {
    return 0;
  }
  if (valueListComposite != null && !valueListComposite.isDisposed()) {
    valueListComposite.dispose();
    valueListComposite=null;
  }
  GridData expgd=new GridData();
  expgd.widthHint=100;
  expressionValue1=createExpressionValue(condition);
  expressionValue1.setLayoutData(expgd);
  expressionValue1.add(CHOICE_SELECT_VALUE);
  dummy1=createDummy(condition,3);
  andLable=new Label(condition,SWT.NONE);
  andLable.setText(Messages.getString(""String_Node_Str""));
  andLable.setEnabled(false);
  dummy2=createDummy(condition,3);
  expressionValue2=createExpressionValue(condition);
  expressionValue2.setLayoutData(expgd);
  expressionValue2.add(CHOICE_SELECT_VALUE);
  if (operator.getItemCount() > 0 && operator.getSelectionIndex() == -1) {
    operator.select(0);
  }
  condition.getParent().layout(true,true);
  return 1;
}",0.4616607071911005
67307,"public void widgetSelected(SelectionEvent e){
  String value=getValueForOperator(operator.getText());
  valueVisible=determineValueVisible(value);
  if (valueVisible == 3) {
    int ret=createValueListComposite(operator.getParent());
    if (ret != 0) {
      if (inputHandle != null) {
        valueList=new ArrayList(inputHandle.getValue1List());
      }
      tableViewer.setInput(valueList);
    }
  }
 else {
    int ret=create2ValueComposite(operator.getParent());
    if (ret != 0 && inputHandle != null) {
      expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
      expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
    }
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    expressionValue2.setVisible(true);
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
  updateButtons();
}","public void widgetSelected(SelectionEvent e){
  String value=getValueForOperator(operator.getText());
  valueVisible=determineValueVisible(value);
  if (valueVisible == 3) {
    int ret=createValueListComposite(operator.getParent());
    if (ret != 0) {
      if (inputHandle != null) {
        valueList=new ArrayList(inputHandle.getValue1List());
      }
      tableViewer.setInput(valueList);
    }
  }
 else {
    int ret=create2ValueComposite(operator.getParent());
    if (ret != 0 && inputHandle != null) {
      expressionValue1.setText(DEUtil.resolveNull(inputHandle.getValue1()));
      expressionValue2.setText(DEUtil.resolveNull(inputHandle.getValue2()));
    }
  }
  if (valueVisible == 0) {
    expressionValue1.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(false);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 1) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(false);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(false);
    andLable.setVisible(false);
  }
 else   if (valueVisible == 2) {
    expressionValue1.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue1).getControl().setVisible(true);
    expressionValue2.setVisible(true);
    ExpressionButtonUtil.getExpressionButton(expressionValue2).getControl().setVisible(true);
    andLable.setVisible(true);
    andLable.setEnabled(true);
  }
  updateButtons();
}",0.8044153156260779
67308,"/** 
 * Find the inner level index from specified expression.
 * @param expr
 * @return
 */
private int findInnerLevelIndex(String expr,List<String> levelNames){
  int index=-1;
  if (ChartUtil.isEmpty(expr)) {
    return index;
  }
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  Collection<String> bindingNames=exprCodec.getBindingNames(expr);
  for (  String bindName : bindingNames) {
    int levelIndex=levelNames.indexOf(bindName);
    if (levelIndex > index) {
      index=levelIndex;
    }
  }
  return index;
}","/** 
 * Find the inner level index from specified expression.
 * @param expr
 * @param levelNames
 * @param cubeBindingMap
 * @return
 */
private int findInnerLevelIndex(String expr,List<String> levelNames,Map<String,String> cubeBindingMap){
  int index=-1;
  if (ChartUtil.isEmpty(expr)) {
    return index;
  }
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  Collection<String> bindingNames=exprCodec.getBindingNames(expr);
  for (  String bindName : bindingNames) {
    String cubeBindingExpr=cubeBindingMap.get(bindName);
    if (cubeBindingExpr == null) {
      continue;
    }
    String[] lNames=exprCodec.getLevelNames(cubeBindingExpr);
    for (int i=1; i < lNames.length; i++) {
      int levelIndex=levelNames.indexOf(lNames[i]);
      if (levelIndex > index) {
        index=levelIndex;
      }
    }
  }
  return index;
}",0.7434996486296557
67309,"/** 
 * Parse the dimension levels on row edge and column edge to find out the level index used by category series and Y optional.
 * @param queryDefintion
 * @param cm
 */
private void parseLevelIndex(IBaseCubeQueryDefinition queryDefintion,Chart cm){
  fRowInnerLevelIndex=-1;
  fColInnerLevelIndex=-1;
  if (queryDefintion instanceof ICubeQueryDefinition) {
    List rowLevelNames=Collections.EMPTY_LIST;
    List colLevelNames=Collections.EMPTY_LIST;
    String[] categoryExprs=ChartUtil.getCategoryExpressions(cm);
    ICubeQueryDefinition cqd=(ICubeQueryDefinition)queryDefintion;
    IEdgeDefinition rowED=cqd.getEdge(ICubeQueryDefinition.ROW_EDGE);
    IEdgeDefinition colED=cqd.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    if (rowED != null) {
      rowLevelNames=getLevelNames(rowED);
      if (categoryExprs != null && categoryExprs.length > 0) {
        fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames);
        if (fRowInnerLevelIndex < 0 && colED != null) {
          rowLevelNames=getLevelNames(colED);
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames);
          fIsColEdgeAsMainCursor=true;
          return;
        }
      }
    }
    if (colED != null) {
      if (rowED == null && fRowInnerLevelIndex < 0) {
        rowLevelNames=getLevelNames(colED);
        if (categoryExprs != null && categoryExprs.length > 0) {
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames);
          fIsColEdgeAsMainCursor=true;
        }
      }
 else {
        colLevelNames=getLevelNames(colED);
        String[] yOptionalExprs=ChartUtil.getYOptoinalExpressions(cm);
        if (yOptionalExprs != null && yOptionalExprs.length > 0) {
          fColInnerLevelIndex=findInnerLevelIndex(yOptionalExprs[0],colLevelNames);
        }
      }
    }
  }
}","/** 
 * Parse the dimension levels on row edge and column edge to find out the level index used by category series and Y optional.
 * @param queryDefintion
 * @param cm
 */
private void parseLevelIndex(IBaseCubeQueryDefinition queryDefintion,Chart cm){
  fRowInnerLevelIndex=-1;
  fColInnerLevelIndex=-1;
  if (queryDefintion instanceof ICubeQueryDefinition) {
    List<String> rowLevelNames=Collections.emptyList();
    List<String> colLevelNames=Collections.emptyList();
    String[] categoryExprs=ChartUtil.getCategoryExpressions(cm);
    ICubeQueryDefinition cqd=(ICubeQueryDefinition)queryDefintion;
    IEdgeDefinition rowED=cqd.getEdge(ICubeQueryDefinition.ROW_EDGE);
    IEdgeDefinition colED=cqd.getEdge(ICubeQueryDefinition.COLUMN_EDGE);
    Map<String,String> cubeBindingMap=new HashMap<String,String>();
    List bindingList=cqd.getBindings();
    for (int i=0; i < bindingList.size(); i++) {
      Binding b=(Binding)bindingList.get(i);
      if (b.getExpression() instanceof IScriptExpression) {
        cubeBindingMap.put(b.getBindingName(),((IScriptExpression)b.getExpression()).getText());
      }
    }
    if (rowED != null) {
      rowLevelNames=getLevelNames(rowED);
      if (categoryExprs != null && categoryExprs.length > 0) {
        fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
        if (fRowInnerLevelIndex < 0 && colED != null) {
          rowLevelNames=getLevelNames(colED);
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
          fIsColEdgeAsMainCursor=true;
          return;
        }
      }
    }
    if (colED != null) {
      if (rowED == null && fRowInnerLevelIndex < 0) {
        rowLevelNames=getLevelNames(colED);
        if (categoryExprs != null && categoryExprs.length > 0) {
          fRowInnerLevelIndex=findInnerLevelIndex(categoryExprs[0],rowLevelNames,cubeBindingMap);
          fIsColEdgeAsMainCursor=true;
        }
      }
 else {
        colLevelNames=getLevelNames(colED);
        String[] yOptionalExprs=ChartUtil.getYOptoinalExpressions(cm);
        if (yOptionalExprs != null && yOptionalExprs.length > 0) {
          fColInnerLevelIndex=findInnerLevelIndex(yOptionalExprs[0],colLevelNames,cubeBindingMap);
        }
      }
    }
  }
}",0.8766658589774655
67310,"/** 
 * Returns level names in edge definition.
 * @param ed
 * @return
 */
private List getLevelNames(IEdgeDefinition ed){
  List levelNames=new ArrayList();
  List<IDimensionDefinition> dimensions=ed.getDimensions();
  for (  IDimensionDefinition d : dimensions) {
    List<IHierarchyDefinition> hieDefs=d.getHierarchy();
    for (    IHierarchyDefinition hd : hieDefs) {
      List<ILevelDefinition> levels=hd.getLevels();
      for (      ILevelDefinition ld : levels) {
        levelNames.add(ld.getName());
      }
    }
  }
  return levelNames;
}","/** 
 * Returns level names in edge definition.
 * @param ed
 * @return
 */
private List<String> getLevelNames(IEdgeDefinition ed){
  List<String> levelNames=new ArrayList<String>();
  List<IDimensionDefinition> dimensions=ed.getDimensions();
  for (  IDimensionDefinition d : dimensions) {
    List<IHierarchyDefinition> hieDefs=d.getHierarchy();
    for (    IHierarchyDefinition hd : hieDefs) {
      List<ILevelDefinition> levels=hd.getLevels();
      for (      ILevelDefinition ld : levels) {
        levelNames.add(ld.getName());
      }
    }
  }
  return levelNames;
}",0.9787610619469026
67311,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),zorder_hint);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,zorder_hint);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          boolean isConeOrTriangle=(rt.getValue() == RiserType.TRIANGLE || rt.getValue() == RiserType.CONE);
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (isConeOrTriangle) {
                if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                  hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
                  hotspotLoa[2].setY(hotspotLoa[3].getY() - MIN_HEIGHT);
                }
              }
 else {
                if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                  hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                  hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
                }
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),zorder_hint);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,zorder_hint);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.991076683262021
67312,"private IAggregationResultSet populateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  if (aggregationRsFromCube.getAllLevels() == null || aggregationRsFromCube.getAllLevels().length == 0)   return aggregationRsFromCube;
  DrilledAggregateResultSet rs=new DrilledAggregateResultSet(aggregationRsFromCube,drillFilters);
  return rs;
}","private IAggregationResultSet populateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  if (aggregationRsFromCube.getAllLevels() == null || aggregationRsFromCube.getAllLevels().length == 0 || aggregationRsFromCube.length() == 0)   return aggregationRsFromCube;
  DrilledAggregateResultSet rs=new DrilledAggregateResultSet(aggregationRsFromCube,drillFilters);
  return rs;
}",0.95512082853855
67313,"/** 
 * Set related data set on specified session.
 * @param handle the handle which contains related data set.
 * @param session data request session handle
 * @param keepDataSetFilter 
 * @param disAllowAggregation
 * @throws AdapterException
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") public void defineDataSet(DataSetHandle handle,DataRequestSession session,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=session.getModelAdaptor().adaptDataSource(dataSourceHandle);
    session.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        defineDataSet(dsHandle,session,true,false);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),session,keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=session.getModelAdaptor().adaptDataSet(handle);
  if (baseDS == null) {
    return;
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  session.defineDataSet(baseDS);
}","/** 
 * Set related data set on specified session.
 * @param handle the handle which contains related data set.
 * @param session data request session handle
 * @param keepDataSetFilter 
 * @param disAllowAggregation
 * @throws AdapterException
 * @throws BirtException
 */
@SuppressWarnings(""String_Node_Str"") public void defineDataSet(DataSetHandle handle,DataRequestSession session,boolean keepDataSetFilter,boolean disAllowAggregation) throws AdapterException, BirtException {
  if (handle == null) {
    return;
  }
  DataSourceHandle dataSourceHandle=handle.getDataSource();
  if (dataSourceHandle != null) {
    IBaseDataSourceDesign dsourceDesign=session.getModelAdaptor().adaptDataSource(dataSourceHandle);
    session.defineDataSource(dsourceDesign);
  }
  if (handle instanceof JointDataSetHandle) {
    Iterator iter=((JointDataSetHandle)handle).dataSetsIterator();
    while (iter.hasNext()) {
      DataSetHandle dsHandle=(DataSetHandle)iter.next();
      if (dsHandle != null) {
        defineDataSet(dsHandle,session,true,false);
      }
    }
  }
  if (handle instanceof DerivedDataSetHandle) {
    List inputDataSet=((DerivedDataSetHandle)handle).getInputDataSets();
    for (int i=0; i < inputDataSet.size(); i++) {
      defineDataSet((DataSetHandle)inputDataSet.get(i),session,keepDataSetFilter,disAllowAggregation);
    }
  }
  BaseDataSetDesign baseDS=session.getModelAdaptor().adaptDataSet(handle);
  if (baseDS == null) {
    return;
  }
  if (!keepDataSetFilter) {
    if (baseDS.getFilters() != null)     baseDS.getFilters().clear();
  }
  if (disAllowAggregation) {
    List computedColumns=baseDS.getComputedColumns();
    if (computedColumns != null && computedColumns.size() != 0) {
      for (int i=0; i < computedColumns.size(); i++) {
        IComputedColumn computedColumn=(IComputedColumn)computedColumns.get(i);
        if (computedColumn.getAggregateFunction() != null) {
          computedColumns.set(i,new org.eclipse.birt.data.engine.api.querydefn.ComputedColumn(computedColumn.getName(),""String_Node_Str""));
        }
      }
    }
  }
  new ModelDteApiAdapter().defineDataSet(handle,session);
}",0.9809366909861144
67314,"/** 
 * Clean the error message in the wizard dialog.
 */
public void removeErrors(){
  this.errorMessage=null;
  wizard.getDialog().setErrorMessage(null);
}","/** 
 * Clean the error message in the wizard dialog.
 */
public void removeErrors(){
  this.errorMessage=null;
  if (!wizard.isDisposed()) {
    wizard.getDialog().setErrorMessage(null);
  }
}",0.8971428571428571
67315,"public void dispose(){
  Iterator<ITask> tasks=availableTasks.values().iterator();
  while (tasks.hasNext()) {
    tasks.next().dispose();
  }
}","public void dispose(){
  isDisposed=true;
  Iterator<ITask> tasks=availableTasks.values().iterator();
  while (tasks.hasNext()) {
    tasks.next().dispose();
  }
}",0.9381107491856676
67316,"private DataSet adjustEachDataSet(DataSet ds,List<Integer> indexMap){
  Collection<Object> co;
  double[] da;
  Double[] dda;
  long[] la;
  Calendar[] ca;
  String[] sa;
  Object[] oa;
  BigNumber[] bna;
  int[] indexArray=new int[indexMap.size()];
  for (int i=0; i < indexArray.length; i++) {
    indexArray[i]=indexMap.get(i).intValue();
  }
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof double[]) {
      da=(double[])oContent;
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      for (int i=0; i < da.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=da[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Double[]) {
      dda=(Double[])oContent;
      Double[] doubleBuffer=new Double[indexArray.length];
      for (int i=0; i < dda.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=dda[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Number) {
      da=new double[]{((Number)oContent).doubleValue()};
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      int idx=indexArray[0];
      if (idx != -1) {
        doubleBuffer[idx]=da[0];
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof BigNumber[]) {
      bna=(BigNumber[])oContent;
      BigNumber[] bigNumberBuffer=new BigNumber[indexArray.length];
      for (int i=0; i < bna.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          bigNumberBuffer[idx]=bna[i];
        }
      }
      ds.setValues(bigNumberBuffer);
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof long[]) {
      la=(long[])oContent;
      double[] longBuffer=new double[indexArray.length];
      Arrays.fill(longBuffer,Double.NaN);
      for (int i=0; i < la.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          longBuffer[idx]=la[i];
        }
      }
      ds.setValues(longBuffer);
    }
 else     if (oContent instanceof Calendar[]) {
      ca=(Calendar[])oContent;
      Calendar[] calendarBuffer=new Calendar[indexArray.length];
      for (int i=0; i < ca.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          calendarBuffer[idx]=ca[i];
        }
      }
      ds.setValues(calendarBuffer);
    }
  }
 else   if (ds instanceof TextDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof String[]) {
      sa=(String[])oContent;
      String[] stringBuffer=new String[indexArray.length];
      for (int i=0; i < sa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          stringBuffer[idx]=sa[i];
        }
      }
      ds.setValues(stringBuffer);
    }
  }
 else {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof Object[]) {
      oa=(Object[])oContent;
      Object[] objectBuffer=new Object[indexArray.length];
      for (int i=0; i < oa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          objectBuffer[idx]=oa[i];
        }
      }
      ds.setValues(objectBuffer);
    }
  }
  return ds;
}","private DataSet adjustEachDataSet(DataSet ds,List<Integer> indexMap){
  Collection<Object> co;
  double[] da;
  Double[] dda;
  long[] la;
  Calendar[] ca;
  String[] sa;
  Object[] oa;
  BigNumber[] bna;
  int[] indexArray=new int[indexMap.size()];
  for (int i=0; i < indexArray.length; i++) {
    indexArray[i]=indexMap.get(i).intValue();
  }
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof double[]) {
      da=(double[])oContent;
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      for (int i=0; i < da.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=da[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Double[]) {
      dda=(Double[])oContent;
      Double[] doubleBuffer=new Double[indexArray.length];
      for (int i=0; i < dda.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=dda[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Number) {
      da=new double[]{((Number)oContent).doubleValue()};
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      int idx=indexArray[0];
      if (idx != -1) {
        doubleBuffer[idx]=da[0];
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof BigNumber[]) {
      bna=(BigNumber[])oContent;
      BigNumber[] bigNumberBuffer=new BigNumber[indexArray.length];
      for (int i=0; i < bna.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          bigNumberBuffer[idx]=bna[i];
        }
      }
      ds.setValues(bigNumberBuffer);
    }
 else     if (oContent instanceof Number[]) {
      Number[] na=(Number[])oContent;
      Number[] numberBuffer=new Number[indexArray.length];
      for (int i=0; i < na.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          numberBuffer[idx]=na[i];
        }
      }
      ds.setValues(numberBuffer);
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof long[]) {
      la=(long[])oContent;
      double[] longBuffer=new double[indexArray.length];
      Arrays.fill(longBuffer,Double.NaN);
      for (int i=0; i < la.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          longBuffer[idx]=la[i];
        }
      }
      ds.setValues(longBuffer);
    }
 else     if (oContent instanceof Calendar[]) {
      ca=(Calendar[])oContent;
      Calendar[] calendarBuffer=new Calendar[indexArray.length];
      for (int i=0; i < ca.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          calendarBuffer[idx]=ca[i];
        }
      }
      ds.setValues(calendarBuffer);
    }
  }
 else   if (ds instanceof TextDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof String[]) {
      sa=(String[])oContent;
      String[] stringBuffer=new String[indexArray.length];
      for (int i=0; i < sa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          stringBuffer[idx]=sa[i];
        }
      }
      ds.setValues(stringBuffer);
    }
  }
 else {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof Object[]) {
      oa=(Object[])oContent;
      Object[] objectBuffer=new Object[indexArray.length];
      for (int i=0; i < oa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          objectBuffer[idx]=oa[i];
        }
      }
      ds.setValues(objectBuffer);
    }
  }
  return ds;
}",0.9679154658981748
67317,"private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption hideGridlines=new ConfigurableOption(HIDE_GRIDLINES);
  hideGridlines.setDisplayName(getMessage(""String_Node_Str""));
  hideGridlines.setDataType(IConfigurableOption.DataType.BOOLEAN);
  hideGridlines.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  hideGridlines.setDefaultValue(Boolean.FALSE);
  hideGridlines.setToolTip(null);
  hideGridlines.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}","private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(getMessage(""String_Node_Str""));
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption hideGridlines=new ConfigurableOption(HIDE_GRIDLINES);
  hideGridlines.setDisplayName(getMessage(""String_Node_Str""));
  hideGridlines.setDataType(IConfigurableOption.DataType.BOOLEAN);
  hideGridlines.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  hideGridlines.setDefaultValue(Boolean.FALSE);
  hideGridlines.setToolTip(null);
  hideGridlines.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}",0.9938461538461538
67318,"public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle,false);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      ExceptionHandler.handle(e);
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}","public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle,false);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      Throwable cause=e.getCause();
      if (cause != null && (cause instanceof org.eclipse.birt.data.engine.core.DataException)) {
        Logger logger=Logger.getLogger(DefaultDataSetWizard.class.getName());
        logger.log(Level.WARNING,e.getLocalizedMessage(),e);
      }
 else {
        ExceptionHandler.handle(e);
      }
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}",0.8626728110599078
67319,"/** 
 * handle style image
 * @param uri uri in style image
 * @param isBackground Is this image a used for a background?
 * @return
 */
public String handleStyleImage(String uri,boolean isBackground){
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  URL url=design.findResource(uri,IResourceLocator.IMAGE,reportContext.getAppContext());
  if (url == null) {
    return uri;
  }
  uri=url.toExternalForm();
  Image image=null;
  if (isBackground && SvgFile.isSvg(uri)) {
    try {
      byte[] buffer=SvgFile.transSvgToArray(uri);
      image=new Image(buffer,uri,""String_Node_Str"");
    }
 catch (    IOException e) {
      image=new Image(uri);
    }
  }
 else {
    image=new Image(uri);
  }
  image.setReportRunnable(runnable);
  image.setRenderOption(renderOption);
  String imgUri=null;
  if (imageHandler != null) {
switch (image.getSource()) {
case IImage.URL_IMAGE:
      imgUri=imageHandler.onURLImage(image,reportContext);
    break;
case IImage.FILE_IMAGE:
  imgUri=imageHandler.onFileImage(image,reportContext);
break;
case IImage.CUSTOM_IMAGE:
imgUri=imageHandler.onCustomImage(image,reportContext);
break;
case IImage.INVALID_IMAGE:
break;
default :
assert(false);
}
}
return imgUri;
}","/** 
 * handle style image
 * @param uri uri in style image
 * @param isBackground Is this image a used for a background?
 * @return
 */
public String handleStyleImage(String uri,boolean isBackground){
  ReportDesignHandle design=(ReportDesignHandle)runnable.getDesignHandle();
  URL url=design.findResource(uri,IResourceLocator.IMAGE,reportContext.getAppContext());
  if (url == null) {
    return uri;
  }
  uri=url.toExternalForm();
  Image image=null;
  if (isBackground) {
    try {
      byte[] buffer=SvgFile.transSvgToArray(uri);
      image=new Image(buffer,uri,""String_Node_Str"");
    }
 catch (    Exception e) {
      image=new Image(uri);
    }
  }
 else {
    image=new Image(uri);
  }
  image.setReportRunnable(runnable);
  image.setRenderOption(renderOption);
  String imgUri=null;
  if (imageHandler != null) {
switch (image.getSource()) {
case IImage.URL_IMAGE:
      imgUri=imageHandler.onURLImage(image,reportContext);
    break;
case IImage.FILE_IMAGE:
  imgUri=imageHandler.onFileImage(image,reportContext);
break;
case IImage.CUSTOM_IMAGE:
imgUri=imageHandler.onCustomImage(image,reportContext);
break;
case IImage.INVALID_IMAGE:
break;
default :
assert(false);
}
}
return imgUri;
}",0.990139687756779
67320,"protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        IOException ex) {
          throw ex;
        }
      }
 else {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.getPlainWidth() / resolutionX * 72;
      imageHeight=img.getPlainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX <= imageWidth) {
          if (height - absPosY >= imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width >= imageWidth && height >= imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}","protected void drawBackgroundImage(float x,float y,float width,float height,float iWidth,float iHeight,int repeat,String imageUrl,float absPosX,float absPosY) throws IOException {
  y=transformY(y);
  contentByte.saveState();
  try {
    Image img=null;
    try {
      img=Image.getInstance(new URL(imageUrl));
    }
 catch (    IOException e) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
      }
 catch (      IOException ex) {
        throw ex;
      }
catch (      Exception te) {
        throw e;
      }
    }
    float imageWidth=iWidth;
    float imageHeight=iHeight;
    if (imageHeight == 0 || imageWidth == 0) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      imageWidth=img.getPlainWidth() / resolutionX * 72;
      imageHeight=img.getPlainHeight() / resolutionY * 72;
    }
    if (BackgroundImageInfo.NO_REPEAT == repeat) {
      TplValueTriple triple=computeTplHorizontalValPair(absPosX,x,width,imageWidth);
      float tplOriginX=triple.getTplOrigin();
      float tplWidth=triple.getTplSize();
      float translationX=triple.getTranslation();
      triple=computeTplVerticalValTriple(absPosY,y,height,imageHeight);
      float tplOrininY=triple.getTplOrigin();
      float tplHeight=triple.getTplSize();
      float translationY=triple.getTranslation();
      PdfTemplate templateWhole=contentByte.createTemplate(tplWidth,tplHeight);
      templateWhole.addImage(img,imageWidth,0,0,imageHeight,translationX,translationY);
      contentByte.addTemplate(templateWhole,tplOriginX,tplOrininY);
    }
 else     if (BackgroundImageInfo.REPEAT_X == repeat) {
      float remainX=width;
      PdfTemplate template=null;
      if (width > imageWidth) {
        if (height - absPosY > imageHeight) {
          template=contentByte.createTemplate(imageWidth,imageHeight);
          template.addImage(img,imageWidth,0,0,imageHeight,0,0);
        }
 else {
          template=contentByte.createTemplate(imageWidth,height);
          template.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height);
        }
      }
      while (remainX > 0) {
        if (remainX <= imageWidth) {
          if (height - absPosY >= imageHeight) {
            PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - imageHeight);
          }
 else {
            PdfTemplate templateX=contentByte.createTemplate(remainX,height);
            templateX.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + height - absPosY);
            contentByte.addTemplate(templateX,x + width - remainX,y - absPosY - height);
          }
          remainX=0;
        }
 else {
          if (height - absPosY > imageHeight)           contentByte.addTemplate(template,x + width - remainX,y - absPosY - imageHeight);
 else           contentByte.addTemplate(template,x + width - remainX,y - absPosY - height);
          remainX-=imageWidth;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT_Y == repeat) {
      float remainY=height;
      PdfTemplate template=null;
      if (height > imageHeight) {
        template=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        if (remainY < imageHeight) {
          PdfTemplate templateY=contentByte.createTemplate(width - absPosX > imageWidth ? imageWidth : width - absPosX,remainY);
          templateY.addImage(img,width > imageWidth ? imageWidth : width - absPosX,0,0,imageHeight,0,-(imageHeight - remainY));
          contentByte.addTemplate(templateY,x + absPosX,y - height);
          remainY=0;
        }
 else {
          contentByte.addTemplate(template,x + absPosX,y - height + remainY - imageHeight);
          remainY-=imageHeight;
        }
      }
    }
 else     if (BackgroundImageInfo.REPEAT == repeat) {
      float remainX=width;
      float remainY=height;
      PdfTemplate template=null;
      if (width >= imageWidth && height >= imageHeight) {
        template=contentByte.createTemplate(imageWidth,imageHeight);
        template.addImage(img,imageWidth,0,0,imageHeight,0,0);
      }
      while (remainY > 0) {
        remainX=width;
        if (remainY < imageHeight) {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateXY=contentByte.createTemplate(remainX,remainY);
              templateXY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateXY,x + width - remainX,y - height);
              remainX=0;
            }
 else {
              PdfTemplate templateY=contentByte.createTemplate(imageWidth,remainY);
              templateY.addImage(img,imageWidth,0,0,imageHeight,0,-imageHeight + remainY);
              contentByte.addTemplate(templateY,x + width - remainX,y - height);
              remainX-=imageWidth;
            }
          }
          remainY=0;
        }
 else {
          while (remainX > 0) {
            if (remainX < imageWidth) {
              PdfTemplate templateX=contentByte.createTemplate(remainX,imageHeight);
              templateX.addImage(img,imageWidth,0,0,imageHeight,0,0);
              contentByte.addTemplate(templateX,x + width - remainX,y - height + remainY - imageHeight);
              remainX=0;
            }
 else {
              contentByte.addTemplate(template,x + width - remainX,y - height + remainY - imageHeight);
              remainX-=imageWidth;
            }
          }
          remainY-=imageHeight;
        }
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.WARNING,ioe.getMessage(),ioe);
  }
catch (  BadElementException bee) {
    logger.log(Level.WARNING,bee.getMessage(),bee);
  }
catch (  DocumentException de) {
    logger.log(Level.WARNING,de.getMessage(),de);
  }
catch (  RuntimeException re) {
    logger.log(Level.WARNING,re.getMessage(),re);
  }
  contentByte.restoreState();
}",0.985310554047581
67321,"public static byte[] getImageData(String imageURI) throws IOException {
  byte[] imageData=null;
  if (SvgFile.isSvg(imageURI)) {
    imageData=SvgFile.transSvgToArray(imageURI);
  }
 else {
    imageData=getNonSVGImageData(imageURI);
  }
  return imageData;
}","public static byte[] getImageData(String imageURI) throws IOException {
  byte[] imageData=null;
  if (SvgFile.isSvg(imageURI)) {
    try {
      imageData=SvgFile.transSvgToArray(imageURI);
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getMessage());
    }
  }
 else {
    imageData=getNonSVGImageData(imageURI);
  }
  return imageData;
}",0.840064620355412
67322,"public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension) throws IOException {
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          data=SvgFile.transSvgToArray(uri);
        }
 else {
          data=getNonSVGImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  data=SvgFile.transSvgToArray(in);
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
  finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}","public static org.eclipse.birt.report.engine.layout.emitter.Image parseImage(IImageContent image,int imageSource,String uri,String mimeType,String extension) throws IOException {
  org.eclipse.birt.report.engine.layout.emitter.Image imageInfo=null;
  byte[] data=null;
  InputStream in=null;
  try {
switch (imageSource) {
case IImageContent.IMAGE_FILE:
case IImageContent.IMAGE_URL:
      if (uri != null) {
        if (SvgFile.isSvg(uri)) {
          try {
            data=SvgFile.transSvgToArray(uri);
          }
 catch (          Exception e) {
            logger.log(Level.WARNING,e.getMessage());
          }
        }
 else {
          data=getNonSVGImageData(uri);
        }
      }
    break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
  data=image.getData();
if (SvgFile.isSvg(mimeType,uri,extension) && null != data) {
  in=new ByteArrayInputStream(data);
  try {
    data=SvgFile.transSvgToArray(in);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage());
  }
}
break;
}
imageInfo=new org.eclipse.birt.report.engine.layout.emitter.Image();
if (data != null) {
imageInfo.setInput(data);
if (!imageInfo.check()) {
imageInfo.setData(null);
}
}
}
  finally {
if (in != null) {
try {
in.close();
in=null;
}
 catch (Exception t) {
logger.log(Level.WARNING,t.getMessage());
}
}
}
return imageInfo;
}",0.6948470209339774
67323,"private void readImage(byte[] data) throws IOException {
  if (data == null || data.length == 0) {
    buffer=null;
    status=RESOURCE_UNREACHABLE;
    return;
  }
  if (isOutputSupported()) {
    buffer=data;
    status=OBJECT_LOADED_SUCCESSFULLY;
  }
 else {
    if (objectType == TYPE_SVG_OBJECT) {
      InputStream in=new ByteArrayInputStream(data);
      buffer=SvgFile.transSvgToArray(in);
      in.close();
      objectType=TYPE_CONVERTED_SVG_OBJECT;
      status=OBJECT_LOADED_SUCCESSFULLY;
    }
 else {
      buffer=null;
      status=UNSUPPORTED_OBJECTS;
    }
  }
}","private void readImage(byte[] data) throws IOException {
  if (data == null || data.length == 0) {
    buffer=null;
    status=RESOURCE_UNREACHABLE;
    return;
  }
  if (isOutputSupported()) {
    buffer=data;
    status=OBJECT_LOADED_SUCCESSFULLY;
  }
 else {
    if (objectType == TYPE_SVG_OBJECT) {
      InputStream in=null;
      try {
        in=new ByteArrayInputStream(data);
        buffer=SvgFile.transSvgToArray(in);
      }
 catch (      Exception e) {
        buffer=null;
        status=UNSUPPORTED_OBJECTS;
        return;
      }
 finally {
        if (in != null) {
          in.close();
        }
      }
      objectType=TYPE_CONVERTED_SVG_OBJECT;
      status=OBJECT_LOADED_SUCCESSFULLY;
    }
 else {
      buffer=null;
      status=UNSUPPORTED_OBJECTS;
    }
  }
}",0.8477306002928258
67324,"protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    String imageUrl=bgi.getUrl();
    try {
      img=Image.getInstance(new URL(bgi.getUrl()));
    }
 catch (    Exception e) {
      if (SvgFile.isSvg(imageUrl)) {
        try {
          img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
        }
 catch (        Exception ex) {
          logger.log(Level.WARNING,ex.getMessage(),ex);
        }
      }
 else {
        logger.log(Level.WARNING,e.getMessage(),e);
      }
    }
    if (img != null) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      float imageWidth=img.getPlainWidth() / resolutionX * 72;
      float imageHeight=img.getPlainHeight() / resolutionY * 72;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        int ox=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),(width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        int oy=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),(height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        bgi.setXOffset(ox);
        bgi.setYOffset(oy);
      }
    }
  }
}","protected void updateBackgroundImage(){
  BackgroundImageInfo bgi=boxStyle.getBackgroundImage();
  Image img=null;
  if (bgi != null) {
    String imageUrl=bgi.getUrl();
    try {
      img=Image.getInstance(new URL(bgi.getUrl()));
    }
 catch (    Exception e) {
      try {
        img=Image.getInstance(SvgFile.transSvgToArray(imageUrl));
      }
 catch (      IOException ex) {
        logger.log(Level.WARNING,ex.getMessage(),ex);
        return;
      }
catch (      Exception te) {
        logger.log(Level.WARNING,e.getMessage(),e);
        return;
      }
    }
    if (img != null) {
      int resolutionX=img.getDpiX();
      int resolutionY=img.getDpiY();
      if (0 == resolutionX || 0 == resolutionY) {
        resolutionX=96;
        resolutionY=96;
      }
      float imageWidth=img.getPlainWidth() / resolutionX * 72;
      float imageHeight=img.getPlainHeight() / resolutionY * 72;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        int ox=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_X),(width - (int)(imageWidth * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        int oy=getDimensionValue(style.getProperty(IStyle.STYLE_BACKGROUND_POSITION_Y),(height - (int)(imageHeight * PDFConstants.LAYOUT_TO_PDF_RATIO)));
        bgi.setXOffset(ox);
        bgi.setYOffset(oy);
      }
    }
  }
}",0.921496698459281
67325,"public static byte[] transSvgToArray(InputStream inputStream) throws IOException {
  JPEGTranscoder transcoder=new JPEGTranscoder();
  transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
  TranscoderInput input=new TranscoderInput(inputStream);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  TranscoderOutput output=new TranscoderOutput(ostream);
  try {
    transcoder.transcode(input,output);
  }
 catch (  TranscoderException e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage(),e);
  }
  ostream.flush();
  return ostream.toByteArray();
}","public static byte[] transSvgToArray(InputStream inputStream) throws Exception {
  JPEGTranscoder transcoder=new JPEGTranscoder();
  transcoder.addTranscodingHint(JPEGTranscoder.KEY_QUALITY,new Float(.8));
  TranscoderInput input=new TranscoderInput(inputStream);
  ByteArrayOutputStream ostream=new ByteArrayOutputStream();
  TranscoderOutput output=new TranscoderOutput(ostream);
  transcoder.transcode(input,output);
  ostream.flush();
  return ostream.toByteArray();
}",0.8947867298578199
67326,"public void setPaperTray(int paperTrayCode){
  options.put(OPTION_PAPER_TRAY,paperTrayCode);
}","public void setPaperTray(String paperTray){
  options.put(OPTION_PAPER_TRAY,paperTray);
}",0.9289617486338798
67327,"public int getPaperTray(){
  return getIntOption(OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
}","public String getPaperTray(){
  return getStringOption(OPTION_PAPER_TRAY);
}",0.7282608695652174
67328,"private void setPaperTray(int paperTrayCode){
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  if (paperTrayCode == IPostscriptRenderOption.TRAYCODE_MANUAL) {
    out.println(""String_Node_Str"");
  }
 else   if (paperTrayCode == IPostscriptRenderOption.TRAYCODE_AUTO) {
    out.println(""String_Node_Str"");
  }
 else {
    out.println(""String_Node_Str"" + paperTrayCode + ""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
}","private void setPaperTray(String paperTray){
  String trayString=getPaperTrayCode(paperTray);
  if (trayString != null) {
    out.println(""String_Node_Str"");
    out.println(trayString);
    out.println(""String_Node_Str"");
  }
}",0.3288888888888889
67329,"public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  this.scale=scale;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  this.scale=scale;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9895384615384616
67330,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  int paperTrayCode=renderOption.getIntOption(PostscriptRenderOption.OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTrayCode,duplex,copies,collate,resolution,color,scale);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,color,scale);
}",0.9711971197119712
67331,void setPaperTray(int paperTrayCode);,void setPaperTray(String paperTray);,0.8767123287671232
67332,int getPaperTray();,String getPaperTray();,0.8780487804878049
67333,"private void updateDragDataSource(){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    if (columnListDescription != null) {
      ((GridData)columnListDescription.getLayoutData()).exclude=true;
      columnListDescription.setVisible(false);
      cmpColumnsList.layout();
    }
    if (dataPreviewDescription != null) {
      ((GridData)dataPreviewDescription.getLayoutData()).exclude=true;
      dataPreviewDescription.setVisible(false);
      cmpDataPreview.layout();
    }
  }
  if (isCubeMode()) {
    if (getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
        cmpColumnsList.layout();
      }
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    return;
  }
  if (columnListDescription != null) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      ((GridData)columnListDescription.getLayoutData()).exclude=false;
      columnListDescription.setVisible(true);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
      cmpColumnsList.layout();
    }
  }
  btnShowDataPreviewB.setEnabled(true);
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}","private void updateDragDataSource(){
  if (dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
    if (columnListDescription != null) {
      ((GridData)columnListDescription.getLayoutData()).exclude=true;
      columnListDescription.setVisible(false);
      cmpColumnsList.layout();
    }
    if (dataPreviewDescription != null) {
      ((GridData)dataPreviewDescription.getLayoutData()).exclude=true;
      dataPreviewDescription.setVisible(false);
      cmpDataPreview.layout();
    }
  }
  if (isCubeMode()) {
    if (getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CROSSTAB_QUERY)) {
      if (!getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
        ((GridData)columnListDescription.getLayoutData()).exclude=false;
        columnListDescription.setVisible(true);
        columnListDescription.setText(Messages.getString(""String_Node_Str""));
        cmpColumnsList.layout();
      }
      getContext().setShowingDataPreview(Boolean.FALSE);
      btnShowDataPreviewB.setSelection(false);
      btnShowDataPreviewB.setEnabled(false);
      stackLayout.topControl=cmpColumnsList;
      refreshDataPreviewPane();
    }
 else {
      stackLayout.topControl=cmpCubeTree;
      cubeTreeViewer.setInput(getCube());
    }
    cmpStack.layout();
    ChartWizard.removeException(ChartWizard.StaChartDSh_dPreview_ID);
    return;
  }
  if (columnListDescription != null) {
    if (!dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
      ((GridData)columnListDescription.getLayoutData()).exclude=false;
      columnListDescription.setVisible(true);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
      cmpColumnsList.layout();
    }
  }
  btnShowDataPreviewB.setEnabled(true);
  String pValue=(previousData == null) ? ""String_Node_Str"" : previousData;
  String cValue=(currentData == null) ? ""String_Node_Str"" : currentData;
  if (!pValue.equals(cValue)) {
    getContext().setShowingDataPreview(null);
  }
  previousData=currentData;
  try {
    if (!getContext().isSetShowingDataPreview() && getDataServiceProvider().getPreviewHeadersInfo().length >= 6) {
      getContext().setShowingDataPreview(Boolean.FALSE);
    }
    ChartWizard.removeException(ChartWizard.StaChartDSh_gHeaders_ID);
  }
 catch (  NullPointerException e) {
  }
catch (  ChartException e) {
    ChartWizard.showException(ChartWizard.StaChartDSh_gHeaders_ID,e.getMessage());
  }
  btnShowDataPreviewA.setSelection(getContext().isShowingDataPreview());
  btnShowDataPreviewB.setSelection(getContext().isShowingDataPreview());
  if (getContext().isShowingDataPreview()) {
    stackLayout.topControl=cmpDataPreview;
  }
 else {
    stackLayout.topControl=cmpColumnsList;
  }
  refreshDataPreviewPane();
  cmpStack.layout();
}",0.98731424429141
67334,"public String getColumnText(Object element,int columnIndex){
  return ((CellValue[])element)[columnIndex].getDisplayValue();
}","public String getColumnText(Object element,int columnIndex){
  if ((element instanceof CellValue[]) && (((CellValue[])element).length > 0)) {
    return ((CellValue[])element)[columnIndex].getDisplayValue();
  }
 else {
    return null;
  }
}",0.6847826086956522
67335,"private void createResultSetTableViewer(){
  resultSetTableViewer=new TableViewer(resultSetTable);
  resultSetTableViewer.setSorter(null);
  resultSetTableViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  resultSetTableViewer.setLabelProvider(new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      return ((CellValue[])element)[columnIndex].getDisplayValue();
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
}","private void createResultSetTableViewer(){
  resultSetTableViewer=new TableViewer(resultSetTable);
  resultSetTableViewer.setSorter(null);
  resultSetTableViewer.setContentProvider(new IStructuredContentProvider(){
    public Object[] getElements(    Object inputElement){
      if (inputElement instanceof List) {
        return ((List)inputElement).toArray();
      }
      return new Object[0];
    }
    public void inputChanged(    Viewer viewer,    Object oldInput,    Object newInput){
    }
    public void dispose(){
    }
  }
);
  resultSetTableViewer.setLabelProvider(new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      if ((element instanceof CellValue[]) && (((CellValue[])element).length > 0)) {
        return ((CellValue[])element)[columnIndex].getDisplayValue();
      }
 else {
        return null;
      }
    }
    public void addListener(    ILabelProviderListener listener){
    }
    public void dispose(){
    }
    public boolean isLabelProperty(    Object element,    String property){
      return false;
    }
    public void removeListener(    ILabelProviderListener listener){
    }
  }
);
}",0.9453189726594864
67336,"public ITOCReader getTOCReader(ClassLoader loader) throws EngineException {
  loadCoreStreamLazily();
  if (cachedTocReaderV0 != null) {
    return cachedTocReaderV0;
  }
  try {
    return new TOCReader(archive,loader);
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
}","public ITOCReader getTOCReader(ClassLoader loader) throws EngineException {
  loadCoreStreamLazily();
  if (cachedTreeV0 != null) {
    return new TOCReaderV0(cachedTreeV0);
  }
  try {
    return new TOCReader(archive,loader);
  }
 catch (  IOException ex) {
    throw new EngineException(""String_Node_Str"",ex);
  }
}",0.9348171701112876
67337,"private void loadCoreStream(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadCoreStreamHeader(di,documentInfo);
  loadCoreStreamBody(di,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  if (checkpoint == CHECKPOINT_END) {
    if (indexReader == null) {
      indexReader=documentInfo.indexReader;
    }
 else {
      if (documentInfo.indexReader != null) {
        documentInfo.indexReader.close();
      }
    }
    if (tocReader == null) {
      cachedTocReaderV0=documentInfo.tocReader;
      tocReader=documentInfo.tocReader;
    }
 else {
      if (documentInfo.tocReader != null) {
        documentInfo.tocReader.close();
      }
    }
  }
}","private void loadCoreStream(DataInputStream di) throws IOException {
  ReportDocumentCoreInfo documentInfo=new ReportDocumentCoreInfo();
  loadCoreStreamHeader(di,documentInfo);
  loadCoreStreamBody(di,documentInfo);
  checkpoint=documentInfo.checkpoint;
  pageCount=documentInfo.pageCount;
  globalVariables=documentInfo.globalVariables;
  parameters=documentInfo.parameters;
  if (checkpoint == CHECKPOINT_END) {
    if (indexReader == null) {
      indexReader=documentInfo.indexReader;
    }
 else {
      if (documentInfo.indexReader != null) {
        documentInfo.indexReader.close();
      }
    }
    if (tocReader == null) {
      tocReader=documentInfo.tocReader;
      if (tocReader != null) {
        cachedTreeV0=(TreeNode)tocReader.readTree();
      }
    }
 else {
      if (documentInfo.tocReader != null) {
        documentInfo.tocReader.close();
      }
    }
  }
}",0.8909512761020881
67338,"public TOCReaderV0(InputStream in,boolean checkVersion) throws IOException {
  DataInputStream input=new DataInputStream(in);
  if (checkVersion) {
    IOUtil.readString(input);
  }
  root=readRoot(input);
}","public TOCReaderV0(TreeNode root){
  this.root=root;
}",0.3448275862068966
67339,"/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight){
  IStyle style=cell.getStyle();
  if (fixedReport) {
    HTMLEmitterUtil.buildOverflowStyle(styleBuffer,style,true);
  }
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(cell);
  if (style == null) {
    if (fixedCellHeight) {
      styleBuffer.append(""String_Node_Str"");
    }
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildMargins(styleBuffer,style);
  if (fixedCellHeight) {
    styleBuffer.append(""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildBorders(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}","/** 
 * Build the style of cell content.
 */
public void buildCellStyle(ICellContent cell,StringBuffer styleBuffer,boolean isHead,boolean fixedCellHeight){
  IStyle style=cell.getStyle();
  if (style == null) {
    return;
  }
  if (fixedReport) {
    HTMLEmitterUtil.buildOverflowStyle(styleBuffer,style,true);
  }
  CSSValue display=style.getProperty(IStyle.STYLE_DISPLAY);
  if (IStyle.NONE_VALUE == display) {
    styleBuffer.append(""String_Node_Str"");
  }
  style=getElementStyle(cell);
  if (style == null) {
    if (fixedCellHeight) {
      styleBuffer.append(""String_Node_Str"");
    }
    return;
  }
  AttributeBuilder.buildFont(styleBuffer,style);
  AttributeBuilder.buildMargins(styleBuffer,style);
  if (fixedCellHeight) {
    styleBuffer.append(""String_Node_Str"");
  }
 else {
    AttributeBuilder.buildPaddings(styleBuffer,style);
  }
  AttributeBuilder.buildBorders(styleBuffer,style);
  AttributeBuilder.buildBackground(styleBuffer,style,reportEmitter);
  AttributeBuilder.buildText(styleBuffer,style);
  AttributeBuilder.buildVisual(styleBuffer,style);
  AttributeBuilder.buildTextDecoration(styleBuffer,style);
}",0.9824403421882036
67340,"/** 
 * build overflow style which displays the vertical or horizontal scrollbar automatically if content inside the div tag exceed the limit in any aspect.
 * @param buf - the buffer to build the overflow style
 * @param style - the style of current report item
 * @param outputHidden - whether to output the overflow property with hidden value
 */
public static void buildOverflowStyle(StringBuffer buf,IStyle style,boolean outputHidden){
  String overflow=style.getOverflow();
  if (outputHidden || (overflow != null && !CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE.equals(overflow))) {
    buf.append(""String_Node_Str"");
    buf.append(overflow != null ? overflow : CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE);
    buf.append(""String_Node_Str"");
  }
}","/** 
 * build overflow style which displays the vertical or horizontal scrollbar automatically if content inside the div tag exceed the limit in any aspect.
 * @param buf - the buffer to build the overflow style
 * @param style - the style of current report item
 * @param outputHidden - whether to output the overflow property with hidden value
 */
public static void buildOverflowStyle(StringBuffer buf,IStyle style,boolean outputHidden){
  if (style != null) {
    String overflow=style.getOverflow();
    if (outputHidden || (overflow != null && !CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE.equals(overflow))) {
      buf.append(""String_Node_Str"");
      buf.append(overflow != null ? overflow : CSSConstants.CSS_OVERFLOW_HIDDEN_VALUE);
      buf.append(""String_Node_Str"");
    }
  }
}",0.974493132766514
67341,"private void setDuplex(String duplex){
  if (duplex != null && !""String_Node_Str"".equalsIgnoreCase(duplex)) {
    String duplexValue=duplex;
    String tumbleValue=""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
      duplexValue=""String_Node_Str"";
    }
    out.println(""String_Node_Str"" + duplexValue);
    out.println(""String_Node_Str"" + tumbleValue + ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}","private void setDuplex(String duplex){
  if (duplex != null && !""String_Node_Str"".equalsIgnoreCase(duplex)) {
    String duplexValue=duplex;
    String tumbleValue=""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
      tumbleValue=""String_Node_Str"";
    }
    out.println(""String_Node_Str"" + duplexValue);
    out.println(""String_Node_Str"" + tumbleValue + ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}",0.7590361445783133
67342,"public void addEntry(String sText,int iColumn) throws IllegalArgumentException {
  if (iColumn > cells.length) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{String.valueOf(iColumn),String.valueOf(cells.length)}));
  }
  cells[iColumn].add(sText);
  if (cells[iColumn].size() > iMaxRowIndex) {
    iMaxRowIndex=cells[iColumn].size();
    updateScrollbars();
  }
}","public void addEntry(String sText,int iColumn) throws IllegalArgumentException {
  if (iColumn > cells.length) {
    throw new IllegalArgumentException(Messages.getString(""String_Node_Str"",new Object[]{String.valueOf(iColumn),String.valueOf(cells.length)}));
  }
  if (sText != null && sText.indexOf('\n') > -1) {
    sText=sText.replaceAll(""String_Node_Str"",""String_Node_Str"");
  }
  cells[iColumn].add(sText);
  if (cells[iColumn].size() > iMaxRowIndex) {
    iMaxRowIndex=cells[iColumn].size();
    updateScrollbars();
  }
}",0.8715203426124197
67343,"public void startPage(float pageWidth,float pageHeight){
  this.pageHeight=pageHeight;
  out.println(""String_Node_Str"" + pageIndex + ""String_Node_Str""+ pageIndex);
  out.println(""String_Node_Str"" + (int)Math.round(pageWidth) + ""String_Node_Str""+ (int)Math.round(pageHeight));
  out.println(""String_Node_Str"");
  ++pageIndex;
}","public void startPage(float pageWidth,float pageHeight,String orientation){
  this.orientation=orientation;
  this.pageHeight=pageHeight;
  out.println(""String_Node_Str"" + pageIndex + ""String_Node_Str""+ pageIndex);
  out.println(""String_Node_Str"" + (int)Math.round(pageWidth) + ""String_Node_Str""+ (int)Math.round(pageHeight));
  out.println(""String_Node_Str"");
  if (orientation != null && orientation.equalsIgnoreCase(""String_Node_Str"")) {
    gSave();
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.print(""String_Node_Str"");
    out.println(pageHeight + ""String_Node_Str"");
  }
  setScale((int)pageHeight,scale);
  ++pageIndex;
}",0.6464646464646465
67344,"public void endPage(){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void endPage(){
  if (orientation != null && orientation.equalsIgnoreCase(""String_Node_Str"")) {
    gRestore();
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.1477272727272727
67345,"public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  this.scale=scale;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9705882352941176
67346,"public PostscriptPage(int pageWidth,int pageHeight,Color color,PostscriptWriter writer){
  super(pageWidth,pageHeight);
  writer.startPage(this.pageWidth,this.pageHeight);
  writer.fillPage(color);
  this.writer=writer;
  this.isDisposed=false;
}","public PostscriptPage(int pageWidth,int pageHeight,Color color,PostscriptWriter writer,String orientation){
  super(pageWidth,pageHeight);
  writer.startPage(this.pageWidth,this.pageHeight,orientation);
  writer.fillPage(color);
  this.writer=writer;
  this.isDisposed=false;
}",0.9407265774378584
67347,"public IPage newPage(int width,int height,Color backgroundColor){
  if (currentPage != null) {
    currentPage.dispose();
  }
  currentPage=new PostscriptPage(width,height,backgroundColor,writer);
  return currentPage;
}","public IPage newPage(int width,int height,Color backgroundColor){
  if (currentPage != null) {
    currentPage.dispose();
  }
  currentPage=new PostscriptPage(width,height,backgroundColor,writer,orientation);
  return currentPage;
}",0.9734513274336284
67348,"protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer();
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}","protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer();
  writer.startPage(pageWidth,pageHeight,""String_Node_Str"");
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}",0.9935483870967742
67349,"/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName) throws BirtException {
  try {
    Set<String> columnNamesForLevels=new HashSet<String>();
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      columnNamesForLevels.add(level.getColumnName());
      String exprString=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(level.getColumnName());
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        ExpressionHandle displayExprHandle=level.getExpressionProperty(ITabularLevelModel.DISPLAY_COLUMN_NAME_PROP);
        if (displayExprHandle != null) {
          query.addBinding(new Binding(meta.getName(),modelAdaptor.adaptJSExpression(displayExprHandle.getStringExpression(),displayExprHandle.getType())));
        }
      }
      if (level.getMemberACLExpression() != null && level.getMemberACLExpression().getExpression() != null) {
        String aclExprName=DataSetIterator.createLevelACLName(level.getName());
        IScriptExpression expr=modelAdaptor.adaptExpression((Expression)level.getMemberACLExpression().getValue());
        query.addBinding(new Binding(aclExprName,expr));
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(aclExprName,null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        metaList.add(meta);
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      if (ExpressionUtil.getColumnName(exprString) != null) {
        gd.setKeyExpression(exprString);
      }
 else {
        gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      }
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}","/** 
 * @param query
 * @param resultMetaList
 * @param levelNameColumnNamePair
 * @param hierHandle
 * @throws BirtException 
 */
private void prepareLevels(QueryDefinition query,TabularHierarchyHandle hierHandle,List metaList,String dimName,String levelColumnName) throws BirtException {
  try {
    List levels=hierHandle.getContents(TabularHierarchyHandle.LEVELS_PROP);
    for (int j=0; j < levels.size(); j++) {
      TabularLevelHandle level=(TabularLevelHandle)levels.get(j);
      DataSetIterator.ColumnMeta temp=null;
      String exprString=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
      int type=DataAdapterUtil.adaptModelDataType(level.getDataType());
      if (type == DataType.UNKNOWN_TYPE || type == DataType.ANY_TYPE)       type=DataType.STRING_TYPE;
      if (level.getDateTimeLevelType() != null) {
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(IGroupDefinition.NUMERIC_INTERVAL,DataType.INTEGER_TYPE,String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone())),DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(DataType.INTEGER_TYPE);
        exprString=DataSetIterator.createDateTransformerExpr(level.getDateTimeLevelType(),exprString);
      }
 else {
        IDataProcessor processor=null;
        if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType())) {
          int interval=GroupAdapter.intervalFromModel(level.getInterval());
          if (interval != IGroupDefinition.NO_INTERVAL)           processor=new DataSetIterator.DataProcessorWrapper(GroupCalculatorFactory.getGroupCalculator(interval,type,level.getIntervalBase(),level.getIntervalRange(),sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone()));
        }
 else         if (DesignChoiceConstants.LEVEL_TYPE_MIRRORED.equals(level.getLevelType())) {
          Iterator it=level.staticValuesIterator();
          List dispExpr=new ArrayList();
          List filterExpr=new ArrayList();
          while (it.hasNext()) {
            RuleHandle o=(RuleHandle)it.next();
            dispExpr.add(o.getDisplayExpression());
            filterExpr.add(o.getRuleExpression());
          }
          exprString=""String_Node_Str"";
          if (level.getDefaultValue() != null) {
            exprString+=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(level.getDefaultValue()) + ""String_Node_Str"";
          }
          for (int i=0; i < dispExpr.size(); i++) {
            String disp=""String_Node_Str"" + JavascriptEvalUtil.transformToJsConstants(String.valueOf(dispExpr.get(i))) + ""String_Node_Str"";
            String filter=String.valueOf(filterExpr.get(i));
            exprString+=""String_Node_Str"" + filter + ""String_Node_Str""+ disp+ ""String_Node_Str"";
          }
        }
        temp=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,level.getName()),processor,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
        temp.setDataType(type);
      }
      metaList.add(temp);
      Iterator it=level.attributesIterator();
      while (it.hasNext()) {
        LevelAttributeHandle levelAttr=(LevelAttributeHandle)it.next();
        IDataProcessor processor=null;
        String bindingExpr=null;
        if (level.getDateTimeLevelType() != null && DataSetIterator.DATE_TIME_ATTR_NAME.equals(levelAttr.getName())) {
          processor=new DataSetIterator.DateTimeAttributeProcessor(level.getDateTimeLevelType(),this.sessionContext.getDataEngineContext().getLocale(),sessionContext.getDataEngineContext().getTimeZone());
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelColumnName == null ? level.getColumnName() : levelColumnName);
        }
 else {
          bindingExpr=ExpressionUtil.createJSDataSetRowExpression(levelAttr.getName());
        }
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getAttributeColumnName(level.getName(),levelAttr.getName())),processor,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataAdapterUtil.adaptModelDataType(levelAttr.getDataType()));
        metaList.add(meta);
        query.addBinding(new Binding(meta.getName(),new ScriptExpression(bindingExpr)));
      }
      if (DesignChoiceConstants.LEVEL_TYPE_DYNAMIC.equals(level.getLevelType()) && level.getDisplayColumnName() != null) {
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(DataSetIterator.createLevelName(dimName,OlapExpressionUtil.getDisplayColumnName(level.getName())),null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        meta.setDataType(DataType.STRING_TYPE);
        metaList.add(meta);
        ExpressionHandle displayExprHandle=level.getExpressionProperty(ITabularLevelModel.DISPLAY_COLUMN_NAME_PROP);
        if (displayExprHandle != null) {
          query.addBinding(new Binding(meta.getName(),modelAdaptor.adaptJSExpression(displayExprHandle.getStringExpression(),displayExprHandle.getType())));
        }
      }
      if (level.getMemberACLExpression() != null && level.getMemberACLExpression().getExpression() != null) {
        String aclExprName=DataSetIterator.createLevelACLName(level.getName());
        IScriptExpression expr=modelAdaptor.adaptExpression((Expression)level.getMemberACLExpression().getValue());
        query.addBinding(new Binding(aclExprName,expr));
        DataSetIterator.ColumnMeta meta=new DataSetIterator.ColumnMeta(aclExprName,null,DataSetIterator.ColumnMeta.UNKNOWN_TYPE);
        metaList.add(meta);
      }
      String levelName=DataSetIterator.createLevelName(dimName,level.getName());
      query.addBinding(new Binding(levelName,new ScriptExpression(exprString,type)));
      GroupDefinition gd=new GroupDefinition(String.valueOf(query.getGroups().size()));
      if (ExpressionUtil.getColumnName(exprString) != null) {
        gd.setKeyExpression(exprString);
      }
 else {
        gd.setKeyExpression(ExpressionUtil.createJSRowExpression(levelName));
      }
      if (level.getLevelType() != null && level.getDateTimeLevelType() == null) {
        gd.setIntervalRange(level.getIntervalRange());
        gd.setIntervalStart(level.getIntervalBase());
        gd.setInterval(GroupAdapter.intervalFromModel(level.getInterval()));
      }
      if (level.getDateTimeLevelType() != null) {
        gd.setIntervalRange(level.getIntervalRange() == 0 ? 1 : level.getIntervalRange());
        gd.setIntervalStart(String.valueOf(DataSetIterator.getDefaultStartValue(level.getDateTimeLevelType(),level.getIntervalBase())));
        gd.setInterval(IGroupDefinition.NUMERIC_INTERVAL);
      }
      query.addGroup(gd);
    }
  }
 catch (  DataException e) {
    throw new AdapterException(e.getLocalizedMessage(),e);
  }
}",0.9762005351358964
67350,"/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}","/** 
 * @param cubeHandle
 * @param cubeMaterializer
 * @param stopSign
 * @throws BirtException 
 * @throws IOException
 * @throws BirtException
 * @throws DataException
 */
private void createCube(TabularCubeHandle cubeHandle,CubeMaterializer cubeMaterializer,Map appContext) throws BirtException {
  SecurityListener sl=new SecurityListener(this);
  sl.start(cubeHandle);
  Map<?,?> backupAppContext=new HashMap();
  if (appContext == null)   appContext=new HashMap();
  backupAppContext.putAll(appContext);
  Map<ReportElementHandle,QueryDefinition> queryMap=new HashMap<ReportElementHandle,QueryDefinition>();
  Map<ReportElementHandle,List<ColumnMeta>> metaMap=new HashMap<ReportElementHandle,List<ColumnMeta>>();
  prepareForCubeGeneration(cubeHandle,queryMap,metaMap);
  List measureNames=new ArrayList();
  List measureGroups=cubeHandle.getContents(CubeHandle.MEASURE_GROUPS_PROP);
  for (int i=0; i < measureGroups.size(); i++) {
    MeasureGroupHandle mgh=(MeasureGroupHandle)measureGroups.get(i);
    List measures=mgh.getContents(MeasureGroupHandle.MEASURES_PROP);
    for (int j=0; j < measures.size(); j++) {
      MeasureHandle measure=(MeasureHandle)measures.get(j);
      measureNames.add(measure.getName());
    }
  }
  IDimension[] dimensions=populateDimensions(cubeMaterializer,cubeHandle,appContext,queryMap,metaMap,sl);
  String[][] factTableKey=new String[dimensions.length][];
  String[][] dimensionKey=new String[dimensions.length][];
  boolean fromJoin=false;
  for (int i=0; i < dimensions.length; i++) {
    TabularDimensionHandle dim=(TabularDimensionHandle)cubeHandle.getDimension(dimensions[i].getName());
    TabularHierarchyHandle hier=(TabularHierarchyHandle)dim.getDefaultHierarchy();
    if (cubeHandle.getDataSet().equals(hier.getDataSet()) || hier.getDataSet() == null || isDateTimelDimension(hier)) {
      String[] keyNames=dimensions[i].getHierarchy().getLevels()[dimensions[i].getHierarchy().getLevels().length - 1].getKeyNames();
      factTableKey[i]=new String[keyNames.length];
      dimensionKey[i]=new String[keyNames.length];
      for (int j=0; j < keyNames.length; j++) {
        factTableKey[i][j]=dim.getName() + ""String_Node_Str"" + keyNames[j];
        dimensionKey[i][j]=keyNames[j];
      }
    }
 else {
      fromJoin=true;
      Iterator it=cubeHandle.joinConditionsIterator();
      if (!it.hasNext())       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,new String[]{cubeHandle.getDataSet().getName(),dim.getName(),cubeHandle.getName()});
      boolean foundJoinCondition=false;
      while (it.hasNext()) {
        DimensionConditionHandle dimCondHandle=(DimensionConditionHandle)it.next();
        if (dimCondHandle.getHierarchy().getName().equals(hier.getName())) {
          Iterator conditionIt=dimCondHandle.getJoinConditions().iterator();
          List dimensionKeys=new ArrayList();
          List factTableKeys=new ArrayList();
          while (conditionIt.hasNext()) {
            foundJoinCondition=true;
            DimensionJoinConditionHandle joinCondition=(DimensionJoinConditionHandle)conditionIt.next();
            String levelName=joinCondition.getLevelName();
            if (levelName != null && isAttribute(dimensions[i],levelName,joinCondition.getHierarchyKey())) {
              dimensionKeys.add(OlapExpressionUtil.getAttributeColumnName(getLevelName(dimensions[i],levelName),joinCondition.getHierarchyKey()));
            }
 else {
              String existLevelName=getLevelName(hier,joinCondition.getHierarchyKey());
              if (existLevelName != null) {
                dimensionKeys.add(existLevelName);
              }
 else {
                dimensionKeys.add(getDummyLevelNameForJointHierarchyKey(joinCondition.getHierarchyKey()));
              }
            }
            factTableKeys.add(OlapExpressionUtil.getQualifiedLevelName(dimensions[i].getName(),joinCondition.getCubeKey()));
          }
          factTableKey[i]=new String[factTableKeys.size()];
          dimensionKey[i]=new String[dimensionKeys.size()];
          for (int j=0; j < dimensionKeys.size(); j++) {
            factTableKey[i][j]=factTableKeys.get(j).toString();
            dimensionKey[i][j]=dimensionKeys.get(j).toString();
          }
        }
      }
      if (!foundJoinCondition)       throw new AdapterException(ResourceConstants.MISSING_JOIN_CONDITION,dim.getName());
    }
  }
  if (cubeHandle.autoPrimaryKey()) {
    QueryDefinition qd=queryMap.get(cubeHandle);
    if (!fromJoin) {
      List<ColumnMeta> metas=metaMap.get(cubeHandle);
      IBinding tempPKBinding=new Binding(DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle)),new ScriptExpression(""String_Node_Str""));
      qd.addBinding(tempPKBinding);
      DataSetIterator.ColumnMeta cm=new DataSetIterator.ColumnMeta(tempPKBinding.getBindingName(),null,DataSetIterator.ColumnMeta.LEVEL_KEY_TYPE);
      cm.setDataType(DataType.INTEGER_TYPE);
      metas.add(cm);
      dimensions=appendArray(dimensions,populateTempPKDimension(cubeMaterializer,cubeHandle,appContext));
      factTableKey=appendArray(factTableKey,new String[]{DataSetIterator.createLevelName(getCubeTempPKDimensionName(cubeHandle),getCubeTempPKFieldName(cubeHandle))});
      dimensionKey=appendArray(dimensionKey,new String[]{getCubeTempPKFieldName(cubeHandle)});
    }
    for (    Object measureName : measureNames) {
      IBinding b=(IBinding)qd.getBindings().get(measureName);
      if (b != null) {
        b.setAggrFunction(null);
        if (b.getAggregatOns() != null) {
          b.getAggregatOns().clear();
        }
      }
    }
  }
  sl.end();
  try {
    cubeMaterializer.createCube(cubeHandle.getQualifiedName(),factTableKey,dimensionKey,dimensions,new DataSetIterator(this,queryMap.get(cubeHandle),metaMap.get(cubeHandle),appContext),this.toStringArray(measureNames),computeMemoryBufferSize(appContext),dataEngine.getSession().getStopSign());
  }
 catch (  Exception e) {
    throw new AdapterException(ResourceConstants.CUBE_MEASURE_CREATION_ERROR,e);
  }
  appContext.clear();
  appContext.putAll(backupAppContext);
}",0.9945866141732284
67351,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(""String_Node_Str"");
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(""String_Node_Str"");
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.9982253021211864
67352,"private int[] getPaperSize(String paperSize){
  int width=595;
  int height=842;
  if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=792;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=1008;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=419;
    height=595;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=595;
    height=842;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=842;
    height=1191;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=499;
    height=709;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=729;
    height=1032;
  }
  return new int[]{width,height};
}","private int[] getPaperSize(String paperSize){
  if (paperSize == null || paperSize.trim().length() == 0)   return null;
  int width=595;
  int height=842;
  if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=792;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=1008;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=419;
    height=595;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=595;
    height=842;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=842;
    height=1191;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=499;
    height=709;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=729;
    height=1032;
  }
  return new int[]{width,height};
}",0.9549878345498783
67353,"public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  this.scale=scale;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  this.scale=scale;
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  if (pageSize != null) {
    int width=pageSize[0];
    int height=pageSize[1];
    setPaperSize(paperSize,width,height);
  }
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9774153074027604
67354,"/** 
 * Returns an iterator over the values in a list property, or <code>null</code> if the property is not a list property. The iterator returns a <code>StructureHandle</code> for each entry in the list. For highlight rules, the iterator returns a list of <code>HighlightRuleHandle</code>s.
 * @return An iterator over the values in a list property.
 * @see StructureHandle
 * @see StructureIterator
 */
public Iterator iterator(){
  if (isList()) {
    return new StructureIterator(this);
  }
 else   if (getTypeCode() == IPropertyType.LIST_TYPE) {
    return new SimpleIterator(this);
  }
  return Collections.EMPTY_LIST.iterator();
}","/** 
 * Returns an iterator over the values in a list property, or <code>null</code> if the property is not a list property. The iterator returns a <code>StructureHandle</code> for each entry in the list. For highlight rules, the iterator returns a list of <code>HighlightRuleHandle</code>s.
 * @return An iterator over the values in a list property.
 * @see StructureHandle
 * @see StructureIterator
 */
public Iterator iterator(){
  if (isList()) {
    return new StructureIterator(this);
  }
  int typeCode=getTypeCode();
  if (typeCode == IPropertyType.LIST_TYPE || (typeCode == IPropertyType.CONTENT_ELEMENT_TYPE && getDefn().isList())) {
    return new SimpleIterator(this);
  }
  return Collections.EMPTY_LIST.iterator();
}",0.9158741770299926
67355,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
 else {
      RenderOption taskOption=new RenderOption(renderOptions);
      paginate=taskOption.getBooleanOption(IRenderOption.HTML_PAGINATION,true);
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(executionContext.getRenderOption());
      paginate=htmlOption.getHtmlPagination();
    }
 else {
      RenderOption taskOption=new RenderOption(executionContext.getRenderOption());
      paginate=taskOption.getBooleanOption(IRenderOption.HTML_PAGINATION,true);
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9923076923076924
67356,"/** 
 * Populate the aggregation references, return whether the aggregation should  be calculated on OVERALL level, which is indicated by reference to ""dataSetRow"" java script object.
 * @param aggrReferences
 * @param expr
 * @param aggrMap
 * @return
 * @throws DataException
 */
private boolean popAggrRefFromScriptExpr(Set aggrReferences,IScriptExpression expr,Map aggrMap) throws DataException {
  try {
    List usedRowReferences=ExpressionUtil.extractColumnExpressions(expr.getText());
    boolean result=this.hasDataSetRowReference(expr);
    for (int i=0; i < usedRowReferences.size(); i++) {
      Object o=aggrMap.get(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName());
      if (o != null) {
        aggrReferences.add(o);
      }
 else {
        result=result || popAggrRefFromBaseExpr(aggrReferences,this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()).getExpression(),aggrMap);
      }
    }
    return result;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}","/** 
 * Populate the aggregation references, return whether the aggregation should  be calculated on OVERALL level, which is indicated by reference to ""dataSetRow"" java script object.
 * @param aggrReferences
 * @param expr
 * @param aggrMap
 * @return
 * @throws DataException
 */
private boolean popAggrRefFromScriptExpr(Set aggrReferences,IScriptExpression expr,Map aggrMap) throws DataException {
  try {
    List usedRowReferences=ExpressionUtil.extractColumnExpressions(expr.getText());
    boolean result=this.hasDataSetRowReference(expr);
    for (int i=0; i < usedRowReferences.size(); i++) {
      Object o=aggrMap.get(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName());
      if (o != null) {
        aggrReferences.add(o);
      }
 else {
        if (this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()) == null) {
          return false;
        }
        result=result || popAggrRefFromBaseExpr(aggrReferences,this.getBinding(((IColumnBinding)usedRowReferences.get(i)).getResultSetColumnName()).getExpression(),aggrMap);
      }
    }
    return result;
  }
 catch (  BirtException be) {
    throw DataException.wrap(be);
  }
}",0.9366071428571427
67357,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(""String_Node_Str"");
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(null);
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(null);
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.9968636093922184
67358,"public void addSimpleLevelFilter(SimpleLevelFilter simpleLevelFilter){
  simpleLevelFilters.add(simpleLevelFilter);
}","public void addSimpleLevelFilter(List<SimpleLevelFilter> simpleLevelFilter){
  simpleLevelFilters.addAll(simpleLevelFilter);
}",0.9629629629629628
67359,"/** 
 * @param aggregations
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet executeDimensionTableQuery(AggregationDefinition aggregations,StopSign stopSign) throws IOException, BirtException {
  DimLevel[] levels=aggregations.getLevels();
  String dimensionName=levels[0].getDimensionName();
  IDimension[] dimensions=cube.getDimesions();
  Dimension sourceDimension=null;
  for (int i=0; i < dimensions.length; i++) {
    if (dimensionName.equals(dimensions[i].getName())) {
      sourceDimension=(Dimension)dimensions[i];
      break;
    }
  }
  IDiskArray dimensionrow=getFiltedDistinctDiemensionRow(sourceDimension,levels,aggregations.getSortTypes(),stopSign);
  IAggregationResultSet resultSet=new AggregationResultSet(aggregations,dimensionrow,getKeyColumnName(aggregations),null);
  return resultSet;
}","/** 
 * @param aggregations
 * @param stopSign
 * @return
 * @throws IOException
 * @throws BirtException
 */
private IAggregationResultSet executeDimensionTableQuery(AggregationDefinition aggregations,StopSign stopSign) throws IOException, BirtException {
  DimLevel[] levels=aggregations.getLevels();
  String dimensionName=levels[0].getDimensionName();
  IDimension[] dimensions=cube.getDimesions();
  Dimension sourceDimension=null;
  for (int i=0; i < dimensions.length; i++) {
    if (dimensionName.equals(dimensions[i].getName())) {
      sourceDimension=(Dimension)dimensions[i];
      break;
    }
  }
  IDiskArray dimensionrow=getFiltedDistinctDiemensionRow(sourceDimension,levels,aggregations.getSortTypes(),stopSign);
  IAggregationResultSet resultSet=new AggregationResultSet(aggregations,dimensionrow,getKeyColumnName(aggregations),getAttributeColumnName(aggregations,sourceDimension));
  return resultSet;
}",0.9688195991091314
67360,"public void setEnableMultipleSheet(boolean enableMultipleSheet){
  setOption(OPTION_ENABLE_MULTIPLE_SHEET,enableMultipleSheet);
}","public void setEnableMultipleSheet(boolean enableMultipleSheet){
  setOption(OPTION_MULTIPLE_SHEET,enableMultipleSheet);
}",0.9721115537848606
67361,"public boolean isEnableMultipleSheet(){
  return getBooleanOption(OPTION_ENABLE_MULTIPLE_SHEET,false);
}","public boolean isEnableMultipleSheet(){
  return getBooleanOption(OPTION_MULTIPLE_SHEET,false);
}",0.965174129353234
67362,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
    paginate=htmlOption.getHtmlPagination();
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.971136401121557
67363,"public void close() throws DataException {
  try {
    List<T> keyList=new LinkedList<T>();
    keyList.addAll(this.numberAndIndex.keySet());
    if (keyList.size() == 0) {
      output.close();
      return;
    }
    Collections.sort(keyList,new NumberComparator<T>());
    int segs=(keyList.size() - 1) / BLOCKNUMBER + 1;
    IOUtil.writeInt(output,segs);
    long intOffset=output.getOffset();
    DataOutputStream dout=new DataOutputStream(output);
    long[] offsets=new long[segs];
    Object[] boundaryValues=new Object[segs];
    for (int i=0; i < segs; i++) {
      IOUtil.writeLong(dout,0);
      boundaryValues[i]=keyList.get(i * BLOCKNUMBER);
    }
    for (int i=0; i < boundaryValues.length; i++) {
      IOUtil.writeObject(dout,boundaryValues[i]);
    }
    for (int i=0; i < segs; i++) {
      offsets[i]=output.getOffset();
      IOUtil.writeInt(dout,i == segs - 1 ? keyList.size() % BLOCKNUMBER : BLOCKNUMBER);
      for (int j=i * BLOCKNUMBER; j < (i + 1) * BLOCKNUMBER && j < keyList.size(); j++) {
        IOUtil.writeObject(dout,keyList.get(j));
        IOUtil.writeList(dout,numberAndIndex.get(keyList.get(j)));
      }
    }
    output.seek(intOffset);
    for (int i=0; i < offsets.length; i++) {
      IOUtil.writeLong(dout,offsets[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public void close() throws DataException {
  try {
    List<T> keyList=new LinkedList<T>();
    keyList.addAll(this.numberAndIndex.keySet());
    if (keyList.size() == 0) {
      IOUtil.writeInt(output,0);
      output.close();
      return;
    }
    Collections.sort(keyList,new NumberComparator<T>());
    int segs=(keyList.size() - 1) / BLOCKNUMBER + 1;
    IOUtil.writeInt(output,segs);
    long intOffset=output.getOffset();
    DataOutputStream dout=new DataOutputStream(output);
    long[] offsets=new long[segs];
    Object[] boundaryValues=new Object[segs];
    for (int i=0; i < segs; i++) {
      IOUtil.writeLong(dout,0);
      boundaryValues[i]=keyList.get(i * BLOCKNUMBER);
    }
    for (int i=0; i < boundaryValues.length; i++) {
      IOUtil.writeObject(dout,boundaryValues[i]);
    }
    for (int i=0; i < segs; i++) {
      offsets[i]=output.getOffset();
      IOUtil.writeInt(dout,i == segs - 1 ? keyList.size() % BLOCKNUMBER : BLOCKNUMBER);
      for (int j=i * BLOCKNUMBER; j < (i + 1) * BLOCKNUMBER && j < keyList.size(); j++) {
        IOUtil.writeObject(dout,keyList.get(j));
        IOUtil.writeList(dout,numberAndIndex.get(keyList.get(j)));
      }
    }
    output.seek(intOffset);
    for (int i=0; i < offsets.length; i++) {
      IOUtil.writeLong(dout,offsets[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.9881847475832438
67364,"private void populateLists(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] saFontNames=ge.getAvailableFontFamilyNames(Locale.ENGLISH);
  String currentFont=ChartUIUtil.getFontName(fdCurrent);
  cmbFontNames.add(ChartUIUtil.FONT_AUTO);
  if (ChartUIUtil.FONT_AUTO.equals(currentFont)) {
    cmbFontNames.select(0);
  }
  for (int iC=0; iC < saFontNames.length; iC++) {
    cmbFontNames.add(saFontNames[iC]);
    if (saFontNames[iC].equalsIgnoreCase(currentFont)) {
      cmbFontNames.select(iC + 1);
    }
  }
  if (cmbFontNames.getSelectionIndex() == -1) {
    cmbFontNames.select(0);
  }
  if (isAlignmentEnabled && fdCurrent.getAlignment() != null && fdCurrent.getAlignment().isSetHorizontalAlignment() && fdCurrent.getAlignment().isSetVerticalAlignment()) {
    HorizontalAlignment ha=fdCurrent.getAlignment().getHorizontalAlignment();
    VerticalAlignment va=fdCurrent.getAlignment().getVerticalAlignment();
    if (HorizontalAlignment.LEFT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopLeft.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomLeft.setSelection(true);
      }
 else {
        btnACenterLeft.setSelection(true);
      }
    }
 else     if (HorizontalAlignment.RIGHT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopRight.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomRight.setSelection(true);
      }
 else {
        btnACenterRight.setSelection(true);
      }
    }
 else {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopCenter.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomCenter.setSelection(true);
      }
 else {
        btnACenter.setSelection(true);
      }
    }
  }
}","private void populateLists(){
  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
  String[] saFontNames=ge.getAvailableFontFamilyNames();
  String currentFont=ChartUIUtil.getFontName(fdCurrent);
  cmbFontNames.add(ChartUIUtil.FONT_AUTO);
  if (ChartUIUtil.FONT_AUTO.equals(currentFont)) {
    cmbFontNames.select(0);
  }
  for (int iC=0; iC < saFontNames.length; iC++) {
    cmbFontNames.add(saFontNames[iC]);
    if (saFontNames[iC].equalsIgnoreCase(currentFont)) {
      cmbFontNames.select(iC + 1);
    }
  }
  if (cmbFontNames.getSelectionIndex() == -1) {
    cmbFontNames.select(0);
  }
  if (isAlignmentEnabled && fdCurrent.getAlignment() != null && fdCurrent.getAlignment().isSetHorizontalAlignment() && fdCurrent.getAlignment().isSetVerticalAlignment()) {
    HorizontalAlignment ha=fdCurrent.getAlignment().getHorizontalAlignment();
    VerticalAlignment va=fdCurrent.getAlignment().getVerticalAlignment();
    if (HorizontalAlignment.LEFT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopLeft.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomLeft.setSelection(true);
      }
 else {
        btnACenterLeft.setSelection(true);
      }
    }
 else     if (HorizontalAlignment.RIGHT_LITERAL.equals(ha)) {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopRight.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomRight.setSelection(true);
      }
 else {
        btnACenterRight.setSelection(true);
      }
    }
 else {
      if (VerticalAlignment.TOP_LITERAL.equals(va)) {
        btnATopCenter.setSelection(true);
      }
 else       if (VerticalAlignment.BOTTOM_LITERAL.equals(va)) {
        btnABottomCenter.setSelection(true);
      }
 else {
        btnACenter.setSelection(true);
      }
    }
  }
}",0.9963617463617463
67365,"private final LevelHandle findLevelHandle(CubeHandle cube,ExpressionCodec exprCodec,Query query){
  if (query != null && query.isDefined() && exprCodec.isCubeBinding(query.getDefinition(),true)) {
    String bindingName=exprCodec.getBindingName();
    Iterator<ComputedColumnHandle> bindings=ChartItemUtil.getAllColumnBindingsIterator((ReportItemHandle)handle);
    while (bindings.hasNext()) {
      ComputedColumnHandle cc=bindings.next();
      if (cc.getName().equals(bindingName)) {
        String expr=cc.getExpression();
        if (ChartExpressionUtil.isDimensionExpresion(expr)) {
          String[] levels=ChartExpressionUtil.getLevelNameFromDimensionExpression(expr);
          return cube.getDimension(levels[0]).getDefaultHierarchy().getLevel(levels[1]);
        }
        break;
      }
    }
  }
  return null;
}","private final LevelHandle findLevelHandle(CubeHandle cube,ExpressionCodec exprCodec,Query query){
  if (query != null && query.isDefined() && exprCodec.isCubeBinding(query.getDefinition(),true)) {
    String bindingName=exprCodec.getBindingName();
    Iterator<ComputedColumnHandle> bindings=ChartItemUtil.getAllColumnBindingsIterator((ReportItemHandle)handle);
    while (bindings.hasNext()) {
      ComputedColumnHandle cc=bindings.next();
      if (cc.getName().equals(bindingName)) {
        String expr=cc.getExpression();
        if (ChartExpressionUtil.isDimensionExpresion(expr)) {
          String[] levels=ChartExpressionUtil.getLevelNameFromDimensionExpression(expr);
          if (cube.getDimension(levels[0]) != null) {
            return cube.getDimension(levels[0]).getDefaultHierarchy().getLevel(levels[1]);
          }
        }
        break;
      }
    }
  }
  return null;
}",0.9523809523809524
67366,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),zorder_hint);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,zorder_hint);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Number)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (isTransposed() ? dWidth != 0 : dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),zorder_hint);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight,zorder_hint);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? (i * iSharedUnitCount) + iSharedUnitIndex : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.9995031971666212
67367,"protected void initializeContentEmitter(IContentEmitter emitter,IReportExecutor executor) throws BirtException {
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IReportContext reportContext=executionContext.getReportContext();
  IRenderOption options=executionContext.getRenderOption();
  EngineEmitterServices services=new EngineEmitterServices(reportContext,options,configs);
  emitter.initialize(services);
}","protected void initializeContentEmitter(IContentEmitter emitter) throws BirtException {
  HashMap configs=engine.getConfig().getEmitterConfigs();
  IReportContext reportContext=executionContext.getReportContext();
  IRenderOption options=executionContext.getRenderOption();
  EngineEmitterServices services=new EngineEmitterServices(reportContext,options,configs);
  emitter.initialize(services);
}",0.969549330085262
67368,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setPageHandler(new LayoutPageHandler(((HTMLReportLayoutEngine)layoutEngine).getContext()));
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new LayoutEngine(executor,((HTMLReportLayoutEngine)layoutEngine).getContext(),emitter,renderOptions,executionContext,getDocumentTotalPage());
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setPageHandler(new LayoutPageHandler(((HTMLReportLayoutEngine)layoutEngine).getContext()));
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new LayoutEngine(executor,((HTMLReportLayoutEngine)layoutEngine).getContext(),emitter,renderOptions,executionContext,getDocumentTotalPage());
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}",0.9963927855711424
67369,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
    paginate=htmlOption.getHtmlPagination();
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
    paginate=htmlOption.getHtmlPagination();
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9984886649874056
67370,"/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter,executor);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
  }
}","/** 
 * runs the report
 * @throws EngineException throws exception when there is a run error
 */
protected void doRun() throws EngineException {
  if (progressMonitor != null) {
    progressMonitor.onProgress(IProgressMonitor.START_TASK,TASK_RUN);
  }
  loadDataSource();
  doValidateParameters();
  ReportDesignHandle design=executionContext.getReportDesign();
  if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(design.getLayoutPreference())) {
    executionContext.setFixedLayout(true);
    setupRenderOption();
    updateRtLFlag();
  }
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  openReportDocument();
  try {
    ReportRunnable newRunnable=writer.saveDesign(executionContext.getRunnable(),executionContext.getOriginalRunnable());
    executionContext.updateRunnable(newRunnable);
    writer.saveReportIR(executionContext.getReport());
    writer.saveParamters(inputValues);
    executionContext.openDataEngine();
synchronized (this) {
      if (!executionContext.isCanceled()) {
        documentBuilder=new ReportDocumentBuilder(executionContext,writer);
      }
    }
    if (documentBuilder != null) {
      if (pageHandler != null) {
        documentBuilder.setPageHandler(pageHandler);
      }
      IContentEmitter emitter=documentBuilder.getContentEmitter();
      IReportExecutor executor=new ReportExecutor(executionContext);
      executor=createReportExtensionExecutor(executor);
      executor=new ReportEmitterExecutor(executor,emitter);
      executor=new SuppressDuplciateReportExecutor(executor);
      if (executionContext.isFixedLayout()) {
        executor=new LocalizedReportExecutor(executionContext,executor);
      }
      executionContext.setExecutor(executor);
      initializeContentEmitter(emitter);
      documentBuilder.build();
    }
    executionContext.closeDataEngine();
  }
 catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
 finally {
    documentBuilder=null;
    closeFactory();
    writer.savePersistentObjects(executionContext.getGlobalBeans());
    closeReportDocument();
    if (pageHandler != null && !executionContext.isCanceled()) {
      int totalPage=(int)executionContext.getTotalPage();
      IReportDocumentInfo docInfo=new ReportDocumentInfo(executionContext,totalPage,true);
      pageHandler.onPage(totalPage,true,docInfo);
    }
    if (progressMonitor != null) {
      progressMonitor.onProgress(IProgressMonitor.END_TASK,TASK_RUN);
    }
  }
}",0.998392570101804
67371,"public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),true,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}","public IParameterDefn[] getParameterDefn(){
  return new IParameterDefn[]{new ParameterDefn(Constants.EXPRESSION_NAME,Constants.EXPRESSION_DISPLAY_NAME,false,true,SupportedDataTypes.CALCULATABLE,""String_Node_Str""),new ParameterDefn(""String_Node_Str"",Messages.getString(""String_Node_Str""),false,false,SupportedDataTypes.CALCULATABLE,""String_Node_Str"")};
}",0.99009900990099
67372,"private void createDynamicParamsPart(Composite parent){
  Composite comp=new Composite(parent,SWT.NULL);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin();
  layout.numColumns=2;
  comp.setLayout(layout);
  comp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label label=new Label(comp,SWT.NULL);
  label.setText(LABEL_PARAMETERS);
  new Label(comp,SWT.NULL);
  table=new Table(comp,SWT.FULL_SELECTION | SWT.BORDER);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=100;
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  int[] columnWidths=new int[]{120,100,120,135};
  String[] columns=new String[]{COLUMN_NAME,COLUMN_DATA_SET,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(true);
    column.setText(columns[i]);
    column.setWidth(columnWidths[i]);
  }
  table.setLayoutData(data);
  table.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      int index=table.getSelectionIndex();
      boolean setBtnEnable=true;
      if (index == -1) {
        setBtnEnable=false;
      }
      editBtn.setEnabled(setBtnEnable);
      delBtn.setEnabled(setBtnEnable);
    }
    public void focusLost(    FocusEvent e){
      int index=table.getSelectionIndex();
      boolean setBtnEnable=true;
      if (index == -1) {
        setBtnEnable=false;
      }
      editBtn.setEnabled(setBtnEnable);
      delBtn.setEnabled(setBtnEnable);
    }
  }
);
  valueTable=new TableViewer(table);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      Object param=((StructuredSelection)selection).getFirstElement();
      if (param != selectedParameter) {
        if (param instanceof ScalarParameterHandle) {
          try {
            saveParameterProperties();
            saveSortingProperties();
            selectedParameter=(ScalarParameterHandle)param;
            defaultValueList=selectedParameter.getDefaultValueList();
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
            valueTable.setSelection(new StructuredSelection(selectedParameter));
          }
          refreshParameterProperties();
          initSorttingArea();
          updateButtons();
        }
      }
    }
  }
);
  valueTable.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editParameter(selectedParameter);
    }
  }
);
  Composite composite=new Composite(comp,SWT.NULL);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  addBtn=new Button(composite,SWT.NONE);
  addBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      AddEditCascadingParameterDialog dialog=new AddEditCascadingParameterDialog(Messages.getString(""String_Node_Str""));
      if (dialog.open() != Dialog.OK) {
        return;
      }
      try {
        inputParameterGroup.getParameters().add(dialog.getParameter());
        for (int i=0; i < inputParameterGroup.getParameters().getCount() - 1; i++) {
          ScalarParameterHandle parameter=(ScalarParameterHandle)inputParameterGroup.getParameters().get(i);
          parameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE);
          List valueLisit=parameter.getDefaultValueList();
          if (valueLisit != null && valueLisit.size() > 0) {
            Expression expression=getFirstDefaultValue();
            valueLisit.clear();
            valueLisit.add(expression);
          }
          parameter.setDefaultValueList(valueLisit);
        }
      }
 catch (      ContentException e1) {
        ExceptionHandler.handle(e1);
      }
catch (      NameException e1) {
        ExceptionHandler.handle(e1);
      }
catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
      refreshValueTable();
      valueTable.setSelection(new StructuredSelection(dialog.getParameter()));
      updateButtons();
    }
  }
);
  editBtn=new Button(composite,SWT.NONE);
  editBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editParameter(selectedParameter);
    }
  }
);
  delBtn=new Button(composite,SWT.NONE);
  delBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
      updateButtons();
    }
  }
);
}","private void createDynamicParamsPart(Composite parent){
  Composite comp=new Composite(parent,SWT.NULL);
  GridLayout layout=UIUtil.createGridLayoutWithoutMargin();
  layout.numColumns=2;
  comp.setLayout(layout);
  comp.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Label label=new Label(comp,SWT.NULL);
  label.setText(LABEL_PARAMETERS);
  new Label(comp,SWT.NULL);
  table=new Table(comp,SWT.FULL_SELECTION | SWT.BORDER);
  GridData data=new GridData(GridData.FILL_HORIZONTAL);
  data.heightHint=100;
  table.setLinesVisible(true);
  table.setHeaderVisible(true);
  table.addKeyListener(new KeyAdapter(){
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        deleteRow();
      }
    }
  }
);
  int[] columnWidths=new int[]{120,100,120,135};
  String[] columns=new String[]{COLUMN_NAME,COLUMN_DATA_SET,COLUMN_VALUE,COLUMN_DISPLAY_TEXT};
  for (int i=0; i < columns.length; i++) {
    TableColumn column=new TableColumn(table,SWT.LEFT);
    column.setResizable(true);
    column.setText(columns[i]);
    column.setWidth(columnWidths[i]);
  }
  table.setLayoutData(data);
  table.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
      int index=table.getSelectionIndex();
      boolean setBtnEnable=true;
      if (index == -1) {
        setBtnEnable=false;
      }
      editBtn.setEnabled(setBtnEnable);
      delBtn.setEnabled(setBtnEnable);
    }
    public void focusLost(    FocusEvent e){
      int index=table.getSelectionIndex();
      boolean setBtnEnable=true;
      if (index == -1) {
        setBtnEnable=false;
      }
      editBtn.setEnabled(setBtnEnable);
      delBtn.setEnabled(setBtnEnable);
    }
  }
);
  valueTable=new TableViewer(table);
  valueTable.setColumnProperties(columns);
  valueTable.setContentProvider(contentProvider);
  valueTable.setLabelProvider(labelProvider);
  valueTable.addSelectionChangedListener(new ISelectionChangedListener(){
    public void selectionChanged(    SelectionChangedEvent event){
      ISelection selection=event.getSelection();
      Object param=((StructuredSelection)selection).getFirstElement();
      if (param != selectedParameter) {
        if (param instanceof ScalarParameterHandle) {
          try {
            saveParameterProperties();
            saveSortingProperties();
            selectedParameter=(ScalarParameterHandle)param;
            defaultValueList=selectedParameter.getDefaultValueList();
          }
 catch (          SemanticException e) {
            ExceptionHandler.handle(e);
            valueTable.setSelection(new StructuredSelection(selectedParameter));
          }
          refreshParameterProperties();
          initSorttingArea();
          updateButtons();
        }
      }
    }
  }
);
  valueTable.addDoubleClickListener(new IDoubleClickListener(){
    public void doubleClick(    DoubleClickEvent event){
      editParameter(selectedParameter);
    }
  }
);
  Composite composite=new Composite(comp,SWT.NULL);
  composite.setLayout(new GridLayout());
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  addBtn=new Button(composite,SWT.NONE);
  addBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  addBtn.setText(Messages.getString(""String_Node_Str""));
  addBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      AddEditCascadingParameterDialog dialog=new AddEditCascadingParameterDialog(Messages.getString(""String_Node_Str""));
      if (dialog.open() != Dialog.OK) {
        return;
      }
      try {
        inputParameterGroup.getParameters().add(dialog.getParameter());
        for (int i=0; i < inputParameterGroup.getParameters().getCount() - 1; i++) {
          ScalarParameterHandle parameter=(ScalarParameterHandle)inputParameterGroup.getParameters().get(i);
          parameter.setParamType(DesignChoiceConstants.SCALAR_PARAM_TYPE_SIMPLE);
          List valueLisit=parameter.getDefaultValueList();
          if (valueLisit != null && valueLisit.size() > 0) {
            Object expression=valueLisit.get(0);
            valueLisit.clear();
            valueLisit.add(expression);
          }
          parameter.setDefaultValueList(valueLisit);
        }
      }
 catch (      ContentException e1) {
        ExceptionHandler.handle(e1);
      }
catch (      NameException e1) {
        ExceptionHandler.handle(e1);
      }
catch (      SemanticException e1) {
        ExceptionHandler.handle(e1);
      }
      refreshValueTable();
      valueTable.setSelection(new StructuredSelection(dialog.getParameter()));
      updateButtons();
    }
  }
);
  editBtn=new Button(composite,SWT.NONE);
  editBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  editBtn.setText(Messages.getString(""String_Node_Str""));
  editBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      editParameter(selectedParameter);
    }
  }
);
  delBtn=new Button(composite,SWT.NONE);
  delBtn.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  delBtn.setText(Messages.getString(""String_Node_Str""));
  delBtn.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      deleteRow();
      updateButtons();
    }
  }
);
}",0.994619088077032
67373,"private void refreshParameterProperties(){
  if (selectedParameter == null) {
    clearParamProperties();
    setControlEnabled(false);
    initDefaultValueViewer();
    return;
  }
  setControlEnabled(true);
  paramNameEditor.setText(selectedParameter.getName());
  if (selectedParameter.getPromptText() == null) {
    promptText.setText(""String_Node_Str"");
  }
 else {
    promptText.setText(selectedParameter.getPromptText());
  }
  dataTypeChooser.setText(DATA_TYPE_CHOICE_SET.findChoice(selectedParameter.getDataType()).getDisplayName());
  if (getInputDisplayName() == null) {
    displayTypeChooser.clearSelection();
  }
 else {
    displayTypeChooser.setText(getInputDisplayName());
  }
  Expression expression=getFirstDefaultValue();
  String defaultValue=expression == null ? null : expression.getStringExpression();
  String expressionType=expression == null ? null : expression.getType();
  if (expressionType != null) {
    defaultValueChooser.setData(ExpressionButtonUtil.EXPR_TYPE,expressionType);
    ExpressionButton button=(ExpressionButton)defaultValueChooser.getData(ExpressionButtonUtil.EXPR_BUTTON);
    if (button != null)     button.refresh();
  }
  if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
    defaultValueChooser.setText(DEUtil.resolveNull(defaultValue));
  }
 else   if (defaultValue != null) {
    defaultValueChooser.setText(defaultValue);
  }
  helpTextEditor.setText(UIUtil.convertToGUIString(selectedParameter.getHelpText()));
  if (selectedParameter.getPropertyHandle(ScalarParameterHandle.LIST_LIMIT_PROP).isSet()) {
    listLimit.setText(String.valueOf(selectedParameter.getListlimit()));
  }
 else {
    listLimit.setText(""String_Node_Str"");
  }
  isRequired.setSelection(selectedParameter.isRequired());
  if (selectedParameter == inputParameterGroup.getParameters().get(inputParameterGroup.getParameters().getCount() - 1)) {
    isMultiple.setEnabled(true);
    isMultiple.setSelection(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(selectedParameter.getParamType()));
  }
 else {
    isMultiple.setEnabled(false);
    isMultiple.setSelection(false);
  }
  defaultValueList=selectedParameter.getDefaultValueList();
  initDefaultValueViewer();
  changeDataType(selectedParameter.getDataType());
  formatCategroy=selectedParameter.getCategory();
  formatPattern=selectedParameter.getPattern();
  updateFormatField();
}","private void refreshParameterProperties(){
  if (selectedParameter == null) {
    clearParamProperties();
    setControlEnabled(false);
    initDefaultValueViewer();
    return;
  }
  setControlEnabled(true);
  paramNameEditor.setText(selectedParameter.getName());
  if (selectedParameter.getPromptText() == null) {
    promptText.setText(""String_Node_Str"");
  }
 else {
    promptText.setText(selectedParameter.getPromptText());
  }
  dataTypeChooser.setText(DATA_TYPE_CHOICE_SET.findChoice(selectedParameter.getDataType()).getDisplayName());
  if (getInputDisplayName() == null) {
    displayTypeChooser.clearSelection();
  }
 else {
    displayTypeChooser.setText(getInputDisplayName());
  }
  Expression expression=getFirstDefaultValue();
  String defaultValue=expression == null ? null : expression.getStringExpression();
  String expressionType=expression == null ? null : expression.getType();
  if (expressionType != null) {
    defaultValueChooser.setData(ExpressionButtonUtil.EXPR_TYPE,expressionType);
    ExpressionButton button=(ExpressionButton)defaultValueChooser.getData(ExpressionButtonUtil.EXPR_BUTTON);
    if (button != null)     button.refresh();
  }
  if (getSelectedDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING)) {
    defaultValueChooser.setText(DEUtil.resolveNull(defaultValue));
  }
 else   if (defaultValue != null) {
    defaultValueChooser.setText(defaultValue);
  }
 else {
    defaultValueChooser.setText(""String_Node_Str"");
  }
  helpTextEditor.setText(UIUtil.convertToGUIString(selectedParameter.getHelpText()));
  if (selectedParameter.getPropertyHandle(ScalarParameterHandle.LIST_LIMIT_PROP).isSet()) {
    listLimit.setText(String.valueOf(selectedParameter.getListlimit()));
  }
 else {
    listLimit.setText(""String_Node_Str"");
  }
  isRequired.setSelection(selectedParameter.isRequired());
  if (selectedParameter == inputParameterGroup.getParameters().get(inputParameterGroup.getParameters().getCount() - 1)) {
    isMultiple.setEnabled(true);
    isMultiple.setSelection(DesignChoiceConstants.SCALAR_PARAM_TYPE_MULTI_VALUE.equals(selectedParameter.getParamType()));
  }
 else {
    isMultiple.setEnabled(false);
    isMultiple.setSelection(false);
  }
  defaultValueList=selectedParameter.getDefaultValueList();
  initDefaultValueViewer();
  changeDataType(selectedParameter.getDataType());
  formatCategroy=selectedParameter.getCategory();
  formatPattern=selectedParameter.getPattern();
  updateFormatField();
}",0.9868529170090388
67374,"public ISelectDataComponent getSeriesDataComponent(int seriesType,SeriesDefinition seriesDefn,ChartWizardContext context,String sTitle){
  if (seriesType == ISelectDataCustomizeUI.ORTHOGONAL_SERIES) {
    return new BaseDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_AGGREGATION,sTitle,seriesDefn,ChartUIUtil.getDataQuery(seriesDefn,0),context,sTitle);
  }
 else   if (seriesType == ISelectDataCustomizeUI.GROUPING_SERIES) {
    BaseDataDefinitionComponent ddc=new YOptionalDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_GROUP,ChartUIConstants.QUERY_OPTIONAL,seriesDefn,seriesDefn.getQuery(),context,sTitle);
    return ddc;
  }
  return new DefaultSelectDataComponent();
}","public ISelectDataComponent getSeriesDataComponent(int seriesType,SeriesDefinition seriesDefn,ChartWizardContext context,String sTitle){
  if (seriesType == ISelectDataCustomizeUI.ORTHOGONAL_SERIES) {
    return new BaseDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_AGGREGATION,ChartUIConstants.QUERY_VALUE,seriesDefn,ChartUIUtil.getDataQuery(seriesDefn,0),context,sTitle);
  }
 else   if (seriesType == ISelectDataCustomizeUI.GROUPING_SERIES) {
    BaseDataDefinitionComponent ddc=new YOptionalDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_GROUP,ChartUIConstants.QUERY_OPTIONAL,seriesDefn,seriesDefn.getQuery(),context,sTitle);
    return ddc;
  }
  return new DefaultSelectDataComponent();
}",0.9759887005649718
67375,"private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  Set<Integer> duplicatedIndex=new HashSet<Integer>();
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
      if (k != 0)       duplicatedIndex.add(positions.get(k));
    }
    this.calculator.finish(aggregationRows.get(i));
    int baseIndex=0;
    Iterator<Integer> iter=duplicatedIndex.iterator();
    while (iter.hasNext()) {
      int index=iter.next().intValue();
      aggregationRows.remove(index - baseIndex);
      baseIndex++;
    }
    duplicatedIndex.clear();
  }
}","private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  Set<Integer> duplicatedIndex=new LinkedHashSet<Integer>();
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
      if (k != 0)       duplicatedIndex.add(positions.get(k));
    }
    this.calculator.finish(aggregationRows.get(i));
    int baseIndex=0;
    Iterator<Integer> iter=duplicatedIndex.iterator();
    while (iter.hasNext()) {
      int index=iter.next().intValue();
      aggregationRows.remove(index - baseIndex);
      baseIndex++;
    }
    duplicatedIndex.clear();
  }
}",0.9963636363636365
67376,"/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
  initMeasureNavigator();
}","/** 
 * @param view
 * @param result
 * @param relationMap
 * @param manager
 */
public AggregationAccessor(BirtCubeView view,IResultSet result,Map relationMap){
  this.resultSet=result;
  this.view=view;
  this.relationMap=relationMap;
  this.dimensionPrepared=false;
  this.dimensionCursorMap=new HashMap();
  if (result == null || result.getMeasureResult() == null)   return;
  this.currentPosition=new int[this.resultSet.getMeasureResult().length];
  for (int i=0; i < this.resultSet.getMeasureResult().length; i++) {
    try {
      if (this.resultSet.getMeasureResult()[i].getQueryResultSet().length() > 0) {
        this.resultSet.getMeasureResult()[i].getQueryResultSet().seek(0);
        currentPosition[i]=0;
      }
 else {
        currentPosition[i]=-1;
      }
    }
 catch (    IOException e) {
    }
  }
  initMeasureNavigator();
}",0.95491043854231
67377,"private void initMeasureNavigator(){
  IEdgeAxis[] edgeAxises=this.resultSet.getMeasureResult();
  int measureMaxSize=0;
  for (int i=0; i < edgeAxises.length; i++) {
    if (edgeAxises[i].getQueryResultSet().getAllLevels() != null && edgeAxises[i].getQueryResultSet().getAllLevels().length > measureMaxSize) {
      maxAggregationResultSet=edgeAxises[i].getQueryResultSet();
      measureMaxSize=edgeAxises[i].getQueryResultSet().getAllLevels().length;
    }
  }
  Iterator iterator=relationMap.values().iterator();
  int relationMaxLevelSize=0;
  maxRelationship=new Relationship(new ArrayList(),new ArrayList(),new ArrayList());
  while (iterator.hasNext()) {
    Relationship relation=(Relationship)iterator.next();
    int levelSize=relation.getLevelListOnColumn().size() + relation.getLevelListOnPage().size() + relation.getLevelListOnRow().size();
    if (levelSize > relationMaxLevelSize) {
      relationMaxLevelSize=levelSize;
      maxRelationship=relation;
    }
  }
  if (this.view.getRowEdgeView() != null) {
    rowEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getRowEdgeView()).getEdgeCursor();
  }
  if (this.view.getColumnEdgeView() != null) {
    columnEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getColumnEdgeView()).getEdgeCursor();
  }
  if (this.view.getPageEdgeView() != null) {
    pageEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getPageEdgeView()).getEdgeCursor();
  }
  DimLevel[] measureLevels=new DimLevel[0];
  if (maxAggregationResultSet != null) {
    measureLevels=maxAggregationResultSet.getAllLevels();
  }
  rowLevelIndexs=new int[maxRelationship.getLevelListOnRow().size()];
  for (int i=0; i < rowLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnRow().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       rowLevelIndexs[i]=j;
    }
  }
  columnLevelIndexs=new int[maxRelationship.getLevelListOnColumn().size()];
  for (int i=0; i < columnLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnColumn().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       columnLevelIndexs[i]=j;
    }
  }
  pageLevelIndexs=new int[maxRelationship.getLevelListOnPage().size()];
  for (int i=0; i < pageLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnPage().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       pageLevelIndexs[i]=j;
    }
  }
}","private void initMeasureNavigator(){
  IEdgeAxis[] edgeAxises=this.resultSet.getMeasureResult();
  int measureMaxSize=0;
  for (int i=0; i < edgeAxises.length; i++) {
    if (edgeAxises[i].getQueryResultSet().getAllLevels() != null && edgeAxises[i].getQueryResultSet().getAllLevels().length > measureMaxSize) {
      maxAggregationResultSet=edgeAxises[i].getQueryResultSet();
      measureMaxSize=edgeAxises[i].getQueryResultSet().getAllLevels().length;
    }
  }
  Iterator iterator=relationMap.values().iterator();
  int relationMaxLevelSize=0;
  maxRelationship=new Relationship(new ArrayList(),new ArrayList(),new ArrayList());
  while (iterator.hasNext()) {
    Relationship relation=(Relationship)iterator.next();
    int levelSize=relation.getLevelListOnColumn().size() + relation.getLevelListOnPage().size() + relation.getLevelListOnRow().size();
    if (levelSize > relationMaxLevelSize) {
      relationMaxLevelSize=levelSize;
      maxRelationship=relation;
    }
  }
  DimLevel[] measureLevels=new DimLevel[0];
  if (maxAggregationResultSet != null) {
    measureLevels=maxAggregationResultSet.getAllLevels();
  }
  rowLevelIndexs=new int[maxRelationship.getLevelListOnRow().size()];
  for (int i=0; i < rowLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnRow().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       rowLevelIndexs[i]=j;
    }
  }
  columnLevelIndexs=new int[maxRelationship.getLevelListOnColumn().size()];
  for (int i=0; i < columnLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnColumn().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       columnLevelIndexs[i]=j;
    }
  }
  pageLevelIndexs=new int[maxRelationship.getLevelListOnPage().size()];
  for (int i=0; i < pageLevelIndexs.length; i++) {
    DimLevel level=(DimLevel)maxRelationship.getLevelListOnPage().get(i);
    for (int j=0; j < measureLevels.length; j++) {
      if (level.equals(measureLevels[j]))       pageLevelIndexs[i]=j;
    }
  }
}",0.9085444396736796
67378,"private Map getCurrentValueOnEdge(String aggrName) throws OLAPException {
  EdgeCursor rowEdgeCursor=null, columnEdgeCursor=null, pageEdgeCursor=null;
  List columnDimList=null, rowDimList=null, pageDimList=null;
  if (this.view.getRowEdgeView() != null) {
    rowEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getRowEdgeView()).getEdgeCursor();
    if (rowEdgeCursor != null)     rowDimList=rowEdgeCursor.getDimensionCursor();
  }
  if (this.view.getColumnEdgeView() != null) {
    columnEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getColumnEdgeView()).getEdgeCursor();
    if (columnEdgeCursor != null)     columnDimList=columnEdgeCursor.getDimensionCursor();
  }
  if (this.view.getPageEdgeView() != null) {
    pageEdgeCursor=(EdgeCursor)((BirtEdgeView)this.view.getPageEdgeView()).getEdgeCursor();
    if (pageEdgeCursor != null)     pageDimList=pageEdgeCursor.getDimensionCursor();
  }
  Relationship relation=(Relationship)this.relationMap.get(aggrName);
  List pageLevelList=relation.getLevelListOnPage();
  List columnLevelList=relation.getLevelListOnColumn();
  List rowLevelList=relation.getLevelListOnRow();
  Map valueMap=new HashMap();
  if (columnLevelList.isEmpty() && rowLevelList.isEmpty() && pageLevelList.isEmpty())   return null;
  for (int index=0; index < pageLevelList.size(); index++) {
    DimLevel level=(DimLevel)pageLevelList.get(index);
    DimensionCursor cursor=(DimensionCursor)pageDimList.get(index);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < columnLevelList.size(); i++) {
    DimLevel level=(DimLevel)columnLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)columnDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < rowLevelList.size(); i++) {
    DimLevel level=(DimLevel)rowLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)rowDimList.get(i);
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  return valueMap;
}","private Map getCurrentValueOnEdge(String aggrName) throws OLAPException {
  if (!this.dimensionPrepared) {
    this.prepareDimensionCursor();
    this.dimensionPrepared=true;
  }
  Relationship relation=(Relationship)this.relationMap.get(aggrName);
  List pageLevelList=relation.getLevelListOnPage();
  List columnLevelList=relation.getLevelListOnColumn();
  List rowLevelList=relation.getLevelListOnRow();
  Map valueMap=new HashMap();
  if (columnLevelList.isEmpty() && rowLevelList.isEmpty() && pageLevelList.isEmpty())   return null;
  for (int index=0; index < pageLevelList.size(); index++) {
    DimLevel level=(DimLevel)pageLevelList.get(index);
    DimensionCursor cursor=(DimensionCursor)dimensionCursorMap.get(UniqueNamingUtil.getUniqueName(level.getDimensionName(),level.getLevelName()));
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < columnLevelList.size(); i++) {
    DimLevel level=(DimLevel)columnLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)dimensionCursorMap.get(UniqueNamingUtil.getUniqueName(level.getDimensionName(),level.getLevelName()));
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  for (int i=0; i < rowLevelList.size(); i++) {
    DimLevel level=(DimLevel)rowLevelList.get(i);
    DimensionCursor cursor=(DimensionCursor)dimensionCursorMap.get(UniqueNamingUtil.getUniqueName(level.getDimensionName(),level.getLevelName()));
    Object value=cursor.getObject(level.getLevelName());
    valueMap.put(level,value);
  }
  return valueMap;
}",0.6633879781420765
67379,"EdgeCursorImpl(BirtEdgeView view,boolean isPage,IEdgeAxis axis,CubeCursor cursor) throws OLAPException {
  super(new EdgeNavigator(axis),null);
  if (isPage)   pageOwner=cursor;
 else   ordinateOwner=cursor;
  view.setEdgeCursor(this);
  for (int i=view.getPageEndingIndex() + 1; i < axis.getAllDimensionAxis().length; i++) {
    dimensionCursorList.add(new DimensionCursorImpl(this,axis.getDimensionAxis(i),new DimensionNavigator(axis.getDimensionAxis(i))));
  }
}","EdgeCursorImpl(BirtEdgeView view,boolean isPage,IEdgeAxis axis,CubeCursor cursor) throws OLAPException {
  super(new EdgeNavigator(axis),null);
  if (isPage)   pageOwner=cursor;
 else   ordinateOwner=cursor;
  view.setEdgeCursor(this);
  dimensionCursorList=new ArrayList<DimensionCursorImpl>();
  for (int i=view.getPageEndingIndex() + 1; i < axis.getAllDimensionAxis().length; i++) {
    DimensionCursorImpl dimCursor=new DimensionCursorImpl(this,axis.getDimensionAxis(i),new DimensionNavigator(axis.getDimensionAxis(i)));
    if (axis.getDimensionAxis(i).getLevelDefinition() != null) {
      String uniqueName=UniqueNamingUtil.getUniqueName(axis.getDimensionAxis(i).getLevelDefinition().getHierarchy().getDimension().getName(),axis.getDimensionAxis(i).getLevelDefinition().getName());
      dimCursor.setName(uniqueName);
    }
    dimensionCursorList.add(dimCursor);
  }
}",0.5424739195230999
67380,"/** 
 * @param rs
 * @param view
 * @param isCalculatedMember
 * @throws OLAPException
 * @throws IOException
 */
private void populateDimensionAxis(IAggregationResultSet rs,BirtEdgeView view) throws IOException {
  List dimensionAxisList=new ArrayList();
  int index=-1, levelIndex=-1;
  if (!isCalculatedMember) {
    levelIndex=index=0;
    for (int i=0; i < view.getDimensionViews().size(); i++) {
      BirtDimensionView dv=(BirtDimensionView)(view.getDimensionViews().get(i));
      Iterator levelIter=dv.getMemberSelection().iterator();
      while (levelIter.hasNext()) {
        ILevelDefinition level=(ILevelDefinition)levelIter.next();
        DimensionAxis axis=null;
        axis=new DimensionAxis(this,rs,index,levelIndex);
        index++;
        levelIndex++;
        dimensionAxisList.add(axis);
      }
    }
  }
 else   if (isCalculatedMember) {
    DimensionAxis axis=new DimensionAxis(this,rs,index,0);
    dimensionAxisList.add(axis);
  }
  this.dimensionAxis=new DimensionAxis[dimensionAxisList.size()];
  for (int i=0; i < dimensionAxisList.size(); i++) {
    this.dimensionAxis[i]=(DimensionAxis)dimensionAxisList.get(i);
  }
}","/** 
 * @param rs
 * @param view
 * @param isCalculatedMember
 * @throws OLAPException
 * @throws IOException
 */
private void populateDimensionAxis(IAggregationResultSet rs,BirtEdgeView view) throws IOException {
  List dimensionAxisList=new ArrayList();
  int index=-1, levelIndex=-1;
  if (!isCalculatedMember) {
    levelIndex=index=0;
    for (int i=0; i < view.getDimensionViews().size(); i++) {
      BirtDimensionView dv=(BirtDimensionView)(view.getDimensionViews().get(i));
      Iterator levelIter=dv.getMemberSelection().iterator();
      while (levelIter.hasNext()) {
        ILevelDefinition level=(ILevelDefinition)levelIter.next();
        DimensionAxis axis=new DimensionAxis(this,rs,index,levelIndex);
        axis.setLevelDefinition(level);
        index++;
        levelIndex++;
        dimensionAxisList.add(axis);
      }
    }
  }
 else   if (isCalculatedMember) {
    DimensionAxis axis=new DimensionAxis(this,rs,index,0);
    dimensionAxisList.add(axis);
  }
  this.dimensionAxis=new DimensionAxis[dimensionAxisList.size()];
  for (int i=0; i < dimensionAxisList.size(); i++) {
    this.dimensionAxis[i]=(DimensionAxis)dimensionAxisList.get(i);
  }
}",0.974645466265578
67381,"protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}","protected void createFilterConditionContent(Composite innerParent){
  Composite anotherParent=new Composite(innerParent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  anotherParent.setLayoutData(gd);
  GridLayout glayout=new GridLayout(4,false);
  anotherParent.setLayout(glayout);
  Label lb=new Label(anotherParent,SWT.NONE);
  lb.setText(Messages.getString(""String_Node_Str""));
  Label lb2=new Label(anotherParent,SWT.NONE);
  lb2.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  new Label(anotherParent,SWT.NONE);
  Composite condition=new Composite(innerParent,SWT.NONE);
  gd=new GridData(GridData.FILL_BOTH);
  gd.heightHint=180;
  condition.setLayoutData(gd);
  glayout=new GridLayout(4,false);
  condition.setLayout(glayout);
  expression=new Combo(condition,SWT.NONE);
  GridData gdata=new GridData();
  gdata.widthHint=100;
  expression.setLayoutData(gdata);
  expression.addListener(SWT.Selection,comboModifyListener);
  if (expression.getItemCount() == 0) {
    expression.add(DEUtil.resolveNull(null));
  }
  expression.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      if (expression.getText().equals(VALUE_OF_THIS_DATA_ITEM) && designHandle instanceof DataItemHandle) {
        expression.setText(DEUtil.getColumnExpression(((DataItemHandle)designHandle).getResultSetColumn()));
      }
      updateButtons();
    }
  }
);
  ExpressionProvider ep=new ChartExpressionProvider(designHandle,context,ChartReportItemUIUtil.getExpressionBuilderStyle(IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS));
  expButton=ChartExpressionButtonUtil.createExpressionButton(condition,expression,(ExtendedItemHandle)designHandle,ep);
  expButton.addListener(new Listener(){
    public void handleEvent(    Event event){
      if (event.data instanceof String[]) {
        updateButtons();
        if (!expButton.getExpression().equals(fCurrentExpr)) {
          needRefreshList=true;
          fCurrentExpr=expButton.getExpression();
        }
      }
    }
  }
);
  expButton.setPredefinedQuery(getDataSetColumns());
  operator=new Combo(condition,SWT.READ_ONLY);
  for (int i=0; i < OPERATOR.length; i++) {
    operator.add(OPERATOR[i][0]);
  }
  operator.setVisibleItemCount(30);
  operator.addSelectionListener(operatorSelectionListener);
  create2ValueComposite(condition);
  if (inputHandle != null) {
    syncViewProperties();
  }
  lb=new Label(innerParent,SWT.SEPARATOR | SWT.HORIZONTAL);
  lb.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
}",0.9928712871287128
67382,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
    paginate=htmlOption.getHtmlPagination();
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  initReportVariable();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
 else {
      RenderOption taskOption=new RenderOption(renderOptions);
      paginate=taskOption.getBooleanOption(IRenderOption.HTML_PAGINATION,true);
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.7316994517897453
67383,"/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=0;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || aggregationCalculators[i].aggregation.getLevels() == null)) {
        aggregationIndex=i;
        maxLevelCount=levelIndex[i].length;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else       levelSize+=getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      if (measureSize == 0)       measureSize=getMeasureSize();
 else       measureSize+=getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    int bufferSize=(int)(this.memoryCacheSize / rowSize);
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
}","/** 
 * @throws IOException 
 * @throws DataException 
 */
private void prepareSortedStacks() throws DataException, IOException {
  allSortedFactRows=new ArrayList();
  int levelSize=0;
  int measureSize=0;
  while (true) {
    int maxLevelCount=0;
    int aggregationIndex=-1;
    int[] levelSortType=null;
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && ((aggregationCalculators[i].aggregation.getLevels() != null && aggregationCalculators[i].aggregation.getLevels().length > maxLevelCount) || aggregationCalculators[i].aggregation.getLevels() == null)) {
        aggregationIndex=i;
        maxLevelCount=levelIndex[i].length;
        levelSortType=aggregationCalculators[i].aggregation.getSortTypes();
      }
    }
    if (aggregationIndex == -1) {
      break;
    }
    if (memoryCacheSize != 0) {
      if (levelSize == 0)       levelSize=getLevelSize(aggregationCalculators[aggregationIndex].aggregation.getLevels());
 else {
        if (aggregationCalculators[aggregationIndex].aggregation.getLevels() != null)         levelSize+=getArraySize(aggregationCalculators[aggregationIndex].aggregation.getLevels().length);
      }
      if (measureSize == 0)       measureSize=getMeasureSize();
 else {
        if (dataSet4Aggregation.getMetaInfo().getMeasureInfos() != null)         measureSize+=getArraySize(dataSet4Aggregation.getMetaInfo().getMeasureInfos().length);
      }
    }
    Comparator comparator=new Row4AggregationComparator(levelSortType);
    DiskSortedStack diskSortedStack=new DiskSortedStack(100,false,comparator,Row4Aggregation.getCreator());
    if (memoryCacheSize == 0) {
      diskSortedStack.setBufferSize(10000);
      diskSortedStack.setUseMemoryOnly(true);
    }
    DiskSortedStackWrapper diskSortedStackReader=new DiskSortedStackWrapper(diskSortedStack,levelIndex[aggregationIndex]);
    this.allSortedFactRows.add(diskSortedStackReader);
    for (int i=0; i < aggregationCalculators.length; i++) {
      if (sortedFactRows[i] == null && cover(levelIndex[aggregationIndex],levelIndex[i])) {
        sortedFactRows[i]=diskSortedStackReader;
      }
    }
  }
  if (memoryCacheSize > 0) {
    int rowSize=16 + (4 + (levelSize + measureSize) - 1) / 8 * 8;
    int bufferSize=(int)(this.memoryCacheSize / rowSize);
    for (int i=0; i < allSortedFactRows.size(); i++) {
      DiskSortedStackWrapper diskSortedStackReader=(DiskSortedStackWrapper)allSortedFactRows.get(i);
      diskSortedStackReader.getDiskSortedStack().setBufferSize(bufferSize);
    }
  }
}",0.9381506429883648
67384,"private int getLevelSize(DimLevel[] dimLevel) throws DataException {
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
    ColumnInfo columnInfo=(dataSet4Aggregation.getMetaInfo()).getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return getObjectSize(dataType);
}","private int getLevelSize(DimLevel[] dimLevel) throws DataException {
  if (dimLevel == null || dimLevel.length == 0) {
    return 0;
  }
  int[] dataType=new int[dimLevel.length];
  for (int i=0; i < dimLevel.length; i++) {
    DimColumn dimColumn=new DimColumn(dimLevel[i].getDimensionName(),dimLevel[i].getLevelName(),dimLevel[i].getLevelName());
    ColumnInfo columnInfo=(dataSet4Aggregation.getMetaInfo()).getColumnInfo(dimColumn);
    dataType[i]=columnInfo.getDataType();
  }
  return getObjectSize(dataType);
}",0.9297520661157024
67385,"private int getMeasureSize() throws IOException {
  MeasureInfo[] measureInfo=dataSet4Aggregation.getMetaInfo().getMeasureInfos();
  int[] dataType=new int[measureInfo.length];
  for (int i=0; i < measureInfo.length; i++) {
    dataType[i]=measureInfo[i].getDataType();
  }
  return getObjectSize(dataType);
}","private int getMeasureSize() throws IOException {
  MeasureInfo[] measureInfo=dataSet4Aggregation.getMetaInfo().getMeasureInfos();
  if (measureInfo == null || measureInfo.length == 0)   return 0;
  int[] dataType=new int[measureInfo.length];
  for (int i=0; i < measureInfo.length; i++) {
    dataType[i]=measureInfo[i].getDataType();
  }
  return getObjectSize(dataType);
}",0.9035087719298246
67386,"private static int getArraySize(int length){
  return 16 + (4 + length * 4 - 1) / 8 * 8;
}","private static int getArraySize(int length){
  if (length == 0)   return 0;
  return 16 + (4 + length * 4 - 1) / 8 * 8;
}",0.8530805687203792
67387,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.INTEGER);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(new Integer(600));
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.STRING);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(""String_Node_Str"");
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.8684788114131352
67388,"public int getResolution(){
  return getIntOption(OPTION_RESOLUTION,600);
}","public String getResolution(){
  return getStringOption(OPTION_RESOLUTION);
}",0.8947368421052632
67389,"public void setResolution(int resolution){
  options.put(OPTION_RESOLUTION,resolution);
}","public void setResolution(String resolution){
  options.put(OPTION_RESOLUTION,resolution);
}",0.9723756906077348
67390,"private void doNew(){
  DataSetParameter newParam=null;
  if (isOdaDataSetHandle)   newParam=new OdaDataSetParameter();
 else   newParam=new DataSetParameter();
  int position=viewer.getViewer().getTable().getItemCount();
  newParam.setName(getUniqueName());
  newParam.setIsInput(true);
  newParam.setPosition(new Integer(position + 1));
  doEdit(newParam);
}","private void doNew(){
  DataSetParameter newParam=null;
  if (isOdaDataSetHandle)   newParam=new OdaDataSetParameter();
 else   newParam=new DataSetParameter();
  int position=viewer.getViewer().getTable().getItemCount();
  newParam.setName(getUniqueName());
  newParam.setIsInput(true);
  newParam.setPosition(new Integer(position + 1));
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(newParam,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
    stack.commit();
  }
 else {
    stack.rollback();
  }
}",0.6368715083798883
67391,"protected void doEdit(Object structureOrHandle){
  ParameterInputDialog dlg=new ParameterInputDialog(structureOrHandle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
  }
}","private void doEdit(){
  int index=viewer.getViewer().getTable().getSelectionIndex();
  if (index == -1)   return;
  DataSetParameterHandle handle=(DataSetParameterHandle)viewer.getViewer().getTable().getItem(index).getData();
  originalStructure=(DataSetParameter)handle.getStructure().copy();
  CommandStack stack=Utility.getCommandStack();
  stack.startTrans(Messages.getString(""String_Node_Str""));
  ParameterInputDialog dlg=new ParameterInputDialog(handle,isOdaDataSetHandle);
  if (dlg.open() == Window.OK) {
    viewer.getViewer().refresh();
    refreshMessage();
    refreshLinkedReportParamStatus();
    stack.commit();
  }
 else {
    stack.rollback();
  }
}",0.4893617021276595
67392,"protected void rollback(){
  DataSetParameter structure=getStructure(getStructureOrHandle());
  try {
    if (originalStructure != null) {
      structure.setName(originalStructure.getName());
      structure.setParameterDataType(originalStructure.getParameterDataType());
      structure.setIsInput(originalStructure.isInput());
      structure.setIsOutput(originalStructure.isOutput());
      structure.setDefaultValue(originalStructure.getDefaultValue());
      structure.setExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER,originalStructure.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER));
      if (isOdaDataSetHandle)       ((OdaDataSetParameter)structure).setParamName(((OdaDataSetParameter)originalStructure).getParamName());
      originalStructure=null;
    }
 else {
      parameters.removeItem(structure);
      viewer.getViewer().refresh();
    }
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  modelChanged=inputChanged;
}","protected void rollback(){
  modelChanged=inputChanged;
}",0.1102514506769826
67393,"private boolean isUniqueName(){
  DataSetParameter structure=getStructure(getStructureOrHandle());
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      DataSetParameterHandle handle=(DataSetParameterHandle)iter.next();
      if (structure != handle.getStructure() && handle.getName().equals(dataSetParamName.getText())) {
        return false;
      }
    }
  }
  return true;
}","private boolean isUniqueName(){
  DataSetParameter structure=getStructure(getStructureOrHandle());
  Iterator iter=parameters.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      DataSetParameterHandle handle=(DataSetParameterHandle)iter.next();
      if (originalStructure != null && dataSetParamName.getText().equals(originalStructure.getName())) {
        return true;
      }
 else       if (structure != handle.getStructure() && handle.getName().equals(dataSetParamName.getText())) {
        return false;
      }
    }
  }
  return true;
}",0.8126272912423625
67394,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.INTEGER);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(new Integer(600));
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.INTEGER);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(new Integer(0));
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.INTEGER);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(new Integer(600));
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.8402196873679764
67395,"@Override public String getNullsOrdering(){
  return this.source.getNullsOrdering();
}","public String getNullsOrdering(){
  return this.source.getNullsOrdering();
}",0.9382716049382716
67396,"@Override public ULocale getCompareLocale(){
  return this.source.getCompareLocale();
}","public ULocale getCompareLocale(){
  return this.source.getCompareLocale();
}",0.9390243902439024
67397,"@Override public String getNullsOrdering(){
  return null;
}","public String getNullsOrdering(){
  return null;
}",0.9090909090909092
67398,"@Override public ULocale getCompareLocale(){
  return null;
}","public ULocale getCompareLocale(){
  return null;
}",0.9107142857142856
67399,"public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(subDimensionIndex,combinedDimensionPosition.bytesValue());
      readMeasure=false;
      if (!isSelectedRow()) {
        if (!readMeasure) {
          if (allMeasuerSize != -1) {
            int n=currentSegment.skipBytes(allMeasuerSize);
            if (n == -1) {
              break;
            }
          }
 else           readMeasure();
        }
        continue;
      }
 else {
        if (!readMeasure)         readMeasure();
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}","public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(subDimensionIndex,combinedDimensionPosition.bytesValue());
      readMeasure=false;
      if (!isSelectedRow()) {
        if (!readMeasure) {
          if (!skipMeasure())           break;
        }
        continue;
      }
 else {
        if (!readMeasure)         readMeasure();
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}",0.8796728971962616
67400,"private void setResolution(int resolution){
  if (resolution > 0) {
    out.println(""String_Node_Str"" + resolution + ""String_Node_Str""+ resolution+ ""String_Node_Str"");
    out.println(""String_Node_Str"" + resolution + ""String_Node_Str""+ resolution+ ""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}","private void setResolution(String resolution){
  if (resolution != null && resolution.length() > 0) {
    int split=resolution.indexOf(""String_Node_Str"");
    if (split == -1) {
      split=resolution.indexOf(""String_Node_Str"");
    }
    if (split != -1) {
      int xResolution=new Integer(resolution.substring(0,split).trim());
      int yResolution=new Integer(resolution.substring(split + 1,resolution.length()).trim());
      if (xResolution > 0 && yResolution > 0) {
        out.println(""String_Node_Str"" + xResolution + ""String_Node_Str""+ yResolution+ ""String_Node_Str"");
        out.println(""String_Node_Str"" + xResolution + ""String_Node_Str""+ yResolution+ ""String_Node_Str"");
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"");
        out.println(""String_Node_Str"");
      }
    }
  }
}",0.5140961857379768
67401,"public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,int resolution,boolean color,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,String resolution,boolean color,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(color);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.994256541161455
67402,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  int paperTrayCode=renderOption.getIntOption(PostscriptRenderOption.OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTrayCode,duplex,copies,collate,resolution,color,scale);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  int paperTrayCode=renderOption.getIntOption(PostscriptRenderOption.OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  String resolution=renderOption.getStringOption(IPostscriptRenderOption.OPTION_RESOLUTION);
  boolean color=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_COLOR,true);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTrayCode,duplex,copies,collate,resolution,color,scale);
}",0.991142604074402
67403,int getResolution();,String getResolution();,0.8837209302325582
67404,void setResolution(int resolution);,void setResolution(String resolution);,0.9315068493150684
67405,"public void computePageProperties(IPageContent page){
  pageWidth=WordUtil.convertTo(page.getPageWidth(),0,reportDpi);
  pageHeight=WordUtil.convertTo(page.getPageHeight(),0,reportDpi);
  footerHeight=WordUtil.convertTo(page.getFooterHeight(),0,reportDpi);
  headerHeight=WordUtil.convertTo(page.getHeaderHeight(),0,reportDpi);
  topMargin=WordUtil.convertTo(page.getMarginTop(),0,reportDpi);
  bottomMargin=WordUtil.convertTo(page.getMarginBottom(),0,reportDpi);
  leftMargin=WordUtil.convertTo(page.getMarginLeft(),0,reportDpi);
  rightMargin=WordUtil.convertTo(page.getMarginRight(),0,reportDpi);
  contentWidth=pageWidth - leftMargin - rightMargin;
  orientation=page.getOrientation();
}","public void computePageProperties(IPageContent page){
  pageWidth=WordUtil.convertTo(page.getPageWidth(),11906,reportDpi);
  pageHeight=WordUtil.convertTo(page.getPageHeight(),16838,reportDpi);
  footerHeight=WordUtil.convertTo(page.getFooterHeight(),0,reportDpi);
  headerHeight=WordUtil.convertTo(page.getHeaderHeight(),0,reportDpi);
  topMargin=WordUtil.convertTo(page.getMarginTop(),0,reportDpi);
  bottomMargin=WordUtil.convertTo(page.getMarginBottom(),0,reportDpi);
  leftMargin=WordUtil.convertTo(page.getMarginLeft(),0,reportDpi);
  rightMargin=WordUtil.convertTo(page.getMarginRight(),0,reportDpi);
  contentWidth=pageWidth - leftMargin - rightMargin;
  orientation=page.getOrientation();
}",0.4273381294964029
67406,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption scale=new ConfigurableOption(PostscriptRenderOption.OPTION_SCALE);
  scale.setDisplayName(getMessage(""String_Node_Str""));
  scale.setDataType(IConfigurableOption.DataType.INTEGER);
  scale.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  scale.setDefaultValue(new Integer(100));
  scale.setToolTip(null);
  scale.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption resolution=new ConfigurableOption(PostscriptRenderOption.OPTION_RESOLUTION);
  resolution.setDisplayName(getMessage(""String_Node_Str""));
  resolution.setDataType(IConfigurableOption.DataType.INTEGER);
  resolution.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  resolution.setDefaultValue(new Integer(600));
  resolution.setToolTip(null);
  resolution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption color=new ConfigurableOption(PostscriptRenderOption.OPTION_COLOR);
  color.setDisplayName(getMessage(""String_Node_Str""));
  color.setDataType(IConfigurableOption.DataType.BOOLEAN);
  color.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  color.setDefaultValue(Boolean.TRUE);
  color.setToolTip(null);
  color.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,scale,resolution,color,chartDpi};
}",0.6102606053523432
67407,"protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer(null,null,null,1,false,600,false,100);
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}","protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer();
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}",0.9871794871794872
67408,"private void validateGanttEntryData(Object[] obja) throws ChartException {
  boolean valid=true;
  if (obja == null) {
    valid=false;
  }
 else   if (obja.length != 3) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
 else {
    for (int i=0; i < obja.length - 1; i++) {
      if (!(obja[i] instanceof CDateTime)) {
        valid=false;
        break;
      }
    }
  }
  if (!valid) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.VALIDATION,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
}","private void validateGanttEntryData(Object[] obja) throws ChartException {
  boolean valid=true;
  if (obja == null) {
    valid=false;
  }
 else   if (obja.length != 3) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
 else {
    for (int i=0; i < obja.length - 1; i++) {
      if (obja[i] != null && !(obja[i] instanceof CDateTime)) {
        valid=false;
        break;
      }
    }
  }
  if (!valid) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.VALIDATION,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
}",0.985373364126251
67409,"@SuppressWarnings(""String_Node_Str"") public void updateRowExpressions(Map newExpressions){
  CompatibleExpressionUpdater.update(cm,newExpressions);
}","public void updateRowExpressions(Map newExpressions){
  CompatibleExpressionUpdater.update(cm,newExpressions);
}",0.8582375478927203
67410,"public List<SemanticException> validate(){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  List<SemanticException> list=new ArrayList<SemanticException>();
  if (cm != null) {
    if (ChartItemUtil.getBindingDataSet(handle) == null && ChartCubeUtil.getBindingCube(handle) == null) {
      list.add(new SemanticError(handle.getElement(),SemanticError.DESIGN_EXCEPTION_MISSING_DATA_SET));
    }
    SeriesDefinition bsd=ChartUtil.getBaseSeriesDefinitions(cm).get(0);
    List<Query> bsQuery=bsd.getDesignTimeSeries().getDataDefinition();
    if (bsQuery.size() == 0 || bsQuery.get(0) == null || !bsQuery.get(0).isDefined()) {
      ExtendedElementException exception=new ExtendedElementException(getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",Messages.getResourceBundle());
      exception.setProperty(ExtendedElementException.LOCALIZED_MESSAGE,Messages.getString(""String_Node_Str"",Messages.getString(cm instanceof ChartWithAxes ? ""String_Node_Str"" : ""String_Node_Str"")));
      list.add(exception);
    }
    ExtendedElementException yException=new ExtendedElementException(getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",Messages.getResourceBundle());
    yException.setProperty(ExtendedElementException.LOCALIZED_MESSAGE,Messages.getString(""String_Node_Str"",Messages.getString(cm instanceof ChartWithAxes ? ""String_Node_Str"" : ""String_Node_Str"")));
    List<SeriesDefinition> ysds=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
    if (ysds.size() == 0) {
      list.add(yException);
    }
 else {
      SD:       for (      SeriesDefinition vsd : ysds) {
        Series series=vsd.getDesignTimeSeries();
        if (series.getDataDefinition().size() == 0) {
          list.add(yException);
          break SD;
        }
        for (        Query query : series.getDataDefinition()) {
          if (!query.isDefined()) {
            list.add(yException);
            break SD;
          }
        }
      }
    }
    try {
      checkScriptSyntax(cm.getScript());
    }
 catch (    RhinoException e) {
      logger.log(e);
      ExtendedElementException extendedException=new ExtendedElementException(this.getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",new Object[]{e.getLocalizedMessage()},Messages.getResourceBundle());
      extendedException.setProperty(ExtendedElementException.LINE_NUMBER,String.valueOf(e.lineNumber()));
      extendedException.setProperty(ExtendedElementException.SUB_EDITOR,""String_Node_Str"");
      list.add(extendedException);
    }
  }
 else {
    list.add(new SemanticError(handle.getElement(),SemanticError.DESIGN_EXCEPTION_UNSUPPORTED_ELEMENT));
  }
  return list;
}","public List<SemanticException> validate(){
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str""));
  List<SemanticException> list=new ArrayList<SemanticException>();
  DesignElementHandle container=handle.getContainer();
  do {
    if (container instanceof TemplateParameterDefinitionHandle) {
      return list;
    }
    container=container.getContainer();
  }
 while (container != null);
  if (cm != null) {
    if (ChartItemUtil.getBindingDataSet(handle) == null && ChartCubeUtil.getBindingCube(handle) == null) {
      list.add(new SemanticError(handle.getElement(),SemanticError.DESIGN_EXCEPTION_MISSING_DATA_SET));
    }
    SeriesDefinition bsd=ChartUtil.getBaseSeriesDefinitions(cm).get(0);
    List<Query> bsQuery=bsd.getDesignTimeSeries().getDataDefinition();
    if (bsQuery.size() == 0 || bsQuery.get(0) == null || !bsQuery.get(0).isDefined()) {
      ExtendedElementException exception=new ExtendedElementException(getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",Messages.getResourceBundle());
      exception.setProperty(ExtendedElementException.LOCALIZED_MESSAGE,Messages.getString(""String_Node_Str"",Messages.getString(cm instanceof ChartWithAxes ? ""String_Node_Str"" : ""String_Node_Str"")));
      list.add(exception);
    }
    ExtendedElementException yException=new ExtendedElementException(getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",Messages.getResourceBundle());
    yException.setProperty(ExtendedElementException.LOCALIZED_MESSAGE,Messages.getString(""String_Node_Str"",Messages.getString(cm instanceof ChartWithAxes ? ""String_Node_Str"" : ""String_Node_Str"")));
    List<SeriesDefinition> ysds=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
    if (ysds.size() == 0) {
      list.add(yException);
    }
 else {
      SD:       for (      SeriesDefinition vsd : ysds) {
        Series series=vsd.getDesignTimeSeries();
        if (series.getDataDefinition().size() == 0) {
          list.add(yException);
          break SD;
        }
        for (        Query query : series.getDataDefinition()) {
          if (!query.isDefined()) {
            list.add(yException);
            break SD;
          }
        }
      }
    }
    try {
      checkScriptSyntax(cm.getScript());
    }
 catch (    RhinoException e) {
      logger.log(e);
      ExtendedElementException extendedException=new ExtendedElementException(this.getHandle().getElement(),ChartReportItemPlugin.ID,""String_Node_Str"",new Object[]{e.getLocalizedMessage()},Messages.getResourceBundle());
      extendedException.setProperty(ExtendedElementException.LINE_NUMBER,String.valueOf(e.lineNumber()));
      extendedException.setProperty(ExtendedElementException.SUB_EDITOR,""String_Node_Str"");
      list.add(extendedException);
    }
  }
 else {
    list.add(new SemanticError(handle.getElement(),SemanticError.DESIGN_EXCEPTION_UNSUPPORTED_ELEMENT));
  }
  return list;
}",0.9598715890850722
67411,"public void close() throws DataException {
  try {
    List<T> keyList=new LinkedList<T>();
    keyList.addAll(this.numberAndIndex.keySet());
    Collections.sort(keyList,new NumberComparator<T>());
    int segs=keyList.size() / BLOCKNUMBER + 1;
    IOUtil.writeInt(output,segs);
    long intOffset=output.getOffset();
    DataOutputStream dout=new DataOutputStream(output);
    long[] offsets=new long[segs];
    Object[] boundaryValues=new Object[segs];
    for (int i=0; i < segs; i++) {
      IOUtil.writeLong(dout,0);
      boundaryValues[i]=keyList.get(i * BLOCKNUMBER);
    }
    for (int i=0; i < boundaryValues.length; i++) {
      IOUtil.writeObject(dout,boundaryValues[i]);
    }
    for (int i=0; i < segs; i++) {
      offsets[i]=output.getOffset();
      IOUtil.writeInt(dout,i == segs - 1 ? keyList.size() % BLOCKNUMBER : BLOCKNUMBER);
      for (int j=i * BLOCKNUMBER; j < (i + 1) * BLOCKNUMBER && j < keyList.size(); j++) {
        IOUtil.writeObject(dout,keyList.get(j));
        IOUtil.writeList(dout,numberAndIndex.get(keyList.get(j)));
      }
    }
    output.seek(intOffset);
    for (int i=0; i < offsets.length; i++) {
      IOUtil.writeLong(dout,offsets[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public void close() throws DataException {
  try {
    List<T> keyList=new LinkedList<T>();
    keyList.addAll(this.numberAndIndex.keySet());
    if (keyList.size() == 0) {
      output.close();
      return;
    }
    Collections.sort(keyList,new NumberComparator<T>());
    int segs=(keyList.size() - 1) / BLOCKNUMBER + 1;
    IOUtil.writeInt(output,segs);
    long intOffset=output.getOffset();
    DataOutputStream dout=new DataOutputStream(output);
    long[] offsets=new long[segs];
    Object[] boundaryValues=new Object[segs];
    for (int i=0; i < segs; i++) {
      IOUtil.writeLong(dout,0);
      boundaryValues[i]=keyList.get(i * BLOCKNUMBER);
    }
    for (int i=0; i < boundaryValues.length; i++) {
      IOUtil.writeObject(dout,boundaryValues[i]);
    }
    for (int i=0; i < segs; i++) {
      offsets[i]=output.getOffset();
      IOUtil.writeInt(dout,i == segs - 1 ? keyList.size() % BLOCKNUMBER : BLOCKNUMBER);
      for (int j=i * BLOCKNUMBER; j < (i + 1) * BLOCKNUMBER && j < keyList.size(); j++) {
        IOUtil.writeObject(dout,keyList.get(j));
        IOUtil.writeList(dout,numberAndIndex.get(keyList.get(j)));
      }
    }
    output.seek(intOffset);
    for (int i=0; i < offsets.length; i++) {
      IOUtil.writeLong(dout,offsets[i]);
    }
    output.close();
  }
 catch (  Exception e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.97053338306602
67412,"/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  currentPosition[aggrIndex]=rs.getPosition();
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=null;
    if (rs.getLevelKeyValue(rs.getLevelIndex(level)) != null)     value2=rs.getLevelKeyValue(rs.getLevelIndex(level))[rs.getLevelKeyColCount(rs.getLevelIndex(level)) - 1];
    int sortType=rs.getSortType(rs.getLevelIndex(level)) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * compare(value1,value2) < 0 ? -1 : compare(value1,value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}","/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 */
private boolean findValueMatcher(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex){
  if (levelList.isEmpty())   return true;
  int start=0, state=0;
  boolean find=false;
  currentPosition[aggrIndex]=rs.getPosition();
  for (; start < levelList.size(); ) {
    DimLevel level=(DimLevel)levelList.get(start);
    Object value1=valueMap.get(level);
    Object value2=null;
    int index=rs.getLevelIndex(level);
    Object[] keyValues=rs.getLevelKeyValue(index);
    if (keyValues != null)     value2=keyValues[rs.getLevelKeyColCount(index) - 1];
    int sortType=rs.getSortType(index) == IDimensionSortDefn.SORT_DESC ? -1 : 1;
    int direction=sortType * compare(value1,value2) < 0 ? -1 : compare(value1,value2) == 0 ? 0 : 1;
    if (direction < 0 && currentPosition[aggrIndex] > 0 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(--currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction > 0 && currentPosition[aggrIndex] < rs.length() - 1 && (state == 0 || state == direction)) {
      state=direction;
      try {
        rs.seek(++currentPosition[aggrIndex]);
      }
 catch (      IOException e) {
        find=false;
      }
      start=0;
      continue;
    }
 else     if (direction == 0) {
      if (start == levelList.size() - 1) {
        find=true;
        break;
      }
 else {
        start++;
        continue;
      }
    }
 else     if (currentPosition[aggrIndex] < 0 || currentPosition[aggrIndex] >= rs.length()) {
      return false;
    }
 else     return false;
  }
  return find;
}",0.9477572559366756
67413,"/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 * @throws IOException 
 */
private boolean findValueMatcherOneByOne(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex) throws IOException {
  int position=0;
  if (rs.length() <= 0 || levelList.isEmpty())   return true;
  while (position < rs.length()) {
    rs.seek(position);
    boolean match=true;
    for (int i=0; i < levelList.size(); i++) {
      DimLevel level=(DimLevel)levelList.get(i);
      Object value1=valueMap.get(level);
      Object value2=null;
      if (rs.getLevelKeyValue(rs.getLevelIndex(level)) != null)       value2=rs.getLevelKeyValue(rs.getLevelIndex(level))[rs.getLevelKeyColCount(rs.getLevelIndex(level)) - 1];
      ;
      if (value1 == value2) {
        continue;
      }
      if (value1 == null || value2 == null || !value1.equals(value2)) {
        match=false;
        break;
      }
    }
    if (match) {
      return true;
    }
 else {
      ++position;
    }
  }
  return false;
}","/** 
 * Find the value matcher in cube cursor. Based on sort direction and compared result, decide to move on/back along resultset.
 * @param rs
 * @param levelList
 * @param valueMap
 * @param aggrIndex
 * @return
 * @throws IOException 
 */
private boolean findValueMatcherOneByOne(IAggregationResultSet rs,List levelList,Map valueMap,int aggrIndex) throws IOException {
  int position=0;
  if (rs.length() <= 0 || levelList.isEmpty())   return true;
  while (position < rs.length()) {
    rs.seek(position);
    boolean match=true;
    for (int i=0; i < levelList.size(); i++) {
      DimLevel level=(DimLevel)levelList.get(i);
      Object value1=valueMap.get(level);
      Object value2=null;
      int index=rs.getLevelIndex(level);
      Object[] keyValues=rs.getLevelKeyValue(index);
      if (keyValues != null)       value2=keyValues[rs.getLevelKeyColCount(index) - 1];
      ;
      if (value1 == value2) {
        continue;
      }
      if (value1 == null || value2 == null || !value1.equals(value2)) {
        match=false;
        break;
      }
    }
    if (match) {
      return true;
    }
 else {
      ++position;
    }
  }
  return false;
}",0.9196891191709844
67414,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,chartDpi};
}",0.7216916780354706
67415,"public void setPaperTray(String paperTray){
  options.put(OPTION_PAPER_TRAY,paperTray);
}","public void setPaperTray(int paperTrayCode){
  options.put(OPTION_PAPER_TRAY,paperTrayCode);
}",0.9289617486338798
67416,"public String getPaperTray(){
  return getStringOption(OPTION_PAPER_TRAY);
}","public int getPaperTray(){
  return getIntOption(OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
}",0.7282608695652174
67417,"private void setPaperTray(String paperTray){
  if (paperTray != null) {
    out.println(""String_Node_Str"" + paperTray);
    out.println(""String_Node_Str"");
  }
}","private void setPaperTray(int paperTrayCode){
  out.println(""String_Node_Str"");
  out.print(""String_Node_Str"");
  if (paperTrayCode == IPostscriptRenderOption.TRAYCODE_MANUAL) {
    out.println(""String_Node_Str"");
  }
 else   if (paperTrayCode == IPostscriptRenderOption.TRAYCODE_AUTO) {
    out.println(""String_Node_Str"");
  }
 else {
    out.println(""String_Node_Str"" + paperTrayCode + ""String_Node_Str"");
  }
  out.println(""String_Node_Str"");
}",0.4243421052631579
67418,"public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution,boolean gray,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(gray);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void startRenderer(String author,String description,String paperSize,int paperTrayCode,String duplex,int copies,boolean collate,int resolution,boolean gray,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTrayCode);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(gray);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9890675241157556
67419,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean gray=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_GRAY,false);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,gray,scale);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  int paperTrayCode=renderOption.getIntOption(PostscriptRenderOption.OPTION_PAPER_TRAY,IPostscriptRenderOption.TRAYCODE_AUTO);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean gray=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_GRAY,false);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTrayCode,duplex,copies,collate,resolution,gray,scale);
}",0.9710407239819004
67420,void setPaperTray(String paperTray);,void setPaperTray(int paperTrayCode);,0.8767123287671232
67421,String getPaperTray();,int getPaperTray();,0.8780487804878049
67422,"protected static int _getDimensionValue(IContent content,DimensionType d,int renderOptionDpi,int referenceLength){
  if (d.getValueType() == DimensionType.TYPE_DIMENSION) {
    String units=d.getUnits();
    if (units.equals(EngineIRConstants.UNITS_PT) || units.equals(EngineIRConstants.UNITS_CM) || units.equals(EngineIRConstants.UNITS_MM)|| units.equals(EngineIRConstants.UNITS_PC)|| units.equals(EngineIRConstants.UNITS_IN)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT) * 1000;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PX)) {
      double point=d.getMeasure() / getRenderDpi(content,renderOptionDpi) * 72000d;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PERCENTAGE)) {
      double point=referenceLength * d.getMeasure() / 100.0;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_EM) || units.equals(EngineIRConstants.UNITS_EX)) {
      int size=9000;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        CSSValue fontSize=style.getProperty(IStyle.STYLE_FONT_SIZE);
        size=getDimensionValue(fontSize);
      }
      double point=size * d.getMeasure();
      return (int)point;
    }
  }
 else   if (d.getValueType() == DimensionType.TYPE_CHOICE) {
    String choice=d.getChoice();
    if (IStyle.CSS_MEDIUM_VALUE.equals(choice)) {
      return 3000;
    }
 else     if (IStyle.CSS_THIN_VALUE.equals(choice)) {
      return 1000;
    }
 else     if (IStyle.CSS_THICK_VALUE.equals(choice)) {
      return 5000;
    }
  }
  return 0;
}","protected static int _getDimensionValue(IContent content,DimensionType d,int renderOptionDpi,int referenceLength){
  if (d.getValueType() == DimensionType.TYPE_DIMENSION) {
    String units=d.getUnits();
    if (units.equals(EngineIRConstants.UNITS_PT) || units.equals(EngineIRConstants.UNITS_CM) || units.equals(EngineIRConstants.UNITS_MM)|| units.equals(EngineIRConstants.UNITS_PC)|| units.equals(EngineIRConstants.UNITS_IN)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT) * 1000;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PX)) {
      double point=d.getMeasure() / getRenderDpi(content,renderOptionDpi) * 72000d;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PERCENTAGE)) {
      if (referenceLength < 0) {
        return -1;
      }
      double point=referenceLength * d.getMeasure() / 100.0;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_EM) || units.equals(EngineIRConstants.UNITS_EX)) {
      int size=9000;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        CSSValue fontSize=style.getProperty(IStyle.STYLE_FONT_SIZE);
        size=getDimensionValue(fontSize);
      }
      double point=size * d.getMeasure();
      return (int)point;
    }
  }
 else   if (d.getValueType() == DimensionType.TYPE_CHOICE) {
    String choice=d.getChoice();
    if (IStyle.CSS_MEDIUM_VALUE.equals(choice)) {
      return 3000;
    }
 else     if (IStyle.CSS_THIN_VALUE.equals(choice)) {
      return 1000;
    }
 else     if (IStyle.CSS_THICK_VALUE.equals(choice)) {
      return 5000;
    }
  }
  return 0;
}",0.981606376456162
67423,"protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),context.getDpi(),pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),context.getDpi(),0);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}","protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),context.getDpi(),pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),context.getDpi(),-1);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}",0.9992875801472334
67424,"public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAdd)) {
    String sKey=txtNewKey.getText();
    if (sKey.length() > 0 && !propMap.containsKey(sKey)) {
      String[] sProperty=new String[2];
      sProperty[0]=sKey;
      sProperty[1]=""String_Node_Str"";
      TableItem tiProp=new TableItem(table,SWT.NONE);
      tiProp.setBackground(getSelectionColor());
      tiProp.setText(sProperty);
      table.select(table.getItemCount() - 1);
      updateModel(sProperty[0],sProperty[1]);
      txtNewKey.setText(""String_Node_Str"");
    }
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (table.getSelection().length != 0) {
      int index=table.getSelectionIndex();
      String key=table.getSelection()[0].getText(0);
      ExtendedProperty property=propMap.get(key);
      if (property != null) {
        extendedProperties.remove(property);
        propMap.remove(key);
        table.remove(table.getSelectionIndex());
        table.select(index < table.getItemCount() ? index : table.getItemCount() - 1);
      }
      Control editor=editorValue.getEditor();
      if (editor != null) {
        editor.dispose();
      }
    }
  }
 else   if (e.getSource().equals(table)) {
    Control oldEditor=editorValue.getEditor();
    if (oldEditor != null)     oldEditor.dispose();
    final TableItem item=(TableItem)e.item;
    if (item == null) {
      return;
    }
    Text newEditor=new Text(table,SWT.NONE);
    newEditor.setText(item.getText(1));
    newEditor.addListener(SWT.FocusOut,new Listener(){
      public void handleEvent(      Event event){
        Text text=(Text)event.widget;
        editorValue.getItem().setText(1,text.getText());
        updateModel(item.getText(0),text.getText());
      }
    }
);
    newEditor.selectAll();
    newEditor.setFocus();
    editorValue.setEditor(newEditor,item,1);
  }
  btnRemove.setEnabled(!propDisabledMap.containsKey(table.getSelection()[0].getText(0)));
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource().equals(btnAdd)) {
    String sKey=txtNewKey.getText();
    if (sKey.length() > 0 && !propMap.containsKey(sKey)) {
      String[] sProperty=new String[2];
      sProperty[0]=sKey;
      sProperty[1]=""String_Node_Str"";
      TableItem tiProp=new TableItem(table,SWT.NONE);
      tiProp.setText(sProperty);
      table.select(table.getItemCount() - 1);
      updateModel(sProperty[0],sProperty[1]);
      txtNewKey.setText(""String_Node_Str"");
    }
  }
 else   if (e.getSource().equals(btnRemove)) {
    if (table.getSelection().length != 0) {
      int index=table.getSelectionIndex();
      String key=table.getSelection()[0].getText(0);
      ExtendedProperty property=propMap.get(key);
      if (property != null) {
        extendedProperties.remove(property);
        propMap.remove(key);
        table.remove(table.getSelectionIndex());
        table.select(index < table.getItemCount() ? index : table.getItemCount() - 1);
      }
      Control editor=editorValue.getEditor();
      if (editor != null) {
        editor.dispose();
      }
    }
  }
 else   if (e.getSource().equals(table)) {
    Control oldEditor=editorValue.getEditor();
    if (oldEditor != null)     oldEditor.dispose();
    final TableItem item=(TableItem)e.item;
    if (item == null) {
      return;
    }
    Text newEditor=new Text(table,SWT.NONE);
    newEditor.setText(item.getText(1));
    newEditor.addListener(SWT.FocusOut,new Listener(){
      public void handleEvent(      Event event){
        Text text=(Text)event.widget;
        editorValue.getItem().setText(1,text.getText());
        updateModel(item.getText(0),text.getText());
      }
    }
);
    newEditor.selectAll();
    newEditor.setFocus();
    editorValue.setEditor(newEditor,item,1);
  }
  btnRemove.setEnabled(!propDisabledMap.containsKey(table.getSelection()[0].getText(0)));
}",0.9872495446265938
67425,"public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.getEngineTaskType() == IEngineTask.TASK_RENDER) {
    if (context.isReserveDocumentPageNumbers()) {
      long number=pageContent.getPageNumber();
      if (number > 0) {
        context.setPageNumber(number);
      }
    }
 else {
      context.setPageNumber(context.getPageNumber() + 1);
      pageContent=createPageContent(pageContent);
    }
  }
 else {
    if (context.isAutoPageBreak()) {
      context.setPageNumber(context.getPageNumber() + 1);
      pageContent=createPageContent(pageContent);
    }
 else {
      long number=pageContent.getPageNumber();
      if (number > 0) {
        context.setPageNumber(number);
      }
    }
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}","public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.getEngineTaskType() == IEngineTask.TASK_RENDER) {
    if (context.isFixedLayout()) {
      if (context.isReserveDocumentPageNumbers() && context.getHtmlLayoutContext() != null && context.getHtmlLayoutContext().isPaged()) {
        long number=pageContent.getPageNumber();
        if (number > 0) {
          context.setPageNumber(number);
        }
      }
 else {
        context.setPageNumber(context.getPageNumber() + 1);
        pageContent=createPageContent(pageContent);
      }
    }
 else {
      if (context.isReserveDocumentPageNumbers()) {
        long number=pageContent.getPageNumber();
        if (number > 0) {
          context.setPageNumber(number);
        }
      }
 else {
        context.setPageNumber(context.getPageNumber() + 1);
        pageContent=createPageContent(pageContent);
      }
    }
  }
 else {
    if (context.isAutoPageBreak()) {
      context.setPageNumber(context.getPageNumber() + 1);
      pageContent=createPageContent(pageContent);
    }
 else {
      long number=pageContent.getPageNumber();
      if (number > 0) {
        context.setPageNumber(number);
      }
    }
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}",0.7537965945697193
67426,"public void updateOKButtonStatus(boolean isEnabled){
  getOkButton().setEnabled(isEnabled);
}","public void updateOKButtonStatus(boolean isEnabled){
  if (getOkButton() != null)   getOkButton().setEnabled(isEnabled);
}",0.8651162790697674
67427,"private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  Set<Integer> duplicatedIndex=new HashSet<Integer>();
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
      if (k != 0)       duplicatedIndex.add(positions.get(k));
    }
    this.calculator.finish(aggregationRows.get(i));
    Iterator<Integer> iter=duplicatedIndex.iterator();
    while (iter.hasNext()) {
      aggregationRows.remove(iter.next());
    }
    duplicatedIndex.clear();
  }
}","private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  Set<Integer> duplicatedIndex=new HashSet<Integer>();
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
      if (k != 0)       duplicatedIndex.add(positions.get(k));
    }
    this.calculator.finish(aggregationRows.get(i));
    int baseIndex=0;
    Iterator<Integer> iter=duplicatedIndex.iterator();
    while (iter.hasNext()) {
      int index=iter.next().intValue();
      aggregationRows.remove(index - baseIndex);
      baseIndex++;
    }
    duplicatedIndex.clear();
  }
}",0.9306803594351734
67428,"public boolean canLeave(){
  try {
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setProperty(IOdaDataSetModel.RESULT_SET_NUMBER_PROP,null);
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(null);
    if (!updateResultSetSetting())     return true;
    return canLeavePage();
  }
 catch (  Exception e) {
    return true;
  }
}","public boolean canLeave(){
  try {
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setProperty(IOdaDataSetModel.RESULT_SET_NUMBER_PROP,null);
    ((OdaDataSetHandle)((DataSetEditor)getContainer()).getHandle()).setResultSetName(null);
    dealDataSetLocale();
    dealDataSetNullOrdering();
    if (!updateResultSetSetting())     return true;
    return canLeavePage();
  }
 catch (  Exception e) {
    return true;
  }
}",0.9320388349514565
67429,"public boolean performOk(){
  if (canLeave()) {
    dealDataSetLocale();
    dealDataSetNullOrdering();
    return super.performOk();
  }
 else   return false;
}","public boolean performOk(){
  if (canLeave()) {
    return super.performOk();
  }
 else   return false;
}",0.7894736842105263
67430,"/** 
 * @throws DataException
 */
public void test_FALSE() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_FALSE,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(false),IConditionalExpression.OP_FALSE,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_FALSE,null,null);
  assertResult(result,false);
}","/** 
 * @throws DataException
 */
public void test_FALSE() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_FALSE,null,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(false),IConditionalExpression.OP_FALSE,null,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_FALSE,null,null,null);
  assertResult(result,false);
}",0.98545101842871
67431,"/** 
 * @throws DataException
 */
public void test_TRUE() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_TRUE,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(false),IConditionalExpression.OP_TRUE,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_TRUE,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(true),IConditionalExpression.OP_TRUE,""String_Node_Str"",null);
  assertResult(result,true);
}","/** 
 * @throws DataException
 */
public void test_TRUE() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_TRUE,null,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(false),IConditionalExpression.OP_TRUE,null,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_TRUE,null,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(new Boolean(true),IConditionalExpression.OP_TRUE,""String_Node_Str"",null);
  assertResult(result,true);
}",0.9886104783599088
67432,"/** 
 * @throws DataException
 */
public void test_NULL() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_NULL,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(null,IConditionalExpression.OP_NULL,null,null);
  assertResult(result,true);
}","/** 
 * @throws DataException
 */
public void test_NULL() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_NULL,null,null,null);
  assertResult(result,false);
  result=ScriptEvalUtil.evalConditionalExpr(null,IConditionalExpression.OP_NULL,null,null,null);
  assertResult(result,true);
}",0.9861111111111112
67433,"/** 
 * @throws DataException
 */
public void test_NOT_NULL() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_NOT_NULL,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(null,IConditionalExpression.OP_NOT_NULL,null,null);
  assertResult(result,false);
}","/** 
 * @throws DataException
 */
public void test_NOT_NULL() throws DataException {
  Object result;
  result=ScriptEvalUtil.evalConditionalExpr(""String_Node_Str"",IConditionalExpression.OP_NOT_NULL,null,null,null);
  assertResult(result,true);
  result=ScriptEvalUtil.evalConditionalExpr(null,IConditionalExpression.OP_NOT_NULL,null,null,null);
  assertResult(result,false);
}",0.9865591397849462
67434,"/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.getSortKeyIndexes();
  final String[] sortKeyColumns=sortSpec.getSortKeyColumns();
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.getSortAscending();
  final Comparator[] comparators=sortSpec.getComparator();
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}","/** 
 * @param sortSpec
 * @return Comparator based on specified sortSpec, null indicates there isno need to do sorting
 */
private static Comparator getComparator(SortSpec sortSpec,final IEventHandler eventHandler){
  if (sortSpec == null)   return null;
  final int[] sortKeyIndexes=sortSpec.getSortKeyIndexes();
  final String[] sortKeyColumns=sortSpec.getSortKeyColumns();
  if (sortKeyIndexes == null || sortKeyIndexes.length == 0)   return null;
  final boolean[] sortAscending=sortSpec.getSortAscending();
  final CompareHints[] comparators=sortSpec.getComparator();
  Comparator comparator=new Comparator(){
    /** 
 * compares two row indexes, actually compares two rows pointed by the two row indexes
 */
    public int compare(    Object obj1,    Object obj2){
      IResultObject row1=(IResultObject)obj1;
      IResultObject row2=(IResultObject)obj2;
      for (int i=0; i < sortKeyIndexes.length; i++) {
        int colIndex=sortKeyIndexes[i];
        String colName=sortKeyColumns[i];
        try {
          Object colObj1=null;
          Object colObj2=null;
          if (eventHandler != null) {
            colObj1=eventHandler.getValue(row1,colIndex,colName);
            colObj2=eventHandler.getValue(row2,colIndex,colName);
          }
 else {
            colObj1=row1.getFieldValue(colIndex);
            colObj2=row2.getFieldValue(colIndex);
          }
          int result=ScriptEvalUtil.compare(colObj1,colObj2,comparators[i]);
          if (result != 0) {
            return sortAscending[i] ? result : -result;
          }
        }
 catch (        DataException e) {
        }
      }
      return 0;
    }
  }
;
  return comparator;
}",0.996996996996997
67435,"/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  boolean[] ascending=new boolean[fieldCount];
  Comparator[] comparator=new Comparator[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=true;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending,comparator);
}","/** 
 * @param rsMeta
 * @return
 */
private static SortSpec getSortSpec(IResultClass rsMeta){
  int fieldCount=rsMeta.getFieldCount();
  int[] sortKeyIndexs=new int[fieldCount];
  String[] sortKeyNames=new String[fieldCount];
  boolean[] ascending=new boolean[fieldCount];
  CompareHints[] comparator=new CompareHints[fieldCount];
  for (int i=0; i < fieldCount; i++) {
    sortKeyIndexs[i]=i + 1;
    ascending[i]=true;
  }
  return new SortSpec(sortKeyIndexs,sortKeyNames,ascending,comparator);
}",0.9798792756539236
67436,"void setComparator(Comparator[] comparator){
  this.comparator=comparator;
}","void setComparator(CompareHints[] comparator){
  this.comparator=comparator;
}",0.948051948051948
67437,"Comparator[] getComparator(){
  return comparator;
}","CompareHints[] getComparator(){
  return comparator;
}",0.9245283018867924
67438,"/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,boolean[] sortAscending,Comparator[] comparator){
  this.setSortKeyIndexes(sortKeyIndexes);
  this.setSortKeyColumns(sortKeyColumns);
  this.setSortAscending(sortAscending);
  this.setComparator(comparator);
}","/** 
 * @param sortKeyIndexes
 * @param sortKeyColumns
 * @param sortAscending
 */
public SortSpec(int[] sortKeyIndexes,String[] sortKeyColumns,boolean[] sortAscending,CompareHints[] comparator){
  this.setSortKeyIndexes(sortKeyIndexes);
  this.setSortKeyColumns(sortKeyColumns);
  this.setSortAscending(sortAscending);
  this.setComparator(comparator);
}",0.9858757062146892
67439,"/** 
 */
public int compare(Object o1,Object o2){
  Object[] sortKeys1=((GroupBoundaryInfo)o1).getSortKeys();
  Object[] sortKeys2=((GroupBoundaryInfo)o2).getSortKeys();
  boolean[] sortDirection=((GroupBoundaryInfo)o1).getSortDirection();
  Comparator[] comparator=((GroupBoundaryInfo)o1).getCollarComparator();
  int result=0;
  for (int i=0; i < sortKeys1.length; i++) {
    try {
      result=ScriptEvalUtil.compare(sortKeys1[i],sortKeys2[i],comparator[i]);
    }
 catch (    DataException e) {
      result=0;
    }
    if (result != 0) {
      if (sortDirection[i] == false) {
        result=result * -1;
      }
      break;
    }
  }
  return result;
}","/** 
 */
public int compare(Object o1,Object o2){
  Object[] sortKeys1=((GroupBoundaryInfo)o1).getSortKeys();
  Object[] sortKeys2=((GroupBoundaryInfo)o2).getSortKeys();
  boolean[] sortDirection=((GroupBoundaryInfo)o1).getSortDirection();
  CompareHints[] comparator=((GroupBoundaryInfo)o1).getCollarComparator();
  int result=0;
  for (int i=0; i < sortKeys1.length; i++) {
    try {
      result=ScriptEvalUtil.compare(sortKeys1[i],sortKeys2[i],comparator[i]);
    }
 catch (    DataException e) {
      result=0;
    }
    if (result != 0) {
      if (sortDirection[i] == false) {
        result=result * -1;
      }
      break;
    }
  }
  return result;
}",0.9924357034795764
67440,"/** 
 * Set the sort conditions
 * @param sortKeys
 * @param sortOrderings
 */
void setSortCondition(Object[] sortKeys,boolean[] sortOrderings,int[] sortStrength,ULocale[] sortLocale){
  this.sortKeys=sortKeys;
  this.sortDirections=sortOrderings;
  this.comparator=new Collator[this.sortKeys.length];
  for (int i=0; i < this.comparator.length; i++) {
    this.comparator[i]=sortStrength[i] == ISortDefinition.ASCII_SORT_STRENGTH ? null : Collator.getInstance(sortLocale[i]);
  }
}","/** 
 * Set the sort conditions
 * @param sortKeys
 * @param sortOrderings
 */
void setSortCondition(Object[] sortKeys,boolean[] sortOrderings,int[] sortStrength,ULocale[] sortLocale){
  this.sortKeys=sortKeys;
  this.sortDirections=sortOrderings;
  this.comparator=new Collator[this.sortKeys.length];
  this.compareHints=new CompareHints[this.sortKeys.length];
  for (int i=0; i < this.comparator.length; i++) {
    this.comparator[i]=sortStrength[i] == ISortDefinition.ASCII_SORT_STRENGTH ? null : Collator.getInstance(sortLocale[i]);
    this.compareHints[i]=new CompareHints(this.comparator[i],null);
  }
}",0.8827838827838828
67441,"/** 
 * Return the sort strength;
 * @return
 */
Comparator[] getCollarComparator(){
  return this.comparator;
}","/** 
 * Return the sort strength;
 * @return
 */
CompareHints[] getCollarComparator(){
  return this.compareHints;
}",0.9298245614035088
67442,"private void placeComponents(){
  boolean show_web_attributes=false;
  RadarSeries rsd=(RadarSeries)chart.getSeriesDefinitions().get(0).getSeriesDefinitions().get(0).getDesignTimeSeries();
  if (rsd.equals(this.series)) {
    show_web_attributes=true;
  }
  this.setLayout(new GridLayout());
  if (show_web_attributes) {
    grpLine=new Group(this,SWT.NONE);
    GridLayout glLine=new GridLayout(3,false);
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpLine.setText(Messages.getString(""String_Node_Str""));
    wliacLine=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getWebLineAttributes(),true,true,true);
    GridData wgdLIACLine=new GridData();
    wgdLIACLine.widthHint=200;
    wgdLIACLine.verticalSpan=3;
    wliacLine.setLayoutData(wgdLIACLine);
    wliacLine.addListener(this);
    lblWebStep=new Label(grpLine,SWT.NONE);
{
      lblWebStep.setText(Messages.getString(""String_Node_Str""));
      lblWebStep.setToolTipText(Messages.getString(""String_Node_Str""));
    }
    iscScaleCnt=new Spinner(grpLine,SWT.BORDER);
    GridData gdISCLeaderLength=new GridData();
    gdISCLeaderLength.widthHint=100;
    iscScaleCnt.setLayoutData(gdISCLeaderLength);
    iscScaleCnt.setMinimum(1);
    iscScaleCnt.setMaximum(MAX_STEPS);
    iscScaleCnt.setSelection(series.getPlotSteps().intValue());
    iscScaleCnt.addSelectionListener(this);
    btnWebLabels=new Button(grpLine,SWT.CHECK);
{
      btnWebLabels.setText(Messages.getString(""String_Node_Str""));
      btnWebLabels.setSelection(series.isShowWebLabels());
      btnWebLabels.addSelectionListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      btnWebLabels.setLayoutData(gd);
    }
    btnTranslucentBullseye=new Button(grpLine,SWT.CHECK);
{
      btnTranslucentBullseye.setText(Messages.getString(""String_Node_Str""));
      btnTranslucentBullseye.setSelection(series.isBackgroundOvalTransparent());
      btnTranslucentBullseye.addSelectionListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      gd.verticalAlignment=SWT.TOP;
      btnTranslucentBullseye.setLayoutData(gd);
      btnTranslucentBullseye.setVisible(chart.getSubType().equals(Radar.BULLSEYE_SUBTYPE_LITERAL));
    }
  }
  grpLine2=new Group(this,SWT.NONE);
  GridLayout glLine2=new GridLayout(2,false);
  glLine2.horizontalSpacing=0;
  grpLine2.setLayout(glLine2);
  grpLine2.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine2.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine2,SWT.NONE,context,series.getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData();
  gdLIACLine.verticalSpan=4;
  gdLIACLine.widthHint=200;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmp=new Composite(grpLine2,SWT.NONE);
  cmp.setLayoutData(new GridData(GridData.FILL_BOTH));
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(series.isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnConnectEndPoints=new Button(cmp,SWT.CHECK);
{
    btnConnectEndPoints.setText(Messages.getString(""String_Node_Str""));
    btnConnectEndPoints.setSelection(series.isConnectEndpoints());
    btnConnectEndPoints.addSelectionListener(this);
  }
  btnFillPoly=new Button(cmp,SWT.CHECK);
{
    btnFillPoly.setText(Messages.getString(""String_Node_Str""));
    btnFillPoly.setSelection(series.isFillPolys());
    btnFillPoly.addSelectionListener(this);
    btnFillPoly.setEnabled(btnConnectEndPoints.getSelection());
  }
  Group grpMarker=new Group(cmp,SWT.NONE);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  grpMarker.setLayout(new GridLayout(2,false));
  Label lblMarker=new Label(grpMarker,SWT.NONE);
  lblMarker.setText(Messages.getString(""String_Node_Str""));
  mec=new MarkerEditorComposite(grpMarker,series.getMarker());
  enableLineSettings(series.getWebLineAttributes().isVisible());
  enableLineSettings(series.getLineAttributes().isVisible());
}","private void placeComponents(){
  boolean show_web_attributes=false;
  RadarSeries rsd=(RadarSeries)chart.getSeriesDefinitions().get(0).getSeriesDefinitions().get(0).getDesignTimeSeries();
  if (rsd.equals(this.series)) {
    show_web_attributes=true;
  }
  this.setLayout(new GridLayout());
  if (show_web_attributes) {
    grpLine=new Group(this,SWT.NONE);
    GridLayout glLine=new GridLayout(3,false);
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpLine.setText(Messages.getString(""String_Node_Str""));
    wliacLine=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getWebLineAttributes(),true,true,true,true,true);
    GridData wgdLIACLine=new GridData();
    wgdLIACLine.widthHint=200;
    wgdLIACLine.verticalSpan=3;
    wliacLine.setLayoutData(wgdLIACLine);
    wliacLine.addListener(this);
    lblWebStep=new Label(grpLine,SWT.NONE);
{
      lblWebStep.setText(Messages.getString(""String_Node_Str""));
      lblWebStep.setToolTipText(Messages.getString(""String_Node_Str""));
    }
    iscScaleCnt=new Spinner(grpLine,SWT.BORDER);
    GridData gdISCLeaderLength=new GridData();
    gdISCLeaderLength.widthHint=100;
    iscScaleCnt.setLayoutData(gdISCLeaderLength);
    iscScaleCnt.setMinimum(1);
    iscScaleCnt.setMaximum(MAX_STEPS);
    iscScaleCnt.setSelection(series.getPlotSteps().intValue());
    iscScaleCnt.addSelectionListener(this);
    btnWebLabels=new Button(grpLine,SWT.CHECK);
{
      btnWebLabels.setText(Messages.getString(""String_Node_Str""));
      btnWebLabels.setSelection(series.isShowWebLabels());
      btnWebLabels.addSelectionListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      btnWebLabels.setLayoutData(gd);
    }
    btnTranslucentBullseye=new Button(grpLine,SWT.CHECK);
{
      btnTranslucentBullseye.setText(Messages.getString(""String_Node_Str""));
      btnTranslucentBullseye.setSelection(series.isBackgroundOvalTransparent());
      btnTranslucentBullseye.addSelectionListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      gd.verticalAlignment=SWT.TOP;
      btnTranslucentBullseye.setLayoutData(gd);
      btnTranslucentBullseye.setVisible(chart.getSubType().equals(Radar.BULLSEYE_SUBTYPE_LITERAL));
    }
  }
  grpLine2=new Group(this,SWT.NONE);
  GridLayout glLine2=new GridLayout(2,false);
  glLine2.horizontalSpacing=0;
  grpLine2.setLayout(glLine2);
  grpLine2.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine2.setText(Messages.getString(""String_Node_Str""));
  liacLine=new LineAttributesComposite(grpLine2,SWT.NONE,context,series.getLineAttributes(),true,true,true,true,true);
  GridData gdLIACLine=new GridData();
  gdLIACLine.verticalSpan=4;
  gdLIACLine.widthHint=200;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmp=new Composite(grpLine2,SWT.NONE);
  cmp.setLayoutData(new GridData(GridData.FILL_BOTH));
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(series.isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnConnectEndPoints=new Button(cmp,SWT.CHECK);
{
    btnConnectEndPoints.setText(Messages.getString(""String_Node_Str""));
    btnConnectEndPoints.setSelection(series.isConnectEndpoints());
    btnConnectEndPoints.addSelectionListener(this);
  }
  btnFillPoly=new Button(cmp,SWT.CHECK);
{
    btnFillPoly.setText(Messages.getString(""String_Node_Str""));
    btnFillPoly.setSelection(series.isFillPolys());
    btnFillPoly.addSelectionListener(this);
    btnFillPoly.setEnabled(btnConnectEndPoints.getSelection());
  }
  Group grpMarker=new Group(cmp,SWT.NONE);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  grpMarker.setLayout(new GridLayout(2,false));
  Label lblMarker=new Label(grpMarker,SWT.NONE);
  lblMarker.setText(Messages.getString(""String_Node_Str""));
  mec=new MarkerEditorComposite(grpMarker,series.getMarker());
  enableLineSettings(series.getWebLineAttributes().isVisible());
  enableLineSettings(series.getLineAttributes().isVisible());
}",0.9976024934068568
67443,"public LineAttributesComposite(Composite parent,int style,ChartWizardContext wizardContext,LineAttributes laCurrent,boolean bEnableWidths,boolean bEnableStyles,boolean bEnableVisibility,boolean bEnableColor){
  super(parent,style);
  this.laCurrent=laCurrent;
  if (laCurrent == null) {
    this.laCurrent=AttributeFactory.eINSTANCE.createLineAttributes();
  }
  this.bEnableStyles=bEnableStyles;
  this.bEnableWidths=bEnableWidths;
  this.bEnableVisibility=bEnableVisibility;
  this.bEnableColor=bEnableColor;
  this.wizardContext=wizardContext;
  init();
  placeComponents();
}","public LineAttributesComposite(Composite parent,int style,ChartWizardContext wizardContext,LineAttributes laCurrent,boolean bEnableWidths,boolean bEnableStyles,boolean bEnableVisibility,boolean bEnableColor,boolean bEnableAutoColor){
  super(parent,style);
  this.laCurrent=laCurrent;
  if (laCurrent == null) {
    this.laCurrent=AttributeFactory.eINSTANCE.createLineAttributes();
  }
  this.bEnableStyles=bEnableStyles;
  this.bEnableWidths=bEnableWidths;
  this.bEnableVisibility=bEnableVisibility;
  this.bEnableColor=bEnableColor;
  this.bEnableAutoColor=bEnableAutoColor;
  this.wizardContext=wizardContext;
  init();
  placeComponents();
}",0.9453061224489796
67444,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,this.laCurrent.getColor());
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    if (bEnableAutoColor) {
      iFillOption|=FillChooserComposite.ENABLE_AUTO;
    }
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,this.laCurrent.getColor());
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}",0.9910057236304172
67445,"private void placeComponents(){
  GridLayout glContent=new GridLayout(3,true);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_HORIZONTAL);
  GridLayout glGRPAccline=new GridLayout(2,false);
  glGRPAccline.verticalSpacing=0;
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  Composite cmpOrientation=new Composite(grpAccLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpOrientation.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpOrientation.setLayoutData(gd);
  }
  lblOrientation=new Label(cmpOrientation,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(cmpOrientation,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayoutData(gdGRPLine);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpShadow.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpShadow.setLayoutData(gd);
  }
  lblShadow=new Label(cmpShadow,SWT.NONE);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((BubbleSeries)series).getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(3,true);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_HORIZONTAL);
  GridLayout glGRPAccline=new GridLayout(2,false);
  glGRPAccline.verticalSpacing=0;
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  Composite cmpOrientation=new Composite(grpAccLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpOrientation.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpOrientation.setLayoutData(gd);
  }
  lblOrientation=new Label(cmpOrientation,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(cmpOrientation,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayoutData(gdGRPLine);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpShadow.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpShadow.setLayoutData(gd);
  }
  lblShadow=new Label(cmpShadow,SWT.NONE);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((BubbleSeries)series).getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}",0.9974632166412988
67446,"private void placeComponents(){
  GridLayout glContent=new GridLayout(2,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  Group grpLine=new Group(this,SWT.NONE);
{
    GridLayout glGroup=new GridLayout(2,true);
    glGroup.horizontalSpacing=5;
    grpLine.setLayout(glGroup);
    grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpLine.setText(Messages.getString(""String_Node_Str""));
  }
  grpLine1=new Group(grpLine,SWT.NONE);
{
    GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
    grpLine1.setLayout(new FillLayout());
    grpLine1.setLayoutData(gdGRPLine);
    grpLine1.setText(Messages.getString(""String_Node_Str""));
  }
  liacLine1=new LineAttributesComposite(grpLine1,SWT.NONE,context,((DifferenceSeries)series).getLineAttributes(),true,true,true);
  liacLine1.addListener(this);
  grpLine2=new Group(grpLine,SWT.NONE);
{
    GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
    grpLine2.setLayout(new FillLayout());
    grpLine2.setLayoutData(gdGRPLine);
    grpLine2.setText(Messages.getString(""String_Node_Str""));
  }
  liacLine2=new LineAttributesComposite(grpLine2,SWT.NONE,context,((DifferenceSeries)series).getNegativeLineAttributes(),true,true,true);
  liacLine2.addListener(this);
  Composite cmpButton=new Composite(grpLine,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    cmpButton.setLayoutData(gd);
    cmpButton.setLayout(new GridLayout(2,true));
  }
  btnPalette=new Button(cmpButton,SWT.CHECK);
{
    btnPalette.setLayoutData(new GridData());
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmpButton,SWT.CHECK);
{
    btnCurve.setLayoutData(new GridData());
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((DifferenceSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLinePaletteSetting(((DifferenceSeries)series).getLineAttributes().isVisible() || ((DifferenceSeries)series).getNegativeLineAttributes().isVisible());
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(2,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  Group grpLine=new Group(this,SWT.NONE);
{
    GridLayout glGroup=new GridLayout(2,true);
    glGroup.horizontalSpacing=5;
    grpLine.setLayout(glGroup);
    grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpLine.setText(Messages.getString(""String_Node_Str""));
  }
  grpLine1=new Group(grpLine,SWT.NONE);
{
    GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
    grpLine1.setLayout(new FillLayout());
    grpLine1.setLayoutData(gdGRPLine);
    grpLine1.setText(Messages.getString(""String_Node_Str""));
  }
  liacLine1=new LineAttributesComposite(grpLine1,SWT.NONE,context,((DifferenceSeries)series).getLineAttributes(),true,true,true,true,true);
  liacLine1.addListener(this);
  grpLine2=new Group(grpLine,SWT.NONE);
{
    GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
    grpLine2.setLayout(new FillLayout());
    grpLine2.setLayoutData(gdGRPLine);
    grpLine2.setText(Messages.getString(""String_Node_Str""));
  }
  liacLine2=new LineAttributesComposite(grpLine2,SWT.NONE,context,((DifferenceSeries)series).getNegativeLineAttributes(),true,true,true,true,true);
  liacLine2.addListener(this);
  Composite cmpButton=new Composite(grpLine,SWT.NONE);
{
    GridData gd=new GridData();
    gd.horizontalSpan=2;
    cmpButton.setLayoutData(gd);
    cmpButton.setLayout(new GridLayout(2,true));
  }
  btnPalette=new Button(cmpButton,SWT.CHECK);
{
    btnPalette.setLayoutData(new GridData());
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmpButton,SWT.CHECK);
{
    btnCurve.setLayoutData(new GridData());
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((DifferenceSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLinePaletteSetting(((DifferenceSeries)series).getLineAttributes().isVisible() || ((DifferenceSeries)series).getNegativeLineAttributes().isVisible());
}",0.9953938277291572
67447,"private void placeComponents(){
  GridLayout glContent=new GridLayout(2,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  glContent.horizontalSpacing=0;
  this.setLayout(glContent);
  Composite cmpMarker=new Composite(this,SWT.NONE);
{
    cmpMarker.setLayout(new GridLayout());
    cmpMarker.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Group grpMarker=new Group(cmpMarker,SWT.NONE);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  grpMarker.setLayout(new GridLayout(2,false));
  grpMarker.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblStart=new Label(grpMarker,SWT.NONE);
  lblStart.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarker,createMarker(series.getStartMarker()));
  Label lblEnd=new Label(grpMarker,SWT.NONE);
  lblEnd.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarker,createMarker(series.getEndMarker()));
  Composite cmpGroup=new Composite(this,SWT.NONE);
{
    GridLayout glGroup=new GridLayout(2,true);
    glGroup.marginWidth=0;
    glGroup.horizontalSpacing=6;
    cmpGroup.setLayout(glGroup);
    cmpGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  grpLine=new Group(cmpGroup,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  grpLine.setLayout(new GridLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  gliacGantt=new GanttLineAttributesComposite(grpLine,context,SWT.NONE,series.getConnectionLine(),true,true,true);
  gliacGantt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  gliacGantt.addListener(this);
  btnPalette=new Button(grpLine,SWT.CHECK);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=4;
    btnPalette.setLayoutData(gd);
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(series.isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  grpOutline=new Group(cmpGroup,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_BOTH);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  oliacGantt=new LineAttributesComposite(grpOutline,SWT.NONE,context,series.getOutline(),true,true,true);
  oliacGantt.addListener(this);
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(2,false);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  glContent.horizontalSpacing=0;
  this.setLayout(glContent);
  Composite cmpMarker=new Composite(this,SWT.NONE);
{
    cmpMarker.setLayout(new GridLayout());
    cmpMarker.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Group grpMarker=new Group(cmpMarker,SWT.NONE);
  grpMarker.setText(Messages.getString(""String_Node_Str""));
  grpMarker.setLayout(new GridLayout(2,false));
  grpMarker.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblStart=new Label(grpMarker,SWT.NONE);
  lblStart.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarker,createMarker(series.getStartMarker()));
  Label lblEnd=new Label(grpMarker,SWT.NONE);
  lblEnd.setText(Messages.getString(""String_Node_Str""));
  new MarkerEditorComposite(grpMarker,createMarker(series.getEndMarker()));
  Composite cmpGroup=new Composite(this,SWT.NONE);
{
    GridLayout glGroup=new GridLayout(2,true);
    glGroup.marginWidth=0;
    glGroup.horizontalSpacing=6;
    cmpGroup.setLayout(glGroup);
    cmpGroup.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  grpLine=new Group(cmpGroup,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_BOTH);
  grpLine.setLayout(new GridLayout());
  grpLine.setLayoutData(gdGRPLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  gliacGantt=new GanttLineAttributesComposite(grpLine,context,SWT.NONE,series.getConnectionLine(),true,true,true);
  gliacGantt.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  gliacGantt.addListener(this);
  btnPalette=new Button(grpLine,SWT.CHECK);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalIndent=4;
    btnPalette.setLayoutData(gd);
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(series.isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  grpOutline=new Group(cmpGroup,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_BOTH);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  oliacGantt=new LineAttributesComposite(grpOutline,SWT.NONE,context,series.getOutline(),true,true,true,true,true);
  oliacGantt.addListener(this);
}",0.9978867286559594
67448,"private void placeComponents(){
  this.setLayout(new GridLayout());
  grpLine=new Group(this,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((LineSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  if (isShadowNeeded()) {
    Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
      GridLayout gl=new GridLayout(2,false);
      gl.marginHeight=0;
      gl.marginBottom=0;
      gl.verticalSpacing=0;
      cmpShadow.setLayout(gl);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      cmpShadow.setLayoutData(gd);
    }
    lblShadow=new Label(cmpShadow,SWT.NONE);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((LineSeries)series).getShadowColor());
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries && (series.isStacked()))) {
    btnMissingValue=new Button(cmp,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
}","private void placeComponents(){
  this.setLayout(new GridLayout());
  grpLine=new Group(this,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((LineSeries)series).getLineAttributes(),true,true,true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  if (isShadowNeeded()) {
    Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
      GridLayout gl=new GridLayout(2,false);
      gl.marginHeight=0;
      gl.marginBottom=0;
      gl.verticalSpacing=0;
      cmpShadow.setLayout(gl);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      cmpShadow.setLayoutData(gd);
    }
    lblShadow=new Label(cmpShadow,SWT.NONE);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((LineSeries)series).getShadowColor());
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries && (series.isStacked()))) {
    btnMissingValue=new Button(cmp,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
}",0.998166483314998
67449,"private void placeComponents(){
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    glContent.marginHeight=2;
    glContent.marginWidth=4;
    this.setLayout(glContent);
  }
  grpLeaderLine=new Group(this,SWT.NONE);
{
    GridData gdGRPLeaderLine=new GridData(GridData.FILL_BOTH);
    grpLeaderLine.setLayoutData(gdGRPLeaderLine);
    GridLayout glLeaderLine=new GridLayout();
    glLeaderLine.numColumns=2;
    glLeaderLine.marginHeight=0;
    glLeaderLine.marginWidth=2;
    glLeaderLine.verticalSpacing=0;
    grpLeaderLine.setLayout(glLeaderLine);
    grpLeaderLine.setText(Messages.getString(""String_Node_Str""));
  }
  liacLeaderLine=new LineAttributesComposite(grpLeaderLine,SWT.NONE,context,series.getLeaderLineAttributes(),true,true,true);
  GridData gdLIACLeaderLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLeaderLine.horizontalSpan=2;
  liacLeaderLine.setLayoutData(gdLIACLeaderLine);
  liacLeaderLine.addListener(this);
  Composite cmpStyle=new Composite(grpLeaderLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    cmpStyle.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpStyle.setLayoutData(gd);
  }
  Label lblLeaderStyle=new Label(cmpStyle,SWT.NONE);
  GridData gdLBLLeaderStyle=new GridData();
  lblLeaderStyle.setLayoutData(gdLBLLeaderStyle);
  lblLeaderStyle.setText(Messages.getString(""String_Node_Str""));
  cmbLeaderLine=new Combo(cmpStyle,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBLeaderLine=new GridData(GridData.FILL_HORIZONTAL);
  cmbLeaderLine.setLayoutData(gdCMBLeaderLine);
  cmbLeaderLine.addSelectionListener(this);
  Label lblLeaderSize=new Label(cmpStyle,SWT.NONE);
  GridData gdLBLLeaderSize=new GridData();
  lblLeaderSize.setLayoutData(gdLBLLeaderSize);
  lblLeaderSize.setText(Messages.getString(""String_Node_Str""));
  iscLeaderLength=new Spinner(cmpStyle,SWT.BORDER);
  GridData gdISCLeaderLength=new GridData(GridData.FILL_HORIZONTAL);
  iscLeaderLength.setLayoutData(gdISCLeaderLength);
  iscLeaderLength.setMinimum(0);
  iscLeaderLength.setMaximum(MAX_LEADER_LENGTH);
  iscLeaderLength.setSelection((int)series.getLeaderLineLength());
  iscLeaderLength.addSelectionListener(this);
  Composite cmpRight=new Composite(this,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout(3,false));
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createSeriesDetail(cmpRight);
  populateLists();
}","private void placeComponents(){
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    glContent.marginHeight=2;
    glContent.marginWidth=4;
    this.setLayout(glContent);
  }
  grpLeaderLine=new Group(this,SWT.NONE);
{
    GridData gdGRPLeaderLine=new GridData(GridData.FILL_BOTH);
    grpLeaderLine.setLayoutData(gdGRPLeaderLine);
    GridLayout glLeaderLine=new GridLayout();
    glLeaderLine.numColumns=2;
    glLeaderLine.marginHeight=0;
    glLeaderLine.marginWidth=2;
    glLeaderLine.verticalSpacing=0;
    grpLeaderLine.setLayout(glLeaderLine);
    grpLeaderLine.setText(Messages.getString(""String_Node_Str""));
  }
  liacLeaderLine=new LineAttributesComposite(grpLeaderLine,SWT.NONE,context,series.getLeaderLineAttributes(),true,true,true,true,true);
  GridData gdLIACLeaderLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLeaderLine.horizontalSpan=2;
  liacLeaderLine.setLayoutData(gdLIACLeaderLine);
  liacLeaderLine.addListener(this);
  Composite cmpStyle=new Composite(grpLeaderLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    cmpStyle.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpStyle.setLayoutData(gd);
  }
  Label lblLeaderStyle=new Label(cmpStyle,SWT.NONE);
  GridData gdLBLLeaderStyle=new GridData();
  lblLeaderStyle.setLayoutData(gdLBLLeaderStyle);
  lblLeaderStyle.setText(Messages.getString(""String_Node_Str""));
  cmbLeaderLine=new Combo(cmpStyle,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBLeaderLine=new GridData(GridData.FILL_HORIZONTAL);
  cmbLeaderLine.setLayoutData(gdCMBLeaderLine);
  cmbLeaderLine.addSelectionListener(this);
  Label lblLeaderSize=new Label(cmpStyle,SWT.NONE);
  GridData gdLBLLeaderSize=new GridData();
  lblLeaderSize.setLayoutData(gdLBLLeaderSize);
  lblLeaderSize.setText(Messages.getString(""String_Node_Str""));
  iscLeaderLength=new Spinner(cmpStyle,SWT.BORDER);
  GridData gdISCLeaderLength=new GridData(GridData.FILL_HORIZONTAL);
  iscLeaderLength.setLayoutData(gdISCLeaderLength);
  iscLeaderLength.setMinimum(0);
  iscLeaderLength.setMaximum(MAX_LEADER_LENGTH);
  iscLeaderLength.setSelection((int)series.getLeaderLineLength());
  iscLeaderLength.addSelectionListener(this);
  Composite cmpRight=new Composite(this,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout(3,false));
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createSeriesDetail(cmpRight);
  populateLists();
}",0.9979983987189752
67450,"private void placeComponents(){
  this.setLayout(new GridLayout());
  Group grpLine=new Group(this,SWT.NONE);
{
    grpLine.setText(Messages.getString(""String_Node_Str""));
    GridLayout glLine=new GridLayout();
    glLine.numColumns=series.isShowAsBarStick() ? 3 : 1;
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  liacStock=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getLineAttributes(),true,true,false);
  GridData gdLIACStock=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACStock.verticalSpan=3;
  liacStock.setLayoutData(gdLIACStock);
  liacStock.addListener(this);
  if (series.isShowAsBarStick()) {
    new Label(grpLine,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    iscStick=new Spinner(grpLine,SWT.BORDER);
    iscStick.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscStick.setMinimum(0);
    iscStick.setMaximum(Integer.MAX_VALUE);
    iscStick.setSelection(series.getStickLength());
    iscStick.addSelectionListener(this);
  }
}","private void placeComponents(){
  this.setLayout(new GridLayout());
  Group grpLine=new Group(this,SWT.NONE);
{
    grpLine.setText(Messages.getString(""String_Node_Str""));
    GridLayout glLine=new GridLayout();
    glLine.numColumns=series.isShowAsBarStick() ? 3 : 1;
    grpLine.setLayout(glLine);
    grpLine.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  liacStock=new LineAttributesComposite(grpLine,SWT.NONE,context,series.getLineAttributes(),true,true,false,true,true);
  GridData gdLIACStock=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACStock.verticalSpan=3;
  liacStock.setLayoutData(gdLIACStock);
  liacStock.addListener(this);
  if (series.isShowAsBarStick()) {
    new Label(grpLine,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    iscStick=new Spinner(grpLine,SWT.BORDER);
    iscStick.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    iscStick.setMinimum(0);
    iscStick.setMaximum(Integer.MAX_VALUE);
    iscStick.setSelection(series.getStickLength());
    iscStick.addSelectionListener(this);
  }
}",0.9952335557673976
67451,"public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  if (values != null && values.length > 0) {
    for (    IOptionValue optionValue : values) {
      if (optionValue != null) {
        renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
      }
    }
  }
  return renderOption;
}","public IRenderOption getPreferredRenderOption(){
  PDFRenderOption renderOption=new PDFRenderOption();
  renderOption.setEmitterID(getID());
  renderOption.setOutputFormat(""String_Node_Str"");
  if (values != null && values.length > 0) {
    for (    IOptionValue optionValue : values) {
      if (optionValue != null) {
        if (optionValue.getName().equals(RENDER_CHART_IN_SVG)) {
          boolean renderChartInSVG=true;
          Object value=optionValue.getValue();
          if (value != null && value instanceof Boolean) {
            renderChartInSVG=(Boolean)value;
          }
          if (renderChartInSVG) {
            renderOption.setSupportedImageFormats(""String_Node_Str"");
          }
 else {
            renderOption.setSupportedImageFormats(""String_Node_Str"");
          }
        }
 else {
          renderOption.setOption(getRenderOptionName(optionValue.getName()),optionValue.getValue());
        }
      }
    }
  }
  return renderOption;
}",0.5676243868255081
67452,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption embeddedFont=new ConfigurableOption(EMBEDDED_FONT);
  embeddedFont.setDisplayName(getMessage(""String_Node_Str""));
  embeddedFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embeddedFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embeddedFont.setDefaultValue(Boolean.TRUE);
  embeddedFont.setToolTip(null);
  embeddedFont.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embeddedFont,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption embeddedFont=new ConfigurableOption(EMBEDDED_FONT);
  embeddedFont.setDisplayName(getMessage(""String_Node_Str""));
  embeddedFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embeddedFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embeddedFont.setDefaultValue(Boolean.TRUE);
  embeddedFont.setToolTip(null);
  embeddedFont.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption renderChartInSVG=new ConfigurableOption(RENDER_CHART_IN_SVG);
  renderChartInSVG.setDisplayName(getMessage(""String_Node_Str""));
  renderChartInSVG.setDataType(IConfigurableOption.DataType.BOOLEAN);
  renderChartInSVG.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  renderChartInSVG.setDefaultValue(Boolean.TRUE);
  renderChartInSVG.setToolTip(null);
  renderChartInSVG.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embeddedFont,chartDpi,renderChartInSVG};
}",0.9295220810647308
67453,"private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  if (this.calculator == null) {
    return;
  }
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
    }
    this.calculator.finish(aggregationRows.get(i));
  }
}","private void recalculateAggregation(List<IAggregationResultRow> aggregationRows) throws DataException, IOException {
  Set<Integer> duplicatedIndex=new HashSet<Integer>();
  for (int i=0; i < aggregationRows.size(); i++) {
    this.calculator.start();
    List<Integer> positions=getRowsPositionInAggregationRows(i,aggregationRows);
    for (int k=0; k < positions.size(); k++) {
      this.calculator.onRow(aggregationRows.get(positions.get(k)));
      if (k != 0)       duplicatedIndex.add(positions.get(k));
    }
    this.calculator.finish(aggregationRows.get(i));
    Iterator<Integer> iter=duplicatedIndex.iterator();
    while (iter.hasNext()) {
      aggregationRows.remove(iter.next());
    }
    duplicatedIndex.clear();
  }
}",0.741337630942788
67454,"public DrilledAggregateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  bufferedStructureArray=new BufferedStructureArray(AggregationResultRow.getCreator(),2000);
  this.dimLevel=aggregationRsFromCube.getAllLevels();
  this.aggregationRsFromCube=aggregationRsFromCube;
  if (aggregationRsFromCube.getAggregationCount() > 0) {
    AggregationDefinition aggr=aggregationRsFromCube.getAggregationDefinition();
    calculator=new DrilledAggregationCalculator(aggr);
  }
  for (int k=0; k < aggregationRsFromCube.length(); k++) {
    aggregationRsFromCube.seek(k);
    IEdgeDrillFilter targetDrill=getTargetDrillOperation(aggregationRsFromCube.getCurrentRow(),drillFilters);
    if (targetDrill == null) {
      bufferedStructureArray.add(aggregationRsFromCube.getCurrentRow());
      continue;
    }
    List<IAggregationResultRow> tempBufferArray=populateResultSet(aggregationRsFromCube,targetDrill);
    List<IEdgeDrillFilter[]> drills=this.getRemainingDrillOperation(targetDrill,drillFilters);
    if (!drills.isEmpty()) {
      tempBufferArray=populateNextResultSet(tempBufferArray,drills);
    }
    recalculateAggregation(tempBufferArray);
    removeDuplictedRow(tempBufferArray);
    sortAggregationRow(tempBufferArray);
    Iterator<IAggregationResultRow> iter=tempBufferArray.iterator();
    while (iter.hasNext())     bufferedStructureArray.add(iter.next());
    k=aggregationRsFromCube.getPosition();
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
}","public DrilledAggregateResultSet(IAggregationResultSet aggregationRsFromCube,List<IEdgeDrillFilter[]> drillFilters) throws IOException, DataException {
  bufferedStructureArray=new BufferedStructureArray(AggregationResultRow.getCreator(),2000);
  this.dimLevel=aggregationRsFromCube.getAllLevels();
  this.aggregationRsFromCube=aggregationRsFromCube;
  if (aggregationRsFromCube.getAggregationCount() > 0) {
    AggregationDefinition aggr=aggregationRsFromCube.getAggregationDefinition();
    calculator=new DrilledAggregationCalculator(aggr);
  }
  for (int k=0; k < aggregationRsFromCube.length(); k++) {
    aggregationRsFromCube.seek(k);
    IEdgeDrillFilter targetDrill=getTargetDrillOperation(aggregationRsFromCube.getCurrentRow(),drillFilters);
    if (targetDrill == null) {
      bufferedStructureArray.add(aggregationRsFromCube.getCurrentRow());
      continue;
    }
    List<IAggregationResultRow> tempBufferArray=populateResultSet(aggregationRsFromCube,targetDrill);
    List<IEdgeDrillFilter[]> drills=this.getRemainingDrillOperation(targetDrill,drillFilters);
    if (!drills.isEmpty()) {
      tempBufferArray=populateNextResultSet(tempBufferArray,drills);
    }
    if (this.calculator == null) {
      removeDuplictedRow(tempBufferArray);
    }
 else     recalculateAggregation(tempBufferArray);
    sortAggregationRow(tempBufferArray);
    Iterator<IAggregationResultRow> iter=tempBufferArray.iterator();
    while (iter.hasNext())     bufferedStructureArray.add(iter.next());
    k=aggregationRsFromCube.getPosition();
  }
  this.resultObject=(IAggregationResultRow)bufferedStructureArray.get(0);
}",0.9595230624411673
67455,"private static ISortDefinition[] getIncrementSorts(ICubeQueryDefinition basedQuery,ICubeQueryDefinition newQuery) throws DataException {
  if (isEqualSorts(basedQuery.getSorts(),newQuery.getSorts())) {
    return new ISortDefinition[0];
  }
 else {
    List<ISortDefinition> result=newQuery.getSorts();
    return result.toArray(new ISortDefinition[0]);
  }
}","private static ISortDefinition[] getIncrementSorts(ICubeQueryDefinition basedQuery,ICubeQueryDefinition newQuery) throws DataException {
  if (newQuery.getSorts().size() < basedQuery.getSorts().size()) {
    return null;
  }
  if (isEqualSorts(basedQuery.getSorts(),newQuery.getSorts())) {
    return new ISortDefinition[0];
  }
 else {
    List<ISortDefinition> result=newQuery.getSorts();
    return result.toArray(new ISortDefinition[0]);
  }
}",0.890818858560794
67456,"/** 
 * Returns hint info about how newQuery can be executed based on the execution result of basedQuery.
 * @param basedQuery
 * @param newQuery
 * @return null if the execution result of basedQuery is useless for newQuery 
 */
public static IncrementExecutionHint getIncrementExecutionHint(ICubeQueryDefinition basedQuery,ICubeQueryDefinition newQuery) throws DataException {
  if (basedQuery.getFilterOption() != newQuery.getFilterOption()) {
    return null;
  }
  if (!isEqualMeasures(basedQuery.getMeasures(),newQuery.getMeasures())) {
    return null;
  }
  if (!isEqualMeasures(basedQuery.getComputedMeasures(),newQuery.getComputedMeasures())) {
    return null;
  }
  if (!isEqualEdges(basedQuery,newQuery)) {
    return null;
  }
  if (!isEqualCubeOperations(basedQuery.getCubeOperations(),newQuery.getCubeOperations())) {
    return null;
  }
  IncrementExecutionHint ieh=new IncrementExecutionHint();
  IBinding[] bindings=getIncrementBindings(basedQuery,newQuery);
  if (bindings == null) {
    return null;
  }
 else {
    ieh.setBindings(bindings);
  }
  IFilterDefinition[] filters=getIncrementFilters(basedQuery,newQuery);
  if (filters == null) {
    return null;
  }
 else {
    ieh.setFilters(filters);
  }
  ISortDefinition[] sorts=getIncrementSorts(basedQuery,newQuery);
  ieh.setSorts(sorts);
  return ieh;
}","/** 
 * Returns hint info about how newQuery can be executed based on the execution result of basedQuery.
 * @param basedQuery
 * @param newQuery
 * @return null if the execution result of basedQuery is useless for newQuery 
 */
public static IncrementExecutionHint getIncrementExecutionHint(ICubeQueryDefinition basedQuery,ICubeQueryDefinition newQuery) throws DataException {
  if (basedQuery.getFilterOption() != newQuery.getFilterOption()) {
    return null;
  }
  if (!isEqualMeasures(basedQuery.getMeasures(),newQuery.getMeasures())) {
    return null;
  }
  if (!isEqualMeasures(basedQuery.getComputedMeasures(),newQuery.getComputedMeasures())) {
    return null;
  }
  if (!isEqualEdges(basedQuery,newQuery)) {
    return null;
  }
  if (!isEqualCubeOperations(basedQuery.getCubeOperations(),newQuery.getCubeOperations())) {
    return null;
  }
  IncrementExecutionHint ieh=new IncrementExecutionHint();
  IBinding[] bindings=getIncrementBindings(basedQuery,newQuery);
  if (bindings == null) {
    return null;
  }
 else {
    ieh.setBindings(bindings);
  }
  IFilterDefinition[] filters=getIncrementFilters(basedQuery,newQuery);
  if (filters == null) {
    return null;
  }
 else {
    ieh.setFilters(filters);
  }
  ISortDefinition[] sorts=getIncrementSorts(basedQuery,newQuery);
  if (sorts == null) {
    return null;
  }
 else   ieh.setSorts(sorts);
  return ieh;
}",0.9815634218289084
67457,"private Color[] createColorMap(Display display){
  return new Color[]{new Color(display,0,0,0),new Color(display,154,50,0),new Color(display,51,51,0),new Color(display,0,50,0),new Color(display,0,50,100),new Color(display,0,0,128),new Color(display,51,51,153),new Color(display,51,51,51),new Color(display,128,0,0),new Color(display,254,102,0),new Color(display,124,124,0),new Color(display,0,128,0),new Color(display,0,128,128),new Color(display,0,0,254),new Color(display,102,102,153),new Color(display,128,128,128),new Color(display,254,0,0),new Color(display,254,153,0),new Color(display,154,204,0),new Color(display,51,153,102),new Color(display,51,204,204),new Color(display,51,102,254),new Color(display,128,0,128),new Color(display,145,145,145),new Color(display,254,0,254),new Color(display,254,204,0),new Color(display,254,254,0),new Color(display,0,254,0),new Color(display,0,254,254),new Color(display,0,204,254),new Color(display,154,50,102),new Color(display,192,192,192),new Color(display,253,153,204),new Color(display,254,204,153),new Color(display,254,254,153),new Color(display,204,254,204),new Color(display,204,254,254),new Color(display,153,204,254),new Color(display,204,153,254),new Color(display,254,254,254)};
}","private Color[] createColorMap(Display display){
  return new Color[]{new Color(display,0,0,0),new Color(display,154,50,0),new Color(display,51,51,0),new Color(display,0,50,0),new Color(display,0,50,100),new Color(display,0,0,128),new Color(display,51,51,153),new Color(display,51,51,51),new Color(display,128,0,0),new Color(display,255,102,0),new Color(display,124,124,0),new Color(display,0,128,0),new Color(display,0,128,128),new Color(display,0,0,255),new Color(display,102,102,153),new Color(display,128,128,128),new Color(display,255,0,0),new Color(display,255,153,0),new Color(display,154,204,0),new Color(display,51,153,102),new Color(display,51,204,204),new Color(display,51,102,255),new Color(display,128,0,128),new Color(display,145,145,145),new Color(display,255,0,255),new Color(display,255,204,0),new Color(display,255,255,0),new Color(display,0,255,0),new Color(display,0,255,255),new Color(display,0,204,255),new Color(display,154,50,102),new Color(display,192,192,192),new Color(display,253,153,204),new Color(display,255,204,153),new Color(display,255,255,153),new Color(display,204,255,204),new Color(display,204,255,255),new Color(display,153,204,255),new Color(display,204,153,255),new Color(display,255,255,255)};
}",0.7930476960388035
67458,"private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      List chooserItems=((ReportDesignHandle)handle).getAllTocs();
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=((ReportDesignHandle)handle).getAllBookmarks();
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      if (targetFormatsChooser.getSelectionIndex() != -1) {
        format=supportedFormats[targetFormatsChooser.getSelectionIndex()];
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      List chooserItems=getAllTocDisplayString(rootTocNode);
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      anchorChooser.setItems(getDocumentBookmarks((IReportDocument)handle));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
        break;
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}","private void initAnchorChooser(Object handle,boolean isToc){
  anchorChooser.removeAll();
  if (handle instanceof ReportDesignHandle) {
    if (isToc) {
      List chooserItems=((ReportDesignHandle)handle).getAllTocs();
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
 else {
      List chooserItems=((ReportDesignHandle)handle).getAllBookmarks();
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems((String[])chooserItems.toArray(new String[0]));
    }
  }
 else   if (handle instanceof IReportDocument) {
    if (isToc) {
      String format=""String_Node_Str"";
      if (targetFormatsChooser.getSelectionIndex() != -1) {
        format=supportedFormats[targetFormatsChooser.getSelectionIndex()];
      }
      ITOCTree tocTree=((IReportDocument)handle).getTOCTree(format,SessionHandleAdapter.getInstance().getSessionHandle().getULocale());
      TOCNode rootTocNode=tocTree.getRoot();
      List<String> chooserItems=getAllTocDisplayString(rootTocNode);
      chooserItems.add(0,""String_Node_Str"");
      anchorChooser.setItems(chooserItems.toArray(new String[0]));
    }
 else {
      anchorChooser.setItems(getDocumentBookmarks((IReportDocument)handle));
    }
  }
  bookmarkEditor.setText(""String_Node_Str"");
  String bookmark=inputHandle.getTargetBookmark();
  String[] chooserValues=anchorChooser.getItems();
  if (bookmark != null && chooserValues != null) {
    for (int i=0; i < chooserValues.length; i++) {
      if (bookmark.equals(chooserValues[i])) {
        anchorChooser.select(i);
        bookmarkEditor.setText(anchorChooser.getText());
        break;
      }
    }
  }
  anchorChooser.setEnabled(anchorChooser.getItemCount() > 0);
}",0.9948688711516532
67459,"private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    ExpressionHandle uri=(ExpressionHandle)getURI();
    locationEditor.setText(uri == null || uri.getExpression() == null ? ""String_Node_Str"" : (String)uri.getExpression());
    locationEditor.setData(ExpressionButtonUtil.EXPR_TYPE,uri == null || uri.getType() == null ? ExpressionType.CONSTANT : (String)uri.getType());
    ExpressionButton button=(ExpressionButton)locationEditor.getData(ExpressionButtonUtil.EXPR_BUTTON);
    if (button != null)     button.refresh();
    if (bTargetEnabled) {
      if (inputHandle.getTargetWindow() != null) {
        targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
      }
 else {
        targetChooser.select(0);
      }
    }
    loadTooltip();
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType) && showBookMark) {
    if (inputHandle.getTargetBookmark() != null) {
      ExpressionButtonUtil.initExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
    loadTooltip();
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      selectRadio(targetGroup,reportDesignButton);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      ExpressionButtonUtil.initExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
    }
 else {
      bookmarkEditor.setText(""String_Node_Str"");
    }
    if (bTargetEnabled) {
      if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
        newWindowButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_SELF.equals(inputHandle.getTargetWindow())) {
        sameFrameButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_TOP.equals(inputHandle.getTargetWindow())) {
        wholePageButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_PARENT.equals(inputHandle.getTargetWindow())) {
        parentFrameButton.setSelection(true);
      }
 else {
        newWindowButton.setSelection(true);
      }
    }
    if (inputHandle.getFormatType() != null) {
      for (int index=0; index < supportedFormats.length; index++) {
        if (supportedFormats[index].equals(inputHandle.getFormatType())) {
          checkButton.setSelection(true);
          targetFormatsChooser.setEnabled(true);
          targetFormatsChooser.select(index);
          break;
        }
      }
    }
    loadTooltip();
  }
  updateButtons();
}","private void initDisplayArea(){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
    ExpressionHandle uri=getURI();
    locationEditor.setText(uri == null || uri.getExpression() == null ? ""String_Node_Str"" : (String)uri.getExpression());
    locationEditor.setData(ExpressionButtonUtil.EXPR_TYPE,uri == null || uri.getType() == null ? ExpressionType.CONSTANT : (String)uri.getType());
    ExpressionButton button=(ExpressionButton)locationEditor.getData(ExpressionButtonUtil.EXPR_BUTTON);
    if (button != null)     button.refresh();
    if (bTargetEnabled) {
      if (inputHandle.getTargetWindow() != null) {
        targetChooser.setText(ChoiceSetFactory.getDisplayNameFromChoiceSet(inputHandle.getTargetWindow(),CHOICESET_TARGET));
      }
 else {
        targetChooser.select(0);
      }
    }
    loadTooltip();
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType) && showBookMark) {
    if (inputHandle.getTargetBookmark() != null) {
      ExpressionButtonUtil.initExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
    }
    initBookmarkList(SessionHandleAdapter.getInstance().getReportDesignHandle());
    loadTooltip();
  }
 else   if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
    if (DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT.equals(inputHandle.getTargetFileType())) {
      reportDocumentButton.setSelection(true);
      if (inputHandle.getReportName() != null) {
        documentEditor.setText(inputHandle.getReportName());
      }
      selectRadio(targetGroup,reportDocumentButton);
    }
 else {
      reportDesignButton.setSelection(true);
      selectRadio(targetGroup,reportDesignButton);
      if (inputHandle.getReportName() != null) {
        locationEditor.setText(inputHandle.getReportName());
      }
    }
    if (inputHandle.getReportName() != null) {
      initTargetReport(inputHandle.getReportName());
    }
    if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK.equals(inputHandle.getTargetBookmarkType())) {
      targetBookmarkButton.setSelection(true);
      initAnchorChooser(targetReportHandle,false);
    }
 else     if (DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC.equals(inputHandle.getTargetBookmarkType())) {
      tocButton.setSelection(true);
      initAnchorChooser(targetReportHandle,true);
    }
    if (inputHandle.getTargetBookmark() != null) {
      ExpressionButtonUtil.initExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
    }
 else {
      bookmarkEditor.setText(""String_Node_Str"");
    }
    if (bTargetEnabled) {
      if (DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK.equals(inputHandle.getTargetWindow())) {
        newWindowButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_SELF.equals(inputHandle.getTargetWindow())) {
        sameFrameButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_TOP.equals(inputHandle.getTargetWindow())) {
        wholePageButton.setSelection(true);
      }
 else       if (DesignChoiceConstants.TARGET_NAMES_TYPE_PARENT.equals(inputHandle.getTargetWindow())) {
        parentFrameButton.setSelection(true);
      }
 else {
        newWindowButton.setSelection(true);
      }
    }
    if (inputHandle.getFormatType() != null) {
      for (int index=0; index < supportedFormats.length; index++) {
        if (supportedFormats[index].equals(inputHandle.getFormatType())) {
          checkButton.setSelection(true);
          targetFormatsChooser.setEnabled(true);
          targetFormatsChooser.select(index);
          break;
        }
      }
    }
    loadTooltip();
  }
  updateButtons();
}",0.997609561752988
67460,"protected void okPressed(){
  try {
    inputHandle.setToolTip(null);
    setURI(null,null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetBookmarkType(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setTargetFileType(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      setURI(locationEditor.getText(),(String)locationEditor.getData(ExpressionButtonUtil.EXPR_TYPE));
      if (bTargetEnabled) {
        inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
      }
      saveTooltip();
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType) && showBookMark) {
      ExpressionButtonUtil.saveExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
      saveTooltip();
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText());
        for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding((ParamBinding)iter.next());
        }
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText()) && !bookmarkEditor.getText().equals(""String_Node_Str"")) {
        ExpressionButtonUtil.saveExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (bTargetEnabled) {
        if (sameFrameButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
        }
 else         if (newWindowButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
        }
 else         if (wholePageButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_TOP);
        }
 else         if (parentFrameButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_PARENT);
        }
      }
      int index=targetFormatsChooser.getSelectionIndex();
      if (checkButton.getSelection() && index != -1) {
        inputHandle.setFormatType(targetFormatsChooser.getItem(index));
      }
 else {
        inputHandle.setFormatType(null);
      }
      saveTooltip();
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}","protected void okPressed(){
  try {
    inputHandle.setToolTip(null);
    setURI(null,null);
    inputHandle.setTargetBookmark(null);
    inputHandle.setTargetBookmarkType(null);
    inputHandle.setTargetWindow(null);
    inputHandle.setTargetFileType(null);
    inputHandle.setReportName(null);
    inputHandle.setFormatType(null);
    inputHandle.getMember(Action.PARAM_BINDINGS_MEMBER).setValue(null);
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(selectedType)) {
      setURI(locationEditor.getText(),(String)locationEditor.getData(ExpressionButtonUtil.EXPR_TYPE));
      if (bTargetEnabled) {
        inputHandle.setTargetWindow(ChoiceSetFactory.getValueFromChoiceSet(targetChooser.getText(),CHOICESET_TARGET));
      }
      saveTooltip();
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(selectedType) && showBookMark) {
      ExpressionButtonUtil.saveExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
      saveTooltip();
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(selectedType)) {
      if (reportDesignButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DESIGN);
        inputHandle.setReportName(locationEditor.getText());
        for (Iterator<ParamBinding> iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding(iter.next());
        }
      }
 else       if (reportDocumentButton.getSelection()) {
        inputHandle.setTargetFileType(DesignChoiceConstants.ACTION_TARGET_FILE_TYPE_REPORT_DOCUMENT);
        inputHandle.setReportName(documentEditor.getText());
        for (Iterator<ParamBinding> iter=bindingList.iterator(); iter.hasNext(); ) {
          inputHandle.addParamBinding(iter.next());
        }
      }
      if (!StringUtil.isBlank(bookmarkEditor.getText()) && !bookmarkEditor.getText().equals(""String_Node_Str"")) {
        ExpressionButtonUtil.saveExpressionButtonControl(bookmarkEditor,inputHandle,Action.TARGET_BOOKMARK_MEMBER);
      }
      if (targetBookmarkButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_BOOKMARK);
      }
 else       if (tocButton.getSelection()) {
        inputHandle.setTargetBookmarkType(DesignChoiceConstants.ACTION_BOOKMARK_TYPE_TOC);
      }
      if (bTargetEnabled) {
        if (sameFrameButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_SELF);
        }
 else         if (newWindowButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_BLANK);
        }
 else         if (wholePageButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_TOP);
        }
 else         if (parentFrameButton.getSelection()) {
          inputHandle.setTargetWindow(DesignChoiceConstants.TARGET_NAMES_TYPE_PARENT);
        }
      }
      int index=targetFormatsChooser.getSelectionIndex();
      if (checkButton.getSelection() && index != -1) {
        inputHandle.setFormatType(targetFormatsChooser.getItem(index));
      }
 else {
        inputHandle.setFormatType(null);
      }
      saveTooltip();
    }
    inputHandle.setLinkType(selectedType);
  }
 catch (  SemanticException e) {
    ExceptionHandler.handle(e);
  }
  setResult(inputHandle);
  super.okPressed();
}",0.991867557362765
67461,"protected boolean isParameterRequired(String paramName){
  if (paramName == null) {
    return false;
  }
  if (parameterList != null) {
    for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof ScalarParameterHandle && ((ScalarParameterHandle)obj).getName().equals(paramName)) {
        return !((ScalarParameterHandle)obj).allowNull() || !((ScalarParameterHandle)obj).allowBlank();
      }
    }
  }
  return false;
}","protected boolean isParameterRequired(String paramName){
  if (paramName == null) {
    return false;
  }
  if (parameterList != null) {
    for (Iterator<ParameterHandle> iter=parameterList.iterator(); iter.hasNext(); ) {
      Object obj=iter.next();
      if (obj instanceof ScalarParameterHandle && ((ScalarParameterHandle)obj).getName().equals(paramName)) {
        return !((ScalarParameterHandle)obj).allowNull() || !((ScalarParameterHandle)obj).allowBlank();
      }
    }
  }
  return false;
}",0.982776089159068
67462,"public String getColumnText(Object element,int columnIndex){
  String text=null;
  ParamBinding parameterBinding=((ParamBinding)element);
  if (parameterBinding != dummyParameterBinding) {
    if (columnIndex == 0) {
      text=parameterBinding.getParamName();
    }
 else     if (columnIndex == 2) {
      String name=parameterBinding.getParamName();
      String dataType=(String)paramTypes.get(name);
      if (dataType == null) {
        return ""String_Node_Str"";
      }
      return getDisplayDataType(dataType);
    }
 else     if (columnIndex == 3) {
      text=parameterBinding.getExpression();
    }
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}","public String getColumnText(Object element,int columnIndex){
  String text=null;
  ParamBinding parameterBinding=((ParamBinding)element);
  if (parameterBinding != dummyParameterBinding) {
    if (columnIndex == 0) {
      text=parameterBinding.getParamName();
    }
 else     if (columnIndex == 2) {
      String name=parameterBinding.getParamName();
      String dataType=paramTypes.get(name);
      if (dataType == null) {
        return ""String_Node_Str"";
      }
      return getDisplayDataType(dataType);
    }
 else     if (columnIndex == 3) {
      text=parameterBinding.getExpression();
    }
  }
  if (text == null) {
    text=""String_Node_Str"";
  }
  return text;
}",0.9941176470588236
67463,"public HyperlinkBuilder(boolean isIDE){
  this(UIUtil.getDefaultShell());
  this.isIDE=isIDE;
}","public HyperlinkBuilder(boolean isIDE){
  this(UIUtil.getDefaultShell(),isIDE);
}",0.8977272727272727
67464,"private List getAllTocDisplayString(TOCNode parent){
  List tocList=new ArrayList();
  if (parent.getParent() != null) {
    tocList.add(""String_Node_Str"" + parent.getDisplayString() + ""String_Node_Str"");
  }
  List childToc=parent.getChildren();
  for (Iterator iter=childToc.iterator(); iter.hasNext(); ) {
    TOCNode node=(TOCNode)iter.next();
    tocList.addAll(getAllTocDisplayString(node));
  }
  return tocList;
}","private List<String> getAllTocDisplayString(TOCNode parent){
  List<String> tocList=new ArrayList<String>();
  if (parent.getParent() != null) {
    tocList.add(""String_Node_Str"" + parent.getDisplayString() + ""String_Node_Str"");
  }
  List childToc=parent.getChildren();
  for (Iterator iter=childToc.iterator(); iter.hasNext(); ) {
    TOCNode node=(TOCNode)iter.next();
    tocList.addAll(getAllTocDisplayString(node));
  }
  return tocList;
}",0.9722863741339492
67465,"private void initParamterBindings(){
  if (targetReportHandle != null) {
    bindingList.clear();
    parameterList.clear();
    String errorMessage=null;
    String newFilename=null;
    if (reportDesignButton.getSelection()) {
      newFilename=locationEditor.getText();
    }
 else     if (reportDocumentButton.getSelection()) {
      newFilename=documentEditor.getText();
    }
    if (newFilename == null || newFilename.length() == 0) {
      errorMessage=ERROR_MSG_REPORT_REQUIRED;
    }
 else {
      ReportDesignHandle tmpReportDesign=null;
      if (targetReportHandle instanceof IReportDocument) {
        tmpReportDesign=((IReportDocument)targetReportHandle).getReportDesign();
      }
 else       if (targetReportHandle instanceof ReportDesignHandle) {
        tmpReportDesign=(ReportDesignHandle)targetReportHandle;
      }
      if (tmpReportDesign != null) {
        if (targetReportHandle instanceof ReportDesignHandle) {
          paramTypes.clear();
          for (Iterator iter=((ReportDesignHandle)tmpReportDesign).getAllParameters().iterator(); iter.hasNext(); ) {
            Object obj=iter.next();
            if (obj instanceof ParameterHandle) {
              ParameterHandle param=(ParameterHandle)obj;
              parameterList.add(param);
              if (param instanceof ScalarParameterHandle) {
                paramTypes.put(param.getName(),((ScalarParameterHandle)param).getDataType());
              }
            }
          }
        }
      }
    }
    if (errorMessage != null) {
      messageLine.setText(errorMessage);
      messageLine.setImage(ERROR_ICON);
    }
 else {
      messageLine.setText(""String_Node_Str"");
      messageLine.setImage(null);
    }
    updateButtons();
  }
  bindingList.clear();
  for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
    ParamBindingHandle handle=(ParamBindingHandle)iter.next();
    bindingList.add((ParamBinding)handle.getStructure());
  }
  paramBindingTable.getTable().setEnabled(true);
  paramBindingTable.refresh();
}","private void initParamterBindings(){
  if (targetReportHandle != null) {
    bindingList.clear();
    parameterList.clear();
    String errorMessage=null;
    String newFilename=null;
    if (reportDesignButton.getSelection()) {
      newFilename=locationEditor.getText();
    }
 else     if (reportDocumentButton.getSelection()) {
      newFilename=documentEditor.getText();
    }
    if (newFilename == null || newFilename.length() == 0) {
      errorMessage=ERROR_MSG_REPORT_REQUIRED;
    }
 else {
      ReportDesignHandle tmpReportDesign=null;
      if (targetReportHandle instanceof IReportDocument) {
        tmpReportDesign=((IReportDocument)targetReportHandle).getReportDesign();
      }
 else       if (targetReportHandle instanceof ReportDesignHandle) {
        tmpReportDesign=(ReportDesignHandle)targetReportHandle;
      }
      if (tmpReportDesign != null) {
        if (targetReportHandle instanceof ReportDesignHandle) {
          paramTypes.clear();
          for (Iterator iter=tmpReportDesign.getAllParameters().iterator(); iter.hasNext(); ) {
            Object obj=iter.next();
            if (obj instanceof ParameterHandle) {
              ParameterHandle param=(ParameterHandle)obj;
              parameterList.add(param);
              if (param instanceof ScalarParameterHandle) {
                paramTypes.put(param.getName(),((ScalarParameterHandle)param).getDataType());
              }
            }
          }
        }
      }
    }
    if (errorMessage != null) {
      messageLine.setText(errorMessage);
      messageLine.setImage(ERROR_ICON);
    }
 else {
      messageLine.setText(""String_Node_Str"");
      messageLine.setImage(null);
    }
    updateButtons();
  }
  bindingList.clear();
  for (Iterator iter=inputHandle.paramBindingsIterator(); iter.hasNext(); ) {
    ParamBindingHandle handle=(ParamBindingHandle)iter.next();
    bindingList.add((ParamBinding)handle.getStructure());
  }
  paramBindingTable.getTable().setEnabled(true);
  paramBindingTable.refresh();
}",0.9930830039525692
67466,"private Button createBrowerButton(Composite parent,final Text text,final boolean needQuote,final boolean needFilter,final String[] fileExt){
  Button button=new Button(parent,SWT.PUSH);
  GridData gd=new GridData();
  if (!Platform.getOS().equals(Platform.OS_MACOSX)) {
    gd.widthHint=20;
    gd.heightHint=20;
  }
  button.setLayoutData(gd);
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      String filename=null;
      if (!isIDE || getProjectFolder() == null) {
        FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
        if (needFilter) {
          dialog.setFilterExtensions(fileExt);
        }
        filename=dialog.open();
      }
 else {
        ProjectFileDialog dialog;
        if (needFilter) {
          dialog=new ProjectFileDialog(getProjectFolder(),fileExt);
        }
 else         dialog=new ProjectFileDialog(getProjectFolder());
        if (dialog.open() == Window.OK) {
          filename=dialog.getPath();
        }
      }
      try {
        if (filename != null) {
          File file=new File(filename);
          if (!(file.isFile() && file.exists())) {
            ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          filename=file.toURL().toString();
          if (needFilter && checkExtensions(fileExt,filename) == false) {
            ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          filename=URIUtil.getRelativePath(getBasePath(),filename);
          filename=new Path(filename).toString();
          if (text.getData(ExpressionButtonUtil.EXPR_BUTTON) != null) {
            text.setData(ExpressionButtonUtil.EXPR_TYPE,ExpressionType.CONSTANT);
            ((ExpressionButton)text.getData(ExpressionButtonUtil.EXPR_BUTTON)).refresh();
          }
 else {
            if (needQuote) {
              filename=""String_Node_Str"" + filename + ""String_Node_Str"";
            }
          }
          text.setText(filename);
          text.setFocus();
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
  return button;
}","private Button createBrowerButton(Composite parent,final Text text,final boolean needQuote,final boolean needFilter,final String[] fileExt){
  Button button=new Button(parent,SWT.PUSH);
  GridData gd=new GridData();
  if (!Platform.getOS().equals(Platform.OS_MACOSX)) {
    gd.widthHint=20;
    gd.heightHint=20;
  }
  button.setLayoutData(gd);
  button.setImage(IMAGE_OPEN_FILE);
  button.setToolTipText(TOOLTIP_BROWSE_FILE);
  button.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      boolean projectMode=false;
      String filename=null;
      if (!isIDE || getProjectFolder() == null) {
        FileDialog dialog=new FileDialog(UIUtil.getDefaultShell());
        if (needFilter) {
          dialog.setFilterExtensions(fileExt);
        }
        filename=dialog.open();
      }
 else {
        projectMode=true;
        ProjectFileDialog dialog;
        if (needFilter) {
          dialog=new ProjectFileDialog(getProjectFolder(),fileExt);
        }
 else {
          dialog=new ProjectFileDialog(getProjectFolder());
        }
        if (dialog.open() == Window.OK) {
          filename=dialog.getPath();
        }
      }
      try {
        if (filename != null) {
          File file=new File(filename);
          if (!(file.isFile() && file.exists())) {
            ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          filename=file.toURL().toString();
          if (needFilter && checkExtensions(fileExt,filename) == false) {
            ExceptionHandler.openErrorMessageBox(Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str""));
            return;
          }
          if (projectMode && isRelativeToProjectRoot) {
            filename=URIUtil.getRelativePath(getProjectFolder(),filename);
            if (!filename.startsWith(""String_Node_Str"")) {
              filename=""String_Node_Str"" + filename;
            }
          }
 else {
            filename=URIUtil.getRelativePath(getBasePath(),filename);
          }
          filename=new Path(filename).toString();
          if (text.getData(ExpressionButtonUtil.EXPR_BUTTON) != null) {
            text.setData(ExpressionButtonUtil.EXPR_TYPE,ExpressionType.CONSTANT);
            ((ExpressionButton)text.getData(ExpressionButtonUtil.EXPR_BUTTON)).refresh();
          }
 else {
            if (needQuote) {
              filename=""String_Node_Str"" + filename + ""String_Node_Str"";
            }
          }
          text.setText(filename);
          text.setFocus();
        }
        updateButtons();
      }
 catch (      Exception ex) {
        ExceptionHandler.handle(ex);
      }
    }
  }
);
  return button;
}",0.9295665634674922
67467,"private void buildParameterChoices(String selectedParameter){
  ArrayList avaliavleList=new ArrayList();
  for (Iterator iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterHandle parameter=(ParameterHandle)iter.next();
    avaliavleList.add(parameter.getQualifiedName());
  }
  for (Iterator iter=bindingList.iterator(); iter.hasNext(); ) {
    ParamBinding paramBinding=(ParamBinding)iter.next();
    if (!paramBinding.getParamName().equals(selectedParameter)) {
      avaliavleList.remove(paramBinding.getParamName());
    }
  }
  parameterChooser.setItems((String[])avaliavleList.toArray(new String[0]));
}","private void buildParameterChoices(String selectedParameter){
  ArrayList<String> avaliableList=new ArrayList<String>();
  for (Iterator<ParameterHandle> iter=parameterList.iterator(); iter.hasNext(); ) {
    ParameterHandle parameter=iter.next();
    avaliableList.add(parameter.getQualifiedName());
  }
  for (Iterator<ParamBinding> iter=bindingList.iterator(); iter.hasNext(); ) {
    ParamBinding paramBinding=iter.next();
    if (!paramBinding.getParamName().equals(selectedParameter)) {
      avaliableList.remove(paramBinding.getParamName());
    }
  }
  parameterChooser.setItems(avaliableList.toArray(new String[0]));
}",0.6944
67468,"/** 
 * @param expList
 * @param uv
 */
private void getURLValueExpressions(List<String> expList,URLValue uv){
  String sa=uv.getBaseUrl();
  try {
    ActionHandle handle=actionHandleCache.get(sa);
    String exp;
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
      ExpressionHandle expHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
      if (ExpressionType.JAVASCRIPT.equals(expHandle.getType())) {
        exp=expHandle.getStringExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
      ExpressionHandle exprHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.TARGET_BOOKMARK_MEMBER);
      exprCodec.setExpression(exprHandle.getStringValue());
      exprCodec.setType(exprHandle.getType());
      exp=exprCodec.encode();
      if (!expList.contains(exp)) {
        expList.add(exp);
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
      exp=handle.getTargetBookmark();
      if (exp != null && !expList.contains(exp)) {
        expList.add(exp);
      }
      for (Iterator itr=handle.getSearch().iterator(); itr.hasNext(); ) {
        SearchKeyHandle skh=(SearchKeyHandle)itr.next();
        exp=skh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
      for (Iterator itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
        ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
        exp=pbh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
  }
 catch (  DesignFileException e) {
    logger.log(e);
  }
}","/** 
 * @param expList
 * @param uv
 */
private void getURLValueExpressions(List<String> expList,URLValue uv){
  String sa=uv.getBaseUrl();
  try {
    ActionHandle handle=actionHandleCache.get(sa);
    String exp;
    if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
      ExpressionHandle expHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
      if (ExpressionType.JAVASCRIPT.equals(expHandle.getType())) {
        exp=expHandle.getStringExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType())) {
      ExpressionHandle exprHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.TARGET_BOOKMARK_MEMBER);
      exprCodec.setExpression(exprHandle.getStringValue());
      exprCodec.setType(exprHandle.getType());
      exp=exprCodec.encode();
      if (!expList.contains(exp)) {
        expList.add(exp);
      }
    }
 else     if (DesignChoiceConstants.ACTION_LINK_TYPE_DRILL_THROUGH.equals(handle.getLinkType())) {
      ExpressionHandle exprHandle=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.TARGET_BOOKMARK_MEMBER);
      exprCodec.setExpression(exprHandle.getStringValue());
      exprCodec.setType(exprHandle.getType());
      exp=exprCodec.encode();
      if (exp != null && !expList.contains(exp)) {
        expList.add(exp);
      }
      for (Iterator<?> itr=handle.getSearch().iterator(); itr.hasNext(); ) {
        SearchKeyHandle skh=(SearchKeyHandle)itr.next();
        exp=skh.getExpression();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
      for (Iterator<?> itr=handle.getParamBindings().iterator(); itr.hasNext(); ) {
        ParamBindingHandle pbh=(ParamBindingHandle)itr.next();
        exprHandle=pbh.getExpressionProperty(ParamBinding.EXPRESSION_MEMBER);
        exprCodec.setExpression(exprHandle.getStringValue());
        exprCodec.setType(exprHandle.getType());
        exp=exprCodec.encode();
        if (!expList.contains(exp)) {
          expList.add(exp);
        }
      }
    }
  }
 catch (  DesignFileException e) {
    logger.log(e);
  }
}",0.8888888888888888
67469,"public String[] getActionExpressions(Action action,StructureSource source){
  if (action instanceof MultipleActions) {
    List<String> expList=new ArrayList<String>();
    for (    Action subAction : ((MultipleActions)action).getActions()) {
      if (subAction.getValue() instanceof URLValue) {
        getURLValueExpressions(expList,(URLValue)subAction.getValue());
      }
    }
    if (expList.size() > 0) {
      return (String[])expList.toArray(new String[expList.size()]);
    }
  }
 else   if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    List<String> expList=new ArrayList<String>();
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      getURLValueExpressions(expList,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        getURLValueExpressions(expList,uv);
      }
    }
    if (expList.size() > 0) {
      return (String[])expList.toArray(new String[expList.size()]);
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    if (StructureType.SERIES.equals(source.getType())) {
      TooltipValue tv=(TooltipValue)action.getValue();
      String exp=tv.getText();
      if (exp != null && exp.trim().length() > 0) {
        return new String[]{exp};
      }
    }
  }
  return null;
}","@Override public String[] getActionExpressions(Action action,StructureSource source){
  if (action instanceof MultipleActions) {
    List<String> expList=new ArrayList<String>();
    for (    Action subAction : ((MultipleActions)action).getActions()) {
      if (subAction.getValue() instanceof URLValue) {
        getURLValueExpressions(expList,(URLValue)subAction.getValue());
      }
    }
    if (expList.size() > 0) {
      return (String[])expList.toArray(new String[expList.size()]);
    }
  }
 else   if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    List<String> expList=new ArrayList<String>();
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      getURLValueExpressions(expList,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        getURLValueExpressions(expList,uv);
      }
    }
    if (expList.size() > 0) {
      return (String[])expList.toArray(new String[expList.size()]);
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    if (StructureType.SERIES.equals(source.getType())) {
      TooltipValue tv=(TooltipValue)action.getValue();
      String exp=tv.getText();
      if (exp != null && exp.trim().length() > 0) {
        return new String[]{exp};
      }
    }
  }
  return null;
}",0.9964513839602556
67470,"public void processAction(Action action,StructureSource source){
  if (action instanceof MultipleActions) {
    for (    Action subAction : ((MultipleActions)action).getActions()) {
      if (subAction.getValue() instanceof URLValue) {
        generateURLValue(source,(URLValue)subAction.getValue());
      }
    }
  }
 else   if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      generateURLValue(source,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        generateURLValue(source,uv);
      }
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      if (!dph.isVirtual()) {
        tv.setText(ChartUtil.stringValue(dph.getUserValue(tv.getText())));
      }
 else {
        tv.setText(null);
      }
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      LegendItemHints lih=(LegendItemHints)source.getSource();
      if (tv.getText() == null || tv.getText().equals(""String_Node_Str"")) {
        tv.setText(lih.getItemText());
      }
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap<String,String>();
    }
    String evaluatResult=cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}","@Override public void processAction(Action action,StructureSource source){
  if (action instanceof MultipleActions) {
    for (    Action subAction : ((MultipleActions)action).getActions()) {
      if (subAction.getValue() instanceof URLValue) {
        generateURLValue(source,(URLValue)subAction.getValue());
      }
    }
  }
 else   if (ActionType.URL_REDIRECT_LITERAL.equals(action.getType())) {
    if (action.getValue() instanceof URLValue) {
      URLValue uv=(URLValue)action.getValue();
      generateURLValue(source,uv);
    }
 else     if (action.getValue() instanceof MultiURLValues) {
      for (      URLValue uv : ((MultiURLValues)action.getValue()).getURLValues()) {
        generateURLValue(source,uv);
      }
    }
  }
 else   if (ActionType.SHOW_TOOLTIP_LITERAL.equals(action.getType())) {
    TooltipValue tv=(TooltipValue)action.getValue();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      if (!dph.isVirtual()) {
        tv.setText(ChartUtil.stringValue(dph.getUserValue(tv.getText())));
      }
 else {
        tv.setText(null);
      }
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      LegendItemHints lih=(LegendItemHints)source.getSource();
      if (tv.getText() == null || tv.getText().equals(""String_Node_Str"")) {
        tv.setText(lih.getItemText());
      }
    }
  }
 else   if (ActionType.INVOKE_SCRIPT_LITERAL.equals(action.getType())) {
    ScriptValue sv=(ScriptValue)action.getValue();
    if (cacheScriptEvaluator == null) {
      cacheScriptEvaluator=new HashMap<String,String>();
    }
    String evaluatResult=cacheScriptEvaluator.get(sv.getScript());
    if (evaluatResult == null) {
      evaluatResult=evaluateExpression(sv.getScript());
      cacheScriptEvaluator.put(sv.getScript(),evaluatResult);
    }
    sv.setScript(evaluatResult);
  }
}",0.99738082765846
67471,"protected String getActionString(ChartHyperlinkActionBase chAction,ActionHandle handle){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
    ExpressionHandle urlExpr=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
    String text=urlExpr.getStringExpression();
    if (ExpressionType.CONSTANT.equals(urlExpr.getType())) {
      return text;
    }
 else {
      return ChartUtil.stringValue(chAction.evaluate(text));
    }
  }
  if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))   return ChartUtil.stringValue(chAction.evaluate(handle.getTargetBookmark()));
  return null;
}","protected String getActionString(ChartHyperlinkActionBase chAction,ActionHandle handle){
  if (DesignChoiceConstants.ACTION_LINK_TYPE_HYPERLINK.equals(handle.getLinkType())) {
    ExpressionHandle urlExpr=handle.getExpressionProperty(org.eclipse.birt.report.model.api.elements.structures.Action.URI_MEMBER);
    String text=urlExpr.getStringExpression();
    if (ExpressionType.CONSTANT.equals(urlExpr.getType())) {
      return text;
    }
    return ChartUtil.stringValue(chAction.evaluate(text));
  }
  if (DesignChoiceConstants.ACTION_LINK_TYPE_BOOKMARK_LINK.equals(handle.getLinkType()))   return ChartUtil.stringValue(chAction.evaluate(handle.getTargetBookmark()));
  return null;
}",0.9885057471264368
67472,"/** 
 * @param source
 * @param uv
 */
private void generateURLValue(StructureSource source,URLValue uv){
  String sa=uv.getBaseUrl();
  String target=null;
  final ActionHandle handle=getActionHandleInstance(sa);
  if (handle != null) {
    setTooltip(uv,handle);
    target=handle.getTargetWindow();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        public Object evaluate(        String expr){
          return dph.getUserValue(expr);
        }
      }
,context);
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      final LegendItemHints lih=(LegendItemHints)source.getSource();
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        public Object evaluate(        String expr){
          if (expr != null) {
            if (expr.indexOf(LEGEND_ITEM_TEXT) >= 0) {
              String legendItemText=wrapQuotation(lih.getItemText());
              expr=Pattern.compile(LEGEND_ITEM_TEXT,Pattern.LITERAL).matcher(expr).replaceAll(legendItemText);
            }
            if (expr.indexOf(LEGEND_ITEM_VALUE) >= 0) {
              String legendItemValue=wrapQuotation(lih.getValueText());
              expr=Pattern.compile(LEGEND_ITEM_VALUE,Pattern.LITERAL).matcher(expr).replaceAll(legendItemValue);
            }
          }
          return evaluator.evaluate(expr);
        }
      }
,context);
    }
 else {
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        public Object evaluate(        String expr){
          return evaluator.evaluate(expr);
        }
      }
,context);
    }
  }
 else {
    sa=""String_Node_Str"";
  }
  uv.setBaseUrl(sa);
  uv.setTarget(target);
}","/** 
 * @param source
 * @param uv
 */
private void generateURLValue(StructureSource source,URLValue uv){
  String sa=uv.getBaseUrl();
  String target=null;
  final ActionHandle handle=getActionHandleInstance(sa);
  if (handle != null) {
    setTooltip(uv,handle);
    target=handle.getTargetWindow();
    if (StructureType.SERIES_DATA_POINT.equals(source.getType())) {
      final DataPointHints dph=(DataPointHints)source.getSource();
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        @Override public Object evaluate(        String expr){
          return dph.getUserValue(expr);
        }
      }
,context);
    }
 else     if (StructureType.LEGEND_ENTRY.equals(source.getType())) {
      final LegendItemHints lih=(LegendItemHints)source.getSource();
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        @Override public Object evaluate(        String expr){
          if (expr != null) {
            if (expr.indexOf(LEGEND_ITEM_TEXT) >= 0) {
              String legendItemText=wrapQuotation(lih.getItemText());
              expr=Pattern.compile(LEGEND_ITEM_TEXT,Pattern.LITERAL).matcher(expr).replaceAll(legendItemText);
            }
            if (expr.indexOf(LEGEND_ITEM_VALUE) >= 0) {
              String legendItemValue=wrapQuotation(lih.getValueText());
              expr=Pattern.compile(LEGEND_ITEM_VALUE,Pattern.LITERAL).matcher(expr).replaceAll(legendItemValue);
            }
          }
          return evaluator.evaluate(expr);
        }
      }
,context);
    }
 else {
      sa=handler.getURL(new ChartHyperlinkActionBase(handle){
        @Override public Object evaluate(        String expr){
          return evaluator.evaluate(expr);
        }
      }
,context);
    }
  }
 else {
    sa=""String_Node_Str"";
  }
  uv.setBaseUrl(sa);
  uv.setTarget(target);
}",0.9917127071823204
67473,"public Object evaluate(String expr){
  return evaluator.evaluate(expr);
}","@Override public Object evaluate(String expr){
  return evaluator.evaluate(expr);
}",0.935897435897436
67474,"private static Integer binarySearch(Object target,List sortedList,int searchOption) throws DataException {
  int low=0;
  int high=sortedList.size() - 1;
  int mid=(low + high) >> 1;
  while (low <= high) {
    mid=(low + high) >> 1;
    Object midVal=sortedList.get(mid);
    int cmp=ScriptEvalUtil.compare(midVal,target);
    if (cmp < 0)     low=mid + 1;
 else     if (cmp > 0)     high=mid - 1;
 else {
      if (searchOption == IConditionalExpression.OP_EQ || searchOption == IConditionalExpression.OP_GE || searchOption == IConditionalExpression.OP_LE)       return mid;
      break;
    }
  }
  if (low > high) {
    int temp=low;
    low=high;
    high=temp;
    if (high >= sortedList.size())     high=sortedList.size() - 1;
  }
  if (searchOption == IConditionalExpression.OP_EQ) {
    int threshHold=-1;
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) == 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_GE) {
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) >= 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_LE) {
    for (int i=high; i >= low; i--) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) <= 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_GT) {
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) > 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_LT) {
    for (int i=high; i >= low; i--) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) < 0) {
        return i;
      }
    }
  }
  return -1;
}","private static Integer binarySearch(Object target,List sortedList,int searchOption) throws DataException {
  int low=0;
  int high=sortedList.size() - 1;
  int mid=(low + high) >> 1;
  while (low <= high) {
    mid=(low + high) >> 1;
    Object midVal=sortedList.get(mid);
    int cmp=ScriptEvalUtil.compare(midVal,target);
    if (cmp < 0)     low=mid + 1;
 else     if (cmp > 0)     high=mid - 1;
 else {
      if (searchOption == IConditionalExpression.OP_EQ || searchOption == IConditionalExpression.OP_GE || searchOption == IConditionalExpression.OP_LE)       return mid;
      break;
    }
  }
  if (low > high) {
    int temp=low;
    low=high;
    high=temp;
    if (high >= sortedList.size())     high=sortedList.size() - 1;
  }
  if (searchOption == IConditionalExpression.OP_EQ) {
    int threshHold=-1;
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) == 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_GE) {
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) >= 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_LE) {
    for (int i=high; i >= low; i--) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) <= 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_GT) {
    if (high == low)     return high + 1;
    for (int i=low; i <= high; i++) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) > 0) {
        return i;
      }
    }
  }
 else   if (searchOption == IConditionalExpression.OP_LT) {
    if (high == low)     return high - 1;
    for (int i=high; i >= low; i--) {
      if (ScriptEvalUtil.compare(sortedList.get(i),target) < 0) {
        return i;
      }
    }
  }
  return -1;
}",0.9768467475192943
67475,"public List<Integer> seek(Object value) throws DataException {
  List keyList=this.keys.get();
  List<List<Integer>> indexList=this.indexs.get();
  int threshHold=binarySearch(value,keyList,IConditionalExpression.OP_EQ);
  if (threshHold < 0 || threshHold >= keyList.size())   return new ArrayList();
  List<Integer> result=new ArrayList<Integer>();
  result.addAll(indexList.get(threshHold));
  return result;
}","public List<Integer> seek(Object value) throws DataException {
  init();
  List keyList=this.keys.get();
  List<List<Integer>> indexList=this.indexs.get();
  int threshHold=binarySearch(value,keyList,IConditionalExpression.OP_EQ);
  if (threshHold < 0 || threshHold >= keyList.size())   return new ArrayList();
  List<Integer> result=new ArrayList<Integer>();
  result.addAll(indexList.get(threshHold));
  return result;
}",0.988009592326139
67476,"public OutputColumnTableViewer(Composite parent){
  mainControl=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  mainControl.setLayout(layout);
  GridData data=null;
  viewer=new TableViewer(mainControl,SWT.FULL_SELECTION | SWT.BORDER);
  data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  viewer.getTable().setHeaderVisible(true);
  viewer.getTable().setLinesVisible(true);
  viewer.getTable().addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  viewer.getTable().addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      if (viewer.getTable().getSelectionCount() == 1) {
        doEdit();
      }
    }
  }
);
  Composite btnComposite=new Composite(mainControl,SWT.NONE);
  data=new GridData();
  data.verticalAlignment=SWT.CENTER;
  btnComposite.setLayoutData(data);
  GridLayout btnLayout=new GridLayout();
  layout.verticalSpacing=20;
  btnComposite.setLayout(btnLayout);
  GridData btnData=new GridData(GridData.CENTER);
  btnData.widthHint=52;
  btnAdd=new Button(btnComposite,SWT.NONE);
  btnAdd.setText(Messages.getString(""String_Node_Str""));
  btnAdd.setLayoutData(btnData);
  btnAdd.setEnabled(true);
  btnEdit=new Button(btnComposite,SWT.NONE);
  btnEdit.setText(Messages.getString(""String_Node_Str""));
  btnEdit.setLayoutData(btnData);
  btnRemove=new Button(btnComposite,SWT.NONE);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.setLayoutData(btnData);
  btnRemove.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedItem();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  btnUp=new Button(btnComposite,SWT.NONE);
  btnUp.setText(Messages.getString(""String_Node_Str""));
  btnUp.setLayoutData(btnData);
  btnUp.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      doMoveUp();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  btnDown=new Button(btnComposite,SWT.NONE);
  btnDown.setText(Messages.getString(""String_Node_Str""));
  btnDown.setLayoutData(btnData);
  btnDown.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      doMoveDown();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedItem();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemoveAll();
    }
  }
);
  viewer.getTable().setMenu(menu);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      viewer.getTable();
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        removeSelectedItem();
      }
    }
  }
);
}","public OutputColumnTableViewer(Composite parent){
  mainControl=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  mainControl.setLayout(layout);
  GridData data=null;
  viewer=new TableViewer(mainControl,SWT.FULL_SELECTION | SWT.BORDER);
  data=new GridData(GridData.FILL_BOTH);
  viewer.getControl().setLayoutData(data);
  viewer.getTable().setHeaderVisible(true);
  viewer.getTable().setLinesVisible(true);
  viewer.getTable().addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      updateButtons();
    }
  }
);
  viewer.getTable().addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      if (viewer.getTable().getSelectionCount() == 1) {
        doEdit();
      }
    }
  }
);
  Composite btnComposite=new Composite(mainControl,SWT.NONE);
  data=new GridData();
  data.verticalAlignment=SWT.CENTER;
  btnComposite.setLayoutData(data);
  GridLayout btnLayout=new GridLayout();
  layout.verticalSpacing=20;
  btnComposite.setLayout(btnLayout);
  btnAdd=new Button(btnComposite,SWT.NONE);
  btnAdd.setText(Messages.getString(""String_Node_Str""));
  btnAdd.setEnabled(true);
  btnEdit=new Button(btnComposite,SWT.NONE);
  btnEdit.setText(Messages.getString(""String_Node_Str""));
  btnRemove=new Button(btnComposite,SWT.NONE);
  btnRemove.setText(Messages.getString(""String_Node_Str""));
  btnRemove.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedItem();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  btnUp=new Button(btnComposite,SWT.NONE);
  btnUp.setText(Messages.getString(""String_Node_Str""));
  btnUp.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      doMoveUp();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  btnDown=new Button(btnComposite,SWT.NONE);
  btnDown.setText(Messages.getString(""String_Node_Str""));
  btnDown.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      doMoveDown();
    }
    public void widgetDefaultSelected(    SelectionEvent e){
    }
  }
);
  int width=getMaxWidth(btnAdd,55);
  width=getMaxWidth(btnEdit,width);
  width=getMaxWidth(btnRemove,width);
  width=getMaxWidth(btnUp,width);
  width=getMaxWidth(btnDown,width);
  GridData btnData=new GridData(GridData.CENTER);
  btnData.widthHint=width;
  btnAdd.setLayoutData(btnData);
  btnEdit.setLayoutData(btnData);
  btnRemove.setLayoutData(btnData);
  btnUp.setLayoutData(btnData);
  btnDown.setLayoutData(btnData);
  menu=new Menu(viewer.getTable());
  menu.addMenuListener(new MenuAdapter(){
    public void menuShown(    MenuEvent e){
      viewer.cancelEditing();
    }
  }
);
  itmRemove=new MenuItem(menu,SWT.NONE);
  itmRemove.setText(Messages.getString(""String_Node_Str""));
  itmRemove.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      removeSelectedItem();
    }
  }
);
  itmRemoveAll=new MenuItem(menu,SWT.NONE);
  itmRemoveAll.setText(Messages.getString(""String_Node_Str""));
  itmRemoveAll.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doRemoveAll();
    }
  }
);
  viewer.getTable().setMenu(menu);
  viewer.getTable().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      viewer.getTable();
    }
    public void keyReleased(    KeyEvent e){
      if (e.keyCode == SWT.DEL) {
        removeSelectedItem();
      }
    }
  }
);
}",0.4934626739772248
67477,"private void createButtonArea(){
  Composite composite=new Composite(this,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER));
  GridLayout layout=Utility.createGridLayoutWithoutMargin();
  layout.verticalSpacing=10;
  composite.setLayout(layout);
  add=new Button(composite,SWT.NONE);
  add.setText(Messages.getString(""String_Node_Str""));
  GridData addGd=new GridData();
  addGd.widthHint=52;
  add.setLayoutData(addGd);
  add.setEnabled(true);
  add.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doNew();
    }
  }
);
  edit=new Button(composite,SWT.NONE);
  edit.setText(Messages.getString(""String_Node_Str""));
  GridData editGd=new GridData();
  editGd.widthHint=52;
  edit.setLayoutData(editGd);
  edit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doEdit();
    }
  }
);
  delete=new Button(composite,SWT.NONE);
  delete.setText(Messages.getString(""String_Node_Str""));
  GridData deleteGd=new GridData();
  deleteGd.widthHint=52;
  delete.setLayoutData(deleteGd);
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.DEL);
    }
  }
);
  up=new Button(composite,SWT.NONE);
  up.setText(Messages.getString(""String_Node_Str""));
  GridData upGd=new GridData();
  upGd.widthHint=52;
  up.setLayoutData(upGd);
  up.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.UP);
    }
  }
);
  down=new Button(composite,SWT.NONE);
  down.setText(Messages.getString(""String_Node_Str""));
  GridData downGd=new GridData();
  downGd.widthHint=52;
  down.setLayoutData(downGd);
  down.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.DOWN);
    }
  }
);
}","private void createButtonArea(){
  Composite composite=new Composite(this,SWT.NONE);
  composite.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_CENTER));
  GridLayout layout=Utility.createGridLayoutWithoutMargin();
  layout.verticalSpacing=10;
  composite.setLayout(layout);
  add=new Button(composite,SWT.NONE);
  add.setText(Messages.getString(""String_Node_Str""));
  add.setEnabled(true);
  add.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doNew();
    }
  }
);
  edit=new Button(composite,SWT.NONE);
  edit.setText(Messages.getString(""String_Node_Str""));
  edit.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      doEdit();
    }
  }
);
  delete=new Button(composite,SWT.NONE);
  delete.setText(Messages.getString(""String_Node_Str""));
  delete.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.DEL);
    }
  }
);
  up=new Button(composite,SWT.NONE);
  up.setText(Messages.getString(""String_Node_Str""));
  up.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.UP);
    }
  }
);
  down=new Button(composite,SWT.NONE);
  down.setText(Messages.getString(""String_Node_Str""));
  down.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      buttonPressed(SWT.DOWN);
    }
  }
);
  int width=getMaxWidth(add,55);
  width=getMaxWidth(edit,width);
  width=getMaxWidth(delete,width);
  width=getMaxWidth(up,width);
  width=getMaxWidth(down,width);
  GridData buttonGd=new GridData();
  buttonGd.widthHint=width;
  add.setLayoutData(buttonGd);
  edit.setLayoutData(buttonGd);
  delete.setLayoutData(buttonGd);
  up.setLayoutData(buttonGd);
  down.setLayoutData(buttonGd);
}",0.7840759293435275
67478,"public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth(),reportDpi);
  width=Math.min(width,context.getCurrentWidth());
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.startTable(table.getComputedStyle(),getTableWidth(cols));
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}","public void startTable(ITableContent table){
  adjustInline();
  styles.push(table.getComputedStyle());
  writeBookmark(table);
  Object tableToc=table.getTOC();
  if (tableToc != null) {
    tableTocs.add(new TocInfo(tableToc.toString(),tocLevel));
  }
  increaseTOCLevel(table);
  String caption=table.getCaption();
  if (caption != null) {
    wordWriter.writeCaption(caption);
  }
  if (context.isLastTable()) {
    wordWriter.insertHiddenParagraph();
  }
  int width=WordUtil.convertTo(table.getWidth(),context.getCurrentWidth(),reportDpi);
  int[] cols=computeTblColumnWidths(table,width);
  wordWriter.startTable(table.getComputedStyle(),getTableWidth(cols));
  wordWriter.writeColumn(cols);
  context.addTable(cols,table.getComputedStyle());
}",0.9671603348358015
67479,"private int[] computeTblColumnWidths(ITableContent table,int tblWidth){
  int colCount=table.getColumnCount();
  int[] tblColumns=new int[colCount];
  int count=0;
  int total=0;
  for (int i=0; i < colCount; i++) {
    IColumn col=table.getColumn(i);
    if (col.getWidth() == null) {
      tblColumns[i]=-1;
      count++;
    }
 else {
      tblColumns[i]=WordUtil.convertTo(col.getWidth(),tblWidth,reportDpi);
      total+=tblColumns[i];
    }
  }
  if (table.getWidth() == null && count == 0) {
    return tblColumns;
  }
  return EmitterUtil.resizeTableColumn(tblWidth,tblColumns,count,total);
}","private int[] computeTblColumnWidths(ITableContent table,int tblWidth){
  int colCount=table.getColumnCount();
  int[] tblColumns=new int[colCount];
  int count=0;
  int total=0;
  for (int i=0; i < colCount; i++) {
    IColumn col=table.getColumn(i);
    if (col.getWidth() == null) {
      tblColumns[i]=-1;
      count++;
    }
 else {
      tblColumns[i]=WordUtil.convertTo(col.getWidth(),tblWidth,reportDpi);
      total+=tblColumns[i];
    }
  }
  if (table.getWidth() == null && count == 0) {
    return tblColumns;
  }
  tblWidth=Math.min(tblWidth,context.getCurrentWidth());
  return EmitterUtil.resizeTableColumn(tblWidth,tblColumns,count,total);
}",0.95472597299444
67480,"private void populateTable(){
  for (  String propName : propMap.keySet()) {
    ExtendedProperty property=propMap.get(propName);
    String[] sProperty=new String[2];
    sProperty[0]=property.getName();
    sProperty[1]=property.getValue();
    TableItem tiProp=new TableItem(table,SWT.CHECK);
    tiProp.setBackground(getSelectionColor());
    tiProp.setText(sProperty);
  }
  if (table.getItemCount() > 0) {
    table.select(0);
    btnRemove.setEnabled(!propDisabledMap.containsKey(table.getItem(0).getText()));
  }
 else {
    txtNewKey.forceFocus();
    btnRemove.setEnabled(false);
  }
}","private void populateTable(){
  for (  String propName : propMap.keySet()) {
    ExtendedProperty property=propMap.get(propName);
    String[] sProperty=new String[2];
    sProperty[0]=property.getName();
    sProperty[1]=property.getValue();
    TableItem tiProp=new TableItem(table,SWT.CHECK);
    tiProp.setText(sProperty);
  }
  if (table.getItemCount() > 0) {
    table.select(0);
    btnRemove.setEnabled(!propDisabledMap.containsKey(table.getItem(0).getText()));
  }
 else {
    txtNewKey.forceFocus();
    btnRemove.setEnabled(false);
  }
}",0.9588801399825022
67481,"/** 
 * @return
 */
private int getAllMeasuerSize(){
  int size=0;
  for (int i=0; i < factTable.getMeasureInfo().length; i++) {
    if (factTable.getMeasureInfo()[i].getDataType() == DataType.DOUBLE_TYPE)     size+=8;
 else     if (factTable.getMeasureInfo()[i].getDataType() == DataType.INTEGER_TYPE)     size+=4;
 else     return -1;
  }
  return size;
}","/** 
 * @return
 */
private int getAllMeasuerSize(){
  int size=0;
  for (int i=0; i < factTable.getMeasureInfo().length; i++) {
    if (factTable.getMeasureInfo()[i].getDataType() == DataType.DOUBLE_TYPE)     size+=9;
 else     if (factTable.getMeasureInfo()[i].getDataType() == DataType.INTEGER_TYPE)     size+=5;
 else     return -1;
  }
  return size;
}",0.9943977591036416
67482,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList<SeriesDefinition> seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      ((BarSeries)series).setRiser(foRiserType);
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,Orientation newOrientation,String sNewDimension){
  Chart helperModel=currentChart.copyInstance();
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartDimension oldDimension=currentChart.getDimension();
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  IChartType oldType=ChartUIUtil.getChartType(currentChart.getType());
  if ((currentChart instanceof ChartWithAxes)) {
    if (!currentChart.getType().equals(fsTypeLiteral)) {
      currentChart.setType(fsTypeLiteral);
      currentChart.setSubType(sNewSubType);
      Text title=currentChart.getTitle().getLabel().getCaption();
      if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
        title.setValue(getDefaultTitle());
      }
      List<AxisType> axisTypes=new ArrayList<AxisType>();
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
          axes.get(i).setType(AxisType.LINEAR_LITERAL);
        }
        axes.get(i).setPercent(sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
        EList<SeriesDefinition> seriesdefinitions=axes.get(i).getSeriesDefinitions();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          series=getConvertedSeries(series,seriesIndex++);
          if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
            axes.get(i).setType(AxisType.LINEAR_LITERAL);
          }
          boolean isStacked=(sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL));
          series.setStacked(isStacked);
          seriesdefinitions.get(j).getSeries().clear();
          seriesdefinitions.get(j).getSeries().add(series);
          axisTypes.add(axes.get(i).getType());
        }
      }
      currentChart.setSampleData(getConvertedSampleData(currentChart.getSampleData(),((ChartWithAxes)currentChart).getAxes().get(0).getType(),axisTypes));
    }
 else {
      EList<Axis> axes=((ChartWithAxes)currentChart).getAxes().get(0).getAssociatedAxes();
      for (int i=0, seriesIndex=0; i < axes.size(); i++) {
        if (!currentChart.getSubType().equals(sNewSubType)) {
          if (sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL)) {
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              axes.get(i).setType(AxisType.LINEAR_LITERAL);
            }
            axes.get(i).setPercent(true);
          }
 else {
            axes.get(i).setPercent(false);
          }
        }
        EList<SeriesDefinition> seriesdefinitions=(axes.get(i)).getSeriesDefinitions();
        Series firstSeries=seriesdefinitions.get(0).getDesignTimeSeries();
        for (int j=0; j < seriesdefinitions.size(); j++) {
          Series series=seriesdefinitions.get(j).getDesignTimeSeries();
          if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
            if (j != 0) {
              series=getConvertedSeriesAsFirst(series,seriesIndex,firstSeries);
            }
            seriesIndex++;
            if (!ChartPreviewPainterBase.isLivePreviewActive() && !isNumbericAxis(axes.get(i))) {
              (axes.get(i)).setType(AxisType.LINEAR_LITERAL);
            }
            if (series.canBeStacked()) {
              series.setStacked(true);
            }
            seriesdefinitions.get(j).getSeries().clear();
            seriesdefinitions.get(j).getSeries().add(series);
          }
 else {
            series.setStacked(false);
          }
        }
      }
      if (!currentChart.getSubType().equals(sNewSubType)) {
        currentChart.setSubType(sNewSubType);
      }
    }
  }
 else {
    currentChart=ChartWithAxesImpl.create();
    currentChart.setType(fsTypeLiteral);
    currentChart.setSubType(sNewSubType);
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
    ((ChartWithAxes)currentChart).getAxes().get(0).setOrientation(Orientation.HORIZONTAL_LITERAL);
    ((ChartWithAxes)currentChart).getAxes().get(0).setCategoryAxis(true);
    ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).setOrientation(Orientation.VERTICAL_LITERAL);
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setSeriesThickness(helperModel.getSeriesThickness());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
{
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().clear();
      (((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions().addAll(((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeriesDefinitions());
      Series series=((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getDesignTimeSeries();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().clear();
      ((((ChartWithAxes)currentChart).getAxes().get(0)).getSeriesDefinitions().get(0)).getSeries().add(series);
      EList<SeriesDefinition> seriesdefinitions=((((ChartWithAxes)currentChart).getAxes().get(0)).getAssociatedAxes().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        series=(seriesdefinitions.get(j)).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        series.getLabel().setVisible(false);
        if ((sNewSubType.equalsIgnoreCase(STACKED_SUBTYPE_LITERAL) || sNewSubType.equalsIgnoreCase(PERCENTSTACKED_SUBTYPE_LITERAL))) {
          series.setStacked(true);
        }
 else {
          series.setStacked(false);
        }
        (seriesdefinitions.get(j)).getSeries().clear();
        (seriesdefinitions.get(j)).getSeries().add(series);
      }
    }
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    Text title=currentChart.getTitle().getLabel().getCaption();
    if (title.getValue() == null || title.getValue().trim().length() == 0 || title.getValue().trim().equals(oldType.getDefaultTitle().trim())) {
      title.setValue(getDefaultTitle());
    }
  }
  if (!((ChartWithAxes)currentChart).getOrientation().equals(newOrientation)) {
    ((ChartWithAxes)currentChart).setOrientation(newOrientation);
  }
  if (!currentChart.getDimension().equals(ChartUIUtil.getDimensionType(sNewDimension))) {
    currentChart.setDimension(ChartUIUtil.getDimensionType(sNewDimension));
  }
  if (sNewDimension.equals(THREE_DIMENSION_TYPE) && ChartUIUtil.getDimensionType(sNewDimension) != oldDimension) {
    ((ChartWithAxes)currentChart).setRotation(Rotation3DImpl.create(new Angle3D[]{Angle3DImpl.create(-20,45,0)}));
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().clear();
    Axis zAxisAncillary=AxisImpl.create(Axis.ANCILLARY_BASE);
    zAxisAncillary.setTitlePosition(Position.BELOW_LITERAL);
    zAxisAncillary.getTitle().getCaption().setValue(Messages.getString(""String_Node_Str""));
    zAxisAncillary.getTitle().setVisible(true);
    zAxisAncillary.setPrimaryAxis(true);
    zAxisAncillary.setLabelPosition(Position.BELOW_LITERAL);
    zAxisAncillary.setOrientation(Orientation.HORIZONTAL_LITERAL);
    zAxisAncillary.getOrigin().setType(IntersectionType.MIN_LITERAL);
    zAxisAncillary.getOrigin().setValue(NumberDataElementImpl.create(0));
    zAxisAncillary.getTitle().setVisible(false);
    zAxisAncillary.setType(AxisType.TEXT_LITERAL);
    ((ChartWithAxes)currentChart).getPrimaryBaseAxes()[0].getAncillaryAxes().add(zAxisAncillary);
    SeriesDefinition sdZ=SeriesDefinitionImpl.create();
    sdZ.getSeriesPalette().shift(0);
    sdZ.getSeries().add(SeriesImpl.create());
    zAxisAncillary.getSeriesDefinitions().add(sdZ);
    if (currentChart.getSampleData().getAncillarySampleData().isEmpty()) {
      BaseSampleData sdAncillary=DataFactory.eINSTANCE.createBaseSampleData();
      sdAncillary.setDataSetRepresentation(""String_Node_Str"");
      currentChart.getSampleData().getAncillarySampleData().add(sdAncillary);
    }
    EList<SeriesDefinition> seriesdefinitions=ChartUIUtil.getOrthogonalSeriesDefinitions(currentChart,0);
    for (int j=0; j < seriesdefinitions.size(); j++) {
      Series series=seriesdefinitions.get(j).getDesignTimeSeries();
      if (series instanceof BarSeries) {
        ((BarSeries)series).setRiser(foRiserType);
      }
      series.setStacked(false);
      if ((series instanceof BarSeries) && (series.getLabelPosition() != Position.OUTSIDE_LITERAL)) {
        series.setLabelPosition(Position.OUTSIDE_LITERAL);
      }
    }
  }
  ChartUIUtil.restoreLabelPositionFromCache(currentChart);
  return currentChart;
}",0.9972122256576612
67483,"public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(subDimensionIndex,combinedDimensionPosition.bytesValue());
      readMeasure=false;
      if (!isSelectedRow()) {
        if (!readMeasure) {
          if (allMeasuerSize != -1)           currentSegment.skipBytes(allMeasuerSize);
 else           readMeasure();
        }
        continue;
      }
 else {
        if (!readMeasure)         readMeasure();
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}","public boolean next() throws IOException, DataException {
  while (!stopSign.isStopped()) {
    try {
      if (currentSegment == null) {
        return false;
      }
      Bytes combinedDimensionPosition=currentSegment.readBytes();
      currentPos=factTable.getCombinedPositionCalculator().calculateDimensionPosition(subDimensionIndex,combinedDimensionPosition.bytesValue());
      readMeasure=false;
      if (!isSelectedRow()) {
        if (!readMeasure) {
          if (allMeasuerSize != -1) {
            int n=currentSegment.skipBytes(allMeasuerSize);
            if (n == -1) {
              break;
            }
          }
 else           readMeasure();
        }
        continue;
      }
 else {
        if (!readMeasure)         readMeasure();
        return true;
      }
    }
 catch (    EOFException e) {
      break;
    }
  }
  if (stopSign.isStopped() || !nextSegment()) {
    return false;
  }
  return next();
}",0.9417040358744396
67484,"/** 
 * Creates fills for difference chart
 * @param paletteEntry fill from palette
 * @param isColor to determine output fill is ColorDefinition instance if possible
 * @return Fill array
 */
public static Fill[] createDifferenceFillFromPalette(Fill paletteEntry,boolean isColor){
  Fill fillColorP=null;
  Fill fillColorN=null;
  if (paletteEntry instanceof ColorDefinition) {
    fillColorP=goFactory.copyOf((ColorDefinition)paletteEntry);
    fillColorN=goFactory.copyOf((ColorDefinition)paletteEntry);
  }
 else   if (paletteEntry instanceof MultipleFill) {
    EList<Fill> fills=((MultipleFill)paletteEntry).getFills();
    fillColorP=goFactory.copyOf((ColorDefinition)fills.get(0));
    fillColorN=goFactory.copyOf((ColorDefinition)fills.get(1));
  }
 else   if (isColor && paletteEntry instanceof Gradient) {
    fillColorP=goFactory.copyOf(((Gradient)paletteEntry).getStartColor());
    fillColorN=goFactory.copyOf(((Gradient)paletteEntry).getEndColor());
  }
 else {
    fillColorP=paletteEntry;
    fillColorN=paletteEntry;
  }
  return new Fill[]{fillColorP,fillColorN};
}","/** 
 * Creates fills for difference chart
 * @param paletteEntry fill from palette
 * @param isColor to determine output fill is ColorDefinition instance if possible
 * @return Fill array
 */
public static Fill[] createDifferenceFillFromPalette(Fill paletteEntry,boolean isColor){
  Fill fillColorP=null;
  Fill fillColorN=null;
  if (paletteEntry instanceof ColorDefinition) {
    fillColorP=goFactory.copyOf((ColorDefinition)paletteEntry);
    fillColorN=goFactory.copyOf((ColorDefinition)paletteEntry);
  }
 else   if (paletteEntry instanceof MultipleFill) {
    EList<Fill> fills=((MultipleFill)paletteEntry).getFills();
    fillColorP=goFactory.copyOf(fills.get(0));
    fillColorN=goFactory.copyOf(fills.get(1));
  }
 else   if (isColor && paletteEntry instanceof Gradient) {
    fillColorP=goFactory.copyOf(((Gradient)paletteEntry).getStartColor());
    fillColorN=goFactory.copyOf(((Gradient)paletteEntry).getEndColor());
  }
 else {
    fillColorP=paletteEntry;
    fillColorN=paletteEntry;
  }
  return new Fill[]{fillColorP,fillColorN};
}",0.9840674789128396
67485,"static Fill convertFill(Fill fill,boolean bIncrease){
  if (bIncrease) {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf((ColorDefinition)((MultipleFill)fill).getFills().get(0));
    }
 else {
      fill=ColorDefinitionImpl.WHITE();
    }
  }
 else {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf((ColorDefinition)((MultipleFill)fill).getFills().get(1));
    }
  }
  return fill;
}","static Fill convertFill(Fill fill,boolean bIncrease){
  if (bIncrease) {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf(((MultipleFill)fill).getFills().get(0));
    }
 else {
      fill=ColorDefinitionImpl.WHITE();
    }
  }
 else {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf(((MultipleFill)fill).getFills().get(1));
    }
  }
  return fill;
}",0.958128078817734
67486,"private DataSet adjustEachDataSet(DataSet ds,List<Integer> indexMap){
  Collection<Object> co;
  double[] da;
  Double[] dda;
  long[] la;
  Calendar[] ca;
  String[] sa;
  Object[] oa;
  int[] indexArray=new int[indexMap.size()];
  for (int i=0; i < indexArray.length; i++) {
    indexArray[i]=indexMap.get(i).intValue();
  }
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof double[]) {
      da=(double[])oContent;
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      for (int i=0; i < da.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=da[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Double[]) {
      dda=(Double[])oContent;
      Double[] doubleBuffer=new Double[indexArray.length];
      for (int i=0; i < dda.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=dda[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Number) {
      da=new double[]{((Number)oContent).doubleValue()};
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      int idx=indexArray[0];
      if (idx != -1) {
        doubleBuffer[idx]=da[0];
      }
      ds.setValues(doubleBuffer);
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof long[]) {
      la=(long[])oContent;
      double[] longBuffer=new double[indexArray.length];
      Arrays.fill(longBuffer,Double.NaN);
      for (int i=0; i < la.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          longBuffer[idx]=la[i];
        }
      }
      ds.setValues(longBuffer);
    }
 else     if (oContent instanceof Calendar[]) {
      ca=(Calendar[])oContent;
      Calendar[] calendarBuffer=new Calendar[indexArray.length];
      for (int i=0; i < ca.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          calendarBuffer[idx]=ca[i];
        }
      }
      ds.setValues(calendarBuffer);
    }
  }
 else   if (ds instanceof TextDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof String[]) {
      sa=(String[])oContent;
      String[] stringBuffer=new String[indexArray.length];
      for (int i=0; i < sa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          stringBuffer[idx]=sa[i];
        }
      }
      ds.setValues(stringBuffer);
    }
  }
 else {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof Object[]) {
      oa=(Object[])oContent;
      Object[] objectBuffer=new Object[indexArray.length];
      for (int i=0; i < oa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          objectBuffer[idx]=oa[i];
        }
      }
      ds.setValues(objectBuffer);
    }
  }
  return ds;
}","private DataSet adjustEachDataSet(DataSet ds,List<Integer> indexMap){
  Collection<Object> co;
  double[] da;
  Double[] dda;
  long[] la;
  Calendar[] ca;
  String[] sa;
  Object[] oa;
  BigNumber[] bna;
  int[] indexArray=new int[indexMap.size()];
  for (int i=0; i < indexArray.length; i++) {
    indexArray[i]=indexMap.get(i).intValue();
  }
  Object oContent=ds.getValues();
  if (ds instanceof NumberDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof double[]) {
      da=(double[])oContent;
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      for (int i=0; i < da.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=da[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Double[]) {
      dda=(Double[])oContent;
      Double[] doubleBuffer=new Double[indexArray.length];
      for (int i=0; i < dda.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          doubleBuffer[idx]=dda[i];
        }
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof Number) {
      da=new double[]{((Number)oContent).doubleValue()};
      double[] doubleBuffer=new double[indexArray.length];
      Arrays.fill(doubleBuffer,Double.NaN);
      int idx=indexArray[0];
      if (idx != -1) {
        doubleBuffer[idx]=da[0];
      }
      ds.setValues(doubleBuffer);
    }
 else     if (oContent instanceof BigNumber[]) {
      bna=(BigNumber[])oContent;
      BigNumber[] bigNumberBuffer=new BigNumber[indexArray.length];
      for (int i=0; i < bna.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          bigNumberBuffer[idx]=bna[i];
        }
      }
      ds.setValues(bigNumberBuffer);
    }
  }
 else   if (ds instanceof DateTimeDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof long[]) {
      la=(long[])oContent;
      double[] longBuffer=new double[indexArray.length];
      Arrays.fill(longBuffer,Double.NaN);
      for (int i=0; i < la.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          longBuffer[idx]=la[i];
        }
      }
      ds.setValues(longBuffer);
    }
 else     if (oContent instanceof Calendar[]) {
      ca=(Calendar[])oContent;
      Calendar[] calendarBuffer=new Calendar[indexArray.length];
      for (int i=0; i < ca.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          calendarBuffer[idx]=ca[i];
        }
      }
      ds.setValues(calendarBuffer);
    }
  }
 else   if (ds instanceof TextDataSet) {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof String[]) {
      sa=(String[])oContent;
      String[] stringBuffer=new String[indexArray.length];
      for (int i=0; i < sa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          stringBuffer[idx]=sa[i];
        }
      }
      ds.setValues(stringBuffer);
    }
  }
 else {
    if (oContent instanceof Collection) {
      co=(Collection)oContent;
      Object[] objBuffer=new Object[indexArray.length];
      int i=0;
      for (Iterator itr=co.iterator(); itr.hasNext(); ) {
        Object o=itr.next();
        int idx=indexArray[i++];
        if (idx != -1) {
          objBuffer[idx]=o;
        }
      }
      co.clear();
      for (i=0; i < objBuffer.length; i++) {
        co.add(objBuffer[i]);
      }
    }
 else     if (oContent instanceof Object[]) {
      oa=(Object[])oContent;
      Object[] objectBuffer=new Object[indexArray.length];
      for (int i=0; i < oa.length; i++) {
        int idx=indexArray[i];
        if (idx != -1) {
          objectBuffer[idx]=oa[i];
        }
      }
      ds.setValues(objectBuffer);
    }
  }
  return ds;
}",0.96209311907705
67487,"public IReportItemInstance[] getInstancesByElementName(String elementName) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
    if (elementName.equals(design.getName())) {
      try {
        ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
        instances.add(instance);
      }
 catch (      BirtException ex) {
        throw new ScriptException(ex);
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}","public IReportItemInstance[] getInstancesByElementName(String elementName) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportItemDesign) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      if (elementName.equals(design.getName())) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}",0.9118773946360154
67488,"public IReportItemInstance[] getInstancesByElementId(int elementId) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    ReportItemDesign design=(ReportItemDesign)content.getGenerateBy();
    if (design.getID() == elementId) {
      try {
        ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
        instances.add(instance);
      }
 catch (      BirtException ex) {
        throw new ScriptException(ex);
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}","public IReportItemInstance[] getInstancesByElementId(int elementId) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportItemDesign) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      if (design.getID() == elementId) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}",0.910039113428944
67489,"public void end(IReportContent report) throws IOException, BirtException {
  adjustInline();
  writeSectionInBody();
  wordWriter.endPage();
  wordWriter.end();
}","public void end(IReportContent report) throws IOException, BirtException {
  if (previousPage != null) {
    adjustInline();
    writeSectionInBody();
    wordWriter.endPage();
    wordWriter.end();
  }
}",0.546448087431694
67490,"public String getRightDataSetDesignQulifiedName(){
  return this.rightDataSetQualifiedName;
}","public String getRightDataSetDesignQulifiedName(){
  if (this.rightDataSetQualifiedName == null)   return this.right;
  return this.rightDataSetQualifiedName;
}",0.7351778656126482
67491,"public String getLeftDataSetDesignQulifiedName(){
  return this.leftDataSetQualifiedName;
}","public String getLeftDataSetDesignQulifiedName(){
  if (this.leftDataSetQualifiedName == null)   return this.left;
  return this.leftDataSetQualifiedName;
}",0.7368421052631579
67492,"public JointDataSetAdapter(JointDataSetHandle handle,ModelAdapter adapter) throws BirtException {
  super(handle.getQualifiedName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    Iterator iter=handle.dataSetsIterator();
    DataSetHandle leftHandle=(DataSetHandle)iter.next();
    setLeftDataSetDesignQulifiedName(leftHandle.getQualifiedName());
    setLeftDataSetDesignName(jc.getLeftDataSet());
    DataSetHandle rightHandle=(DataSetHandle)iter.next();
    setRightDataSetDesignQulifiedName(rightHandle.getQualifiedName());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this,adapter);
}","public JointDataSetAdapter(JointDataSetHandle handle,ModelAdapter adapter) throws BirtException {
  super(handle.getQualifiedName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    Iterator iter=handle.dataSetsIterator();
    DataSetHandle leftHandle=null, rightHandle=null;
    if (iter.hasNext()) {
      leftHandle=(DataSetHandle)iter.next();
      setLeftDataSetDesignQulifiedName(leftHandle.getQualifiedName());
    }
    if (iter.hasNext()) {
      rightHandle=(DataSetHandle)iter.next();
      setRightDataSetDesignQulifiedName(rightHandle.getQualifiedName());
    }
 else {
      if (leftHandle != null)       setRightDataSetDesignQulifiedName(leftHandle.getQualifiedName());
    }
    setLeftDataSetDesignName(jc.getLeftDataSet());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this,adapter);
}",0.7631699496106276
67493,"public Collection<IChartSubType> getChartSubtypes(String sDimension,Orientation orientation){
  Vector<IChartSubType> vSubTypes=new Vector<IChartSubType>();
  if (sDimension.equals(TWO_DIMENSION_TYPE) || sDimension.equals(ChartDimension.TWO_DIMENSIONAL_LITERAL.getName())) {
    if (orientation.equals(Orientation.VERTICAL_LITERAL)) {
      img2D=UIHelper.getImage(""String_Node_Str"");
    }
 else {
      img2D=UIHelper.getImage(""String_Node_Str"");
    }
    vSubTypes.add(new DefaultChartSubTypeImpl(STANDARD_SUBTYPE_LITERAL,img2D,sStandardDescription,Messages.getString(""String_Node_Str"")));
  }
  return vSubTypes;
}","public Collection<IChartSubType> getChartSubtypes(String sDimension,Orientation orientation){
  Vector<IChartSubType> vSubTypes=new Vector<IChartSubType>();
  if (sDimension.equals(TWO_DIMENSION_TYPE) || sDimension.equals(ChartDimension.TWO_DIMENSIONAL_LITERAL.getName())) {
    img2D=UIHelper.getImage(""String_Node_Str"");
    vSubTypes.add(new DefaultChartSubTypeImpl(STANDARD_SUBTYPE_LITERAL,img2D,sStandardDescription,Messages.getString(""String_Node_Str"")));
  }
  return vSubTypes;
}",0.8806509945750453
67494,"ContainerArea(ContainerArea area){
  super(area);
  this.first=area.first;
  this.boxStyle=area.getBoxStyle();
  this.needClip=area.needClip();
  this.hasStyle=area.hasStyle;
  this.localProperties=area.localProperties;
  this.content=area.content;
}","ContainerArea(ContainerArea area){
  super(area);
  this.first=area.first;
  this.boxStyle=area.getBoxStyle();
  this.needClip=area.needClip();
  this.hasStyle=area.hasStyle;
  this.localProperties=area.localProperties;
  this.content=area.content;
  this.context=area.context;
}",0.945179584120983
67495,"public void update(AbstractArea area) throws BirtException {
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(getTableArea().getXPos(columnID),0);
}","public void update(AbstractArea area) throws BirtException {
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  cArea.setPosition(getTableArea().getXPos(columnID),0);
  if (content != null && content.isRTL()) {
    cArea.flipPositionForRtl();
  }
}",0.6957983193277311
67496,"public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    specifiedHeight=0;
    table.addRow(this);
  }
  if (content != null && content.isRTL()) {
    reorderCellsForRTL();
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    specifiedHeight=0;
    table.addRow(this);
  }
  parent.update(this);
  finished=true;
}",0.7516778523489933
67497,"public void add(AbstractArea area){
  addChild(area);
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  if (colSpan > 1 && content.isRTL()) {
    columnID+=colSpan - 1;
  }
  cArea.setPosition(getTableArea().getXPos(columnID),0);
}","public void add(AbstractArea area){
  addChild(area);
  CellArea cArea=(CellArea)area;
  int columnID=cArea.getColumnID();
  int colSpan=cArea.getColSpan();
  cArea.setPosition(getTableArea().getXPos(columnID),0);
  if (content != null && content.isRTL()) {
    cArea.flipPositionForRtl();
  }
}",0.6884681583476764
67498,"protected IStyle getLeftCellContentStyle(RowArea lastRow,CellArea currentCell){
  RowArea currentRow=(RowArea)currentCell.getParent();
  int columnID=currentCell.getColumnID();
  CellArea cell=null;
  if (isRTL) {
    cell=currentRow.getCell(columnID + 1);
    if (cell == null && lastRow != null) {
      cell=lastRow.getCell(columnID + 1);
    }
    if (cell == null) {
      return currentCell.getContent().getComputedStyle();
    }
  }
 else {
    cell=currentRow.getCell(columnID - 1);
    if (cell == null && lastRow != null) {
      cell=lastRow.getCell(columnID - 1);
    }
  }
  if (cell != null) {
    return cell.getContent().getComputedStyle();
  }
  return null;
}","protected IStyle getLeftCellContentStyle(RowArea lastRow,CellArea currentCell){
  RowArea currentRow=(RowArea)currentCell.getParent();
  int columnID=currentCell.getColumnID();
  CellArea cell=null;
{
    cell=currentRow.getCell(columnID - 1);
    if (cell == null && lastRow != null) {
      cell=lastRow.getCell(columnID - 1);
    }
  }
  if (cell != null) {
    return cell.getContent().getComputedStyle();
  }
  return null;
}",0.5654923215898826
67499,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=isRTL ? getColumnStyle(columnID + 1) : getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if ((!isRTL && columnID > startCol) || (isRTL && columnID + colSpan - 1 < endCol)) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,cellArea);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if (columnID > startCol) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,cellArea);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else     if (!isRTL) {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
 else     if (isRTL && columnID > startCol && (leftCellContentStyle != null || cellContentStyle != null)) {
      BorderInfo border=bcr.resolveCellLeftBorder(columnStyle,preColumnStyle,cellContentStyle,leftCellContentStyle);
      if (border != null) {
        cellArea.getBoxStyle().setRightBorder(border);
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else     if (!isRTL) {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
 else     if (isRTL && columnID > startCol && (leftCellContentStyle != null || cellContentStyle != null)) {
      BorderInfo border=bcr.resolveCellLeftBorder(columnStyle,preColumnStyle,cellContentStyle,leftCellContentStyle);
      if (border != null) {
        cellArea.getBoxStyle().setRightBorder(border);
      }
    }
  }
}",0.3579903022799959
67500,"public IReportItemInstance[] getInstancesByElementName(String elementName) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportItemDesign) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      if (elementName.equals(design.getName())) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}","public IReportItemInstance[] getInstancesByElementName(String elementName) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportElementDesign) {
      ReportElementDesign design=(ReportElementDesign)generateBy;
      if (elementName.equals(design.getName())) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}",0.9804154302670623
67501,"public IReportItemInstance[] getInstancesByElementId(int elementId) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportItemDesign) {
      ReportItemDesign design=(ReportItemDesign)generateBy;
      if (design.getID() == elementId) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}","public IReportItemInstance[] getInstancesByElementId(int elementId) throws ScriptException {
  ArrayList<IReportItemInstance> instances=new ArrayList<IReportItemInstance>();
  for (  IContent content : contents) {
    Object generateBy=content.getGenerateBy();
    if (generateBy instanceof ReportElementDesign) {
      ReportElementDesign design=(ReportElementDesign)generateBy;
      if (design.getID() == elementId) {
        try {
          ReportItemInstance instance=(ReportItemInstance)ElementUtil.getInstance(content,context,RunningState.PAGEBREAK);
          instances.add(instance);
        }
 catch (        BirtException ex) {
          throw new ScriptException(ex);
        }
      }
    }
  }
  if (!instances.isEmpty()) {
    return instances.toArray(new IReportItemInstance[instances.size()]);
  }
  return null;
}",0.9800362976406534
67502,"/** 
 * @param be
 * @param be2
 * @return
 */
public static boolean isEqualExpression(IBaseExpression be,IBaseExpression be2){
  if (be == be2)   return true;
 else   if (be == null || be2 == null)   return false;
  if (be instanceof IScriptExpression && be2 instanceof IScriptExpression) {
    IScriptExpression se=(IScriptExpression)be;
    IScriptExpression se2=(IScriptExpression)be2;
    return isEqualExpression2(se,se2);
  }
 else   if (be instanceof IConditionalExpression && be2 instanceof IConditionalExpression) {
    IConditionalExpression ce=(IConditionalExpression)be;
    IConditionalExpression ce2=(IConditionalExpression)be2;
    return ce.getDataType() == ce2.getDataType() && ce.getOperator() == ce2.getOperator() && isEqualExpression(ce.getExpression(),ce2.getExpression()) && isEqualExpression(ce.getOperand1(),ce2.getOperand1()) && isEqualExpression(ce.getOperand2(),ce2.getOperand2());
  }
 else   if (be instanceof IExpressionCollection && be2 instanceof IExpressionCollection) {
    return be.getDataType() == be2.getDataType() && isEqualExpressionArray(((IExpressionCollection)be).getExpressions(),((IExpressionCollection)be2).getExpressions());
  }
  return false;
}","/** 
 * @param be
 * @param be2
 * @return
 */
public static boolean isEqualExpression(IBaseExpression be,IBaseExpression be2){
  if (be == be2)   return true;
 else   if (be == null || be2 == null)   return false;
  if (be instanceof IScriptExpression && be2 instanceof IScriptExpression) {
    IScriptExpression se=(IScriptExpression)be;
    IScriptExpression se2=(IScriptExpression)be2;
    return isEqualExpression2(se,se2);
  }
 else   if (be instanceof IConditionalExpression && be2 instanceof IConditionalExpression) {
    IConditionalExpression ce=(IConditionalExpression)be;
    IConditionalExpression ce2=(IConditionalExpression)be2;
    return ce.getDataType() == ce2.getDataType() && ce.getOperator() == ce2.getOperator() && isEqualExpression(ce.getExpression(),ce2.getExpression()) && isEqualExpression(ce.getOperand1(),ce2.getOperand1()) && isEqualExpression(ce.getOperand2(),ce2.getOperand2());
  }
 else   if (be instanceof IExpressionCollection && be2 instanceof IExpressionCollection) {
    return be.getDataType() == be2.getDataType() && isEqualExpressionArray(((IExpressionCollection)be).getExpressions(),((IExpressionCollection)be2).getExpressions());
  }
 else   if (be instanceof ICollectionConditionalExpression && be2 instanceof ICollectionConditionalExpression) {
    ICollectionConditionalExpression f1=(ICollectionConditionalExpression)be;
    ICollectionConditionalExpression f2=(ICollectionConditionalExpression)be2;
    if (be.getDataType() != be2.getDataType() || f1.getExpr().size() != f2.getExpr().size() || f1.getOperand().size() != f2.getOperand().size())     return false;
    if (!isEqualExpressionArray(f1.getExpr(),f2.getExpr()))     return false;
    Iterator iter1=f1.getOperand().iterator();
    Iterator iter2=f2.getOperand().iterator();
    while (iter1.hasNext()) {
      if (!isEqualExpressionArray((Collection)iter1.next(),(Collection)iter2.next()))       return false;
    }
    return true;
  }
  return false;
}",0.7490494296577946
67503,"/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public CSSValue getElementDisplay(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  CSSValue display=null;
  if (style != null) {
    display=style.getProperty(IStyle.STYLE_DISPLAY);
  }
  if (IStyle.NONE_VALUE == display) {
    return IStyle.NONE_VALUE;
  }
  if (x != null || y != null) {
    return IStyle.BLOCK_VALUE;
  }
 else   if (IStyle.INLINE_VALUE == display) {
    if (width != null || height != null) {
      return IStyle.INLINE_BLOCK_VALUE;
    }
 else {
      return IStyle.INLINE_VALUE;
    }
  }
  return IStyle.BLOCK_VALUE;
}","/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, or when the element has right-to-left base direction, it it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public CSSValue getElementDisplay(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  CSSValue display=null;
  if (style != null) {
    display=style.getProperty(IStyle.STYLE_DISPLAY);
  }
  if (IStyle.NONE_VALUE == display) {
    return IStyle.NONE_VALUE;
  }
  if (x != null || y != null) {
    return IStyle.BLOCK_VALUE;
  }
 else   if (IStyle.INLINE_VALUE == display) {
    if (width != null || height != null) {
      return IStyle.INLINE_BLOCK_VALUE;
    }
 else     if (IStyle.CSS_RTL_VALUE.equals(style.getDirection())) {
      return IStyle.INLINE_BLOCK_VALUE;
    }
 else {
      return IStyle.INLINE_VALUE;
    }
  }
  return IStyle.BLOCK_VALUE;
}",0.922875816993464
67504,"/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public int getElementType(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  int type=0;
  String display=null;
  if (style != null) {
    display=style.getDisplay();
  }
  if (EngineIRConstants.DISPLAY_NONE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_NONE;
  }
  if (x != null || y != null) {
    return type | HTMLEmitterUtil.DISPLAY_BLOCK;
  }
 else   if (EngineIRConstants.DISPLAY_INLINE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_INLINE;
    if (width != null || height != null) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
    return type;
  }
  return type | HTMLEmitterUtil.DISPLAY_BLOCK;
}","/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, or when the element has right-to-left base direction, it it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public int getElementType(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  int type=0;
  String display=null;
  if (style != null) {
    display=style.getDisplay();
  }
  if (EngineIRConstants.DISPLAY_NONE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_NONE;
  }
  if (x != null || y != null) {
    return type | HTMLEmitterUtil.DISPLAY_BLOCK;
  }
 else   if (EngineIRConstants.DISPLAY_INLINE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_INLINE;
    if (width != null || height != null) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
 else     if (IStyle.CSS_RTL_VALUE.equals(style.getDirection())) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
    return type;
  }
  return type | HTMLEmitterUtil.DISPLAY_BLOCK;
}",0.9451553930530164
67505,"/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public int getTextElementType(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  int type=0;
  String display=null;
  if (style != null) {
    display=style.getDisplay();
  }
  if (EngineIRConstants.DISPLAY_NONE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_NONE;
  }
  if (x != null || y != null) {
    return type | HTMLEmitterUtil.DISPLAY_BLOCK;
  }
 else   if (EngineIRConstants.DISPLAY_INLINE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_INLINE;
    if (width != null) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
    return type;
  }
  return type | HTMLEmitterUtil.DISPLAY_BLOCK;
}","/** 
 * Checks whether the element is block, inline or inline-block level. In BIRT, the absolute positioning model is used and a box is explicitly offset with respect to its containing block. When an element's x or y is set, it will be treated as a block level element regardless of the 'Display' property set in style. When designating width or height value to an inline element, or when the element has right-to-left base direction, it will be treated as inline-block.
 * @param x Specifies how far a box's left margin edge is offset to the right of the left edge of the box's containing block.
 * @param y Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's containing block.
 * @param width The width of the element.
 * @param height The height of the element.
 * @param style The <code>IStyle</code> object.
 * @return The display type of the element.
 */
public int getTextElementType(DimensionType x,DimensionType y,DimensionType width,DimensionType height,IStyle style){
  int type=0;
  String display=null;
  if (style != null) {
    display=style.getDisplay();
  }
  if (EngineIRConstants.DISPLAY_NONE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_NONE;
  }
  if (x != null || y != null) {
    return type | HTMLEmitterUtil.DISPLAY_BLOCK;
  }
 else   if (EngineIRConstants.DISPLAY_INLINE.equalsIgnoreCase(display)) {
    type|=HTMLEmitterUtil.DISPLAY_INLINE;
    if (width != null) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
 else     if (IStyle.CSS_RTL_VALUE.equals(style.getDirection())) {
      type|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
    }
    return type;
  }
  return type | HTMLEmitterUtil.DISPLAY_BLOCK;
}",0.9455552137803752
67506,"public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || ""String_Node_Str"".equals(textValue)) {
    textValue=""String_Node_Str"";
  }
  int display=htmlEmitter.getTextElementType(x,y,width,height,mergedStyle);
  String tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  boolean bookmarkOutput=false;
  if (metadataFilter != null) {
    bookmarkOutput=metadataEmitter.outputMetadataProperty(metadataFilter.needMetaData(HTMLEmitterUtil.getElementHandle(text)),text,tagName);
  }
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!bookmarkOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    String strColor=mergedStyle.getColor();
    if (null != strColor) {
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(strColor);
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
}","public void startText(ITextContent text){
  IStyle mergedStyle=text.getStyle();
  logger.log(Level.FINE,""String_Node_Str"");
  DimensionType x=text.getX();
  DimensionType y=text.getY();
  DimensionType width=text.getWidth();
  DimensionType height=text.getHeight();
  String textValue=text.getText();
  if (textValue == null || ""String_Node_Str"".equals(textValue)) {
    textValue=""String_Node_Str"";
  }
  int display=htmlEmitter.getTextElementType(x,y,width,height,mergedStyle);
  if (display == HTMLEmitterUtil.DISPLAY_INLINE && (text.isDirectionRTL() || Bidi.requiresBidi(textValue.toCharArray(),0,textValue.length()))) {
    display|=HTMLEmitterUtil.DISPLAY_INLINE_BLOCK;
  }
  String tagName=openTagByType(display,DISPLAY_FLAG_ALL);
  boolean bookmarkOutput=false;
  if (metadataFilter != null) {
    bookmarkOutput=metadataEmitter.outputMetadataProperty(metadataFilter.needMetaData(HTMLEmitterUtil.getElementHandle(text)),text,tagName);
  }
  String styleClass=text.getStyleClass();
  setStyleName(styleClass,text);
  if (!bookmarkOutput) {
    outputBookmark(text,tagName);
  }
  writer.attribute(HTMLTags.ATTR_TITLE,text.getHelpText());
  StringBuffer styleBuffer=new StringBuffer();
  htmlEmitter.buildTextStyle(text,styleBuffer,display);
  writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
  htmlEmitter.handleVerticalAlignBegin(text);
  String url=validate(text.getHyperlinkAction());
  if (url != null) {
    outputAction(text.getHyperlinkAction(),url);
    String strColor=mergedStyle.getColor();
    if (null != strColor) {
      styleBuffer.setLength(0);
      styleBuffer.append(""String_Node_Str"");
      styleBuffer.append(strColor);
      styleBuffer.append(""String_Node_Str"");
      writer.attribute(HTMLTags.ATTR_STYLE,styleBuffer.toString());
    }
    writer.text(textValue);
    writer.closeTag(HTMLTags.TAG_A);
  }
 else {
    writer.text(textValue);
  }
  htmlEmitter.handleVerticalAlignEnd(text);
  writer.closeTag(tagName);
}",0.946351931330472
67507,"public static boolean isEqualOSDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || ComparatorUtil.isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || ComparatorUtil.isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || ComparatorUtil.isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || ComparatorUtil.isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
    return true;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || ComparatorUtil.isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || ComparatorUtil.isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || ComparatorUtil.isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
    return true;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || ComparatorUtil.isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || design1.getJoinType() != design2.getJoinType() || ComparatorUtil.isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
    return true;
  }
 else {
    return false;
  }
}","public static boolean isEqualOSDataSetDesign(IBaseDataSetDesign dataSetDesign,IBaseDataSetDesign dataSetDesign2){
  if (dataSetDesign instanceof IOdaDataSetDesign && dataSetDesign2 instanceof IOdaDataSetDesign) {
    IOdaDataSetDesign dataSet=(IOdaDataSetDesign)dataSetDesign;
    IOdaDataSetDesign dataSet2=(IOdaDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(dataSet.getQueryText(),dataSet2.getQueryText()) == false || ComparatorUtil.isEqualString(dataSet.getExtensionID(),dataSet2.getExtensionID()) == false || ComparatorUtil.isEqualString(dataSet.getPrimaryResultSetName(),dataSet2.getPrimaryResultSetName()) == false || ComparatorUtil.isEqualProps(dataSet.getPublicProperties(),dataSet2.getPublicProperties()) == false || ComparatorUtil.isEqualProps(dataSet.getPrivateProperties(),dataSet2.getPrivateProperties()) == false)     return false;
    return true;
  }
 else   if (dataSetDesign instanceof IScriptDataSetDesign && dataSetDesign2 instanceof IScriptDataSetDesign) {
    IScriptDataSetDesign dataSet=(IScriptDataSetDesign)dataSetDesign;
    IScriptDataSetDesign dataSet2=(IScriptDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(dataSet.getOpenScript(),dataSet2.getOpenScript()) == false || ComparatorUtil.isEqualString(dataSet.getFetchScript(),dataSet2.getFetchScript()) == false || ComparatorUtil.isEqualString(dataSet.getCloseScript(),dataSet2.getCloseScript()) == false || ComparatorUtil.isEqualString(dataSet.getDescribeScript(),dataSet2.getDescribeScript()) == false)     return false;
    return true;
  }
 else   if (dataSetDesign instanceof IJointDataSetDesign && dataSetDesign2 instanceof IJointDataSetDesign) {
    IJointDataSetDesign design1=(IJointDataSetDesign)dataSetDesign;
    IJointDataSetDesign design2=(IJointDataSetDesign)dataSetDesign2;
    if (ComparatorUtil.isEqualString(design1.getLeftDataSetDesignName(),design2.getLeftDataSetDesignName()) == false || ComparatorUtil.isEqualString(design1.getLeftDataSetDesignQulifiedName(),design2.getLeftDataSetDesignQulifiedName()) == false || ComparatorUtil.isEqualString(design1.getRightDataSetDesignName(),design2.getRightDataSetDesignName()) == false || ComparatorUtil.isEqualString(design1.getRightDataSetDesignQulifiedName(),design2.getRightDataSetDesignQulifiedName()) == false || design1.getJoinType() != design2.getJoinType() || ComparatorUtil.isEqualJointCondition(design1.getJoinConditions(),design2.getJoinConditions()) == false)     return false;
    return true;
  }
 else {
    return false;
  }
}",0.9461152882205514
67508,"/** 
 * @param design
 * @param names
 * @throws DataException
 */
private void populateDataSetNames(IBaseDataSetDesign design,DataEngineImpl engine,List names) throws DataException {
  if (design == null)   return;
  names.add(design.getName());
  if (design instanceof IJointDataSetDesign) {
    IJointDataSetDesign jointDesign=(IJointDataSetDesign)design;
    populateDataSetNames(engine.getDataSetDesign(jointDesign.getLeftDataSetDesignName()),engine,names);
    populateDataSetNames(engine.getDataSetDesign(jointDesign.getRightDataSetDesignName()),engine,names);
  }
}","/** 
 * @param design
 * @param names
 * @throws DataException
 */
private void populateDataSetNames(IBaseDataSetDesign design,DataEngineImpl engine,List names) throws DataException {
  if (design == null)   return;
  names.add(design.getName());
  if (design instanceof IJointDataSetDesign) {
    IJointDataSetDesign jointDesign=(IJointDataSetDesign)design;
    populateDataSetNames(engine.getDataSetDesign(jointDesign.getLeftDataSetDesignQulifiedName()),engine,names);
    populateDataSetNames(engine.getDataSetDesign(jointDesign.getRightDataSetDesignQulifiedName()),engine,names);
  }
}",0.9862306368330463
67509,"public JointDataSetAdapter(JointDataSetHandle handle,ModelAdapter adapter) throws BirtException {
  super(handle.getQualifiedName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    setLeftDataSetDesignName(jc.getLeftDataSet());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this,adapter);
}","public JointDataSetAdapter(JointDataSetHandle handle,ModelAdapter adapter) throws BirtException {
  super(handle.getQualifiedName());
  Iterator it=handle.joinConditionsIterator();
  JoinConditionHandle jc=null;
  while (it.hasNext()) {
    jc=(JoinConditionHandle)it.next();
    addJoinCondition(new JoinCondition(new ScriptExpression(jc.getLeftExpression()),new ScriptExpression(jc.getRightExpression()),adaptJoinOperator(jc.getOperator())));
  }
  if (jc != null) {
    Iterator iter=handle.dataSetsIterator();
    DataSetHandle leftHandle=(DataSetHandle)iter.next();
    setLeftDataSetDesignQulifiedName(leftHandle.getQualifiedName());
    setLeftDataSetDesignName(jc.getLeftDataSet());
    DataSetHandle rightHandle=(DataSetHandle)iter.next();
    setRightDataSetDesignQulifiedName(rightHandle.getQualifiedName());
    setRightDataSetDesignName(jc.getRightDataSet());
    setJoinType(adaptJoinType(jc.getJoinType()));
  }
  DataAdapterUtil.adaptBaseDataSet(handle,this,adapter);
}",0.8203592814371258
67510,"/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(String[] data){
  if (data.length != 2 || data[1].equals(data[0])) {
    return;
  }
  updateSortKey();
}","/** 
 * Handle builder dialog action.
 */
protected void handleBuilderAction(String[] data){
  if (data.length != 4 || data[1].equals(data[0])) {
    return;
  }
  updateSortKey();
}",0.9945054945054944
67511,"/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    gd.widthHint=300;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,null);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}","/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    gd.widthHint=300;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,new Listener(){
      public void handleEvent(      Event event){
        if (event.data instanceof String[]) {
          handleBuilderAction((String[])event.data);
        }
      }
    }
);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}",0.9635565731730584
67512,"@Override public Iterator<ComputedColumnHandle> availableBindings(){
  Iterator<ComputedColumnHandle> allBindings=ChartItemUtil.getAllColumnBindingsIterator(handle);
  List<Query> queries=new ArrayList<Query>();
  queries.addAll(ChartUtil.getBaseSeriesDefinitions(cm).get(0).getDesignTimeSeries().getDataDefinition());
  for (  SeriesDefinition vsd : ChartUtil.getAllOrthogonalSeriesDefinitions(cm)) {
    queries.addAll(vsd.getDesignTimeSeries().getDataDefinition());
    queries.add(vsd.getQuery());
  }
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  Set<String> bindingNames=new HashSet<String>();
  for (  Query query : queries) {
    if (query.isDefined()) {
      bindingNames.addAll(exprCodec.getBindingNames(query.getDefinition()));
    }
  }
  List<ComputedColumnHandle> availableBindings=new ArrayList<ComputedColumnHandle>();
  while (allBindings.hasNext()) {
    ComputedColumnHandle binding=allBindings.next();
    if (bindingNames.contains(binding.getName())) {
      availableBindings.add(binding);
    }
  }
  return availableBindings.iterator();
}","@Override public Iterator<ComputedColumnHandle> availableBindings(){
  Iterator<ComputedColumnHandle> allBindings=ChartItemUtil.getAllColumnBindingsIterator(handle);
  ReportItemHandle bindingHolder=ChartItemUtil.getBindingHolder(handle);
  if (bindingHolder.getCube() == null) {
    return allBindings;
  }
  List<Query> queries=new ArrayList<Query>();
  queries.addAll(ChartUtil.getBaseSeriesDefinitions(cm).get(0).getDesignTimeSeries().getDataDefinition());
  for (  SeriesDefinition vsd : ChartUtil.getAllOrthogonalSeriesDefinitions(cm)) {
    queries.addAll(vsd.getDesignTimeSeries().getDataDefinition());
    queries.add(vsd.getQuery());
  }
  ExpressionCodec exprCodec=ChartModelHelper.instance().createExpressionCodec();
  Set<String> bindingNames=new HashSet<String>();
  for (  Query query : queries) {
    if (query.isDefined()) {
      bindingNames.addAll(exprCodec.getBindingNames(query.getDefinition()));
    }
  }
  List<ComputedColumnHandle> availableBindings=new ArrayList<ComputedColumnHandle>();
  while (allBindings.hasNext()) {
    ComputedColumnHandle binding=allBindings.next();
    if (bindingNames.contains(binding.getName())) {
      availableBindings.add(binding);
    }
  }
  return availableBindings.iterator();
}",0.9393680614859096
67513,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    CompositeLayoutPageHandler layoutHandler=new CompositeLayoutPageHandler();
    layoutHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
    layoutHandler.addPageHandler(new LayoutPageHandler());
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.9734721289456012
67514,"public boolean autoPageBreak() throws BirtException {
  if (context.isFixedLayout() && specifiedHeight + parent.getAbsoluteBP() <= context.getMaxBP()) {
    return false;
  }
  if (parent != null) {
    return parent.autoPageBreak();
  }
  return false;
}","public boolean autoPageBreak() throws BirtException {
  if (context.isFixedLayout() && specifiedHeight > 0 && specifiedHeight + parent.getAbsoluteBP() <= context.getMaxBP()) {
    return false;
  }
  if (parent != null) {
    return parent.autoPageBreak();
  }
  return false;
}",0.9568480300187616
67515,"private boolean isInRepeatHeader(){
  if (currentRow == null)   return false;
  IContent rowContent=currentRow.getContent();
  if (rowContent != null) {
    IBandContent band=(IBandContent)rowContent.getParent();
    if (band != null) {
      int type=((IBandContent)band).getBandType();
      if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
        RowDesign rowDesign=(RowDesign)rowContent.getGenerateBy();
        if (rowDesign == null || rowDesign.getRepeatable()) {
          return true;
        }
      }
    }
  }
  return false;
}","private boolean isInRepeatHeader(){
  if (currentRow == null)   return false;
  IContent rowContent=currentRow.getContent();
  if (rowContent != null) {
    IElement band=rowContent.getParent();
    if (band != null && band instanceof IBandContent) {
      int type=((IBandContent)band).getBandType();
      if (type == IBandContent.BAND_HEADER || type == IBandContent.BAND_GROUP_HEADER) {
        RowDesign rowDesign=(RowDesign)rowContent.getGenerateBy();
        if (rowDesign == null || rowDesign.getRepeatable()) {
          return true;
        }
      }
    }
  }
  return false;
}",0.95
67516,"private List<IEdgeDrillFilter[]> getRemainingDrillOperation(IEdgeDrillFilter targetDrill,List<IEdgeDrillFilter[]> drillFilters){
  List list=new ArrayList();
  int index=-1;
  for (int i=0; i < drillFilters.size(); i++) {
    IEdgeDrillFilter[] filters=drillFilters.get(i);
    if (index >= 0) {
      list.add(filters);
    }
    for (int t=0; t < filters.length; t++) {
      if (targetDrill.equals(filters[t])) {
        index=i;
        break;
      }
    }
  }
  return list;
}","private List<IEdgeDrillFilter[]> getRemainingDrillOperation(IEdgeDrillFilter targetDrill,List<IEdgeDrillFilter[]> drillFilters){
  List list=new ArrayList();
  for (int i=0; i < drillFilters.size(); i++) {
    IEdgeDrillFilter[] filters=drillFilters.get(i);
    for (int t=0; t < filters.length; t++) {
      if (!targetDrill.equals(filters[t])) {
        list.add(filters);
      }
    }
  }
  return list;
}",0.877665544332211
67517,"public MirroredAggregationResultSet(IAggregationResultSet rs,RowDataAccessorService service,List sortList) throws IOException {
  this.mirrorLevel=service.getMirrorStartPosition();
  this.breakHierarchy=service.isBreakHierarchy();
  this.service=service;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,service);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!isTimeMirror && !breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}","public MirroredAggregationResultSet(IAggregationResultSet rs,MirrorMetaInfo service,List sortList) throws IOException {
  this.mirrorLevel=service.getMirrorStartPosition();
  this.breakHierarchy=service.isBreakHierarchy();
  this.service=service;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,service);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!isTimeMirror && !breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}",0.985233798195242
67518,"public static MemberTreeNode[] getDateTimeNodes(DimLevel[] dimLevels,Object dateTimeValue,int index,RowDataAccessorService service){
  String[] dateTypes=new String[dimLevels.length - index];
  for (int i=index; i < dimLevels.length; i++) {
    dateTypes[i - index]=service.getLevelType(dimLevels[i]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}","public static MemberTreeNode[] getDateTimeNodes(DimLevel[] dimLevels,Object dateTimeValue,int index,MirrorMetaInfo service){
  String[] dateTypes=new String[dimLevels.length - index];
  for (int i=index; i < dimLevels.length; i++) {
    dateTypes[i - index]=service.getLevelType(dimLevels[i]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}",0.9969979986657772
67519,"public static boolean isTimeMirror(IAggregationResultSet rs,int index,RowDataAccessorService service){
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (rs.getLevelAttributes(i) == null || !isTimeMirrorAttributes(service.getLevelType(rs.getLevel(i))))     return false;
  }
  return true;
}","public static boolean isTimeMirror(IAggregationResultSet rs,int index,MirrorMetaInfo service){
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (rs.getLevelAttributes(i) == null || !isTimeMirrorAttributes(service.getLevelType(rs.getLevel(i))))     return false;
  }
  return true;
}",0.9389830508474576
67520,"public static boolean containsTimeMirror(IAggregationResultSet rs,RowDataAccessorService service){
  int index=service.getMirrorStartPosition();
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (isTimeMirror(rs,i,service))     return true;
  }
  return false;
}","public static boolean containsTimeMirror(IAggregationResultSet rs,MirrorMetaInfo service){
  int index=service.getMirrorStartPosition();
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (isTimeMirror(rs,i,service))     return true;
  }
  return false;
}",0.9323308270676692
67521,"/** 
 * @param rs
 * @param view
 * @param isCalculatedMember
 * @throws OLAPException
 * @throws IOException
 */
private void populateDimensionAxis(IAggregationResultSet rs,BirtEdgeView view) throws IOException {
  List dimensionAxisList=new ArrayList();
  int index=-1, levelIndex=-1;
  if (!isCalculatedMember) {
    ILevelDefinition mirrorStartLevel=null;
    if (view.getMirroredDefinition() != null)     mirrorStartLevel=view.getMirroredDefinition().getMirrorStartingLevel();
    levelIndex=index=0;
    boolean isMirrored=false;
    for (int i=0; i < view.getDimensionViews().size(); i++) {
      BirtDimensionView dv=(BirtDimensionView)(view.getDimensionViews().get(i));
      Iterator levelIter=dv.getMemberSelection().iterator();
      while (levelIter.hasNext()) {
        ILevelDefinition level=(ILevelDefinition)levelIter.next();
        DimensionAxis axis=null;
        if (level == mirrorStartLevel) {
          isMirrored=true;
        }
        if (isMirrored) {
          axis=new DimensionAxis(this,rs,index,levelIndex,true);
        }
 else {
          axis=new DimensionAxis(this,rs,index,levelIndex);
        }
        index++;
        levelIndex++;
        dimensionAxisList.add(axis);
      }
    }
  }
 else   if (isCalculatedMember) {
    DimensionAxis axis=new DimensionAxis(this,rs,index,0);
    dimensionAxisList.add(axis);
  }
  this.dimensionAxis=new DimensionAxis[dimensionAxisList.size()];
  for (int i=0; i < dimensionAxisList.size(); i++) {
    this.dimensionAxis[i]=(DimensionAxis)dimensionAxisList.get(i);
  }
}","/** 
 * @param rs
 * @param view
 * @param isCalculatedMember
 * @throws OLAPException
 * @throws IOException
 */
private void populateDimensionAxis(IAggregationResultSet rs,BirtEdgeView view) throws IOException {
  List dimensionAxisList=new ArrayList();
  int index=-1, levelIndex=-1;
  if (!isCalculatedMember) {
    levelIndex=index=0;
    for (int i=0; i < view.getDimensionViews().size(); i++) {
      BirtDimensionView dv=(BirtDimensionView)(view.getDimensionViews().get(i));
      Iterator levelIter=dv.getMemberSelection().iterator();
      while (levelIter.hasNext()) {
        ILevelDefinition level=(ILevelDefinition)levelIter.next();
        DimensionAxis axis=null;
        axis=new DimensionAxis(this,rs,index,levelIndex);
        index++;
        levelIndex++;
        dimensionAxisList.add(axis);
      }
    }
  }
 else   if (isCalculatedMember) {
    DimensionAxis axis=new DimensionAxis(this,rs,index,0);
    dimensionAxisList.add(axis);
  }
  this.dimensionAxis=new DimensionAxis[dimensionAxisList.size()];
  for (int i=0; i < dimensionAxisList.size(); i++) {
    this.dimensionAxis[i]=(DimensionAxis)dimensionAxisList.get(i);
  }
}",0.8522769344687153
67522,"private int[] getImageSize(IImageContent image,Image imageInfo,ContainerSizeInfo parentSizeInfo,int imageWidthDpi,int imageHeightDpi){
  int imageHeight;
  int imageWidth;
  int imageInfoHeight=(int)(imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / imageHeightDpi);
  int imageInfoWidth=(int)(imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / imageWidthDpi);
  if (image.getWidth() == null && image.getHeight() == null) {
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
  if (image.getWidth() == null && image.getHeight() != null) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageWidth=(int)(imageHeight / scale);
  }
 else   if (image.getHeight() == null && image.getWidth() != null) {
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageHeight=(int)(imageWidth * scale);
  }
 else {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
  }
  int[] imageSize={imageHeight,imageWidth};
  return imageSize;
}","private int[] getImageSize(IImageContent image,Image imageInfo,ContainerSizeInfo parentSizeInfo,int imageWidthDpi,int imageHeightDpi){
  int imageHeight;
  int imageWidth;
  if (image.getWidth() == null && image.getHeight() == null) {
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
  int imageInfoHeight=(int)(imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / imageHeightDpi);
  int imageInfoWidth=(int)(imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / imageWidthDpi);
  if (image.getWidth() == null && image.getHeight() != null) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageWidth=(int)(imageHeight / scale);
  }
 else   if (image.getHeight() == null && image.getWidth() != null) {
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageHeight=(int)(imageWidth * scale);
  }
 else {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
  }
  int[] imageSize={imageHeight,imageWidth};
  return imageSize;
}",0.5410036719706243
67523,"public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (Platform.OS_WIN32.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null) {
      ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
      expCodec.setBindingName(object.toString(),btnBuilder.isCube());
      if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
        event.detail=DND.DROP_NONE;
      }
    }
  }
}","public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (Platform.OS_WIN32.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null) {
      ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
      expCodec.setType(btnBuilder.getExpressionType());
      expCodec.setBindingName(object.toString(),btnBuilder.isCube());
      if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
        event.detail=DND.DROP_NONE;
      }
    }
  }
}",0.9681093394077448
67524,"@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (emptyVlaue != null && handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      ArrayList<MapRule> rules=mapHandle.getListValue();
      if (rules != null) {
        List<MapRule> removeList=new ArrayList<MapRule>();
        for (        MapRule rl : rules) {
          if (rl.getTestExpression() != null && rl.getTestExpression().startsWith(AUTO_EMPTY_VALUE_EXPR_PREFIX)) {
            removeList.add(rl);
          }
        }
        if (removeList.size() > 0) {
          mapHandle.removeItems(removeList);
        }
      }
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(AUTO_EMPTY_VALUE_EXPR_PREFIX + ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}",0.7505454545454545
67525,"private void handleChildren() throws BirtException {
  String emptyValue=crosstab.getEmptyCellValue();
  handleCell(crosstab.getHeader(),emptyValue);
  if (crosstab.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),emptyValue);
        handleCell(lv.getAggregationHeader(),emptyValue);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(COLUMN_AXIS_TYPE),emptyValue);
  if (crosstab.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),emptyValue);
        handleCell(lv.getAggregationHeader(),emptyValue);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(ROW_AXIS_TYPE),emptyValue);
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle mv=crosstab.getMeasure(i);
    for (int j=0; j < mv.getHeaderCount(); j++) {
      handleCell(mv.getHeader(j),emptyValue);
    }
    handleCell(mv.getCell(),emptyValue);
    for (int j=0; j < mv.getAggregationCount(); j++) {
      handleCell(mv.getAggregationCell(j),emptyValue);
    }
  }
}","private void handleChildren() throws BirtException {
  String emptyValue=crosstab.getEmptyCellValue();
  handleCell(crosstab.getHeader(),null);
  if (crosstab.getDimensionCount(COLUMN_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(COLUMN_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(COLUMN_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),null);
        handleCell(lv.getAggregationHeader(),null);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(COLUMN_AXIS_TYPE),null);
  if (crosstab.getDimensionCount(ROW_AXIS_TYPE) > 0) {
    for (int i=0; i < crosstab.getDimensionCount(ROW_AXIS_TYPE); i++) {
      DimensionViewHandle dv=crosstab.getDimension(ROW_AXIS_TYPE,i);
      for (int j=0; j < dv.getLevelCount(); j++) {
        LevelViewHandle lv=dv.getLevel(j);
        handleCell(lv.getCell(),null);
        handleCell(lv.getAggregationHeader(),null);
      }
    }
  }
  handleCell(crosstab.getGrandTotal(ROW_AXIS_TYPE),null);
  for (int i=0; i < crosstab.getMeasureCount(); i++) {
    MeasureViewHandle mv=crosstab.getMeasure(i);
    for (int j=0; j < mv.getHeaderCount(); j++) {
      handleCell(mv.getHeader(j),null);
    }
    handleCell(mv.getCell(),emptyValue);
    for (int j=0; j < mv.getAggregationCount(); j++) {
      handleCell(mv.getAggregationCell(j),emptyValue);
    }
  }
}",0.7740384615384616
67526,"public void initialize() throws BirtException {
  hasStyle=false;
  boxStyle=BoxStyle.DEFAULT;
  localProperties=LocalProperties.DEFAULT;
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  width=maxAvaWidth;
  if (parent.content != null) {
    if (CSSConstants.CSS_RTL_VALUE.equals(parent.content.getComputedStyle().getDirection()))     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}","public void initialize() throws BirtException {
  hasStyle=false;
  boxStyle=BoxStyle.DEFAULT;
  localProperties=LocalProperties.DEFAULT;
  maxAvaWidth=parent.getCurrentMaxContentWidth();
  width=maxAvaWidth;
  if (parent.content != null) {
    if (parent.content.isDirectionRTL())     baseLevel=Bidi.DIRECTION_RIGHT_TO_LEFT;
  }
}",0.8515406162464986
67527,"public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    specifiedHeight=0;
    table.addRow(this);
  }
  parent.update(this);
  finished=true;
}","public void close() throws BirtException {
  TableArea table=getTableArea();
  table.addRow(this);
  updateBackgroundImage();
  boolean pb=checkPageBreak();
  if (pb) {
    specifiedHeight=0;
    table.addRow(this);
  }
  if (content != null && content.isRTL()) {
    reorderCellsForRTL();
  }
  parent.update(this);
  finished=true;
}",0.8657718120805369
67528,"public TableLayoutInfo(ITableContent tableContent,LayoutContext context,int[] colWidth){
  this.tableContent=tableContent;
  this.context=context;
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  if (tableContent.isRTL()) {
    int parentMaxWidth=parent != null ? parent.getCurrentMaxContentWidth() : context.getMaxWidth();
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=parentMaxWidth - tableWidth - colWidth[i];
      tableWidth+=colWidth[i];
    }
    if (xPositions[columnNumber - 1] != 0) {
      addDummyColumnForRTL(colWidth);
    }
  }
 else {
    for (int i=0; i < columnNumber; i++) {
      xPositions[i]=tableWidth;
      tableWidth+=colWidth[i];
    }
  }
}","public TableLayoutInfo(ITableContent tableContent,LayoutContext context,int[] colWidth){
  this.tableContent=tableContent;
  this.context=context;
  this.colWidth=colWidth;
  this.columnNumber=colWidth.length;
  this.xPositions=new int[columnNumber];
  this.tableWidth=0;
  for (int i=0; i < columnNumber; i++) {
    xPositions[i]=tableWidth;
    tableWidth+=colWidth[i];
  }
}",0.612280701754386
67529,"public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll(getLastRow());
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    boolean pb=checkPageBreak();
    if (pb) {
      int height=layout.resolveAll(getLastRow());
      if (0 != height) {
        currentBP=currentBP + height;
      }
      borderHeight=layout.resolveBottomBorder();
      layout.remove(this);
    }
    parent.update(this);
  }
  finished=true;
}","public void close() throws BirtException {
  int borderHeight=0;
  if (layout != null) {
    int height=layout.resolveAll(getLastRow());
    if (0 != height) {
      currentBP=currentBP + height;
    }
    borderHeight=layout.resolveBottomBorder();
    layout.remove(this);
  }
  setHeight(currentBP + getOffsetY() + borderHeight);
  updateBackgroundImage();
  if (parent != null) {
    IContent parentContent=parent.getContent();
    if (parentContent != null && parentContent.isRTL()) {
      flipPositionForRtl();
    }
    boolean pb=checkPageBreak();
    if (pb) {
      int height=layout.resolveAll(getLastRow());
      if (0 != height) {
        currentBP=currentBP + height;
      }
      borderHeight=layout.resolveBottomBorder();
      layout.remove(this);
    }
    parent.update(this);
  }
  finished=true;
}",0.9066666666666666
67530,"/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if ((!isRTL && columnID > startCol) || (isRTL && columnID + colSpan - 1 < endCol)) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,cellArea);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
}","/** 
 * resolve cell border conflict
 * @param cellArea
 */
public void resolveBorderConflict(CellArea cellArea,boolean isFirst){
  IContent cellContent=cellArea.getContent();
  int columnID=cellArea.getColumnID();
  int colSpan=cellArea.getColSpan();
  IRowContent row=(IRowContent)cellContent.getParent();
  IStyle cellContentStyle=cellContent.getComputedStyle();
  IStyle tableStyle=tableContent.getComputedStyle();
  IStyle rowStyle=row.getComputedStyle();
  IStyle columnStyle=getColumnStyle(columnID);
  IStyle preRowStyle=null;
  IStyle preColumnStyle=isRTL ? getColumnStyle(columnID + 1) : getColumnStyle(columnID - 1);
  IStyle leftCellContentStyle=null;
  IStyle topCellStyle=null;
  RowArea lastRow=null;
  if (rows.size() > 0) {
    lastRow=(RowArea)rows.getCurrent();
  }
  if (lastRow != null) {
    preRowStyle=lastRow.getContent().getComputedStyle();
    CellArea cell=lastRow.getCell(columnID);
    if (cell != null && cell.getContent() != null) {
      topCellStyle=cell.getContent().getComputedStyle();
    }
  }
  if ((!isRTL && columnID > startCol) || (isRTL && columnID + colSpan - 1 < endCol)) {
    leftCellContentStyle=getLeftCellContentStyle(lastRow,cellArea);
  }
  if (rows.size() == 0 && lastRow == null) {
    if (isFirst) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (tableStyle != null) {
        BorderInfo border=bcr.resolveTableTopBorder(tableStyle,null,columnStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
 else {
    if (isFirst) {
      if (preRowStyle != null || rowStyle != null || topCellStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,rowStyle,topCellStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
 else {
      if (preRowStyle != null || topCellStyle != null) {
        BorderInfo border=bcr.resolveCellTopBorder(preRowStyle,null,topCellStyle,null);
        if (border != null) {
          cellArea.getBoxStyle().setTopBorder(border);
        }
      }
    }
    if ((columnID == startCol && !isRTL) || (columnID + colSpan - 1 == endCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableLeftBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
 else {
      if (leftCellContentStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveCellLeftBorder(preColumnStyle,columnStyle,leftCellContentStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setLeftBorder(border);
        }
      }
    }
    if ((columnID + colSpan - 1 == endCol && !isRTL) || (columnID == startCol && isRTL)) {
      if (tableStyle != null || rowStyle != null || cellContentStyle != null) {
        BorderInfo border=bcr.resolveTableRightBorder(tableStyle,rowStyle,columnStyle,cellContentStyle);
        if (border != null) {
          cellArea.getBoxStyle().setRightBorder(border);
        }
      }
    }
  }
}",0.9957024793388428
67531,"public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor() && fPaletteEntry instanceof ColorDefinition) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor((ColorDefinition)fPaletteEntry);
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray,isrh.getDataPoints());
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}","@Override public void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  if (cwa.getDimension() != ChartDimension.TWO_DIMENSIONAL_LITERAL) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{cwa.getDimension().getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  ScatterSeries ss=(ScatterSeries)getSeries();
  if (!ss.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  final SeriesRenderingHints srh=(SeriesRenderingHints)isrh;
  DataPointHints[] dpha=srh.getDataPoints();
  Location lo;
  LineAttributes lia=ss.getLineAttributes();
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=isPaletteByCategory();
  if (bPaletteByCategory && ss.eContainer() instanceof SeriesDefinition) {
    sd=(SeriesDefinition)ss.eContainer();
  }
  int iThisSeriesIndex=sd.getRunTimeSeries().indexOf(ss);
  if (iThisSeriesIndex < 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ss,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  Marker m=null;
  if (ss.getMarkers().size() > 0) {
    m=ss.getMarkers().get(iThisSeriesIndex % ss.getMarkers().size());
  }
  Fill fPaletteEntry=null;
  if (!bPaletteByCategory) {
    fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
    updateTranslucency(fPaletteEntry,ss);
  }
  boolean isCategoryAxis=srh.isCategoryScale();
  for (int i=0; i < dpha.length; i++) {
    double unitSize=dpha[i].getSize();
    lo=dpha[i].getLocation();
    if (cwa.isTransposed()) {
      faX[i]=lo.getX();
      faY[i]=lo.getY() + (isCategoryAxis ? (unitSize / 2) : 0);
    }
 else {
      faX[i]=lo.getX() + (isCategoryAxis ? (unitSize / 2) : 0);
      faY[i]=lo.getY();
    }
  }
  handleOutsideDataPoints(ipr,srh,faX,faY,false);
  if (ss.isCurve()) {
    CurveRenderer cr=new CurveRenderer(cwa,this,ss.getLineAttributes(),goFactory.createLocations(faX,faY),false,-1,false,true,fPaletteEntry,ss.isPaletteLineColor(),true);
    cr.draw(ipr);
    renderShadowAsCurve(ipr,lia,srh,goFactory.createLocations(faX,faY),false,-1);
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
 else {
    LineRenderEvent lre;
    final Location positionDelta=(cwa.isTransposed()) ? goFactory.createLocation(-3 * getDeviceScale(),0) : goFactory.createLocation(0,3 * getDeviceScale());
    Location[] loaShadow=null;
    lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
    final ColorDefinition cLineShadow=ss.getShadowColor();
    boolean bConnectMissing=ss.isConnectMissingValue();
    if (!ChartUtil.isColorTransparent(cLineShadow)) {
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        if (loaShadow == null) {
          loaShadow=new Location[2];
          loaShadow[0]=goFactory.createLocation(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1]=goFactory.createLocation(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
 else {
          loaShadow[0].set(faX[pindex] + positionDelta.getX(),faY[pindex] + positionDelta.getY());
          loaShadow[1].set(faX[i] + positionDelta.getX(),faY[i] + positionDelta.getY());
        }
        lre.setStart(loaShadow[0]);
        lre.setEnd(loaShadow[1]);
        LineAttributes liaShadow=goFactory.copyOf(lia);
        liaShadow.setColor(cLineShadow);
        lre.setLineAttributes(liaShadow);
        ipr.drawLine(lre);
      }
    }
    if (lia.isVisible()) {
      Location[] loa=new Location[2];
      for (int i=1; i < dpha.length; i++) {
        int pindex=-1;
        if (bConnectMissing) {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          pindex=getPreviousNonNullIndex(i,dpha);
          if (pindex == -1) {
            continue;
          }
        }
 else {
          if (isNaN(dpha[i].getOrthogonalValue())) {
            continue;
          }
          if (i > 0 && isNaN(dpha[i - 1].getOrthogonalValue())) {
            continue;
          }
          pindex=i - 1;
        }
        loa[0]=goFactory.createLocation(faX[pindex],faY[pindex]);
        loa[1]=goFactory.createLocation(faX[i],faY[i]);
{
          lre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(ss),LineRenderEvent.class);
          if (ss.isPaletteLineColor()) {
            LineAttributes newLia=goFactory.copyOf(lia);
            newLia.setColor(FillUtil.getColor(fPaletteEntry));
            lre.setLineAttributes(newLia);
          }
 else {
            lre.setLineAttributes(lia);
          }
          lre.setStart(loa[0]);
          lre.setEnd(loa[1]);
          ipr.drawLine(lre);
        }
      }
    }
    if (m != null) {
      for (int i=0; i < dpha.length; i++) {
        if (dpha[i].isOutside()) {
          continue;
        }
        if (bPaletteByCategory) {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,i);
        }
 else {
          fPaletteEntry=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
        }
        updateTranslucency(fPaletteEntry,ss);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
        renderMarker(ss,ipr,m,goFactory.createLocation(faX[i],faY[i]),ss.getLineAttributes(),fPaletteEntry,dpha[i],null,true,true);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fPaletteEntry);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fPaletteEntry,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
      }
    }
  }
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  try {
    laDataPoint=srh.getLabelAttributes(ss);
    pDataPoint=srh.getLabelPosition(ss);
    loDataPoint=goFactory.createLocation(0,0);
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  if (laDataPoint.isVisible()) {
    final double dSize=m == null ? 0 : m.getSize();
    for (int i=0; i < dpha.length; i++) {
      if (isNaN(dpha[i].getOrthogonalValue()) || dpha[i].isOutside()) {
        continue;
      }
      laDataPoint=srh.getLabelAttributes(ss);
      laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
switch (pDataPoint.getValue()) {
case Position.ABOVE:
        loDataPoint.set(faX[i],faY[i] - dSize - p.getVerticalSpacing());
      break;
case Position.BELOW:
    loDataPoint.set(faX[i],faY[i] + dSize + p.getVerticalSpacing());
  break;
case Position.LEFT:
loDataPoint.set(faX[i] - dSize - p.getHorizontalSpacing(),faY[i]);
break;
case Position.RIGHT:
loDataPoint.set(faX[i] + dSize + p.getHorizontalSpacing(),faY[i]);
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i]);
if (laDataPoint.isVisible()) {
renderLabel(WrappedStructureSource.createSeriesDataPoint(ss,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,pDataPoint,loDataPoint,null);
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,dpha[i]);
}
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=new Location[faX.length];
for (int i=0; i < larray.length; i++) {
larray[i]=goFactory.createLocation(faX[i],faY[i]);
}
larray=filterNull(larray,isrh.getDataPoints());
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
restoreClipping(ipr);
}",0.9964041711614527
67532,"/** 
 * Copies style values from source to the target if corresponding values of target are null. This method follows the same algorithm that is defined in PropertySearchAlgorithm. <ul> <li>localize private style properties. <li>localize style properties on extends/virtual parents. </ul>
 * @param target the target element
 * @param source the source element
 * @param notEmptyProperties
 */
private void localizeSelfStyleProperties(StyledElement target,StyledElement source,Set<String> notEmptyProperties){
  StyledElement tmpElement=source;
  while (tmpElement != null) {
    Module root=tmpElement.getRoot();
    localizePrivateStyleProperties(target,tmpElement,root,notEmptyProperties);
    Style style=(Style)tmpElement.getStyle(sourceDesign);
    if (style != null) {
      Module styleRoot=style.getRoot();
      if (styleRoot != sourceDesign) {
        localizePrivateStyleProperties(target,style,styleRoot,notEmptyProperties);
      }
 else {
        target.setStyleName(tmpElement.getStyleName());
      }
    }
    if (tmpElement.isVirtualElement())     tmpElement=(StyledElement)tmpElement.getVirtualParent();
 else     tmpElement=(StyledElement)tmpElement.getExtendsElement();
  }
}","/** 
 * Copies style values from source to the target if corresponding values of target are null. This method follows the same algorithm that is defined in PropertySearchAlgorithm. <ul> <li>localize private style properties. <li>localize style properties on extends/virtual parents. </ul>
 * @param target the target element
 * @param source the source element
 * @param notEmptyProperties
 */
private void localizeSelfStyleProperties(StyledElement target,StyledElement source,Set<String> notEmptyProperties){
  StyledElement tmpElement=source;
  while (tmpElement != null) {
    Module root=tmpElement.getRoot();
    localizePrivateStyleProperties(target,tmpElement,root,notEmptyProperties);
    Style style=(Style)tmpElement.getStyle(root);
    if (style != null) {
      Module styleRoot=style.getRoot();
      if (styleRoot != sourceDesign) {
        localizePrivateStyleProperties(target,style,styleRoot,notEmptyProperties);
      }
 else {
        target.setStyleName(tmpElement.getStyleName());
      }
    }
    if (tmpElement.isVirtualElement())     tmpElement=(StyledElement)tmpElement.getVirtualParent();
 else     tmpElement=(StyledElement)tmpElement.getExtendsElement();
  }
}",0.9932942162615256
67533,"public static int getImageWidth(DimensionType value,int parentWidth,int imageInfoWidth,int dpi){
  int width;
  if (value != null) {
    width=getElementWidth(value,parentWidth,dpi);
  }
 else {
    width=(int)(imageInfoWidth * ExcelUtil.INCH_PT / dpi);
  }
  return width;
}","public static int getImageWidth(DimensionType value,int parentWidth,int imageInfoWidth,int dpi){
  if (value == null) {
    return imageInfoWidth;
  }
 else {
    return getElementWidth(value,parentWidth,dpi);
  }
}",0.6857142857142857
67534,"protected void addNewDefn(ColumnDefn defn) throws SemanticException {
  String name=defn.getColumnName();
  if (rsColumnMap != null) {
    if (rsColumnMap.get(name) != null) {
      name=getUniqueName();
      defn.setColumnName(name);
    }
    ResultSetColumnHandle rsHandle;
    if (rsColumns != null && columnHints != null) {
      rsColumns.addItem(defn.getResultSetColumn());
      columnHints.addItem(defn.getColumnHint());
      rsColumnMap.put(name,defn.getResultSetColumn());
      columnHintMap.put(name,defn.getColumnHint());
    }
  }
}","protected void addNewDefn(ColumnDefn defn) throws SemanticException {
  String name=defn.getColumnName();
  if (rsColumnMap != null) {
    if (rsColumnMap.get(name) != null) {
      name=getUniqueColumnName();
      defn.setColumnName(name);
    }
    ResultSetColumnHandle rsHandle;
    if (rsColumns != null && columnHints != null) {
      rsColumns.addItem(defn.getResultSetColumn());
      columnHints.addItem(defn.getColumnHint());
      rsColumnMap.put(name,defn.getResultSetColumn());
      columnHintMap.put(name,defn.getColumnHint());
    }
  }
}",0.9945652173913044
67535,"/** 
 * @param displayName The displayName to set.
 */
public void setDisplayName(String displayName){
  if (this.columnHintHandle != null)   columnHintHandle.setDisplayName(displayName);
 else   columnHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,displayName);
}","/** 
 * @param displayName The displayName to set.
 */
public void setDisplayName(String displayName){
  if (this.columnHintHandle != null)   columnHintHandle.setDisplayName(displayName);
 else   if (displayName != null && displayName.trim().length() > 0)   columnHint.setProperty(ColumnHint.DISPLAY_NAME_MEMBER,displayName);
}",0.8952702702702703
67536,"public HashMap getDefaultValues(){
  usingParameterValues();
  final HashMap values=new HashMap();
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      String expr=param.getDefaultValue();
      String type=param.getDataType();
      Object value=convertToType(expr,type);
      values.put(name,value);
      return true;
    }
    boolean visitDynamicFilterParameter(    DynamicFilterParameterHandle param,    Object userData){
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object userData){
      return visitParametersInGroup(group,userData);
    }
  }
.visit(executionContext.getDesign());
  return values;
}","public HashMap getDefaultValues(){
  usingParameterValues();
  final HashMap values=new HashMap();
  new ParameterVisitor(){
    boolean visitScalarParameter(    ScalarParameterHandle param,    Object userData){
      String name=param.getName();
      Object value=getDefaultValue(name);
      values.put(name,value);
      return true;
    }
    boolean visitDynamicFilterParameter(    DynamicFilterParameterHandle param,    Object userData){
      return true;
    }
    boolean visitParameterGroup(    ParameterGroupHandle group,    Object userData){
      return visitParametersInGroup(group,userData);
    }
  }
.visit(executionContext.getDesign());
  return values;
}",0.3656664340544313
67537,"private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}","private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption hideGridlines=new ConfigurableOption(HIDE_GRIDLINES);
  hideGridlines.setDisplayName(getMessage(""String_Node_Str""));
  hideGridlines.setDataType(IConfigurableOption.DataType.BOOLEAN);
  hideGridlines.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  hideGridlines.setDefaultValue(Boolean.FALSE);
  hideGridlines.setToolTip(null);
  hideGridlines.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}",0.7199471598414795
67538,"protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && getContentHeight() > specifiedHeight && specifiedHeight > 0) {
      setContentHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS)));
        int orphan=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS)));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        parent.autoPageBreak();
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}","protected void update() throws BirtException {
  if (parent != null) {
    if (context.isFixedLayout() && getContentHeight() > specifiedHeight && specifiedHeight > 0) {
      setContentHeight(specifiedHeight);
      setNeedClip(true);
    }
    if (!isInInlineStacking && context.isAutoPageBreak()) {
      int aHeight=getAllocatedHeight();
      int size=children.size();
      if ((aHeight + parent.getAbsoluteBP() > context.getMaxBP()) && (size > 1)) {
        IStyle style=content.getComputedStyle();
        int widow=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_WIDOWS)));
        int orphan=Math.min(size,PropertyUtil.getIntValue(style.getProperty(IStyle.STYLE_ORPHANS)));
        for (int i=0; i < size; i++) {
          TextLineArea line=(TextLineArea)children.get(i);
          if (i > 0 && i < orphan) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
 else           if (i > size - widow) {
            line.setPageBreakBefore(IStyle.AVOID_VALUE);
          }
        }
      }
      while (aHeight + parent.getAbsoluteBP() >= context.getMaxBP()) {
        if (!parent.autoPageBreak()) {
          break;
        }
        aHeight=getAllocatedHeight();
      }
    }
    parent.update(this);
  }
}",0.9854604200323102
67539,"public void autoPageBreak() throws BirtException {
  if (parent != null) {
    parent.autoPageBreak();
  }
}","public boolean autoPageBreak() throws BirtException {
  if (context.isFixedLayout() && specifiedHeight + parent.getAbsoluteBP() <= context.getMaxBP()) {
    return false;
  }
  if (parent != null) {
    return parent.autoPageBreak();
  }
  return false;
}",0.3801652892561983
67540,"protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() - 3000 > context.getMaxBP()) {
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}","protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() - 3000 > context.getMaxBP()) {
      if (!parent.autoPageBreak()) {
        return false;
      }
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}",0.948069241011984
67541,"protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
      addLineBreakToExtension();
      parent.autoPageBreak();
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}","protected boolean checkPageBreak() throws BirtException {
  boolean ret=false;
  if (!isInInlineStacking && context.isAutoPageBreak()) {
    int aHeight=getAllocatedHeight();
    while (aHeight + parent.getAbsoluteBP() > context.getMaxBP()) {
      addLineBreakToExtension();
      if (!parent.autoPageBreak()) {
        return false;
      }
      aHeight=getAllocatedHeight();
      ret=true;
    }
  }
  return ret;
}",0.9514321295143212
67542,"public void autoPageBreak() throws BirtException {
  int height=context.getMaxBP();
  SplitResult result=split(height,false);
  if (result == SplitResult.BEFORE_AVOID_WITH_NULL || result == SplitResult.SUCCEED_WITH_NULL) {
    result=split(height,true);
  }
  if (result.getResult() != null) {
    page.setBody(result.getResult());
    page.close();
  }
  updateChildrenPosition();
  initialize();
}","public boolean autoPageBreak() throws BirtException {
  int height=context.getMaxBP();
  SplitResult result=split(height,false);
  if (result == SplitResult.BEFORE_AVOID_WITH_NULL || result == SplitResult.SUCCEED_WITH_NULL) {
    result=split(height,true);
  }
  if (result.getResult() != null) {
    page.setBody(result.getResult());
    page.close();
  }
  updateChildrenPosition();
  initialize();
  return true;
}",0.9681372549019608
67543,"private void createList(Composite container,final ListingParameter listParam){
  boolean isRequired=listParam.getHandle().isRequired();
  boolean isStringType=listParam.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  Object value=null;
  try {
    value=listParam.converToDataType(listParam.getDefaultValues() == null ? new Object[0] : listParam.getDefaultValues().toArray());
  }
 catch (  BirtException e) {
  }
  if (paramValues.containsKey(listParam.getHandle().getName())) {
    value=paramValues.get(listParam.getHandle().getName());
    if (value != null) {
      listParam.setSelectionValue(value);
    }
  }
  ListViewer listViewer=new ListViewer(container);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=70;
  listViewer.getList().setLayoutData(gd);
  List list=new ArrayList();
  if (isStringType && !isRequired) {
    list.add(blankValueChoice);
  }
  list.addAll(listParam.getValueList());
  checkParam(listParam.getDefaultValue(),value,list);
  if (!isRequired) {
    list.add(InputParameterDialog.nullValueChoice);
  }
  for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
    IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
    String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
    if (label != null) {
      listViewer.getList().add(label);
      listViewer.getList().setData(label,choice.getValue());
    }
  }
  if (value == null && !isRequired) {
    listViewer.getList().select(listViewer.getList().getItemCount() - 1);
  }
 else {
    List newValueList=new ArrayList();
    List oldvalueList=new ArrayList();
    if (value instanceof Object[]) {
      oldvalueList=Arrays.asList((Object[])value);
    }
 else {
      oldvalueList.add(value);
    }
    for (int i=0; i < listViewer.getList().getItemCount(); i++) {
      Object item=listViewer.getList().getData(listViewer.getList().getItem(i));
      if (oldvalueList.indexOf(item) >= 0) {
        listViewer.getList().select(i);
        newValueList.add(listViewer.getList().getData(listViewer.getList().getItem(i)));
      }
    }
    paramValues.put(listParam.getHandle().getName(),newValueList.toArray(new Object[newValueList.size()]));
  }
  if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
    CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
    if (group.getPreParameter(listParam) != null) {
      postParamLists.put(group.getPreParameter(listParam),listViewer.getList());
    }
  }
  listViewer.getList().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      org.eclipse.swt.widgets.List list=(org.eclipse.swt.widgets.List)e.getSource();
      String[] strs=list.getSelection();
      if (strs != null && strs.length > 0) {
        List array=new ArrayList();
        for (int i=0; i < strs.length; i++) {
          Object obj=list.getData(strs[i]);
          array.add(obj);
        }
        Object[] objs=new Object[array.size()];
        array.toArray(objs);
        paramValues.put(listParam.getHandle().getName(),objs);
      }
 else {
        paramValues.remove(listParam.getHandle().getName());
      }
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
}","private void createList(Composite container,final ListingParameter listParam){
  boolean isRequired=listParam.getHandle().isRequired();
  boolean isStringType=listParam.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  Object value=null;
  try {
    value=listParam.converToDataType(listParam.getDefaultValues() == null ? new Object[0] : listParam.getDefaultValues().toArray());
  }
 catch (  BirtException e) {
  }
  if (paramValues.containsKey(listParam.getHandle().getName())) {
    value=paramValues.get(listParam.getHandle().getName());
    if (value != null) {
      listParam.setSelectionValue(value);
    }
  }
  ListViewer listViewer=new ListViewer(container);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.heightHint=70;
  listViewer.getList().setLayoutData(gd);
  List list=new ArrayList();
  if (isStringType && !isRequired) {
    list.add(blankValueChoice);
  }
  list.addAll(listParam.getValueList());
  try {
    checkParam(listParam.converToDataType(listParam.getDefaultValue()),list);
  }
 catch (  BirtException e1) {
  }
  if (!isRequired) {
    list.add(InputParameterDialog.nullValueChoice);
  }
  for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
    IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
    String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
    if (label != null) {
      listViewer.getList().add(label);
      listViewer.getList().setData(label,choice.getValue());
    }
  }
  if (value == null && !isRequired) {
    listViewer.getList().select(listViewer.getList().getItemCount() - 1);
  }
 else {
    List newValueList=new ArrayList();
    List oldvalueList=new ArrayList();
    if (value instanceof Object[]) {
      oldvalueList=Arrays.asList((Object[])value);
    }
 else {
      oldvalueList.add(value);
    }
    for (int i=0; i < listViewer.getList().getItemCount(); i++) {
      Object item=listViewer.getList().getData(listViewer.getList().getItem(i));
      if (oldvalueList.indexOf(item) >= 0) {
        listViewer.getList().select(i);
        newValueList.add(listViewer.getList().getData(listViewer.getList().getItem(i)));
      }
    }
    paramValues.put(listParam.getHandle().getName(),newValueList.toArray(new Object[newValueList.size()]));
  }
  if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
    CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
    if (group.getPreParameter(listParam) != null) {
      postParamLists.put(group.getPreParameter(listParam),listViewer.getList());
    }
  }
  listViewer.getList().addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      org.eclipse.swt.widgets.List list=(org.eclipse.swt.widgets.List)e.getSource();
      String[] strs=list.getSelection();
      if (strs != null && strs.length > 0) {
        List array=new ArrayList();
        for (int i=0; i < strs.length; i++) {
          Object obj=list.getData(strs[i]);
          array.add(obj);
        }
        Object[] objs=new Object[array.size()];
        array.toArray(objs);
        paramValues.put(listParam.getHandle().getName(),objs);
      }
 else {
        paramValues.remove(listParam.getHandle().getName());
      }
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
}",0.9863126197645772
67544,"public String getLabel(){
  return defaultValue;
}","public String getLabel(){
  return defaultValue.toString();
}",0.9009009009009008
67545,"public Object getValue(){
  return value == null ? defaultValue : value;
}","public Object getValue(){
  return defaultValue;
}",0.8064516129032258
67546,"private void createCombo(Composite container,final ListingParameter listParam){
  boolean isRequired=listParam.getHandle().isRequired();
  boolean isStringType=listParam.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  Object value=null;
  try {
    if (listParam.getDefaultValues() != null)     value=listParam.converToDataType(listParam.getDefaultValue());
  }
 catch (  BirtException e) {
  }
  if (paramValues.containsKey(listParam.getHandle().getName())) {
    value=paramValues.get(listParam.getHandle().getName());
    if (value != null) {
      listParam.setSelectionValue(value.toString());
    }
  }
  int style=SWT.BORDER;
  if (!(listParam instanceof ComboBoxParameter)) {
    style|=SWT.READ_ONLY;
  }
  Combo combo=new Combo(container,style);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  combo.setVisibleItemCount(30);
  List list=new ArrayList();
  if (isStringType && !isRequired) {
    list.add(blankValueChoice);
  }
  list.addAll(listParam.getValueList());
  checkParam(listParam.getDefaultValue(),value,list);
  if (!isRequired) {
    boolean hasNull=false;
    for (int i=0; i < list.size(); i++) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      if (choice.getValue() == null) {
        hasNull=true;
      }
    }
    if (!hasNull) {
      list.add(InputParameterDialog.nullValueChoice);
    }
  }
  boolean nullAdded=false;
  for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
    IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
    String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
    if (choice.getValue() == null && choice.getLabel() == null) {
      if (!isRequired && !nullAdded) {
        combo.add(NULL_VALUE_STR);
        combo.setData(NULL_VALUE_STR,null);
        nullAdded=true;
      }
    }
 else {
      combo.add(label);
      combo.setData(label,choice.getValue());
    }
  }
  if (value == null) {
    if (!isRequired) {
      combo.select(combo.getItemCount() - 1);
    }
    listParam.setSelectionValue(null);
    paramValues.put(listParam.getHandle().getName(),null);
  }
 else {
    boolean found=false;
    for (int i=0; i < combo.getItemCount(); i++) {
      String str=null;
      if (value instanceof String) {
        str=(String)value;
      }
      if (value.equals(combo.getData(combo.getItem(i))) || (str != null && DEUtil.removeQuote(str).equals(combo.getData(combo.getItem(i))))) {
        combo.select(i);
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(i)));
        listParam.setSelectionValue(value.toString());
        found=true;
        break;
      }
    }
    if (!found) {
      if (listParam instanceof ComboBoxParameter) {
        combo.setText(value.toString());
        listParam.setSelectionValue(combo.getText());
        paramValues.put(listParam.getHandle().getName(),combo.getText());
      }
 else {
        listParam.setSelectionValue(null);
        paramValues.put(listParam.getHandle().getName(),null);
      }
    }
  }
  combo.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      if (!(listParam instanceof ComboBoxParameter)) {
        return;
      }
      Combo combo=(Combo)e.getSource();
      if (combo.indexOf(combo.getText()) < 0) {
        paramValues.put(listParam.getHandle().getName(),combo.getText());
      }
 else {
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.indexOf(combo.getText()))));
      }
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
  combo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      Combo combo=(Combo)e.getSource();
      paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.getSelectionIndex())));
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
  if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
    CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
    if (group.getPreParameter(listParam) != null) {
      postParamLists.put(group.getPreParameter(listParam),combo);
    }
  }
}","private void createCombo(Composite container,final ListingParameter listParam){
  boolean isRequired=listParam.getHandle().isRequired();
  boolean isStringType=listParam.getHandle().getDataType().equals(DesignChoiceConstants.PARAM_TYPE_STRING);
  Object value=null;
  try {
    if (listParam.getDefaultValue() != null)     value=listParam.converToDataType(listParam.getDefaultValue());
  }
 catch (  BirtException e) {
  }
  if (paramValues.containsKey(listParam.getHandle().getName())) {
    value=paramValues.get(listParam.getHandle().getName());
    if (value != null) {
      listParam.setSelectionValue(value.toString());
    }
  }
  int style=SWT.BORDER;
  if (!(listParam instanceof ComboBoxParameter)) {
    style|=SWT.READ_ONLY;
  }
  Combo combo=new Combo(container,style);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  combo.setVisibleItemCount(30);
  List list=new ArrayList();
  if (isStringType && !isRequired) {
    list.add(blankValueChoice);
  }
  list.addAll(listParam.getValueList());
  try {
    checkParam(listParam.converToDataType(listParam.getDefaultValue()),list);
  }
 catch (  BirtException e1) {
  }
  if (!isRequired) {
    boolean hasNull=false;
    for (int i=0; i < list.size(); i++) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)list.get(i);
      if (choice.getValue() == null) {
        hasNull=true;
      }
    }
    if (!hasNull) {
      list.add(InputParameterDialog.nullValueChoice);
    }
  }
  boolean nullAdded=false;
  for (Iterator iterator=list.iterator(); iterator.hasNext(); ) {
    IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
    String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
    if (choice.getValue() == null && choice.getLabel() == null) {
      if (!isRequired && !nullAdded) {
        combo.add(NULL_VALUE_STR);
        combo.setData(NULL_VALUE_STR,null);
        nullAdded=true;
      }
    }
 else {
      combo.add(label);
      combo.setData(label,choice.getValue());
    }
  }
  if (value == null) {
    if (!isRequired) {
      combo.select(combo.getItemCount() - 1);
    }
    listParam.setSelectionValue(null);
    paramValues.put(listParam.getHandle().getName(),null);
  }
 else {
    boolean found=false;
    for (int i=0; i < combo.getItemCount(); i++) {
      if (value.equals(combo.getData(combo.getItem(i)))) {
        combo.select(i);
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(i)));
        listParam.setSelectionValue(value.toString());
        found=true;
        break;
      }
    }
    if (!found) {
      if (listParam instanceof ComboBoxParameter) {
        combo.setText(value.toString());
        listParam.setSelectionValue(combo.getText());
        paramValues.put(listParam.getHandle().getName(),combo.getText());
      }
 else {
        listParam.setSelectionValue(null);
        paramValues.put(listParam.getHandle().getName(),null);
      }
    }
  }
  combo.addFocusListener(new FocusListener(){
    public void focusGained(    FocusEvent e){
    }
    public void focusLost(    FocusEvent e){
      if (!(listParam instanceof ComboBoxParameter)) {
        return;
      }
      Combo combo=(Combo)e.getSource();
      if (combo.indexOf(combo.getText()) < 0) {
        paramValues.put(listParam.getHandle().getName(),combo.getText());
      }
 else {
        paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.indexOf(combo.getText()))));
      }
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
  combo.addSelectionListener(new SelectionListener(){
    public void widgetDefaultSelected(    SelectionEvent e){
    }
    public void widgetSelected(    SelectionEvent e){
      Combo combo=(Combo)e.getSource();
      paramValues.put(listParam.getHandle().getName(),combo.getData(combo.getItem(combo.getSelectionIndex())));
      if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
        CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
        if (group.getPostParameter(listParam) != null) {
          cascadingParamValueChanged(group,listParam);
        }
      }
    }
  }
);
  if (listParam.getParentGroup() instanceof CascadingParameterGroup) {
    CascadingParameterGroup group=(CascadingParameterGroup)listParam.getParentGroup();
    if (group.getPreParameter(listParam) != null) {
      postParamLists.put(group.getPreParameter(listParam),combo);
    }
  }
}",0.97093626738634
67547,"private void checkParam(final String defaultValue,final Object value,List list){
  if (!performed) {
    boolean contains=false;
    for (int i=0; i < list.size(); i++) {
      try {
        if (((IParameterSelectionChoice)(list.get(i))).getValue().toString().equals(defaultValue) || ((IParameterSelectionChoice)(list.get(i))).getValue().toString().equals(DEUtil.removeQuote(defaultValue))) {
          contains=true;
          break;
        }
      }
 catch (      Exception e) {
      }
    }
    if (!contains && defaultValue != null) {
      IParameterSelectionChoice choice=new IParameterSelectionChoice(){
        public String getLabel(){
          return defaultValue;
        }
        public Object getValue(){
          return value == null ? defaultValue : value;
        }
      }
;
      list.add(choice);
    }
  }
}","private void checkParam(final Object defaultValue,List list){
  if (!performed) {
    boolean contains=false;
    for (int i=0; i < list.size(); i++) {
      try {
        Object obj=((IParameterSelectionChoice)(list.get(i))).getValue();
        if (obj == null) {
          continue;
        }
        if (obj.equals(defaultValue)) {
          contains=true;
          break;
        }
      }
 catch (      Exception e) {
      }
    }
    if (!contains && defaultValue != null) {
      IParameterSelectionChoice choice=new IParameterSelectionChoice(){
        public String getLabel(){
          return defaultValue.toString();
        }
        public Object getValue(){
          return defaultValue;
        }
      }
;
      list.add(choice);
    }
  }
}",0.3741368487131199
67548,"private void cascadingParamValueChanged(CascadingParameterGroup group,ListingParameter listParam){
  clearPostParamList(group,listParam);
  if (postParamLists.containsKey(listParam) && paramValues.containsKey(listParam.getHandle().getName())) {
    Object value=paramValues.get(listParam.getHandle().getName());
    listParam.setSelectionValue(value);
    ListingParameter postParam=(ListingParameter)group.getPostParameter(listParam);
    Control control=postParamLists.get(listParam);
    setControlItems(control,new String[0]);
    for (Iterator iterator=postParam.getValueList().iterator(); iterator.hasNext(); ) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
      String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
      if (label != null) {
        addControlItem(control,label);
        control.setData(label,choice.getValue());
      }
    }
  }
}","private void cascadingParamValueChanged(CascadingParameterGroup group,ListingParameter listParam){
  clearPostParamList(group,listParam);
  if (postParamLists.containsKey(listParam) && paramValues.containsKey(listParam.getHandle().getName())) {
    Object value=paramValues.get(listParam.getHandle().getName());
    listParam.setSelectionValue(value);
    ListingParameter postParam=(ListingParameter)group.getPostParameter(listParam);
    if (postParam == null) {
      return;
    }
    Control control=postParamLists.get(listParam);
    setControlItems(control,new String[0]);
    for (Iterator iterator=postParam.getValueList().iterator(); iterator.hasNext(); ) {
      IParameterSelectionChoice choice=(IParameterSelectionChoice)iterator.next();
      if (choice.getValue() == null) {
        continue;
      }
      String label=(choice.getLabel() == null ? String.valueOf(choice.getValue()) : choice.getLabel());
      if (label != null) {
        addControlItem(control,label);
        control.setData(label,choice.getValue());
      }
    }
    processPostParator(postParam,control);
    cascadingParamValueChanged(group,postParam);
  }
}",0.9013409961685824
67549,"public List getDefaultValues(){
  return handle.getDefaultValueList();
}","public List getDefaultValues(){
  IGetParameterDefinitionTask task=engineTask.getEngine().createGetParameterDefinitionTask(engineTask.getReportRunnable());
  Object obj=task.getDefaultValue(handle.getName());
  List retValue=new ArrayList();
  if (obj == null) {
    return retValue;
  }
  if (obj instanceof Object[]) {
    Object[] objs=(Object[])obj;
    for (int i=0; i < objs.length; i++) {
      retValue.add(objs[i]);
    }
  }
 else   if (obj instanceof Collection) {
    Collection collection=(Collection)obj;
    Iterator itor=collection.iterator();
    while (itor.hasNext()) {
      retValue.add(itor.next());
    }
  }
 else {
    retValue.add(obj);
  }
  return retValue;
}",0.1291172595520421
67550,"/** 
 * Gets default value.
 * @return default value
 */
public String getDefaultValue(){
  return handle.getDefaultValue();
}","/** 
 * Gets default value.
 * @return default value
 */
public String getDefaultValue(){
  IGetParameterDefinitionTask task=engineTask.getEngine().createGetParameterDefinitionTask(engineTask.getReportRunnable());
  Object obj=task.getDefaultValue(handle.getName());
  if (obj == null) {
    return null;
  }
  if (obj instanceof Object[]) {
    Object[] objs=(Object[])obj;
    if (objs.length > 0) {
      return objs[0].toString();
    }
 else {
      return null;
    }
  }
  return obj.toString();
}",0.326984126984127
67551,"/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    Object paramObj=paramBindingIt.next();
    if (paramObj instanceof ParamBindingHandle) {
      ParamBindingHandle paramBinding=(ParamBindingHandle)paramObj;
      if (paramBinding.getExpression() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
 else     if (paramObj instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle paramBinding=(OdaDataSetParameterHandle)paramObj;
      if (paramBinding.getDefaultValue() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getDefaultValue());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
  }
  return parameterBindings;
}","/** 
 * @param paramBindingIt
 * @return
 */
private List convertParamterBindings(Iterator paramBindingIt){
  if (paramBindingIt == null)   return null;
  List parameterBindings=new ArrayList();
  while (paramBindingIt.hasNext()) {
    Object paramObj=paramBindingIt.next();
    if (paramObj instanceof ParamBindingHandle) {
      ParamBindingHandle paramBinding=(ParamBindingHandle)paramObj;
      if (paramBinding.getExpression() != null) {
        ScriptExpression paramValueExpr=new ScriptExpression(paramBinding.getExpression());
        InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getParamName(),paramValueExpr);
        parameterBindings.add(inputParamBinding);
      }
    }
 else     if (paramObj instanceof OdaDataSetParameterHandle) {
      OdaDataSetParameterHandle paramBinding=(OdaDataSetParameterHandle)paramObj;
      ExpressionHandle handle=paramBinding.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
      InputParameterBinding inputParamBinding=new InputParameterBinding(paramBinding.getName(),this.session.getModelAdaptor().adaptExpression((Expression)handle.getValue()));
      parameterBindings.add(inputParamBinding);
    }
  }
  return parameterBindings;
}",0.7420408163265306
67552,"/** 
 * @param modelDataSet
 * @param dteDataSet
 * @throws AdapterException 
 */
private static void populateParameter(IModelAdapter adapter,DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws AdapterException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression(defaultValueExpr,modelParam.getDataType()));
        }
 else {
          if (ExpressionType.CONSTANT.equals(modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER).getType())) {
            defaultValueExpr=JavascriptEvalUtil.transformToJsExpression(modelParam.getDefaultValue());
            dteDataSet.addParameter(new ParameterAdapter(modelParam));
            paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression(defaultValueExpr,modelParam.getDataType()));
          }
 else {
            ExpressionHandle handle=modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
            dteDataSet.addParameter(new ParameterAdapter(modelParam));
            paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression((Expression)handle.getValue(),modelParam.getDataType()));
          }
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),adapter.adaptExpression((Expression)modelParamBinding.getExpressionProperty(ParamBinding.EXPRESSION_MEMBER).getValue()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      ExpressionAdapter expression=(ExpressionAdapter)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParamBindingAdapter((String)paramName,expression));
    }
  }
}","/** 
 * @param modelDataSet
 * @param dteDataSet
 * @throws AdapterException 
 */
private static void populateParameter(IModelAdapter adapter,DataSetHandle modelDataSet,BaseDataSetDesign dteDataSet) throws AdapterException {
  HashMap paramBindingCandidates=new HashMap();
  Iterator elmtIter=modelDataSet.parametersIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      DataSetParameterHandle modelParam=(DataSetParameterHandle)elmtIter.next();
      if (modelParam.isInput()) {
        String defaultValueExpr=null;
        if (modelParam instanceof OdaDataSetParameterHandle && ((OdaDataSetParameterHandle)modelParam).getParamName() != null) {
          defaultValueExpr=ExpressionUtil.createJSParameterExpression((((OdaDataSetParameterHandle)modelParam).getParamName()));
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression(defaultValueExpr,modelParam.getDataType()));
        }
 else {
          ExpressionHandle handle=modelParam.getExpressionProperty(DataSetParameter.DEFAULT_VALUE_MEMBER);
          dteDataSet.addParameter(new ParameterAdapter(modelParam));
          paramBindingCandidates.put(modelParam.getName(),adapter.adaptExpression((Expression)handle.getValue(),modelParam.getDataType()));
        }
      }
 else {
        dteDataSet.addParameter(new ParameterAdapter(modelParam));
      }
    }
  }
  elmtIter=modelDataSet.paramBindingsIterator();
  if (elmtIter != null) {
    while (elmtIter.hasNext()) {
      ParamBindingHandle modelParamBinding=(ParamBindingHandle)elmtIter.next();
      if (modelParamBinding.getExpression() != null)       paramBindingCandidates.put(modelParamBinding.getParamName(),adapter.adaptExpression((Expression)modelParamBinding.getExpressionProperty(ParamBinding.EXPRESSION_MEMBER).getValue()));
    }
  }
  if (paramBindingCandidates.size() > 0) {
    elmtIter=paramBindingCandidates.keySet().iterator();
    while (elmtIter.hasNext()) {
      Object paramName=elmtIter.next();
      assert(paramName != null && paramName instanceof String);
      IScriptExpression expression=(IScriptExpression)paramBindingCandidates.get(paramName);
      dteDataSet.addInputParamBinding(new InputParameterBinding((String)paramName,expression));
    }
  }
}",0.8039177277179236
67553,"private void setCollate(boolean collate){
  if (collate) {
    out.println(""String_Node_Str"");
  }
}","private void setCollate(boolean collate){
  if (collate) {
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}",0.7352941176470589
67554,"protected static void normalize(Table table,TableContent tableContent,TableState tableState){
  ReportContent report=(ReportContent)tableContent.getReportContent();
  for (int i=0; i < table.getRowCount(); i++) {
    Row row=table.getRow(i);
    RowContent rowContent=(RowContent)row.getContent();
    Collection children=rowContent.getChildren();
    children.clear();
    for (int j=0; j < table.getColCount(); j++) {
      Cell cell=row.getCell(j);
      CellContent cellContent=null;
      int status=cell.getStatus();
      if (status == Cell.CELL_EMPTY || status == Cell.CELL_SPANED) {
        cellContent=(CellContent)report.createCellContent();
        cellContent.setRowSpan(1);
        cellContent.setColSpan(1);
        cellContent.setColumn(j);
      }
 else       if (status == Cell.CELL_USED) {
        cellContent=((InternalCellContent)cell.getContent()).cell;
        cellContent.setColSpan(cell.getColSpan());
        cellContent.setRowSpan(cell.getRowSpan());
        cellContent.setColumn(j);
      }
      children.add(cellContent);
      cellContent.setParent(rowContent);
    }
  }
  for (int i=0; i < table.getColCount(); i++) {
    Column column=new Column(report);
    column.setWidth(tableState.getColumnWidth(i));
    tableContent.addColumn(column);
  }
}","protected static void normalize(Table table,TableContent tableContent,TableState tableState){
  ReportContent report=(ReportContent)tableContent.getReportContent();
  for (int i=0; i < table.getRowCount(); i++) {
    Row row=table.getRow(i);
    RowContent rowContent=(RowContent)row.getContent();
    Collection children=rowContent.getChildren();
    children.clear();
    for (int j=0; j < table.getColCount(); j++) {
      Cell cell=row.getCell(j);
      CellContent cellContent=null;
      int status=cell.getStatus();
      if (status == Cell.CELL_EMPTY || status == Cell.CELL_SPANED) {
        cellContent=(CellContent)report.createCellContent();
        cellContent.setRowSpan(1);
        cellContent.setColSpan(1);
        cellContent.setColumn(j);
      }
 else       if (status == Cell.CELL_USED) {
        cellContent=((InternalCellContent)cell.getContent()).cell;
        cellContent.setColSpan(cell.getColSpan());
        cellContent.setRowSpan(cell.getRowSpan());
        cellContent.setColumn(j);
      }
      children.add(cellContent);
      cellContent.setParent(rowContent);
    }
  }
}",0.925848345203184
67555,"public TableState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action){
  super(element,cssStyles,action);
  content=(TableContent)parent.getReportContent().createTableContent();
  setParent(parent);
  content.setWidth(PropertyUtil.getDimensionAttribute(element,PROPERTY_WIDTH));
  HTML2Content.handleStyle(element,cssStyles,content);
  processCellStyle(element,cssStyles);
  columnWidth=new ArrayList();
}","public TableState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action){
  super(element,cssStyles,action);
  content=(TableContent)parent.getReportContent().createTableContent();
  table=(TableContent)content;
  setParent(parent);
  content.setWidth(PropertyUtil.getDimensionAttribute(element,PROPERTY_WIDTH));
  HTML2Content.handleStyle(element,cssStyles,content);
  processCellStyle(element,cssStyles);
}",0.9304932735426008
67556,"public void defineCube(CubeHandle cubeHandle) throws BirtException {
  if (CubeHandleUtil.defineCube(this.dataEngine,cubeHandle,this.sessionContext.getAppContext()))   return;
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null)     this.defineDataSet(baseDataSet);
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}","public void defineCube(CubeHandle cubeHandle) throws BirtException {
  if (CubeHandleUtil.defineCube(this.dataEngine,cubeHandle,this.sessionContext.getAppContext()))   return;
  Set involvedDataSets=getInvolvedDataSets((TabularCubeHandle)cubeHandle);
  Iterator itr=involvedDataSets.iterator();
  while (itr.hasNext()) {
    DataSetHandle dsHandle=(DataSetHandle)itr.next();
    BaseDataSourceDesign baseDataSource=this.modelAdaptor.adaptDataSource(dsHandle.getDataSource());
    BaseDataSetDesign baseDataSet=this.modelAdaptor.adaptDataSet(dsHandle);
    if (baseDataSource != null && this.dataEngine.getDataSourceRuntime(baseDataSource.getName()) == null)     this.defineDataSource(baseDataSource);
    if (this.dataEngine.getDataSetDesign(baseDataSet.getName()) == null) {
      DefineDataSourceSetUtil.defineDataSourceAndDataSet(dsHandle,this);
    }
  }
  if (!cubeHandleMap.containsKey(cubeHandle.getQualifiedName())) {
    this.cubeHandleMap.put(cubeHandle.getQualifiedName(),cubeHandle);
  }
}",0.9530132788559756
67557,"private int[] getImageSize(IImageContent image,Image imageInfo,ContainerSizeInfo parentSizeInfo,int imageWidthDpi,int imageHeightDpi){
  int imageHeight;
  int imageWidth;
  int imageInfoHeight=imageInfo.getHeight() * 1000;
  int imageInfoWidth=imageInfo.getWidth() * 1000;
  if (image.getWidth() == null && image.getHeight() == null) {
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
  if (image.getWidth() == null && image.getHeight() != null) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageWidth=(int)(imageHeight / scale);
  }
 else   if (image.getHeight() == null && image.getWidth() != null) {
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageHeight=(int)(imageWidth * scale);
  }
 else {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
  }
  int[] imageSize={imageHeight,imageWidth};
  return imageSize;
}","private int[] getImageSize(IImageContent image,Image imageInfo,ContainerSizeInfo parentSizeInfo,int imageWidthDpi,int imageHeightDpi){
  int imageHeight;
  int imageWidth;
  int imageInfoHeight=(int)(imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / imageHeightDpi);
  int imageInfoWidth=(int)(imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / imageWidthDpi);
  if (image.getWidth() == null && image.getHeight() == null) {
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
  if (image.getWidth() == null && image.getHeight() != null) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageWidth=(int)(imageHeight / scale);
  }
 else   if (image.getHeight() == null && image.getWidth() != null) {
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
    float scale=((float)imageInfoHeight) / ((float)imageInfoWidth);
    imageHeight=(int)(imageWidth * scale);
  }
 else {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),imageInfoHeight,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),imageInfoWidth,imageWidthDpi);
  }
  int[] imageSize={imageHeight,imageWidth};
  return imageSize;
}",0.9581892486639422
67558,"public void dataEngineShutdown(){
  if (session.getNamingRelation() == null) {
    return;
  }
  final int mode=session.getEngineContext().getMode();
  if (mode == DataEngineContext.MODE_GENERATION || mode == DataEngineContext.MODE_UPDATE) {
    try {
      saveNamingRelation(session.getNamingRelation());
    }
 catch (    DataException e1) {
      e1.printStackTrace();
    }
  }
}","public void dataEngineShutdown(){
  if (session.getNamingRelation() == null) {
    return;
  }
  if (session.getEngineContext().getDocWriter() != null) {
    try {
      saveNamingRelation(session.getNamingRelation());
    }
 catch (    DataException e1) {
      e1.printStackTrace();
    }
  }
}",0.7205882352941176
67559,"double roundValue(double value){
  if (roundPrecision >= 0) {
    BigDecimal bd=BigDecimal.valueOf(value);
    int scale=bd.scale();
    if (scale > roundPrecision) {
      bd=bd.setScale(roundPrecision,roundingMode);
      return bd.doubleValue();
    }
  }
  return value;
}","double roundValue(double value){
  if (roundPrecision >= 0) {
    BigDecimal bd=BigDecimal.valueOf(value);
    int scale=bd.scale();
    try {
      if (scale > roundPrecision) {
        bd=bd.setScale(roundPrecision,roundingMode);
        return bd.doubleValue();
      }
    }
 catch (    ArithmeticException e) {
      logger.log(Level.WARNING,e.getLocalizedMessage(),e);
      return value;
    }
  }
  return value;
}",0.7478510028653295
67560,"public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  FileUtil.load(""String_Node_Str"",out);
}","public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution,boolean gray) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(gray);
  FileUtil.load(""String_Node_Str"",out);
}",0.9727272727272728
67561,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean gray=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_GRAY,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,gray);
}",0.9505783385909568
67562,"protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer(null,null,null,1,false);
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}","protected void setUp() throws Exception {
  super.setUp();
  cells[0]=new CellArea(10,10,40,40);
  cells[1]=new CellArea(50,10,40,40);
  cells[2]=new CellArea(90,10,40,40);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[2].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[3]=new CellArea(10,50,40,80);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,6);
  cells[3].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[4]=new CellArea(50,50,40,40);
  cells[5]=new CellArea(90,50,40,40);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[5].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  cells[6]=null;
  cells[7]=new CellArea(50,90,40,40);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,4);
  cells[7].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8]=new CellArea(90,90,40,40);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,2);
  cells[8].defineBorder(BorderInfo.BOTTOM_BORDER,Color.blue);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,6);
  cells[8].defineBorder(BorderInfo.RIGHT_BORDER,Color.orange);
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(new FileOutputStream(""String_Node_Str""));
  writer=new PostscriptWriter(bufferedOutputStream,""String_Node_Str"");
  writer.startRenderer(null,null,null,1,false,600,false);
  writer.startPage(pageWidth,pageHeight);
  testBorderDraw();
  writer.endPage();
  writer.stopRenderer();
}",0.9964614295824488
67563,"private String getPaperSize(String paperSize){
  int width=595;
  int height=842;
  if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=792;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=1008;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=419;
    height=595;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=595;
    height=842;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=842;
    height=1191;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=499;
    height=709;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=729;
    height=1032;
  }
  return width + ""String_Node_Str"" + height;
}","private int[] getPaperSize(String paperSize){
  int width=595;
  int height=842;
  if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=792;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=612;
    height=1008;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=419;
    height=595;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=595;
    height=842;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=842;
    height=1191;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=499;
    height=709;
  }
 else   if (""String_Node_Str"".equalsIgnoreCase(paperSize)) {
    width=729;
    height=1032;
  }
  return new int[]{width,height};
}",0.9532237673830596
67564,"public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution,boolean gray) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(gray);
  FileUtil.load(""String_Node_Str"",out);
}","public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution,boolean gray,int scale) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  int[] pageSize=getPaperSize(paperSize);
  int width=pageSize[0];
  int height=pageSize[1];
  setPaperSize(paperSize,width,height);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  setGray(gray);
  FileUtil.load(""String_Node_Str"",out);
  setScale(height,scale);
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.8417910447761194
67565,"private void setPaperSize(String paperSize){
  if (paperSize != null) {
    out.println(""String_Node_Str"" + paperSize);
    out.println(""String_Node_Str"" + getPaperSize(paperSize) + ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}","private void setPaperSize(String paperSize,int width,int height){
  if (paperSize != null) {
    out.println(""String_Node_Str"" + paperSize);
    out.println(""String_Node_Str"" + width + ""String_Node_Str""+ height+ ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}",0.8488372093023255
67566,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean gray=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_GRAY,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,gray);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  boolean gray=renderOption.getBooleanOption(IPostscriptRenderOption.OPTION_GRAY,false);
  int scale=renderOption.getIntOption(IPostscriptRenderOption.OPTION_SCALE,100);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution,gray,scale);
}",0.9582333173307728
67567,"private void setupRenderOptions(){
  IRenderOption renderOptions=service.getRenderOption();
  Object textWrapping=renderOptions.getOption(IExcelRenderOption.WRAPPING_TEXT);
  if (textWrapping != null && textWrapping instanceof Boolean) {
    context.setWrappingText((Boolean)textWrapping);
  }
 else {
    context.setWrappingText((Boolean)true);
  }
  Object officeVersion=renderOptions.getOption(IExcelRenderOption.OFFICE_VERSION);
  if (officeVersion != null && officeVersion instanceof String) {
    if (officeVersion.equals(""String_Node_Str"")) {
      context.setOfficeVersion(""String_Node_Str"");
    }
  }
 else {
    context.setOfficeVersion(""String_Node_Str"");
  }
}","private void setupRenderOptions(){
  IRenderOption renderOptions=service.getRenderOption();
  Object textWrapping=renderOptions.getOption(IExcelRenderOption.WRAPPING_TEXT);
  if (textWrapping != null && textWrapping instanceof Boolean) {
    context.setWrappingText((Boolean)textWrapping);
  }
 else {
    context.setWrappingText((Boolean)true);
  }
  Object officeVersion=renderOptions.getOption(IExcelRenderOption.OFFICE_VERSION);
  if (officeVersion != null && officeVersion instanceof String) {
    if (officeVersion.equals(""String_Node_Str"")) {
      context.setOfficeVersion(""String_Node_Str"");
    }
  }
 else {
    context.setOfficeVersion(""String_Node_Str"");
  }
  Object hideGridlines=renderOptions.getOption(IExcelRenderOption.HIDE_GRIDLINES);
  if (hideGridlines != null && hideGridlines instanceof Boolean) {
    context.setHideGridlines((Boolean)hideGridlines);
  }
 else {
    context.setHideGridlines((Boolean)false);
  }
}",0.8349875930521092
67568,"private void declareWorkSheetOptions(String orientation,int pageWidth,int pageHeight){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  if (orientation != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",orientation);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageHeader != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageHeader);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageFooter != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageFooter);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  int index=ExcelUtil.getPageSizeIndex(pageWidth / 1000,pageHeight / 1000);
  writer.text(String.valueOf(index));
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}","private void declareWorkSheetOptions(String orientation,int pageWidth,int pageHeight){
  writer.openTag(""String_Node_Str"");
  writer.attribute(""String_Node_Str"",""String_Node_Str"");
  if (context.getHideGridlines()) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.openTag(""String_Node_Str"");
  if (orientation != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",orientation);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageHeader != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageHeader);
    writer.closeTag(""String_Node_Str"");
  }
  if (pageFooter != null) {
    writer.openTag(""String_Node_Str"");
    writer.attribute(""String_Node_Str"",pageFooter);
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  int index=ExcelUtil.getPageSizeIndex(pageWidth / 1000,pageHeight / 1000);
  writer.text(String.valueOf(index));
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
  writer.closeTag(""String_Node_Str"");
}",0.946372239747634
67569,"private static void addEdgeDefinition(ICubeQueryDefinition cubeQuery,CrosstabReportItemHandle crosstabItem,int axis,List<String> levelNameList,List<LevelViewHandle> levelViewList,Map<LevelHandle,ILevelDefinition> levelMapping,IModelAdapter modelAdapter) throws BirtException {
  IEdgeDefinition edge=cubeQuery.createEdge(axis == COLUMN_AXIS_TYPE ? ICubeQueryDefinition.COLUMN_EDGE : ICubeQueryDefinition.ROW_EDGE);
  LevelHandle mirrorLevel=crosstabItem.getCrosstabView(axis).getMirroredStartingLevel();
  for (int i=0; i < crosstabItem.getDimensionCount(axis); i++) {
    DimensionViewHandle dv=crosstabItem.getDimension(axis,i);
    if (dv.getCubeDimension() == null) {
      if (axis == COLUMN_AXIS_TYPE) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
 else {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
    }
    IDimensionDefinition dimDef=edge.createDimension(dv.getCubeDimension().getName());
    IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
    for (int j=0; j < dv.getLevelCount(); j++) {
      LevelViewHandle lv=dv.getLevel(j);
      if (lv.getCubeLevel() == null) {
        if (axis == COLUMN_AXIS_TYPE) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
 else {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
      }
      ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
      levelNameList.add(lv.getCubeLevel().getFullName());
      if (mirrorLevel != null && mirrorLevel.getFullName().equals(lv.getCubeLevelName())) {
        edge.setMirrorStartingLevel(levelDef);
      }
      levelViewList.add(lv);
      levelMapping.put(lv.getCubeLevel(),levelDef);
    }
  }
  CrosstabViewHandle view=crosstabItem.getCrosstabView(axis);
  if (view != null) {
    List members=view.getMembers();
    if (members != null && members.size() > 0) {
      for (int i=0; i < members.size(); i++) {
        MemberValueHandle mvh=(MemberValueHandle)members.get(i);
        if (mvh != null && mvh.getLevel() != null) {
          addDrillDefinition(edge,mvh,levelMapping);
        }
      }
      addEdgeMemberFilter(cubeQuery,modelAdapter,members,levelMapping);
    }
  }
}","private static void addEdgeDefinition(ICubeQueryDefinition cubeQuery,CrosstabReportItemHandle crosstabItem,int axis,List<String> levelNameList,List<LevelViewHandle> levelViewList,Map<LevelHandle,ILevelDefinition> levelMapping,IModelAdapter modelAdapter) throws BirtException {
  IEdgeDefinition edge=cubeQuery.createEdge(axis == COLUMN_AXIS_TYPE ? ICubeQueryDefinition.COLUMN_EDGE : ICubeQueryDefinition.ROW_EDGE);
  LevelHandle mirrorLevel=crosstabItem.getCrosstabView(axis).getMirroredStartingLevel();
  for (int i=0; i < crosstabItem.getDimensionCount(axis); i++) {
    DimensionViewHandle dv=crosstabItem.getDimension(axis,i);
    if (dv.getCubeDimension() == null) {
      if (axis == COLUMN_AXIS_TYPE) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
 else {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
    }
    IDimensionDefinition dimDef=edge.createDimension(dv.getCubeDimension().getName());
    IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
    for (int j=0; j < dv.getLevelCount(); j++) {
      LevelViewHandle lv=dv.getLevel(j);
      if (lv.getCubeLevel() == null) {
        if (axis == COLUMN_AXIS_TYPE) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
 else {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
      }
      ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
      levelNameList.add(lv.getCubeLevel().getFullName());
      if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
        edge.setMirrorStartingLevel(levelDef);
      }
      levelViewList.add(lv);
      levelMapping.put(lv.getCubeLevel(),levelDef);
    }
  }
  CrosstabViewHandle view=crosstabItem.getCrosstabView(axis);
  if (view != null) {
    List members=view.getMembers();
    if (members != null && members.size() > 0) {
      for (int i=0; i < members.size(); i++) {
        MemberValueHandle mvh=(MemberValueHandle)members.get(i);
        if (mvh != null && mvh.getLevel() != null) {
          addDrillDefinition(edge,mvh,levelMapping);
        }
      }
      addEdgeMemberFilter(cubeQuery,modelAdapter,members,levelMapping);
    }
  }
}",0.9973079312487058
67570,"public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  FileUtil.load(""String_Node_Str"",out);
}","public void startRenderer(String author,String description,String paperSize,String paperTray,String duplex,int copies,boolean collate,int resolution) throws IOException {
  if (author != null) {
    out.println(""String_Node_Str"" + author);
  }
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  setCollate(collate);
  setCopies(copies);
  setPaperSize(paperSize);
  setPaperTray(paperTray);
  setDuplex(duplex);
  setResolution(resolution);
  FileUtil.load(""String_Node_Str"",out);
}",0.9571150097465888
67571,"public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate);
}","public PostscriptPageDevice(RenderOption renderOption,OutputStream output,String title,String author,String description) throws Exception {
  BufferedOutputStream bufferedOutputStream=new BufferedOutputStream(output);
  writer=new PostscriptWriter(bufferedOutputStream,title);
  String paperSize=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  String paperTray=renderOption.getStringOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  String duplex=renderOption.getStringOption(PostscriptRenderOption.OPTION_DUPLEX);
  int copies=renderOption.getIntOption(PostscriptRenderOption.OPTION_COPIES,1);
  boolean collate=renderOption.getBooleanOption(PostscriptRenderOption.OPTION_COLLATE,false);
  int resolution=renderOption.getIntOption(IPostscriptRenderOption.OPTION_RESOLUTION,0);
  writer.startRenderer(author,description,paperSize,paperTray,duplex,copies,collate,resolution);
}",0.9414519906323184
67572,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.minimumHeight=150;
  availableDbObjectsTree.setLayoutData(treeData);
  availableDbObjectsTree.addMenuDetectListener(new MenuDetectListener(){
    public void menuDetected(    MenuDetectEvent e){
      if (availableDbObjectsTree.getSelectionCount() > 0) {
        TreeItem item=availableDbObjectsTree.getSelection()[0];
        if (item.getParentItem() != null) {
          treeMenu.setLocation(e.x,e.y);
          return;
        }
      }
      e.doit=false;
    }
  }
);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      insertTreeItemText();
    }
  }
);
  createObjectTreeMenu();
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  sComposite=new ScrolledComposite(parent,SWT.H_SCROLL | SWT.V_SCROLL);
  sComposite.setLayoutData(new GridData(GridData.FILL_BOTH));
  sComposite.setExpandHorizontal(true);
  sComposite.setExpandVertical(true);
  sComposite.addControlListener(new ControlAdapter(){
    public void controlResized(    ControlEvent e){
      computeSize();
    }
  }
);
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  tablescomposite=new Composite(sComposite,SWT.NONE);
  tablescomposite.setLayout(new GridLayout());
  GridData data=new GridData(GridData.FILL_BOTH);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  createDBObjectTree(tablescomposite);
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  sComposite.setContent(tablescomposite);
  return tablescomposite;
}",0.1903827281648675
67573,"private void setDuplex(String duplex){
  if (duplex != null && !""String_Node_Str"".equalsIgnoreCase(duplex)) {
    String duplexValue=duplex;
    if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
    out.println(""String_Node_Str"" + duplexValue);
    out.println(""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}","private void setDuplex(String duplex){
  if (duplex != null && !""String_Node_Str"".equalsIgnoreCase(duplex)) {
    String duplexValue=duplex;
    String tumbleValue=""String_Node_Str"";
    if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
    }
 else     if (""String_Node_Str"".equalsIgnoreCase(duplex)) {
      duplexValue=""String_Node_Str"";
      duplexValue=""String_Node_Str"";
    }
    out.println(""String_Node_Str"" + duplexValue);
    out.println(""String_Node_Str"" + tumbleValue + ""String_Node_Str"");
    out.println(""String_Node_Str"");
  }
}",0.892278360343184
67574,"public void drop(DropTargetEvent event){
  String bindingName=(String)event.data;
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
    expCodec.setBindingName(bindingName,btnBuilder.isCube());
    if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
      return;
    }
  }
  btnBuilder.setBindingName(bindingName,true);
}","public void drop(DropTargetEvent event){
  String bindingName=(String)event.data;
  if (!Platform.OS_WIN32.equals(Platform.getOS())) {
    ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
    expCodec.setBindingName(bindingName,btnBuilder.isCube());
    if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
      return;
    }
  }
  btnBuilder.setBindingName(bindingName,true);
}",0.943355119825708
67575,"public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (!Platform.OS_MACOSX.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null) {
      ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
      expCodec.setBindingName(object.toString(),btnBuilder.isCube());
      if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
        event.detail=DND.DROP_NONE;
      }
    }
  }
}","public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (Platform.OS_WIN32.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null) {
      ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
      expCodec.setBindingName(object.toString(),btnBuilder.isCube());
      if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
        event.detail=DND.DROP_NONE;
      }
    }
  }
}",0.9929494712103408
67576,"protected boolean refresh(){
  if (isPreviewing)   return false;
  isPreviewing=true;
  ModuleHandle model=getModel();
  if (!UIUtil.canPreviewWithErrors(model)) {
    isPreviewing=false;
    return false;
  }
  boolean isDisplay=false;
  showProgress();
  if (hasParameters()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          return false;
        }
      }
 else {
        hideProgress();
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  list.add(new Object());
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  isPreviewing=false;
  return true;
}","protected boolean refresh(){
  if (isPreviewing)   return false;
  isPreviewing=true;
  ModuleHandle model=getModel();
  if (!UIUtil.canPreviewWithErrors(model)) {
    isPreviewing=false;
    return false;
  }
  boolean isDisplay=false;
  showProgress();
  if (hasParameters()) {
    if (parameterDialog != null) {
      parameterDialog.open();
      if (parameterDialog.getReturnCode() == InputParameterHtmlDialog.RETURN_CODE_BROWSER_CLOSED) {
        isDisplay=true;
        if (isMissingParameter()) {
          isPreviewing=false;
          return false;
        }
      }
 else {
        hideProgress();
      }
    }
  }
 else {
    isDisplay=true;
  }
  if (isDisplay) {
    display();
  }
  ReportRequest request=new ReportRequest(ReportPreviewFormPage.this);
  List list=new ArrayList();
  list.add(new Object());
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  isPreviewing=false;
  return true;
}",0.985014985014985
67577,"/** 
 * Add the parameters of left and right dataset to JointDatasetHandle.
 * @param dsHandle
 * @throws SemanticException
 */
private void setParameters(JointDataSetHandle dsHandle) throws SemanticException {
  List<DataSetParameter> params=null;
  PropertyHandle dsParameterHandle=dsHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP);
  if (leftDataSetName.equals(rightDataSetName)) {
    params=getDataSetParameters(leftDataSetName + ""String_Node_Str"",leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP),rightDataSetName + ""String_Node_Str"",rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP));
  }
 else {
    params=getDataSetParameters(leftDataSetName,leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP),rightDataSetName,rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP));
  }
  if (params.size() == 0) {
    dsParameterHandle.clearValue();
  }
 else {
    Iterator iter=dsParameterHandle.iterator();
    int i=0;
    while (iter.hasNext() && i < params.size()) {
      DataSetParameterHandle parameterHandle=(DataSetParameterHandle)iter.next();
      updateDataSetParameterHandle(parameterHandle,params.get(i));
      i++;
    }
    while (i < dsParameterHandle.getListValue().size()) {
      dsParameterHandle.removeItem(dsParameterHandle.getListValue().size() - 1);
    }
    for (; i < params.size(); i++) {
      dsParameterHandle.addItem(params.get(i));
    }
  }
}","/** 
 * Add the parameters of left and right dataset to JointDatasetHandle.
 * @param dsHandle
 * @throws SemanticException
 */
private void setParameters(JointDataSetHandle dsHandle) throws SemanticException {
  List<DataSetParameter> params=null;
  PropertyHandle dsParameterHandle=dsHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP);
  if (leftDataSetName.equals(rightDataSetName)) {
    params=getDataSetParameters(leftDataSetName + ""String_Node_Str"",leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP),rightDataSetName + ""String_Node_Str"",rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP));
  }
 else {
    params=getDataSetParameters(leftDataSetName,leftHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP),rightDataSetName,rightHandle.getPropertyHandle(IDataSetModel.PARAMETERS_PROP));
  }
  if (params.size() == 0) {
    dsParameterHandle.clearValue();
  }
 else {
    Iterator iter=dsParameterHandle.iterator();
    int i=0;
    while (iter.hasNext() && i < params.size()) {
      DataSetParameterHandle parameterHandle=(DataSetParameterHandle)iter.next();
      updateDataSetParameterHandle(parameterHandle,params.get(i));
      i++;
    }
    if (dsParameterHandle.getListValue() != null)     while (i < dsParameterHandle.getListValue().size()) {
      dsParameterHandle.removeItem(dsParameterHandle.getListValue().size() - 1);
    }
    for (; i < params.size(); i++) {
      dsParameterHandle.addItem(params.get(i));
    }
  }
}",0.9826869806094184
67578,"public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.isAutoPageBreak() && !context.isReserveDocumentPageNumbers()) {
    context.setPageNumber(context.getPageNumber() + 1);
    pageContent=createPageContent(pageContent);
  }
 else {
    long number=pageContent.getPageNumber();
    if (number > 0) {
      context.setPageNumber(number);
    }
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}","public void initialize() throws BirtException {
  IPageContent pageContent=(IPageContent)content;
  if (context.getEngineTaskType() == IEngineTask.TASK_RENDER) {
    if (context.isReserveDocumentPageNumbers()) {
      long number=pageContent.getPageNumber();
      if (number > 0) {
        context.setPageNumber(number);
      }
    }
 else {
      context.setPageNumber(context.getPageNumber() + 1);
      pageContent=createPageContent(pageContent);
    }
  }
 else {
    if (context.isAutoPageBreak()) {
      context.setPageNumber(context.getPageNumber() + 1);
      pageContent=createPageContent(pageContent);
    }
 else {
      long number=pageContent.getPageNumber();
      if (number > 0) {
        context.setPageNumber(number);
      }
    }
  }
  createNewPage(pageContent);
  maxAvaWidth=page.getBody().getWidth();
  width=maxAvaWidth;
}",0.6286137879911046
67579,"public void process(String value,StyleProperties sp){
  if (value != null && value.length() > 0) {
    DimensionType d=DimensionType.parserUnit(value);
    if (d != null) {
      sp.addProperty(StyleProperties.HEIGHT,d);
    }
  }
}","public void process(String value,StyleProperties sp){
  if (value != null && value.length() > 0) {
    DimensionType d=DimensionType.parserUnit(value);
    if (d != null) {
      String unit=d.getUnits();
      if (unit == null || unit.length() == 0) {
        d=new DimensionType(d.getMeasure(),DimensionType.UNITS_PX);
      }
      sp.addProperty(StyleProperties.HEIGHT,d);
    }
  }
}",0.7483870967741936
67580,"private void resolveConflict(int[] values,int maxTotal,int total,int start,boolean[] conflicted){
  int length=values.length - start;
  if (length == 0) {
    return;
  }
  assert(length > 0);
  if (total > maxTotal) {
    int othersTotal=total - values[start];
    if (values[start] > 0) {
      values[start]=0;
      conflicted[start]=true;
    }
    resolveConflict(values,maxTotal,othersTotal,start + 1,conflicted);
  }
}","private void resolveConflict(int[] values,int maxTotal,int total,int start,boolean[] conflicted){
  int length=values.length - start;
  if (length == 0) {
    return;
  }
  assert(length > 0);
  if (total > maxTotal || total < 0) {
    int othersTotal=total - values[start];
    if (values[start] > 0) {
      values[start]=0;
      conflicted[start]=true;
    }
    resolveConflict(values,maxTotal,othersTotal,start + 1,conflicted);
  }
}",0.984971098265896
67581,"/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @return
 * @throws ChartException
 */
@SuppressWarnings(""String_Node_Str"") private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List<String> columnExpression) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  try {
    setQueryDefinitionWithDataSet(handle,queryDefn);
    processQueryDefinition(queryDefn);
    actualResultSet=executeDataSetQuery(queryDefn);
    if (actualResultSet != null) {
      if (ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm)) {
        return createSimpleExpressionEvaluator(actualResultSet);
      }
 else {
        return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}","/** 
 * Create base evaluator for chart using data set.
 * @param handle
 * @param cm
 * @param columnExpression
 * @return
 * @throws ChartException
 */
@SuppressWarnings(""String_Node_Str"") private IDataRowExpressionEvaluator createBaseEvaluator(ExtendedItemHandle handle,Chart cm,List<String> columnExpression) throws ChartException {
  IQueryResults actualResultSet;
  BaseQueryHelper cbqh=new BaseQueryHelper(handle,cm);
  QueryDefinition queryDefn=(QueryDefinition)cbqh.createBaseQuery(columnExpression);
  try {
    setQueryDefinitionWithDataSet(handle,queryDefn);
    processQueryDefinition(queryDefn);
    actualResultSet=executeDataSetQuery(queryDefn);
    if (actualResultSet != null) {
      if (ChartReportItemUtil.isOldChartUsingInternalGroup(itemHandle,cm)) {
        return createSimpleExpressionEvaluator(actualResultSet);
      }
 else {
        return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm,itemHandle);
      }
    }
  }
 catch (  BirtException e) {
    throw new ChartException(ChartReportItemUIActivator.ID,ChartException.DATA_BINDING,e);
  }
  return null;
}",0.995264743865691
67582,"/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
@SuppressWarnings(""String_Node_Str"") private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,List<String> columnExpression) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map<String,String> bindingExprsMap=new HashMap<String,String>();
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  List<ComputedColumnHandle> columnList=new ArrayList<ComputedColumnHandle>();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,columnExpression,bindingExprsMap);
  Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP));
  if (filtersIterator != null) {
    while (filtersIterator.hasNext()) {
      IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
      queryDefn.addFilter(filter);
    }
  }
  actualResultSet=executeSharedQuery(queryDefn);
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm){
      public Object evaluate(      String expression){
        try {
          String newExpr=bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
    }
;
  }
  return null;
}","/** 
 * Prepare data expression evaluator for query share with table.
 * @param cm
 * @param columnExpression
 * @return
 * @throws BirtException
 * @throws AdapterException
 * @throws DataException
 * @throws ChartException
 */
@SuppressWarnings(""String_Node_Str"") private IDataRowExpressionEvaluator createShareBindingEvaluator(Chart cm,List<String> columnExpression) throws BirtException, AdapterException, DataException, ChartException {
  IQueryResults actualResultSet;
  QueryDefinition queryDefn=new QueryDefinition();
  int maxRow=getMaxRow();
  queryDefn.setMaxRows(maxRow);
  final Map<String,String> bindingExprsMap=new HashMap<String,String>();
  Iterator<ComputedColumnHandle> iterator=ChartReportItemUtil.getColumnDataBindings(itemHandle);
  List<ComputedColumnHandle> columnList=new ArrayList<ComputedColumnHandle>();
  while (iterator.hasNext()) {
    columnList.add(iterator.next());
  }
  generateShareBindingsWithTable(getPreviewHeadersInfo(columnList),queryDefn,session,bindingExprsMap);
  addCustomExpressions(queryDefn,cm,columnExpression,bindingExprsMap);
  Iterator<?> filtersIterator=getPropertyIterator(itemHandle.getPropertyHandle(ExtendedItemHandle.FILTER_PROP));
  if (filtersIterator != null) {
    while (filtersIterator.hasNext()) {
      IFilterDefinition filter=session.getModelAdaptor().adaptFilter((FilterConditionHandle)filtersIterator.next());
      queryDefn.addFilter(filter);
    }
  }
  actualResultSet=executeSharedQuery(queryDefn);
  if (actualResultSet != null) {
    return new BaseGroupedQueryResultSetEvaluator(actualResultSet.getResultIterator(),ChartReportItemUtil.isSetSummaryAggregation(cm),cm,itemHandle){
      public Object evaluate(      String expression){
        try {
          String newExpr=bindingExprsMap.get(expression);
          if (newExpr != null) {
            return fResultIterator.getValue(newExpr);
          }
 else {
            return fResultIterator.getValue(expression);
          }
        }
 catch (        BirtException e) {
          sLogger.log(e);
        }
        return null;
      }
    }
;
  }
  return null;
}",0.997374074958224
67583,"/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
private void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
    }
  }
}","/** 
 * Updates using state of groups, if category expression and Y optional expression have related group on specified GroupDefinition, set <code>true</code> value to that item of group indexes array.
 * @param cm current chart model.
 * @param groupDefinitions grouping definition.
 * @throws ChartException
 */
private void updateEnabledGroupIndexes(Chart cm,List<IGroupDefinition> groupDefinitions) throws ChartException {
  faEnabledGroups=new boolean[fGroupCount];
  boolean isSharing=isSharing();
  EList<SeriesDefinition> baseSDs=ChartUtil.getBaseSeriesDefinitions(cm);
  for (  SeriesDefinition sd : baseSDs) {
    if (sd.getDesignTimeSeries().getDataDefinition().isEmpty() || sd.getGrouping() == null || !sd.getGrouping().isEnabled()) {
      continue;
    }
    Query q=sd.getDesignTimeSeries().getDataDefinition().get(0);
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getGrouping() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getGrouping(),gd);
      }
    }
  }
  List<SeriesDefinition> orthoSDs=ChartUtil.getAllOrthogonalSeriesDefinitions(cm);
  for (  SeriesDefinition sd : orthoSDs) {
    Query q=sd.getQuery();
    if (q == null || q.getDefinition() == null || ""String_Node_Str"".equals(q.getDefinition().trim())) {
      continue;
    }
    String expr=q.getDefinition();
    int index=getGroupIndex(expr,groupDefinitions);
    if (index >= 0) {
      faEnabledGroups[index]=true;
      if (isSharing && sd.getQuery() != null) {
        IGroupDefinition gd=groupDefinitions.get(index);
        setGroupingInterval(sd.getQuery().getGrouping(),gd);
      }
    }
  }
}",0.8816248809901619
67584,"/** 
 * Constructor.
 * @param resultIterator
 * @param hasAggregation
 * @param isSubQuery
 * @param cm
 * @throws ChartException
 * @since 2.3
 */
public BaseGroupedQueryResultSetEvaluator(IResultIterator resultIterator,boolean hasAggregation,boolean isSubQuery,Chart cm,ExtendedItemHandle handle) throws ChartException {
  fHasSummaryAggregation=hasAggregation;
  fResultIterator=resultIterator;
  if (isSubQuery) {
    List subQuerys=new ArrayList();
    Collection c=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getSubqueries();
    if (c != null && !c.isEmpty()) {
      subQuerys.addAll(c);
    }
    List groups=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
    if (groups != null) {
      for (Iterator iter=groups.iterator(); iter.hasNext(); ) {
        c=((IGroupDefinition)iter.next()).getSubqueries();
        if (c != null && !c.isEmpty()) {
          subQuerys.addAll(c);
        }
      }
    }
    for (int i=0; i < subQuerys.size(); i++) {
      if ((ChartReportItemConstants.NAME_SUBQUERY + handle.getElement().getID()).equals(((ISubqueryDefinition)subQuerys.get(i)).getName())) {
        fGroupDefinitions=((ISubqueryDefinition)subQuerys.get(i)).getGroups();
        break;
      }
    }
    if (fGroupDefinitions == null) {
      fGroupDefinitions=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
    }
  }
 else {
    fGroupDefinitions=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
  }
  if (fGroupDefinitions != null && fGroupDefinitions.size() > 0) {
    fIsGrouped=true;
    fGroupCount=fGroupDefinitions.size();
    faGroupBreaks=new List[fGroupDefinitions.size()];
    for (int i=0; i < faGroupBreaks.length; i++) {
      faGroupBreaks[i]=new ArrayList<Integer>();
    }
    updateEnabledGroupIndexes(cm,fGroupDefinitions);
  }
}","/** 
 * Constructor.
 * @param resultIterator
 * @param hasAggregation
 * @param isSubQuery
 * @param cm
 * @throws ChartException
 * @since 2.3
 */
public BaseGroupedQueryResultSetEvaluator(IResultIterator resultIterator,boolean hasAggregation,boolean isSubQuery,Chart cm,ExtendedItemHandle handle) throws ChartException {
  fHasSummaryAggregation=hasAggregation;
  itemHandle=handle;
  fResultIterator=resultIterator;
  if (isSubQuery) {
    List subQuerys=new ArrayList();
    Collection c=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getSubqueries();
    if (c != null && !c.isEmpty()) {
      subQuerys.addAll(c);
    }
    List groups=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
    if (groups != null) {
      for (Iterator iter=groups.iterator(); iter.hasNext(); ) {
        c=((IGroupDefinition)iter.next()).getSubqueries();
        if (c != null && !c.isEmpty()) {
          subQuerys.addAll(c);
        }
      }
    }
    for (int i=0; i < subQuerys.size(); i++) {
      if ((ChartReportItemConstants.NAME_SUBQUERY + handle.getElement().getID()).equals(((ISubqueryDefinition)subQuerys.get(i)).getName())) {
        fGroupDefinitions=((ISubqueryDefinition)subQuerys.get(i)).getGroups();
        break;
      }
    }
    if (fGroupDefinitions == null) {
      fGroupDefinitions=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
    }
  }
 else {
    fGroupDefinitions=fResultIterator.getQueryResults().getPreparedQuery().getReportQueryDefn().getGroups();
  }
  if (fGroupDefinitions != null && fGroupDefinitions.size() > 0) {
    fIsGrouped=true;
    fGroupCount=fGroupDefinitions.size();
    faGroupBreaks=new List[fGroupDefinitions.size()];
    for (int i=0; i < faGroupBreaks.length; i++) {
      faGroupBreaks[i]=new ArrayList<Integer>();
    }
    updateEnabledGroupIndexes(cm,fGroupDefinitions);
  }
}",0.9945184025058732
67585,"/** 
 * Creates a preset for the web module version >= 2.3
 * @see org.eclipse.wst.common.project.facet.core.IPresetFactory#createPreset(java.lang.String,java.util.Map)
 */
public PresetDefinition createPreset(final String presetId,final Map<String,Object> context) throws CoreException {
  final IFacetedProjectBase project=(IFacetedProjectBase)context.get(IDynamicPreset.CONTEXT_KEY_FACETED_PROJECT);
  final IProjectFacetVersion webFacetVersion=project.getProjectFacetVersion(WebFacetUtils.WEB_FACET);
  if (webFacetVersion != null && webFacetVersion.compareTo(WebFacetUtils.WEB_23) >= 0) {
    final Set<IProjectFacetVersion> facets=new HashSet<IProjectFacetVersion>();
    final IProjectFacet birtFacet=ProjectFacetsManager.getProjectFacet(""String_Node_Str"");
    final IProjectFacetVersion birtFacetVersion=birtFacet.getVersion(""String_Node_Str"");
    facets.add(birtFacetVersion);
    facets.add(webFacetVersion);
    facets.add(JavaFacetUtils.JAVA_50);
    return new PresetDefinition(Resources.BIRT_FACET_TEMPLATE_LABEL,Resources.BIRT_FACET_TEMPLATE_DESCRIPTION,facets);
  }
  return null;
}","/** 
 * Creates a preset for the web module version >= 2.3
 * @see org.eclipse.wst.common.project.facet.core.IPresetFactory#createPreset(java.lang.String,java.util.Map)
 */
public PresetDefinition createPreset(final String presetId,final Map<String,Object> context) throws CoreException {
  final IFacetedProjectBase project=(IFacetedProjectBase)context.get(IDynamicPreset.CONTEXT_KEY_FACETED_PROJECT);
  final IProjectFacetVersion webFacetVersion=project.getProjectFacetVersion(WebFacetUtils.WEB_FACET);
  if (webFacetVersion != null && webFacetVersion.compareTo(WebFacetUtils.WEB_23) >= 0) {
    final Set<IProjectFacetVersion> facets=new HashSet<IProjectFacetVersion>();
    final IProjectFacet birtFacet=ProjectFacetsManager.getProjectFacet(IBirtFacetConstants.BIRT_RUNTIME_FACET_ID);
    final IProjectFacetVersion birtFacetVersion=birtFacet.getVersion(IBirtFacetConstants.BIRT_RUNTIME_FACET_VERSION);
    facets.add(birtFacetVersion);
    facets.add(webFacetVersion);
    facets.add(JavaFacetUtils.JAVA_50);
    return new PresetDefinition(Resources.BIRT_FACET_TEMPLATE_LABEL,Resources.BIRT_FACET_TEMPLATE_DESCRIPTION,facets);
  }
  return null;
}",0.8841544607190412
67586,"private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginLeft=fLeftSize.x;
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  getDataSheet().createDataSelector(dataComposite);
  GridData gd=new GridData();
  gd.widthHint=fRightSize.x - 40;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
}","private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL | SWT.V_SCROLL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginLeft=fLeftSize.x;
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  getDataSheet().createDataSelector(dataComposite);
  GridData gd=new GridData();
  gd.widthHint=fRightSize.x - 40;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
  fDataArea.setMinHeight(fDataArea.computeSize(SWT.DEFAULT,SWT.DEFAULT).y);
}",0.9540636042402828
67587,"public String getDefaultAnalysisType(String dataType,String originalAnalysis){
  String defaultAnalysisType=null;
  if (!this.needToFocusOnOutput)   return originalAnalysis;
  if (originalAnalysis != null)   return originalAnalysis;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
  return defaultAnalysisType;
}","public String getDefaultAnalysisType(String columnName,String dataType,String originalAnalysis){
  String defaultAnalysisType=null;
  if (!this.needToFocusOnOutput)   return originalAnalysis;
  if (originalAnalysis != null)   return originalAnalysis;
  if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_INTEGER) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_FLOAT) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DECIMAL)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_MEASURE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_STRING)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_ATTRIBUTE;
  }
 else   if (dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_TIME) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATE) || dataType.equals(DesignChoiceConstants.COLUMN_DATA_TYPE_DATETIME)) {
    defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
  }
  if (columnName.length() >= 3) {
    String lastThreeLetters=columnName.substring(columnName.length() - 3);
    if (lastThreeLetters.equalsIgnoreCase(""String_Node_Str"")) {
      defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
    }
  }
  if (columnName.length() >= 2) {
    String lastTwoLetters=columnName.substring(columnName.length() - 2);
    if (lastTwoLetters.equalsIgnoreCase(""String_Node_Str"")) {
      defaultAnalysisType=DesignChoiceConstants.ANALYSIS_TYPE_DIMENSION;
    }
  }
  return defaultAnalysisType;
}",0.7671232876712328
67588,"/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(getDefaultAnalysisType(columns[n].getDataTypeName(),hint.getAnalysis()));
          columns[n].setACLExpression(hint.getACLExpression());
          break;
        }
      }
    }
  }
}","/** 
 * @param ds
 * @param columns
 */
public void updateModel(DataSetHandle ds,DataSetViewData[] columns){
  PropertyHandle handle=ds.getPropertyHandle(DataSetHandle.COLUMN_HINTS_PROP);
  PropertyHandle resultSetColumnHandle=ds.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
  Iterator iter=handle.iterator();
  if (iter != null) {
    while (iter.hasNext()) {
      ColumnHintHandle hint=(ColumnHintHandle)iter.next();
      for (int n=0; n < columns.length; n++) {
        String columnName=columns[n].getName();
        if (resultSetColumnHandle != null && (columnName == null || columnName.trim().length() == 0)) {
          Iterator resultIter=resultSetColumnHandle.iterator();
          if (resultIter != null) {
            while (resultIter.hasNext()) {
              ResultSetColumnHandle column=(ResultSetColumnHandle)resultIter.next();
              if (column.getPosition().intValue() == n + 1) {
                columnName=column.getColumnName();
                break;
              }
            }
          }
          if (columnName == null) {
            columnName=""String_Node_Str"";
          }
          columns[n].setName(columnName);
        }
        if (columns[n].getName().equals(hint.getColumnName())) {
          if (hint.getDisplayNameKey() != null) {
            columns[n].setExternalizedName(hint.getExternalizedValue(org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_ID_MEMBER,org.eclipse.birt.report.model.api.elements.structures.ComputedColumn.DISPLAY_NAME_MEMBER,hint.getModule().getLocale()));
          }
          columns[n].setDisplayName(hint.getDisplayName());
          columns[n].setDisplayNameKey(hint.getDisplayNameKey());
          columns[n].setAlias(hint.getAlias());
          columns[n].setHelpText(hint.getHelpText());
          columns[n].setAnalysis(getDefaultAnalysisType(columns[n].getName(),columns[n].getDataTypeName(),hint.getAnalysis()));
          columns[n].setACLExpression(hint.getACLExpression());
          break;
        }
      }
    }
  }
}",0.9948592411260708
67589,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn())       items[i].setAnalysis(getDefaultAnalysisType(items[i].getDataTypeName(),hint.getAnalysis()));
 else       items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn())       items[i].setAnalysis(null);
 else       items[i].setAnalysis(getDefaultAnalysisType(items[i].getDataTypeName(),null));
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public DataSetViewData[] populateAllOutputColumns(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  DataService.getInstance().registerSession(dataSetHandle,session);
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,false);
  if (metaData == null)   return new DataSetViewData[0];
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn())       items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
 else       items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn())       items[i].setAnalysis(null);
 else       items[i].setAnalysis(getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
    }
  }
  updateModel(dataSetHandle,items);
  return items;
}",0.9907990314769975
67590,"/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn())       items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getDataTypeName(),hint.getAnalysis()));
 else       items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn())       items[i].setAnalysis(null);
 else       items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getDataTypeName(),null));
    }
  }
  return items;
}","/** 
 * get Cached metadata
 * @throws BirtException
 */
public DataSetViewData[] populateAllCachedMetaData(DataSetHandle dataSetHandle,DataRequestSession session) throws BirtException {
  IResultMetaData metaData=session.getDataSetMetaData(dataSetHandle,true);
  DataSetViewData[] items=new DataSetViewData[metaData.getColumnCount()];
  for (int i=0; i < metaData.getColumnCount(); i++) {
    items[i]=new DataSetViewData();
    items[i].setName(metaData.getColumnName(i + 1));
    items[i].setDataTypeName(DataAdapterUtil.adapterToModelDataType(metaData.getColumnType(i + 1)));
    items[i].setAlias(metaData.getColumnAlias(i + 1));
    items[i].setComputedColumn(metaData.isComputedColumn(i + 1));
    items[i].setPosition(i + 1);
    items[i].setDataType(metaData.getColumnType(i + 1));
    ColumnHintHandle hint=findColumnHint(dataSetHandle,items[i].getName());
    if (hint != null) {
      if (!items[i].isComputedColumn())       items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),hint.getAnalysis()));
 else       items[i].setAnalysis(hint.getAnalysis());
      items[i].setACLExpression(hint.getACLExpression());
      items[i].setFormat(hint.getFormat());
      items[i].setDisplayLength(hint.getDisplayLength());
      items[i].setHeading(hint.getHeading());
      items[i].setHelpText(hint.getHelpText());
      items[i].setHorizontalAlign(hint.getHorizontalAlign());
      items[i].setTextFormat(hint.getTextFormat());
      items[i].setDescription(hint.getDescription());
      items[i].setWordWrap(hint.wordWrap());
    }
 else {
      if (items[i].isComputedColumn())       items[i].setAnalysis(null);
 else       items[i].setAnalysis(this.getDefaultAnalysisType(items[i].getName(),items[i].getDataTypeName(),null));
    }
  }
  return items;
}",0.9893557422969188
67591,"public void setLayoutPageHint(IPageHint pageHint){
  this.pageHint=pageHint;
}","public void setLayoutPageHint(IPageHint pageHint){
  this.pageHint=pageHint;
  context.setPaged(true);
}",0.8571428571428571
67592,"protected void resolveTotalPage(IContentEmitter emitter) throws BirtException {
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    DataFormatValue format=totalPageContent.getComputedStyle().getDataFormat();
    NumberFormatter nf=null;
    if (format == null) {
      nf=new NumberFormatter();
    }
 else {
      String pattern=format.getNumberPattern();
      String locale=format.getNumberLocale();
      if (locale == null)       nf=new NumberFormatter(pattern);
 else       nf=new NumberFormatter(pattern,new ULocale(locale));
    }
    long totalPageCount=0;
    if (context.isReserveDocumentPageNumbers()) {
      totalPageCount=context.totalPage;
    }
 else {
      totalPageCount=context.pageCount;
    }
    totalPageContent.setText(nf.format(totalPageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    String align=totalPageContent.getComputedStyle().getTextAlign();
    boolean isRightAligned=BidiAlignmentResolver.isRightAligned(totalPageContent,align,false);
    if ((isRightAligned || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
      int spacing=context.getTotalPageTemplateWidth() - totalPageArea.getWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          totalPageArea.setPosition(spacing + totalPageArea.getX(),totalPageArea.getY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setPosition(spacing / 2 + totalPageArea.getX(),totalPageArea.getY());
        }
      }
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}","protected void resolveTotalPage(IContentEmitter emitter) throws BirtException {
  IContent con=context.getUnresolvedContent();
  if (!(con instanceof IAutoTextContent)) {
    return;
  }
  IAutoTextContent totalPageContent=(IAutoTextContent)con;
  if (null != totalPageContent) {
    DataFormatValue format=totalPageContent.getComputedStyle().getDataFormat();
    NumberFormatter nf=null;
    if (format == null) {
      nf=new NumberFormatter();
    }
 else {
      String pattern=format.getNumberPattern();
      String locale=format.getNumberLocale();
      if (locale == null)       nf=new NumberFormatter(pattern);
 else       nf=new NumberFormatter(pattern,new ULocale(locale));
    }
    totalPageContent.setText(nf.format(context.pageCount));
    AbstractArea totalPageArea=null;
    ChunkGenerator cg=new ChunkGenerator(context.getFontManager(),totalPageContent,true,true);
    if (cg.hasMore()) {
      Chunk c=cg.getNext();
      Dimension d=new Dimension((int)(c.getFontInfo().getWordWidth(c.getText()) * PDFConstants.LAYOUT_TO_PDF_RATIO),(int)(c.getFontInfo().getWordHeight() * PDFConstants.LAYOUT_TO_PDF_RATIO));
      totalPageArea=createTextArea(totalPageContent,c.getFontInfo(),false);
      totalPageArea.setWidth(Math.min(context.getMaxWidth(),d.getWidth()));
      totalPageArea.setHeight(Math.min(context.getMaxHeight(),d.getHeight()));
    }
    String align=totalPageContent.getComputedStyle().getTextAlign();
    boolean isRightAligned=BidiAlignmentResolver.isRightAligned(totalPageContent,align,false);
    if ((isRightAligned || CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align))) {
      int spacing=context.getTotalPageTemplateWidth() - totalPageArea.getWidth();
      if (spacing > 0) {
        if (isRightAligned) {
          totalPageArea.setPosition(spacing + totalPageArea.getX(),totalPageArea.getY());
        }
 else         if (CSSConstants.CSS_CENTER_VALUE.equalsIgnoreCase(align)) {
          totalPageArea.setPosition(spacing / 2 + totalPageArea.getX(),totalPageArea.getY());
        }
      }
    }
    totalPageContent.setExtension(IContent.LAYOUT_EXTENSION,totalPageArea);
    emitter.startAutoText(totalPageContent);
  }
}",0.9472517730496454
67593,"protected void setupLayoutOptions(IRenderOption renderOptions){
  Map options=null;
  if (renderOptions != null) {
    options=renderOptions.getOptions();
  }
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null && pageOverflow instanceof Integer) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
      if (pageOverflowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
        context.setPagebreakPaginationOnly(false);
      }
 else {
        context.setPagebreakPaginationOnly(true);
      }
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
    Object dpi=options.get(IPDFRenderOption.DPI);
    if (dpi != null && dpi instanceof Integer) {
      int renderDpi=((Integer)dpi).intValue();
      context.setDpi(renderDpi);
    }
    Object supportedImageFormats=options.get(IRenderOption.SUPPORTED_IMAGE_FORMATS);
    if (supportedImageFormats != null && supportedImageFormats instanceof String) {
      context.setSupportedImageFormats((String)supportedImageFormats);
    }
    Object reserveDocumentPageNumbers=options.get(IPDFRenderOption.RESERVE_DOCUMENT_PAGE_NUMBERS);
    if (reserveDocumentPageNumbers != null && reserveDocumentPageNumbers instanceof Boolean) {
      if (((Boolean)reserveDocumentPageNumbers).booleanValue()) {
        context.setReserveDocumentPageNumbers(true);
      }
    }
  }
}","protected void setupLayoutOptions(IRenderOption renderOptions){
  Map options=null;
  if (renderOptions != null) {
    options=renderOptions.getOptions();
  }
  if (options != null) {
    Object fitToPage=options.get(IPDFRenderOption.FIT_TO_PAGE);
    if (fitToPage != null && fitToPage instanceof Boolean) {
      if (((Boolean)fitToPage).booleanValue()) {
        context.setFitToPage(true);
      }
    }
    Object pageBreakOnly=options.get(IPDFRenderOption.PAGEBREAK_PAGINATION_ONLY);
    if (pageBreakOnly != null && pageBreakOnly instanceof Boolean) {
      if (((Boolean)pageBreakOnly).booleanValue()) {
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object pageOverflow=options.get(IPDFRenderOption.PAGE_OVERFLOW);
    if (pageOverflow != null && pageOverflow instanceof Integer) {
      int pageOverflowType=((Integer)pageOverflow).intValue();
      context.setPageOverflow(pageOverflowType);
      if (pageOverflowType == IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES) {
        context.setPagebreakPaginationOnly(false);
      }
 else {
        context.setPagebreakPaginationOnly(true);
      }
    }
 else {
      if (context.fitToPage()) {
        context.setPageOverflow(IPDFRenderOption.FIT_TO_PAGE_SIZE);
        context.setPagebreakPaginationOnly(true);
      }
    }
    Object textWrapping=options.get(IPDFRenderOption.PDF_TEXT_WRAPPING);
    if (textWrapping != null && textWrapping instanceof Boolean) {
      if (!((Boolean)textWrapping).booleanValue()) {
        context.setTextWrapping(false);
      }
    }
    Object fontSubstitution=options.get(IPDFRenderOption.PDF_FONT_SUBSTITUTION);
    if (fontSubstitution != null && fontSubstitution instanceof Boolean) {
      if (!((Boolean)fontSubstitution).booleanValue()) {
        context.setFontSubstitution(false);
      }
    }
    Object bidiProcessing=options.get(IPDFRenderOption.PDF_BIDI_PROCESSING);
    if (bidiProcessing != null && bidiProcessing instanceof Boolean) {
      if (!((Boolean)bidiProcessing).booleanValue()) {
        context.setBidiProcessing(false);
      }
    }
    Object hyhenation=options.get(IPDFRenderOption.PDF_HYPHENATION);
    if (hyhenation != null && hyhenation instanceof Boolean) {
      if (((Boolean)hyhenation).booleanValue()) {
        context.setEnableHyphenation(true);
      }
    }
    Object dpi=options.get(IPDFRenderOption.DPI);
    if (dpi != null && dpi instanceof Integer) {
      int renderDpi=((Integer)dpi).intValue();
      context.setDpi(renderDpi);
    }
    Object supportedImageFormats=options.get(IRenderOption.SUPPORTED_IMAGE_FORMATS);
    if (supportedImageFormats != null && supportedImageFormats instanceof String) {
      context.setSupportedImageFormats((String)supportedImageFormats);
    }
    Object reserveDocumentPageNumbers=options.get(IPDFRenderOption.RESERVE_DOCUMENT_PAGE_NUMBERS);
    if (reserveDocumentPageNumbers != null && reserveDocumentPageNumbers instanceof Boolean) {
      if (((Boolean)reserveDocumentPageNumbers).booleanValue()) {
        context.setReserveDocumentPageNumbers(true);
      }
 else {
        context.setReserveDocumentPageNumbers(false);
      }
    }
  }
}",0.988774855676716
67594,"public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if ((type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) && (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) || context.getEngineTaskType() != IEngineTask.TASK_RENDER)) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}","public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if ((type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) && ""String_Node_Str"".equalsIgnoreCase(context.getFormat()) && (context.getEngineTaskType() == IEngineTask.TASK_RUNANDRENDER || (!context.isReserveDocumentPageNumbers() && context.getEngineTaskType() == IEngineTask.TASK_RENDER && context.getHtmlLayoutContext() != null && context.getHtmlLayoutContext().isPaged()))) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}",0.9216347956505436
67595,"@Override public final DataSet populate(Object oResultSetDef,DataSet ds) throws ChartException {
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    int dataType=rsds.getDataType(0);
    boolean isBigDecimal=false;
    int i=0;
    final BubbleEntry[] bea=new BubbleEntry[(int)lRowCount];
    Object[][] values=null;
    if (dataType == IConstants.NUMERICAL) {
      values=new Object[(int)lRowCount][2];
      while (rsds.hasNext()) {
        Object[] o=rsds.next();
        Object[] newO=new Object[2];
        newO[0]=o[0];
        newO[1]=o[1];
        values[i++]=newO;
        if (!isBigDecimal && NumberUtil.isBigDecimal(o[0]) || NumberUtil.isBigDecimal(o[1])) {
          isBigDecimal=true;
        }
      }
    }
    if (isBigDecimal) {
      i=0;
      for (      Object[] o : values) {
        validateBubbleEntryData(o);
        Object value=o[0];
        Object size=o[1];
        bea[i++]=new BubbleEntry(NumberUtil.asBigNumber((Number)value,null),NumberUtil.asBigNumber((Number)size,null));
      }
    }
 else {
      for (i=0; i < values.length; i++) {
        validateBubbleEntryData(values[i]);
        Object value=values[i][0];
        Object size=values[i][1];
        if (dataType == IConstants.NUMERICAL) {
          bea[i]=new BubbleEntry(value,size);
        }
 else         if (dataType == IConstants.DATE_TIME) {
          bea[i]=new BubbleEntry(value == null ? null : value,size);
        }
 else {
          bea[i]=new BubbleEntry(value,size,i + 1);
        }
      }
    }
    if (ds == null) {
      ds=BubbleDataSetImpl.create(bea);
    }
 else {
      ds.setValues(bea);
    }
    ((DataSetImpl)ds).setIsBigNumber(isBigDecimal);
  }
 else {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ds,oResultSetDef},Messages.getResourceBundle(getULocale()));
  }
  return ds;
}","@Override public final DataSet populate(Object oResultSetDef,DataSet ds) throws ChartException {
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    int dataType=rsds.getDataType(0);
    boolean isBigDecimal=false;
    int i=0;
    final BubbleEntry[] bea=new BubbleEntry[(int)lRowCount];
    Object[][] values=new Object[(int)lRowCount][2];
    if (dataType == IConstants.NUMERICAL) {
      while (rsds.hasNext()) {
        Object[] o=rsds.next();
        Object[] newO=new Object[2];
        newO[0]=o[0];
        newO[1]=o[1];
        values[i++]=newO;
        if (!isBigDecimal && NumberUtil.isBigDecimal(o[0]) || NumberUtil.isBigDecimal(o[1])) {
          isBigDecimal=true;
        }
      }
    }
 else {
      while (rsds.hasNext()) {
        Object[] o=rsds.next();
        Object[] newO=new Object[2];
        newO[0]=o[0];
        newO[1]=o[1];
        values[i++]=newO;
      }
    }
    if (isBigDecimal) {
      i=0;
      for (      Object[] o : values) {
        validateBubbleEntryData(o);
        Object value=o[0];
        Object size=o[1];
        bea[i++]=new BubbleEntry(NumberUtil.asBigNumber((Number)value,null),NumberUtil.asBigNumber((Number)size,null));
      }
    }
 else {
      for (i=0; i < values.length; i++) {
        validateBubbleEntryData(values[i]);
        Object value=values[i][0];
        Object size=values[i][1];
        if (dataType == IConstants.NUMERICAL) {
          bea[i]=new BubbleEntry(value,size);
        }
 else         if (dataType == IConstants.DATE_TIME) {
          bea[i]=new BubbleEntry(value == null ? null : value,size);
        }
 else {
          bea[i]=new BubbleEntry(value,size,i + 1);
        }
      }
    }
    if (ds == null) {
      ds=BubbleDataSetImpl.create(bea);
    }
 else {
      ds.setValues(bea);
    }
    ((DataSetImpl)ds).setIsBigNumber(isBigDecimal);
  }
 else {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ds,oResultSetDef},Messages.getResourceBundle(getULocale()));
  }
  return ds;
}",0.9406534785507892
67596,"private static void addEdgeDefinition(ICubeQueryDefinition cubeQuery,CrosstabReportItemHandle crosstabItem,int axis,List<String> levelNameList,List<LevelViewHandle> levelViewList,Map<LevelHandle,ILevelDefinition> levelMapping,IModelAdapter modelAdapter) throws BirtException {
  IEdgeDefinition edge=cubeQuery.createEdge(axis == COLUMN_AXIS_TYPE ? ICubeQueryDefinition.COLUMN_EDGE : ICubeQueryDefinition.ROW_EDGE);
  LevelHandle mirrorLevel=crosstabItem.getCrosstabView(axis).getMirroredStartingLevel();
  for (int i=0; i < crosstabItem.getDimensionCount(axis); i++) {
    DimensionViewHandle dv=crosstabItem.getDimension(axis,i);
    if (dv.getCubeDimension() == null) {
      if (axis == COLUMN_AXIS_TYPE) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
 else {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
    }
    IDimensionDefinition dimDef=edge.createDimension(dv.getCubeDimension().getName());
    IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
    for (int j=0; j < dv.getLevelCount(); j++) {
      LevelViewHandle lv=dv.getLevel(j);
      if (lv.getCubeLevel() == null) {
        if (axis == COLUMN_AXIS_TYPE) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
 else {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
      }
      ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
      levelNameList.add(lv.getCubeLevel().getFullName());
      if (mirrorLevel != null && mirrorLevel.getQualifiedName().equals(lv.getCubeLevelName())) {
        edge.setMirrorStartingLevel(levelDef);
      }
      levelViewList.add(lv);
      levelMapping.put(lv.getCubeLevel(),levelDef);
    }
  }
  CrosstabViewHandle view=crosstabItem.getCrosstabView(axis);
  if (view != null) {
    List members=view.getMembers();
    if (members != null && members.size() > 0) {
      for (int i=0; i < members.size(); i++) {
        MemberValueHandle mvh=(MemberValueHandle)members.get(i);
        if (mvh != null && mvh.getLevel() != null) {
          addDrillDefinition(edge,mvh,levelMapping);
        }
      }
      addEdgeMemberFilter(cubeQuery,modelAdapter,members,levelMapping);
    }
  }
}","private static void addEdgeDefinition(ICubeQueryDefinition cubeQuery,CrosstabReportItemHandle crosstabItem,int axis,List<String> levelNameList,List<LevelViewHandle> levelViewList,Map<LevelHandle,ILevelDefinition> levelMapping,IModelAdapter modelAdapter) throws BirtException {
  IEdgeDefinition edge=cubeQuery.createEdge(axis == COLUMN_AXIS_TYPE ? ICubeQueryDefinition.COLUMN_EDGE : ICubeQueryDefinition.ROW_EDGE);
  LevelHandle mirrorLevel=crosstabItem.getCrosstabView(axis).getMirroredStartingLevel();
  for (int i=0; i < crosstabItem.getDimensionCount(axis); i++) {
    DimensionViewHandle dv=crosstabItem.getDimension(axis,i);
    if (dv.getCubeDimension() == null) {
      if (axis == COLUMN_AXIS_TYPE) {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
 else {
        throw new CrosstabException(Messages.getString(""String_Node_Str"",dv.getCubeDimensionName()));
      }
    }
    IDimensionDefinition dimDef=edge.createDimension(dv.getCubeDimension().getName());
    IHierarchyDefinition hieDef=dimDef.createHierarchy(dv.getCubeDimension().getDefaultHierarchy().getName());
    for (int j=0; j < dv.getLevelCount(); j++) {
      LevelViewHandle lv=dv.getLevel(j);
      if (lv.getCubeLevel() == null) {
        if (axis == COLUMN_AXIS_TYPE) {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
 else {
          throw new CrosstabException(Messages.getString(""String_Node_Str"",lv.getCubeLevelName()));
        }
      }
      ILevelDefinition levelDef=hieDef.createLevel(lv.getCubeLevel().getName());
      levelNameList.add(lv.getCubeLevel().getFullName());
      if (mirrorLevel != null && mirrorLevel.getFullName().equals(lv.getCubeLevelName())) {
        edge.setMirrorStartingLevel(levelDef);
      }
      levelViewList.add(lv);
      levelMapping.put(lv.getCubeLevel(),levelDef);
    }
  }
  CrosstabViewHandle view=crosstabItem.getCrosstabView(axis);
  if (view != null) {
    List members=view.getMembers();
    if (members != null && members.size() > 0) {
      for (int i=0; i < members.size(); i++) {
        MemberValueHandle mvh=(MemberValueHandle)members.get(i);
        if (mvh != null && mvh.getLevel() != null) {
          addDrillDefinition(edge,mvh,levelMapping);
        }
      }
      addEdgeMemberFilter(cubeQuery,modelAdapter,members,levelMapping);
    }
  }
}",0.9973079312487058
67597,"private Object validateValue(String value,String type) throws BirtException {
  String tempdefaultValue=value;
  String exprType=ExpressionType.CONSTANT;
  if (type != null)   exprType=type;
  if (!((DesignChoiceConstants.PARAM_TYPE_STRING.endsWith(getSelectedDataType())) || (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.endsWith(getSelectedDataType())))) {
    if (ExpressionType.CONSTANT.equals(exprType)) {
      if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toDate(tempdefaultValue));
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toSqlDate(tempdefaultValue));
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toSqlTime(tempdefaultValue));
      }
      return ParameterValidationUtil.validate(getSelectedDataType(),null,tempdefaultValue,ULocale.getDefault());
    }
 else     return tempdefaultValue;
  }
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
    if (tempdefaultValue != null && tempdefaultValue.equals(CHOICE_NO_DEFAULT)) {
      return DataTypeUtil.toBoolean(null);
    }
    if (ExpressionType.CONSTANT.equals(exprType))     return DataTypeUtil.toBoolean(tempdefaultValue);
 else     return tempdefaultValue;
  }
 else   return tempdefaultValue;
}","private Object validateValue(String value,String type) throws BirtException {
  String tempdefaultValue=value;
  String exprType=ExpressionType.CONSTANT;
  if (type != null)   exprType=type;
  if (!((DesignChoiceConstants.PARAM_TYPE_STRING.endsWith(getSelectedDataType())) || (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.endsWith(getSelectedDataType())))) {
    if (ExpressionType.CONSTANT.equals(exprType)) {
      if (DesignChoiceConstants.PARAM_TYPE_DATETIME.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toDate(tempdefaultValue));
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_DATE.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toSqlDate(tempdefaultValue));
      }
 else       if (DesignChoiceConstants.PARAM_TYPE_TIME.equals(getSelectedDataType())) {
        tempdefaultValue=ParameterUtil.convertToStandardFormat(DataTypeUtil.toSqlTime(tempdefaultValue));
      }
      return ParameterValidationUtil.validate(getSelectedDataType(),ParameterUtil.STANDARD_DATE_TIME_PATTERN,tempdefaultValue,ULocale.getDefault());
    }
 else     return tempdefaultValue;
  }
  if (DesignChoiceConstants.PARAM_TYPE_BOOLEAN.equals(getSelectedDataType())) {
    if (tempdefaultValue != null && tempdefaultValue.equals(CHOICE_NO_DEFAULT)) {
      return DataTypeUtil.toBoolean(null);
    }
    if (ExpressionType.CONSTANT.equals(exprType))     return DataTypeUtil.toBoolean(tempdefaultValue);
 else     return tempdefaultValue;
  }
 else   return tempdefaultValue;
}",0.985969387755102
67598,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}",0.999407465929291
67599,"private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
 else {
          if (implicitProcessor.isHighContrast()) {
            ((Block)component).setBackground(goFactory.BLACK());
          }
 else {
            ((Block)component).setBackground(goFactory.WHITE());
          }
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis || component.eContainer() instanceof Series) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}","private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
 else {
          if (implicitProcessor.getDefaultBackgroundColor() != null) {
            ((Block)component).setBackground(implicitProcessor.getDefaultBackgroundColor());
          }
 else {
            ((Block)component).setBackground(goFactory.WHITE());
          }
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis || component.eContainer() instanceof Series) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}",0.981146163897704
67600,"private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  gr.setHighContrast(Display.getCurrent().getHighContrast());
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}","private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  if (Display.getCurrent().getHighContrast()) {
    Color color=Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    ColorDefinition cd=ColorDefinitionImpl.create(color.getRed(),color.getGreen(),color.getBlue());
    gr.setDefaultBackground(cd);
  }
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}",0.900774621910734
67601,"private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    gr.setHighContrast(Display.getCurrent().getHighContrast());
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),(Chart)chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
    ChartWizard.removeException(ChartWizard.PreviewPainter_ID);
  }
 catch (  Exception ex) {
    buffer=oldBuffer;
    ChartWizard.showException(ChartWizard.PreviewPainter_ID,ex.getLocalizedMessage());
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}","private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    if (Display.getCurrent().getHighContrast()) {
      Color color=Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
      ColorDefinition cd=ColorDefinitionImpl.create(color.getRed(),color.getGreen(),color.getBlue());
      gr.setDefaultBackground(cd);
    }
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),(Chart)chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
    ChartWizard.removeException(ChartWizard.PreviewPainter_ID);
  }
 catch (  Exception ex) {
    buffer=oldBuffer;
    ChartWizard.showException(ChartWizard.PreviewPainter_ID,ex.getLocalizedMessage());
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}",0.9445667400440264
67602,"/** 
 * @param cubeHandle
 * @param dataBindingExpr
 * @param queryDefn
 * @param appContext
 * @return
 * @throws AdapterException
 */
public Iterator getMemberValueIterator(TabularCubeHandle cubeHandle,String dataBindingExpr,ICubeQueryDefinition queryDefn,Map appContext) throws AdapterException ;","/** 
 * @param cubeHandle
 * @param dataBindingExpr
 * @param queryDefn
 * @param appContext
 * @return
 * @throws AdapterException
 */
public Iterator getMemberValueIterator(CubeHandle cubeHandle,String dataBindingExpr,ICubeQueryDefinition queryDefn,Map appContext) throws AdapterException ;",0.988155668358714
67603,"/** 
 * @param hierHandle
 * @return
 */
private static TabularCubeHandle acquireContainerCube(TabularHierarchyHandle hierHandle){
  DesignElementHandle handle=hierHandle.getContainer().getContainer();
  if (handle == null || !(handle instanceof TabularCubeHandle))   return null;
  return (TabularCubeHandle)handle;
}","/** 
 * @param hierHandle
 * @return
 */
private static CubeHandle acquireContainerCube(TabularHierarchyHandle hierHandle){
  DesignElementHandle handle=hierHandle.getContainer().getContainer();
  if (handle == null || !(handle instanceof CubeHandle))   return null;
  return (CubeHandle)handle;
}",0.9658536585365852
67604,"/** 
 * @param handle
 * @return
 */
private static Iterator getFilterIterator(TabularHierarchyHandle handle){
  if (handle.getDataSet() != null)   return handle.filtersIterator();
 else {
    TabularCubeHandle cubeHandle=DataRequestSessionImpl.acquireContainerCube(handle);
    if (cubeHandle != null)     return cubeHandle.filtersIterator();
  }
  return new ArrayList().iterator();
}","/** 
 * @param handle
 * @return
 */
private static Iterator getFilterIterator(TabularHierarchyHandle handle){
  if (handle.getDataSet() != null)   return handle.filtersIterator();
 else {
    CubeHandle cubeHandle=DataRequestSessionImpl.acquireContainerCube(handle);
    if (cubeHandle != null)     return cubeHandle.filtersIterator();
  }
  return new ArrayList().iterator();
}",0.9908496732026144
67605,"/** 
 * @param handle
 * @return
 */
private static String getDataSet(TabularHierarchyHandle handle){
  if (handle.getDataSet() != null)   return handle.getDataSet().getQualifiedName();
 else {
    TabularCubeHandle cubeHandle=acquireContainerCube(handle);
    if (cubeHandle != null)     return cubeHandle.getDataSet().getQualifiedName();
  }
  return null;
}","/** 
 * @param handle
 * @return
 */
private static String getDataSet(TabularHierarchyHandle handle){
  if (handle.getDataSet() != null)   return handle.getDataSet().getQualifiedName();
 else {
    CubeHandle cubeHandle=acquireContainerCube(handle);
    if (cubeHandle != null) {
      return cubeHandle.getElementProperty(ITabularCubeModel.DATA_SET_PROP).getQualifiedName();
    }
  }
  return null;
}",0.8451443569553806
67606,"protected void createCustomControls(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  layout.marginTop=5;
  composite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.widthHint=320;
  layoutData.heightHint=200;
  composite.setLayoutData(layoutData);
  createDialogContents(composite);
}","protected void createCustomControls(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=3;
  layout.marginTop=5;
  composite.setLayout(layout);
  GridData layoutData=new GridData(GridData.FILL_BOTH);
  layoutData.widthHint=320;
  layoutData.heightHint=200;
  composite.setLayoutData(layoutData);
  createDialogContents(composite);
}",0.9975669099756692
67607,"public void modifyText(ModifyEvent e){
  displayName=displayNameText.getText().trim();
}","public void modifyText(ModifyEvent e){
  displayNameKey=tx.getText().trim();
  validateSyntax();
}",0.7956989247311828
67608,"public String getColumnText(Object element,int columnIndex){
  String value=null;
  ColumnDefn defn=null;
  if (element instanceof ColumnDefn) {
    defn=(ColumnDefn)element;
  }
 else {
    return ""String_Node_Str"";
  }
switch (columnIndex) {
case 1:
{
      value=defn.getColumnName();
      break;
    }
case 2:
{
    if (defn != newDefn)     value=getTypeDisplayName(defn.getDataType());
    break;
  }
case 3:
{
  value=defn.getAlias();
  break;
}
case 4:
{
value=defn.getDisplayName();
break;
}
case 5:
{
value=defn.getHelpText();
break;
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}","public String getColumnText(Object element,int columnIndex){
  String value=null;
  ColumnDefn defn=null;
  if (element instanceof ColumnDefn) {
    defn=(ColumnDefn)element;
  }
 else {
    return ""String_Node_Str"";
  }
switch (columnIndex) {
case 1:
{
      value=defn.getColumnName();
      break;
    }
case 2:
{
    if (defn != newDefn)     value=getTypeDisplayName(defn.getDataType());
    break;
  }
case 3:
{
  value=defn.getAlias();
  break;
}
case 4:
{
value=defn.getDisplayName();
break;
}
case 5:
{
value=defn.getDisplayNameKey();
break;
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}",0.98371335504886
67609,"protected void setTableLabelProvider(){
  viewer.getViewer().setLabelProvider(new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      String value=null;
      ColumnDefn defn=null;
      if (element instanceof ColumnDefn) {
        defn=(ColumnDefn)element;
      }
 else {
        return ""String_Node_Str"";
      }
switch (columnIndex) {
case 1:
{
          value=defn.getColumnName();
          break;
        }
case 2:
{
        if (defn != newDefn)         value=getTypeDisplayName(defn.getDataType());
        break;
      }
case 3:
{
      value=defn.getAlias();
      break;
    }
case 4:
{
    value=defn.getDisplayName();
    break;
  }
case 5:
{
  value=defn.getHelpText();
  break;
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}
public void addListener(ILabelProviderListener listener){
}
public void dispose(){
}
public boolean isLabelProperty(Object element,String property){
return false;
}
public void removeListener(ILabelProviderListener listener){
}
}
);
}","protected void setTableLabelProvider(){
  viewer.getViewer().setLabelProvider(new ITableLabelProvider(){
    public Image getColumnImage(    Object element,    int columnIndex){
      return null;
    }
    public String getColumnText(    Object element,    int columnIndex){
      String value=null;
      ColumnDefn defn=null;
      if (element instanceof ColumnDefn) {
        defn=(ColumnDefn)element;
      }
 else {
        return ""String_Node_Str"";
      }
switch (columnIndex) {
case 1:
{
          value=defn.getColumnName();
          break;
        }
case 2:
{
        if (defn != newDefn)         value=getTypeDisplayName(defn.getDataType());
        break;
      }
case 3:
{
      value=defn.getAlias();
      break;
    }
case 4:
{
    value=defn.getDisplayName();
    break;
  }
case 5:
{
  value=defn.getDisplayNameKey();
  break;
}
}
if (value == null) {
value=""String_Node_Str"";
}
return value;
}
public void addListener(ILabelProviderListener listener){
}
public void dispose(){
}
public boolean isLabelProperty(Object element,String property){
return false;
}
public void removeListener(ILabelProviderListener listener){
}
}
);
}",0.9904013961605584
67610,"private void initColumnInfos(){
  if (this.columnDefn != null) {
    columnName=resolveNull(this.columnDefn.getColumnName());
    alias=resolveNull(this.columnDefn.getAlias());
    displayName=resolveNull(this.columnDefn.getDisplayName());
    this.dataType=getTypeIndex(this.columnDefn.getDataType());
  }
 else {
    columnName=EMPTY_STRING;
    alias=EMPTY_STRING;
    displayName=EMPTY_STRING;
    this.dataType=defaultDataTypeIndex;
  }
}","private void initColumnInfos(){
  if (this.columnDefn != null) {
    columnName=resolveNull(this.columnDefn.getColumnName());
    alias=resolveNull(this.columnDefn.getAlias());
    displayName=resolveNull(this.columnDefn.getDisplayName());
    displayNameKey=resolveNull(this.columnDefn.getDisplayNameKey());
    this.dataType=getTypeIndex(this.columnDefn.getDataType());
  }
 else {
    columnName=EMPTY_STRING;
    alias=EMPTY_STRING;
    displayName=EMPTY_STRING;
    displayNameKey=EMPTY_STRING;
    this.dataType=defaultDataTypeIndex;
  }
}",0.8967611336032388
67611,"private void createDialogContents(Composite composite){
  GridData labelData=new GridData();
  labelData.horizontalSpan=1;
  GridData textData=new GridData(GridData.FILL_HORIZONTAL);
  textData.horizontalSpan=1;
  Label columnNameLabel=new Label(composite,SWT.NONE);
  columnNameLabel.setText(Messages.getString(""String_Node_Str""));
  columnNameLabel.setLayoutData(labelData);
  final Text columnNameText=new Text(composite,SWT.BORDER);
  columnNameText.setLayoutData(textData);
  columnNameText.setText(columnName);
  columnNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      columnName=columnNameText.getText().trim();
      validateSyntax();
    }
  }
);
  Label typeLabel=new Label(composite,SWT.NONE);
  typeLabel.setText(Messages.getString(""String_Node_Str""));
  typeLabel.setLayoutData(labelData);
  final Combo typeCombo=ControlProvider.createCombo(composite,SWT.BORDER | SWT.READ_ONLY);
  typeCombo.setItems(displayDataTypes);
  typeCombo.setLayoutData(textData);
  typeCombo.setText(typeCombo.getItem(this.dataType));
  typeCombo.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      dataType=typeCombo.getSelectionIndex();
    }
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
  }
);
  Label aliasLabel=new Label(composite,SWT.NONE);
  aliasLabel.setText(Messages.getString(""String_Node_Str""));
  aliasLabel.setLayoutData(labelData);
  final Text aliasText=new Text(composite,SWT.BORDER);
  aliasText.setLayoutData(textData);
  aliasText.setText(alias);
  aliasText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      alias=aliasText.getText().trim();
      validateSyntax();
    }
  }
);
  Label displayNameLabel=new Label(composite,SWT.NONE);
  displayNameLabel.setText(Messages.getString(""String_Node_Str""));
  displayNameLabel.setLayoutData(labelData);
  final Text displayNameText=new Text(composite,SWT.BORDER);
  displayNameText.setLayoutData(textData);
  displayNameText.setText(displayName);
  displayNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      displayName=displayNameText.getText().trim();
    }
  }
);
}","private void createDialogContents(Composite composite){
  GridData labelData=new GridData();
  labelData.horizontalSpan=1;
  GridData textData=new GridData(GridData.FILL_HORIZONTAL);
  textData.horizontalSpan=2;
  Label columnNameLabel=new Label(composite,SWT.NONE);
  columnNameLabel.setText(Messages.getString(""String_Node_Str""));
  columnNameLabel.setLayoutData(labelData);
  final Text columnNameText=new Text(composite,SWT.BORDER);
  columnNameText.setLayoutData(textData);
  columnNameText.setText(columnName);
  columnNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      columnName=columnNameText.getText().trim();
      validateSyntax();
    }
  }
);
  Label typeLabel=new Label(composite,SWT.NONE);
  typeLabel.setText(Messages.getString(""String_Node_Str""));
  typeLabel.setLayoutData(labelData);
  final Combo typeCombo=ControlProvider.createCombo(composite,SWT.BORDER | SWT.READ_ONLY);
  typeCombo.setItems(displayDataTypes);
  typeCombo.setLayoutData(textData);
  typeCombo.setText(typeCombo.getItem(this.dataType));
  typeCombo.addSelectionListener(new SelectionListener(){
    public void widgetSelected(    SelectionEvent e){
      dataType=typeCombo.getSelectionIndex();
    }
    public void widgetDefaultSelected(    SelectionEvent arg0){
    }
  }
);
  Label aliasLabel=new Label(composite,SWT.NONE);
  aliasLabel.setText(Messages.getString(""String_Node_Str""));
  aliasLabel.setLayoutData(labelData);
  final Text aliasText=new Text(composite,SWT.BORDER);
  aliasText.setLayoutData(textData);
  aliasText.setText(alias);
  aliasText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      alias=aliasText.getText().trim();
      validateSyntax();
    }
  }
);
  Label displayNameLabel=new Label(composite,SWT.NONE);
  displayNameLabel.setText(Messages.getString(""String_Node_Str""));
  displayNameLabel.setLayoutData(labelData);
  final Text displayNameText=new Text(composite,SWT.BORDER);
  displayNameText.setLayoutData(textData);
  displayNameText.setText(displayName);
  displayNameText.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      displayName=displayNameText.getText().trim();
      validateSyntax();
    }
  }
);
  createDisplayNameKeyArea(composite);
}",0.985742487387585
67612,"protected void createTableColumns(){
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(19);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
}","protected void createTableColumns(){
  TableColumn column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(""String_Node_Str"");
  column.setResizable(false);
  column.setWidth(19);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  column=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  column.setText(Messages.getString(""String_Node_Str""));
  column.setWidth(100);
  TableColumn displayNameKeyColumn=new TableColumn(viewer.getViewer().getTable(),SWT.LEFT);
  displayNameKeyColumn.setText(Messages.getString(""String_Node_Str""));
  displayNameKeyColumn.setWidth(100);
}",0.8876467300167692
67613,"protected ColumnDefn getColumnDefn(){
  if (this.columnDefn == null) {
    this.columnDefn=new ColumnDefn();
  }
  this.columnDefn.setColumnName(columnName);
  this.columnDefn.setDataType(getTypeString(dataType));
  this.columnDefn.setAlias(alias);
  this.columnDefn.setDisplayName(displayName);
  return this.columnDefn;
}","protected ColumnDefn getColumnDefn(){
  if (this.columnDefn == null) {
    this.columnDefn=new ColumnDefn();
  }
  this.columnDefn.setColumnName(columnName);
  this.columnDefn.setDataType(getTypeString(dataType));
  this.columnDefn.setAlias(alias);
  this.columnDefn.setDisplayName(displayName);
  this.columnDefn.setDisplayNameKey(displayNameKey);
  return this.columnDefn;
}",0.9241773962804004
67614,"public void widgetSelected(SelectionEvent e){
  dataType=typeCombo.getSelectionIndex();
}","public void widgetSelected(SelectionEvent event){
  ResourceEditDialog dlg=new ResourceEditDialog(getShell(),Messages.getString(""String_Node_Str""));
  dlg.setResourceURLs(getResourceURLs());
  if (dlg.open() == Window.OK) {
    tx.setText((String)dlg.getResult());
  }
}",0.3175487465181058
67615,"public Image decorateImage(Image image,Object element){
  int flag=getElementFlag(element);
  if ((flag & Normal_Element) != 0) {
    return image;
  }
  DesignElementHandle handle=(DesignElementHandle)element;
  String key=handle.getElement().getDefn().getName();
  ImageDescriptor descriptor=null;
  if ((flag & Library_Element) != 0) {
    key=key + Library_Key;
    descriptor=new LibraryImageDescriptor(image,ReportPlatformUIImages.getImageDescriptor(IReportGraphicConstants.ICON_REPORT_LIBRARY_OVER));
  }
 else   if ((flag & Local_Library_Element) != 0) {
    key=key + Local_Library_Key;
    descriptor=new LibraryImageDescriptor(image,ReportPlatformUIImages.getImageDescriptor(IReportGraphicConstants.ICON_REPORT_LOCAL_LIBRARY_OVER));
  }
  ImageRegistry regiest=ReportPlugin.getDefault().getImageRegistry();
  ImageDescriptor temp=regiest.getDescriptor(key);
  if (temp != null) {
    return temp.createImage();
  }
 else   if (descriptor != null) {
    regiest.put(key,descriptor);
    return descriptor.createImage();
  }
  return image;
}","public Image decorateImage(Image image,Object element){
  int flag=getElementFlag(element);
  if ((flag & Normal_Element) != 0) {
    return image;
  }
  String key=""String_Node_Str"";
  if (element instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)element;
    key=handle.getElement().getDefn().getName();
  }
 else   if (element instanceof EmbeddedImageHandle) {
    EmbeddedImageHandle imageHandle=(EmbeddedImageHandle)element;
    key=imageHandle.getQualifiedName();
  }
  ImageDescriptor descriptor=null;
  if ((flag & Library_Element) != 0) {
    key=key + Library_Key;
    descriptor=new LibraryImageDescriptor(image,ReportPlatformUIImages.getImageDescriptor(IReportGraphicConstants.ICON_REPORT_LIBRARY_OVER));
  }
 else   if ((flag & Local_Library_Element) != 0) {
    key=key + Local_Library_Key;
    descriptor=new LibraryImageDescriptor(image,ReportPlatformUIImages.getImageDescriptor(IReportGraphicConstants.ICON_REPORT_LOCAL_LIBRARY_OVER));
  }
  ImageRegistry regiest=ReportPlugin.getDefault().getImageRegistry();
  ImageDescriptor temp=regiest.getDescriptor(key);
  if (temp != null) {
    return temp.createImage();
  }
 else   if (descriptor != null) {
    regiest.put(key,descriptor);
    return descriptor.createImage();
  }
  return image;
}",0.8904985087345547
67616,"private int getElementFlag(Object element){
  if (!(element instanceof DesignElementHandle) && !(element instanceof EmbeddedImageHandle)) {
    return Normal_Element;
  }
  DesignElementHandle handle=(DesignElementHandle)element;
  boolean isLinkEmbeddedImage=false;
  if (element instanceof EmbeddedImageHandle) {
    EmbeddedImageHandle image=(EmbeddedImageHandle)element;
    if (image.isLibReference()) {
      isLinkEmbeddedImage=true;
    }
  }
  if (DEUtil.isLinkedElement(handle) || isLinkEmbeddedImage) {
    if (handle.hasLocalProperties()) {
      return Local_Library_Element;
    }
    return Library_Element;
  }
  return Normal_Element;
}","private int getElementFlag(Object element){
  if (!(element instanceof DesignElementHandle) && !(element instanceof EmbeddedImageHandle)) {
    return Normal_Element;
  }
  if (element instanceof EmbeddedImageHandle) {
    EmbeddedImageHandle image=(EmbeddedImageHandle)element;
    if (image.isLibReference()) {
      return Library_Element;
    }
  }
 else   if (element instanceof DesignElementHandle) {
    DesignElementHandle handle=(DesignElementHandle)element;
    if (DEUtil.isLinkedElement(handle)) {
      if (handle.hasLocalProperties()) {
        return Local_Library_Element;
      }
      return Library_Element;
    }
  }
  return Normal_Element;
}",0.5820668693009119
67617,"public static double convertColWidth(int width,int dpi){
  float PX_PT=INCH_PT / dpi;
  if (width < 0)   return 0;
  double result=0;
  double widthInPixel=width / PX_PT;
  double digitalWidth=7;
  result=(int)((widthInPixel - 5) / digitalWidth * 100 + 0.5);
  double characterNumber=(double)result / 100;
  result=(int)((characterNumber * digitalWidth + 5) / digitalWidth * 256);
  return result / 256;
}","public static double convertColWidth(int width){
  float PX_PT=INCH_PT / 96;
  if (width < 0)   return 0;
  double result=0;
  double widthInPixel=width / PX_PT;
  double digitalWidth=7;
  result=(int)((widthInPixel - 5) / digitalWidth * 100 + 0.5);
  double characterNumber=(double)result / 100;
  result=(int)((characterNumber * digitalWidth + 5) / digitalWidth * 256);
  return result / 256;
}",0.9837702871410736
67618,"public String getExpectedStringFormat(){
  return Messages.getString(""String_Node_Str"",getULocale());
}","@Override public String getExpectedStringFormat(){
  return Messages.getString(""String_Node_Str"",getULocale());
}",0.9537037037037036
67619,"public final DataSet populate(Object oResultSetDef,DataSet ds) throws ChartException {
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    int dataType=rsds.getDataType(0);
    boolean isBigDecimal=false;
    int i=0;
    final BubbleEntry[] bea=new BubbleEntry[(int)lRowCount];
    Object[][] values=null;
    if (dataType == IConstants.NUMERICAL) {
      values=new Object[(int)lRowCount][2];
      while (rsds.hasNext()) {
        Object[] o=rsds.next();
        Object[] newO=new Object[2];
        newO[0]=o[0];
        newO[1]=o[1];
        values[i++]=newO;
        if (!isBigDecimal && NumberUtil.isBigDecimal(o[0]) || NumberUtil.isBigDecimal(o[1])) {
          isBigDecimal=true;
        }
      }
    }
    if (isBigDecimal) {
      i=0;
      for (      Object[] o : values) {
        validateBubbleEntryData(o);
        Object value=o[0];
        Object size=o[1];
        bea[i++]=new BubbleEntry(NumberUtil.asBigNumber((Number)value,null),NumberUtil.asBigNumber((Number)size,null));
      }
    }
 else {
      for (i=0; rsds.hasNext(); i++) {
        Object[] oTwoComponents=rsds.next();
        validateBubbleEntryData(oTwoComponents);
        Object value=oTwoComponents[0];
        Object size=oTwoComponents[1];
        if (dataType == IConstants.NUMERICAL) {
          bea[i]=new BubbleEntry(value,size);
        }
 else         if (dataType == IConstants.DATE_TIME) {
          bea[i]=new BubbleEntry(value == null ? null : value,size);
        }
 else {
          bea[i]=new BubbleEntry(value,size,i + 1);
        }
      }
    }
    if (ds == null) {
      ds=BubbleDataSetImpl.create(bea);
    }
 else {
      ds.setValues(bea);
    }
    ((DataSetImpl)ds).setIsBigNumber(isBigDecimal);
  }
 else {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ds,oResultSetDef},Messages.getResourceBundle(getULocale()));
  }
  return ds;
}","@Override public final DataSet populate(Object oResultSetDef,DataSet ds) throws ChartException {
  if (oResultSetDef instanceof IResultSetDataSet) {
    final IResultSetDataSet rsds=(IResultSetDataSet)oResultSetDef;
    final long lRowCount=rsds.getSize();
    if (lRowCount <= 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.ZERO_DATASET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    int dataType=rsds.getDataType(0);
    boolean isBigDecimal=false;
    int i=0;
    final BubbleEntry[] bea=new BubbleEntry[(int)lRowCount];
    Object[][] values=null;
    if (dataType == IConstants.NUMERICAL) {
      values=new Object[(int)lRowCount][2];
      while (rsds.hasNext()) {
        Object[] o=rsds.next();
        Object[] newO=new Object[2];
        newO[0]=o[0];
        newO[1]=o[1];
        values[i++]=newO;
        if (!isBigDecimal && NumberUtil.isBigDecimal(o[0]) || NumberUtil.isBigDecimal(o[1])) {
          isBigDecimal=true;
        }
      }
    }
    if (isBigDecimal) {
      i=0;
      for (      Object[] o : values) {
        validateBubbleEntryData(o);
        Object value=o[0];
        Object size=o[1];
        bea[i++]=new BubbleEntry(NumberUtil.asBigNumber((Number)value,null),NumberUtil.asBigNumber((Number)size,null));
      }
    }
 else {
      for (i=0; i < values.length; i++) {
        validateBubbleEntryData(values[i]);
        Object value=values[i][0];
        Object size=values[i][1];
        if (dataType == IConstants.NUMERICAL) {
          bea[i]=new BubbleEntry(value,size);
        }
 else         if (dataType == IConstants.DATE_TIME) {
          bea[i]=new BubbleEntry(value == null ? null : value,size);
        }
 else {
          bea[i]=new BubbleEntry(value,size,i + 1);
        }
      }
    }
    if (ds == null) {
      ds=BubbleDataSetImpl.create(bea);
    }
 else {
      ds.setValues(bea);
    }
    ((DataSetImpl)ds).setIsBigNumber(isBigDecimal);
  }
 else {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",new Object[]{ds,oResultSetDef},Messages.getResourceBundle(getULocale()));
  }
  return ds;
}",0.947175851817974
67620,"/** 
 * return the array of indexes, the DataDefinitions with these id could be computed with aggregation function. By default, all the indexes will be added to the array. And this method should be overridden for some special chart types, such as bubble, stock...
 * @param series
 * @return index array
 */
public int[] getDataDefIdsForGrouping(Series series){
  return new int[]{0,1};
}","/** 
 * return the array of indexes, the DataDefinitions with these id could be computed with aggregation function. By default, all the indexes will be added to the array. And this method should be overridden for some special chart types, such as bubble, stock...
 * @param series
 * @return index array
 */
@Override public int[] getDataDefIdsForGrouping(Series series){
  return new int[]{0,1};
}",0.9872773536895676
67621,"public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  BubbleEntry bde;
  CDateTime cMin=null;
  double dMin=Double.MAX_VALUE;
  BigNumber bnMin=null;
  for (int i=0; dsi.hasNext(); i++) {
    bde=(BubbleEntry)dsi.next();
    if (bde != null) {
      Object oValue=bde.getValue();
      if (NumberUtil.isBigNumber(oValue)) {
        BigNumber bnValue=(BigNumber)oValue;
        bnValue=bnValue.subtract((BigNumber)bde.getSizeNumber());
        if (i == 0) {
          bnMin=bnValue;
        }
 else {
          bnMin=bnMin.min(bnValue);
        }
      }
 else       if (oValue instanceof Number) {
        double dValue=((Number)oValue).doubleValue();
        if (i == 0) {
          dMin=dValue;
        }
 else {
          dMin=Math.min(dMin,dValue);
        }
      }
 else       if (oValue instanceof CDateTime) {
        CDateTime cValue=(CDateTime)oValue;
        if (i == 0) {
          cMin=cValue;
        }
 else {
          if (cValue.before(cMin)) {
            cMin=cValue;
          }
        }
      }
    }
  }
  if (cMin == null) {
    return bnMin != null ? bnMin : new Double(dMin);
  }
  return cMin;
}","@Override public Object getMinimum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  BubbleEntry bde;
  CDateTime cMin=null;
  double dMin=Double.MAX_VALUE;
  BigNumber bnMin=null;
  for (int i=0; dsi.hasNext(); i++) {
    bde=(BubbleEntry)dsi.next();
    if (bde != null) {
      Object oValue=bde.getValue();
      if (NumberUtil.isBigNumber(oValue)) {
        BigNumber bnValue=(BigNumber)oValue;
        bnValue=bnValue.subtract((BigNumber)bde.getSizeNumber());
        if (i == 0) {
          bnMin=bnValue;
        }
 else {
          bnMin=bnMin.min(bnValue);
        }
      }
 else       if (oValue instanceof Number) {
        double dValue=((Number)oValue).doubleValue();
        if (i == 0) {
          dMin=dValue;
        }
 else {
          dMin=Math.min(dMin,dValue);
        }
      }
 else       if (oValue instanceof CDateTime) {
        CDateTime cValue=(CDateTime)oValue;
        if (i == 0) {
          cMin=cValue;
        }
 else {
          if (cValue.before(cMin)) {
            cMin=cValue;
          }
        }
      }
    }
  }
  if (cMin == null) {
    return bnMin != null ? bnMin : new Double(dMin);
  }
  return cMin;
}",0.9967447916666666
67622,"public String toString(Object[] columnData) throws ChartException {
  if (columnData == null || columnData.length == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < columnData.length; i++) {
    if (columnData[i] == null) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if (columnData[i] instanceof Object[]) {
      buffer.append(toBubbleString((Object[])columnData[i]));
    }
    if (i < columnData.length - 1) {
      buffer.append(""String_Node_Str"");
    }
  }
  return buffer.toString();
}","@Override public String toString(Object[] columnData) throws ChartException {
  if (columnData == null || columnData.length == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  StringBuffer buffer=new StringBuffer();
  for (int i=0; i < columnData.length; i++) {
    if (columnData[i] == null) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
    }
    if (columnData[i] instanceof Object[]) {
      buffer.append(toBubbleString((Object[])columnData[i]));
    }
    if (i < columnData.length - 1) {
      buffer.append(""String_Node_Str"");
    }
  }
  return buffer.toString();
}",0.9935649935649936
67623,"public final DataSet fromString(String sDataSetRepresentation,DataSet ds) throws ChartException {
  if (sDataSetRepresentation == null) {
    return ds;
  }
  if (ds == null) {
    ds=BubbleDataSetImpl.create(null);
  }
  StringTokenizer strTokDataElement=new StringTokenizer(sDataSetRepresentation,""String_Node_Str"");
  StringTokenizer strTokComponents=null;
  String strDataElement=null;
  String strComponent=null;
  Vector<BubbleEntry> vData=new Vector<BubbleEntry>();
  int[] sizes=new int[]{3,5,4,6,4};
  int i=0;
  while (strTokDataElement.hasMoreTokens()) {
    strDataElement=strTokDataElement.nextToken().trim();
    strTokComponents=new StringTokenizer(strDataElement);
    if (strTokComponents.countTokens() == 1) {
      Object value=null;
      try {
        value=new Double(Double.parseDouble(strDataElement));
      }
 catch (      NumberFormatException ex) {
        SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
        try {
          value=new CDateTime(sdf.parse(strDataElement));
        }
 catch (        ParseException e) {
          value=null;
        }
      }
      vData.add(new BubbleEntry(value,Integer.valueOf(sizes[i++])));
      continue;
    }
    BubbleEntry entry=new BubbleEntry(Integer.valueOf(1),Integer.valueOf(1));
    while (strTokComponents.hasMoreTokens()) {
      strComponent=strTokComponents.nextToken().trim().toUpperCase();
      if (strComponent.startsWith(""String_Node_Str"")) {
        entry.setValue(strComponent.substring(1));
      }
 else       if (strComponent.startsWith(""String_Node_Str"")) {
        entry.setSize(Double.parseDouble(strComponent.substring(1)));
      }
    }
    vData.add(entry);
  }
  ds.setValues(vData);
  return ds;
}","@Override public final DataSet fromString(String sDataSetRepresentation,DataSet ds) throws ChartException {
  if (sDataSetRepresentation == null) {
    return ds;
  }
  if (ds == null) {
    ds=BubbleDataSetImpl.create(null);
  }
  StringTokenizer strTokDataElement=new StringTokenizer(sDataSetRepresentation,""String_Node_Str"");
  StringTokenizer strTokComponents=null;
  String strDataElement=null;
  String strComponent=null;
  Vector<BubbleEntry> vData=new Vector<BubbleEntry>();
  int[] sizes=new int[]{3,5,4,6,4};
  int i=0;
  while (strTokDataElement.hasMoreTokens()) {
    strDataElement=strTokDataElement.nextToken().trim();
    strTokComponents=new StringTokenizer(strDataElement);
    if (strTokComponents.countTokens() == 1) {
      Object value=null;
      try {
        value=new Double(Double.parseDouble(strDataElement));
      }
 catch (      NumberFormatException ex) {
        SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
        try {
          value=new CDateTime(sdf.parse(strDataElement));
        }
 catch (        ParseException e) {
          value=null;
        }
      }
      vData.add(new BubbleEntry(value,Integer.valueOf(sizes[i++])));
      continue;
    }
    BubbleEntry entry=new BubbleEntry(Integer.valueOf(1),Integer.valueOf(1));
    while (strTokComponents.hasMoreTokens()) {
      strComponent=strTokComponents.nextToken().trim().toUpperCase();
      if (strComponent.startsWith(""String_Node_Str"")) {
        entry.setValue(strComponent.substring(1));
      }
 else       if (strComponent.startsWith(""String_Node_Str"")) {
        entry.setSize(Double.parseDouble(strComponent.substring(1)));
      }
    }
    vData.add(entry);
  }
  ds.setValues(vData);
  return ds;
}",0.997093023255814
67624,"public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  BubbleEntry bde;
  CDateTime cMax=null;
  double dMax=-Double.MAX_VALUE;
  BigNumber bnMax=null;
  for (int i=0; dsi.hasNext(); i++) {
    bde=(BubbleEntry)dsi.next();
    if (bde != null) {
      Object oValue=bde.getValue();
      if (NumberUtil.isBigNumber(oValue)) {
        BigNumber bnValue=(BigNumber)oValue;
        bnValue=bnValue.add((BigNumber)bde.getSizeNumber());
        if (i == 0) {
          bnMax=bnValue;
        }
 else {
          bnMax=bnMax.max(bnValue);
        }
      }
 else       if (oValue instanceof Number) {
        double dValue=((Number)oValue).doubleValue();
        if (i == 0) {
          dMax=dValue;
        }
 else {
          dMax=Math.max(dMax,dValue);
        }
      }
 else       if (oValue instanceof CDateTime) {
        CDateTime cValue=(CDateTime)oValue;
        if (i == 0) {
          cMax=cValue;
        }
 else {
          if (cValue.after(cMax)) {
            cMax=cValue;
          }
        }
      }
    }
  }
  if (cMax == null) {
    return bnMax != null ? bnMax : new Double(dMax);
  }
  return cMax;
}","@Override public Object getMaximum(DataSet ds) throws ChartException {
  DataSetIterator dsi=null;
  try {
    dsi=new DataSetIterator(ds);
    dsi.reset();
  }
 catch (  IllegalArgumentException uiex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,uiex);
  }
  if (dsi.size() == 0) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.DATA_SET,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
  }
  BubbleEntry bde;
  CDateTime cMax=null;
  double dMax=-Double.MAX_VALUE;
  BigNumber bnMax=null;
  for (int i=0; dsi.hasNext(); i++) {
    bde=(BubbleEntry)dsi.next();
    if (bde != null) {
      Object oValue=bde.getValue();
      if (NumberUtil.isBigNumber(oValue)) {
        BigNumber bnValue=(BigNumber)oValue;
        bnValue=bnValue.add((BigNumber)bde.getSizeNumber());
        if (i == 0) {
          bnMax=bnValue;
        }
 else {
          bnMax=bnMax.max(bnValue);
        }
      }
 else       if (oValue instanceof Number) {
        double dValue=((Number)oValue).doubleValue();
        if (i == 0) {
          dMax=dValue;
        }
 else {
          dMax=Math.max(dMax,dValue);
        }
      }
 else       if (oValue instanceof CDateTime) {
        CDateTime cValue=(CDateTime)oValue;
        if (i == 0) {
          cMax=cValue;
        }
 else {
          if (cValue.after(cMax)) {
            cMax=cValue;
          }
        }
      }
    }
  }
  if (cMax == null) {
    return bnMax != null ? bnMax : new Double(dMax);
  }
  return cMax;
}",0.9967341606792944
67625,"/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          if (handle instanceof ReportDesignHandle) {
            ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
            ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,copiedReport);
            Thread.currentThread().setContextClassLoader(newContextLoader);
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            DataSetUIUtil.clearPropertyBindingMap(dsHandle,dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          try {
            DataSetUIUtil.resetPropertyBinding(dsHandle,dataSetBindingMap,dataSourceBindingMap);
          }
 catch (          SemanticException e) {
          }
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}","/** 
 * Show ProgressMonitorDialog
 */
private void updateResultsProcess(){
  needsUpdateUI=true;
  clearResultSetTable();
  IRunnableWithProgress runnable=new IRunnableWithProgress(){
    public void run(    IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
      monitor.beginTask(""String_Node_Str"",IProgressMonitor.UNKNOWN);
      if (resultSetTable != null && !resultSetTable.isDisposed()) {
        ClassLoader oldContextLoader=Thread.currentThread().getContextClassLoader();
        ClassLoader parentLoader=oldContextLoader;
        if (parentLoader == null)         parentLoader=this.getClass().getClassLoader();
        ModuleHandle handle;
        DataSetHandle dsHandle=((DataSetEditor)getContainer()).getHandle();
        handle=dsHandle.getModuleHandle();
        Map dataSetBindingMap=new HashMap();
        Map dataSourceBindingMap=new HashMap();
        try {
          if (handle instanceof ReportDesignHandle) {
            ReportDesignHandle copiedReport=(ReportDesignHandle)(handle.copy().getHandle(null));
            ClassLoader newContextLoader=DataSetProvider.getCustomScriptClassLoader(parentLoader,copiedReport);
            Thread.currentThread().setContextClassLoader(newContextLoader);
            EngineConfig ec=new EngineConfig();
            ec.getAppContext().put(EngineConstants.APPCONTEXT_CLASSLOADER_KEY,newContextLoader);
            ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
            clearProperyBindingMap(dataSetBindingMap,dataSourceBindingMap);
            DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copiedReport),copiedReport);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            engineTask.setAppContext(appContext);
            engineTask.run();
            DataRequestSession session=engineTask.getDataSession();
            session.getDataSessionContext().getAppContext().put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            IQueryResults resultSet=executeProcess(session,engineTask.getExecutionContext());
            populateRecords(resultSet);
            engineTask.close();
            engine.destroy();
            monitor.done();
          }
 else {
            DataSessionContext context;
            context=new DataSessionContext(DataSessionContext.MODE_DIRECT_PRESENTATION,((DataSetEditor)getContainer()).getHandle().getModuleHandle());
            DataRequestSession session=DataRequestSession.newSession(context);
            Map appContext=new HashMap();
            appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(((DataSetHandle)getContainer().getModel()).getRowFetchLimit()));
            appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,DTPUtil.getInstance().createResourceIdentifiers());
            if (context.getAppContext() != null) {
              appContext.putAll(context.getAppContext());
            }
            context.setAppContext(appContext);
            IQueryResults resultSet=executeProcess(session,null);
            populateRecords(resultSet);
            session.shutdown();
          }
        }
 catch (        BirtException e) {
          ExceptionHandler.handle(e);
        }
 finally {
          resetPropertyBinding(dataSetBindingMap,dataSourceBindingMap);
        }
        Thread.currentThread().setContextClassLoader(oldContextLoader);
      }
    }
  }
;
  try {
    new ProgressMonitorDialog(PlatformUI.getWorkbench().getDisplay().getActiveShell()){
      protected void cancelPressed(){
        super.cancelPressed();
        needsUpdateUI=false;
      }
    }
.run(true,true,runnable);
  }
 catch (  InvocationTargetException e) {
    ExceptionHandler.handle(e);
  }
catch (  InterruptedException e) {
    ExceptionHandler.handle(e);
  }
  updateResultSetTableUI();
}",0.9786666666666668
67626,"private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null || (background instanceof ColorDefinition && ((ColorDefinition)background).getTransparency() == 0)) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}","private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
 else {
          if (implicitProcessor.isHighContrast()) {
            ((Block)component).setBackground(goFactory.BLACK());
          }
 else {
            ((Block)component).setBackground(goFactory.WHITE());
          }
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}",0.9349577520141482
67627,"/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  block.setBackground(ColorDefinitionImpl.WHITE());
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(""String_Node_Str"");
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
}","/** 
 * Note: Manually written
 */
protected void initialize(){
  setVersion(VERSION);
  block=BlockImpl.create();
  TitleBlock tb=(TitleBlock)TitleBlockImpl.create();
  Plot pl=(Plot)PlotImpl.create();
  Legend lg=(Legend)LegendImpl.create();
  block.add(tb);
  block.add(pl);
  block.add(lg);
  Text txtChartTitle=tb.getLabel().getCaption();
  txtChartTitle.setValue(""String_Node_Str"");
  txtChartTitle.getFont().setSize(16);
  txtChartTitle.getFont().setBold(true);
  TextAlignment taTitle=TextAlignmentImpl.create();
  taTitle.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
  taTitle.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  txtChartTitle.getFont().setAlignment(taTitle);
  setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  setSeriesThickness(10);
  setInteractivity(InteractivityImpl.create());
  setEmptyMessage(newEmptyMessage());
  ChartModelHelper.instance().updateExtendedProperties(getExtendedProperties());
}",0.9735234215885948
67628,"private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}","private void showChart(Dimension dSize){
  Bounds bo=BoundsImpl.create(0,0,dSize.width,dSize.height);
  bo.scale(72d / idr.getDisplayServer().getDpiResolution());
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  Generator gr=Generator.instance();
  gr.setHighContrast(Display.getCurrent().getHighContrast());
  ChartAdapter.beginIgnoreNotifications();
  cm.clearSections(IConstants.RUN_TIME);
  cm.createSampleRuntimeSeries();
  ChartAdapter.endIgnoreNotifications();
  try {
    Chart cmRunTime=cm.copyInstance();
    removeScaleInfoForSample(cmRunTime);
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new BIRTDesignerMessageLookup(crii.getHandle()));
    rtc.setRightToLeft(crii.isLayoutDirectionRTL());
    rtc.setRightToLeftText(crii.getHandle().isDirectionRTL());
    rtc.setResourceFinder(crii);
    rtc.setExternalizer(crii);
    boolean bPlotChart=ChartCubeUtil.isPlotChart(crii.getHandle());
    if (bPlotChart) {
      rtc.setSharedScale(createSharedScaleFromSampleData());
    }
    gr.render(idr,gr.build(idr.getDisplayServer(),cmRunTime,bo,null,rtc,new ChartReportStyleProcessor(crii.getHandle(),true)));
  }
 catch (  ChartException gex) {
    showException(gc,gex);
  }
}",0.9746524938675388
67629,"public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(1,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    btnShowEmptyMsg=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnShowEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnShowEmptyMsg.setLayoutData(gd);
      btnShowEmptyMsg.setSelection(laEmptyMsg.isVisible());
      btnShowEmptyMsg.addListener(SWT.Selection,this);
    }
    Composite cmpEmptyText=new Composite(grpEmptyMsg,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.horizontalIndent=12;
      cmpEmptyText.setLayoutData(gd);
      cmpEmptyText.setLayout(new GridLayout(2,false));
    }
    lbTxtEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbTxtEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(cmpEmptyText,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.addListener(this);
    }
    lbFdcEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbFdcEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(cmpEmptyText,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.addListener(this);
    }
    updateEmptyMessageUIStates();
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      if (!cwa.isSetCoverage()) {
        spnValue=DEFAULT_COVERAGE;
      }
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  if (ChartUtil.hasMultipleYAxes(getChart())) {
    btnEnableStudy=new Button(cmpBasic,SWT.CHECK);
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnableStudy.setLayoutData(gridData);
    btnEnableStudy.setText(Messages.getString(""String_Node_Str""));
    btnEnableStudy.setSelection(((ChartWithAxes)getChart()).isStudyLayout());
    btnEnableStudy.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}","public void createControl(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.SUBTASK_CHART);
  init();
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(3,true);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=2;
    cmpBasic.setLayoutData(gd);
  }
  Composite cmp3D=new Composite(cmpContent,SWT.NONE);
{
    cmp3D.setLayout(new GridLayout());
    cmp3D.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Label lblBackground=new Label(cmpBasic,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  cmbBackground=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),getChart().getBlock().getBackground(),true,true,true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbBackground.setLayoutData(gridData);
    cmbBackground.addListener(this);
  }
  new Label(cmpBasic,SWT.NONE);
  if (hasWallAndFloor()) {
    Label lblWall=new Label(cmpBasic,SWT.NONE);
    lblWall.setLayoutData(new GridData());
    lblWall.setText(Messages.getString(""String_Node_Str""));
    fccWall=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getWallFill(),true,true,true,true);
    GridData gdFCCWall=new GridData(GridData.FILL_HORIZONTAL);
    fccWall.setLayoutData(gdFCCWall);
    fccWall.addListener(this);
    new Label(cmpBasic,SWT.NONE);
    Label lblFloor=new Label(cmpBasic,SWT.NONE);
    lblFloor.setLayoutData(new GridData());
    lblFloor.setText(Messages.getString(""String_Node_Str""));
    fccFloor=new FillChooserComposite(cmpBasic,SWT.NONE,getContext(),((ChartWithAxes)getChart()).getFloorFill(),true,true,true,true);
    GridData gdFCCFloor=new GridData(GridData.FILL_HORIZONTAL);
    fccFloor.setLayoutData(gdFCCFloor);
    fccFloor.addListener(this);
    new Label(cmpBasic,SWT.NONE);
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  cmbStyle=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    cmbStyle.setLayoutData(gridData);
    cmbStyle.addSelectionListener(this);
  }
  btnEnablePreview=new Button(cmpBasic,SWT.CHECK);
{
    btnEnablePreview.setText(Messages.getString(""String_Node_Str""));
    btnEnablePreview.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
    btnEnablePreview.addSelectionListener(this);
  }
  Group grpEmptyMsg=new Group(cmpBasic,SWT.NONE);
{
{
      grpEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=3;
      grpEmptyMsg.setLayoutData(gd);
      grpEmptyMsg.setLayout(new GridLayout(1,false));
    }
    org.eclipse.birt.chart.model.component.Label laEmptyMsg=getChart().getEmptyMessage();
    btnAutoHide=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnAutoHide.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnAutoHide.setLayoutData(gd);
      btnAutoHide.setSelection(!laEmptyMsg.isVisible());
      btnAutoHide.addListener(SWT.Selection,this);
    }
    btnShowEmptyMsg=new Button(grpEmptyMsg,SWT.RADIO);
{
      btnShowEmptyMsg.setText(Messages.getString(""String_Node_Str""));
      GridData gd=new GridData();
      btnShowEmptyMsg.setLayoutData(gd);
      btnShowEmptyMsg.setSelection(laEmptyMsg.isVisible());
      btnShowEmptyMsg.addListener(SWT.Selection,this);
    }
    Composite cmpEmptyText=new Composite(grpEmptyMsg,SWT.NONE);
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      gd.horizontalIndent=12;
      cmpEmptyText.setLayoutData(gd);
      cmpEmptyText.setLayout(new GridLayout(2,false));
    }
    lbTxtEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbTxtEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    List<String> keys=null;
    if (getContext().getUIServiceProvider() != null) {
      keys=getContext().getUIServiceProvider().getRegisteredKeys();
    }
    txtEmptyMsg=new ExternalizedTextEditorComposite(cmpEmptyText,SWT.BORDER,-1,-1,keys,getContext().getUIServiceProvider(),laEmptyMsg.getCaption().getValue());
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      txtEmptyMsg.setLayoutData(gd);
      txtEmptyMsg.addListener(this);
    }
    lbFdcEmptyMsg=new Label(cmpEmptyText,SWT.NONE);
    lbFdcEmptyMsg.setText(Messages.getString(""String_Node_Str""));
    fdcEmptyMsg=new FontDefinitionComposite(cmpEmptyText,SWT.NONE,getContext(),laEmptyMsg.getCaption().getFont(),laEmptyMsg.getCaption().getColor(),true);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.widthHint=200;
      gd.grabExcessVerticalSpace=false;
      fdcEmptyMsg.setLayoutData(gd);
      fdcEmptyMsg.addListener(this);
    }
    updateEmptyMessageUIStates();
  }
  if ((getChart() instanceof ChartWithAxes) && ChartUIUtil.is3DType(getChart())) {
    Group cmpRotation=new Group(cmp3D,SWT.NONE);
{
      GridLayout gl=new GridLayout();
      gl.marginTop=0;
      gl.verticalSpacing=0;
      cmpRotation.setLayout(gl);
      cmpRotation.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      cmpRotation.setText(Messages.getString(""String_Node_Str""));
    }
    xChooser=new AxisRotationChooser(ChartUIUtil.getAxisXForProcessing((ChartWithAxes)getChart()),AngleType.X);
    xChooser.placeComponents(cmpRotation);
    yChooser=new AxisRotationChooser(ChartUIUtil.getAxisYForProcessing((ChartWithAxes)getChart(),0),AngleType.Y);
    yChooser.placeComponents(cmpRotation);
    zChooser=new AxisRotationChooser(ChartUIUtil.getAxisZForProcessing((ChartWithAxes)getChart()),AngleType.Z);
    zChooser.placeComponents(cmpRotation);
    btnResetValue=new Button(cmpRotation,SWT.PUSH);
{
      btnResetValue.setText(Messages.getString(""String_Node_Str""));
      btnResetValue.setSelection(ChartPreviewPainterBase.isProcessorEnabled());
      btnResetValue.addSelectionListener(this);
    }
  }
 else   if (getChart() instanceof ChartWithoutAxes) {
    ChartWithoutAxes cwa=(ChartWithoutAxes)getChart();
    new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    Composite cmpCoverage=new Composite(cmpBasic,SWT.NONE);
{
      cmpCoverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      GridLayout layout=new GridLayout(2,false);
      layout.verticalSpacing=0;
      layout.marginHeight=0;
      layout.marginWidth=0;
      cmpCoverage.setLayout(layout);
    }
    spnCorverage=new Spinner(cmpCoverage,SWT.BORDER);
{
      int spnValue=(int)(cwa.getCoverage() * 100);
      if (!cwa.isSetCoverage()) {
        spnValue=DEFAULT_COVERAGE;
      }
      spnCorverage.setValues(spnValue,1,100,0,1,10);
      spnCorverage.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
      spnCorverage.setEnabled(cwa.isSetCoverage());
      spnCorverage.addSelectionListener(this);
    }
    new Label(cmpCoverage,SWT.NONE).setText(""String_Node_Str"");
    btnCoverageAuto=new Button(cmpBasic,SWT.CHECK);
    btnCoverageAuto.setText(Messages.getString(""String_Node_Str""));
    btnCoverageAuto.setSelection(!cwa.isSetCoverage());
    btnCoverageAuto.addSelectionListener(this);
  }
  btnEnable=new Button(cmpBasic,SWT.CHECK);
{
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnable.setLayoutData(gridData);
    btnEnable.setText(Messages.getString(""String_Node_Str""));
    btnEnable.setSelection(getChart().getInteractivity().isEnable());
    btnEnable.addSelectionListener(this);
  }
  if (ChartUtil.hasMultipleYAxes(getChart())) {
    btnEnableStudy=new Button(cmpBasic,SWT.CHECK);
    GridData gridData=new GridData();
    gridData.horizontalSpan=3;
    btnEnableStudy.setLayoutData(gridData);
    btnEnableStudy.setText(Messages.getString(""String_Node_Str""));
    btnEnableStudy.setSelection(((ChartWithAxes)getChart()).isStudyLayout());
    btnEnableStudy.addSelectionListener(this);
  }
  populateLists();
  createButtonGroup(cmpContent);
}",0.999385598427132
67630,"private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),(Chart)chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
    ChartWizard.removeException(ChartWizard.PreviewPainter_ID);
  }
 catch (  Exception ex) {
    buffer=oldBuffer;
    ChartWizard.showException(ChartWizard.PreviewPainter_ID,ex.getLocalizedMessage());
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}","private void updateBuffer(){
  if (bIsPainting) {
    return;
  }
  if (chart == null) {
    return;
  }
  if (isDisposedPreviewCanvas()) {
    return;
  }
  Rectangle re=preview.getClientArea();
  final Rectangle adjustedRe=new Rectangle(0,0,re.width,re.height);
  if (adjustedRe.width - 2 * X_OFFSET <= 0 || adjustedRe.height - 2 * Y_OFFSET <= 0) {
    if (buffer != null && !buffer.isDisposed()) {
      buffer.dispose();
      buffer=null;
    }
    return;
  }
  bIsPainting=true;
  Image oldBuffer=null;
  if (buffer == null) {
    buffer=new Image(Display.getDefault(),adjustedRe);
  }
 else {
    Rectangle ore=buffer.getBounds();
    oldBuffer=buffer;
    if (!adjustedRe.equals(ore)) {
      buffer=new Image(Display.getDefault(),adjustedRe);
    }
  }
  GC gc=new GC(buffer);
  gc.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_LIST_BACKGROUND));
  gc.fillRectangle(buffer.getBounds());
  final Bounds bo=BoundsImpl.create(X_OFFSET,Y_OFFSET,adjustedRe.width - 2 * X_OFFSET,adjustedRe.height - 2 * Y_OFFSET);
  IDeviceRenderer deviceRenderer=null;
  try {
    deviceRenderer=ChartEngine.instance().getRenderer(""String_Node_Str"");
    deviceRenderer.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
    bo.scale(72d / deviceRenderer.getDisplayServer().getDpiResolution());
    final Generator gr=Generator.instance();
    gr.setHighContrast(Display.getCurrent().getHighContrast());
    RunTimeContext rtc=new RunTimeContext();
    rtc.setScriptingEnabled(false);
    rtc.setMessageLookup(new ChartBuilderMessageLookup(this.wizardContext.getUIServiceProvider()));
    rtc.setRightToLeft(wizardContext.isRtL());
    rtc.setRightToLeftText(wizardContext.isTextRtL());
    rtc.setResourceFinder(wizardContext.getResourceFinder());
    rtc.setExternalizer(wizardContext.getExternalizer());
    gcs=gr.build(deviceRenderer.getDisplayServer(),(Chart)chart,bo,null,rtc,isProcessorEnabled() ? wizardContext.getProcessor() : null);
    gr.render(deviceRenderer,gcs);
    ChartWizard.removeException(ChartWizard.PreviewPainter_ID);
  }
 catch (  Exception ex) {
    buffer=oldBuffer;
    ChartWizard.showException(ChartWizard.PreviewPainter_ID,ex.getLocalizedMessage());
  }
 finally {
    gc.dispose();
    if (deviceRenderer != null) {
      deviceRenderer.dispose();
    }
  }
  if (oldBuffer != null && oldBuffer != buffer) {
    oldBuffer.dispose();
  }
  bIsPainting=false;
}",0.9864464210080476
67631,"private void doTestRollingLog(int logRollingSize,int maxBackupIndex,int expectLogNum) throws EngineException {
  EngineConfig config=new EngineConfig();
  String tmpPath=System.getProperty(""String_Node_Str"") + System.nanoTime();
  config.setLogConfig(tmpPath,Level.ALL);
  config.setLogRollingSize(logRollingSize);
  config.setLogMaxBackupIndex(maxBackupIndex);
  engine=createReportEngine(config);
  engine.changeLogLevel(Level.ALL);
  new File(""String_Node_Str"").mkdirs();
  copyResource(""String_Node_Str"",""String_Node_Str"");
  IReportRunnable runnable=engine.openReportDesign(""String_Node_Str"");
  IRunTask task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  engine.destroy();
  File tmpDir=new File(tmpPath);
  File[] logFiles=tmpDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File parent,    String name){
      return name.matches(""String_Node_Str"");
    }
  }
);
  int logFileNum=logFiles.length;
  for (  File f : logFiles) {
    f.delete();
  }
  tmpDir.delete();
  assertEquals(expectLogNum,logFileNum);
}","private void doTestRollingLog(int logRollingSize,int maxBackupIndex,int expectLogNum) throws EngineException {
  EngineConfig config=new EngineConfig();
  String tmpPath=System.getProperty(""String_Node_Str"") + System.nanoTime();
  config.setLogConfig(tmpPath,Level.ALL);
  config.setLogRollingSize(logRollingSize);
  config.setLogMaxBackupIndex(maxBackupIndex);
  engine=createReportEngine(config);
  engine.changeLogLevel(Level.ALL);
  new File(""String_Node_Str"").mkdirs();
  copyResource(""String_Node_Str"",""String_Node_Str"");
  IReportRunnable runnable=engine.openReportDesign(""String_Node_Str"");
  IRunTask task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  task=engine.createRunTask(runnable);
  task.setParameter(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  task.run(""String_Node_Str"");
  task.close();
  engine.destroy();
  File tmpDir=new File(tmpPath);
  File[] logFiles=tmpDir.listFiles(new FilenameFilter(){
    public boolean accept(    File parent,    String name){
      return name.matches(""String_Node_Str"");
    }
  }
);
  int logFileNum=logFiles.length;
  for (  File f : logFiles) {
    f.delete();
  }
  tmpDir.delete();
  assertEquals(expectLogNum,logFileNum);
}",0.996186117467582
67632,"@Override public boolean accept(File parent,String name){
  return name.matches(""String_Node_Str"");
}","public boolean accept(File parent,String name){
  return name.matches(""String_Node_Str"");
}",0.9479166666666666
67633,"public ISelectDataComponent getSeriesDataComponent(int seriesType,SeriesDefinition seriesDefn,ChartWizardContext context,String sTitle){
  if (seriesType == ISelectDataCustomizeUI.ORTHOGONAL_SERIES) {
    return new BaseDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_AGGREGATION,sTitle,seriesDefn,ChartUIUtil.getDataQuery(seriesDefn,0),context,sTitle);
  }
 else   if (seriesType == ISelectDataCustomizeUI.GROUPING_SERIES) {
    BaseDataDefinitionComponent ddc=new BaseDataDefinitionComponent(sTitle,seriesDefn,seriesDefn.getQuery(),context,sTitle);
    return ddc;
  }
  return new DefaultSelectDataComponent();
}","public ISelectDataComponent getSeriesDataComponent(int seriesType,SeriesDefinition seriesDefn,ChartWizardContext context,String sTitle){
  if (seriesType == ISelectDataCustomizeUI.ORTHOGONAL_SERIES) {
    return new BaseDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_AGGREGATION,sTitle,seriesDefn,ChartUIUtil.getDataQuery(seriesDefn,0),context,sTitle);
  }
 else   if (seriesType == ISelectDataCustomizeUI.GROUPING_SERIES) {
    BaseDataDefinitionComponent ddc=new YOptionalDataDefinitionComponent(BaseDataDefinitionComponent.BUTTON_GROUP,ChartUIConstants.QUERY_OPTIONAL,seriesDefn,seriesDefn.getQuery(),context,sTitle);
    return ddc;
  }
  return new DefaultSelectDataComponent();
}",0.9357520786092216
67634,"private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginLeft=fLeftSize.x;
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  getDataSheet().createDataSelector(dataComposite);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.widthHint=fRightSize.x;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
}","private void createDataArea(){
  fDataArea=new ScrolledComposite(foSashForm,SWT.VERTICAL);
{
    GridLayout gl=new GridLayout();
    fDataArea.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    fDataArea.setLayoutData(gd);
    fDataArea.setExpandHorizontal(true);
    fDataArea.setExpandVertical(true);
  }
  Composite dataComposite=new Composite(fDataArea,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginLeft=fLeftSize.x;
    dataComposite.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    dataComposite.setLayoutData(gd);
  }
  fDataArea.setContent(dataComposite);
  getDataSheet().createDataSelector(dataComposite);
  GridData gd=new GridData();
  gd.widthHint=fRightSize.x - 40;
  new Label(dataComposite,SWT.NONE).setLayoutData(gd);
  getDataSheet().createDataDragSource(dataComposite);
  getDataSheet().createActionButtons(dataComposite);
  new Label(dataComposite,SWT.NONE);
}",0.9848088004190676
67635,"public Object visitValue(TextTemplate.ValueNode node,Object value){
  Object result=null;
  if (values != null) {
    String keyExpr=node.getValue();
    if (keyExpr != null) {
      keyExpr=keyExpr.trim();
    }
    result=values.get(keyExpr);
  }
  String text=formatValue(node,result);
  buffer.append(text);
  return value;
}","public Object visitValue(TextTemplate.ValueNode node,Object value){
  String expression=node.getValue();
  if (expression != null) {
    expression=expression.trim();
    if (""String_Node_Str"".equals(expression) || ""String_Node_Str"".equals(expression)) {
      Object result=ExpressionUtil.evaluate(context,Expression.newScript(expression));
      String text=formatValue(node,result);
      buffer.append(text);
    }
 else {
      Object result=null;
      if (values != null) {
        String keyExpr=node.getValue();
        if (keyExpr != null) {
          keyExpr=keyExpr.trim();
        }
        result=values.get(keyExpr);
      }
      String text=formatValue(node,result);
      buffer.append(text);
    }
  }
  return value;
}",0.5941893158388004
67636,"private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
 else {
          if (implicitProcessor.isHighContrast()) {
            ((Block)component).setBackground(goFactory.BLACK());
          }
 else {
            ((Block)component).setBackground(goFactory.WHITE());
          }
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}","private void applyStyles(Chart model,StyledComponent type,EObject component,IStyleProcessor externalProcessor){
  if (component instanceof Block) {
    if (component.eContainer() instanceof Chart) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
      ColorDefinition newBackcolor=style.getBackgroundColor();
      Image newBackimage=style.getBackgroundImage();
      Fill background=((Block)component).getBackground();
      if (background == null) {
        if (newBackcolor != null) {
          ((Block)component).setBackground(newBackcolor);
        }
 else {
          if (implicitProcessor.isHighContrast()) {
            ((Block)component).setBackground(goFactory.BLACK());
          }
 else {
            ((Block)component).setBackground(goFactory.WHITE());
          }
        }
        if (newBackimage != null) {
          ((Block)component).setBackground(newBackimage);
        }
      }
      Insets ins=((Block)component).getInsets();
      Insets padding=style.getPadding();
      if (padding != null) {
        if (ins == null) {
          ins=goFactory.createInsets(0,0,0,0);
          ((Block)component).setInsets(ins);
          ins.setTop(padding.getTop());
          ins.setLeft(padding.getLeft());
          ins.setBottom(padding.getBottom());
          ins.setRight(padding.getRight());
        }
      }
    }
  }
 else   if (component instanceof Text) {
    IStyle style=getMingledStyle(model,type,externalProcessor);
    Text text=(Text)component;
    if (text.getFont() == null) {
      text.setFont(style.getFont());
    }
 else {
      FontDefinition newFont=style.getFont();
      FontDefinition font=text.getFont();
      ChartUtil.mergeFont(font,newFont);
    }
    if (text.getColor() == null) {
      text.setColor(style.getColor());
    }
  }
 else   if (component instanceof LineAttributes) {
    if (component.eContainer() instanceof Axis || component.eContainer() instanceof Series) {
      LineAttributes lia=(LineAttributes)component;
      if (lia.getColor() == null) {
        IStyle style=getMingledStyle(model,type,externalProcessor);
        lia.setColor(style.getColor());
      }
    }
  }
 else   if (component instanceof Axis) {
    Axis axis=(Axis)component;
    if (axis.getFormatSpecifier() == null) {
      IStyle style=getMingledStyle(model,type,externalProcessor);
switch (axis.getType()) {
case DATE_TIME_LITERAL:
        axis.setFormatSpecifier(style.getDateTimeFormat());
      break;
case LINEAR_LITERAL:
case LOGARITHMIC_LITERAL:
    axis.setFormatSpecifier(style.getNumberFormat());
  break;
case TEXT_LITERAL:
axis.setFormatSpecifier(style.getStringFormat());
break;
}
}
}
}",0.9916445119635396
67637,"protected final void initialize(){
  super.initialize();
  setExplosion(20);
  setLabelPosition(Position.OUTSIDE_LITERAL);
  setLeaderLineAttributes(LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,1));
  setLeaderLineLength(40);
  setLeaderLineStyle(LeaderLineStyle.STRETCH_TO_SIDE_LITERAL);
  getLabel().setVisible(true);
  final Label la=LabelImpl.create();
  la.getCaption().getFont().setSize(16);
  la.getCaption().getFont().setBold(true);
  setTitle(la);
  setTitlePosition(Position.BELOW_LITERAL);
}","protected final void initialize(){
  super.initialize();
  setExplosion(20);
  setLabelPosition(Position.OUTSIDE_LITERAL);
  setLeaderLineAttributes(LineAttributesImpl.create(null,LineStyle.SOLID_LITERAL,1));
  setLeaderLineLength(40);
  setLeaderLineStyle(LeaderLineStyle.STRETCH_TO_SIDE_LITERAL);
  getLabel().setVisible(true);
  final Label la=LabelImpl.create();
  la.getCaption().getFont().setSize(16);
  la.getCaption().getFont().setBold(true);
  setTitle(la);
  setTitlePosition(Position.BELOW_LITERAL);
}",0.9703915950334288
67638,"protected final void initialize(){
  super.initialize();
  setLabelPosition(Position.ABOVE_LITERAL);
  final LineAttributes lia=LineAttributesImpl.create(ColorDefinitionImpl.BLACK(),LineStyle.SOLID_LITERAL,0);
  lia.setVisible(true);
  setLineAttributes(lia);
}","protected final void initialize(){
  super.initialize();
  setLabelPosition(Position.ABOVE_LITERAL);
  final LineAttributes lia=LineAttributesImpl.create(null,LineStyle.SOLID_LITERAL,0);
  lia.setVisible(true);
  setLineAttributes(lia);
}",0.937875751503006
67639,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,this.laCurrent.getColor());
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER| FillChooserComposite.ENABLE_AUTO;
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,this.laCurrent.getColor());
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}",0.9943596549435966
67640,"public BIRTCubeResultSetEvaluator(ICubeQueryResults qr){
  this.rs=null;
  this.qr=qr;
}","public BIRTCubeResultSetEvaluator(ICubeQueryResults qr) throws BirtException {
  this.rs=null;
  this.qr=qr;
  try {
    initCubeCursor();
  }
 catch (  OLAPException e) {
    logger.log(e);
  }
}",0.6197183098591549
67641,"/** 
 * Constructor.
 * @param qr
 * @param queryDefinition
 * @param cm
 */
public SharedCubeResultSetEvaluator(ICubeQueryResults qr,IBaseCubeQueryDefinition queryDefinition,Chart cm){
  super(qr);
  parseLevelIndex(queryDefinition,cm);
}","/** 
 * Constructor.
 * @param qr
 * @param queryDefinition
 * @param cm
 */
public SharedCubeResultSetEvaluator(ICubeQueryResults qr,IBaseCubeQueryDefinition queryDefinition,Chart cm) throws BirtException {
  super(qr);
  parseLevelIndex(queryDefinition,cm);
}",0.956
67642,"public ImageData(IImageContent image,int imageWidth,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,byte[] imageData,int imageWidth,int imageHeight,int styleId,int datatype,XlsContainer currentContainer){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=imageHeight / 1000;
  this.imageHeight=(int)height;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageData;
  rowSpanInDesign=0;
}",0.720616570327553
67643,"private SheetData createImageData(IImageContent image,int imageWidth,StyleEntry entry,XlsContainer container,int imageHeightDpi,int imageWidhtDpi){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,imageWidth,entry,container,type,imageInfo,imageHeightDpi,imageWidhtDpi);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,byte[] imageData,int imageWidth,int imageHeight,StyleEntry entry,XlsContainer container){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  if (imageData != null) {
    return createData(image,imageData,imageWidth,imageHeight,entry,container,type);
  }
 else {
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}",0.744621141253508
67644,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getWidth() == null) {
      imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    }
 else {
      imageWidthDpi=reportDpi;
    }
    if (image.getHeight() == null) {
      imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
    }
 else {
      imageHeightDpi=reportDpi;
    }
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,imageSize.getWidth(),entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  int imageWidthDpi=reportDpi;
  int imageHeightDpi=reportDpi;
  int imageHeight;
  int imageWidth;
  byte[] imageData=null;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    imageData=imageInfo.getData();
    int[] imageSize=getImageSize(image,imageInfo,parentSizeInfo,imageWidthDpi,imageHeightDpi);
    imageHeight=imageSize[0];
    imageWidth=imageSize[1];
  }
 catch (  IOException ex) {
    imageHeight=LayoutUtil.getImageHeight(image.getHeight(),0,imageHeightDpi);
    imageWidth=LayoutUtil.getImageWidth(image.getWidth(),parentSizeInfo.getWidth(),0,imageWidthDpi);
  }
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(imageWidth);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,imageData,imageSize.getWidth(),imageHeight,entry,container);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}",0.2535123321885732
67645,"public static ColumnsInfo createImage(IImageContent image,int width,int imageWidthDpi){
  width=getImageWidth(image,width,imageWidthDpi);
  int[] column=new int[]{width};
  return new ColumnsInfo(column);
}","public static ColumnsInfo createImage(int width){
  int[] column=new int[]{width};
  return new ColumnsInfo(column);
}",0.7283950617283951
67646,"public static int getImageWidth(IImageContent image,int width,int imageWidthDpi){
  int dpi=imageWidthDpi;
  DimensionType value=image.getWidth();
  if (value != null) {
    width=getElementWidth(value,width,dpi);
  }
 else {
    try {
      Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
      width=(int)(imageInfo.getWidth() * ExcelUtil.INCH_PT / dpi * 1000);
    }
 catch (    IOException e1) {
      log.log(Level.WARNING,e1.getLocalizedMessage());
    }
  }
  return width;
}","public static int getImageWidth(DimensionType value,int parentWidth,int imageInfoWidth,int dpi){
  int width;
  if (value != null) {
    width=getElementWidth(value,parentWidth,dpi);
  }
 else {
    width=(int)(imageInfoWidth * ExcelUtil.INCH_PT / dpi);
  }
  return width;
}",0.4215568862275449
67647,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  double height=WordUtil.convertImageSize(image.getHeight(),0,reportDpi);
  double width=WordUtil.convertImageSize(image.getWidth(),0,reportDpi);
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getHeight() == null) {
      height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight(),PropertyUtil.getImageDpi(image,imageFileHeightDpi,0));
    }
    if (image.getWidth() == null) {
      width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth(),PropertyUtil.getImageDpi(image,imageFileWidthDpi,0));
    }
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
  }
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  double height=WordUtil.convertImageSize(image.getHeight(),0,reportDpi);
  int parentWidth=(int)(WordUtil.twipToPt(context.getCurrentWidth()) * reportDpi / 72);
  double width=WordUtil.convertImageSize(image.getWidth(),parentWidth,reportDpi);
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getHeight() == null && image.getWidth() == null) {
      height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight(),PropertyUtil.getImageDpi(image,imageFileHeightDpi,0));
      width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth(),PropertyUtil.getImageDpi(image,imageFileWidthDpi,0));
    }
 else     if (image.getWidth() == null) {
      float scale=((float)imageInfo.getHeight()) / ((float)imageInfo.getWidth());
      width=height / scale;
    }
 else     if (image.getHeight() == null) {
      float scale=((float)imageInfo.getHeight()) / ((float)imageInfo.getWidth());
      height=width * scale;
    }
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
  }
}",0.8465454545454546
67648,"public void testSave() throws IOException {
  ArchiveFile file=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  ArchiveEntry entry=file.createEntry(""String_Node_Str"");
  byte[] bytes=new byte[255];
  for (int i=0; i < 255; i++) {
    bytes[i]=(byte)i;
  }
  entry.write(0,bytes,0,255);
  file.save();
  copyFile(""String_Node_Str"",""String_Node_Str"");
  file.close();
  assertTrue(new File(""String_Node_Str"").exists());
  file=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  entry=file.openEntry(""String_Node_Str"");
  assertTrue(entry != null);
  entry.read(0,bytes,0,255);
  for (int i=0; i < 255; i++) {
    assertEquals(bytes[i],(byte)i);
  }
  entry.close();
  file.close();
  new File(""String_Node_Str"").delete();
  new File(""String_Node_Str"").delete();
}","public void testSave() throws IOException {
  ArchiveFile file=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  ArchiveEntry entry=file.createEntry(""String_Node_Str"");
  byte[] bytes=new byte[255];
  for (int i=0; i < 255; i++) {
    bytes[i]=(byte)i;
  }
  entry.write(0,bytes,0,255);
  file.save();
  file.close();
  copyFile(""String_Node_Str"",""String_Node_Str"");
  assertTrue(new File(""String_Node_Str"").exists());
  file=new ArchiveFile(""String_Node_Str"",""String_Node_Str"");
  entry=file.openEntry(""String_Node_Str"");
  assertTrue(entry != null);
  entry.read(0,bytes,0,255);
  for (int i=0; i < 255; i++) {
    assertEquals(bytes[i],(byte)i);
  }
  entry.close();
  file.close();
  new File(""String_Node_Str"").delete();
  new File(""String_Node_Str"").delete();
}",0.9793014230271668
67649,"/** 
 * Get the margin of the current element.
 * @param retValue The margin value of the current element.
 * @return The maring's new value of the current element.
 */
public Insets getMargin(Insets retValue){
  if (retValue == null) {
    retValue=new Insets();
  }
 else {
    retValue=new Insets(retValue);
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  Object prop=getHandle().getProperty(StyleHandle.MARGIN_TOP_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    px=DEUtil.convertToPixel(prop,fontSize);
  }
  double py=0;
  prop=getHandle().getProperty(StyleHandle.MARGIN_BOTTOM_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    py=DEUtil.convertToPixel(prop,fontSize);
  }
  retValue.top=(int)px;
  retValue.bottom=(int)py;
  px=py=0;
  prop=getHandle().getProperty(StyleHandle.MARGIN_LEFT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    px=DEUtil.convertToPixel(prop,fontSize);
  }
  prop=getHandle().getProperty(StyleHandle.MARGIN_RIGHT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    py=DEUtil.convertToPixel(prop,fontSize);
  }
  retValue.left=(int)px;
  retValue.right=(int)py;
  return retValue;
}","/** 
 * Get the margin of the current element.
 * @param retValue The margin value of the current element.
 * @return The maring's new value of the current element.
 */
public Insets getMargin(Insets retValue,Dimension size){
  if (retValue == null) {
    retValue=new Insets();
  }
 else {
    retValue=new Insets(retValue);
  }
  int fontSize=DEUtil.getFontSizeIntValue(getHandle());
  double px=0;
  Object prop=getHandle().getProperty(StyleHandle.MARGIN_TOP_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    px=DEUtil.convertToPixel(prop,fontSize);
  }
  double py=0;
  prop=getHandle().getProperty(StyleHandle.MARGIN_BOTTOM_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    py=DEUtil.convertToPixel(prop,fontSize);
  }
  retValue.top=(int)px;
  retValue.bottom=(int)py;
  px=py=0;
  prop=getHandle().getProperty(StyleHandle.MARGIN_LEFT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    if (isPercentageValue(prop) && size.width > 0) {
      px=getMeasure(prop) * size.width / 100;
    }
 else {
      px=DEUtil.convertToPixel(prop,fontSize);
    }
  }
  prop=getHandle().getProperty(StyleHandle.MARGIN_RIGHT_PROP);
  if (!DesignChoiceConstants.MARGIN_AUTO.equals(prop)) {
    if (isPercentageValue(prop) && size.width > 0) {
      py=getMeasure(prop) * size.width / 100;
    }
 else {
      py=DEUtil.convertToPixel(prop,fontSize);
    }
  }
  retValue.left=(int)px;
  retValue.right=(int)py;
  return retValue;
}",0.9043542984741348
67650,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (isDelete()) {
    return;
  }
  EditPart parent=getParent();
  while (parent != null) {
    if (parent instanceof RootEditPart) {
      break;
    }
    parent=parent.getParent();
  }
  if (parent == null) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (isDelete()) {
    return;
  }
  EditPart parent=getParent();
  while (parent != null) {
    if (parent instanceof RootEditPart) {
      break;
    }
    parent=parent.getParent();
  }
  if (parent == null) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (isPercentageValue(handle.getProperty(StyleHandle.MARGIN_LEFT_PROP))) {
    needRefresh=true;
  }
  if (isPercentageValue(handle.getProperty(StyleHandle.MARGIN_RIGHT_PROP))) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.8733011836913634
67651,"/** 
 * Refresh Margin property for this element.
 */
protected void refreshMargin(){
  if (getFigure() instanceof IReportElementFigure) {
    ((IReportElementFigure)getFigure()).setMargin(getModelAdapter().getMargin(null));
  }
}","/** 
 * Refresh Margin property for this element.
 */
protected void refreshMargin(){
  if (getFigure() instanceof IReportElementFigure) {
    if (isFixLayout() && getFigure().getParent() != null) {
      ((IReportElementFigure)getFigure()).setMargin(getModelAdapter().getMargin(null,getFigure().getParent().getClientArea().getSize()));
    }
 else {
      ((IReportElementFigure)getFigure()).setMargin(getModelAdapter().getMargin(null));
    }
  }
}",0.6764705882352942
67652,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (isDelete()) {
        return;
      }
      EditPart parent=getParent();
      while (parent != null) {
        if (parent instanceof RootEditPart) {
          break;
        }
        parent=parent.getParent();
      }
      if (parent == null) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (isDelete()) {
        return;
      }
      EditPart parent=getParent();
      while (parent != null) {
        if (parent instanceof RootEditPart) {
          break;
        }
        parent=parent.getParent();
      }
      if (parent == null) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (isPercentageValue(handle.getProperty(StyleHandle.MARGIN_LEFT_PROP))) {
        needRefresh=true;
      }
      if (isPercentageValue(handle.getProperty(StyleHandle.MARGIN_RIGHT_PROP))) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9405711345510676
67653,"/** 
 * Returns a brighter fill.
 * @param fill
 * @return brighter color or image
 */
public static Fill getBrighterFill(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.brighter((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.createGradient(goFactory.brighter(cdStart),goFactory.brighter(cdEnd));
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=(ColorDefinition)fills.get(0);
    ColorDefinition cd1=(ColorDefinition)fills.get(1);
    MultipleFill newFill=MultipleFillImpl.create();
    newFill.getFills().add(goFactory.brighter(cd0));
    newFill.getFills().add(goFactory.brighter(cd1));
    return newFill;
  }
  if (fill instanceof Image) {
    return fill;
  }
  return fill;
}","/** 
 * Returns a brighter fill.
 * @param fill
 * @return brighter color or image
 */
public static Fill getBrighterFill(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.brighter((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.createGradient(goFactory.brighter(cdStart),goFactory.brighter(cdEnd));
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    MultipleFill newFill=MultipleFillImpl.create();
    for (    Fill fill_i : fills) {
      newFill.getFills().add(getBrighterFill(fill_i));
    }
    return newFill;
  }
  if (fill instanceof Image) {
    return fill.copyInstance();
  }
  return fill;
}",0.855039637599094
67654,"/** 
 * Returns a color from various Fill.
 * @param fill
 * @param bSelBrighter , true if brighter color will be selected.
 * @return color
 * @since 2.5.1
 */
public static ColorDefinition getColor(Fill fill,boolean bSelBrighter){
  if (fill instanceof ColorDefinition) {
    return goFactory.copyOf(((ColorDefinition)fill));
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.copyOf(getSortedColors(bSelBrighter,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(192,192,192);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cdStart=(ColorDefinition)fills.get(0);
    ColorDefinition cdEnd=(ColorDefinition)fills.get(fills.size() - 1);
    return goFactory.copyOf(getSortedColors(bSelBrighter,cdStart,cdEnd));
  }
  return null;
}","/** 
 * Returns a color from various Fill.
 * @param fill
 * @param bSelBrighter , true if brighter color will be selected.
 * @return color
 * @since 2.5.1
 */
public static ColorDefinition getColor(Fill fill,boolean bSelBrighter){
  if (fill instanceof ColorDefinition) {
    return goFactory.copyOf(((ColorDefinition)fill));
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.copyOf(getSortedColors(bSelBrighter,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(192,192,192);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cdStart=getColor(fills.get(0));
    ColorDefinition cdEnd=getColor(fills.get(fills.size() - 1));
    return goFactory.copyOf(getSortedColors(bSelBrighter,cdStart,cdEnd));
  }
  return null;
}",0.953416149068323
67655,"public static Fill changeBrightness(Fill fill,double brightness){
  if (fill instanceof ColorDefinition) {
    ColorDefinition new_fill=goFactory.copyOf((ColorDefinition)fill);
    applyBrightness(new_fill,brightness);
    return new_fill;
  }
 else {
    return fill;
  }
}","public static Fill changeBrightness(Fill fill,double brightness){
  if (fill instanceof ColorDefinition) {
    ColorDefinition new_fill=goFactory.copyOf((ColorDefinition)fill);
    applyBrightness(new_fill,brightness);
    return new_fill;
  }
  return fill;
}",0.9213483146067416
67656,"public static Fill convertFillToGradient3D(Fill fill,boolean bTransposed){
  if (fill instanceof ColorDefinition) {
    Gradient gradient=AttributeFactory.eINSTANCE.createGradient();
    ColorDefinition newStartColor=(ColorDefinition)changeBrightness(fill,0.95);
    gradient.setStartColor(newStartColor);
    ColorDefinition newColor=(ColorDefinition)changeBrightness(fill,0.65);
    gradient.setEndColor(newColor);
    return gradient;
  }
 else {
    return convertFillToGradient(fill,bTransposed);
  }
}","public static Fill convertFillToGradient3D(Fill fill,boolean bTransposed){
  if (fill instanceof ColorDefinition) {
    Gradient gradient=AttributeFactory.eINSTANCE.createGradient();
    ColorDefinition newStartColor=(ColorDefinition)changeBrightness(fill,0.95);
    gradient.setStartColor(newStartColor);
    ColorDefinition newColor=(ColorDefinition)changeBrightness(fill,0.65);
    gradient.setEndColor(newColor);
    return gradient;
  }
  return convertFillToGradient(fill,bTransposed);
}",0.986
67657,"/** 
 * Returns a darker color.
 * @param fill
 * @return darker color
 */
public static ColorDefinition getDarkerColor(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.darker((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.darker(getSortedColors(false,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(128,128,128);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=(ColorDefinition)fills.get(0);
    ColorDefinition cd1=(ColorDefinition)fills.get(1);
    return goFactory.darker(getSortedColors(false,cd0,cd1));
  }
  return null;
}","/** 
 * Returns a darker color.
 * @param fill
 * @return darker color
 */
public static ColorDefinition getDarkerColor(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.darker((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.darker(getSortedColors(false,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(128,128,128);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=getColor(fills.get(0));
    ColorDefinition cd1=getColor(fills.get(1));
    return goFactory.darker(getSortedColors(false,cd0,cd1));
  }
  return null;
}",0.9671532846715328
67658,"/** 
 * Returns a brighter color.
 * @param fill
 * @return brighter color
 */
public static ColorDefinition getBrighterColor(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.brighter(((ColorDefinition)fill));
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.brighter(getSortedColors(true,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(192,192,192);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=(ColorDefinition)fills.get(0);
    ColorDefinition cd1=(ColorDefinition)fills.get(1);
    return goFactory.brighter(getSortedColors(true,cd0,cd1));
  }
  return null;
}","/** 
 * Returns a brighter color.
 * @param fill
 * @return brighter color
 */
public static ColorDefinition getBrighterColor(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.brighter(((ColorDefinition)fill));
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.brighter(getSortedColors(true,cdStart,cdEnd));
  }
  if (fill instanceof Image) {
    return goFactory.createColorDefinition(192,192,192);
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=getColor(fills.get(0));
    ColorDefinition cd1=getColor(fills.get(1));
    return goFactory.brighter(getSortedColors(true,cd0,cd1));
  }
  return null;
}",0.9676258992805756
67659,"/** 
 * Returns a darker fill.
 * @param fill
 * @return darker color or image
 */
public static Fill getDarkerFill(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.darker((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.createGradient(goFactory.darker(cdStart),goFactory.darker(cdEnd));
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    ColorDefinition cd0=(ColorDefinition)fills.get(0);
    ColorDefinition cd1=(ColorDefinition)fills.get(1);
    MultipleFill newFill=MultipleFillImpl.create();
    newFill.getFills().add(goFactory.darker(cd0));
    newFill.getFills().add(goFactory.darker(cd1));
    return newFill;
  }
  if (fill instanceof Image) {
    return fill;
  }
  return fill;
}","/** 
 * Returns a darker fill.
 * @param fill
 * @return darker color or image
 */
public static Fill getDarkerFill(Fill fill){
  if (fill instanceof ColorDefinition) {
    return goFactory.darker((ColorDefinition)fill);
  }
  if (fill instanceof Gradient) {
    ColorDefinition cdStart=((Gradient)fill).getStartColor();
    ColorDefinition cdEnd=((Gradient)fill).getEndColor();
    return goFactory.createGradient(goFactory.darker(cdStart),goFactory.darker(cdEnd));
  }
  if (fill instanceof MultipleFill) {
    List<Fill> fills=((MultipleFill)fill).getFills();
    MultipleFill newFill=MultipleFillImpl.create();
    for (    Fill fill_i : fills) {
      newFill.getFills().add(getDarkerFill(fill_i));
    }
    return newFill;
  }
  if (fill instanceof Image) {
    return fill.copyInstance();
  }
  return fill;
}",0.8536866359447005
67660,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}",0.9994353472614342
67661,"/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,null);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    int resolutionX=image.getPhysicalWidthDpi();
    int resolutionY=image.getPhysicalHeightDpi();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    imageWidth=image.getWidth() / resolutionX * 72;
    imageHeight=image.getHeight() / resolutionY * 72;
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}","/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,null);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    int resolutionX=image.getPhysicalWidthDpi();
    int resolutionY=image.getPhysicalHeightDpi();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    imageWidth=((float)image.getWidth()) / resolutionX * 72;
    imageHeight=((float)image.getHeight()) / resolutionY * 72;
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}",0.9965543644716692
67662,"private void preview(String uri){
  try {
    previewCanvas.loadImage(new URL(uri));
  }
 catch (  Exception e) {
    logger.log(e);
  }
}","private void preview(String uri){
  previewCanvas.update(uri);
}",0.594059405940594
67663,"private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  if (!complete) {
    previewCanvas.clear();
  }
  browseButton.setVisible(embedded.getSelection());
}","private void updateButtons(){
  boolean complete=uriEditor.getText() != null && uriEditor.getText().trim().length() > 0;
  URL url=null;
  try {
    url=new URL(removeQuote(uriEditor.getText().trim()));
    if (selectedType == EMBEDDED_TYPE) {
      File file=new File(url.getPath());
      complete=file.exists() && file.isAbsolute();
    }
  }
 catch (  Exception e) {
    complete=false;
  }
  previewButton.setEnabled(complete);
  getButton(IDialogConstants.OK_ID).setEnabled(complete);
  if (!complete) {
  }
  browseButton.setVisible(embedded.getSelection());
}",0.8854435831180018
67664,"private void createPreviewArea(Composite composite){
  Composite previewArea=new Composite(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=250;
  gd.heightHint=300;
  previewArea.setLayoutData(gd);
  previewArea.setLayout(new FillLayout());
  previewCanvas=new IconCanvas(previewArea);
}","private void createPreviewArea(Composite composite){
  Composite previewArea=new Composite(composite,SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_BOTH);
  gd.widthHint=250;
  gd.heightHint=300;
  previewArea.setLayoutData(gd);
  previewArea.setLayout(new FillLayout());
  previewCanvas=new ImageCanvas(previewArea);
}",0.989247311827957
67665,"protected boolean initDialog(){
  getShell().setText(Messages.getString(""String_Node_Str""));
  initURIEditor();
  if (fCurrent instanceof EmbeddedImage) {
    embedded.setSelection(true);
    selectedType=EMBEDDED_TYPE;
  }
 else {
    uri.setSelection(true);
    selectedType=URI_TYPE;
  }
  if (selectedType == EMBEDDED_TYPE) {
    title.setText(Messages.getString(""String_Node_Str""));
  }
 else {
    title.setText(Messages.getString(""String_Node_Str""));
  }
  getButton(IDialogConstants.OK_ID).setEnabled(false);
  browseButton.setVisible(embedded.getSelection());
  return true;
}","protected boolean initDialog(){
  getShell().setText(Messages.getString(""String_Node_Str""));
  initURIEditor();
  if (fCurrent instanceof EmbeddedImage) {
    embedded.setSelection(true);
    selectedType=EMBEDDED_TYPE;
  }
 else {
    uri.setSelection(true);
    selectedType=URI_TYPE;
  }
  if (selectedType == EMBEDDED_TYPE) {
    title.setText(Messages.getString(""String_Node_Str""));
  }
 else {
    title.setText(Messages.getString(""String_Node_Str""));
  }
  getButton(IDialogConstants.OK_ID).setEnabled(false);
  browseButton.setVisible(embedded.getSelection());
  initPreview();
  return true;
}",0.9856781802864364
67666,"private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (fCurrent instanceof Image && !(fCurrent instanceof PatternImage)) {
    uri=((Image)fCurrent).getURL();
    if (fCurrent instanceof EmbeddedImage) {
      imageData=((EmbeddedImage)fCurrent).getData();
    }
  }
  uriEditor.setText(uri);
  uriEditor.setFocus();
  clearPreview();
}","private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (fCurrent instanceof Image && !(fCurrent instanceof PatternImage)) {
    uri=((Image)fCurrent).getURL();
    if (fCurrent instanceof EmbeddedImage) {
      imageData=((EmbeddedImage)fCurrent).getData();
    }
  }
  uriEditor.setText(uri);
  uriEditor.setFocus();
}",0.973529411764706
67667,"public void shellClosed(ShellEvent e){
  clearColorSelection();
}","@Override public void shellClosed(ShellEvent e){
  clearColorSelection();
}",0.9285714285714286
67668,"/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=190;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  if (bPatternFillEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.widthHint=190;
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  if (bTransparencySliderEnable) {
    lblTransparency=new Label(cmpTransparency,SWT.NONE);
    GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
    gdLBLTransparency.horizontalIndent=2;
    lblTransparency.setLayoutData(gdLBLTransparency);
    lblTransparency.setText(Messages.getString(""String_Node_Str""));
    srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
    GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    gdTransparent.horizontalSpan=2;
    srTransparency.setLayoutData(gdTransparent);
    if (fCurrent == null) {
      srTransparency.setValues(0,0,256,1,1,10);
      srTransparency.setEnabled(false);
    }
 else {
      int iValue=0;
      if (fCurrent instanceof ColorDefinition) {
        iValue=((ColorDefinition)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else       if (fCurrent instanceof Gradient) {
        iValue=((Gradient)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else {
        srTransparency.setEnabled(false);
      }
    }
    lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(srTransparency.getSelection())}));
    srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
    srTransparency.addSelectionListener(this);
    srTransparency.addListener(SWT.FocusOut,this);
    srTransparency.addListener(SWT.KeyDown,this);
    srTransparency.addListener(SWT.Traverse,this);
  }
  final int BUTTON_HEIGHTHINT=28;
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=BUTTON_HEIGHTHINT;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=BUTTON_HEIGHTHINT;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=BUTTON_HEIGHTHINT;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=BUTTON_HEIGHTHINT;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  if (bPatternFillEnabled) {
    btnPatternFill=new Button(cmpButtons,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=BUTTON_HEIGHTHINT;
    gd.horizontalSpan=2;
    btnPatternFill.setLayoutData(gd);
    btnPatternFill.setText(Messages.getString(""String_Node_Str""));
    btnPatternFill.addSelectionListener(this);
    btnPatternFill.addListener(SWT.FocusOut,this);
    btnPatternFill.addListener(SWT.KeyDown,this);
    btnPatternFill.addListener(SWT.Traverse,this);
  }
  shell.pack();
  shell.layout();
  shell.open();
}","/** 
 */
private void createDropDownComponent(int iXLoc,int iYLoc){
  if (!bEnabled) {
    return;
  }
  int iShellHeight=170;
  int iShellWidth=190;
  if (bGradientEnabled) {
    iShellHeight+=30;
  }
  if (bImageEnabled) {
    iShellHeight+=30;
  }
  if (bAutoEnabled) {
    iShellHeight+=30;
  }
  if (bTransparentEnabled) {
    iShellHeight+=30;
  }
  if (bPositiveNegativeEnabled) {
    iShellHeight+=30;
  }
  if (bPatternFillEnabled) {
    iShellHeight+=30;
  }
  Shell shell=new Shell(this.getShell(),SWT.NO_FOCUS);
  shell.setLayout(new FillLayout());
  shell.setSize(iShellWidth,iShellHeight);
  if ((getStyle() & SWT.RIGHT_TO_LEFT) != 0) {
    iXLoc-=iShellWidth;
  }
  shell.setLocation(iXLoc,iYLoc);
  shell.addShellListener(new ShellAdapter(){
    @Override public void shellClosed(    ShellEvent e){
      clearColorSelection();
    }
  }
);
  cmpDropDown=new Composite(shell,SWT.NO_FOCUS);
  GridLayout glDropDown=new GridLayout();
  glDropDown.marginHeight=2;
  glDropDown.marginWidth=2;
  glDropDown.horizontalSpacing=1;
  glDropDown.verticalSpacing=4;
  cmpDropDown.setLayout(glDropDown);
  if (colorArray == null) {
    colorArray=createColorMap(getDisplay());
  }
  ColorSelectionCanvas cnv=new ColorSelectionCanvas(cmpDropDown,SWT.BORDER,colorArray);
  GridData gdCnv=new GridData(GridData.FILL_BOTH);
  gdCnv.widthHint=190;
  gdCnv.heightHint=110;
  cnv.setLayoutData(gdCnv);
  cnv.addListener(SWT.Traverse,this);
  cnv.addListener(SWT.FocusOut,this);
  if (this.fCurrent instanceof ColorDefinition) {
    cnv.setColor(new Color(this.getDisplay(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue()));
  }
  cmpButtons=new Composite(cmpDropDown,SWT.NO_FOCUS);
  GridLayout glButtons=new GridLayout();
  glButtons.marginHeight=3;
  glButtons.marginWidth=4;
  glButtons.horizontalSpacing=1;
  glButtons.verticalSpacing=4;
  glButtons.numColumns=2;
  cmpButtons.setLayout(glButtons);
  GridData gdButtons=new GridData(GridData.FILL_HORIZONTAL);
  cmpButtons.setLayoutData(gdButtons);
  GridLayout glTransparency=new GridLayout();
  glTransparency.numColumns=1;
  glTransparency.horizontalSpacing=5;
  glTransparency.verticalSpacing=3;
  glTransparency.marginHeight=4;
  glTransparency.marginWidth=0;
  Composite cmpTransparency=new Composite(cmpButtons,SWT.NONE | SWT.NO_FOCUS);
  GridData gdTransparency=new GridData(GridData.FILL_BOTH);
  gdTransparency.horizontalSpan=2;
  cmpTransparency.setLayoutData(gdTransparency);
  cmpTransparency.setLayout(glTransparency);
  if (bTransparencySliderEnable) {
    lblTransparency=new Label(cmpTransparency,SWT.NONE);
    GridData gdLBLTransparency=new GridData(GridData.FILL_HORIZONTAL);
    gdLBLTransparency.horizontalIndent=2;
    lblTransparency.setLayoutData(gdLBLTransparency);
    lblTransparency.setText(Messages.getString(""String_Node_Str""));
    srTransparency=new Slider(cmpTransparency,SWT.HORIZONTAL | SWT.NO_FOCUS);
    GridData gdTransparent=new GridData(GridData.VERTICAL_ALIGN_BEGINNING | GridData.FILL_HORIZONTAL);
    gdTransparent.horizontalSpan=2;
    srTransparency.setLayoutData(gdTransparent);
    if (fCurrent == null) {
      srTransparency.setValues(0,0,256,1,1,10);
      srTransparency.setEnabled(false);
    }
 else {
      int iValue=0;
      if (fCurrent instanceof ColorDefinition) {
        iValue=((ColorDefinition)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else       if (fCurrent instanceof Gradient) {
        iValue=((Gradient)fCurrent).getTransparency();
        srTransparency.setValues(iValue,0,256,1,1,10);
      }
 else {
        srTransparency.setEnabled(false);
      }
    }
    lblTransparency.setText(new MessageFormat(Messages.getString(""String_Node_Str"")).format(new Object[]{Integer.valueOf(srTransparency.getSelection())}));
    srTransparency.setToolTipText(String.valueOf(srTransparency.getSelection()));
    srTransparency.addSelectionListener(this);
    srTransparency.addListener(SWT.FocusOut,this);
    srTransparency.addListener(SWT.KeyDown,this);
    srTransparency.addListener(SWT.Traverse,this);
  }
  final int BUTTON_HEIGHTHINT=28;
  if (this.bTransparentEnabled) {
    btnReset=new Button(cmpButtons,SWT.NONE);
    GridData gdReset=new GridData(GridData.FILL_BOTH);
    gdReset.heightHint=BUTTON_HEIGHTHINT;
    gdReset.horizontalSpan=2;
    btnReset.setLayoutData(gdReset);
    btnReset.setText(Messages.getString(""String_Node_Str""));
    btnReset.addSelectionListener(this);
    btnReset.addListener(SWT.FocusOut,this);
    btnReset.addListener(SWT.KeyDown,this);
    btnReset.addListener(SWT.Traverse,this);
  }
  if (this.bAutoEnabled) {
    btnAuto=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnAuto.setLayoutData(gdGradient);
    btnAuto.setText(Messages.getString(""String_Node_Str""));
    btnAuto.addSelectionListener(this);
    btnAuto.addListener(SWT.FocusOut,this);
    btnAuto.addListener(SWT.KeyDown,this);
    btnAuto.addListener(SWT.Traverse,this);
  }
  if (this.bGradientEnabled) {
    btnGradient=new Button(cmpButtons,SWT.NONE);
    GridData gdGradient=new GridData(GridData.FILL_BOTH);
    gdGradient.heightHint=BUTTON_HEIGHTHINT;
    gdGradient.horizontalSpan=2;
    btnGradient.setLayoutData(gdGradient);
    btnGradient.setText(Messages.getString(""String_Node_Str""));
    btnGradient.addSelectionListener(this);
    btnGradient.addListener(SWT.FocusOut,this);
    btnGradient.addListener(SWT.KeyDown,this);
    btnGradient.addListener(SWT.Traverse,this);
  }
  btnCustom=new Button(cmpButtons,SWT.NONE);
  GridData gdCustom=new GridData(GridData.FILL_BOTH);
  gdCustom.heightHint=BUTTON_HEIGHTHINT;
  gdCustom.horizontalSpan=2;
  btnCustom.setLayoutData(gdCustom);
  btnCustom.setText(Messages.getString(""String_Node_Str""));
  btnCustom.addSelectionListener(this);
  btnCustom.addListener(SWT.FocusOut,this);
  btnCustom.addListener(SWT.KeyDown,this);
  btnCustom.addListener(SWT.Traverse,this);
  if (this.bImageEnabled) {
    btnImage=new Button(cmpButtons,SWT.NONE);
    GridData gdImage=new GridData(GridData.FILL_BOTH);
    gdImage.heightHint=BUTTON_HEIGHTHINT;
    gdImage.horizontalSpan=2;
    btnImage.setLayoutData(gdImage);
    btnImage.setText(Messages.getString(""String_Node_Str""));
    btnImage.addSelectionListener(this);
    btnImage.addListener(SWT.FocusOut,this);
    btnImage.addListener(SWT.KeyDown,this);
    btnImage.addListener(SWT.Traverse,this);
  }
  if (this.bPositiveNegativeEnabled) {
    btnPN=new Button(cmpButtons,SWT.NONE);
    GridData gdPN=new GridData(GridData.FILL_BOTH);
    gdPN.heightHint=BUTTON_HEIGHTHINT;
    gdPN.horizontalSpan=2;
    btnPN.setLayoutData(gdPN);
    btnPN.setText(Messages.getString(""String_Node_Str""));
    btnPN.addSelectionListener(this);
    btnPN.addListener(SWT.FocusOut,this);
    btnPN.addListener(SWT.KeyDown,this);
    btnPN.addListener(SWT.Traverse,this);
  }
  if (bPatternFillEnabled) {
    btnPatternFill=new Button(cmpButtons,SWT.NONE);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.heightHint=BUTTON_HEIGHTHINT;
    gd.horizontalSpan=2;
    btnPatternFill.setLayoutData(gd);
    btnPatternFill.setText(Messages.getString(""String_Node_Str""));
    btnPatternFill.addSelectionListener(this);
    btnPatternFill.addListener(SWT.FocusOut,this);
    btnPatternFill.addListener(SWT.KeyDown,this);
    btnPatternFill.addListener(SWT.Traverse,this);
  }
  shell.pack();
  shell.layout();
  shell.open();
}",0.999339498018494
67669,"/** 
 * @param parent
 * @param style
 * @param wizardContext
 * @param fCurrent If null, create a Fill using adapters from wizard context
 * @param bEnableGradient
 * @param bEnableImage
 * @param bEnableAuto Indicates whether auto button will be displayed.
 * @param bEnableTransparent Indicates whether transparent button will be displayed.
 * @param bPositiveNegative Indicates whether positive/negative button will be displayed.
 */
public FillChooserComposite(Composite parent,int style,ChartWizardContext wizardContext,Fill fCurrent,boolean bEnableGradient,boolean bEnableImage,boolean bEnableAuto,boolean bEnableTransparent,boolean bPositiveNegative){
  super(parent,style);
  this.fCurrent=fCurrent;
  this.bGradientEnabled=bEnableGradient;
  this.bImageEnabled=bEnableImage;
  this.bAutoEnabled=bEnableAuto;
  this.bTransparentEnabled=bEnableTransparent;
  this.bPositiveNegativeEnabled=bPositiveNegative;
  this.wizardContext=wizardContext;
  init();
  placeComponents();
  initAccessible();
}","/** 
 * @param parent
 * @param style
 * @param wizardContext
 * @param fCurrent If null, create a Fill using adapters from wizard context
 * @param bEnableGradient
 * @param bEnableImage
 * @param bEnableAuto Indicates whether auto button will be displayed.
 * @param bEnableTransparent Indicates whether transparent button will be displayed.
 * @param bPositiveNegative Indicates whether positive/negative button will be displayed.
 */
public FillChooserComposite(Composite parent,int style,ChartWizardContext wizardContext,Fill fCurrent,boolean bEnableGradient,boolean bEnableImage,boolean bEnableAuto,boolean bEnableTransparent,boolean bPositiveNegative,boolean bEnablePattern){
  super(parent,style);
  this.fCurrent=fCurrent;
  this.bGradientEnabled=bEnableGradient;
  this.bImageEnabled=bEnableImage;
  this.bAutoEnabled=bEnableAuto;
  this.bTransparentEnabled=bEnableTransparent;
  this.bPositiveNegativeEnabled=bPositiveNegative;
  this.bPatternFillEnabled=bEnablePattern;
  this.wizardContext=wizardContext;
  init();
  placeComponents();
  initAccessible();
}",0.9681774349083896
67670,"public void setEnabled(boolean bState){
  btnDown.setEnabled(bState);
  cnvSelection.setEnabled(bState);
  cnvSelection.redraw();
  this.bEnabled=bState;
}","@Override public void setEnabled(boolean bState){
  btnDown.setEnabled(bState);
  cnvSelection.setEnabled(bState);
  cnvSelection.redraw();
  this.bEnabled=bState;
}",0.96875
67671,"public boolean isEnabled(){
  return this.bEnabled;
}","@Override public boolean isEnabled(){
  return this.bEnabled;
}",0.913793103448276
67672,"protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  cmbFontNames.setVisibleItemCount(30);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  cmbFontSizes=new Combo(cmpContent,SWT.NONE);
{
    cmbFontSizes.setItems(FONT_SIZE);
    cmbFontSizes.setText(fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO);
    GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
    gdISCFontSizes.horizontalSpan=3;
    cmbFontSizes.setLayoutData(gdISCFontSizes);
    cmbFontSizes.addSelectionListener(this);
    cmbFontSizes.addFocusListener(this);
    cmbFontSizes.setVisibleItemCount(30);
  }
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,wizardContext,cdCurrent,false,false,true,false);
{
    GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCColor.horizontalSpan=3;
    fccColor.setLayoutData(gdFCCColor);
    fccColor.addListener(this);
  }
  createFontStylePanel();
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  populateLists();
  updatePreview();
  return cmpContent;
}","protected Control createDialogArea(Composite parent){
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  glContent.numColumns=9;
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  cmpContent.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label lblFont=new Label(cmpContent,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  cmbFontNames=new Combo(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBFontNames=new GridData(GridData.FILL_HORIZONTAL);
  gdCMBFontNames.horizontalSpan=8;
  cmbFontNames.setLayoutData(gdCMBFontNames);
  cmbFontNames.addSelectionListener(this);
  cmbFontNames.setVisibleItemCount(30);
  Label lblSize=new Label(cmpContent,SWT.NONE);
  GridData gdLSize=new GridData();
  lblSize.setLayoutData(gdLSize);
  lblSize.setText(Messages.getString(""String_Node_Str""));
  cmbFontSizes=new Combo(cmpContent,SWT.NONE);
{
    cmbFontSizes.setItems(FONT_SIZE);
    cmbFontSizes.setText(fdCurrent.isSetSize() ? String.valueOf((int)fdCurrent.getSize()) : ChartUIUtil.FONT_AUTO);
    GridData gdISCFontSizes=new GridData(GridData.FILL_HORIZONTAL);
    gdISCFontSizes.horizontalSpan=3;
    cmbFontSizes.setLayoutData(gdISCFontSizes);
    cmbFontSizes.addSelectionListener(this);
    cmbFontSizes.addFocusListener(this);
    cmbFontSizes.setVisibleItemCount(30);
  }
  Label lblForeground=new Label(cmpContent,SWT.NONE);
  GridData gdLForeground=new GridData();
  gdLForeground.horizontalSpan=2;
  gdLForeground.horizontalIndent=40;
  lblForeground.setLayoutData(gdLForeground);
  lblForeground.setText(Messages.getString(""String_Node_Str""));
  fccColor=new FillChooserComposite(cmpContent,SWT.NONE,wizardContext,cdCurrent,false,false,true,false,false,false);
{
    GridData gdFCCColor=new GridData(GridData.FILL_HORIZONTAL);
    gdFCCColor.horizontalSpan=3;
    fccColor.setLayoutData(gdFCCColor);
    fccColor.addListener(this);
  }
  createFontStylePanel();
  if (isAlignmentEnabled) {
    createAlignmentPanel();
  }
  createRotationPanel();
  populateLists();
  updatePreview();
  return cmpContent;
}",0.9973345179920036
67673,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblColor.setEnabled(!cbHidden.getSelection());
  fccLine.setEnabled(!cbHidden.getSelection());
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_AXIS_GRIDLINES);
  GridLayout glContent=new GridLayout();
  glContent.numColumns=2;
  glContent.horizontalSpacing=5;
  glContent.verticalSpacing=5;
  glContent.marginHeight=7;
  glContent.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=10;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  glGeneral.marginHeight=4;
  glGeneral.marginWidth=4;
  FillLayout flMajor=new FillLayout();
  cmpContent=new Composite(parent,SWT.NONE);
  cmpContent.setLayout(glContent);
  Composite choiceComposite=new Composite(cmpContent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  gd.horizontalSpan=2;
  choiceComposite.setLayoutData(gd);
  choiceComposite.setLayout(new GridLayout(2,true));
  cbHidden=new Button(choiceComposite,SWT.CHECK);
  cbHidden.setLayoutData(new GridData(GridData.FILL_BOTH));
  cbHidden.setText(Messages.getString(""String_Node_Str""));
  cbHidden.setSelection(!axis.getLineAttributes().isVisible());
  cbHidden.addSelectionListener(this);
  cbTickBetweenCategory=new Button(choiceComposite,SWT.CHECK);
  cbTickBetweenCategory.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING));
  cbTickBetweenCategory.setText(Messages.getString(""String_Node_Str""));
  cbTickBetweenCategory.setSelection(axis.getScale().isTickBetweenCategories());
  cbTickBetweenCategory.addSelectionListener(this);
  cbTickBetweenCategory.setEnabled(axis.isCategoryAxis());
  cbTickBetweenCategory.setVisible((angleType == AngleType.X) && axis.isCategoryAxis());
  cmpGeneral=new Composite(cmpContent,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_BOTH);
  gdCMPGeneral.horizontalSpan=2;
  gdCMPGeneral.grabExcessVerticalSpace=false;
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  lblColor=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLColor=new GridData(GridData.FILL);
  lblColor.setLayoutData(gdLBLColor);
  lblColor.setText(Messages.getString(""String_Node_Str""));
  ColorDefinition clrCurrent=null;
  if (axis.eIsSet(ComponentPackage.eINSTANCE.getAxis_LineAttributes())) {
    clrCurrent=axis.getLineAttributes().getColor();
  }
  fccLine=new FillChooserComposite(cmpGeneral,SWT.NONE,getContext(),clrCurrent,false,false,true,true,false,false);
  GridData gdFCCLine=new GridData(GridData.FILL_BOTH);
  gdFCCLine.horizontalSpan=9;
  gdFCCLine.heightHint=fccLine.getPreferredSize().y;
  gdFCCLine.grabExcessVerticalSpace=false;
  fccLine.setLayoutData(gdFCCLine);
  fccLine.addListener(this);
  lblColor.setEnabled(!cbHidden.getSelection());
  fccLine.setEnabled(!cbHidden.getSelection());
  lblGridStepNum=new Label(cmpGeneral,SWT.NONE);
  GridData gdLblGridStepNum=new GridData(GridData.FILL);
  lblGridStepNum.setLayoutData(gdLblGridStepNum);
  lblGridStepNum.setText(Messages.getString(""String_Node_Str""));
  majGridStNum=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    majGridStNum.setLayoutData(gd);
    majGridStNum.setMinimum(1);
    majGridStNum.setSelection(getAxisForProcessing().getScale().getMajorGridsStepNumber());
    majGridStNum.addSelectionListener(this);
  }
  lblGridCount=new Label(cmpGeneral,SWT.NONE);
  GridData gdLBLGridCount=new GridData();
  lblGridCount.setLayoutData(gdLBLGridCount);
  lblGridCount.setText(Messages.getString(""String_Node_Str""));
  iscGridCount=new Spinner(cmpGeneral,SWT.BORDER);
{
    gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=4;
    iscGridCount.setLayoutData(gd);
    iscGridCount.setMinimum(1);
    iscGridCount.setSelection(getAxisForProcessing().getScale().getMinorGridsPerUnit());
    iscGridCount.addSelectionListener(this);
  }
  grpMajor=new Group(cmpContent,SWT.NONE);
  GridData gdGRPMajor=new GridData(GridData.FILL_HORIZONTAL);
  grpMajor.setLayoutData(gdGRPMajor);
  grpMajor.setText(Messages.getString(""String_Node_Str""));
  grpMajor.setLayout(flMajor);
  gacMajor=new GridAttributesComposite(grpMajor,SWT.NONE,getContext(),axis.getMajorGrid(),axis.getOrientation().getValue());
  gacMajor.addListener(this);
  grpMinor=new Group(cmpContent,SWT.NONE);
{
    grpMinor.setLayout(new FillLayout());
    GridData gdGRPMinor=new GridData(GridData.FILL_HORIZONTAL);
    grpMinor.setLayoutData(gdGRPMinor);
    grpMinor.setText(Messages.getString(""String_Node_Str""));
  }
  gacMinor=new GridAttributesComposite(grpMinor,SWT.NONE,getContext(),axis.getMinorGrid(),axis.getOrientation().getValue());
  gacMinor.addListener(this);
  setStateOfMajorGrid();
  setStateOfMinorGrid();
  return cmpContent;
}",0.9993555316863588
67674,"public ImageData(IImageContent image,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  int imageWidth=(int)ExcelUtil.convertDimensionType(image.getWidth(),imageInfo.getWidth() * 1000 * ExcelUtil.INCH_PT / widthDpi,widthDpi);
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}","public ImageData(IImageContent image,int imageWidth,int styleId,int datatype,Image imageInfo,XlsContainer currentContainer,int heightDpi,int widthDpi){
  super();
  this.dataType=datatype;
  this.styleId=styleId;
  height=ExcelUtil.convertDimensionType(image.getHeight(),imageInfo.getHeight() * 1000 * ExcelUtil.INCH_PT / heightDpi,heightDpi) / 1000;
  imageHeight=(int)height;
  width=Math.min(currentContainer.getSizeInfo().getWidth(),imageWidth);
  altText=image.getAltText();
  imageUrl=image.getURI();
  this.imageData=imageInfo.getData();
  rowSpanInDesign=0;
  this.imageInfo=imageInfo;
}",0.8821292775665399
67675,"private SheetData createImageData(IImageContent image,StyleEntry entry,XlsContainer container,int imageHeightDpi,int imageWidhtDpi){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,entry,container,type,imageInfo,imageHeightDpi,imageWidhtDpi);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}","private SheetData createImageData(IImageContent image,int imageWidth,StyleEntry entry,XlsContainer container,int imageHeightDpi,int imageWidhtDpi){
  int type=SheetData.IMAGE;
  entry.setProperty(StyleConstant.DATA_TYPE_PROP,type);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (null == altText) {
      altText=messageFlashObjectNotSupported;
    }
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(altText,entry);
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    byte[] data=imageInfo.getData();
    if (data != null) {
      return createData(image,imageWidth,entry,container,type,imageInfo,imageHeightDpi,imageWidhtDpi);
    }
 else {
      entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
      return createData(image.getAltText(),entry);
    }
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    entry.setProperty(StyleConstant.DATA_TYPE_PROP,SheetData.STRING);
    return createData(image.getAltText(),entry);
  }
}",0.9896988906497622
67676,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getWidth() == null) {
      imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    }
 else {
      imageWidthDpi=reportDpi;
    }
    if (image.getHeight() == null) {
      imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
    }
 else {
      imageHeightDpi=reportDpi;
    }
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getWidth() == null) {
      imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    }
 else {
      imageWidthDpi=reportDpi;
    }
    if (image.getHeight() == null) {
      imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
    }
 else {
      imageHeightDpi=reportDpi;
    }
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,imageSize.getWidth(),entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}",0.9937592867756316
67677,"/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param directoryName -the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel -the log level to be set. If logLevel is null, it will be ignored.
 */
public static void startEngineLogging(Logger logger,String directoryName,String file,Level logLevel){
  Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
  if (sharedHandler == null) {
    sharedHandler=new EngineLoggerHandler(rootLogger);
    sharedHandler.setLevel(Level.ALL);
    rootLogger.addHandler(sharedHandler);
  }
  if (fileLogger != null) {
    closeFileLogger(fileLogger);
    fileLogger=null;
  }
  if (logger != null && isValidLogger(logger)) {
    userLogger=logger;
    sharedHandler.setSharedLogger(userLogger);
  }
 else {
    if (directoryName != null) {
      dirName=directoryName;
    }
    if (file != null) {
      fileName=file;
    }
    if (logLevel == null) {
      logLevel=rootLogger.getLevel();
    }
    if (logLevel != Level.OFF && (dirName != null || fileName != null)) {
      fileLogger=createFileLogger(dirName,fileName);
      sharedHandler.setSharedLogger(fileLogger);
    }
    rootLogger.setLevel(logLevel);
  }
  rootLogger.setUseParentHandlers(false);
}","/** 
 * This function should only called by the main application that starts BIRT. It will add a new log handler to the global BIRT logger.
 * @param directoryName - the directory name of the log file (e.g. C:\Log). The final file name will be the directory name plus an unique file name. For example, if the directory name is C:\Log, the log file name will be something like C:\Log\ReportEngine_2005_02_26_11_26_56.log
 * @param logLevel - the log level to be set. If logLevel is null, it will be ignored.
 * @param rollingSize
 * @param maxBackupIndex
 */
public static void startEngineLogging(Logger logger,String directoryName,String file,Level logLevel,int rollingSize,int maxBackupIndex){
  Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
  if (sharedHandler == null) {
    sharedHandler=new EngineLoggerHandler(rootLogger);
    sharedHandler.setLevel(Level.ALL);
    rootLogger.addHandler(sharedHandler);
  }
  if (fileLogger != null) {
    closeFileLogger(fileLogger);
    fileLogger=null;
  }
  if (logger != null && isValidLogger(logger)) {
    userLogger=logger;
    sharedHandler.setSharedLogger(userLogger);
  }
 else {
    if (directoryName != null) {
      dirName=directoryName;
    }
    if (file != null) {
      fileName=file;
    }
    if (logLevel == null) {
      logLevel=rootLogger.getLevel();
    }
    logRollingSize=rollingSize;
    logMaxBackupIndex=maxBackupIndex;
    if (logLevel != Level.OFF && (dirName != null || fileName != null)) {
      fileLogger=createFileLogger(dirName,fileName,logRollingSize,logMaxBackupIndex);
      sharedHandler.setSharedLogger(fileLogger);
    }
    rootLogger.setLevel(logLevel);
  }
  rootLogger.setUseParentHandlers(false);
}",0.941653666146646
67678,"private static Logger createFileLogger(String dirName,String fileName){
  try {
    if (dirName != null) {
      File directory=new File(dirName);
      if (!directory.exists()) {
        if (!directory.mkdirs())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
 else {
        if (directory.isFile())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
    }
    Handler logFileHandler=new FileHandler(generateUniqueLogFileName(dirName,fileName),true);
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}","private static Logger createFileLogger(String dirName,String fileName,int rollingSize,int logMaxBackupIndex){
  try {
    if (dirName != null) {
      File directory=new File(dirName);
      if (!directory.exists()) {
        if (!directory.mkdirs())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
 else {
        if (directory.isFile())         throw new IOException(""String_Node_Str"" + dirName + ""String_Node_Str"");
      }
    }
    String logFileName=generateUniqueLogFileName(dirName,fileName);
    Handler logFileHandler=null;
    if (rollingSize <= 0) {
      logFileHandler=new FileHandler(logFileName,true);
    }
 else {
      logFileHandler=new FileHandler(logFileName,rollingSize,logMaxBackupIndex,true);
    }
    logFileHandler.setFormatter(new SimpleFormatter());
    logFileHandler.setLevel(Level.FINEST);
    Logger logger=Logger.getAnonymousLogger();
    logger.addHandler(logFileHandler);
    return logger;
  }
 catch (  SecurityException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
catch (  IOException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  return null;
}",0.849540396710208
67679,"/** 
 * Change the log level to the newLevel
 * @param newLevel -new log level
 */
public static void changeLogLevel(Level newLevel){
  if (newLevel != null) {
    if (userLogger != null) {
      if (newLevel != Level.OFF && fileLogger == null && (dirName != null || fileName != null)) {
        fileLogger=createFileLogger(dirName,fileName);
        if (fileLogger != null) {
          sharedHandler.setSharedLogger(fileLogger);
        }
      }
    }
    Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
    rootLogger.setLevel(newLevel);
  }
}","/** 
 * Change the log level to the newLevel
 * @param newLevel -new log level
 */
public static void changeLogLevel(Level newLevel){
  if (newLevel != null) {
    if (userLogger != null) {
      if (newLevel != Level.OFF && fileLogger == null && (dirName != null || fileName != null)) {
        fileLogger=createFileLogger(dirName,fileName,logRollingSize,logMaxBackupIndex);
        if (fileLogger != null) {
          sharedHandler.setSharedLogger(fileLogger);
        }
      }
    }
    Logger rootLogger=Logger.getLogger(BIRT_NAME_SPACE);
    rootLogger.setLevel(newLevel);
  }
}",0.9709251101321584
67680,"/** 
 * set up engine logging
 */
private void intializeLogger(){
  Logger logger=null;
  String dest=null;
  String file=null;
  Level level=Level.WARNING;
  if (config != null) {
    logger=config.getLogger();
    dest=config.getLogDirectory();
    file=config.getLogFile();
    level=config.getLogLevel();
    if (level == null) {
      level=Level.WARNING;
    }
  }
  EngineLogger.startEngineLogging(logger,dest,file,level);
}","/** 
 * set up engine logging
 */
private void intializeLogger(){
  Logger logger=null;
  String dest=null;
  String file=null;
  Level level=Level.WARNING;
  int rollingSize=0;
  int maxBackupIndex=1;
  if (config != null) {
    logger=config.getLogger();
    dest=config.getLogDirectory();
    file=config.getLogFile();
    level=config.getLogLevel();
    if (level == null) {
      level=Level.WARNING;
    }
    rollingSize=config.getLogRollingSize();
    maxBackupIndex=config.getLogMaxBackupIndex();
  }
  EngineLogger.startEngineLogging(logger,dest,file,level,rollingSize,maxBackupIndex);
}",0.8385214007782101
67681,"public void setLogger(Logger logger){
  if (logger != null) {
    EngineLogger.startEngineLogging(logger,null,null,null);
  }
}","public void setLogger(Logger logger){
  if (logger != null) {
    EngineLogger.startEngineLogging(logger,null,null,null,0,1);
  }
}",0.9844961240310076
67682,"public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget == spnEllipsis) {
    getLegend().setEllipsis(spnEllipsis.getSelection());
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),getEntryType(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}","public void handleEvent(Event event){
  if (event.widget.equals(fdcFont)) {
    getLegend().getText().setFont((FontDefinition)((Object[])event.data)[0]);
    getLegend().getText().setColor((ColorDefinition)((Object[])event.data)[1]);
  }
 else   if (event.widget == spnEllipsis) {
    getLegend().setEllipsis(spnEllipsis.getSelection());
  }
 else   if (event.widget.equals(fccShadow)) {
    getLegend().getClientArea().setShadowColor((ColorDefinition)event.data);
  }
 else   if (event.widget.equals(fccBackground)) {
    getLegend().getClientArea().setBackground((Fill)event.data);
  }
 else   if (event.widget.equals(icText)) {
    getLegend().getClientArea().setInsets((Insets)event.data);
  }
 else   if (event.widget.equals(outlineText)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
      getLegend().getClientArea().getOutline().setStyle((LineStyle)event.data);
    break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
  getLegend().getClientArea().getOutline().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getClientArea().getOutline().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(lineSeparator)) {
switch (event.type) {
case LineAttributesComposite.STYLE_CHANGED_EVENT:
getLegend().getSeparator().setStyle((LineStyle)event.data);
break;
case LineAttributesComposite.WIDTH_CHANGED_EVENT:
getLegend().getSeparator().setThickness(((Integer)event.data).intValue());
break;
case LineAttributesComposite.COLOR_CHANGED_EVENT:
getLegend().getSeparator().setColor((ColorDefinition)event.data);
break;
case LineAttributesComposite.VISIBILITY_CHANGED_EVENT:
getLegend().getSeparator().setVisible(((Boolean)event.data).booleanValue());
break;
}
}
 else if (event.widget.equals(btnFormatSpecifier)) {
FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),getChart().getLegend().getFormatSpecifier(),getEntryType(),Messages.getString(""String_Node_Str""));
if (editor.open() == Window.OK) {
getChart().getLegend().setFormatSpecifier(editor.getFormatSpecifier());
fsp.updatePreview(editor.getFormatSpecifier());
}
}
}",0.995921871646276
67683,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","@Override protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.998999799959992
67684,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,getContext(),getSeriesForProcessing().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,getContext(),getSeriesForProcessing().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.9988104678826328
67685,"public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_LABEL);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    cmpContent.setLayout(glContent);
  }
  Composite cmpTop=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.horizontalSpacing=0;
    cmpTop.setLayout(layout);
    cmpTop.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpLeft=new Composite(cmpTop,SWT.NONE);
{
    cmpLeft.setLayout(new GridLayout());
    cmpLeft.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpRight=new Composite(cmpTop,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout());
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createAttributeArea(cmpLeft);
  grpOutline=new Group(cmpLeft,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(new FillLayout());
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getOutline(),true,true,true);
{
    liacOutline.addListener(this);
  }
  createDataPointArea(cmpRight);
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
  }
  populateLists(getSeriesForProcessing());
  setEnabled(getSeriesForProcessing().getLabel().isVisible());
  refreshDataPointButtons();
  return cmpContent;
}","@Override public Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_LABEL);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout();
    glContent.numColumns=2;
    cmpContent.setLayout(glContent);
  }
  Composite cmpTop=new Composite(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.horizontalSpacing=0;
    cmpTop.setLayout(layout);
    cmpTop.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpLeft=new Composite(cmpTop,SWT.NONE);
{
    cmpLeft.setLayout(new GridLayout());
    cmpLeft.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  Composite cmpRight=new Composite(cmpTop,SWT.NONE);
{
    cmpRight.setLayout(new GridLayout());
    cmpRight.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  createAttributeArea(cmpLeft);
  grpOutline=new Group(cmpLeft,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(new FillLayout());
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getOutline(),true,true,true);
{
    liacOutline.addListener(this);
  }
  createDataPointArea(cmpRight);
  icInsets=new InsetsComposite(cmpRight,SWT.NONE,getSeriesForProcessing().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.setLayoutData(gdICInsets);
    icInsets.addListener(this);
  }
  populateLists(getSeriesForProcessing());
  setEnabled(getSeriesForProcessing().getLabel().isVisible());
  refreshDataPointButtons();
  return cmpContent;
}",0.9972722313147844
67686,"public void run(IAction action){
  ModuleHandle handle=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (handle != null) {
    String fileName=handle.getFileName();
    ILaunchConfiguration config=ScriptLaunchShortcut.findLaunchConfiguration(fileName,ScriptLaunchShortcut.getConfigurationType());
    if (config != null) {
      DebugUITools.launch(config,""String_Node_Str"");
    }
  }
}","public void run(IAction action){
  ModuleHandle handle=null;
  if (handle == null) {
    FormEditor editor=UIUtil.getActiveReportEditor(false);
    if (editor instanceof MultiPageReportEditor) {
      handle=((MultiPageReportEditor)editor).getModel();
    }
  }
  if (handle != null) {
    String fileName=handle.getFileName();
    ILaunchConfiguration config=ScriptLaunchShortcut.findLaunchConfiguration(fileName,ScriptLaunchShortcut.getConfigurationType());
    if (config != null) {
      DebugUITools.launch(config,""String_Node_Str"");
    }
  }
}",0.7408184679958028
67687,"private void gendoc(IAction action){
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}","private void gendoc(IAction action){
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=null;
  if (model == null) {
    if (editor instanceof MultiPageReportEditor) {
      model=((MultiPageReportEditor)editor).getModel();
    }
  }
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);
  Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);
  if (adapter instanceof IPreviewAction) {
    IPreviewAction delegate=(IPreviewAction)adapter;
    delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);
    delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,model.getFileName());
    delegate.run();
    return;
  }
  WebViewer.display(model.getFileName(),options);
}",0.911072362685266
67688,"protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}","protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=null;
  if (model == null) {
    if (editor instanceof MultiPageReportEditor) {
      model=((MultiPageReportEditor)editor).getModel();
    }
  }
  if (model == null) {
    return;
  }
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}",0.8623188405797102
67689,"protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=SessionHandleAdapter.getInstance().getReportDesignHandle();
  if (!UIUtil.canPreviewWithErrors(model))   return;
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}","protected void preview(String format,boolean allowPage){
  if (!prePreview()) {
    return;
  }
  FormEditor editor=UIUtil.getActiveReportEditor(false);
  ModuleHandle model=null;
  if (model == null) {
    if (editor instanceof MultiPageReportEditor) {
      model=((MultiPageReportEditor)editor).getModel();
    }
  }
  if (!UIUtil.canPreviewWithErrors(model))   return;
  if (editor != null) {
    if (model.needsSave()) {
      editor.doSave(null);
    }
  }
  Map options=new HashMap();
  options.put(WebViewer.FORMAT_KEY,format);
  options.put(WebViewer.ALLOW_PAGE_KEY,Boolean.valueOf(allowPage));
  options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder());
  WebViewer.display(model.getFileName(),options);
}",0.8650568181818182
67690,"/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style,java.util.List choices){
}","/** 
 * Constructs a new instance of the dialog
 */
public ImportValueDialog(String style,java.util.List<String> choices){
}",0.9666666666666668
67691,"protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  selectedList.removeAll();
  for (Iterator iter=choiceList.iterator(); iter.hasNext(); ) {
    String value=(String)iter.next();
    if (value != null) {
      selectedList.add(value);
    }
 else {
      hasNullValue=true;
      selectedList.add(nullValue);
    }
  }
  refreshColumns();
  return true;
}","protected boolean initDialog(){
  try {
    engine=DataEngine.newDataEngine(DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null));
  }
 catch (  BirtException e) {
    ExceptionHandler.handle(e);
    return false;
  }
  dataSetChooser.setItems(ChoiceSetFactory.getDataSets());
  dataSetChooser.select(0);
  currentDataSetName=dataSetChooser.getText();
  selectedList.removeAll();
  for (Iterator<String> iter=choiceList.iterator(); iter.hasNext(); ) {
    String value=iter.next();
    if (value != null) {
      selectedList.add(value);
    }
 else {
      hasNullValue=true;
      selectedList.add(nullValue);
    }
  }
  refreshColumns();
  return true;
}",0.988388969521045
67692,"private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    String queryExpr=null;
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
      if (column.getColumnName().equals(columnChooser.getText())) {
        queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
        break;
      }
    }
    if (queryExpr == null) {
      return;
    }
    try {
      java.util.List modelValueList=SelectValueFetcher.getSelectValueList(queryExpr,getDataSetHandle(),false);
      if (modelValueList != null) {
        Iterator iter=modelValueList.iterator();
        DateFormatter formatter=new DateFormatter(ULocale.US);
        while (iter.hasNext()) {
          Object candiateValue=iter.next();
          if (candiateValue != null) {
            if (candiateValue instanceof java.sql.Date) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else             if (candiateValue instanceof java.sql.Time) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else             if (candiateValue instanceof Date) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else             result=String.valueOf(candiateValue);
          }
 else {
            result=nullValue;
            hasNullValue=true;
          }
          if (!resultList.contains(result)) {
            resultList.add(result);
          }
        }
      }
      filteValues();
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}","private void refreshValues(){
  resultList.clear();
  if (columnChooser.isEnabled()) {
    String queryExpr=null;
    for (Iterator iter=columnList.iterator(); iter.hasNext(); ) {
      ResultSetColumnHandle column=(ResultSetColumnHandle)iter.next();
      if (column.getColumnName().equals(columnChooser.getText())) {
        queryExpr=DEUtil.getResultSetColumnExpression(column.getColumnName());
        break;
      }
    }
    if (queryExpr == null) {
      return;
    }
    try {
      java.util.List modelValueList=SelectValueFetcher.getSelectValueList(queryExpr,getDataSetHandle(),false);
      if (modelValueList != null) {
        Iterator iter=modelValueList.iterator();
        DateFormatter formatter=new DateFormatter(ULocale.US);
        while (iter.hasNext()) {
          Object candiateValue=iter.next();
          if (candiateValue != null) {
            if (expectedColumnDataType == DataType.SQL_DATE_TYPE && candiateValue instanceof Date) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else             if (expectedColumnDataType == DataType.SQL_TIME_TYPE && candiateValue instanceof Date) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else             if (expectedColumnDataType == DataType.DATE_TYPE && candiateValue instanceof Date) {
              formatter.applyPattern(""String_Node_Str"");
              result=formatter.format((Date)candiateValue);
            }
 else {
              result=String.valueOf(candiateValue);
            }
          }
 else {
            result=nullValue;
            hasNullValue=true;
          }
          if (!resultList.contains(result)) {
            resultList.add(result);
          }
        }
      }
      filteValues();
    }
 catch (    BirtException e) {
      ExceptionHandler.handle(e);
    }
  }
 else {
    valueList.removeAll();
    valueList.deselectAll();
    updateButtons();
  }
}",0.9505102040816328
67693,"public RowState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action){
  super(element,cssStyles,action);
  content=(RowContent)parent.getReportContent().createRowContent();
  setParent(parent);
  HTML2Content.handleStyle(element,cssStyles,content);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
}","public RowState(Element element,Map<Element,StyleProperties> cssStyles,IContent parent,ActionContent action){
  super(element,cssStyles,action);
  content=(RowContent)parent.getReportContent().createRowContent();
  setParent(parent);
  content.setHeight(PropertyUtil.getDimensionAttribute(element,""String_Node_Str""));
  HTML2Content.handleStyle(element,cssStyles,content);
}",0.7754010695187166
67694,"public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  if (OlapUtil.isFromLibrary(model))   return UIHelper.getImage(BuilderConstants.IMAGE_LINK_CUBE);
 else   return UIHelper.getImage(BuilderConstants.IMAGE_CUBE);
}","public Image getNodeIcon(Object model){
  if (model instanceof DesignElementHandle && ((DesignElementHandle)model).getSemanticErrors().size() > 0) {
    return ReportPlatformUIImages.getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
  }
  return decorateImage(UIHelper.getImage(BuilderConstants.IMAGE_CUBE),model);
}",0.8210227272727273
67695,"public String getIconName(Object model){
  if (!DEUtil.isLinkedElement((DesignElementHandle)model)) {
    return IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP;
  }
 else {
    return IReportGraphicConstants.ICON_CASCADING_PARAMETER_GROUP_ELEMENT_LINK;
  }
}","public String getIconName(Object model){
  return IReportGraphicConstants.ICON_ELEMENT_PARAMETER_GROUP;
}",0.5691056910569106
67696,"public String getIconName(Object model){
  assert(model instanceof EmbeddedImageHandle);
  EmbeddedImageHandle image=(EmbeddedImageHandle)model;
  if (image.isLibReference()) {
    return IReportGraphicConstants.ICON_ELEMENT_IMAGE_LINK;
  }
 else {
    return IReportGraphicConstants.ICON_ELEMENT_IMAGE;
  }
}","public String getIconName(Object model){
  assert(model instanceof EmbeddedImageHandle);
  EmbeddedImageHandle image=(EmbeddedImageHandle)model;
  return IReportGraphicConstants.ICON_ELEMENT_IMAGE;
}",0.7834645669291339
67697,"public void paintControl(PaintEvent e){
  drawItem(e.gc,context.getPatternImage(),0,0);
}","public void paintControl(PaintEvent e){
  drawItem(e.gc,context.getPatternImage(),0,0);
  if (view.isFocusControl()) {
    GC gc=e.gc;
    Color cOld=gc.getForeground();
    int lineStyleOld=gc.getLineStyle();
    gc.setLineStyle(SWT.LINE_DOT);
    gc.setForeground(gc.getDevice().getSystemColor(SWT.COLOR_BLACK));
    gc.drawRectangle(1,1,VIEW_WIDTH - 2,VIEW_HEIGHT - 2);
    gc.setForeground(gc.getDevice().getSystemColor(SWT.COLOR_WHITE));
    gc.drawRectangle(2,2,VIEW_WIDTH - 4,VIEW_HEIGHT - 4);
    gc.setForeground(cOld);
    gc.setLineStyle(lineStyleOld);
  }
}",0.270516717325228
67698,"public void handleEvent(Event event){
switch (event.type) {
case SWT.MouseDown:
case SWT.Selection:
    event.type=DropDownControl.ToggleDropDown;
  event.widget=this;
notifyListeners(DropDownControl.ToggleDropDown,event);
break;
}
}","public void handleEvent(Event event){
switch (event.type) {
case SWT.MouseDown:
case SWT.Selection:
    doToggleDropDown();
  break;
case SWT.KeyDown:
processKeyDown(event.keyCode);
break;
case SWT.Traverse:
if (event.detail == SWT.TRAVERSE_TAB_NEXT || event.detail == SWT.TRAVERSE_TAB_PREVIOUS) {
event.doit=true;
}
break;
case SWT.FocusIn:
view.redraw();
break;
case SWT.FocusOut:
view.redraw();
break;
}
}",0.374414976599064
67699,"public ItemFrame(Composite parent,Context context){
  super(parent,SWT.BORDER);
  this.context=context;
  GridLayout gl=createGridLayout();
  gl.marginTop=MARGIN;
  gl.marginBottom=MARGIN;
  gl.marginLeft=MARGIN;
  gl.marginRight=MARGIN;
  setLayout(gl);
  view=new Composite(this,SWT.DOUBLE_BUFFERED);
  view.setLayoutData(new GridData(VIEW_WIDTH,VIEW_HEIGHT));
  view.addPaintListener(this);
  view.addListener(SWT.MouseDown,this);
  btnDropDown=new Button(this,SWT.ARROW | SWT.DOWN);
  btnDropDown.setLayoutData(new GridData(BUTTON_WIDTH,VIEW_HEIGHT));
  btnDropDown.addListener(SWT.Selection,this);
}","public ItemFrame(Composite parent,Context context){
  super(parent,SWT.BORDER);
  this.context=context;
  GridLayout gl=createGridLayout();
  gl.marginTop=MARGIN;
  gl.marginBottom=MARGIN;
  gl.marginLeft=MARGIN;
  gl.marginRight=MARGIN;
  setLayout(gl);
  view=new Composite(this,SWT.NO_BACKGROUND);
  view.setLayoutData(new GridData(VIEW_WIDTH,VIEW_HEIGHT));
  view.addPaintListener(this);
  view.addListener(SWT.MouseDown,this);
  view.addListener(SWT.KeyDown,this);
  view.addListener(SWT.Traverse,this);
  view.addListener(SWT.FocusIn,this);
  view.addListener(SWT.FocusOut,this);
  btnDropDown=new Button(this,SWT.ARROW | SWT.DOWN);
  btnDropDown.setLayoutData(new GridData(BUTTON_WIDTH,VIEW_HEIGHT));
  btnDropDown.addListener(SWT.Selection,this);
}",0.8705882352941177
67700,"@Override protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_PATTERN_FILL);
  getShell().setText(Messages.getString(""String_Node_Str""));
  return super.createContents(parent);
}","@Override protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_PATTERN_FILL);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control control=super.createContents(parent);
  getShell().setDefaultButton(null);
  return control;
}",0.7545787545787546
67701,"@Override protected Composite createDropDown(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  GridData gd=new GridData();
  gd.widthHint=CELL_WIDTH * 8 + MARGIN;
  gd.heightHint=CELL_HEIGHT * 8 + MARGIN;
  composite.setLayoutData(gd);
  composite.addListener(SWT.MouseDown,this);
  composite.addListener(SWT.FocusOut,this);
  composite.addListener(SWT.KeyDown,this);
  composite.addPaintListener(this);
  return composite;
}","@Override protected Composite createDropDown(Composite parent){
  Composite composite=new Composite(parent,SWT.BORDER | SWT.DOUBLE_BUFFERED);
  GridData gd=new GridData();
  gd.widthHint=CELL_WIDTH * 8 + MARGIN;
  gd.heightHint=CELL_HEIGHT * 8 + MARGIN;
  composite.setLayoutData(gd);
  composite.addListener(SWT.MouseDown,this);
  composite.addListener(SWT.FocusOut,this);
  composite.addListener(SWT.FocusIn,this);
  composite.addListener(SWT.KeyDown,this);
  composite.addListener(SWT.Traverse,this);
  composite.addPaintListener(this);
  return composite;
}",0.9159420289855073
67702,"private void onDropDonwFocusOut(){
  Control currentControl=Display.getCurrent().getCursorControl();
  while (currentControl != null) {
    if (currentControl == host) {
      return;
    }
    currentControl=currentControl.getParent();
  }
  dropDown.getShell().close();
}","public void onDropDonwFocusOut(){
  Control currentControl=Display.getCurrent().getCursorControl();
  while (currentControl != null) {
    if (currentControl == host) {
      return;
    }
    currentControl=currentControl.getParent();
  }
  dropDown.getShell().close();
}",0.979816513761468
67703,"public boolean getMoreResults() throws OdaException {
  try {
    if (!this.isExecuted)     this.execute();
    if (this.outputParameterResultSetsMap.size() > 0) {
      this.resultIndex++;
      if (this.resultIndex >= this.outputParameterResultSetsMap.size())       return false;
      return true;
    }
    return callStat.getMoreResults();
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET,e);
  }
}","public boolean getMoreResults() throws OdaException {
  try {
    if (!this.isExecuted)     this.execute();
    if (this.outputParameterResultSetsMap.size() > 0) {
      this.resultIndex++;
      if (this.resultIndex >= this.outputParameterResultSetsMap.size())       return false;
      return true;
    }
    boolean flag=callStat.getMoreResults();
    if (flag)     this.rs=this.callStat.getResultSet();
    return flag;
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET,e);
  }
}",0.8873096446700508
67704,"public int getInt(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    return callStat.getInt(parameterId);
  }
 catch (  SQLException e) {
    throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_INT_VALUE,e);
  }
}","public int getInt(int parameterId) throws OdaException {
  assertNotNull(callStat);
  try {
    return callStat.getInt(parameterId);
  }
 catch (  SQLException e) {
    try {
      return retryToGetParameterValue(parameterId);
    }
 catch (    OdaException e1) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_INT_VALUE,e);
    }
catch (    SQLException e2) {
      throw new JDBCException(ResourceConstants.RESULTSET_CANNOT_GET_INT_VALUE,e);
    }
  }
}",0.6813186813186813
67705,"public void launch(String filePath){
  init();
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,new SampleStandardDataSheet(dataProvider));
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    os=new FileOutputStream(chartFile);
    if (contextResult != null) {
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}","public void launch(String filePath){
  init();
  Chart chart=null;
  Serializer serializer=null;
  final File chartFile=new File(filePath);
  InputStream is=null;
  try {
    serializer=SerializerImpl.instance();
    if (chartFile.exists()) {
      is=new FileInputStream(chartFile);
      chart=serializer.read(is);
    }
  }
 catch (  Exception e) {
  }
 finally {
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
  }
  final ChartWizard chartWizard=new ChartWizard();
  IDataServiceProvider dataProvider=new DefaultDataServiceProviderImpl();
  final ChartWizardContext context=new ChartWizardContext(chart,new SimpleUIServiceProviderImpl(),dataProvider,new SampleStandardDataSheet(dataProvider));
  context.setEnabled(SUBTASK_TITLE,false);
  context.setEnabled(SUBTASK_LEGEND + BUTTON_LAYOUT,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_LABEL,false);
  context.setEnabled(SUBTASK_SERIES_Y + BUTTON_CURVE,false);
  context.addPredefinedQuery(QUERY_CATEGORY,new String[]{""String_Node_Str"",""String_Node_Str""});
  context.addPredefinedQuery(QUERY_VALUE,new String[]{});
  context.setRtL(ChartUtil.isRightToLeftLocale(ULocale.getDefault()));
  final Object[] applyData=new Object[1];
  chartWizard.addCustomButton(new ApplyButtonHandler(chartWizard){
    public void run(){
      super.run();
      applyData[0]=context.getModel().copyInstance();
    }
  }
);
  ChartLivePreviewThread livePreviewThread=new ChartLivePreviewThread(dataProvider);
  livePreviewThread.start();
  context.setLivePreviewThread(livePreviewThread);
  ChartWizardContext contextResult=(ChartWizardContext)chartWizard.open(context);
  OutputStream os=null;
  try {
    if (contextResult != null) {
      os=new FileOutputStream(chartFile);
      serializer.write(contextResult.getModel(),os);
    }
 else     if (applyData[0] != null) {
      os=new FileOutputStream(chartFile);
      serializer.write((Chart)applyData[0],os);
    }
  }
 catch (  Exception e) {
    WizardBase.displayException(e);
  }
 finally {
    if (os != null) {
      try {
        os.close();
      }
 catch (      IOException e) {
      }
    }
  }
}",0.956953642384106
67706,"public DataType getDataType(String expression){
  return DataType.NUMERIC_LITERAL;
}","public DataType getDataType(String expression){
  return null;
}",0.8108108108108109
67707,"public Object invoke(Command command,Object... inData) throws ChartException {
  Object outData=null;
switch (command) {
case EXPRESS_BUTTON_CREATE:
    final Control control=(Control)inData[1];
  new Label((Composite)inData[0],SWT.NONE);
IExpressionButton ceb=new IExpressionButton(){
  public void setExpression(  String expr){
    ChartUIUtil.setText(control,expr);
  }
  public void setEnabled(  boolean bEnabled){
    control.setEnabled(bEnabled);
  }
  public boolean isEnabled(){
    return control.isEnabled();
  }
  public String getExpression(){
    return ChartUIUtil.getText(control);
  }
  public String getDisplayExpression(){
    return getExpression();
  }
  public void addListener(  Listener listener){
  }
  public void setAccessor(  EAttributeAccessor<String> accessor){
  }
  public String getExpressionType(){
    return null;
  }
  public boolean isCube(){
    return false;
  }
  public void setBindingName(  String bindingName,  boolean bNotifyEvents){
  }
  public void setExpression(  String expr,  boolean bNotifyEvents){
  }
  public void setAssitField(  IAssistField assistField){
  }
  public void setPredefinedQuery(  Object[] predefinedQuery){
  }
}
;
outData=ceb;
break;
}
return outData;
}","public Object invoke(Command command,Object... inData) throws ChartException {
  Object outData=null;
switch (command) {
case EXPRESS_BUTTON_CREATE:
    final Control control=(Control)inData[1];
  new Label((Composite)inData[0],SWT.NONE);
IExpressionButton ceb=new IExpressionButton(){
  public void setExpression(  String expr){
    if (expr != null) {
      ChartUIUtil.setText(control,expr);
    }
  }
  public void setEnabled(  boolean bEnabled){
    control.setEnabled(bEnabled);
  }
  public boolean isEnabled(){
    return control.isEnabled();
  }
  public String getExpression(){
    return ChartUIUtil.getText(control);
  }
  public String getDisplayExpression(){
    return getExpression();
  }
  public void addListener(  Listener listener){
  }
  public void setAccessor(  EAttributeAccessor<String> accessor){
  }
  public String getExpressionType(){
    return null;
  }
  public boolean isCube(){
    return false;
  }
  public void setBindingName(  String bindingName,  boolean bNotifyEvents){
  }
  public void setExpression(  String expr,  boolean bNotifyEvents){
  }
  public void setAssitField(  IAssistField assistField){
  }
  public void setPredefinedQuery(  Object[] predefinedQuery){
  }
}
;
outData=ceb;
break;
}
return outData;
}",0.9870967741935484
67708,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.heightHint=150;
  availableDbObjectsTree.setLayoutData(treeData);
  availableDbObjectsTree.addMenuDetectListener(new MenuDetectListener(){
    public void menuDetected(    MenuDetectEvent e){
      if (availableDbObjectsTree.getSelectionCount() > 0) {
        TreeItem item=availableDbObjectsTree.getSelection()[0];
        if (item.getParentItem() != null) {
          treeMenu.setLocation(e.x,e.y);
          return;
        }
      }
      e.doit=false;
    }
  }
);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      insertTreeItemText();
    }
  }
);
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.minimumHeight=150;
  availableDbObjectsTree.setLayoutData(treeData);
  availableDbObjectsTree.addMenuDetectListener(new MenuDetectListener(){
    public void menuDetected(    MenuDetectEvent e){
      if (availableDbObjectsTree.getSelectionCount() > 0) {
        TreeItem item=availableDbObjectsTree.getSelection()[0];
        if (item.getParentItem() != null) {
          treeMenu.setLocation(e.x,e.y);
          return;
        }
      }
      e.doit=false;
    }
  }
);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      insertTreeItemText();
    }
  }
);
  createObjectTreeMenu();
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  return tablescomposite;
}",0.9893004115226336
67709,"/** 
 * @param pageContainer
 * @param left
 * @param right
 */
private void setWidthHints(SashForm pageContainer,Control left,Control right){
  int leftWidth=left.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  int totalWidth=pageContainer.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  if ((double)leftWidth / (double)totalWidth > 0.4) {
    totalWidth=leftWidth / 40 * 100;
    pageContainer.setWeights(new int[]{leftWidth - 3,totalWidth * 6 / 10});
  }
 else {
    pageContainer.setWeights(new int[]{leftWidth,totalWidth - leftWidth});
  }
}","/** 
 * @param pageContainer
 * @param left
 * @param right
 */
private void setWidthHints(SashForm pageContainer,Control left,Control right){
  int leftWidth=left.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  int rightWidth=right.computeSize(SWT.DEFAULT,SWT.DEFAULT).x;
  pageContainer.setWeights(new int[]{leftWidth,rightWidth});
}",0.7137891077636153
67710,"/** 
 */
public SQLKeywordScanner(){
  super();
  IToken sqlKeywordsToken=new Token(new TextAttribute(ColorManager.getColor(127,0,85),null,SWT.BOLD));
  ArrayList rules=new ArrayList();
  rules.add(new SQLKeywordRule(sqlKeywordsToken,reservedwords));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,types));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,constants));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,functions));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,predicates));
  rules.add(new WhitespaceRule(new IWhitespaceDetector(){
    public boolean isWhitespace(    char c){
      return Character.isWhitespace(c);
    }
  }
));
  setRules((IRule[])rules.toArray(new IRule[rules.size()]));
  this.setDefaultReturnToken(new Token(new TextAttribute(ColorManager.getColor(0,0,0))));
}","/** 
 */
public SQLKeywordScanner(){
  super();
  IToken sqlKeywordsToken=new Token(new TextAttribute(ColorManager.getColor(127,0,85),null,SWT.BOLD));
  ArrayList rules=new ArrayList();
  rules.add(new SQLKeywordRule(sqlKeywordsToken,reservedwords));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,types));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,constants));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,functions));
  rules.add(new SQLKeywordRule(sqlKeywordsToken,predicates));
  rules.add(new WhitespaceRule(new IWhitespaceDetector(){
    public boolean isWhitespace(    char c){
      return Character.isWhitespace(c);
    }
  }
));
  setRules((IRule[])rules.toArray(new IRule[rules.size()]));
  this.setDefaultReturnToken(new Token(new TextAttribute(Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND))));
}",0.9535452322738386
67711,"/** 
 * Create different dataset provider for common and sharing case.
 * @return
 * @since 2.3
 */
protected AggregateOnBindingsFormHandleProvider createDataSetFormProvider(){
  if (input == null) {
    return new AggregateOnBindingsFormHandleProvider();
  }
  final ReportItemHandle rih;
  if (input instanceof List) {
    rih=(ExtendedItemHandle)((List)input).get(0);
  }
 else {
    rih=(ExtendedItemHandle)input;
  }
  if (ChartReportItemUtil.isChildOfMultiViewsHandle(rih)) {
    return new ChartShareBindingsFormHandlerProvider();
  }
  return new AggregateOnBindingsFormHandleProvider(){
    @Override public boolean isEditable(){
      return !ChartItemUtil.isChartInheritGroups(rih);
    }
  }
;
}","/** 
 * Create different dataset provider for common and sharing case.
 * @return
 * @since 2.3
 */
protected AggregateOnBindingsFormHandleProvider createDataSetFormProvider(){
  if (input == null) {
    return new AggregateOnBindingsFormHandleProvider();
  }
  final ReportItemHandle rih;
  if (input instanceof List) {
    rih=(ExtendedItemHandle)((List)input).get(0);
  }
 else {
    rih=(ExtendedItemHandle)input;
  }
  if (ChartReportItemUtil.isChildOfMultiViewsHandle(rih)) {
    return new ChartShareBindingsFormHandlerProvider();
  }
  return new AggregateOnBindingsFormHandleProvider(){
    @Override public boolean isEditable(){
      return !ChartItemUtil.isChartInheritGroups(rih) && !ChartCubeUtil.isAxisChart(rih) && !ChartCubeUtil.isPlotChart(rih);
    }
  }
;
}",0.9528301886792452
67712,"@Override public boolean isEditable(){
  return !ChartItemUtil.isChartInheritGroups(rih);
}","@Override public boolean isEditable(){
  return !ChartItemUtil.isChartInheritGroups(rih) && !ChartCubeUtil.isAxisChart(rih) && !ChartCubeUtil.isPlotChart(rih);
}",0.7222222222222222
67713,"public Object load(){
  ReportItemHandle element=getReportItemHandle();
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  Object value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=element.getDataSet();
  CubeHandle cube=element.getCube();
if (dataset == null && cube == null) value=NONE;
 else if (dataset != null) value=dataset.getQualifiedName();
 else value=cube.getName();
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
value=NONE;
}
BindingInfo info=new BindingInfo(type,value);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
Object name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
return info;
}","public Object load(){
  ReportItemHandle element=getReportItemHandle();
  int type=element.getDataBindingType();
  List referenceList=getAvailableDataBindingReferenceList(element);
  String[] references=new String[referenceList.size() + 1];
  references[0]=NONE;
  for (int i=0; i < referenceList.size(); i++) {
    references[i + 1]=((ReportItemHandle)referenceList.get(i)).getQualifiedName();
  }
  setReferences(references);
  Object value;
switch (type) {
case ReportItemHandle.DATABINDING_TYPE_DATA:
    DataSetHandle dataset=element.getDataSet();
  CubeHandle cube=element.getCube();
if (dataset == null && cube == null) value=NONE;
 else if (dataset != null) value=dataset.getQualifiedName();
 else value=cube.getName();
break;
case ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF:
ReportItemHandle reference=element.getDataBindingReference();
if (reference == null) value=NONE;
 else value=reference.getQualifiedName();
break;
default :
value=NONE;
}
BindingInfo info=new BindingInfo(type,value);
if (ChartReportItemUtil.isChildOfMultiViewsHandle(getReportItemHandle())) {
Object name=element.getContainer().getContainer().getQualifiedName();
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
name=(name == null) ? NONE : name;
info.setBindingValue(name);
info.setReadOnly(true);
}
if (ChartCubeUtil.isPlotChart(element) || ChartCubeUtil.isAxisChart(element)) {
info.setBindingType(ReportItemHandle.DATABINDING_TYPE_REPORT_ITEM_REF);
info.setReadOnly(true);
}
return info;
}",0.9294283697953424
67714,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.DSID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.922077922077922
67715,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.DSID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.922077922077922
67716,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.DSID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.922077922077922
67717,"protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}","protected boolean prePreview(){
  System.clearProperty(IPreviewConstants.SID);
  System.clearProperty(IPreviewConstants.DSID);
  System.clearProperty(IPreviewConstants.MAX_DATASET_ROWS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_ROW_LEVELS);
  System.clearProperty(IPreviewConstants.MAX_CUBE_COLUMN_LEVELS);
  return true;
}",0.922077922077922
67718,"private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.LEFT);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMouseListener(new MouseAdapter(){
    @Override public void mouseDown(    MouseEvent e){
      if (e.button == 3) {
        if (isCubeMode()) {
          table.setMenu(null);
        }
 else {
          TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
          if (item == null) {
            tableViewerColumns.getTable().select(-1);
          }
          boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
          if (item != null && !isSharingChart) {
            if (table.getMenu() != null) {
              table.getMenu().dispose();
            }
            table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
          }
 else {
            table.setMenu(null);
          }
          if (table.getMenu() != null && !isSharingChart) {
            table.getMenu().setVisible(true);
          }
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}","private void createColumnsViewerArea(Composite parent){
  cmpColumnsList=ChartUIUtil.createCompositeWrapper(parent);
  Label label=new Label(cmpColumnsList,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  if (!dataProvider.isInXTabMeasureCell()) {
    columnListDescription=new Label(cmpColumnsList,SWT.WRAP);
{
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      columnListDescription.setLayoutData(gd);
      columnListDescription.setText(Messages.getString(""String_Node_Str""));
    }
  }
  btnShowDataPreviewB=new Button(cmpColumnsList,SWT.CHECK);
  btnShowDataPreviewB.setText(Messages.getString(""String_Node_Str""));
  btnShowDataPreviewB.addListener(SWT.Selection,this);
  final Table table=new Table(cmpColumnsList,SWT.SINGLE | SWT.BORDER | SWT.H_SCROLL| SWT.V_SCROLL| SWT.FULL_SELECTION);
  GridData gd=new GridData(GridData.FILL_BOTH);
  table.setLayoutData(gd);
  table.setLinesVisible(true);
  tableViewerColumns=new TableViewer(table);
  tableViewerColumns.setUseHashlookup(true);
  new TableColumn(table,SWT.LEFT);
  table.addMouseMoveListener(new MouseMoveListener(){
    public void mouseMove(    MouseEvent e){
      if (!dataProvider.isLivePreviewEnabled()) {
        table.setToolTipText(null);
        return;
      }
      String tooltip=null;
      TableItem item=((Table)e.widget).getItem(new Point(e.x,e.y));
      if (item != null) {
        List<Object[]> data=(List<Object[]>)tableViewerColumns.getData(KEY_PREVIEW_DATA);
        if (data != null) {
          StringBuilder sb=new StringBuilder();
          int index=((Table)e.widget).indexOf(item);
          int i=0;
          for (; i < data.size(); i++) {
            if (sb.length() > 45) {
              break;
            }
            if (data.get(i)[index] != null) {
              if (i != 0)               sb.append(""String_Node_Str"");
              sb.append(String.valueOf(data.get(i)[index]));
            }
          }
          if (i == 1 && sb.length() > 45) {
            sb=new StringBuilder(sb.substring(0,45));
            sb.append(""String_Node_Str"");
          }
 else           if (i < data.size()) {
            sb.append(""String_Node_Str"");
          }
          tooltip=sb.toString();
        }
      }
      table.setToolTipText(tooltip);
    }
  }
);
  table.addMenuDetectListener(new MenuDetectListener(){
    public void menuDetected(    MenuDetectEvent arg0){
      if (isCubeMode()) {
        table.setMenu(null);
      }
 else {
        TableItem item=table.getSelection()[0];
        if (item == null) {
          tableViewerColumns.getTable().select(-1);
        }
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (item != null && !isSharingChart) {
          if (table.getMenu() != null) {
            table.getMenu().dispose();
          }
          table.setMenu(createMenuManager(item.getData()).createContextMenu(table));
        }
 else {
          table.setMenu(null);
        }
        if (table.getMenu() != null && !isSharingChart) {
          table.getMenu().setVisible(true);
        }
      }
    }
  }
);
  table.addListener(SWT.Resize,new Listener(){
    public void handleEvent(    Event event){
      Table table=(Table)event.widget;
      int totalWidth=table.getClientArea().width;
      table.getColumn(0).setWidth(totalWidth);
    }
  }
);
  DragSource ds=new DragSource(table,DND.DROP_COPY | DND.DROP_MOVE);
  ds.setTransfer(new Transfer[]{SimpleTextTransfer.getInstance()});
  ColumnNamesTableDragListener dragSourceAdapter=new ColumnNamesTableDragListener(table,itemHandle);
  ds.addDragListener(dragSourceAdapter);
  tableViewerColumns.setContentProvider(new IStructuredContentProvider(){
    /** 
 * Gets the food items for the list
 * @param arg0 the data model
 * @return Object[]
 */
    public Object[] getElements(    Object arg0){
      if (arg0 == null)       return null;
      return (ColumnBindingInfo[])arg0;
    }
    /** 
 * Disposes any created resources
 */
    public void dispose(){
    }
    /** 
 * Called when the input changes
 * @param arg0 the viewer
 * @param arg1 the old input
 * @param arg2 the new input
 */
    public void inputChanged(    Viewer arg0,    Object arg1,    Object arg2){
    }
  }
);
  tableViewerColumns.setLabelProvider(new ILabelProvider(){
    /** 
 * images
 * @param arg0 the element
 * @return Image
 */
    public Image getImage(    Object arg0){
      String imageName=((ColumnBindingInfo)arg0).getImageName();
      if (imageName == null)       return null;
      return UIHelper.getImage(imageName);
    }
    /** 
 * Gets the text for an element
 * @param arg0 the element
 * @return String
 */
    public String getText(    Object arg0){
      return ((ColumnBindingInfo)arg0).getName();
    }
    /** 
 * Adds a listener
 * @param arg0 the listener
 */
    public void addListener(    ILabelProviderListener arg0){
    }
    /** 
 * Disposes any resources
 */
    public void dispose(){
    }
    /** 
 * Returns whether changing the specified property for the specified element affect the label
 * @param arg0 the element
 * @param arg1 the property
 * @return boolean
 */
    public boolean isLabelProperty(    Object arg0,    String arg1){
      return false;
    }
    /** 
 * Removes a listener
 * @param arg0 the listener
 */
    public void removeListener(    ILabelProviderListener arg0){
    }
  }
);
}",0.9580794762207876
67719,"/** 
 * Use this optimized routine for rendering horizontal ONLY text
 * @param gc
 * @param la
 * @param lo
 */
private final void renderHorizontalText(IChartComputation cComp,GC gc,Label la,double dX,double dY){
  final FontDefinition fd=la.getCaption().getFont();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dFH=itm.getFullHeight();
  double dXOffset=0;
  double dW=0;
  final Insets ins=goFactory.scaleInsets(la.getInsets(),_sxs.getDpiResolution() / 72d);
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  final Rectangle r;
  Transform tr=null;
  Transform trOld=new Transform(getDevice());
  gc.getTransform(trOld);
  Region previousClipping=null;
  if (R31Enhance.isR31Available()) {
    r=new Rectangle(0,0,(int)dFW,(int)dFH);
    tr=new Transform(getDevice());
    gc.getTransform(tr);
    if (la.getCaption().getFont().getRotation() != 0) {
      float rotate=(float)la.getCaption().getFont().getRotation();
      double dAngleInRadians=((-rotate * Math.PI) / 180.0);
      double dSineTheta=Math.sin(dAngleInRadians);
      float tTx=(float)(dX - dFW / 2);
      float tTy=(float)(dY - dFH / 2);
      if (rotate > 0)       tTy+=dFW * Math.abs(dSineTheta);
 else       tTx+=dFH * Math.abs(dSineTheta);
      tr.translate((float)(dFW / 2),(float)(dFH / 2));
      tr.translate(tTx,tTy);
      tr.rotate(-rotate);
    }
 else {
      R31Enhance.translate(gc,tr,(float)dX,(float)dY);
    }
    previousClipping=new Region();
    gc.getClipping(previousClipping);
    R31Enhance.setTransform(gc,tr);
  }
 else {
    r=new Rectangle((int)dX,(int)dY,(int)dFW,(int)dFH);
  }
  boolean bFullyTransparent=true;
  if (la.getBackground() != null) {
    bFullyTransparent=(((ColorDefinition)la.getBackground()).getTransparency() == 0);
    R31Enhance.setAlpha(gc,255);
  }
  if (!bFullyTransparent) {
    final Color clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
    final Color clrPreviousBackground=gc.getBackground();
    if (((ColorDefinition)la.getBackground()).isSetTransparency()) {
      R31Enhance.setAlpha(gc,(ColorDefinition)la.getBackground());
    }
    gc.setBackground(clrBackground);
    gc.fillRectangle(r);
    clrBackground.dispose();
    gc.setBackground(clrPreviousBackground);
  }
  gc.setForeground(clrText);
  R31Enhance.setAlpha(gc,la.getCaption().getColor());
  final Font f=(Font)_sxs.createFont(fd);
  gc.setFont(f);
  if (fd.isUnderline() || fd.isStrikethrough()) {
    int lineWidth=(int)(fd.getSize() / 12);
    gc.setLineWidth(lineWidth);
  }
  if (R31Enhance.isR31Available()) {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dXOffset + ins.getLeft()),(int)(dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 1) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 0.5) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
 else {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 1) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 0.5) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
  R31Enhance.setTransform(gc,trOld);
  if (previousClipping != null) {
    gc.setClipping(previousClipping);
    previousClipping.dispose();
  }
  R31Enhance.disposeTransform(trOld);
  R31Enhance.disposeTransform(tr);
  f.dispose();
  clrText.dispose();
  cComp.recycleTextMetrics(itm);
}","/** 
 * Use this optimized routine for rendering horizontal ONLY text
 * @param gc
 * @param la
 * @param lo
 */
private final void renderHorizontalText(IChartComputation cComp,GC gc,Label la,double dX,double dY){
  final FontDefinition fd=la.getCaption().getFont();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dFH=itm.getFullHeight();
  double dXOffset=0;
  double dW=0;
  final Insets ins=goFactory.scaleInsets(la.getInsets(),_sxs.getDpiResolution() / 72d);
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  final Rectangle r;
  Transform tr=null;
  Transform trOld=new Transform(getDevice());
  gc.getTransform(trOld);
  Region previousClipping=null;
  if (R31Enhance.isR31Available()) {
    r=new Rectangle(0,0,(int)dFW,(int)dFH);
    tr=new Transform(getDevice());
    gc.getTransform(tr);
    if (la.getCaption().getFont().getRotation() != 0) {
      float rotate=(float)la.getCaption().getFont().getRotation();
      double dAngleInRadians=((-rotate * Math.PI) / 180.0);
      double dSineTheta=Math.sin(dAngleInRadians);
      float tTx=(float)(dX - dFW / 2);
      float tTy=(float)(dY - dFH / 2);
      if (rotate > 0)       tTy+=dFW * Math.abs(dSineTheta);
 else       tTx+=dFH * Math.abs(dSineTheta);
      tr.translate((float)(dFW / 2),(float)(dFH / 2));
      tr.translate(tTx,tTy);
      tr.rotate(-rotate);
    }
 else {
      R31Enhance.translate(gc,tr,(float)dX,(float)dY);
    }
    previousClipping=new Region();
    gc.getClipping(previousClipping);
    R31Enhance.setTransform(gc,tr);
  }
 else {
    r=new Rectangle((int)dX,(int)dY,(int)dFW,(int)dFH);
  }
  boolean bFullyTransparent=true;
  if (la.getBackground() != null) {
    bFullyTransparent=(((ColorDefinition)la.getBackground()).getTransparency() == 0);
    R31Enhance.setAlpha(gc,255);
  }
  if (!bFullyTransparent) {
    final Color clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
    final Color clrPreviousBackground=gc.getBackground();
    if (((ColorDefinition)la.getBackground()).isSetTransparency()) {
      R31Enhance.setAlpha(gc,(ColorDefinition)la.getBackground());
    }
    gc.setBackground(clrBackground);
    gc.fillRectangle(r);
    clrBackground.dispose();
    gc.setBackground(clrPreviousBackground);
  }
  gc.setForeground(clrText);
  R31Enhance.setAlpha(gc,la.getCaption().getColor());
  final Font f=(Font)_sxs.createFont(fd);
  gc.setFont(f);
  TextStyle style=new TextStyle(f,null,null);
  style.underline=fd.isUnderline();
  style.strikeout=fd.isStrikethrough();
  TextLayout layout=new TextLayout(gc.getDevice());
  if (R31Enhance.isR31Available()) {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      int x=(int)(dXOffset + ins.getLeft());
      int y=(int)(dH * i + ins.getTop());
      layout.setText(oText);
      layout.setStyle(style,0,oText.length());
      layout.draw(gc,x,y);
    }
  }
 else {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      int x=(int)(dX + dXOffset + ins.getLeft());
      int y=(int)(dY + dH * i + ins.getTop());
      layout.setText(oText);
      layout.setStyle(style,0,oText.length());
      layout.draw(gc,x,y);
    }
  }
  R31Enhance.setTransform(gc,trOld);
  if (previousClipping != null) {
    gc.setClipping(previousClipping);
    previousClipping.dispose();
  }
  R31Enhance.disposeTransform(trOld);
  R31Enhance.disposeTransform(tr);
  layout.dispose();
  f.dispose();
  clrText.dispose();
  cComp.recycleTextMetrics(itm);
}",0.7713600697471665
67720,"protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getStartX());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getEndX()) - col;
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (data.getDataType() == SheetData.IMAGE) {
    addEmptyData(data,container);
  }
  while (container != null) {
    if (container instanceof XlsCell) {
      XlsCell cell=(XlsCell)container;
      data.setRowSpanInDesign(cell.getRowSpan() - 1);
      break;
    }
 else {
      container=container.getParent();
    }
  }
}","protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  if (data.getStartX() == data.getEndX())   return;
  int col=axis.getColumnIndexByCoordinate(data.getStartX());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getEndX()) - col;
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (data.getDataType() == SheetData.IMAGE) {
    addEmptyData(data,container);
  }
  while (container != null) {
    if (container instanceof XlsCell) {
      XlsCell cell=(XlsCell)container;
      data.setRowSpanInDesign(cell.getRowSpan() - 1);
      break;
    }
 else {
      container=container.getParent();
    }
  }
}",0.9715536105032824
67721,"public void close() throws BirtException {
  if (specifiedHeight > currentBP) {
    setContentHeight(specifiedHeight);
  }
 else {
    setContentHeight(currentBP);
  }
  finished=true;
}","public void close() throws BirtException {
  if (context.isFixedLayout()) {
    setContentHeight(specifiedHeight);
  }
 else {
    setContentHeight(Math.max(specifiedHeight,currentBP));
  }
  finished=true;
}",0.3553299492385787
67722,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()));
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    iscWidth=new IntegerSpinControl(cmpContent,SWT.NONE,laCurrent.getThickness());
    GridData gdISCWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdISCWidth.horizontalSpan=5;
    iscWidth.setLayoutData(gdISCWidth);
    iscWidth.setMinimum(1);
    iscWidth.setMaximum(100);
    iscWidth.addListener(this);
    iscWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,context,this.laCurrent.getColor(),false,false);
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()));
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    iscWidth=new IntegerSpinControl(cmpContent,SWT.NONE,laCurrent.getThickness());
    GridData gdISCWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdISCWidth.horizontalSpan=5;
    iscWidth.setLayoutData(gdISCWidth);
    iscWidth.setMinimum(1);
    iscWidth.setMaximum(100);
    iscWidth.addListener(this);
    iscWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,context,this.laCurrent.getColor(),false,false,false);
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}",0.9989327641408752
67723,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,cdShadow,false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glAttributes=new GridLayout();
  glAttributes.horizontalSpacing=5;
  glAttributes.verticalSpacing=5;
  glAttributes.marginHeight=7;
  glAttributes.marginWidth=7;
  GridLayout glGeneral=new GridLayout();
  glGeneral.numColumns=2;
  glGeneral.horizontalSpacing=5;
  glGeneral.verticalSpacing=5;
  FillLayout flOutline=new FillLayout();
  this.setLayout(flMain);
  if (sGroupName == null || sGroupName.length() == 0) {
    grpAttributes=new Composite(this,SWT.NONE);
  }
 else {
    grpAttributes=new Group(this,SWT.NONE);
    ((Group)grpAttributes).setText(sGroupName);
  }
  grpAttributes.setLayout(glAttributes);
  cmpGeneral=new Composite(grpAttributes,SWT.NONE);
  GridData gdCMPGeneral=new GridData(GridData.FILL_HORIZONTAL);
  cmpGeneral.setLayoutData(gdCMPGeneral);
  cmpGeneral.setLayout(glGeneral);
  boolean bEnableUI=bEnabled && this.lblCurrent.isVisible();
  if (attributesContext.isVisibilityEnabled) {
    cbVisible=new Button(cmpGeneral,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=2;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setSelection(this.lblCurrent.isVisible());
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (attributesContext.isLabelEnabled) {
    lblLabel=new Label(cmpGeneral,SWT.NONE);
{
      GridData gd=new GridData();
      lblLabel.setLayoutData(gd);
      lblLabel.setText(Messages.getString(""String_Node_Str""));
    }
    txtLabel=new ExternalizedTextEditorComposite(cmpGeneral,SWT.BORDER | SWT.SINGLE,-1,-1,wizardContext.getUIServiceProvider().getRegisteredKeys(),wizardContext.getUIServiceProvider(),""String_Node_Str"");
{
      GridData gd=new GridData(GridData.FILL_BOTH);
      txtLabel.setLayoutData(gd);
      txtLabel.addListener(this);
    }
  }
  if (attributesContext.isPositionEnabled) {
    lblPosition=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLPosition=new GridData();
    lblPosition.setLayoutData(gdLBLPosition);
    lblPosition.setText(Messages.getString(""String_Node_Str""));
    lblPosition.setEnabled(bEnableUI);
    cmbPosition=new Combo(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY);
    GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
    cmbPosition.setLayoutData(gdCMBPosition);
    cmbPosition.addSelectionListener(this);
    cmbPosition.setEnabled(bEnableUI);
  }
  if (attributesContext.isFontEnabled) {
    lblFont=new Label(cmpGeneral,SWT.NONE);
    GridData gdLFont=new GridData();
    lblFont.setLayoutData(gdLFont);
    lblFont.setText(Messages.getString(""String_Node_Str""));
    lblFont.setEnabled(bEnableUI);
    fdcFont=new FontDefinitionComposite(cmpGeneral,SWT.NONE,wizardContext,this.fdCurrent,this.cdFont,attributesContext.isFontAlignmentEnabled);
    GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
    gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
    gdFDCFont.grabExcessVerticalSpace=false;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
    fdcFont.setEnabled(bEnableUI);
  }
  lblFill=new Label(cmpGeneral,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  lblFill.setEnabled(bEnableUI);
  fccBackground=new FillChooserComposite(cmpGeneral,SWT.NONE,wizardContext,fBackground,false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  fccBackground.setEnabled(bEnableUI);
  if (attributesContext.isShadowEnabled) {
    lblShadow=new Label(cmpGeneral,SWT.NONE);
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpGeneral,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,cdShadow);
    GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(bEnableUI);
  }
  grpOutline=new Group(grpAttributes,SWT.NONE);
  GridData gdGOutline=new GridData(GridData.FILL_HORIZONTAL);
  grpOutline.setLayoutData(gdGOutline);
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  grpOutline.setLayout(flOutline);
  grpOutline.setEnabled(bEnableUI);
  liacOutline=new LineAttributesComposite(grpOutline,SWT.NONE,wizardContext,laCurrent,true,true,true);
  liacOutline.addListener(this);
  liacOutline.setAttributesEnabled(bEnableUI);
  if (attributesContext.isInsetsEnabled) {
    icInsets=new InsetsComposite(grpAttributes,SWT.NONE,insets,sUnits,wizardContext.getUIServiceProvider());
    GridData gdICInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdICInsets.grabExcessVerticalSpace=false;
    icInsets.addListener(this);
    icInsets.setLayoutData(gdICInsets);
    icInsets.setEnabled(bEnableUI);
  }
  populateLists();
}",0.9807563427477262
67724,"private void placeComponents(){
  GridLayout glContent=new GridLayout(3,true);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_HORIZONTAL);
  GridLayout glGRPAccline=new GridLayout(2,false);
  glGRPAccline.verticalSpacing=0;
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  Composite cmpOrientation=new Composite(grpAccLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpOrientation.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpOrientation.setLayoutData(gd);
  }
  lblOrientation=new Label(cmpOrientation,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(cmpOrientation,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayoutData(gdGRPLine);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpShadow.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpShadow.setLayoutData(gd);
  }
  lblShadow=new Label(cmpShadow,SWT.NONE);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpShadow,SWT.NONE,context,((BubbleSeries)series).getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}","private void placeComponents(){
  GridLayout glContent=new GridLayout(3,true);
  glContent.marginHeight=2;
  glContent.marginWidth=2;
  this.setLayout(glContent);
  grpAccLine=new Group(this,SWT.NONE);
  GridData gdGRPAccLine=new GridData(GridData.FILL_HORIZONTAL);
  GridLayout glGRPAccline=new GridLayout(2,false);
  glGRPAccline.verticalSpacing=0;
  grpAccLine.setLayout(glGRPAccline);
  grpAccLine.setLayoutData(gdGRPAccLine);
  grpAccLine.setText(Messages.getString(""String_Node_Str""));
  liacAccLine=new LineAttributesComposite(grpAccLine,SWT.NONE,context,((BubbleSeries)series).getAccLineAttributes(),true,true,true);
  GridData gdLIACAccLine=new GridData(GridData.FILL_BOTH);
  gdLIACAccLine.horizontalSpan=2;
  liacAccLine.setLayoutData(gdLIACAccLine);
  liacAccLine.addListener(this);
  Composite cmpOrientation=new Composite(grpAccLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpOrientation.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpOrientation.setLayoutData(gd);
  }
  lblOrientation=new Label(cmpOrientation,SWT.NONE);
  lblOrientation.setText(Messages.getString(""String_Node_Str""));
  cmbOrientation=new Combo(cmpOrientation,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBOrientation=new GridData(GridData.FILL_HORIZONTAL);
  cmbOrientation.setLayoutData(gdCMBOrientation);
  cmbOrientation.addSelectionListener(this);
  grpLine=new Group(this,SWT.NONE);
  GridData gdGRPLine=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPLine.horizontalSpan=2;
  grpLine.setLayoutData(gdGRPLine);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((BubbleSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginBottom=0;
    gl.verticalSpacing=0;
    cmpShadow.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpShadow.setLayoutData(gd);
  }
  lblShadow=new Label(cmpShadow,SWT.NONE);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((BubbleSeries)series).getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((BubbleSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((BubbleSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  enableLineSettings(((BubbleSeries)series).getLineAttributes().isVisible());
  enableAccLineSettings(((BubbleSeries)series).getAccLineAttributes().isVisible());
  populateLists();
}",0.9736055129371992
67725,"private void placeComponents(){
  this.setLayout(new GridLayout());
  grpLine=new Group(this,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((LineSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  if (isShadowNeeded()) {
    Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
      GridLayout gl=new GridLayout(2,false);
      gl.marginHeight=0;
      gl.marginBottom=0;
      gl.verticalSpacing=0;
      cmpShadow.setLayout(gl);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      cmpShadow.setLayoutData(gd);
    }
    lblShadow=new Label(cmpShadow,SWT.NONE);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    fccShadow=new FillChooserComposite(cmpShadow,SWT.NONE,context,((LineSeries)series).getShadowColor(),false,false);
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries && (series.isStacked()))) {
    btnMissingValue=new Button(cmp,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
}","private void placeComponents(){
  this.setLayout(new GridLayout());
  grpLine=new Group(this,SWT.NONE);
  GridLayout glLine=new GridLayout(2,false);
  glLine.horizontalSpacing=0;
  grpLine.setLayout(glLine);
  grpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  grpLine.setText(Messages.getString(""String_Node_Str""));
  Composite cmpLine=new Composite(grpLine,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    gl.marginHeight=0;
    gl.marginWidth=0;
    gl.horizontalSpacing=0;
    gl.verticalSpacing=0;
    cmpLine.setLayout(gl);
    cmpLine.setLayoutData(new GridData(GridData.FILL_BOTH));
  }
  liacLine=new LineAttributesComposite(cmpLine,SWT.NONE,context,((LineSeries)series).getLineAttributes(),true,true,true);
  GridData gdLIACLine=new GridData(GridData.FILL_HORIZONTAL);
  gdLIACLine.horizontalSpan=2;
  liacLine.setLayoutData(gdLIACLine);
  liacLine.addListener(this);
  if (isShadowNeeded()) {
    Composite cmpShadow=new Composite(cmpLine,SWT.NONE);
{
      GridLayout gl=new GridLayout(2,false);
      gl.marginHeight=0;
      gl.marginBottom=0;
      gl.verticalSpacing=0;
      cmpShadow.setLayout(gl);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalSpan=2;
      cmpShadow.setLayoutData(gd);
    }
    lblShadow=new Label(cmpShadow,SWT.NONE);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    fccShadow=new FillChooserComposite(cmpShadow,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,context,((LineSeries)series).getShadowColor());
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
  }
  Composite cmp=new Composite(grpLine,SWT.NONE);
  cmp.setLayout(new GridLayout());
  btnPalette=new Button(cmp,SWT.CHECK);
{
    btnPalette.setText(Messages.getString(""String_Node_Str""));
    btnPalette.setSelection(((LineSeries)series).isPaletteLineColor());
    btnPalette.addSelectionListener(this);
  }
  btnCurve=new Button(cmp,SWT.CHECK);
{
    btnCurve.setText(Messages.getString(""String_Node_Str""));
    btnCurve.setSelection(((LineSeries)series).isCurve());
    btnCurve.addSelectionListener(this);
  }
  if (!(series instanceof AreaSeries && (series.isStacked()))) {
    btnMissingValue=new Button(cmp,SWT.CHECK);
{
      btnMissingValue.setText(Messages.getString(""String_Node_Str""));
      btnMissingValue.setSelection(((LineSeries)series).isConnectMissingValue());
      btnMissingValue.addSelectionListener(this);
    }
  }
  enableLineSettings(((LineSeries)series).getLineAttributes().isVisible());
}",0.961472765230594
67726,"private void createSeriesDetail(Composite cmpRight){
  lblRatio=new Label(cmpRight,SWT.NONE);
{
    lblRatio.setText(Messages.getString(""String_Node_Str""));
    lblRatio.setToolTipText(TOOLTIP_RATIO);
  }
  sRatio=new Slider(cmpRight,SWT.HORIZONTAL);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    sRatio.setLayoutData(gridData);
    sRatio.setValues((int)(series.getRatio() * 10),1,101,1,1,10);
    sRatio.setToolTipText(String.valueOf(series.getRatio()));
    sRatio.setEnabled(true);
    sRatio.addSelectionListener(this);
    sRatio.addListener(SWT.FocusOut,this);
    sRatio.addListener(SWT.KeyDown,this);
    sRatio.addListener(SWT.Traverse,this);
  }
  lblRotation=new Label(cmpRight,SWT.NONE);
{
    lblRotation.setText(Messages.getString(""String_Node_Str""));
    lblRotation.setToolTipText(TOOLTIP_ROTATION);
  }
  sRotation=new Slider(cmpRight,SWT.HORIZONTAL);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    sRotation.setLayoutData(gridData);
    sRotation.setValues((int)(series.getRotation()),0,360,1,1,10);
    sRotation.setToolTipText(String.valueOf(series.getRotation()));
    sRotation.setEnabled(true);
    sRotation.addSelectionListener(this);
    sRotation.addListener(SWT.FocusOut,this);
    sRotation.addListener(SWT.KeyDown,this);
    sRotation.addListener(SWT.Traverse,this);
  }
  btnDirection=new Button(cmpRight,SWT.CHECK);
{
    btnDirection.setText(Messages.getString(""String_Node_Str""));
    btnDirection.setToolTipText(Messages.getString(""String_Node_Str""));
    btnDirection.addListener(SWT.Selection,this);
    btnDirection.setSelection(series.isClockwise());
  }
  Group grpSlice=new Group(cmpRight,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=3;
    grpSlice.setLayoutData(gd);
    grpSlice.setLayout(gridLayout);
    grpSlice.setText(Messages.getString(""String_Node_Str""));
  }
  lblExpSliWhen=new Label(grpSlice,SWT.NONE);
{
    lblExpSliWhen.setText(Messages.getString(""String_Node_Str""));
    lblExpSliWhen.setToolTipText(TOOLTIP_EXPLODE_SLICE_WHEN);
  }
  txtExplode=new TextEditorComposite(grpSlice,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtExplode.setLayoutData(gd);
    if (series.getExplosionExpression() != null) {
      txtExplode.setText(series.getExplosionExpression());
    }
    txtExplode.setToolTipText(Messages.getString(""String_Node_Str""));
    txtExplode.addListener(this);
  }
  btnBuilder=new Button(grpSlice,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    if (context.getUIServiceProvider() == null) {
      btnBuilder.setEnabled(false);
    }
  }
  lblExpDistance=new Label(grpSlice,SWT.NONE);
{
    lblExpDistance.setText(Messages.getString(""String_Node_Str""));
    lblExpDistance.setToolTipText(TOOLTIP_EXPLOSION_DISTANCE);
  }
  iscExplosion=new Spinner(grpSlice,SWT.BORDER);
{
    GridData gdISCExplosion=new GridData(GridData.FILL_HORIZONTAL);
    gdISCExplosion.horizontalSpan=2;
    iscExplosion.setLayoutData(gdISCExplosion);
    iscExplosion.setMinimum(0);
    iscExplosion.setMaximum(100);
    iscExplosion.setSelection(series.getExplosion());
    iscExplosion.addSelectionListener(this);
  }
  Label lblSliceOutline=new Label(grpSlice,SWT.NONE);
  GridData gdLBLSliceOutline=new GridData();
  lblSliceOutline.setLayoutData(gdLBLSliceOutline);
  lblSliceOutline.setText(Messages.getString(""String_Node_Str""));
  fccSliceOutline=new FillChooserComposite(grpSlice,SWT.NONE,context,series.getSliceOutline(),false,false);
  GridData gdFCCSliceOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCSliceOutline.horizontalSpan=2;
  fccSliceOutline.setLayoutData(gdFCCSliceOutline);
  fccSliceOutline.addListener(this);
}","private void createSeriesDetail(Composite cmpRight){
  lblRatio=new Label(cmpRight,SWT.NONE);
{
    lblRatio.setText(Messages.getString(""String_Node_Str""));
    lblRatio.setToolTipText(TOOLTIP_RATIO);
  }
  sRatio=new Slider(cmpRight,SWT.HORIZONTAL);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    sRatio.setLayoutData(gridData);
    sRatio.setValues((int)(series.getRatio() * 10),1,101,1,1,10);
    sRatio.setToolTipText(String.valueOf(series.getRatio()));
    sRatio.setEnabled(true);
    sRatio.addSelectionListener(this);
    sRatio.addListener(SWT.FocusOut,this);
    sRatio.addListener(SWT.KeyDown,this);
    sRatio.addListener(SWT.Traverse,this);
  }
  lblRotation=new Label(cmpRight,SWT.NONE);
{
    lblRotation.setText(Messages.getString(""String_Node_Str""));
    lblRotation.setToolTipText(TOOLTIP_ROTATION);
  }
  sRotation=new Slider(cmpRight,SWT.HORIZONTAL);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    gridData.horizontalSpan=2;
    sRotation.setLayoutData(gridData);
    sRotation.setValues((int)(series.getRotation()),0,360,1,1,10);
    sRotation.setToolTipText(String.valueOf(series.getRotation()));
    sRotation.setEnabled(true);
    sRotation.addSelectionListener(this);
    sRotation.addListener(SWT.FocusOut,this);
    sRotation.addListener(SWT.KeyDown,this);
    sRotation.addListener(SWT.Traverse,this);
  }
  btnDirection=new Button(cmpRight,SWT.CHECK);
{
    btnDirection.setText(Messages.getString(""String_Node_Str""));
    btnDirection.setToolTipText(Messages.getString(""String_Node_Str""));
    btnDirection.addListener(SWT.Selection,this);
    btnDirection.setSelection(series.isClockwise());
  }
  Group grpSlice=new Group(cmpRight,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(3,false);
    gridLayout.marginWidth=0;
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.horizontalSpan=3;
    grpSlice.setLayoutData(gd);
    grpSlice.setLayout(gridLayout);
    grpSlice.setText(Messages.getString(""String_Node_Str""));
  }
  lblExpSliWhen=new Label(grpSlice,SWT.NONE);
{
    lblExpSliWhen.setText(Messages.getString(""String_Node_Str""));
    lblExpSliWhen.setToolTipText(TOOLTIP_EXPLODE_SLICE_WHEN);
  }
  txtExplode=new TextEditorComposite(grpSlice,SWT.BORDER | SWT.SINGLE);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    txtExplode.setLayoutData(gd);
    if (series.getExplosionExpression() != null) {
      txtExplode.setText(series.getExplosionExpression());
    }
    txtExplode.setToolTipText(Messages.getString(""String_Node_Str""));
    txtExplode.addListener(this);
  }
  btnBuilder=new Button(grpSlice,SWT.PUSH);
{
    GridData gdBTNBuilder=new GridData();
    gdBTNBuilder.heightHint=20;
    gdBTNBuilder.widthHint=20;
    btnBuilder.setLayoutData(gdBTNBuilder);
    btnBuilder.setImage(UIHelper.getImage(""String_Node_Str""));
    btnBuilder.addSelectionListener(this);
    btnBuilder.setToolTipText(Messages.getString(""String_Node_Str""));
    btnBuilder.getImage().setBackground(btnBuilder.getBackground());
    if (context.getUIServiceProvider() == null) {
      btnBuilder.setEnabled(false);
    }
  }
  lblExpDistance=new Label(grpSlice,SWT.NONE);
{
    lblExpDistance.setText(Messages.getString(""String_Node_Str""));
    lblExpDistance.setToolTipText(TOOLTIP_EXPLOSION_DISTANCE);
  }
  iscExplosion=new Spinner(grpSlice,SWT.BORDER);
{
    GridData gdISCExplosion=new GridData(GridData.FILL_HORIZONTAL);
    gdISCExplosion.horizontalSpan=2;
    iscExplosion.setLayoutData(gdISCExplosion);
    iscExplosion.setMinimum(0);
    iscExplosion.setMaximum(100);
    iscExplosion.setSelection(series.getExplosion());
    iscExplosion.addSelectionListener(this);
  }
  Label lblSliceOutline=new Label(grpSlice,SWT.NONE);
  GridData gdLBLSliceOutline=new GridData();
  lblSliceOutline.setLayoutData(gdLBLSliceOutline);
  lblSliceOutline.setText(Messages.getString(""String_Node_Str""));
  fccSliceOutline=new FillChooserComposite(grpSlice,SWT.NONE,context,series.getSliceOutline(),false,false,false);
  GridData gdFCCSliceOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdFCCSliceOutline.horizontalSpan=2;
  fccSliceOutline.setLayoutData(gdFCCSliceOutline);
  fccSliceOutline.addListener(this);
}",0.9992896045465308
67727,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_LEGEND_BLOCK);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.horizontalSpacing=5;
    glMain.verticalSpacing=5;
    glMain.marginHeight=7;
    glMain.marginWidth=7;
    cmpContent.setLayout(glMain);
  }
  Group grpTxtArea=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=7;
    layout.marginWidth=7;
    grpTxtArea.setLayout(layout);
    grpTxtArea.setLayoutData(new GridData(GridData.FILL_BOTH));
    grpTxtArea.setText(Messages.getString(""String_Node_Str""));
  }
  Label lblFormat=new Label(grpTxtArea,SWT.NONE);
{
    lblFormat.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpFormat=new Composite(grpTxtArea,SWT.BORDER);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginWidth=0;
    layout.marginHeight=0;
    layout.horizontalSpacing=0;
    cmpFormat.setLayout(layout);
    cmpFormat.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    cmpFormat.setBackground(cmpFormat.getDisplay().getSystemColor(SWT.COLOR_WHITE));
  }
  fsp=new FormatSpecifierPreview(cmpFormat,SWT.NONE,false);
{
    GridData gd=new GridData();
    gd.grabExcessHorizontalSpace=true;
    gd.horizontalAlignment=SWT.CENTER;
    fsp.setLayoutData(gd);
    fsp.updatePreview(getChart().getLegend().getFormatSpecifier());
  }
  btnFormatSpecifier=new Button(cmpFormat,SWT.PUSH);
{
    GridData gd=new GridData();
    btnFormatSpecifier.setLayoutData(gd);
    btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    btnFormatSpecifier.addListener(SWT.Selection,this);
  }
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getText().getFont(),getLegend().getText().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_HORIZONTAL);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  new Label(grpTxtArea,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  spnEllipsis=new Spinner(grpTxtArea,SWT.BORDER);
{
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    spnEllipsis.setLayoutData(gd);
    spnEllipsis.setMinimum(0);
    spnEllipsis.setSelection(getLegend().getEllipsis());
    spnEllipsis.setToolTipText(Messages.getString(""String_Node_Str""));
    spnEllipsis.addListener(SWT.Selection,this);
  }
  Label lblShadow=new Label(grpTxtArea,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpTxtArea,SWT.NONE,getContext(),getLegend().getClientArea().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Label lblBackground=new Label(grpTxtArea,SWT.NONE);
  lblBackground.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpTxtArea,SWT.DROP_DOWN | SWT.READ_ONLY,getContext(),getChart().getLegend().getClientArea().getBackground(),true,true);
{
    GridData gridData=new GridData(GridData.FILL_HORIZONTAL);
    fccBackground.setLayoutData(gridData);
    fccBackground.addListener(this);
  }
  Group grpOutline=new Group(grpTxtArea,SWT.NONE);
  GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
  gdGRPOutline.horizontalSpan=2;
  grpOutline.setLayoutData(gdGRPOutline);
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getLegend().getClientArea().getOutline(),true,true,true);
  outlineText.addListener(this);
  outlineText.setAttributesEnabled(true);
  icText=new InsetsComposite(grpTxtArea,SWT.NONE,getLegend().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
  gdInsets.horizontalSpan=2;
  icText.setLayoutData(gdInsets);
  icText.addListener(this);
  Group grpSeparator=new Group(cmpContent,SWT.NONE);
{
    GridLayout layout=new GridLayout();
    layout.marginHeight=0;
    layout.marginWidth=5;
    grpSeparator.setLayout(layout);
    grpSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpSeparator.setText(Messages.getString(""String_Node_Str""));
  }
  lineSeparator=new LineAttributesComposite(grpSeparator,SWT.NONE,getContext(),getLegend().getSeparator(),true,true,true);
{
    lineSeparator.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    lineSeparator.addListener(this);
    lineSeparator.setAttributesEnabled(true);
  }
  return cmpContent;
}",0.9993989180524944
67728,"private void createClientArea(Group grpAreaWithin){
  boolean isNot3D=!ChartUIUtil.is3DType(getChart());
  Label lblShadow=new Label(grpAreaWithin,SWT.NONE);
{
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(isNot3D);
  }
  fccShadow=new FillChooserComposite(grpAreaWithin,SWT.NONE,getContext(),getBlockForProcessing().getClientArea().getShadowColor(),false,false);
{
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(isNot3D);
  }
  Group grpOutline=new Group(grpAreaWithin,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    gdGRPOutline.horizontalSpan=2;
    gdGRPOutline.verticalSpan=2;
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  outlineWithin=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getClientArea().getOutline(),true,true,false);
{
    outlineWithin.addListener(this);
    outlineWithin.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(getChart()));
  }
  icWithin=new InsetsComposite(grpAreaWithin,SWT.NONE,getBlockForProcessing().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdInsets.horizontalSpan=2;
    icWithin.setLayoutData(gdInsets);
    icWithin.setEnabled(isNot3D);
  }
}","private void createClientArea(Group grpAreaWithin){
  boolean isNot3D=!ChartUIUtil.is3DType(getChart());
  Label lblShadow=new Label(grpAreaWithin,SWT.NONE);
{
    GridData gdLBLShadow=new GridData();
    lblShadow.setLayoutData(gdLBLShadow);
    lblShadow.setText(Messages.getString(""String_Node_Str""));
    lblShadow.setEnabled(isNot3D);
  }
  fccShadow=new FillChooserComposite(grpAreaWithin,SWT.NONE,getContext(),getBlockForProcessing().getClientArea().getShadowColor(),false,false,false);
{
    GridData gdFCCShadow=new GridData(GridData.FILL_HORIZONTAL);
    fccShadow.setLayoutData(gdFCCShadow);
    fccShadow.addListener(this);
    fccShadow.setEnabled(isNot3D);
  }
  Group grpOutline=new Group(grpAreaWithin,SWT.NONE);
{
    GridData gdGRPOutline=new GridData(GridData.FILL_HORIZONTAL);
    gdGRPOutline.horizontalSpan=2;
    gdGRPOutline.verticalSpan=2;
    grpOutline.setLayoutData(gdGRPOutline);
    grpOutline.setLayout(new FillLayout());
    grpOutline.setText(Messages.getString(""String_Node_Str""));
  }
  outlineWithin=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getBlockForProcessing().getClientArea().getOutline(),true,true,false);
{
    outlineWithin.addListener(this);
    outlineWithin.setAttributesEnabled(ChartUIUtil.is3DWallFloorSet(getChart()));
  }
  icWithin=new InsetsComposite(grpAreaWithin,SWT.NONE,getBlockForProcessing().getClientArea().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
{
    GridData gdInsets=new GridData(GridData.FILL_HORIZONTAL);
    gdInsets.horizontalSpan=2;
    icWithin.setLayoutData(gdInsets);
    icWithin.setEnabled(isNot3D);
  }
}",0.9981572481572482
67729,"private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}","private void createAttributeArea(Composite parent){
  grpAttributes=new Group(parent,SWT.NONE);
{
    grpAttributes.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
    grpAttributes.setLayout(new GridLayout(2,false));
    grpAttributes.setText(Messages.getString(""String_Node_Str""));
  }
  lblPosition=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLPosition=new GridData();
  lblPosition.setLayoutData(gdLBLPosition);
  lblPosition.setText(Messages.getString(""String_Node_Str""));
  cmbPosition=new Combo(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBPosition=new GridData(GridData.FILL_BOTH);
  gdCMBPosition.verticalAlignment=SWT.CENTER;
  cmbPosition.setLayoutData(gdCMBPosition);
  cmbPosition.addSelectionListener(this);
  lblFont=new Label(grpAttributes,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getCaption().getFont(),getSeriesForProcessing().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(grpAttributes,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(grpAttributes,SWT.NONE,getContext(),getSeriesForProcessing().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  gdFCCBackground.verticalAlignment=SWT.CENTER;
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(grpAttributes,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
  fccShadow=new FillChooserComposite(grpAttributes,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,getContext(),getSeriesForProcessing().getLabel().getShadowColor());
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  gdFCCShadow.verticalAlignment=SWT.CENTER;
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
}",0.9586844809866392
67730,"protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}","protected Composite getComponent(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.POPUP_SERIES_CURVE_FITTING);
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glMain=new GridLayout();
    glMain.numColumns=2;
    cmpContent.setLayout(glMain);
  }
  Composite cmpLeft=new Composite(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout();
    gl.numColumns=2;
    cmpLeft.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_VERTICAL);
    cmpLeft.setLayoutData(gd);
  }
  lblValue=new Label(cmpLeft,SWT.NONE);
{
    GridData gd=new GridData();
    lblValue.setLayoutData(gd);
    lblValue.setText(Messages.getString(""String_Node_Str""));
  }
  List keys=null;
  if (getContext().getUIServiceProvider() != null) {
    keys=getContext().getUIServiceProvider().getRegisteredKeys();
  }
  txtValue=new ExternalizedTextEditorComposite(cmpLeft,SWT.BORDER | SWT.SINGLE,-1,-1,keys,getContext().getUIServiceProvider(),getTrendline().getLabel().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=125;
    txtValue.setLayoutData(gd);
    txtValue.addListener(this);
  }
  lblAnchor=new Label(cmpLeft,SWT.NONE);
  GridData gdLBLAnchor=new GridData();
  lblAnchor.setLayoutData(gdLBLAnchor);
  lblAnchor.setText(Messages.getString(""String_Node_Str""));
  cmbAnchor=new Combo(cmpLeft,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCBAnchor=new GridData(GridData.FILL_HORIZONTAL);
  cmbAnchor.setLayoutData(gdCBAnchor);
  cmbAnchor.addSelectionListener(this);
  cmbAnchor.setVisibleItemCount(30);
  Composite cmpRight=new Composite(cmpContent,SWT.NONE);
{
    cmpRight.setLayout(new FillLayout());
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    cmpRight.setLayoutData(gd);
  }
  trendLineText=new LineAttributesComposite(cmpRight,SWT.NONE,getContext(),getTrendline().getLineAttributes(),true,true,false);
  trendLineText.addListener(this);
  Group cmpLabel=new Group(cmpContent,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabel.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    cmpLabel.setLayoutData(gd);
    cmpLabel.setText(Messages.getString(""String_Node_Str""));
  }
  Composite cmpLabelInner=new Composite(cmpLabel,SWT.NONE);
{
    GridLayout gl=new GridLayout(2,false);
    cmpLabelInner.setLayout(gl);
    GridData gd=new GridData(GridData.FILL_BOTH);
    gd.verticalAlignment=SWT.BEGINNING;
    cmpLabelInner.setLayoutData(gd);
  }
  btnVisible=new Button(cmpLabelInner,SWT.CHECK);
  GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
  gdCBVisible.horizontalSpan=2;
  btnVisible.setLayoutData(gdCBVisible);
  btnVisible.setSelection(getTrendline().getLabel().isVisible());
  btnVisible.setText(Messages.getString(""String_Node_Str""));
  btnVisible.addSelectionListener(this);
  lblFont=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFont=new GridData();
  lblFont.setLayoutData(gdLFont);
  lblFont.setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getCaption().getFont(),getTrendline().getLabel().getCaption().getColor(),false);
  GridData gdFDCFont=new GridData(GridData.FILL_BOTH);
  gdFDCFont.widthHint=fdcFont.getPreferredSize().x;
  gdFDCFont.grabExcessVerticalSpace=false;
  fdcFont.setLayoutData(gdFDCFont);
  fdcFont.addListener(this);
  lblFill=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLFill=new GridData();
  lblFill.setLayoutData(gdLFill);
  lblFill.setText(Messages.getString(""String_Node_Str""));
  fccBackground=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getBackground(),false,false);
  GridData gdFCCBackground=new GridData(GridData.FILL_BOTH);
  fccBackground.setLayoutData(gdFCCBackground);
  fccBackground.addListener(this);
  lblShadow=new Label(cmpLabelInner,SWT.NONE);
  GridData gdLBLShadow=new GridData();
  lblShadow.setLayoutData(gdLBLShadow);
  lblShadow.setText(Messages.getString(""String_Node_Str""));
  fccShadow=new FillChooserComposite(cmpLabelInner,SWT.NONE,getContext(),getTrendline().getLabel().getShadowColor(),false,false,false);
  GridData gdFCCShadow=new GridData(GridData.FILL_BOTH);
  fccShadow.setLayoutData(gdFCCShadow);
  fccShadow.addListener(this);
  Group grpOutline=new Group(cmpLabel,SWT.NONE);
  grpOutline.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  grpOutline.setLayout(new FillLayout());
  grpOutline.setText(Messages.getString(""String_Node_Str""));
  outlineText=new LineAttributesComposite(grpOutline,SWT.NONE,getContext(),getTrendline().getLabel().getOutline(),true,true,true);
  outlineText.addListener(this);
  icLabel=new InsetsComposite(cmpLabel,SWT.NONE,1,getTrendline().getLabel().getInsets(),getChart().getUnits(),getContext().getUIServiceProvider());
  GridData gdICBlock=new GridData(GridData.FILL_HORIZONTAL);
  gdICBlock.horizontalSpan=2;
  icLabel.setLayoutData(gdICBlock);
  icLabel.addListener(this);
  populateLists();
  setState(btnVisible.getSelection());
  return cmpContent;
}",0.9994067629029068
67731,"@Override protected Image createImageFromModel(Fill imageModel) throws ChartException {
  return new SVGImage(super.createImageFromModel(imageModel),null);
}","@Override protected Image createImageFromModel(Fill imageModel) throws ChartException {
  Image img=super.createImageFromModel(imageModel);
  if (!(img instanceof SVGImage)) {
    img=new SVGImage(img,null);
  }
  return img;
}",0.546875
67732,"public void drawOval(OvalRenderEvent ore) throws ChartException {
  ivRenderer.groupPrimitive(ore,false);
  super.drawOval(ore);
  ivRenderer.ungroupPrimitive(ore,false);
}","@Override public void drawOval(OvalRenderEvent ore) throws ChartException {
  ivRenderer.groupPrimitive(ore,false);
  super.drawOval(ore);
  ivRenderer.ungroupPrimitive(ore,false);
}",0.9717514124293786
67733,"public void fillArc(ArcRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.fillArc(are);
  ivRenderer.ungroupPrimitive(are,false);
}","@Override public void fillArc(ArcRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.fillArc(are);
  ivRenderer.ungroupPrimitive(are,false);
}",0.971264367816092
67734,"public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.fillPolygon(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}","@Override public void fillPolygon(PolygonRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.fillPolygon(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}",0.9731182795698924
67735,"public void drawRectangle(RectangleRenderEvent rre) throws ChartException {
  ivRenderer.groupPrimitive(rre,false);
  super.drawRectangle(rre);
  ivRenderer.ungroupPrimitive(rre,false);
}","@Override public void drawRectangle(RectangleRenderEvent rre) throws ChartException {
  ivRenderer.groupPrimitive(rre,false);
  super.drawRectangle(rre);
  ivRenderer.ungroupPrimitive(rre,false);
}",0.9739583333333334
67736,"public void changeStructure(StructureChangeEvent scev){
}","@Override public void changeStructure(StructureChangeEvent scev){
}",0.9193548387096774
67737,"/** 
 * @param os
 * @throws ChartException
 */
public void after() throws ChartException {
  super.after();
  ivRenderer.addInteractivity();
  addScripts();
  ((SVGGraphics2D)_g2d).flush();
  dom.getDocumentElement().appendChild(ivRenderer.getHotspotLayer());
  if (oOutputIdentifier instanceof OutputStream) {
    try {
      writeDocumentToOutputStream(dom,(OutputStream)oOutputIdentifier);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else   if (oOutputIdentifier instanceof String) {
    FileOutputStream fos=null;
    try {
      fos=SecurityUtil.newFileOutputStream((String)oOutputIdentifier);
      writeDocumentToOutputStream(dom,fos);
      fos.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else {
    throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{oOutputIdentifier},null);
  }
  ivRenderer.clear();
}","/** 
 * @param os
 * @throws ChartException
 */
@Override public void after() throws ChartException {
  super.after();
  ivRenderer.addInteractivity();
  addScripts();
  ((SVGGraphics2D)_g2d).flush();
  dom.getDocumentElement().appendChild(ivRenderer.getHotspotLayer());
  if (oOutputIdentifier instanceof OutputStream) {
    try {
      writeDocumentToOutputStream(dom,(OutputStream)oOutputIdentifier);
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else   if (oOutputIdentifier instanceof String) {
    FileOutputStream fos=null;
    try {
      fos=SecurityUtil.newFileOutputStream((String)oOutputIdentifier);
      writeDocumentToOutputStream(dom,fos);
      fos.close();
    }
 catch (    Exception ex) {
      throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,ex);
    }
  }
 else {
    throw new ChartException(ChartDeviceSVGPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{oOutputIdentifier},null);
  }
  ivRenderer.clear();
}",0.9952516619183286
67738,"public void drawArea(AreaRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.drawArea(are);
  ivRenderer.ungroupPrimitive(are,false);
}","@Override public void drawArea(AreaRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.drawArea(are);
  ivRenderer.ungroupPrimitive(are,false);
}",0.9717514124293786
67739,"protected void init(){
  final PluginSettings ps=PluginSettings.instance();
  try {
    _ids=ps.getDisplayServer(""String_Node_Str"");
    _tr=new SVGTextRenderer(_ids);
    ivRenderer=new SVGInteractiveRenderer(getULocale());
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}","@Override protected void init(){
  final PluginSettings ps=PluginSettings.instance();
  try {
    _ids=ps.getDisplayServer(""String_Node_Str"");
    _tr=new SVGTextRenderer(_ids);
    ivRenderer=new SVGInteractiveRenderer(getULocale());
  }
 catch (  ChartException pex) {
    logger.log(pex);
  }
}",0.9828767123287672
67740,"public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof AreaRenderEvent) {
    AreaRenderEvent are=(AreaRenderEvent)pre;
    final GeneralPath gp=new GeneralPath();
    PrimitiveRenderEvent subPre;
    for (int i=0; i < are.getElementCount(); i++) {
      subPre=are.getElement(i);
      if (subPre instanceof ArcRenderEvent) {
        final ArcRenderEvent acre=(ArcRenderEvent)subPre;
        final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
        gp.append(a2d,true);
      }
 else       if (subPre instanceof LineRenderEvent) {
        final LineRenderEvent lre=(LineRenderEvent)subPre;
        final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
        gp.append(l2d,true);
      }
    }
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof LineRenderEvent) {
    final GeneralPath gp=new GeneralPath();
    final LineRenderEvent lre=(LineRenderEvent)pre;
    final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
    gp.append(l2d,true);
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  ivRenderer.prepareInteractiveEvent(elm,ie,triggers);
}","@Override public void enableInteraction(InteractionEvent ie) throws ChartException {
  if (_iun == null) {
    logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",getULocale()));
    return;
  }
  Trigger[] triggers=ie.getTriggers();
  if (triggers == null) {
    return;
  }
  final PrimitiveRenderEvent pre=ie.getHotSpot();
  Element elm=null;
  if (pre instanceof PolygonRenderEvent) {
    final Location[] loa=((PolygonRenderEvent)pre).getPoints();
    int[][] pa=getCoordinatesAsInts(loa);
    elm=svggc.createPolygon(pa[0],pa[1],pa[0].length);
  }
 else   if (pre instanceof OvalRenderEvent) {
    final Bounds boEllipse=((OvalRenderEvent)pre).getBounds();
    elm=svggc.createOval(boEllipse.getLeft(),boEllipse.getTop(),boEllipse.getWidth(),boEllipse.getHeight());
  }
 else   if (pre instanceof RectangleRenderEvent) {
    final Bounds boRect=((RectangleRenderEvent)pre).getBounds();
    elm=svggc.createRect(boRect.getLeft(),boRect.getTop(),boRect.getWidth(),boRect.getHeight());
  }
 else   if (pre instanceof AreaRenderEvent) {
    AreaRenderEvent are=(AreaRenderEvent)pre;
    final GeneralPath gp=new GeneralPath();
    PrimitiveRenderEvent subPre;
    for (int i=0; i < are.getElementCount(); i++) {
      subPre=are.getElement(i);
      if (subPre instanceof ArcRenderEvent) {
        final ArcRenderEvent acre=(ArcRenderEvent)subPre;
        final Arc2D.Double a2d=new Arc2D.Double(acre.getTopLeft().getX(),acre.getTopLeft().getY(),acre.getWidth(),acre.getHeight(),acre.getStartAngle(),acre.getAngleExtent(),toSwingArcType(acre.getStyle()));
        gp.append(a2d,true);
      }
 else       if (subPre instanceof LineRenderEvent) {
        final LineRenderEvent lre=(LineRenderEvent)subPre;
        final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
        gp.append(l2d,true);
      }
    }
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof LineRenderEvent) {
    final GeneralPath gp=new GeneralPath();
    final LineRenderEvent lre=(LineRenderEvent)pre;
    final Line2D.Double l2d=new Line2D.Double(lre.getStart().getX(),lre.getStart().getY(),lre.getEnd().getX(),lre.getEnd().getY());
    gp.append(l2d,true);
    elm=svggc.createGeneralPath(gp);
  }
 else   if (pre instanceof ArcRenderEvent) {
    final ArcRenderEvent are=(ArcRenderEvent)pre;
    if (are.getInnerRadius() >= 0 && are.getOuterRadius() > 0 && are.getInnerRadius() < are.getOuterRadius()) {
      Shape outerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getOuterRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getOuterRadius()) / 2,2 * are.getOuterRadius(),2 * are.getOuterRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Shape innerArc=new Arc2D.Double(are.getTopLeft().getX() + (are.getWidth() - 2 * are.getInnerRadius()) / 2,are.getTopLeft().getY() + (are.getHeight() - 2 * are.getInnerRadius()) / 2,2 * are.getInnerRadius(),2 * are.getInnerRadius(),are.getStartAngle(),are.getAngleExtent(),Arc2D.PIE);
      Area fArea=new Area(outerArc);
      fArea.exclusiveOr(new Area(innerArc));
      elm=svggc.createGeneralPath(fArea);
    }
 else {
      elm=svggc.createGeneralPath(new Arc2D.Double(are.getTopLeft().getX(),are.getTopLeft().getY(),are.getWidth(),are.getHeight(),are.getStartAngle(),are.getAngleExtent(),toSwingArcType(are.getStyle())));
    }
  }
  ivRenderer.prepareInteractiveEvent(elm,ie,triggers);
}",0.9985590778097982
67741,"protected Image createImage(byte[] data){
  return new SVGImage(super.createImage(data),null,data);
}","@Override protected Image createImage(byte[] data){
  return new SVGImage(super.createImage(data),null,data);
}",0.9528301886792452
67742,"public String getMimeType(){
  return ""String_Node_Str"";
}","@Override public String getMimeType(){
  return ""String_Node_Str"";
}",0.9206349206349206
67743,"public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  ivRenderer.groupPrimitive(tre,true);
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  _tr.renderShadowAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
_tr.renderTextAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
_tr.renderTextInBlock(this,tre.getBlockBounds(),tre.getBlockAlignment(),tre.getLabel());
break;
}
ivRenderer.ungroupPrimitive(tre,true);
}","@Override public void drawText(TextRenderEvent tre) throws ChartException {
  String fontName=convertFont(tre.getLabel().getCaption().getFont().getName());
  if (fontName != null) {
    tre.getLabel().getCaption().getFont().setName(fontName);
  }
  ivRenderer.groupPrimitive(tre,true);
switch (tre.getAction()) {
case TextRenderEvent.UNDEFINED:
    throw new ChartException(ChartDeviceExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(getULocale()));
case TextRenderEvent.RENDER_SHADOW_AT_LOCATION:
  _tr.renderShadowAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_AT_LOCATION:
_tr.renderTextAtLocation(this,tre.getTextPosition(),tre.getLocation(),tre.getLabel());
break;
case TextRenderEvent.RENDER_TEXT_IN_BLOCK:
_tr.renderTextInBlock(this,tre.getBlockBounds(),tre.getBlockAlignment(),tre.getLabel());
break;
}
ivRenderer.ungroupPrimitive(tre,true);
}",0.994747899159664
67744,"public void drawArc(ArcRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.drawArc(are);
  ivRenderer.ungroupPrimitive(are,false);
}","@Override public void drawArc(ArcRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.drawArc(are);
  ivRenderer.ungroupPrimitive(are,false);
}",0.971264367816092
67745,"public void drawLine(LineRenderEvent lre) throws ChartException {
  ivRenderer.groupPrimitive(lre,false);
  super.drawLine(lre);
  ivRenderer.ungroupPrimitive(lre,false);
}","@Override public void drawLine(LineRenderEvent lre) throws ChartException {
  ivRenderer.groupPrimitive(lre,false);
  super.drawLine(lre);
  ivRenderer.ungroupPrimitive(lre,false);
}",0.9717514124293786
67746,"public void drawImage(ImageRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.drawImage(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}","@Override public void drawImage(ImageRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.drawImage(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}",0.9722222222222222
67747,"public void fillArea(AreaRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.fillArea(are);
  ivRenderer.ungroupPrimitive(are,false);
}","@Override public void fillArea(AreaRenderEvent are) throws ChartException {
  ivRenderer.groupPrimitive(are,false);
  super.fillArea(are);
  ivRenderer.ungroupPrimitive(are,false);
}",0.9717514124293786
67748,"public void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
    ivRenderer.setIUpdateNotifier(_iun);
  }
 else   if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom,_enableScript);
      ivRenderer.setSVG2D(svggc);
      ivRenderer.createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_CODE_LIST)) {
    scriptCodeList=(List<String>)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_URL_REF_LIST)) {
    scriptRefList=(List<String>)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.RESIZE_SVG)) {
    _resizeSVG=((Boolean)oValue).booleanValue();
  }
 else   if (sProperty.equals(ISVGConstants.ENABLE_SCRIPT)) {
    _enableScript=((Boolean)oValue).booleanValue();
  }
}","@SuppressWarnings(""String_Node_Str"") @Override public void setProperty(String sProperty,Object oValue){
  super.setProperty(sProperty,oValue);
  if (sProperty.equals(IDeviceRenderer.UPDATE_NOTIFIER)) {
    _iun=(IUpdateNotifier)oValue;
    ivRenderer.setIUpdateNotifier(_iun);
  }
 else   if (sProperty.equals(IDeviceRenderer.EXPECTED_BOUNDS)) {
    final Bounds bo=(Bounds)oValue;
    try {
      dom=createSvgDocument(bo.getWidth(),bo.getHeight());
      svggc=new SVGGraphics2D(dom,_enableScript);
      ivRenderer.setSVG2D(svggc);
      ivRenderer.createHotspotLayer(dom);
      super.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,svggc);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else   if (sProperty.equals(IDeviceRenderer.FILE_IDENTIFIER)) {
    oOutputIdentifier=oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_CODE_LIST)) {
    scriptCodeList=(List<String>)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.JAVASCRIPT_URL_REF_LIST)) {
    scriptRefList=(List<String>)oValue;
  }
 else   if (sProperty.equals(ISVGConstants.RESIZE_SVG)) {
    _resizeSVG=((Boolean)oValue).booleanValue();
  }
 else   if (sProperty.equals(ISVGConstants.ENABLE_SCRIPT)) {
    _enableScript=((Boolean)oValue).booleanValue();
  }
}",0.9811169144234632
67749,"public void fillOval(OvalRenderEvent ore) throws ChartException {
  ivRenderer.groupPrimitive(ore,false);
  super.fillOval(ore);
  ivRenderer.ungroupPrimitive(ore,false);
}","@Override public void fillOval(OvalRenderEvent ore) throws ChartException {
  ivRenderer.groupPrimitive(ore,false);
  super.fillOval(ore);
  ivRenderer.ungroupPrimitive(ore,false);
}",0.9717514124293786
67750,"public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  ivRenderer.groupPrimitive(rre,false);
  super.fillRectangle(rre);
  ivRenderer.ungroupPrimitive(rre,false);
}","@Override public void fillRectangle(RectangleRenderEvent rre) throws ChartException {
  ivRenderer.groupPrimitive(rre,false);
  super.fillRectangle(rre);
  ivRenderer.ungroupPrimitive(rre,false);
}",0.9739583333333334
67751,"public void drawPolygon(PolygonRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.drawPolygon(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}","@Override public void drawPolygon(PolygonRenderEvent pre) throws ChartException {
  ivRenderer.groupPrimitive(pre,false);
  super.drawPolygon(pre);
  ivRenderer.ungroupPrimitive(pre,false);
}",0.9731182795698924
67752,"private void initDataSelector(){
  boolean isInheritingSummaryTable=isInheritingSummaryTable();
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (isInheritingSummaryTable) {
    cmbInherit.select(0);
    getContext().setInheritColumnsOnly(true);
  }
 else   if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataSet);
    currentData=sDataSet;
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    ChartUIUtil.setText(cmbDataItems,sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(!isInheritingSummaryTable && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
}","private void initDataSelector(){
  boolean isInheritingSummaryTable=isInheritingSummaryTable();
  cmbInherit.setItems(new String[]{Messages.getString(""String_Node_Str""),Messages.getString(""String_Node_Str"")});
  if (isInheritingSummaryTable) {
    cmbInherit.select(0);
    getContext().setInheritColumnsOnly(true);
  }
 else   if (dataProvider.isInheritColumnsSet()) {
    cmbInherit.select(dataProvider.isInheritColumnsOnly() ? 1 : 0);
  }
 else {
    if (ChartItemUtil.hasAggregation(getChartModel())) {
      cmbInherit.select(1);
      getContext().setInheritColumnsOnly(true);
    }
 else {
      cmbInherit.select(0);
      getContext().setInheritColumnsOnly(false);
    }
  }
  cmbInherit.setEnabled(false);
  cmbDataItems.setItems(createDataComboItems());
  String sItemRef=getDataServiceProvider().getReportItemReference();
  if (sItemRef != null) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sItemRef);
    currentData=sItemRef;
    return;
  }
  String sDataSet=getDataServiceProvider().getDataSet();
  if (sDataSet != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataSet);
    currentData=sDataSet;
    return;
  }
  String sDataCube=getDataServiceProvider().getDataCube();
  if (sDataCube != null && !getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(true);
    bIsInheritSelected=false;
    cmbDataItems.setText(sDataCube);
    currentData=sDataCube;
    return;
  }
  cmbInherit.setEnabled(!isInheritingSummaryTable && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
  if (!cmbInherit.isEnabled()) {
    if (itemHandle.getContainer() instanceof MultiViewsHandle || itemHandle.getDataBindingReference() != null) {
      cmbInherit.select(0);
    }
 else {
      cmbInherit.select(1);
    }
  }
  btnInherit.setSelection(true);
  bIsInheritSelected=true;
  if (getDataServiceProvider().isInheritanceOnly()) {
    btnUseData.setSelection(false);
    btnUseData.setEnabled(false);
  }
  cmbDataItems.select(0);
  currentData=null;
  cmbDataItems.setEnabled(false);
  getDataServiceProvider().setDataSet(null);
}",0.9762949956101844
67753,"@Override public Composite createDataSelector(Composite parent){
  parentComposite=parent;
  if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && itemHandle.getContainer() instanceof ModuleHandle) {
    String[] dataSets=dataProvider.getAllDataSets();
    if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
      dataProvider.setDataSet(dataSets[0]);
    }
  }
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  cmbDataItems.setVisibleItemCount(30);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}","@Override public Composite createDataSelector(Composite parent){
  parentComposite=parent;
  if (itemHandle.getDataBindingType() == ReportItemHandle.DATABINDING_TYPE_NONE && itemHandle.getContainer() instanceof ModuleHandle) {
    String[] dataSets=dataProvider.getAllDataSets();
    if (dataProvider.getAllDataCubes().length == 0 && dataSets.length == 1) {
      dataProvider.setDataSet(dataSets[0]);
    }
  }
  Composite cmpDataSet=ChartUIUtil.createCompositeWrapper(parent);
{
    cmpDataSet.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Label label=new Label(cmpDataSet,SWT.NONE);
{
    label.setText(Messages.getString(""String_Node_Str""));
    label.setFont(JFaceResources.getBannerFont());
  }
  Composite cmpDetail=new Composite(cmpDataSet,SWT.NONE);
{
    GridLayout gridLayout=new GridLayout(2,false);
    gridLayout.marginWidth=10;
    gridLayout.marginHeight=0;
    cmpDetail.setLayout(gridLayout);
    cmpDetail.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  Composite compRadios=ChartUIUtil.createCompositeWrapper(cmpDetail);
{
    GridData gd=new GridData();
    gd.verticalSpan=2;
    compRadios.setLayoutData(gd);
  }
  btnInherit=new Button(compRadios,SWT.RADIO);
  btnInherit.setText(Messages.getString(""String_Node_Str""));
  btnInherit.addListener(SWT.Selection,this);
  btnUseData=new Button(compRadios,SWT.RADIO);
  btnUseData.setText(Messages.getString(""String_Node_Str""));
  btnUseData.addListener(SWT.Selection,this);
  cmbInherit=new CCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER);
  cmbInherit.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbInherit.addListener(SWT.Selection,this);
  cmbDataItems=new DataItemCombo(cmpDetail,SWT.DROP_DOWN | SWT.READ_ONLY | SWT.BORDER){
    @Override public boolean triggerSelection(    int index){
      int selectState=selectDataTypes.get(index).intValue();
      if (selectState == SELECT_NEW_DATASET || selectState == SELECT_NEW_DATACUBE) {
        return false;
      }
      return true;
    }
    @Override public boolean skipSelection(    int index){
      int selectState=selectDataTypes.get(index).intValue();
      if (selectState == SELECT_NEXT) {
        return true;
      }
      return false;
    }
  }
;
  cmbDataItems.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  cmbDataItems.addListener(SWT.Selection,this);
  cmbDataItems.setVisibleItemCount(30);
  initDataSelector();
  updatePredefinedQueries();
  checkColBindingForCube();
  if (dataProvider.checkState(IDataServiceProvider.IN_MULTI_VIEWS)) {
    autoSelect(false);
  }
  return cmpDataSet;
}",0.8949946751863684
67754,"private void selectDataSet(){
  String currentDS=getDataServiceProvider().getDataSet();
  if (currentDS == null) {
    cmbDataItems.select(0);
    currentData=null;
  }
 else {
    ChartUIUtil.setText(cmbDataItems,currentDS);
    currentData=currentDS;
  }
}","private void selectDataSet(){
  String currentDS=getDataServiceProvider().getDataSet();
  if (currentDS == null) {
    cmbDataItems.select(0);
    currentData=null;
  }
 else {
    cmbDataItems.setText(currentDS);
    currentData=currentDS;
  }
}",0.9325396825396826
67755,"public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(ChartUIUtil.getText(cmbDataItems))) {
return;
}
getDataServiceProvider().setDataSet(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
switchDataSet(ChartUIUtil.getText(cmbDataItems));
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(ChartUIUtil.getText(cmbDataItems));
currentData=ChartUIUtil.getText(cmbDataItems);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (ChartUIUtil.getText(cmbDataItems).equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(ChartUIUtil.getText(cmbDataItems));
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=ChartUIUtil.getText(cmbDataItems);
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}","public void handleEvent(Event event){
  if (event.type == IChartDataSheet.EVENT_QUERY) {
    if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR_AND_TEXT) {
      updateColorAndText();
    }
 else     if (event.detail == IChartDataSheet.DETAIL_UPDATE_COLOR && event.data instanceof ISelectDataComponent) {
      refreshTableColor();
    }
    return;
  }
  if (event.type == CustomPreviewTable.MOUSE_RIGHT_CLICK_TYPE) {
    if (getDataServiceProvider().getDataSet() != null || getDataServiceProvider().getInheritedDataSet() != null) {
      if (event.widget instanceof Button) {
        Button header=(Button)event.widget;
        boolean isSharingChart=dataProvider.checkState(IDataServiceProvider.SHARE_CHART_QUERY);
        if (header.getMenu() == null && !isSharingChart) {
          header.setMenu(createMenuManager(event.data).createContextMenu(tablePreview));
        }
        if (event.doit && !isSharingChart) {
          header.getMenu().setVisible(true);
        }
      }
    }
  }
 else   if (event.type == SWT.Selection) {
    if (event.widget instanceof MenuItem) {
      MenuItem item=(MenuItem)event.widget;
      IAction action=(IAction)item.getData();
      action.setChecked(!action.isChecked());
      action.run();
    }
 else     if (event.widget == btnFilters) {
      if (invokeEditFilter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnFilters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnParameters) {
      if (invokeEditParameter() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnParameters,EVENT_PREVIEW);
      }
    }
 else     if (event.widget == btnBinding) {
      if (invokeDataBinding() == Window.OK) {
        refreshDataPreviewPane();
        fireEvent(btnBinding,EVENT_PREVIEW);
      }
    }
    try {
      if (event.widget == btnInherit) {
        ColorPalette.getInstance().restore();
        if (!btnInherit.getSelection()) {
          return;
        }
        if (bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=true;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataCube(null);
        getDataServiceProvider().setDataSet(null);
        switchDataSet(null);
        cmbDataItems.select(0);
        currentData=null;
        cmbDataItems.setEnabled(false);
        cmbInherit.setEnabled(!isInheritingSummaryTable() && getDataServiceProvider().getInheritedDataSet() != null && ChartItemUtil.isContainerInheritable(itemHandle));
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == btnUseData) {
        if (!btnUseData.getSelection()) {
          return;
        }
        if (!bIsInheritSelected) {
          return;
        }
        bIsInheritSelected=false;
        getDataServiceProvider().setReportItemReference(null);
        getDataServiceProvider().setDataSet(null);
        selectDataSet();
        cmbDataItems.setEnabled(true);
        cmbInherit.setEnabled(false);
        setEnabledForButtons();
        updateDragDataSource();
        updatePredefinedQueries();
      }
 else       if (event.widget == cmbInherit) {
        getContext().setInheritColumnsOnly(cmbInherit.getSelectionIndex() == 1);
        setEnabledForButtons();
        fireEvent(btnBinding,EVENT_QUERY);
        refreshDataPreviewPane();
      }
 else       if (event.widget == cmbDataItems) {
        ColorPalette.getInstance().restore();
        int selectedIndex=cmbDataItems.getSelectionIndex();
        Integer selectState=selectDataTypes.get(selectedIndex);
switch (selectState.intValue()) {
case SELECT_NONE:
          btnInherit.setSelection(true);
        btnUseData.setSelection(false);
      btnInherit.notifyListeners(SWT.Selection,new Event());
    break;
case SELECT_NEXT:
  selectedIndex++;
selectState=selectDataTypes.get(selectedIndex);
cmbDataItems.select(selectedIndex);
break;
}
switch (selectState.intValue()) {
case SELECT_DATA_SET:
if (getDataServiceProvider().getReportItemReference() == null && getDataServiceProvider().getDataSet() != null && getDataServiceProvider().getDataSet().equals(cmbDataItems.getText())) {
return;
}
getDataServiceProvider().setDataSet(cmbDataItems.getText());
currentData=cmbDataItems.getText();
switchDataSet(cmbDataItems.getText());
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_DATA_CUBE:
getDataServiceProvider().setDataCube(cmbDataItems.getText());
currentData=cmbDataItems.getText();
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
case SELECT_REPORT_ITEM:
if (cmbDataItems.getText().equals(getDataServiceProvider().getReportItemReference())) {
return;
}
getDataServiceProvider().setReportItemReference(cmbDataItems.getText());
ChartReportItemUtil.reviseChartModel(ChartReportItemUtil.REVISE_REFERENCE_REPORT_ITEM,this.getContext().getModel(),itemHandle);
if (this.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_CHART_QUERY)) {
ChartAdapter.beginIgnoreNotifications();
this.getDataServiceProvider().update(ChartUIConstants.COPY_SERIES_DEFINITION,null);
ChartAdapter.endIgnoreNotifications();
}
currentData=cmbDataItems.getText();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATASET:
int result=invokeNewDataSet();
if (result == Window.CANCEL) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
String[] datasets=getDataServiceProvider().getAllDataSets();
currentData=datasets[datasets.length - 1];
getDataServiceProvider().setDataSet(currentData);
cmbDataItems.setText(currentData);
setEnabledForButtons();
updateDragDataSource();
break;
case SELECT_NEW_DATACUBE:
if (getDataServiceProvider().getAllDataSets().length == 0) {
invokeNewDataSet();
}
int count=getDataServiceProvider().getAllDataCubes().length;
if (getDataServiceProvider().getAllDataSets().length != 0) {
new NewCubeAction().run();
}
String[] datacubes=getDataServiceProvider().getAllDataCubes();
cmbDataItems.removeAll();
cmbDataItems.setItems(createDataComboItems());
if (datacubes.length == count) {
if (currentData == null) {
cmbDataItems.select(0);
}
 else {
cmbDataItems.setText(currentData);
}
return;
}
currentData=datacubes[datacubes.length - 1];
getDataServiceProvider().setDataCube(currentData);
cmbDataItems.setText(currentData);
updateDragDataSource();
setEnabledForButtons();
DataDefinitionTextManager.getInstance().refreshAll();
fireEvent(tablePreview,EVENT_PREVIEW);
break;
}
updatePredefinedQueries();
}
 else if (event.widget == btnShowDataPreviewA || event.widget == btnShowDataPreviewB) {
Button w=(Button)event.widget;
getContext().setShowingDataPreview(Boolean.valueOf(w.getSelection()));
updateDragDataSource();
}
checkColBindingForCube();
ChartWizard.removeException(ChartWizard.StaChartDSh_switch_ID);
}
 catch (ChartException e1) {
ChartWizard.showException(ChartWizard.StaChartDSh_switch_ID,e1.getLocalizedMessage());
}
}
}",0.973967992307164
67756,"public void testCursorWithPageEdge1() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}","public void testCursorWithPageEdge1() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}",0.9989094874591058
67757,"public void testCursorWithPageEdge2() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage2();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}","public void testCursorWithPageEdge2() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage2();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List pageEdgeBindingNames=new ArrayList();
  pageEdgeBindingNames.add(""String_Node_Str"");
  pageEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  testOut.print(creator.printCubeAlongPageEdge(dataCursor,pageEdgeBindingNames,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
  this.checkOutputFile();
}",0.9989559406974317
67758,"/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","/** 
 * with appContext's fetch limit
 * @throws OLAPException
 * @throws BirtException 
 */
public void testCursorModel9WithFetchLimit() throws OLAPException, BirtException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  Map appContext=new HashMap();
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  appContext.put(""String_Node_Str"",""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,appContext);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  try {
    testOut.print(creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9989810474831872
67759,"public void testNavigatorOnPage() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor pageCursor=(EdgeCursor)dataCursor.getPageEdge().toArray()[0];
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  pageCursor.setPosition(0);
  dataCursor.synchronizePages();
  String output=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(3);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(1);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.last();
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  testOut.print(output);
  checkOutputFile();
  close(dataCursor);
}","public void testNavigatorOnPage() throws Exception {
  ICubeQueryDefinition cqd=creator.createQueryDefintionWithPage1();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_AVE_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding totalGrandTotal=new Binding(""String_Node_Str"");
  totalGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  totalGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  totalGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  cqd.addBinding(totalGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor pageCursor=(EdgeCursor)dataCursor.getPageEdge().toArray()[0];
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  columnEdgeBindingNames.add(""String_Node_Str"");
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  List rowGrandTotalNames=new ArrayList();
  rowGrandTotalNames.add(""String_Node_Str"");
  pageCursor.setPosition(0);
  dataCursor.synchronizePages();
  String output=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(3);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.setPosition(1);
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  pageCursor.last();
  dataCursor.synchronizePages();
  output+=""String_Node_Str"" + pageCursor.getPosition() + ""String_Node_Str"";
  for (int i=0; i < pageCursor.getDimensionCursor().size(); i++) {
    output+=((DimensionCursor)pageCursor.getDimensionCursor().get(i)).getObject(0);
  }
  output+=""String_Node_Str"";
  output+=this.creator.printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,rowGrandTotalNames,""String_Node_Str"",""String_Node_Str"",null);
  output+=""String_Node_Str"";
  testOut.print(output);
  checkOutputFile();
  close(dataCursor);
}",0.9994077934383512
67760,"public void testNavigatorOnSubCursor() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  BirtCubeView subCubeView=new BirtCubeView(cubeView.getCubeQueryExecutor(),null);
  columnCursor.beforeFirst();
  rowCursor.next();
  columnCursor.setPosition(8);
  CubeCursor subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  EdgeCursor subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subRowCursor.beforeFirst();
  subColumnCursor.beforeFirst();
  assertTrue(subRowCursor.isBeforeFirst());
  assertTrue(subColumnCursor.isBeforeFirst());
  subRowCursor.first();
  subColumnCursor.first();
  assertTrue(subRowCursor.isFirst());
  assertTrue(subColumnCursor.isFirst());
  assertTrue(subRowCursor.getPosition() == 0);
  assertTrue(subColumnCursor.getPosition() == 0);
  subColumnCursor.setPosition(3);
  assertTrue(subColumnCursor.getPosition() == 3);
  subRowCursor.beforeFirst();
  subRowCursor.next();
  subColumnCursor.setPosition(3);
  DimensionCursor c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  DimensionCursor c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  DimensionCursor c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  DimensionCursor c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  columnCursor.setPosition(5);
  subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subColumnCursor.setPosition(7);
  c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  close(dataCursor);
}","public void testNavigatorOnSubCursor() throws DataException, OLAPException, IOException {
  ICubeQueryDefinition cqd=creator.createQueryDefinition();
  IBinding rowGrandTotal=new Binding(""String_Node_Str"");
  rowGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  rowGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  rowGrandTotal.addAggregateOn(""String_Node_Str"");
  IBinding columnGrandTotal=new Binding(""String_Node_Str"");
  columnGrandTotal.setAggrFunction(IBuildInAggregation.TOTAL_SUM_FUNC);
  columnGrandTotal.setExpression(new ScriptExpression(""String_Node_Str""));
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  columnGrandTotal.addAggregateOn(""String_Node_Str"");
  cqd.addBinding(rowGrandTotal);
  cqd.addBinding(columnGrandTotal);
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  EdgeCursor rowCursor=cubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor columnCursor=cubeView.getColumnEdgeView().getEdgeCursor();
  BirtCubeView subCubeView=new BirtCubeView(cubeView.getCubeQueryExecutor(),cube,null);
  columnCursor.beforeFirst();
  rowCursor.next();
  columnCursor.setPosition(8);
  CubeCursor subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  EdgeCursor subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  EdgeCursor subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subRowCursor.beforeFirst();
  subColumnCursor.beforeFirst();
  assertTrue(subRowCursor.isBeforeFirst());
  assertTrue(subColumnCursor.isBeforeFirst());
  subRowCursor.first();
  subColumnCursor.first();
  assertTrue(subRowCursor.isFirst());
  assertTrue(subColumnCursor.isFirst());
  assertTrue(subRowCursor.getPosition() == 0);
  assertTrue(subColumnCursor.getPosition() == 0);
  subColumnCursor.setPosition(3);
  assertTrue(subColumnCursor.getPosition() == 3);
  subRowCursor.beforeFirst();
  subRowCursor.next();
  subColumnCursor.setPosition(3);
  DimensionCursor c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  DimensionCursor c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  DimensionCursor c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  DimensionCursor c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  columnCursor.setPosition(5);
  subCursor=subCubeView.getCubeCursor(new StopSign(),""String_Node_Str"",""String_Node_Str"",cubeView);
  subRowCursor=subCubeView.getRowEdgeView().getEdgeCursor();
  subColumnCursor=subCubeView.getColumnEdgeView().getEdgeCursor();
  subColumnCursor.setPosition(7);
  c1=(DimensionCursor)subColumnCursor.getDimensionCursor().get(0);
  c2=(DimensionCursor)subColumnCursor.getDimensionCursor().get(1);
  c3=(DimensionCursor)subColumnCursor.getDimensionCursor().get(2);
  c4=(DimensionCursor)subColumnCursor.getDimensionCursor().get(3);
  assertTrue(c1.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c2.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c3.getObject(0).toString().equals(""String_Node_Str""));
  assertTrue(c4.getObject(0).toString().equals(""String_Node_Str""));
  close(dataCursor);
}",0.9993264178903408
67761,"void createCube(DataEngineImpl engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(engine.getSession().getTempDir(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),engine.getSession().getTempDir() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[7];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  levelNames[3]=""String_Node_Str"";
  levelNames[4]=""String_Node_Str"";
  levelNames[5]=""String_Node_Str"";
  levelNames[6]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,DateFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,DateFactTable.DIM1_YEAR_Col);
  iterator.setLevelMember(2,DateFactTable.ATTRIBUTE_Col);
  iterator.setLevelMember(3,DateFactTable.DIM1_QUARTER_Col);
  iterator.setLevelMember(4,DateFactTable.ATTRIBUTE_Col);
  iterator.setLevelMember(5,DateFactTable.DIM1_MONTH_Col);
  iterator.setLevelMember(6,DateFactTable.ATTRIBUTE_Col);
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,DateFactTable.DIM2_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows(new StopSign());
  DateFactTable factTable2=new DateFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}","void createCube(DataEngineImpl engine) throws IOException, BirtException, OLAPException {
  IDocumentManager documentManager=DocumentManagerFactory.createFileDocumentManager(engine.getSession().getTempDir(),cubeName);
  DocManagerMap.getDocManagerMap().set(String.valueOf(engine.hashCode()),engine.getSession().getTempDir() + cubeName,documentManager);
  engine.addShutdownListener(new DocManagerReleaser(engine));
  Dimension[] dimensions=new Dimension[2];
  String[] levelNames=new String[7];
  levelNames[0]=""String_Node_Str"";
  levelNames[1]=""String_Node_Str"";
  levelNames[2]=""String_Node_Str"";
  levelNames[3]=""String_Node_Str"";
  levelNames[4]=""String_Node_Str"";
  levelNames[5]=""String_Node_Str"";
  levelNames[6]=""String_Node_Str"";
  DimensionForTest iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,DateFactTable.DIM0_L1Col);
  iterator.setLevelMember(1,DateFactTable.DIM1_YEAR_Col);
  iterator.setLevelMember(2,DateFactTable.ATTRIBUTE_Col);
  iterator.setLevelMember(3,DateFactTable.DIM1_QUARTER_Col);
  iterator.setLevelMember(4,DateFactTable.ATTRIBUTE_Col);
  iterator.setLevelMember(5,DateFactTable.DIM1_MONTH_Col);
  iterator.setLevelMember(6,DateFactTable.ATTRIBUTE_Col);
  ILevelDefn[] levelDefs=new ILevelDefn[4];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  levelDefs[1]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  levelDefs[1].setTimeType(""String_Node_Str"");
  levelDefs[2]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  levelDefs[2].setTimeType(""String_Node_Str"");
  levelDefs[3]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},new String[]{""String_Node_Str""});
  levelDefs[3].setTimeType(""String_Node_Str"");
  dimensions[0]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  IHierarchy hierarchy=dimensions[0].getHierarchy();
  IDiskArray allRow=dimensions[0].getAllRows(new StopSign());
  levelNames=new String[1];
  levelNames[0]=""String_Node_Str"";
  iterator=new DimensionForTest(levelNames);
  iterator.setLevelMember(0,DateFactTable.DIM2_L2Col);
  levelDefs=new ILevelDefn[1];
  levelDefs[0]=new LevelDefinition(""String_Node_Str"",new String[]{""String_Node_Str""},null);
  dimensions[1]=(Dimension)DimensionFactory.createDimension(""String_Node_Str"",documentManager,iterator,levelDefs,false,new StopSign());
  hierarchy=dimensions[1].getHierarchy();
  allRow=dimensions[1].getAllRows(new StopSign());
  DateFactTable factTable2=new DateFactTable();
  String[] measureColumnName=new String[1];
  measureColumnName[0]=""String_Node_Str"";
  Cube cube=new Cube(cubeName,documentManager);
  cube.create(getKeyColNames(dimensions),dimensions,factTable2,measureColumnName,new StopSign());
  cube.close();
  documentManager.flush();
}",0.9753711790393012
67762,"public void testMirrorOnQuarterDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnQuarterDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9950298210735586
67763,"public void testMirrorOnYearDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnYearDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9950149551345964
67764,"public void testMirrorOnMonthDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()));
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}","public void testMirrorOnMonthDimension() throws DataException {
  ICubeQueryDefinition cqd=createMirroredQueryDefinition(""String_Node_Str"");
  BirtCubeView cubeView=new BirtCubeView(new CubeQueryExecutor(null,cqd,de.getSession(),this.scope,de.getContext()),cube,null);
  CubeCursor dataCursor=cubeView.getCubeCursor(new StopSign(),cube,false);
  List rowEdgeBindingNames=new ArrayList();
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  rowEdgeBindingNames.add(""String_Node_Str"");
  List columnEdgeBindingNames=new ArrayList();
  columnEdgeBindingNames.add(""String_Node_Str"");
  List measureBindingNames=new ArrayList();
  measureBindingNames.add(""String_Node_Str"");
  try {
    testOut.print(new CubeUtility().printCubeAlongEdge(dataCursor,columnEdgeBindingNames,rowEdgeBindingNames,measureBindingNames,null,null,null,null));
    this.checkOutputFile();
  }
 catch (  Exception e) {
    fail(""String_Node_Str"");
  }
}",0.9950199203187252
67765,"public String getName() throws OLAPException {
  return null;
}","public String getName() throws OLAPException {
  return this.name;
}",0.916030534351145
67766,"public void setName(String value) throws OLAPException {
}","public void setName(String value) throws OLAPException {
  this.name=value;
}",0.8592592592592593
67767,"public MirroredAggregationResultSet(IAggregationResultSet rs,int mirrorLevel,boolean breakHierarchy,List sortList) throws IOException {
  this.mirrorLevel=mirrorLevel;
  this.breakHierarchy=breakHierarchy;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,mirrorLevel);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!isTimeMirror && !breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}","public MirroredAggregationResultSet(IAggregationResultSet rs,RowDataAccessorService service,List sortList) throws IOException {
  this.mirrorLevel=service.getMirrorStartPosition();
  this.breakHierarchy=service.isBreakHierarchy();
  this.service=service;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,service);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!isTimeMirror && !breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}",0.9304456476468138
67768,"private void populateTimeMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[rs.getLevelCount()];
  Object[] currValue=new Object[rs.getLevelCount()];
  final int sortType=this.getSortTypeOnMirroredLevel(this.mirrorLevel);
  if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
    noBreakHierarchyKeyMap=new TreeMap(new Comparator(){
      public int compare(      final Object arg0,      final Object arg1){
        if (sortType == IDimensionSortDefn.SORT_ASC)         return ((Comparable)arg0).compareTo(arg1);
 else         return ((Comparable)arg0).compareTo(arg1) * -1;
      }
    }
);
  }
 else {
    noBreakHierarchyKeyMap=new HashMap();
  }
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < rs.getLevelCount(); j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < this.mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        child=new MemberTreeNode(member);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          Member member=new Member();
          member.setKeyValues(new Object[]{currValue[j]});
          member.setAttributes(rs.getLevelAttributesValue(j));
          child=new MemberTreeNode(member);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    Member mirrorMember=new Member();
    mirrorMember.setKeyValues(new Object[]{currValue[this.mirrorLevel]});
    mirrorMember.setAttributes(rs.getLevelAttributesValue(this.mirrorLevel));
    if (noBreakHierarchyKeyMap.containsKey(mirrorMember)) {
      MemberTreeNode node=(MemberTreeNode)noBreakHierarchyKeyMap.get(mirrorMember);
      for (int j=this.mirrorLevel + 1; j < this.rs.getLevelCount(); j++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        if (!node.containsChild(member)) {
          if (TimeMemberUtil.isTimeMirror(rs,j)) {
            break;
          }
 else {
            MemberTreeNode childNode=new MemberTreeNode(member);
            node.insertNode(childNode);
            childNode.parentNode=node;
            node=childNode;
          }
        }
 else {
          node=node.getChild(member);
        }
      }
    }
 else {
      MemberTreeNode parentNode=null;
      for (int j=this.mirrorLevel; j < this.rs.getLevelCount(); j++) {
        if (TimeMemberUtil.isTimeMirror(rs,j)) {
          MemberTreeNode[] nodes=TimeMemberUtil.getDateTimeNodes(rs.getAttributeNames(),rs.getLevelAttribute(j,0),j);
          for (int k=0; k < nodes.length; k++) {
            if (parentNode == null) {
              noBreakHierarchyKeyMap.put(nodes[k].key,nodes[k]);
            }
 else             parentNode.insertNode(nodes[k]);
            nodes[k].parentNode=parentNode;
          }
          break;
        }
 else {
          if (parentNode == null) {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            parentNode=new MemberTreeNode(member);
            noBreakHierarchyKeyMap.put(mirrorMember,parentNode);
          }
 else {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            MemberTreeNode childNode=new MemberTreeNode(member);
            parentNode.insertNode(childNode);
            childNode.parentNode=parentNode;
            parentNode=childNode;
          }
        }
      }
    }
    for (int k=0; k < rs.getLevelCount(); k++) {
      preValue[k]=currValue[k];
    }
  }
  int level=mirrorLevel + 1;
  List nodeList1=new ArrayList();
  nodeList1.addAll(noBreakHierarchyKeyMap.values());
  for (int k=mirrorLevel + 1; k < rs.getLevelCount(); k++) {
    final int childSortType=this.getSortTypeOnMirroredLevel(k);
    List nodeList2=new ArrayList();
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      while (k > level) {
        for (int j=0; j < nodeList1.size(); j++) {
          nodeList2.addAll(((MemberTreeNode)nodeList1.get(j)).childNodesList);
        }
        nodeList1.clear();
        nodeList1.addAll(nodeList2);
        nodeList2.clear();
        level++;
      }
      for (int j=0; j < nodeList1.size(); j++) {
        MemberTreeNode node=(MemberTreeNode)nodeList1.get(j);
        Collections.sort(node.childNodesList,new Comparator(){
          public int compare(          final Object arg0,          final Object arg1){
            if (childSortType == IDimensionSortDefn.SORT_ASC)             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key);
 else             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key) * -1;
          }
        }
);
      }
    }
  }
}","private void populateTimeMirror() throws IOException {
  MemberTreeNode parent;
  MemberTreeNode child;
  Object[] preValue=new Object[rs.getLevelCount()];
  Object[] currValue=new Object[rs.getLevelCount()];
  final int sortType=this.getSortTypeOnMirroredLevel(this.mirrorLevel);
  if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
    noBreakHierarchyKeyMap=new TreeMap(new Comparator(){
      public int compare(      final Object arg0,      final Object arg1){
        if (sortType == IDimensionSortDefn.SORT_ASC)         return ((Comparable)arg0).compareTo(arg1);
 else         return ((Comparable)arg0).compareTo(arg1) * -1;
      }
    }
);
  }
 else {
    noBreakHierarchyKeyMap=new HashMap();
  }
  for (int i=0; i < rs.length(); i++) {
    rs.seek(i);
    parent=this.rootNode;
    for (int j=0; j < rs.getLevelCount(); j++) {
      currValue[j]=rs.getLevelKeyValue(j)[0];
    }
    for (int j=0; j < this.mirrorLevel; j++) {
      if (!isEqualObject(preValue[j],currValue[j])) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        child=new MemberTreeNode(member);
        parent.insertNode(child);
        child.parentNode=parent;
        parent=child;
      }
 else {
        if (parent.childNodesList.size() > 0)         parent=(MemberTreeNode)parent.childNodesList.get(parent.childNodesList.size() - 1);
 else {
          Member member=new Member();
          member.setKeyValues(new Object[]{currValue[j]});
          member.setAttributes(rs.getLevelAttributesValue(j));
          child=new MemberTreeNode(member);
          parent.insertNode(child);
          child.parentNode=parent;
          parent=child;
        }
      }
    }
    Member mirrorMember=new Member();
    mirrorMember.setKeyValues(new Object[]{currValue[this.mirrorLevel]});
    mirrorMember.setAttributes(rs.getLevelAttributesValue(this.mirrorLevel));
    if (noBreakHierarchyKeyMap.containsKey(mirrorMember)) {
      MemberTreeNode node=(MemberTreeNode)noBreakHierarchyKeyMap.get(mirrorMember);
      for (int j=this.mirrorLevel + 1; j < this.rs.getLevelCount(); j++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{currValue[j]});
        member.setAttributes(rs.getLevelAttributesValue(j));
        if (!node.containsChild(member)) {
          if (TimeMemberUtil.isTimeMirror(rs,j,service)) {
            break;
          }
 else {
            MemberTreeNode childNode=new MemberTreeNode(member);
            node.insertNode(childNode);
            childNode.parentNode=node;
            node=childNode;
          }
        }
 else {
          node=node.getChild(member);
        }
      }
    }
 else {
      MemberTreeNode parentNode=null;
      for (int j=this.mirrorLevel; j < this.rs.getLevelCount(); j++) {
        if (TimeMemberUtil.isTimeMirror(rs,j,service)) {
          MemberTreeNode[] nodes=TimeMemberUtil.getDateTimeNodes(rs.getAllLevels(),rs.getLevelAttribute(j,0),j,service);
          for (int k=0; k < nodes.length; k++) {
            if (parentNode == null) {
              noBreakHierarchyKeyMap.put(nodes[k].key,nodes[k]);
            }
 else             parentNode.insertNode(nodes[k]);
            nodes[k].parentNode=parentNode;
          }
          break;
        }
 else {
          if (parentNode == null) {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            parentNode=new MemberTreeNode(member);
            noBreakHierarchyKeyMap.put(mirrorMember,parentNode);
          }
 else {
            Member member=new Member();
            member.setKeyValues(new Object[]{currValue[j]});
            member.setAttributes(rs.getLevelAttributesValue(j));
            MemberTreeNode childNode=new MemberTreeNode(member);
            parentNode.insertNode(childNode);
            childNode.parentNode=parentNode;
            parentNode=childNode;
          }
        }
      }
    }
    for (int k=0; k < rs.getLevelCount(); k++) {
      preValue[k]=currValue[k];
    }
  }
  int level=mirrorLevel + 1;
  List nodeList1=new ArrayList();
  nodeList1.addAll(noBreakHierarchyKeyMap.values());
  for (int k=mirrorLevel + 1; k < rs.getLevelCount(); k++) {
    final int childSortType=this.getSortTypeOnMirroredLevel(k);
    List nodeList2=new ArrayList();
    if (sortType != IDimensionSortDefn.SORT_UNDEFINED) {
      while (k > level) {
        for (int j=0; j < nodeList1.size(); j++) {
          nodeList2.addAll(((MemberTreeNode)nodeList1.get(j)).childNodesList);
        }
        nodeList1.clear();
        nodeList1.addAll(nodeList2);
        nodeList2.clear();
        level++;
      }
      for (int j=0; j < nodeList1.size(); j++) {
        MemberTreeNode node=(MemberTreeNode)nodeList1.get(j);
        Collections.sort(node.childNodesList,new Comparator(){
          public int compare(          final Object arg0,          final Object arg1){
            if (childSortType == IDimensionSortDefn.SORT_ASC)             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key);
 else             return ((Comparable)((MemberTreeNode)arg0).key).compareTo(((MemberTreeNode)arg1).key) * -1;
          }
        }
);
      }
    }
  }
}",0.9959718969555036
67769,"public static MemberTreeNode[] getDateTimeNodes(String[][] types,Object dateTimeValue,int index){
  String[] dateTypes=new String[types.length - index];
  for (int i=index; i < types.length; i++) {
    dateTypes[i - index]=getTimeType(types[i][0]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}","public static MemberTreeNode[] getDateTimeNodes(DimLevel[] dimLevels,Object dateTimeValue,int index,RowDataAccessorService service){
  String[] dateTypes=new String[dimLevels.length - index];
  for (int i=index; i < dimLevels.length; i++) {
    dateTypes[i - index]=service.getLevelType(dimLevels[i]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}",0.9902067464635472
67770,"private static boolean isTimeMirrorAttributes(String attrName){
  String types=getTimeType(attrName);
  if (types == null || types.equals(DATE_TIME_LEVEL_TYPE_WEEK_OF_MONTH) || types.equals(DATE_TIME_LEVEL_TYPE_WEEK_OF_YEAR) || types.equals(DATE_TIME_LEVEL_TYPE_YEAR)) {
    return false;
  }
  return true;
}","private static boolean isTimeMirrorAttributes(String types){
  if (types == null || types.equals(DATE_TIME_LEVEL_TYPE_WEEK_OF_MONTH) || types.equals(DATE_TIME_LEVEL_TYPE_WEEK_OF_YEAR) || types.equals(DATE_TIME_LEVEL_TYPE_YEAR)) {
    return false;
  }
  return true;
}",0.9116117850953206
67771,"public static boolean isTimeMirror(IAggregationResultSet rs,int index){
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (rs.getLevelAttributes(i) == null || !isTimeMirrorAttributes(rs.getLevelAttributes(i)[0]))     return false;
  }
  return true;
}","public static boolean isTimeMirror(IAggregationResultSet rs,int index,RowDataAccessorService service){
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (rs.getLevelAttributes(i) == null || !isTimeMirrorAttributes(service.getLevelType(rs.getLevel(i))))     return false;
  }
  return true;
}",0.8315412186379928
67772,"public static boolean containsTimeMirror(IAggregationResultSet rs,int index){
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (isTimeMirror(rs,i))     return true;
  }
  return false;
}","public static boolean containsTimeMirror(IAggregationResultSet rs,RowDataAccessorService service){
  int index=service.getMirrorStartPosition();
  for (int i=index; i < rs.getLevelCount(); i++) {
    if (isTimeMirror(rs,i,service))     return true;
  }
  return false;
}",0.8301075268817204
67773,"/** 
 * @param resultSet
 * @throws DataException
 * @throws IOException
 */
public List getCubePosFilters(List jsMeasureEvalFilterHelper) throws DataException, IOException {
  String[] aggregationNames=populateAggregationNames(jsMeasureEvalFilterHelper);
  List cubePosFilterList=new ArrayList();
  for (int i=0; i < resultSet.length; i++) {
    if (hasDefinition(resultSet[i],aggregationNames)) {
      if (resultSet[i].getAllLevels() == null || resultSet[i].getAllLevels().length == 0) {
        AggregationRowAccessor rowAccessor=new AggregationRowAccessor(resultSet[i]);
        for (int j=0; j < jsMeasureEvalFilterHelper.size(); j++) {
          if (resultSet[i].getAggregationIndex(aggregationNames[j]) >= 0) {
            IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(j);
            if (!filterHelper.evaluateFilter(rowAccessor)) {
              return null;
            }
          }
        }
        continue;
      }
      Map levelMap=populateLevelMap(resultSet[i]);
      final int dimSize=levelMap.size();
      List[] levelListArray=new List[dimSize];
      levelMap.values().toArray(levelListArray);
      String[] dimensionNames=new String[dimSize];
      levelMap.keySet().toArray(dimensionNames);
      IDiskArray rowIndexArray=collectValidRowIndexArray(resultSet[i],jsMeasureEvalFilterHelper,aggregationNames);
      CubePosFilter cubePosFilter=null;
      ;
      if (rowIndexArray.size() <= resultSet[i].length() / 2) {
        cubePosFilter=getValidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
 else {
        cubePosFilter=getInvalidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
      cubePosFilterList.add(cubePosFilter);
    }
  }
  return cubePosFilterList;
}","/** 
 * @param resultSet
 * @throws DataException
 * @throws IOException
 */
public List getCubePosFilters(List jsMeasureEvalFilterHelper) throws DataException, IOException {
  String[] aggregationNames=populateAggregationNames(jsMeasureEvalFilterHelper);
  List cubePosFilterList=new ArrayList();
  for (int i=0; i < resultSet.length; i++) {
    if (hasDefinition(resultSet[i],aggregationNames)) {
      if (resultSet[i].getAllLevels() == null || resultSet[i].getAllLevels().length == 0) {
        if (resultSet[i].length() == 0)         return null;
        AggregationRowAccessor rowAccessor=new AggregationRowAccessor(resultSet[i]);
        for (int j=0; j < jsMeasureEvalFilterHelper.size(); j++) {
          if (resultSet[i].getAggregationIndex(aggregationNames[j]) >= 0) {
            IAggrMeasureFilterEvalHelper filterHelper=(IAggrMeasureFilterEvalHelper)jsMeasureEvalFilterHelper.get(j);
            if (!filterHelper.evaluateFilter(rowAccessor)) {
              return null;
            }
          }
        }
        continue;
      }
      Map levelMap=populateLevelMap(resultSet[i]);
      final int dimSize=levelMap.size();
      List[] levelListArray=new List[dimSize];
      levelMap.values().toArray(levelListArray);
      String[] dimensionNames=new String[dimSize];
      levelMap.keySet().toArray(dimensionNames);
      IDiskArray rowIndexArray=collectValidRowIndexArray(resultSet[i],jsMeasureEvalFilterHelper,aggregationNames);
      CubePosFilter cubePosFilter=null;
      ;
      if (rowIndexArray.size() <= resultSet[i].length() / 2) {
        cubePosFilter=getValidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
 else {
        cubePosFilter=getInvalidPosFilter(resultSet[i],rowIndexArray,dimensionNames,levelListArray);
      }
      cubePosFilterList.add(cubePosFilter);
    }
  }
  return cubePosFilterList;
}",0.9834103889039978
67774,"/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet,StopSign stopSign) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE),true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE));
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    if (stopSign.isStopped())     break;
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset((int)documentObj.getFilePointer());
      indexKey.setDimensionPos(currentIndex);
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}","/** 
 * @param levelDefs
 * @param keyDataType
 * @param attributesDataType
 * @param sortedDimensionSet
 * @param stopSign
 * @throws IOException
 * @throws BirtException
 */
private int saveHierarchyRows(ILevelDefn[] levelDefs,int[][] keyDataType,int[][] attributesDataType,DiskSortedStack sortedDimensionSet,StopSign stopSign) throws IOException, BirtException {
  DiskSortedStack sortedDimMembers=new DiskSortedStack(Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE),true,false,Member.getCreator());
  IDiskArray[] indexKeyLists=new IDiskArray[keyDataType.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    indexKeyLists[i]=new BufferedStructureArray(IndexKey.getCreator(),Math.min(sortedDimensionSet.size(),Constants.MAX_LIST_BUFFER_SIZE));
  }
  Object obj=sortedDimensionSet.pop();
  int currentIndex=0;
  IndexKey indexKey=null;
  while (obj != null) {
    if (stopSign.isStopped())     break;
    DimensionRow dimRows=(DimensionRow)obj;
    Member[] levelMembers=dimRows.getMembers();
    for (int i=0; i < indexKeyLists.length; i++) {
      indexKey=new IndexKey();
      indexKey.setKey(levelMembers[i].getKeyValues());
      indexKey.setOffset((int)documentObj.getFilePointer());
      indexKey.setDimensionPos(currentIndex);
      indexKeyLists[i].add(indexKey);
    }
    offsetDocObj.writeInt((int)documentObj.getFilePointer());
    sortedDimMembers.push(dimRows.getMembers()[levelDefs.length - 1]);
    writeDimensionRow(dimRows,keyDataType,attributesDataType);
    obj=sortedDimensionSet.pop();
    currentIndex++;
  }
  validateDimensionMembers(sortedDimMembers);
  DiskIndex[] diskIndex=new DiskIndex[indexKeyLists.length];
  for (int i=0; i < indexKeyLists.length; i++) {
    diskIndex[i]=DiskIndex.createIndex(documentManager,NamingUtil.getLevelIndexDocName(dimensionName,levelDefs[i].getLevelName()),indexKeyLists[i],false);
  }
  levels=new Level[levelDefs.length];
  for (int i=0; i < levels.length; i++) {
    levels[i]=new Level(documentManager,levelDefs[i],keyDataType[i],attributesDataType[i],currentIndex,diskIndex[i]);
    levels[i].setLevelType(levelDefs[i].getTimeType());
  }
  for (int i=0; i < levels.length; i++) {
    this.levelMap.put(levels[i].getName(),levels[i]);
  }
  return currentIndex;
}",0.987460815047022
67775,"public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
    executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
    BirtCubeView bcv=new BirtCubeView(executor,appContext);
    IDocumentManager documentManager=getDocumentManager(executor);
    ICube cube=loadCube(documentManager,executor);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube,true);
    ICubeQueryDefinition baseQuery=cubeQueryDefinition;
    DrillQueryHelper helper=new DrillQueryHelper(outResults,baseQuery,cube,session,scope,context,appContext,stopSign);
    if (helper.getAllCubeViews().length > 0) {
      BirtCubeView view=findBaseView(bcv,helper.getAllCubeViews());
      cubeCursor=new MergedCubeCursor(cubeCursor,bcv,view,helper);
      baseQuery=view.getCubeQueryDefinition();
    }
    cube.close();
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(baseQuery,bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}","public ICubeCursor getCubeCursor() throws DataException {
  if (this.cubeCursor != null)   return this.cubeCursor;
  try {
    stopSign.start();
    CubeQueryExecutor executor=new CubeQueryExecutor(this.outResults,cubeQueryDefinition,this.session,this.scope,this.context);
    executor.getFacttableBasedFilterHelpers().addAll(this.preparedQuery.getInternalFilters());
    IDocumentManager documentManager=getDocumentManager(executor);
    ICube cube=loadCube(documentManager,executor);
    BirtCubeView bcv=new BirtCubeView(executor,cube,appContext);
    CubeCursor cubeCursor=bcv.getCubeCursor(stopSign,cube,true);
    ICubeQueryDefinition baseQuery=cubeQueryDefinition;
    DrillQueryHelper helper=new DrillQueryHelper(outResults,baseQuery,cube,session,scope,context,appContext,stopSign);
    if (helper.getAllCubeViews().length > 0) {
      BirtCubeView view=findBaseView(bcv,helper.getAllCubeViews());
      cubeCursor=new MergedCubeCursor(cubeCursor,bcv,view,helper);
      baseQuery=view.getCubeQueryDefinition();
    }
    cube.close();
    String newResultSetId=executor.getQueryResultsId();
    if (newResultSetId != null) {
      this.queryResultsId=newResultSetId;
    }
    this.scope.put(ScriptConstants.MEASURE_SCRIPTABLE,this.scope,new JSMeasureAccessor(cubeCursor,bcv.getMeasureMapping()));
    this.scope.put(ScriptConstants.DIMENSION_SCRIPTABLE,this.scope,new JSLevelAccessor(baseQuery,bcv));
    this.cubeCursor=new CubeCursorImpl(outResults,cubeCursor,this.scope,session.getEngineContext().getScriptContext(),cubeQueryDefinition,bcv);
    return this.cubeCursor;
  }
 catch (  OLAPException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
catch (  IOException e) {
    throw new DataException(e.getLocalizedMessage(),e);
  }
}",0.925873331439932
67776,"protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=10;
  layout.marginWidth=10;
  composite.setLayout(layout);
  createCustomControls(composite);
  validateSyntax();
  addListeners();
  Utility.setSystemHelp(composite,IHelpConstants.CONEXT_ID_PROPERTYHANDLE_DIALOG);
  return composite;
}","protected Control createDialogArea(Composite parent){
  Composite composite=(Composite)super.createDialogArea(parent);
  GridLayout layout=new GridLayout(3,false);
  layout.marginHeight=10;
  layout.marginWidth=10;
  composite.setLayout(layout);
  createCustomControls(composite);
  validateSyntax();
  addListeners();
  setSystemHelp(composite);
  return composite;
}",0.9304677623261696
67777,"/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=150;
  availableDbObjectsTree.setLayoutData(treeData);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      String text=getTextToInsert();
      if (text.length() > 0) {
        insertText(text);
      }
    }
  }
);
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  return tablescomposite;
}","/** 
 * Creates the composite, for displaying the list of available db objects
 * @param parent
 */
private Control createDBMetaDataSelectionComposite(Composite parent){
  boolean supportsSchema=JdbcMetaDataProvider.getInstance().isSupportSchema();
  boolean supportsProcedure=JdbcMetaDataProvider.getInstance().isSupportProcedure();
  Composite tablescomposite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  tablescomposite.setLayout(layout);
  GridData data=new GridData(GridData.FILL_VERTICAL);
  data.grabExcessVerticalSpace=true;
  tablescomposite.setLayoutData(data);
  Label dataSourceLabel=new Label(tablescomposite,SWT.LEFT);
  dataSourceLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  GridData labelData=new GridData();
  dataSourceLabel.setLayoutData(labelData);
  availableDbObjectsTree=new Tree(tablescomposite,SWT.BORDER | SWT.MULTI);
  GridData treeData=new GridData(GridData.FILL_BOTH);
  treeData.grabExcessHorizontalSpace=true;
  treeData.grabExcessVerticalSpace=true;
  treeData.heightHint=150;
  availableDbObjectsTree.setLayoutData(treeData);
  createObjectTreeMenu();
  availableDbObjectsTree.addMenuDetectListener(new MenuDetectListener(){
    public void menuDetected(    MenuDetectEvent e){
      if (availableDbObjectsTree.getSelectionCount() > 0) {
        TreeItem item=availableDbObjectsTree.getSelection()[0];
        if (item.getParentItem() != null) {
          treeMenu.setVisible(true);
          treeMenu.setLocation(e.x,e.y);
        }
      }
    }
  }
);
  availableDbObjectsTree.addMouseListener(new MouseAdapter(){
    public void mouseDoubleClick(    MouseEvent e){
      insertTreeItemText();
    }
  }
);
  createSchemaFilterComposite(supportsSchema,supportsProcedure,tablescomposite);
  createSQLOptionGroup(tablescomposite);
  addDragSupportToTree();
  addFetchDbObjectListener(metadataBidiFormatStr);
  return tablescomposite;
}",0.6898534061511928
67778,"public void mouseDoubleClick(MouseEvent e){
  String text=getTextToInsert();
  if (text.length() > 0) {
    insertText(text);
  }
}","public void mouseDoubleClick(MouseEvent e){
  insertTreeItemText();
}",0.61
67779,"/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,null);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    imageWidth=image.getWidth();
    imageHeight=image.getHeight();
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}","/** 
 * Draws background image in a rectangle area with specified repeat pattern. <br> <br> The repeat mode can be: <table border=""solid""> <tr> <td align=""center""><B>Name</td> <td align=""center""><B>What for</td> </tr> <tr> <td>no-repeat</td> <td>Don't repeat.</td> </tr> <tr> <td>repeat-x</td> <td>Only repeat on x orientation.</td> </tr> <tr> <td>repeat-y</td> <td>Only repeat on y orientation.</td> </tr> <tr> <td>repeat</td> <td>Repeat on x and y orientation.</td> </tr> </table>
 * @param imageURI the uri of the background image.
 * @param x the x coordinate of the rectangle area.
 * @param y the y coordinate of the rectangle area.
 * @param width the width of the rectangle area.
 * @param height the height of the rectangle area.
 * @param positionX the initial x position of the background image.
 * @param positionY the initial y position of the background image.
 * @param repeat the repeat mode.
 * @throws Exception 
 */
public void drawBackgroundImage(String imageURI,float x,float y,float width,float height,float imageWidth,float imageHeight,float positionX,float positionY,int repeat) throws IOException {
  if (imageURI == null || imageURI.length() == 0) {
    return;
  }
  org.eclipse.birt.report.engine.layout.emitter.Image image=EmitterUtil.parseImage(null,IImageContent.IMAGE_URL,imageURI,null,null);
  byte[] imageData=image.getData();
  if (imageWidth == 0 || imageHeight == 0) {
    int resolutionX=image.getPhysicalWidthDpi();
    int resolutionY=image.getPhysicalHeightDpi();
    if (0 == resolutionX || 0 == resolutionY) {
      resolutionX=96;
      resolutionY=96;
    }
    imageWidth=image.getWidth() / resolutionX * 72;
    imageHeight=image.getHeight() / resolutionY * 72;
  }
  Position imageSize=new Position(imageWidth,imageHeight);
  Position areaPosition=new Position(x,y);
  Position areaSize=new Position(width,height);
  Position imagePosition=new Position(x + positionX,y + positionY);
  BackgroundImageLayout layout=new BackgroundImageLayout(areaPosition,areaSize,imagePosition,imageSize);
  Collection positions=layout.getImagePositions(repeat);
  gSave();
  setColor(Color.WHITE);
  out.println(""String_Node_Str"");
  drawRawRect(x,y,width,height);
  out.println(""String_Node_Str"");
  Iterator iterator=positions.iterator();
  while (iterator.hasNext()) {
    Position position=(Position)iterator.next();
    try {
      drawImage(imageURI,new ByteArrayInputStream(imageData),position.getX(),position.getY(),imageSize.getX(),imageSize.getY());
    }
 catch (    Exception e) {
      log.log(Level.WARNING,e.getLocalizedMessage());
    }
  }
  gRestore();
}",0.9462884731442366
67780,"/** 
 * The constructor.
 * @param _render
 * @param _oSource
 * @param _lo
 * @param _la
 * @param _paletteEntry
 * @param _m
 * @param _markerSize Null means auto size
 * @param _dc
 * @param _bDeferred
 * @param _bTransposed
 */
public MarkerRenderer(IDeviceRenderer _render,Object _oSource,Location _lo,LineAttributes _la,Fill _paletteEntry,Marker _m,Integer _markerSize,DeferredCache _dc,boolean _bDeferred,boolean _bTransposed){
  this.iRender=_render;
  la=goFactory.copyOf(_la);
  dc=_dc;
  bDeferred=_bDeferred;
  oSource=_oSource;
  m=_m;
  bTransposed=_bTransposed;
  if (_m.getOutline() != null) {
    la.setVisible(_m.getOutline().isVisible());
  }
  iSize=_markerSize == null ? _m.getSize() : _markerSize.intValue();
  paletteEntry=ChartUtil.convertFill(_paletteEntry,iSize,goFactory.TRANSPARENT());
  if (paletteEntry instanceof ColorDefinition && ChartUtil.isColorTransparent((ColorDefinition)paletteEntry) && (!_la.isVisible() || ChartUtil.isColorTransparent(_la.getColor()))) {
    paletteEntry=goFactory.createColorDefinition(0,0,0,15);
  }
  iSize=Math.abs(iSize) * iRender.getDisplayServer().getDpiResolution() / 72d;
  bRendering3D=_lo instanceof Location3D;
  if (bRendering3D) {
    lo3d=(Location3D)_lo;
  }
 else {
    lo=_lo;
  }
}","/** 
 * The constructor.
 * @param _render
 * @param _oSource
 * @param _lo
 * @param _la
 * @param _paletteEntry
 * @param _m
 * @param _markerSize Null means auto size
 * @param _dc
 * @param _bDeferred
 * @param _bTransposed
 */
public MarkerRenderer(IDeviceRenderer _render,Object _oSource,Location _lo,LineAttributes _la,Fill _paletteEntry,Marker _m,Integer _markerSize,DeferredCache _dc,boolean _bDeferred,boolean _bTransposed){
  this.iRender=_render;
  la=goFactory.copyOf(_la);
  dc=_dc;
  bDeferred=_bDeferred;
  oSource=_oSource;
  m=_m;
  bTransposed=_bTransposed;
  if (_m.getOutline() != null) {
    la.setVisible(_m.getOutline().isVisible());
  }
  iSize=_markerSize == null ? _m.getSize() : _markerSize.intValue();
  paletteEntry=FillUtil.convertFill(_paletteEntry,iSize,goFactory.TRANSPARENT());
  if (paletteEntry instanceof ColorDefinition && ChartUtil.isColorTransparent((ColorDefinition)paletteEntry) && (!_la.isVisible() || ChartUtil.isColorTransparent(_la.getColor()))) {
    paletteEntry=goFactory.createColorDefinition(0,0,0,15);
  }
  iSize=Math.abs(iSize) * iRender.getDisplayServer().getDpiResolution() / 72d;
  bRendering3D=_lo instanceof Location3D;
  if (bRendering3D) {
    lo3d=(Location3D)_lo;
  }
 else {
    lo=_lo;
  }
}",0.9964214711729622
67781,"private void drawCrosshair(IPrimitiveRenderer ipr) throws ChartException {
  if (paletteEntry instanceof Gradient) {
    paletteEntry=((Gradient)paletteEntry).getStartColor();
  }
  if (!(paletteEntry instanceof ColorDefinition)) {
    throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{paletteEntry},Messages.getResourceBundle(iRender.getULocale()));
  }
  if (ChartUtil.isColorTransparent((ColorDefinition)paletteEntry)) {
    paletteEntry=goFactory.createColorDefinition(0,0,0,15);
  }
  final ColorDefinition cd=(ColorDefinition)paletteEntry;
  final LineAttributes lia=goFactory.createLineAttributes(goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,la.getThickness());
  final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  final Line3DRenderEvent lre3d=bRendering3D ? (Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,Line3DRenderEvent.class) : null;
  if (bRendering3D) {
    lre3d.setLineAttributes(lia);
    lre3d.setStart3D(goFactory.createLocation3D(lo3d.getX(),lo3d.getY() - iSize,lo3d.getZ()));
    lre3d.setEnd3D(goFactory.createLocation3D(lo3d.getX(),lo3d.getY() + iSize,lo3d.getZ()));
  }
 else {
    lre.setLineAttributes(lia);
    lre.setStart(goFactory.createLocation(lo.getX(),lo.getY() - iSize));
    lre.setEnd(goFactory.createLocation(lo.getX(),lo.getY() + iSize));
  }
  if (bRendering3D) {
    final Location3D[] loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() + iSize - 1,lo3d.getZ());
    loa[1]=goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() + iSize - 1,lo3d.getZ());
    loa[2]=goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() - iSize - 1,lo3d.getZ());
    loa[3]=goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() - iSize - 1,lo3d.getZ());
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,Polygon3DRenderEvent.class);
    pre.setPoints3D(loa);
    pre.setDoubleSided(true);
    preCopy=pre;
  }
 else {
    final Location[] loa=new Location[4];
    loa[0]=goFactory.createLocation(lo.getX() - iSize,lo.getY() + iSize);
    loa[1]=goFactory.createLocation(lo.getX() + iSize,lo.getY() + iSize);
    loa[2]=goFactory.createLocation(lo.getX() + iSize,lo.getY() - iSize);
    loa[3]=goFactory.createLocation(lo.getX() - iSize,lo.getY() - iSize);
    final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setPoints(loa);
    preCopy=pre;
  }
  if (bRendering3D) {
    dc.addLine(lre3d);
    lre3d.setLineAttributes(lia);
    lre3d.setStart3D(goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY(),lo3d.getZ()));
    lre3d.setEnd3D(goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY(),lo3d.getZ()));
    dc.addLine(lre3d);
  }
 else {
    if (bDeferred) {
      dc.addMarker(lre,PrimitiveRenderEvent.DRAW,iSize);
    }
 else {
      ipr.drawLine(lre);
    }
    lre.setLineAttributes(lia);
    lre.setStart(goFactory.createLocation(lo.getX() - iSize,lo.getY()));
    lre.setEnd(goFactory.createLocation(lo.getX() + iSize,lo.getY()));
    if (bDeferred) {
      dc.addMarker(lre,PrimitiveRenderEvent.DRAW,iSize);
    }
 else {
      ipr.drawLine(lre);
    }
  }
}","private void drawCrosshair(IPrimitiveRenderer ipr) throws ChartException {
  paletteEntry=FillUtil.getColor(paletteEntry);
  if (ChartUtil.isColorTransparent((ColorDefinition)paletteEntry)) {
    paletteEntry=goFactory.createColorDefinition(0,0,0,15);
  }
  final ColorDefinition cd=(ColorDefinition)paletteEntry;
  final LineAttributes lia=goFactory.createLineAttributes(goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,la.getThickness());
  final LineRenderEvent lre=((EventObjectCache)ipr).getEventObject(oSource,LineRenderEvent.class);
  final Line3DRenderEvent lre3d=bRendering3D ? (Line3DRenderEvent)((EventObjectCache)ipr).getEventObject(oSource,Line3DRenderEvent.class) : null;
  if (bRendering3D) {
    lre3d.setLineAttributes(lia);
    lre3d.setStart3D(goFactory.createLocation3D(lo3d.getX(),lo3d.getY() - iSize,lo3d.getZ()));
    lre3d.setEnd3D(goFactory.createLocation3D(lo3d.getX(),lo3d.getY() + iSize,lo3d.getZ()));
  }
 else {
    lre.setLineAttributes(lia);
    lre.setStart(goFactory.createLocation(lo.getX(),lo.getY() - iSize));
    lre.setEnd(goFactory.createLocation(lo.getX(),lo.getY() + iSize));
  }
  if (bRendering3D) {
    final Location3D[] loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() + iSize - 1,lo3d.getZ());
    loa[1]=goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() + iSize - 1,lo3d.getZ());
    loa[2]=goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY() - iSize - 1,lo3d.getZ());
    loa[3]=goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY() - iSize - 1,lo3d.getZ());
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,Polygon3DRenderEvent.class);
    pre.setPoints3D(loa);
    pre.setDoubleSided(true);
    preCopy=pre;
  }
 else {
    final Location[] loa=new Location[4];
    loa[0]=goFactory.createLocation(lo.getX() - iSize,lo.getY() + iSize);
    loa[1]=goFactory.createLocation(lo.getX() + iSize,lo.getY() + iSize);
    loa[2]=goFactory.createLocation(lo.getX() + iSize,lo.getY() - iSize);
    loa[3]=goFactory.createLocation(lo.getX() - iSize,lo.getY() - iSize);
    final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(oSource,PolygonRenderEvent.class);
    pre.setPoints(loa);
    preCopy=pre;
  }
  if (bRendering3D) {
    dc.addLine(lre3d);
    lre3d.setLineAttributes(lia);
    lre3d.setStart3D(goFactory.createLocation3D(lo3d.getX() - iSize,lo3d.getY(),lo3d.getZ()));
    lre3d.setEnd3D(goFactory.createLocation3D(lo3d.getX() + iSize,lo3d.getY(),lo3d.getZ()));
    dc.addLine(lre3d);
  }
 else {
    if (bDeferred) {
      dc.addMarker(lre,PrimitiveRenderEvent.DRAW,iSize);
    }
 else {
      ipr.drawLine(lre);
    }
    lre.setLineAttributes(lia);
    lre.setStart(goFactory.createLocation(lo.getX() - iSize,lo.getY()));
    lre.setEnd(goFactory.createLocation(lo.getX() + iSize,lo.getY()));
    if (bDeferred) {
      dc.addMarker(lre,PrimitiveRenderEvent.DRAW,iSize);
    }
 else {
      ipr.drawLine(lre);
    }
  }
}",0.9478733610489288
67782,"protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  imageArea.setParent(root);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      if (context.getPageOverflow() == IPDFRenderOption.FIT_TO_PAGE_SIZE || context.getPageOverflow() == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setContentHeight(actualHeight);
        root.setContentWidth(actualWidth);
      }
 else {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setNeedClip(true);
        root.setAllocatedHeight(Math.min(maxHeight,cHeight));
        root.setAllocatedWidth(Math.min(maxWidth,cWidth));
      }
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  if (context.getEngineTaskType() != IEngineTask.TASK_RUN) {
    processChartLegend(image,imageArea);
  }
  root.finished=false;
}","protected void init() throws BirtException {
  if (PropertyUtil.isInlineElement(image)) {
    root=new ImageInlineContainer(parent,context,image);
  }
 else {
    root=new ImageBlockContainer(parent,context,image);
  }
  root.initialize();
  root.setAllocatedWidth(parent.getMaxAvaWidth());
  root.setMaxAvaWidth(root.getContentWidth());
  Dimension contentDimension=getSpecifiedDimension(image,root.getContentWidth(),true);
  ImageArea imageArea=createImageArea(image);
  imageArea.setParent(root);
  int maxHeight=root.getMaxAvaHeight();
  int maxWidth=root.getMaxAvaWidth();
  int cHeight=contentDimension.getHeight();
  int cWidth=contentDimension.getWidth();
  int actualHeight=cHeight;
  int actualWidth=cWidth;
  if (cHeight > maxHeight || cWidth > maxWidth) {
    if (fitToContainer) {
      float rh=((float)maxHeight) / cHeight;
      float rw=((float)maxWidth) / cWidth;
      if (rh > rw) {
        actualHeight=(int)((float)cHeight * maxWidth / cWidth);
        actualWidth=maxWidth;
      }
 else {
        actualHeight=maxHeight;
        actualWidth=(int)((float)cWidth * maxHeight / cHeight);
      }
      imageArea.setWidth(actualWidth);
      imageArea.setHeight(actualHeight);
      root.setContentWidth(imageArea.getWidth());
      root.setContentHeight(imageArea.getHeight());
    }
 else {
      if (context.getPageOverflow() == IPDFRenderOption.FIT_TO_PAGE_SIZE || context.getPageOverflow() == IPDFRenderOption.ENLARGE_PAGE_SIZE) {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setContentHeight(actualHeight);
        root.setContentWidth(actualWidth);
      }
 else {
        imageArea.setWidth(actualWidth);
        imageArea.setHeight(actualHeight);
        root.setNeedClip(true);
        root.setAllocatedHeight(Math.min(maxHeight,cHeight));
        root.setAllocatedWidth(Math.min(maxWidth,cWidth));
        if (maxWidth < cWidth) {
          root.getBoxStyle().setRightBorder(null);
        }
        if (maxHeight < cHeight) {
          root.getBoxStyle().setBottomBorder(null);
        }
      }
    }
  }
 else {
    imageArea.setWidth(actualWidth);
    imageArea.setHeight(actualHeight);
    root.setContentWidth(imageArea.getWidth());
    root.setContentHeight(imageArea.getHeight());
  }
  root.addChild(imageArea);
  imageArea.setPosition(root.getContentX(),root.getContentY());
  if (context.getEngineTaskType() != IEngineTask.TASK_RUN) {
    processChartLegend(image,imageArea);
  }
  root.finished=false;
}",0.9602497398543184
67783,"public Control createContents(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  combo=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  combo.setItems(getSimilarDataSources());
  selectCurrentDataSource();
  ((DataSetHandle)this.getContainer().getModel()).addListener(this);
  return composite;
}","public Control createContents(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=2;
  composite.setLayout(layout);
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  combo=new Combo(composite,SWT.BORDER | SWT.READ_ONLY);
  combo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  combo.setItems(getSimilarDataSources());
  combo.setVisibleItemCount(30);
  selectCurrentDataSource();
  ((DataSetHandle)this.getContainer().getModel()).addListener(this);
  return composite;
}",0.9722455845248108
67784,"private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      linkToSalarParameterChanged();
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          ReportParameterAdapter adapter=new ReportParameterAdapter();
          try {
            adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,dataSetParameterHandle,((DataSetEditor)getContainer()).getCurrentDataSetDesign());
          }
 catch (          SemanticException e) {
          }
catch (          OdaException e) {
          }
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      handle.addListener(new ScalarParameterListener());
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
    }
  }
;
  ControlProvider.createButton(reportParamComposite,SWT.PUSH,listener);
}","private void createComboCellParameter(Composite parent,String label){
  ControlProvider.createLabel(parent,label);
  reportParamComposite=ControlProvider.getDefaultComposite(parent);
  linkToSalarParameter=new Combo(reportParamComposite,SWT.READ_ONLY);
  linkToSalarParameter.setLayoutData(ControlProvider.getGridDataWithHSpan(1));
  linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
  linkToSalarParameter.setVisibleItemCount(30);
  linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),((OdaDataSetParameterHandle)structureHandle).getParamName()));
  linkToSalarParameter.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      linkToSalarParameterChanged();
      if (linkToSalarParameter.isEnabled()) {
        validateSyntax();
      }
    }
  }
);
  SelectionAdapter listener=new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      updateStructureHandle();
      OdaDataSetParameterHandle dataSetParameterHandle=(OdaDataSetParameterHandle)structureHandle;
      String originalParamName=dataSetParameterHandle.getParamName();
      ParameterDialog dialog=null;
      ParameterHandle handle=ParameterPageUtil.getScalarParameter(linkToSalarParameter.getText(),false);
      boolean isCreateMode=true;
      if (handle == null) {
        handle=(ScalarParameterHandle)ElementProcessorFactory.createProcessor(""String_Node_Str"").createElement(null);
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        if (dataSetParameterHandle != null) {
          ReportParameterAdapter adapter=new ReportParameterAdapter();
          try {
            adapter.updateLinkedReportParameter((ScalarParameterHandle)handle,dataSetParameterHandle,((DataSetEditor)getContainer()).getCurrentDataSetDesign());
          }
 catch (          SemanticException e) {
          }
catch (          OdaException e) {
          }
        }
        isCreateMode=true;
      }
 else {
        dialog=new ParameterDialog(ParameterInputDialog.this.getParentShell(),Messages.getString(""String_Node_Str""),false);
        isCreateMode=false;
      }
      handle.addListener(new ScalarParameterListener());
      dialog.setInput(handle);
      if (dialog.open() == OK) {
        if (dialog.getResult() instanceof ParameterHandle) {
          ParameterHandle paramerHandle=(ParameterHandle)dialog.getResult();
          if (isCreateMode) {
            SlotHandle parameterSlotHandle=Utility.getReportModuleHandle().getParameters();
            try {
              parameterSlotHandle.add(paramerHandle);
              linkToSalarParameter.add(paramerHandle.getQualifiedName());
            }
 catch (            ContentException e) {
              ExceptionHandler.handle(e);
            }
catch (            NameException e) {
              ExceptionHandler.handle(e);
            }
          }
          linkToSalarParameter.setItems(ParameterPageUtil.getLinkedReportParameterNames((OdaDataSetParameterHandle)structureHandle));
          linkToSalarParameter.select(Utility.findIndex(linkToSalarParameter.getItems(),paramerHandle.getQualifiedName()));
        }
      }
 else {
        dataSetParameterHandle.setParamName(originalParamName);
      }
    }
  }
;
  ControlProvider.createButton(reportParamComposite,SWT.PUSH,listener);
}",0.992988606485539
67785,"private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
    }
  }
 else {
    return null;
  }
  return currentChart;
}","private Chart getConvertedChart(Chart currentChart,String sNewSubType,String sNewDimension){
  Chart helperModel=(Chart)EcoreUtil.copy(currentChart);
  helperModel.eAdapters().addAll(currentChart.eAdapters());
  ChartCacheManager.getInstance().cacheSeries(ChartUIUtil.getAllOrthogonalSeriesDefinitions(helperModel));
  if (currentChart instanceof ChartWithAxes) {
    if (!ChartPreviewPainter.isLivePreviewActive()) {
      helperModel.setSampleData(getConvertedSampleData(helperModel.getSampleData(),(((ChartWithAxes)currentChart).getAxes().get(0)).getType(),AxisType.LINEAR_LITERAL));
    }
    currentChart=ChartWithoutAxesImpl.create();
    currentChart.setType(TYPE_LITERAL);
    currentChart.setSubType(sNewSubType);
    currentChart.setDimension(getDimensionFor(sNewDimension));
    currentChart.setBlock(helperModel.getBlock());
    currentChart.setDescription(helperModel.getDescription());
    currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    if (helperModel.getInteractivity() != null) {
      currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
      currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
    }
    currentChart.setSampleData(helperModel.getSampleData());
    currentChart.setScript(helperModel.getScript());
    currentChart.setUnits(helperModel.getUnits());
    if (helperModel.getGridColumnCount() > 0) {
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
    }
 else {
      currentChart.setGridColumnCount(1);
    }
    ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add((((ChartWithAxes)helperModel).getAxes().get(0)).getSeriesDefinitions().get(0));
    Vector<SeriesDefinition> vOSD=new Vector<SeriesDefinition>();
    Axis primaryOrthogonalAxis=((ChartWithAxes)helperModel).getAxes().get(0).getAssociatedAxes().get(0);
    EList<SeriesDefinition> osd=primaryOrthogonalAxis.getSeriesDefinitions();
    for (int j=0; j < osd.size(); j++) {
      SeriesDefinition sd=osd.get(j);
      Series series=sd.getDesignTimeSeries();
      sd.getSeries().clear();
      sd.getSeries().add(getConvertedSeries(series,j));
      vOSD.add(sd);
    }
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().clear();
    (((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions().addAll(vOSD);
    currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
    currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
  }
 else   if (currentChart instanceof ChartWithoutAxes) {
    if (currentChart.getType().equals(TYPE_LITERAL)) {
      currentChart.setSubType(sNewSubType);
      if (!currentChart.getDimension().equals(getDimensionFor(sNewDimension))) {
        currentChart.setDimension(getDimensionFor(sNewDimension));
      }
    }
 else {
      currentChart=ChartWithoutAxesImpl.create();
      currentChart.setType(TYPE_LITERAL);
      currentChart.setSubType(sNewSubType);
      currentChart.setDimension(getDimensionFor(sNewDimension));
      currentChart.setBlock(helperModel.getBlock());
      currentChart.setDescription(helperModel.getDescription());
      currentChart.setGridColumnCount(helperModel.getGridColumnCount());
      currentChart.setSampleData(helperModel.getSampleData());
      currentChart.setScript(helperModel.getScript());
      currentChart.setUnits(helperModel.getUnits());
      if (helperModel.getInteractivity() != null) {
        currentChart.getInteractivity().setEnable(helperModel.getInteractivity().isEnable());
        currentChart.getInteractivity().setLegendBehavior(helperModel.getInteractivity().getLegendBehavior());
      }
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().clear();
      ((ChartWithoutAxes)currentChart).getSeriesDefinitions().add(((ChartWithoutAxes)helperModel).getSeriesDefinitions().get(0));
      EList<SeriesDefinition> seriesdefinitions=(((ChartWithoutAxes)currentChart).getSeriesDefinitions().get(0)).getSeriesDefinitions();
      for (int j=0; j < seriesdefinitions.size(); j++) {
        Series series=seriesdefinitions.get(j).getDesignTimeSeries();
        series=getConvertedSeries(series,j);
        seriesdefinitions.get(j).getSeries().clear();
        seriesdefinitions.get(j).getSeries().add(series);
      }
      currentChart.getLegend().setItemType(LegendItemType.SERIES_LITERAL);
      currentChart.getTitle().getLabel().getCaption().setValue(getDefaultTitle());
    }
  }
 else {
    return null;
  }
  return currentChart;
}",0.9933993399339934
67786,"public void close() throws BirtException {
  if (odiResult == null)   return;
  this.resultService.getSession().getEngine().removeListener(listener);
  if (this.getRdSaveHelper().needsSaveToDoc()) {
    while (this.next())     ;
    this.getRdSaveHelper().doSaveFinish();
  }
  if (needCache() && !this.isEmpty()) {
    while (this.next())     ;
    closeCacheOutputStream();
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}","public void close() throws BirtException {
  if (odiResult == null)   return;
  this.resultService.getSession().getEngine().removeListener(listener);
  if (!stopSign.isStopped()) {
    if (this.getRdSaveHelper().needsSaveToDoc()) {
      while (this.next())       ;
      this.getRdSaveHelper().doSaveFinish();
    }
    if (needCache() && !this.isEmpty()) {
      while (this.next())       ;
      closeCacheOutputStream();
    }
  }
  if (odiResult != null)   odiResult.close();
  odiResult=null;
  resultService=null;
  logger.logp(Level.FINE,ResultIterator.class.getName(),""String_Node_Str"",""String_Node_Str"");
}",0.9464740866610024
67787,"/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines() throws ChartException {
  PlotWithAxes pwa=(PlotWithAxes)getComputations();
  Bounds boPlotClientArea=pwa.getPlotBounds();
  Axis ax;
  OneAxis[] oaxa=getAllOneAxes();
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      if (deValue == null) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ml},Messages.getResourceBundle(getRunTimeContext().getULocale()));
      }
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,ml.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}","/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines() throws ChartException {
  PlotWithAxes pwa=(PlotWithAxes)getComputations();
  Bounds boPlotClientArea=pwa.getPlotBounds();
  Axis ax;
  OneAxis[] oaxa=getAllOneAxes();
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      if (deValue == null) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ml},Messages.getResourceBundle(getRunTimeContext().getULocale()));
      }
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,getValidMarkerLineFormat(ml),oaxa[i].getRunTimeContext().getULocale(),null));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}",0.9975975655330735
67788,"@Override protected boolean doAction() throws Exception {
  ReportDesignHandle designHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  VariableElementHandle variable=(VariableElementHandle)ElementProcessorFactory.createProcessor(ReportDesignConstants.VARIABLE_ELEMENT).createElement(null);
  VariableDialog dialog=new VariableDialog(Messages.getString(""String_Node_Str""),designHandle,variable);
  if (dialog.open() == Dialog.OK)   designHandle.getPropertyHandle(IReportDesignModel.PAGE_VARIABLES_PROP).add(variable);
  return true;
}","@Override protected boolean doAction() throws Exception {
  isDone=false;
  ReportDesignHandle designHandle=(ReportDesignHandle)SessionHandleAdapter.getInstance().getReportDesignHandle();
  VariableElementHandle variable=(VariableElementHandle)ElementProcessorFactory.createProcessor(ReportDesignConstants.VARIABLE_ELEMENT).createElement(null);
  VariableDialog dialog=new VariableDialog(Messages.getString(""String_Node_Str""),designHandle,variable);
  if (dialog.open() == Dialog.OK)   designHandle.getPropertyHandle(IReportDesignModel.PAGE_VARIABLES_PROP).add(variable);
  isDone=true;
  createElement=variable;
  return true;
}",0.939217318900916
67789,"public void paintControl(PaintEvent pe){
  Color cBackground=null;
  try {
    Color clrTransparencyBackground=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    GC gc=pe.gc;
    if (!this.isEnabled()) {
      gc.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      gc.setForeground(cFore);
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
      }
 else {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        gc.setBackground(cFore);
        gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
      }
    }
 else {
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.setBackground(clrTransparencyBackground);
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        Color cText=Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND);
        gc.setForeground(cText);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
        cText.dispose();
      }
 else {
        if (fCurrent instanceof ColorDefinition) {
          cBackground=new Color(Display.getDefault(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue());
          gc.setBackground(cBackground);
          gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
        }
 else         if (fCurrent instanceof Image) {
          org.eclipse.swt.graphics.Image img=getSWTImage((Image)fCurrent);
          if (fCurrent instanceof PatternImage) {
            Pattern ptn=new Pattern(Display.getCurrent(),img);
            gc.setBackgroundPattern(ptn);
            gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
            ptn.dispose();
          }
 else {
            gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
            gc.drawImage(img,2,2);
          }
          if (img != null) {
            img.dispose();
          }
        }
 else         if (fCurrent instanceof Gradient) {
          fillGradient(gc);
        }
 else         if (fCurrent instanceof MultipleFill) {
          if (((MultipleFill)fCurrent).getFills() == null) {
            return;
          }
          Color clr1=null;
          Color clr2=null;
          if (((MultipleFill)fCurrent).getFills().get(0) != null) {
            ColorDefinition cd1=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(0);
            clr1=new Color(Display.getDefault(),cd1.getRed(),cd1.getGreen(),cd1.getBlue());
            gc.setBackground(clr1);
            gc.fillRectangle(2,2,(this.getSize().x) / 2 - 2,this.getSize().y - 4);
          }
          if (((MultipleFill)fCurrent).getFills().get(1) != null) {
            ColorDefinition cd2=(ColorDefinition)((MultipleFill)fCurrent).getFills().get(1);
            clr2=new Color(Display.getDefault(),cd2.getRed(),cd2.getGreen(),cd2.getBlue());
            gc.setBackground(clr2);
            gc.fillRectangle((this.getSize().x) / 2,2,this.getSize().x / 2 - 2,this.getSize().y - 4);
          }
        }
      }
      if (isFocusControl()) {
        gc.setLineStyle(SWT.LINE_DOT);
        gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
        gc.drawRectangle(1,1,getSize().x - 3,this.getSize().y - 3);
      }
    }
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    if (cBackground != null) {
      cBackground.dispose();
    }
  }
}","public void paintControl(PaintEvent pe){
  Color cBackground=null;
  try {
    Color clrTransparencyBackground=Display.getCurrent().getSystemColor(SWT.COLOR_LIST_BACKGROUND);
    GC gc=pe.gc;
    if (!this.isEnabled()) {
      gc.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
      Color cFore=Display.getCurrent().getSystemColor(SWT.COLOR_DARK_GRAY);
      gc.setForeground(cFore);
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
      }
 else {
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        gc.setBackground(cFore);
        gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
      }
    }
 else {
      if (fCurrent == null || fCurrent instanceof ColorDefinition && ((ColorDefinition)fCurrent).getTransparency() == 0) {
        gc.setBackground(clrTransparencyBackground);
        gc.fillRectangle(0,0,this.getSize().x,this.getSize().y);
        Color cText=Display.getDefault().getSystemColor(SWT.COLOR_LIST_FOREGROUND);
        gc.setForeground(cText);
        if (!isAutoEnabled || fCurrent != null) {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
 else {
          gc.drawText(Messages.getString(""String_Node_Str""),2,2);
        }
        cText.dispose();
      }
 else {
        if (fCurrent instanceof ColorDefinition) {
          cBackground=new Color(Display.getDefault(),((ColorDefinition)fCurrent).getRed(),((ColorDefinition)fCurrent).getGreen(),((ColorDefinition)fCurrent).getBlue());
          gc.setBackground(cBackground);
          gc.fillRectangle(2,2,this.getSize().x - 4,this.getSize().y - 4);
        }
 else         if (fCurrent instanceof Image) {
          org.eclipse.swt.graphics.Image img=getSWTImage((Image)fCurrent);
          if (fCurrent instanceof PatternImage) {
            Pattern ptn=new Pattern(Display.getCurrent(),img);
            gc.setBackgroundPattern(ptn);
            gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
            ptn.dispose();
          }
 else {
            gc.fillRectangle(2,2,getSize().x - 4,this.getSize().y - 4);
            gc.drawImage(img,2,2);
          }
          if (img != null) {
            img.dispose();
          }
        }
 else         if (fCurrent instanceof Gradient) {
          fillGradient(gc);
        }
 else         if (fCurrent instanceof MultipleFill) {
          fillMultiFill(gc);
        }
      }
      if (isFocusControl()) {
        gc.setLineStyle(SWT.LINE_DOT);
        gc.setForeground(Display.getCurrent().getSystemColor(SWT.COLOR_BLACK));
        gc.drawRectangle(1,1,getSize().x - 3,this.getSize().y - 3);
      }
    }
  }
 catch (  Exception ex) {
    logger.log(ex);
  }
 finally {
    if (cBackground != null) {
      cBackground.dispose();
    }
  }
}",0.8711433756805808
67790,"/** 
 * Fill gradient.
 * @param gc
 */
protected void fillGradient(GC gc){
  idr.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT,gc);
  PolygonRenderEvent event=new PolygonRenderEvent(this);
  Location[] la=LocationImpl.create(new double[]{2,2,this.getSize().x - 2,this.getSize().x - 2},new double[]{2,this.getSize().y - 2,this.getSize().y - 2,2});
  event.setPoints(la);
  event.setBackground(fCurrent);
  try {
    idr.fillPolygon(event);
  }
 catch (  ChartException e) {
  }
}","/** 
 * Fill gradient.
 * @param gc
 */
protected void fillGradient(GC gc){
  Location[] la=LocationImpl.create(new double[]{2,2,this.getSize().x - 2,this.getSize().x - 2},new double[]{2,this.getSize().y - 2,this.getSize().y - 2,2});
  fillPolygonWithIdr(gc,fCurrent,la);
}",0.6657789613848203
67791,"public void setEnabled(boolean bState){
  super.setEnabled(bState);
  redraw();
}","@Override public void setEnabled(boolean bState){
  super.setEnabled(bState);
  redraw();
}",0.9418604651162792
67792,"/** 
 * @param stopSign
 * @throws DataException
 */
private void populateResultSet() throws DataException {
  List aggCCList=prepareComputedColumns(TransformationConstants.RESULT_SET_MODEL);
  doRowFiltering();
  populateTempComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  List aggrDefns=this.populator.getEventHandler().getAggrDefinitions();
  prepareAggregations(aggrDefns);
  doGroupFiltering();
  doAggrRowFiltering();
  doRowSorting();
  doGroupSorting();
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true);
    groupingDone=true;
  }
  clearTemporaryComputedColumns(iccState);
}","/** 
 * @param stopSign
 * @throws DataException
 */
private void populateResultSet() throws DataException {
  List aggCCList=prepareComputedColumns(TransformationConstants.RESULT_SET_MODEL);
  doRowFiltering();
  populateTempComputedColumns(this.getAggrComputedColumns(aggCCList,false));
  List aggrDefns=this.populator.getEventHandler().getAggrDefinitions();
  prepareAggregations(aggrDefns);
  doGroupFiltering();
  if (needDoGroupFiltering() && psController.needDoOperation(PassStatusController.AGGR_ROW_FILTERING))   prepareAggregations(aggrDefns);
  doAggrRowFiltering();
  doRowSorting();
  doGroupSorting();
  if (!groupingDone) {
    PassUtil.pass(this.populator,new OdiResultSetWrapper(populator.getResultIterator()),true);
    groupingDone=true;
  }
  clearTemporaryComputedColumns(iccState);
}",0.9069925322471148
67793,"@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (emptyVlaue != null && handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void handleCell(CrosstabCellHandle cell,String emptyVlaue) throws BirtException {
  if (cell == null) {
    return;
  }
  if (handler != null) {
    ICrosstabCell cellItem=new CrosstabCellImpl(cell);
    handler.callFunction(CrosstabScriptHandler.ON_PREPARE_CELL,cellItem,context);
  }
  for (Iterator itr=cell.getContents().iterator(); itr.hasNext(); ) {
    ReportElementHandle handle=(ReportElementHandle)itr.next();
    context.prepare(handle);
    if (handle instanceof DataItemHandle) {
      DataItemHandle dataHandle=(DataItemHandle)handle;
      MapRule rule=StructureFactory.createMapRule();
      rule.setTestExpression(ExpressionUtil.createJSDataExpression(dataHandle.getResultSetColumn()));
      rule.setOperator(DesignChoiceConstants.MAP_OPERATOR_NULL);
      rule.setDisplay(emptyVlaue);
      PropertyHandle mapHandle=dataHandle.getPropertyHandle(StyleHandle.MAP_RULES_PROP);
      try {
        mapHandle.addItem(rule);
      }
 catch (      SemanticException e) {
        logger.log(Level.SEVERE,Messages.getString(""String_Node_Str""),e);
      }
    }
  }
}",0.9902826855123676
67794,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  if (sc != null) {
    sc.setData(dsi);
  }
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum instanceof DateTimeDataElement) {
      sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum instanceof DateTimeDataElement) {
      sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  if (sc != null) {
    sc.setData(dsi);
  }
  return sc;
}",0.9408574817827486
67795,"/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      sc.setMinimum(new Double(((NumberDataElement)oMinimum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMinimumFixed(true);
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      sc.setMaximum(Double.valueOf(((NumberDataElement)oMaximum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMaximumFixed(true);
  }
  if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
    if (((Double)sc.getMinimum()).doubleValue() > ((Double)sc.getMaximum()).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum instanceof NumberDataElement) {
    sc.setMinimum(new Double(((NumberDataElement)oMinimum).getValue()));
    sc.info.bMinimumFixed(true);
  }
  if (oMaximum instanceof NumberDataElement) {
    sc.setMaximum(Double.valueOf(((NumberDataElement)oMaximum).getValue()));
    sc.info.bMaximumFixed(true);
  }
  if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
    if (((Double)sc.getMinimum()).doubleValue() > ((Double)sc.getMaximum()).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.4788961038961039
67796,"public final Object clone(){
  final AutoScale sc=new AutoScale(info);
  sc.context=context.copy();
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.labelVisHelper=labelVisHelper;
  sc.staggeredHelper=staggeredHelper;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  return sc;
}","@Override public final Object clone(){
  final AutoScale sc=new AutoScale(info);
  sc.context=context.copy();
  sc.dStart=dStart;
  sc.dEnd=dEnd;
  sc.dStartShift=dStartShift;
  sc.dEndShift=dEndShift;
  sc.atcTickCoordinates=atcTickCoordinates;
  sc.labelVisHelper=labelVisHelper;
  sc.staggeredHelper=staggeredHelper;
  sc.hmComputedLabelText=sc.hmComputedLabelText;
  sc.tmpSC=tmpSC;
  return sc;
}",0.9873737373737372
67797,"/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,wizardContext,this.laCurrent.getColor(),false,false);
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}","/** 
 */
private void placeComponents(){
  FillLayout flMain=new FillLayout();
  flMain.marginHeight=0;
  flMain.marginWidth=0;
  GridLayout glContent=new GridLayout();
  glContent.verticalSpacing=5;
  glContent.horizontalSpacing=5;
  glContent.marginHeight=4;
  glContent.marginWidth=4;
  glContent.numColumns=6;
  this.setLayout(flMain);
  cmpContent=new Composite(this,SWT.NONE);
  cmpContent.setLayout(glContent);
  bEnabled=laCurrent.isVisible();
  boolean bEnableUI=bEnabled;
  if (bEnableVisibility) {
    cbVisible=new Button(cmpContent,SWT.CHECK);
    GridData gdCBVisible=new GridData(GridData.FILL_HORIZONTAL);
    gdCBVisible.horizontalSpan=6;
    cbVisible.setLayoutData(gdCBVisible);
    cbVisible.setText(Messages.getString(""String_Node_Str""));
    cbVisible.setSelection(laCurrent.isVisible());
    cbVisible.addSelectionListener(this);
    if (bEnabled) {
      bEnableUI=cbVisible.getSelection();
    }
  }
  if (bEnableStyles) {
    lblStyle=new Label(cmpContent,SWT.NONE);
    GridData gdLStyle=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblStyle.setLayoutData(gdLStyle);
    lblStyle.setText(Messages.getString(""String_Node_Str""));
    lblStyle.setEnabled(bEnableUI);
    cmbStyle=new LineStyleChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,getSWTLineStyle(laCurrent.getStyle()),getLineStyleItems());
    GridData gdCBStyle=new GridData(GridData.FILL_HORIZONTAL);
    gdCBStyle.horizontalSpan=5;
    cmbStyle.setLayoutData(gdCBStyle);
    cmbStyle.addListener(LineStyleChooserComposite.SELECTION_EVENT,this);
    cmbStyle.setEnabled(bEnableUI);
  }
  if (bEnableWidths) {
    lblWidth=new Label(cmpContent,SWT.NONE);
    GridData gdLWidth=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblWidth.setLayoutData(gdLWidth);
    lblWidth.setText(Messages.getString(""String_Node_Str""));
    lblWidth.setEnabled(bEnableUI);
    cmbWidth=new LineWidthChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,laCurrent.getThickness());
    GridData gdCBWidth=new GridData(GridData.FILL_HORIZONTAL);
    gdCBWidth.horizontalSpan=5;
    cmbWidth.setLayoutData(gdCBWidth);
    cmbWidth.addListener(LineWidthChooserComposite.SELECTION_EVENT,this);
    cmbWidth.setEnabled(bEnableUI);
  }
  if (bEnableColor) {
    lblColor=new Label(cmpContent,SWT.NONE);
    GridData gdLColor=new GridData(GridData.HORIZONTAL_ALIGN_BEGINNING);
    lblColor.setLayoutData(gdLColor);
    lblColor.setText(Messages.getString(""String_Node_Str""));
    lblColor.setEnabled(bEnableUI);
    int iFillOption=FillChooserComposite.DISABLE_PATTERN_FILL | FillChooserComposite.ENABLE_TRANSPARENT | FillChooserComposite.ENABLE_TRANSPARENT_SLIDER;
    cmbColor=new FillChooserComposite(cmpContent,SWT.DROP_DOWN | SWT.READ_ONLY,iFillOption,wizardContext,this.laCurrent.getColor());
    GridData gdCBColor=new GridData(GridData.FILL_HORIZONTAL);
    gdCBColor.horizontalSpan=5;
    cmbColor.setLayoutData(gdCBColor);
    cmbColor.addListener(this);
    cmbColor.setEnabled(bEnableUI);
  }
}",0.9695205479452056
67798,"private void createSelectionArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  label.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Composite selectionArea=new Composite(composite,SWT.NONE);
  selectionArea.setLayout(new FillLayout(SWT.VERTICAL));
  uri=new Button(selectionArea,SWT.RADIO);
  uri.setText(Messages.getString(""String_Node_Str""));
  uri.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectedType=URI_TYPE;
      title.setText(Messages.getString(""String_Node_Str""));
      updateButtons();
    }
  }
);
  embedded=new Button(selectionArea,SWT.RADIO);
  embedded.setText(Messages.getString(""String_Node_Str""));
  embedded.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      selectedType=EMBEDDED_TYPE;
      title.setText(Messages.getString(""String_Node_Str""));
      updateButtons();
    }
  }
);
}","private void createSelectionArea(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label label=new Label(composite,SWT.NONE);
  label.setText(Messages.getString(""String_Node_Str""));
  label.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));
  Composite selectionArea=new Composite(composite,SWT.NONE);
  selectionArea.setLayout(new FillLayout(SWT.VERTICAL));
  uri=new Button(selectionArea,SWT.RADIO);
  uri.setText(Messages.getString(""String_Node_Str""));
  uri.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      selectedType=URI_TYPE;
      title.setText(Messages.getString(""String_Node_Str""));
      updateButtons();
    }
  }
);
  embedded=new Button(selectionArea,SWT.RADIO);
  embedded.setText(Messages.getString(""String_Node_Str""));
  embedded.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      selectedType=EMBEDDED_TYPE;
      title.setText(Messages.getString(""String_Node_Str""));
      updateButtons();
    }
  }
);
}",0.9916036943744752
67799,"public void widgetSelected(SelectionEvent e){
  preview(removeQuote(uriEditor.getText()));
}","@Override public void widgetSelected(SelectionEvent e){
  preview(removeQuote(uriEditor.getText()));
}",0.9484536082474226
67800,"protected Control createDialogArea(Composite parent){
  Composite topCompostie=(Composite)super.createDialogArea(parent);
  createSelectionArea(topCompostie);
  new Label(topCompostie,SWT.SEPARATOR | SWT.HORIZONTAL).setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite composite=new Composite(topCompostie,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  createInputArea(composite);
  createPreviewArea(composite);
  new Label(topCompostie,SWT.SEPARATOR | SWT.HORIZONTAL).setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  return topCompostie;
}","@Override protected Control createDialogArea(Composite parent){
  Composite topCompostie=(Composite)super.createDialogArea(parent);
  createSelectionArea(topCompostie);
  new Label(topCompostie,SWT.SEPARATOR | SWT.HORIZONTAL).setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  Composite composite=new Composite(topCompostie,SWT.NONE);
  composite.setLayout(new GridLayout(2,false));
  createInputArea(composite);
  createPreviewArea(composite);
  new Label(topCompostie,SWT.SEPARATOR | SWT.HORIZONTAL).setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  return topCompostie;
}",0.9914089347079038
67801,"protected void okPressed(){
switch (selectedType) {
case URI_TYPE:
    fCurrent=ImageImpl.create(removeQuote(uriEditor.getText().trim()));
  break;
case EMBEDDED_TYPE:
BufferedInputStream bis=null;
try {
fCurrent=EmbeddedImageImpl.create(new File(uriEditor.getText().trim()).getName(),imageData);
bis=new BufferedInputStream(new URL(uriEditor.getText().trim()).openStream());
ByteArrayOutputStream bos=new ByteArrayOutputStream();
byte[] buf=new byte[1024];
int count=bis.read(buf);
while (count != -1) {
  bos.write(buf,0,count);
  count=bis.read(buf);
}
String data=new String(Base64.encodeBase64(bos.toByteArray()));
((EmbeddedImage)fCurrent).setData(data);
}
 catch (Exception e) {
WizardBase.displayException(e);
}
 finally {
if (bis != null) {
  try {
    bis.close();
  }
 catch (  IOException e) {
    WizardBase.displayException(e);
  }
}
}
break;
}
super.okPressed();
}","@Override protected void okPressed(){
switch (selectedType) {
case URI_TYPE:
    fCurrent=ImageImpl.create(removeQuote(uriEditor.getText().trim()));
  break;
case EMBEDDED_TYPE:
BufferedInputStream bis=null;
try {
fCurrent=EmbeddedImageImpl.create(new File(uriEditor.getText().trim()).getName(),imageData);
bis=new BufferedInputStream(new URL(uriEditor.getText().trim()).openStream());
ByteArrayOutputStream bos=new ByteArrayOutputStream();
byte[] buf=new byte[1024];
int count=bis.read(buf);
while (count != -1) {
  bos.write(buf,0,count);
  count=bis.read(buf);
}
String data=new String(Base64.encodeBase64(bos.toByteArray()));
((EmbeddedImage)fCurrent).setData(data);
}
 catch (Exception e) {
WizardBase.displayException(e);
}
 finally {
if (bis != null) {
  try {
    bis.close();
  }
 catch (  IOException e) {
    WizardBase.displayException(e);
  }
}
}
break;
}
super.okPressed();
}",0.994343891402715
67802,"private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (fCurrent instanceof Image) {
    uri=((Image)fCurrent).getURL();
    if (fCurrent instanceof EmbeddedImage) {
      imageData=((EmbeddedImage)fCurrent).getData();
    }
  }
  uriEditor.setText(uri);
  uriEditor.setFocus();
  clearPreview();
}","private void initURIEditor(){
  String uri=""String_Node_Str"";
  if (fCurrent instanceof Image && !(fCurrent instanceof PatternImage)) {
    uri=((Image)fCurrent).getURL();
    if (fCurrent instanceof EmbeddedImage) {
      imageData=((EmbeddedImage)fCurrent).getData();
    }
  }
  uriEditor.setText(uri);
  uriEditor.setFocus();
  clearPreview();
}",0.9408194233687404
67803,"protected Control createContents(Composite parent){
  Control ct=super.createContents(parent);
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_IMAGE);
  initDialog();
  return ct;
}","@Override protected Control createContents(Composite parent){
  Control ct=super.createContents(parent);
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_COLOR_IMAGE);
  initDialog();
  return ct;
}",0.9751243781094528
67804,"private void createInputArea(Composite parent){
  inputArea=new Composite(parent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_BOTH | GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.widthHint=300;
  gd.heightHint=300;
  inputArea.setLayoutData(gd);
  inputArea.setLayout(new GridLayout());
  title=new Label(inputArea,SWT.NONE);
  title.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  uriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite innerComp=new Composite(inputArea,SWT.NONE);
  innerComp.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  innerComp.setLayout(new GridLayout(2,false));
  browseButton=new Button(innerComp,SWT.PUSH);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  browseButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  browseButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent event){
      FileDialog fileChooser=new FileDialog(getShell(),SWT.OPEN);
      fileChooser.setText(Messages.getString(""String_Node_Str""));
      fileChooser.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      try {
        String fullPath=fileChooser.open();
        if (fullPath != null) {
          String fileName=fileChooser.getFileName();
          if (fileName != null) {
            imageData=null;
            fullPath=new StringBuffer(""String_Node_Str"").append(fullPath).toString();
            uriEditor.setText(fullPath);
          }
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
);
  browseButton.setVisible(embedded.getSelection());
  previewButton=new Button(innerComp,SWT.PUSH);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  previewButton.addSelectionListener(new SelectionAdapter(){
    public void widgetSelected(    SelectionEvent e){
      preview(removeQuote(uriEditor.getText()));
    }
  }
);
}","private void createInputArea(Composite parent){
  inputArea=new Composite(parent,SWT.NONE);
  GridData gd=new GridData(GridData.FILL_BOTH | GridData.HORIZONTAL_ALIGN_BEGINNING);
  gd.widthHint=300;
  gd.heightHint=300;
  inputArea.setLayoutData(gd);
  inputArea.setLayout(new GridLayout());
  title=new Label(inputArea,SWT.NONE);
  title.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor=new Text(inputArea,SWT.SINGLE | SWT.BORDER);
  uriEditor.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  uriEditor.addModifyListener(new ModifyListener(){
    public void modifyText(    ModifyEvent e){
      updateButtons();
    }
  }
);
  Composite innerComp=new Composite(inputArea,SWT.NONE);
  innerComp.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  innerComp.setLayout(new GridLayout(2,false));
  browseButton=new Button(innerComp,SWT.PUSH);
  browseButton.setText(Messages.getString(""String_Node_Str""));
  browseButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  browseButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent event){
      FileDialog fileChooser=new FileDialog(getShell(),SWT.OPEN);
      fileChooser.setText(Messages.getString(""String_Node_Str""));
      fileChooser.setFilterExtensions(new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""});
      try {
        String fullPath=fileChooser.open();
        if (fullPath != null) {
          String fileName=fileChooser.getFileName();
          if (fileName != null) {
            imageData=null;
            fullPath=new StringBuffer(""String_Node_Str"").append(fullPath).toString();
            uriEditor.setText(fullPath);
          }
        }
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
);
  browseButton.setVisible(embedded.getSelection());
  previewButton=new Button(innerComp,SWT.PUSH);
  previewButton.setText(Messages.getString(""String_Node_Str""));
  previewButton.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_END));
  previewButton.addSelectionListener(new SelectionAdapter(){
    @Override public void widgetSelected(    SelectionEvent e){
      preview(removeQuote(uriEditor.getText()));
    }
  }
);
}",0.9955337204108976
67805,"public int read(int src,byte b[],int off,int len) throws IOException {
  assert(b != null);
  assert(off + len < b.length);
  for (int i=0; i < len; i++) {
    b[off + i]=0;
  }
  return len;
}","public int read(int src,byte b[],int off,int len) throws IOException {
  assert(b != null);
  assert(off + len <= b.length);
  for (int i=0; i < len; i++) {
    b[off + i]=0;
  }
  return len;
}",0.9974160206718348
67806,"public Object invoke(Command command,Object... inData) throws ChartException {
  Object outData=null;
switch (command) {
case EXPRESS_BUTTON_CREATE:
    final Control control=(Control)inData[1];
  IExpressionButton ceb=new IExpressionButton(){
    public void setExpression(    String expr){
      ChartUIUtil.setText(control,expr);
    }
    public void setEnabled(    boolean bEnabled){
      control.setEnabled(bEnabled);
    }
    public boolean isEnabled(){
      return control.isEnabled();
    }
    public String getExpression(){
      return ChartUIUtil.getText(control);
    }
    public String getDisplayExpression(){
      return getExpression();
    }
    public void addListener(    Listener listener){
    }
    public void setAccessor(    EAttributeAccessor<String> accessor){
    }
    public String getExpressionType(){
      return null;
    }
    public boolean isCube(){
      return false;
    }
    public void setBindingName(    String bindingName,    boolean bNotifyEvents){
    }
    public void setExpression(    String expr,    boolean bNotifyEvents){
    }
    public void setAssitField(    IAssistField assistField){
    }
    public void setPredefinedQuery(    Object[] predefinedQuery){
    }
  }
;
outData=ceb;
break;
}
return outData;
}","public Object invoke(Command command,Object... inData) throws ChartException {
  Object outData=null;
switch (command) {
case EXPRESS_BUTTON_CREATE:
    final Control control=(Control)inData[1];
  new Label((Composite)inData[0],SWT.NONE);
IExpressionButton ceb=new IExpressionButton(){
  public void setExpression(  String expr){
    ChartUIUtil.setText(control,expr);
  }
  public void setEnabled(  boolean bEnabled){
    control.setEnabled(bEnabled);
  }
  public boolean isEnabled(){
    return control.isEnabled();
  }
  public String getExpression(){
    return ChartUIUtil.getText(control);
  }
  public String getDisplayExpression(){
    return getExpression();
  }
  public void addListener(  Listener listener){
  }
  public void setAccessor(  EAttributeAccessor<String> accessor){
  }
  public String getExpressionType(){
    return null;
  }
  public boolean isCube(){
    return false;
  }
  public void setBindingName(  String bindingName,  boolean bNotifyEvents){
  }
  public void setExpression(  String expr,  boolean bNotifyEvents){
  }
  public void setAssitField(  IAssistField assistField){
  }
  public void setPredefinedQuery(  Object[] predefinedQuery){
  }
}
;
outData=ceb;
break;
}
return outData;
}",0.8548516439454691
67807,"private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        dimensionSet.add(OlapExpressionUtil.getTargetDimLevel(exprsIterator.next().getText()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null)   return CubeQueryExecutor.DIMENSION_FILTER;
  Set<DimLevel> refDimLevels=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
  if (refDimLevels.size() > 0)   return CubeQueryExecutor.FACTTABLE_FILTER;
  return CubeQueryExecutor.AGGR_MEASURE_FILTER;
}","private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        dimensionSet.add(OlapExpressionUtil.getTargetDimLevel(exprsIterator.next().getText()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null)   return CubeQueryExecutor.DIMENSION_FILTER;
  String measure=OlapExpressionCompiler.getReferencedScriptObject(filter.getExpression(),""String_Node_Str"");
  if (measure != null)   return CubeQueryExecutor.FACTTABLE_FILTER;
  List bindingName=ExpressionCompilerUtil.extractColumnExpression(filter.getExpression(),ScriptConstants.DATA_BINDING_SCRIPTABLE);
  if (existAggregationBinding(bindingName,this.defn.getBindings()))   return CubeQueryExecutor.AGGR_MEASURE_FILTER;
  return CubeQueryExecutor.FACTTABLE_FILTER;
}",0.8338345864661654
67808,"public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) || context.getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS)) {
    if (cmbDefinition == null)     return false;
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  if (cmbDefinition != null && context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE)) {
    String[] items=cmbDefinition.getItems();
    for (    String s : items) {
      if (s.indexOf(expression) > 0) {
        return true;
      }
    }
    return false;
  }
  return true;
}","public boolean isValidExpression(String expression){
  if (context.getDataServiceProvider().checkState(IDataServiceProvider.SHARE_QUERY) || context.getDataServiceProvider().checkState(IDataServiceProvider.INHERIT_COLUMNS_GROUPS) || context.getDataServiceProvider().checkState(IDataServiceProvider.HAS_CUBE)) {
    if (cmbDefinition == null)     return false;
    int index=cmbDefinition.indexOf(expression);
    if (index < 0) {
      return false;
    }
    return true;
  }
  return true;
}",0.6105971404541631
67809,"public void drop(DropTargetEvent event){
  String bindingName=(String)event.data;
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,bindingName)) {
      return;
    }
  }
  btnBuilder.setBindingName(bindingName,true);
}","public void drop(DropTargetEvent event){
  String bindingName=(String)event.data;
  if (Platform.OS_MACOSX.equals(Platform.getOS())) {
    ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
    expCodec.setBindingName(bindingName,btnBuilder.isCube());
    if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
      return;
    }
  }
  btnBuilder.setBindingName(bindingName,true);
}",0.5965834428383706
67810,"public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (!Platform.OS_MACOSX.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null && !DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,object.toString())) {
      event.detail=DND.DROP_NONE;
    }
  }
}","public void dragEnter(DropTargetEvent event){
  event.detail=DND.DROP_COPY;
  if (!Platform.OS_MACOSX.equals(Platform.getOS())) {
    Object object=null;
    Transfer[] transferAgents=((DropTarget)event.widget).getTransfer();
    for (int i=0; i < transferAgents.length; i++) {
      Transfer transfer=transferAgents[i];
      if (transfer != null && transfer instanceof SimpleTextTransfer) {
        object=SimpleTextTransfer.getInstance().nativeToJava(event.currentDataType);
        break;
      }
    }
    if (object != null) {
      ExpressionCodec expCodec=ChartModelHelper.instance().createExpressionCodec();
      expCodec.setBindingName(object.toString(),btnBuilder.isCube());
      if (!DataDefinitionTextManager.getInstance().isValidExpression(txtDataDefn,expCodec.getExpression())) {
        event.detail=DND.DROP_NONE;
      }
    }
  }
}",0.7984241628365069
67811,"/** 
 * Creates a stock chart instance
 * @return An instance of the simulated runtime chart model (containingfilled datasets)
 */
public final static Chart createStockChart(){
  ChartWithAxes cwaStock=ChartWithAxesImpl.create();
  cwaStock.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
  TitleBlock tb=cwaStock.getTitle();
  tb.setBackground(GradientImpl.create(ColorDefinitionImpl.create(0,128,0),ColorDefinitionImpl.create(128,0,0),0,false));
  tb.getLabel().getCaption().setColor(ColorDefinitionImpl.WHITE());
  cwaStock.getBlock().setBackground(GradientImpl.create(ColorDefinitionImpl.create(196,196,196),ColorDefinitionImpl.WHITE(),90,false));
  cwaStock.getPlot().getClientArea().getInsets().set(10,10,10,10);
  cwaStock.getLegend().setBackground(ColorDefinitionImpl.ORANGE());
  Axis xAxisPrimary=((ChartWithAxesImpl)cwaStock).getPrimaryBaseAxes()[0];
  xAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  xAxisPrimary.getTitle().getCaption().setColor(ColorDefinitionImpl.RED());
  xAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  xAxisPrimary.setTitlePosition(Position.ABOVE_LITERAL);
  xAxisPrimary.getLabel().getCaption().setColor(ColorDefinitionImpl.RED());
  xAxisPrimary.getLabel().getCaption().getFont().setRotation(65);
  xAxisPrimary.setLabelPosition(Position.ABOVE_LITERAL);
  xAxisPrimary.setType(AxisType.DATE_TIME_LITERAL);
  xAxisPrimary.getOrigin().setType(IntersectionType.MAX_LITERAL);
  xAxisPrimary.getMajorGrid().setTickStyle(TickStyle.ABOVE_LITERAL);
  xAxisPrimary.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(255,196,196));
  xAxisPrimary.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  xAxisPrimary.getMajorGrid().getLineAttributes().setVisible(true);
  xAxisPrimary.setCategoryAxis(true);
  Axis yAxisPrimary=((ChartWithAxesImpl)cwaStock).getPrimaryOrthogonalAxis(xAxisPrimary);
  yAxisPrimary.getLabel().getCaption().setValue(""String_Node_Str"");
  yAxisPrimary.getLabel().getCaption().setColor(ColorDefinitionImpl.BLUE());
  yAxisPrimary.setLabelPosition(Position.LEFT_LITERAL);
  yAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  yAxisPrimary.getTitle().getCaption().setColor(ColorDefinitionImpl.BLUE());
  yAxisPrimary.setTitlePosition(Position.LEFT_LITERAL);
  yAxisPrimary.getScale().setMin(NumberDataElementImpl.create(24.5));
  yAxisPrimary.getScale().setMax(NumberDataElementImpl.create(27.5));
  yAxisPrimary.getScale().setStep(0.5);
  yAxisPrimary.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(196,196,255));
  yAxisPrimary.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  yAxisPrimary.getMajorGrid().getLineAttributes().setVisible(true);
  yAxisPrimary.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);
  yAxisPrimary.setType(AxisType.LINEAR_LITERAL);
  yAxisPrimary.getOrigin().setType(IntersectionType.MIN_LITERAL);
  Axis yAxisOverlay=AxisImpl.create(Axis.ORTHOGONAL);
  yAxisOverlay.getLabel().getCaption().setColor(ColorDefinitionImpl.create(0,128,0));
  yAxisOverlay.getLabel().getCaption().getFont().setRotation(-25);
  yAxisOverlay.setLabelPosition(Position.RIGHT_LITERAL);
  yAxisOverlay.getTitle().getCaption().setValue(""String_Node_Str"");
  yAxisOverlay.getTitle().getCaption().setColor(ColorDefinitionImpl.GREEN().darker());
  yAxisOverlay.getTitle().getCaption().getFont().setRotation(90);
  yAxisOverlay.getTitle().getCaption().getFont().setSize(16);
  yAxisOverlay.getTitle().getCaption().getFont().setBold(true);
  yAxisOverlay.getTitle().setVisible(true);
  yAxisOverlay.setTitlePosition(Position.RIGHT_LITERAL);
  yAxisOverlay.getLineAttributes().setColor(ColorDefinitionImpl.create(0,128,0));
  yAxisOverlay.setType(AxisType.LINEAR_LITERAL);
  yAxisOverlay.setOrientation(Orientation.VERTICAL_LITERAL);
  yAxisOverlay.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(64,196,64));
  yAxisOverlay.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  yAxisOverlay.getMajorGrid().getLineAttributes().setVisible(true);
  yAxisOverlay.getMajorGrid().setTickStyle(TickStyle.RIGHT_LITERAL);
  yAxisOverlay.getOrigin().setType(IntersectionType.MAX_LITERAL);
  yAxisOverlay.getScale().setMax(NumberDataElementImpl.create(180000000));
  yAxisOverlay.getScale().setMin(NumberDataElementImpl.create(20000000));
  xAxisPrimary.getAssociatedAxes().add(yAxisOverlay);
  DateTimeDataSet dsDateValues=DateTimeDataSetImpl.create(new Calendar[]{new CDateTime(2004,12,27),new CDateTime(2004,12,23),new CDateTime(2004,12,22),new CDateTime(2004,12,21),new CDateTime(2004,12,20),new CDateTime(2004,12,17),new CDateTime(2004,12,16),new CDateTime(2004,12,15)});
  StockDataSet dsStockValues=StockDataSetImpl.create(new StockEntry[]{new StockEntry(27.01,27.10,26.82,26.85),new StockEntry(26.87,27.15,26.83,27.01),new StockEntry(26.84,27.15,26.78,26.97),new StockEntry(27.00,27.17,26.94,27.07),new StockEntry(27.01,27.15,26.89,26.95),new StockEntry(27.00,27.32,26.80,26.96),new StockEntry(27.15,27.28,27.01,27.16),new StockEntry(27.22,27.40,27.07,27.11)});
  NumberDataSet dsStockVolume=NumberDataSetImpl.create(new double[]{55958500,65801900,63651900,94646096,85552800,126184400,88997504,106303904});
  Series seBase=SeriesImpl.create();
  seBase.setDataSet(dsDateValues);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().shift(-1);
  xAxisPrimary.getSeriesDefinitions().add(sdX);
  sdX.getSeries().add(seBase);
  BarSeries bs=(BarSeries)BarSeriesImpl.create();
  bs.setRiserOutline(null);
  bs.setDataSet(dsStockVolume);
  StockSeries ss=(StockSeries)StockSeriesImpl.create();
  ss.setSeriesIdentifier(""String_Node_Str"");
  ss.getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
  ss.setDataSet(dsStockValues);
  SeriesDefinition sdY1=SeriesDefinitionImpl.create();
  sdY1.getSeriesPalette().update(ColorDefinitionImpl.CYAN());
  yAxisPrimary.getSeriesDefinitions().add(sdY1);
  sdY1.getSeries().add(ss);
  SeriesDefinition sdY2=SeriesDefinitionImpl.create();
  sdY2.getSeriesPalette().update(ColorDefinitionImpl.GREEN());
  yAxisOverlay.getSeriesDefinitions().add(sdY2);
  sdY2.getSeries().add(bs);
  return cwaStock;
}","/** 
 * Creates a stock chart instance
 * @return An instance of the simulated runtime chart model (containingfilled datasets)
 */
public final static Chart createStockChart(){
  ChartWithAxes cwaStock=ChartWithAxesImpl.create();
  cwaStock.getTitle().getLabel().getCaption().setValue(""String_Node_Str"");
  TitleBlock tb=cwaStock.getTitle();
  tb.setBackground(GradientImpl.create(ColorDefinitionImpl.create(0,128,0),ColorDefinitionImpl.create(128,0,0),0,false));
  tb.getLabel().getCaption().setColor(ColorDefinitionImpl.WHITE());
  cwaStock.getBlock().setBackground(GradientImpl.create(ColorDefinitionImpl.create(196,196,196),ColorDefinitionImpl.WHITE(),90,false));
  cwaStock.getPlot().getClientArea().getInsets().set(10,10,10,10);
  cwaStock.getLegend().setBackground(ColorDefinitionImpl.ORANGE());
  Axis xAxisPrimary=((ChartWithAxesImpl)cwaStock).getPrimaryBaseAxes()[0];
  xAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  xAxisPrimary.getTitle().getCaption().setColor(ColorDefinitionImpl.RED());
  xAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  xAxisPrimary.setTitlePosition(Position.ABOVE_LITERAL);
  xAxisPrimary.getLabel().getCaption().setColor(ColorDefinitionImpl.RED());
  xAxisPrimary.getLabel().getCaption().getFont().setRotation(65);
  xAxisPrimary.setLabelPosition(Position.ABOVE_LITERAL);
  xAxisPrimary.setType(AxisType.DATE_TIME_LITERAL);
  xAxisPrimary.getOrigin().setType(IntersectionType.MAX_LITERAL);
  xAxisPrimary.getMajorGrid().setTickStyle(TickStyle.ABOVE_LITERAL);
  xAxisPrimary.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(255,196,196));
  xAxisPrimary.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  xAxisPrimary.getMajorGrid().getLineAttributes().setVisible(true);
  xAxisPrimary.setCategoryAxis(true);
  Axis yAxisPrimary=((ChartWithAxesImpl)cwaStock).getPrimaryOrthogonalAxis(xAxisPrimary);
  yAxisPrimary.getLabel().getCaption().setValue(""String_Node_Str"");
  yAxisPrimary.getLabel().getCaption().setColor(ColorDefinitionImpl.BLUE());
  yAxisPrimary.setLabelPosition(Position.LEFT_LITERAL);
  yAxisPrimary.getTitle().getCaption().setValue(""String_Node_Str"");
  yAxisPrimary.getTitle().getCaption().setColor(ColorDefinitionImpl.BLUE());
  yAxisPrimary.setTitlePosition(Position.LEFT_LITERAL);
  yAxisPrimary.getScale().setMin(NumberDataElementImpl.create(24.5));
  yAxisPrimary.getScale().setMax(NumberDataElementImpl.create(27.5));
  yAxisPrimary.getScale().setStep(0.5);
  yAxisPrimary.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(196,196,255));
  yAxisPrimary.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  yAxisPrimary.getMajorGrid().getLineAttributes().setVisible(true);
  yAxisPrimary.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);
  yAxisPrimary.setType(AxisType.LINEAR_LITERAL);
  yAxisPrimary.getOrigin().setType(IntersectionType.MIN_LITERAL);
  Axis yAxisOverlay=AxisImpl.create(Axis.ORTHOGONAL);
  yAxisOverlay.getLabel().getCaption().setColor(ColorDefinitionImpl.create(0,128,0));
  yAxisOverlay.getLabel().getCaption().getFont().setRotation(-25);
  yAxisOverlay.setLabelPosition(Position.RIGHT_LITERAL);
  yAxisOverlay.getTitle().getCaption().setValue(""String_Node_Str"");
  yAxisOverlay.getTitle().getCaption().setColor(ColorDefinitionImpl.GREEN().darker());
  yAxisOverlay.getTitle().getCaption().getFont().setRotation(90);
  yAxisOverlay.getTitle().getCaption().getFont().setSize(16);
  yAxisOverlay.getTitle().getCaption().getFont().setBold(true);
  yAxisOverlay.getTitle().setVisible(true);
  yAxisOverlay.setTitlePosition(Position.RIGHT_LITERAL);
  yAxisOverlay.getLineAttributes().setColor(ColorDefinitionImpl.create(0,128,0));
  yAxisOverlay.setType(AxisType.LINEAR_LITERAL);
  yAxisOverlay.setOrientation(Orientation.VERTICAL_LITERAL);
  yAxisOverlay.getMajorGrid().getLineAttributes().setColor(ColorDefinitionImpl.create(64,196,64));
  yAxisOverlay.getMajorGrid().getLineAttributes().setStyle(LineStyle.DOTTED_LITERAL);
  yAxisOverlay.getMajorGrid().getLineAttributes().setVisible(true);
  yAxisOverlay.getMajorGrid().setTickStyle(TickStyle.RIGHT_LITERAL);
  yAxisOverlay.getOrigin().setType(IntersectionType.MAX_LITERAL);
  yAxisOverlay.getScale().setMax(NumberDataElementImpl.create(180000000));
  yAxisOverlay.getScale().setMin(NumberDataElementImpl.create(20000000));
  xAxisPrimary.getAssociatedAxes().add(yAxisOverlay);
  DateTimeDataSet dsDateValues=DateTimeDataSetImpl.create(new Calendar[]{new CDateTime(2004,12,27),new CDateTime(2004,12,23),new CDateTime(2004,12,22),new CDateTime(2004,12,21),new CDateTime(2004,12,20),new CDateTime(2004,12,17),new CDateTime(2004,12,16),new CDateTime(2004,12,15)});
  StockDataSet dsStockValues=StockDataSetImpl.create(new StockEntry[]{new StockEntry(27.01,26.82,27.10,26.85),new StockEntry(26.87,26.83,27.15,27.01),new StockEntry(26.84,26.78,27.15,26.97),new StockEntry(27.00,26.94,27.17,27.07),new StockEntry(27.01,26.89,27.15,26.95),new StockEntry(27.00,26.80,27.32,26.96),new StockEntry(27.15,27.01,27.28,27.16),new StockEntry(27.22,27.07,27.40,27.11)});
  NumberDataSet dsStockVolume=NumberDataSetImpl.create(new double[]{55958500,65801900,63651900,94646096,85552800,126184400,88997504,106303904});
  Series seBase=SeriesImpl.create();
  seBase.setDataSet(dsDateValues);
  SeriesDefinition sdX=SeriesDefinitionImpl.create();
  sdX.getSeriesPalette().shift(-1);
  xAxisPrimary.getSeriesDefinitions().add(sdX);
  sdX.getSeries().add(seBase);
  BarSeries bs=(BarSeries)BarSeriesImpl.create();
  bs.setRiserOutline(null);
  bs.setDataSet(dsStockVolume);
  StockSeries ss=(StockSeries)StockSeriesImpl.create();
  ss.setSeriesIdentifier(""String_Node_Str"");
  ss.getLineAttributes().setColor(ColorDefinitionImpl.BLUE());
  ss.setDataSet(dsStockValues);
  SeriesDefinition sdY1=SeriesDefinitionImpl.create();
  sdY1.getSeriesPalette().update(ColorDefinitionImpl.CYAN());
  yAxisPrimary.getSeriesDefinitions().add(sdY1);
  sdY1.getSeries().add(ss);
  SeriesDefinition sdY2=SeriesDefinitionImpl.create();
  sdY2.getSeriesPalette().update(ColorDefinitionImpl.GREEN());
  yAxisOverlay.getSeriesDefinitions().add(sdY2);
  sdY2.getSeries().add(bs);
  return cwaStock;
}",0.9922692865195684
67812,"public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=PrimitiveCharts.createChart(i);
  if (cm instanceof ChartWithAxes) {
    jcbTransposed.setEnabled(true);
    jcbLogarithmic.setEnabled(true);
    jcbPercent.setEnabled(true);
    ChartWithAxes cwa=((ChartWithAxes)cm);
    cwa.setTransposed(jcbTransposed.isSelected());
    Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
    if (jcbLogarithmic.isSelected()) {
      if (ax.getType() == AxisType.LINEAR_LITERAL) {
        ax.setType(AxisType.LOGARITHMIC_LITERAL);
      }
    }
 else {
      if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
        ax.setType(AxisType.LINEAR_LITERAL);
      }
    }
    if (jcbPercent.isSelected() == true) {
      ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
    }
 else {
      ax.setFormatSpecifier(null);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    jcbTransposed.setEnabled(false);
    jcbLogarithmic.setEnabled(false);
    jcbPercent.setEnabled(false);
  }
  if (jcbModels.getSelectedIndex() == 7) {
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
 else {
switch (jcbDimensions.getSelectedIndex()) {
case 0:
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    break;
case 1:
  cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
break;
}
}
bNeedsGeneration=true;
scv.repaint();
}","public void actionPerformed(ActionEvent e){
  int i=jcbModels.getSelectedIndex();
  cm=PrimitiveCharts.createChart(i);
  if (cm instanceof ChartWithAxes) {
    jcbTransposed.setEnabled(true);
    jcbLogarithmic.setEnabled(true);
    jcbPercent.setEnabled(true);
    ChartWithAxes cwa=((ChartWithAxes)cm);
    cwa.setTransposed(jcbTransposed.isSelected());
    Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
    if (jcbLogarithmic.isSelected()) {
      if (ax.getType() == AxisType.LINEAR_LITERAL) {
        ax.setType(AxisType.LOGARITHMIC_LITERAL);
      }
    }
 else {
      if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
        ax.setType(AxisType.LINEAR_LITERAL);
      }
    }
    if (jcbPercent.isSelected() == true) {
      ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
    }
 else {
      ax.setFormatSpecifier(null);
    }
  }
 else   if (cm instanceof ChartWithoutAxes) {
    jcbTransposed.setEnabled(false);
    jcbLogarithmic.setEnabled(false);
    jcbPercent.setEnabled(false);
  }
  if (jcbModels.getSelectedIndex() == 7 || jcbModels.getSelectedIndex() == 6 || jcbModels.getSelectedIndex() == 9) {
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
  }
 else {
switch (jcbDimensions.getSelectedIndex()) {
case 0:
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    break;
case 1:
  cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
break;
}
}
bNeedsGeneration=true;
scv.repaint();
}",0.9746922024623804
67813,"public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btn)) {
    int iSelection=cbType.getSelectionIndex();
    cm=PrimitiveCharts.createChart(iSelection);
    if (cm instanceof ChartWithAxes) {
      cbTransposed.setEnabled(true);
      cbLogarithmic.setEnabled(true);
      cbPercent.setEnabled(true);
      ChartWithAxes cwa=((ChartWithAxes)cm);
      cwa.setTransposed(cbTransposed.getSelection());
      Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
      if (cbLogarithmic.getSelection()) {
        if (ax.getType() == AxisType.LINEAR_LITERAL) {
          ax.setType(AxisType.LOGARITHMIC_LITERAL);
        }
      }
 else {
        if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
          ax.setType(AxisType.LINEAR_LITERAL);
        }
      }
      if (cbPercent.getSelection() == true) {
        ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
      }
 else {
        ax.setFormatSpecifier(null);
      }
    }
 else     if (cm instanceof ChartWithoutAxes) {
      cbTransposed.setEnabled(false);
      cbLogarithmic.setEnabled(false);
      cbPercent.setEnabled(false);
    }
    if (cbType.getSelectionIndex() == 7) {
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    }
 else {
switch (cbDimension.getSelectionIndex()) {
case 0:
        cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
      break;
case 1:
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
  break;
}
}
bNeedsGeneration=true;
this.redraw();
}
}","public void widgetSelected(SelectionEvent e){
  if (e.widget.equals(btn)) {
    int iSelection=cbType.getSelectionIndex();
    cm=PrimitiveCharts.createChart(iSelection);
    if (cm instanceof ChartWithAxes) {
      cbTransposed.setEnabled(true);
      cbLogarithmic.setEnabled(true);
      cbPercent.setEnabled(true);
      ChartWithAxes cwa=((ChartWithAxes)cm);
      cwa.setTransposed(cbTransposed.getSelection());
      Axis ax=cwa.getPrimaryOrthogonalAxis(cwa.getPrimaryBaseAxes()[0]);
      if (cbLogarithmic.getSelection()) {
        if (ax.getType() == AxisType.LINEAR_LITERAL) {
          ax.setType(AxisType.LOGARITHMIC_LITERAL);
        }
      }
 else {
        if (ax.getType() == AxisType.LOGARITHMIC_LITERAL) {
          ax.setType(AxisType.LINEAR_LITERAL);
        }
      }
      if (cbPercent.getSelection() == true) {
        ax.setFormatSpecifier(JavaNumberFormatSpecifierImpl.create(""String_Node_Str""));
      }
 else {
        ax.setFormatSpecifier(null);
      }
    }
 else     if (cm instanceof ChartWithoutAxes) {
      cbTransposed.setEnabled(false);
      cbLogarithmic.setEnabled(false);
      cbPercent.setEnabled(false);
    }
    if (cbType.getSelectionIndex() == 7 || cbType.getSelectionIndex() == 6 || cbType.getSelectionIndex() == 9) {
      cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
    }
 else {
switch (cbDimension.getSelectionIndex()) {
case 0:
        cm.setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
      break;
case 1:
    cm.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
  break;
}
}
bNeedsGeneration=true;
this.redraw();
}
}",0.9777918781725888
67814,"public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=ChartUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}","public final void renderSeries(IPrimitiveRenderer ipr,Plot p,ISeriesRenderingHints isrh) throws ChartException {
  try {
    validateDataSetCount(isrh);
  }
 catch (  ChartException vex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,vex);
  }
  boolean bRendering3D=isDimension3D();
  SeriesRenderingHints srh=null;
  SeriesRenderingHints3D srh3d=null;
  if (bRendering3D) {
    srh3d=(SeriesRenderingHints3D)isrh;
  }
 else {
    srh=(SeriesRenderingHints)isrh;
  }
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final Bounds boClientArea=isrh.getClientAreaBounds(true);
  final AbstractScriptHandler sh=getRunTimeContext().getScriptHandler();
  logger.log(ILogger.INFORMATION,Messages.getString(""String_Node_Str"",new Object[]{getClass().getName(),Integer.valueOf(iSeriesIndex + 1),Integer.valueOf(iSeriesCount)},getRunTimeContext().getULocale()));
  final BarSeries bs=(BarSeries)getSeries();
  if (!bs.isVisible()) {
    restoreClipping(ipr);
    return;
  }
  final RiserType rt=bs.getRiser();
  final double dSeriesThickness=bRendering3D ? 0 : srh.getSeriesThickness();
  final double dZeroLocation=bRendering3D ? srh3d.getPlotZeroLocation() : srh.getZeroLocation();
  double dBaseLocation=-1;
  final DataPointHints[] dpha=isrh.getDataPoints();
  validateNullDatapoint(dpha);
  double sizeForNonCategory=-1;
  if (!bRendering3D && !((SeriesRenderingHints)isrh).isCategoryScale() && dpha.length != 0) {
    sizeForNonCategory=computeSizeForNonCategoryBar(cwa.isTransposed(),dpha);
  }
  final ColorDefinition cd=bs.getRiserOutline();
  final LineAttributes lia=goFactory.createLineAttributes(cd == null ? null : goFactory.copyOf(cd),LineStyle.SOLID_LITERAL,1);
  double dX=0, dY=0, dZ=0;
  double dWidth=0, dHeight=0, dSpacing=0, dValue=0;
  double dWidthZ=0, dSpacingZ=0;
  Location lo;
  Location3D lo3d;
  Location[] loaFrontFace=null;
  List<Location3D[]> loa3dFace=null;
  boolean bInverted=false;
  final double dUnitSpacing=(!cwa.isSetUnitSpacing()) ? 50 : cwa.getUnitSpacing();
  final Bounds clipArea=goFactory.copyOf(boClientArea);
  if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
    boClientArea.delta(-dSeriesThickness,dSeriesThickness,0,0);
    clipArea.delta(-dSeriesThickness,0,2 * dSeriesThickness,dSeriesThickness);
  }
  renderClipping(ipr,clipArea);
  AxisSubUnit au=null;
  Axis ax=getAxis();
  StackedSeriesLookup ssl=null;
  StackGroup sg=null;
  if (!bRendering3D) {
    ssl=srh.getStackedSeriesLookup();
    sg=ssl.getStackGroup(bs);
  }
  int iSharedUnitIndex=(sg == null) ? 0 : sg.getSharedIndex();
  int iSharedUnitCount=(sg == null) ? 1 : sg.getSharedCount();
  double dStart, dEnd;
  Label laDataPoint=null;
  Position pDataPoint=null;
  Location loDataPoint=null;
  Location3D loDataPoint3d=null;
  Bounds boDataPoint=null;
  try {
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    if (laDataPoint.isVisible()) {
      pDataPoint=bRendering3D ? srh3d.getLabelPosition(bs) : srh.getLabelPosition(bs);
      loDataPoint=goFactory.createLocation(0,0);
      loDataPoint3d=goFactory.createLocation3D(0,0,0);
      boDataPoint=goFactory.createBounds(0,0,0,0);
    }
  }
 catch (  Exception ex) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
  }
  final SeriesDefinition sd=getSeriesDefinition();
  final EList<Fill> elPalette=sd.getSeriesPalette().getEntries();
  if (elPalette.isEmpty()) {
    throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
  final boolean bPaletteByCategory=(cwa.getLegend().getItemType().getValue() == LegendItemType.CATEGORIES);
  int iThisSeriesIndex=-1;
  if (!bPaletteByCategory) {
    iThisSeriesIndex=sd.getRunTimeSeries().indexOf(bs);
    if (iThisSeriesIndex < 0) {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{bs,sd},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
  }
  double[] faX=new double[dpha.length];
  double[] faY=new double[dpha.length];
  boolean bShowOutside=isShowOutside();
  for (int i=0; i < dpha.length; i++) {
    faX[i]=Double.NaN;
    faY[i]=Double.NaN;
    int iOutside=checkEntryByType(getInternalBaseAxis().getScale(),dpha[i].getBaseValue());
    if (iOutside != 0) {
      dpha[i].markOutside();
      continue;
    }
    laDataPoint=bRendering3D ? srh3d.getLabelAttributes(bs) : srh.getLabelAttributes(bs);
    Fill f=null;
    if (bPaletteByCategory) {
      f=FillUtil.getPaletteFill(elPalette,i);
    }
 else {
      if (iThisSeriesIndex >= 0) {
        f=FillUtil.getPaletteFill(elPalette,iThisSeriesIndex);
      }
    }
    updateTranslucency(f,bs);
    Fill fixedFill;
    if (dpha[i] != null && dpha[i].getOrthogonalValue() instanceof Double) {
      fixedFill=FillUtil.convertFill(f,((Double)dpha[i].getOrthogonalValue()).doubleValue(),null);
    }
 else {
      fixedFill=FillUtil.copyOf(f);
    }
    if (bRendering3D) {
      lo3d=dpha[i].getLocation3D();
      dX=lo3d.getX();
      dY=lo3d.getY();
      dZ=lo3d.getZ();
      dSpacing=((dpha[i].getSize2D().getWidth()) * dUnitSpacing) / 200;
      dSpacingZ=((dpha[i].getSize2D().getHeight()) * dUnitSpacing) / 200;
    }
 else {
      lo=dpha[i].getLocation();
      dX=lo.getX();
      dY=lo.getY();
      dSpacing=((dpha[i].getSize()) * dUnitSpacing) / 200;
    }
    if (cwa.isTransposed()) {
      BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
      if (((SeriesRenderingHints)isrh).isCategoryScale()) {
        dHeight=dpha[i].getSize();
        dHeight-=2 * dSpacing;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
 else {
        dHeight=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
        dSpacing=(dpha[i].getSize() - dHeight) / 2.0;
        dY-=dpha[i].getSize() * 0.5;
        dHeight/=basLookup.getCount();
        dY+=dHeight * basLookup.getId();
        dHeight/=iSharedUnitCount;
        dY+=iSharedUnitIndex * dHeight + dSpacing;
      }
      if (isStackedOrPercent(bs)) {
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dX=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          dValue=Methods.asDouble(dpha[i].getOrthogonalValue());
          try {
            double dMargin=srh.getLocationOnOrthogonal(dpha[i].getOrthogonalValue()) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            double precisionDelta=0.00000001d;
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum()) - precisionDelta;
            }
 else {
              dBaseLocation=au.getLastPosition(dValue) - precisionDelta;
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dX=au.getLastPosition(dValue);
        }
      }
      if (ChartUtil.mathLT(dX,boClientArea.getLeft())) {
        if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
          if (!bShowOutside) {
            continue;
          }
        }
        dX=boClientArea.getLeft();
      }
 else       if (ChartUtil.mathLT(dBaseLocation,boClientArea.getLeft())) {
        dBaseLocation=boClientArea.getLeft();
      }
      if (ChartUtil.mathGT(dX,boClientArea.getLeft() + boClientArea.getWidth())) {
        if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
          continue;
        }
        dX=boClientArea.getLeft() + boClientArea.getWidth();
      }
 else       if (ChartUtil.mathGT(dBaseLocation,boClientArea.getLeft() + boClientArea.getWidth())) {
        dBaseLocation=boClientArea.getLeft() + boClientArea.getWidth();
      }
      dWidth=dBaseLocation - dX;
      bInverted=dWidth < 0;
      if (bInverted) {
        dX=dBaseLocation;
        dWidth=-dWidth;
      }
    }
 else {
      if (bRendering3D) {
        dWidth=dpha[i].getSize2D().getWidth();
        dWidth-=2 * dSpacing;
        dWidthZ=dpha[i].getSize2D().getHeight();
        dWidthZ-=2 * dSpacingZ;
        dX+=dSpacing;
        dZ+=dSpacingZ;
      }
 else {
        BarAxisIdLookup basLookup=new BarAxisIdLookup((ChartWithAxes)cm,this.getAxis());
        if (((SeriesRenderingHints)isrh).isCategoryScale()) {
          dWidth=dpha[i].getSize();
          dWidth-=2 * dSpacing;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
 else {
          dWidth=Math.min(sizeForNonCategory,(dpha[i].getSize() - 2 * dSpacing) * .8);
          dSpacing=(dpha[i].getSize() - dWidth) / 2.0;
          dX-=dpha[i].getSize() / 2;
          dWidth/=basLookup.getCount();
          dX+=dWidth * basLookup.getId();
          dWidth/=iSharedUnitCount;
          dX+=iSharedUnitIndex * dWidth + dSpacing;
        }
      }
      if (isStackedOrPercent(bs)) {
        if (bRendering3D) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.COMPUTATION,""String_Node_Str"",Messages.getResourceBundle(getRunTimeContext().getULocale()));
        }
        au=ssl.getUnit(bs,i);
        dValue=isNaN(dpha[i].getOrthogonalValue()) ? 0 : ((Double)dpha[i].getOrthogonalValue()).doubleValue();
        double[] values=computeStackPosition(au,dValue,ax);
        dStart=values[0];
        dEnd=values[1];
        try {
          double dMargin=srh.getLocationOnOrthogonal(dEnd) - srh.getLocationOnOrthogonal(dStart);
          double lastPosition=au.getLastPosition(dValue);
          if (Double.isNaN(lastPosition)) {
            dBaseLocation=srh.getLocationOnOrthogonal(dStart);
          }
 else {
            dBaseLocation=au.getLastPosition(dValue);
          }
          au.setLastPosition(dValue,dBaseLocation,dMargin);
          dY=au.getLastPosition(dValue);
        }
 catch (        Exception ex) {
          throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
        }
      }
 else {
        if (!ChartUtil.isStudyLayout(cwa)) {
          dBaseLocation=dZeroLocation;
        }
 else {
          au=ssl.getUnit(bs,i);
          Object oValue=dpha[i].getOrthogonalValue();
          dValue=oValue == null ? 0 : Methods.asDouble(oValue);
          try {
            double dMargin=srh.getLocationOnOrthogonal(oValue == null ? 0 : oValue) - srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            double lastPosition=au.getLastPosition(dValue);
            if (Double.isNaN(lastPosition)) {
              dBaseLocation=srh.getLocationOnOrthogonal(srh.getOrthogonalScale().getMinimum());
            }
 else {
              dBaseLocation=au.getLastPosition(dValue);
            }
            au.setLastPosition(dValue,dBaseLocation,dMargin);
          }
 catch (          Exception ex) {
            throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,ex);
          }
          dY=au.getLastPosition(dValue);
        }
      }
      if (bRendering3D) {
        double plotBaseLocation=srh3d.getPlotBaseLocation();
        if (dY < plotBaseLocation) {
          if (bShowOutside) {
            dBaseLocation=plotBaseLocation;
            dY=plotBaseLocation;
          }
 else {
            if (dBaseLocation < plotBaseLocation) {
              continue;
            }
            dY=plotBaseLocation;
          }
        }
 else         if (dBaseLocation < plotBaseLocation) {
          dBaseLocation=plotBaseLocation;
        }
        if (dY > plotBaseLocation + srh3d.getPlotHeight()) {
          if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
            continue;
          }
          dY=plotBaseLocation + srh3d.getPlotHeight();
        }
 else         if (dBaseLocation > plotBaseLocation + srh3d.getPlotHeight()) {
          dBaseLocation=plotBaseLocation + srh3d.getPlotHeight();
        }
      }
 else {
        if (dY < boClientArea.getTop()) {
          if (dBaseLocation < boClientArea.getTop()) {
            continue;
          }
          dY=boClientArea.getTop();
        }
 else         if (dBaseLocation < boClientArea.getTop()) {
          dBaseLocation=boClientArea.getTop();
        }
        if (dY > boClientArea.getTop() + boClientArea.getHeight()) {
          if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
            if (!bShowOutside) {
              continue;
            }
          }
          dY=boClientArea.getTop() + boClientArea.getHeight();
        }
 else         if (dBaseLocation > boClientArea.getTop() + boClientArea.getHeight()) {
          dBaseLocation=boClientArea.getTop() + boClientArea.getHeight();
        }
      }
      dHeight=dBaseLocation - dY;
      bInverted=bRendering3D ? dHeight <= 0 : dHeight < 0;
      if (bInverted) {
        dY=dBaseLocation;
        dHeight=-dHeight;
      }
    }
    if (rt.getValue() == RiserType.RECTANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserRectangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserRectangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.TRIANGLE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTriangle3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1],getCurrentStackedSizeHints(i));
        }
 else {
          loaFrontFace=computeRiserTriangle2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else     if (rt.getValue() == RiserType.TUBE) {
      if (bRendering3D) {
        loa3dFace=computeRiserTube3D(dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        loaFrontFace=computeRiserTube2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
      }
    }
 else     if (rt.getValue() == RiserType.CONE) {
      if (bRendering3D) {
        loa3dFace=computeRiserCone3D(bInverted,dX,dY,dZ,dHeight,dWidth,dWidthZ);
      }
 else {
        if (isStackedOrPercent(bs)) {
          StackedSizeHints slh=getCurrentStackedSizeHints(i);
          double[] size=null;
          if (isTransposed()) {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dHeight);
          }
 else {
            size=computeStacked2DTopNBottomSize(slh,au,dValue,dWidth);
          }
          loaFrontFace=computeStackedRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth,size[0],size[1]);
        }
 else {
          loaFrontFace=computeRiserCone2D(bInverted,i,faX,faY,dX,dY,dHeight,dWidth);
        }
      }
    }
 else {
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{rt.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    if (isNaN(dpha[i].getOrthogonalValue())) {
      faX[i]=Double.NaN;
      faY[i]=Double.NaN;
      continue;
    }
    if (bRendering3D) {
    }
 else {
      for (int j=0; j < loaFrontFace.length; j++) {
        Location location=loaFrontFace[j];
        if (location.getX() < boClientArea.getLeft()) {
          location.setX(boClientArea.getLeft());
        }
 else         if (location.getX() > boClientArea.getLeft() + boClientArea.getWidth()) {
          location.setX(boClientArea.getLeft() + boClientArea.getWidth());
        }
        if (location.getY() < boClientArea.getTop()) {
          location.setY(boClientArea.getTop());
        }
 else         if (location.getY() > boClientArea.getTop() + boClientArea.getHeight()) {
          location.setY(boClientArea.getTop() + boClientArea.getHeight());
        }
      }
    }
    if (isInteractivityEnabled()) {
      final EList<Trigger> elTriggers=bs.getTriggers();
      if (!elTriggers.isEmpty()) {
        final StructureSource iSource=WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]);
        if (bRendering3D) {
          for (int j=0; j < loa3dFace.size(); j++) {
            Location3D[] points=loa3dFace.get(j);
            if (points.length <= 2) {
              continue;
            }
            final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
            iev.setCursor(bs.getCursor());
            final Polygon3DRenderEvent pre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),Polygon3DRenderEvent.class);
            pre3d.setPoints3D(points);
            final Location panningOffset=getPanningOffset();
            if (get3DEngine().processEvent(pre3d,panningOffset.getX(),panningOffset.getY()) != null) {
              iev.setHotSpot(pre3d);
              ipr.enableInteraction(iev);
            }
          }
        }
 else {
          final InteractionEvent iev=createEvent(iSource,elTriggers,ipr);
          iev.setCursor(bs.getCursor());
          final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createSeries(bs),PolygonRenderEvent.class);
          Location[] hotspotLoa=new Location[loaFrontFace.length];
          for (int a=0; a < hotspotLoa.length; a++) {
            hotspotLoa[a]=goFactory.createLocation(loaFrontFace[a].getX(),loaFrontFace[a].getY());
          }
          if (hotspotLoa.length == 4) {
            if (isTransposed()) {
              if (hotspotLoa[2].getX() - hotspotLoa[1].getX() < MIN_HEIGHT) {
                hotspotLoa[2].setX(hotspotLoa[1].getX() + MIN_HEIGHT);
                hotspotLoa[3].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[1].getY() - hotspotLoa[0].getY() < MIN_HEIGHT) {
                hotspotLoa[0].setY(hotspotLoa[1].getY() - MIN_HEIGHT);
                hotspotLoa[3].setY(hotspotLoa[2].getY() - MIN_HEIGHT);
              }
            }
          }
 else           if (hotspotLoa.length == 3) {
            if (isTransposed()) {
              if (hotspotLoa[1].getX() - hotspotLoa[0].getX() < MIN_HEIGHT) {
                hotspotLoa[1].setX(hotspotLoa[0].getX() + MIN_HEIGHT);
              }
            }
 else {
              if (hotspotLoa[0].getY() - hotspotLoa[1].getY() < MIN_HEIGHT) {
                hotspotLoa[1].setY(hotspotLoa[0].getY() - MIN_HEIGHT);
              }
            }
          }
          pre.setPoints(hotspotLoa);
          iev.setHotSpot(pre);
          ipr.enableInteraction(iev);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT,dpha[i]);
    if (dHeight != 0 || bShowOutside) {
      if (bRendering3D) {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else         if (rt.getValue() == RiserType.CONE) {
          renderRiserCone3D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia,dpha[i]);
        }
 else {
          render3DPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loa3dFace,fixedFill,lia);
        }
      }
 else {
        if (rt.getValue() == RiserType.TUBE) {
          renderRiserTube2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs));
        }
 else         if (rt.getValue() == RiserType.CONE) {
          boolean isStacked=isStackedOrPercent(bs);
          double coneThickness=cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL ? dSeriesThickness / 2 : dSeriesThickness / 4;
          double coneBottomHeight=computeBottomOvalHeightOfCone(i,coneThickness,loaFrontFace,dValue,isStacked);
          renderRiserCone2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),dpha[i],loaFrontFace,fixedFill,lia,cwa.getDimension(),coneThickness,cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL,isTransposed(),true,bInverted,isStackedOrPercent(bs),coneBottomHeight);
        }
 else         if (rt.getValue() == RiserType.TRIANGLE) {
          double[] thicknesses=computeThicknessesWithTriangle2D(loaFrontFace,dWidth,dHeight,dSeriesThickness);
          int zorder_hint=0;
          if (cwa.getDimension() == ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL) {
            adjustLocationsWithTriangle2D(loaFrontFace,thicknesses[0],thicknesses[1],dSeriesThickness);
            zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          }
          renderRiserTriangle2D(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),thicknesses[0],thicknesses[1],true,zorder_hint);
        }
 else {
          int zorder_hint=isStackedOrPercent(bs) ? i : i * getSeriesCount() + getSeriesIndex();
          renderPlane(ipr,WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),loaFrontFace,fixedFill,lia,cwa.getDimension(),dSeriesThickness,true,zorder_hint);
        }
      }
    }
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_ELEMENT,dpha[i],fixedFill);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT,dpha[i],fixedFill,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_ELEMENT,dpha[i]);
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT,dpha[i]);
    laDataPoint.getCaption().setValue(dpha[i].getDisplayValue());
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_DATA_POINT_LABEL,laDataPoint);
    if (laDataPoint.isVisible() && (dHeight != 0 || bShowOutside) && dWidth != 0) {
      if (!dpha[i].isOutside()) {
        if (!cwa.isTransposed()) {
          if (bRendering3D) {
            if (pDataPoint.getValue() == Position.OUTSIDE) {
              if (!bInverted) {
                loDataPoint3d.set(dX + dWidth / 2,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.BELOW);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing() - 16,dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX + dWidth,dY - p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
 else {
                loDataPoint3d.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                Text3DRenderEvent tre=((EventObjectCache)ipr).getEventObject(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),Text3DRenderEvent.class);
                tre.setAction(TextRenderEvent.RENDER_TEXT_AT_LOCATION);
                tre.setLabel(laDataPoint);
                tre.setTextPosition(TextRenderEvent.ABOVE);
                Location3D[] loa3d=new Location3D[5];
                loa3d[0]=loDataPoint3d;
                loa3d[1]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[2]=goFactory.createLocation3D(dX + dWidth,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[3]=goFactory.createLocation3D(dX,dY + dHeight + 16+ p.getVerticalSpacing(),dZ + dWidthZ / 2);
                loa3d[4]=goFactory.createLocation3D(dX,dY + dHeight + p.getVerticalSpacing(),dZ + dWidthZ / 2);
                tre.setBlockBounds3D(loa3d);
                getDeferredCache().addLabel(tre);
              }
            }
 else {
              throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
            }
          }
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
              if (!bInverted) {
                loDataPoint.set(dX + dWidth / 2,dY - p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
              }
 else {
                loDataPoint.set(dX + dWidth / 2,dY + dHeight + p.getVerticalSpacing());
                renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
              }
            break;
case Position.INSIDE:
          if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
            if (!bInverted) {
              loDataPoint.set(dX + dWidth / 2,dY + dHeight);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.ABOVE_LITERAL,loDataPoint,null);
            }
 else {
              loDataPoint.set(dX + dWidth / 2,dY);
              renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.BELOW_LITERAL,loDataPoint,null);
            }
          }
 else {
            boDataPoint.updateFrom(loaFrontFace);
            renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
          }
        break;
default :
      throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
  }
}
}
 else {
switch (pDataPoint.getValue()) {
case Position.OUTSIDE:
  if (!bInverted) {
    loDataPoint.set(dX - p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
  }
 else {
    loDataPoint.set(dX + dWidth + p.getHorizontalSpacing(),dY + dHeight / 2);
    renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
  }
break;
case Position.INSIDE:
if (rt.getValue() == RiserType.CONE || rt.getValue() == RiserType.TRIANGLE) {
if (!bInverted) {
  loDataPoint.set(dX + dWidth,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.LEFT_LITERAL,loDataPoint,null);
}
 else {
  loDataPoint.set(dX,dY + dHeight / 2);
  renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_AT_LOCATION,laDataPoint,Position.RIGHT_LITERAL,loDataPoint,null);
}
}
 else {
boDataPoint.updateFrom(loaFrontFace);
renderLabel(WrappedStructureSource.createSeriesDataPoint(bs,dpha[i]),TextRenderEvent.RENDER_TEXT_IN_BLOCK,laDataPoint,null,null,boDataPoint);
}
break;
default :
throw new ChartException(ChartEngineExtensionPlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{pDataPoint.getName()},Messages.getResourceBundle(getRunTimeContext().getULocale()));
}
}
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_DATA_POINT_LABEL,dpha[i],laDataPoint,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_DATA_POINT_LABEL,laDataPoint);
}
if (!bRendering3D) {
List<double[]> points=new ArrayList<double[]>();
for (int i=0; i < faX.length; i++) {
points.add(new double[]{faX[i],faY[i]});
}
points=filterNull(points);
if (isLastRuntimeSeriesInAxis()) {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,null);
}
 else {
getRunTimeContext().putState(STACKED_SERIES_LOCATION_KEY,points);
}
if (getSeries().getCurveFitting() != null) {
Location[] larray=createLocationArray(points);
renderFittingCurve(ipr,larray,getSeries().getCurveFitting(),false,true);
}
}
resetAllStackedSizeHints();
if (!bRendering3D) {
restoreClipping(ipr);
}
}",0.999853936413652
67815,"/** 
 * Converts Fill if possible. If Fill is MultipleFill type, convert to positive/negative Color according to the value. If not MultipleFill type, return original fill for positive value, or negative fill for negative value.
 * @param fill Fill to convert
 * @param dValue numeric value
 * @param fNegative Fill for negative value. Useless for positive value or MultipleFill
 */
public static Fill convertFill(Fill fill,double dValue,Fill fNegative){
  if (dValue >= 0) {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf((ColorDefinition)((MultipleFill)fill).getFills().get(0));
    }
  }
 else {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf((ColorDefinition)((MultipleFill)fill).getFills().get(1));
    }
 else     if (fNegative != null) {
      fill=fNegative;
    }
  }
  return fill;
}","/** 
 * Converts Fill if possible. If Fill is MultipleFill type, convert to positive/negative Color according to the value. If not MultipleFill type, return original fill for positive value, or negative fill for negative value.
 * @param fill Fill to convert
 * @param dValue numeric value
 * @param fNegative Fill for negative value. Useless for positive value or MultipleFill
 */
public static Fill convertFill(Fill fill,double dValue,Fill fNegative){
  if (dValue >= 0) {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf(((MultipleFill)fill).getFills().get(0));
    }
  }
 else {
    if (fill instanceof MultipleFill) {
      fill=goFactory.copyOf(((MultipleFill)fill).getFills().get(1));
    }
 else     if (fNegative != null) {
      fill=fNegative;
    }
  }
  return fill;
}",0.9791921664626684
67816,"public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof Tree) {
    if (((TreeItem)e.item).getItemCount() != 0) {
      preview.renderModel(null);
      description.setText(icp.getDefaultDescription());
      ChartExamplesView.setActionsEnabled(false);
    }
 else {
      String sKey=hmItemToKey.get(e.item);
      setClassName(icp.getClassName(sKey));
      String methodName=icp.getMethodName(className);
      setChartModel(ImportChartModel.getChartModel(className,methodName));
      preview.renderModel(getChartModel());
      description.setText(icp.getDescription(className));
      ChartExamplesView.setActionsEnabled(true);
    }
  }
}","public void widgetSelected(SelectionEvent e){
  if (e.getSource() instanceof Tree) {
    if (((TreeItem)e.item).getItemCount() != 0) {
      preview.renderModel(null);
      description.setText(icp.getDefaultDescription());
      ChartExamplesView.setActionsEnabled(false);
    }
 else {
      String sKey=hmItemToKey.get(e.item);
      setClassName(icp.getClassName(sKey));
      String methodName=icp.getMethodName(className);
      setChartModel(ImportChartModel.getChartModel(className,methodName));
      preview.renderModel(getChartModel().copyInstance());
      description.setText(icp.getDescription(className));
      ChartExamplesView.setActionsEnabled(true);
    }
  }
}",0.9888641425389756
67817,"/** 
 * @param resultSet
 * @param levelNames
 * @return
 * @throws DataException
 */
private static IAggregationResultSet getMatchedResultSet(IAggregationResultSet[] resultSet,DimLevel[] levelNames) throws DataException {
  for (int i=0; i < resultSet.length; i++) {
    IAggregationResultSet rSet=resultSet[i];
    if (levelNames.length != rSet.getLevelCount())     continue;
    boolean match=true;
    for (int j=0; j < rSet.getLevelCount(); j++) {
      if (!levelNames[j].equals(rSet.getLevel(j))) {
        match=false;
        break;
      }
    }
    if (match) {
      if (!isEdgeResultSet(rSet))       return rSet;
    }
  }
  throw new DataException(ResourceConstants.INVALID_SORT_DEFN);
}","/** 
 * @param resultSet
 * @param levelNames
 * @return
 * @throws DataException
 */
private static IAggregationResultSet getMatchedResultSet(IAggregationResultSet[] resultSet,DimLevel[] levelNames,String aggregationName) throws DataException {
  for (int i=0; i < resultSet.length; i++) {
    IAggregationResultSet rSet=resultSet[i];
    if (levelNames.length != rSet.getLevelCount())     continue;
    boolean match=true;
    for (int j=0; j < rSet.getLevelCount(); j++) {
      if (!levelNames[j].equals(rSet.getLevel(j))) {
        match=false;
        break;
      }
    }
    if (match) {
      if (!isEdgeResultSet(rSet) && existAggregation(rSet.getAggregationDefinition(),aggregationName))       return rSet;
    }
  }
  throw new DataException(ResourceConstants.INVALID_SORT_DEFN);
}",0.9384203480589024
67818,"/** 
 * @param resultSet
 * @param level
 * @return
 * @throws DataException 
 */
private static int getBaseResultSetIndex(IAggregationResultSet[] resultSet,DimLevel level) throws DataException {
  for (int i=0; i < resultSet.length; i++) {
    if (isEdgeResultSet(resultSet[i]) && (resultSet[i].getLevelIndex(level) >= 0)) {
      return i;
    }
  }
  throw new DataException(""String_Node_Str"",level);
}","/** 
 * @param resultSet
 * @param aggregationName
 * @param level
 * @return
 * @throws DataException
 */
private static int getBaseResultSetIndex(IAggregationResultSet[] resultSet,String aggregationName,DimLevel level) throws DataException {
  for (int i=0; i < resultSet.length; i++) {
    if (isEdgeResultSet(resultSet[i]) && (resultSet[i].getLevelIndex(level) >= 0)) {
      return i;
    }
  }
  throw new DataException(""String_Node_Str"",level);
}",0.9417249417249416
67819,"private void initPageBuffer(PageContent pageContent){
  MasterPageDesign pageDesign=(MasterPageDesign)pageContent.getGenerateBy();
  if (pageDesign.getOnPageStart() != null || pageDesign.getOnPageEnd() != null) {
    bufferAllContents=true;
  }
 else {
    bufferAllContents=false;
  }
  this.contents.clear();
  this.pageContent=pageContent;
}","private void initPageBuffer(PageContent pageContent){
  MasterPageDesign pageDesign=(MasterPageDesign)pageContent.getGenerateBy();
  Report report=pageContent.getReportContent().getDesign();
  if (pageDesign.getOnPageStart() != null || pageDesign.getOnPageEnd() != null || report.getOnPageStart() != null || report.getOnPageEnd() != null) {
    bufferAllContents=true;
  }
 else {
    bufferAllContents=false;
  }
  this.contents.clear();
  this.pageContent=pageContent;
}",0.8431372549019608
67820,"private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}","private void initOptions(){
  ConfigurableOption wrappingText=initializeWrappingText();
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{wrappingText,chartDpi};
}",0.98050139275766
67821,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption embeddedFont=new ConfigurableOption(EMBEDDED_FONT);
  embeddedFont.setDisplayName(getMessage(""String_Node_Str""));
  embeddedFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embeddedFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embeddedFont.setDefaultValue(Boolean.TRUE);
  embeddedFont.setToolTip(null);
  embeddedFont.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embeddedFont,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption embeddedFont=new ConfigurableOption(EMBEDDED_FONT);
  embeddedFont.setDisplayName(getMessage(""String_Node_Str""));
  embeddedFont.setDataType(IConfigurableOption.DataType.BOOLEAN);
  embeddedFont.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  embeddedFont.setDefaultValue(Boolean.TRUE);
  embeddedFont.setToolTip(null);
  embeddedFont.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,embeddedFont,chartDpi};
}",0.9965759008641774
67822,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption copies=new ConfigurableOption(PostscriptRenderOption.OPTION_COPIES);
  copies.setDisplayName(getMessage(""String_Node_Str""));
  copies.setDataType(IConfigurableOption.DataType.INTEGER);
  copies.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  copies.setDefaultValue(1);
  copies.setToolTip(null);
  copies.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption collate=new ConfigurableOption(PostscriptRenderOption.OPTION_COLLATE);
  collate.setDisplayName(getMessage(""String_Node_Str""));
  collate.setDataType(IConfigurableOption.DataType.BOOLEAN);
  collate.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  collate.setDefaultValue(Boolean.FALSE);
  collate.setToolTip(null);
  collate.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption duplex=new ConfigurableOption(PostscriptRenderOption.OPTION_DUPLEX);
  duplex.setDisplayName(getMessage(""String_Node_Str""));
  duplex.setDataType(IConfigurableOption.DataType.STRING);
  duplex.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  duplex.setDefaultValue(null);
  duplex.setToolTip(null);
  duplex.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperSize=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_SIZE);
  paperSize.setDisplayName(getMessage(""String_Node_Str""));
  paperSize.setDataType(IConfigurableOption.DataType.STRING);
  paperSize.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperSize.setDefaultValue(""String_Node_Str"");
  paperSize.setToolTip(null);
  paperSize.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption paperTray=new ConfigurableOption(PostscriptRenderOption.OPTION_PAPER_TRAY);
  paperTray.setDisplayName(getMessage(""String_Node_Str""));
  paperTray.setDataType(IConfigurableOption.DataType.STRING);
  paperTray.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  paperTray.setDefaultValue(null);
  paperTray.setToolTip(null);
  paperTray.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,copies,collate,duplex,paperSize,paperTray,chartDpi};
}",0.997755690926579
67823,"private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,chartDpi};
}","private void initOptions(){
  ConfigurableOption bidiProcessing=new ConfigurableOption(BIDI_PROCESSING);
  bidiProcessing.setDisplayName(getMessage(""String_Node_Str""));
  bidiProcessing.setDataType(IConfigurableOption.DataType.BOOLEAN);
  bidiProcessing.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  bidiProcessing.setDefaultValue(Boolean.TRUE);
  bidiProcessing.setToolTip(null);
  bidiProcessing.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption textWrapping=new ConfigurableOption(TEXT_WRAPPING);
  textWrapping.setDisplayName(getMessage(""String_Node_Str""));
  textWrapping.setDataType(IConfigurableOption.DataType.BOOLEAN);
  textWrapping.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  textWrapping.setDefaultValue(Boolean.TRUE);
  textWrapping.setToolTip(null);
  textWrapping.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption fontSubstitution=new ConfigurableOption(FONT_SUBSTITUTION);
  fontSubstitution.setDisplayName(getMessage(""String_Node_Str""));
  fontSubstitution.setDataType(IConfigurableOption.DataType.BOOLEAN);
  fontSubstitution.setDisplayType(IConfigurableOption.DisplayType.CHECKBOX);
  fontSubstitution.setDefaultValue(Boolean.TRUE);
  fontSubstitution.setToolTip(null);
  fontSubstitution.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption pageOverFlow=new ConfigurableOption(IPDFRenderOption.PAGE_OVERFLOW);
  pageOverFlow.setDisplayName(getMessage(""String_Node_Str""));
  pageOverFlow.setDataType(IConfigurableOption.DataType.INTEGER);
  pageOverFlow.setDisplayType(IConfigurableOption.DisplayType.COMBO);
  pageOverFlow.setChoices(new OptionValue[]{new OptionValue(IPDFRenderOption.CLIP_CONTENT,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.FIT_TO_PAGE_SIZE,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.OUTPUT_TO_MULTIPLE_PAGES,getMessage(""String_Node_Str"")),new OptionValue(IPDFRenderOption.ENLARGE_PAGE_SIZE,getMessage(""String_Node_Str""))});
  pageOverFlow.setDefaultValue(IPDFRenderOption.CLIP_CONTENT);
  pageOverFlow.setToolTip(null);
  pageOverFlow.setDescription(getMessage(""String_Node_Str""));
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{bidiProcessing,textWrapping,fontSubstitution,pageOverFlow,chartDpi};
}",0.9960204661739624
67824,"private void initOptions(){
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(null);
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{chartDpi};
}","private void initOptions(){
  ConfigurableOption chartDpi=new ConfigurableOption(CHART_DPI);
  chartDpi.setDisplayName(getMessage(""String_Node_Str""));
  chartDpi.setDataType(IConfigurableOption.DataType.INTEGER);
  chartDpi.setDisplayType(IConfigurableOption.DisplayType.TEXT);
  chartDpi.setDefaultValue(new Integer(192));
  chartDpi.setToolTip(""String_Node_Str"");
  chartDpi.setDescription(getMessage(""String_Node_Str""));
  options=new IConfigurableOption[]{chartDpi};
}",0.9774436090225564
67825,"protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle());
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null && viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}","protected void okPressed(){
  super.okPressed();
  try {
    DataSetUIUtil.updateColumnCache(this.getHandle(),false);
  }
 catch (  Exception e) {
    ExceptionHandler.handle(e);
    return;
  }
  if (super.rootNode.hasSubNodes()) {
    PropertyNode[] nodes=rootNode.getSubNodes();
    for (int n=0; n < nodes.length; n++) {
      if (nodes[n].getPage() instanceof DataSetParametersPage) {
        if (viewer == null && viewer.getTree() == null)         return;
        DataSetParametersPage page=(DataSetParametersPage)nodes[n].getPage();
        if (!page.canFinish() && !viewer.getTree().isDisposed()) {
          TreeItem firstNode=viewer.getTree().getItems()[n];
          StructuredSelection select=new StructuredSelection(firstNode.getData());
          viewer.setSelection(select);
          String name=((DataSetParametersPage)nodes[n].getPage()).getNoneValuedParameterName();
          this.setMessage(Messages.getFormattedString(""String_Node_Str"",new Object[]{name}),IMessageProvider.ERROR);
          return;
        }
      }
    }
  }
}",0.9913544668587896
67826,"public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      ExceptionHandler.handle(e);
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}","public boolean performFinish(){
  if (!canFinish())   return false;
  if (useTransaction) {
    Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
  }
  dataSetHandle=dataSetPage.createSelectedDataSet();
  if (dataSetHandle != null) {
    if (dataSetHandle instanceof ScriptDataSetHandle) {
      columnDefPage.saveResult(dataSetHandle);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
    try {
      createSelectedDataSetTearDown(dataSetHandle);
      DataSetUIUtil.updateColumnCache(dataSetHandle,false);
    }
 catch (    Exception e) {
      if (e instanceof SWTException) {
        SWTException swtException=(SWTException)e;
        if (swtException.code == SWT.ERROR_WIDGET_DISPOSED)         Utility.log(e);
      }
      ExceptionHandler.handle(e);
    }
  }
 else {
    if (useTransaction) {
      Utility.getCommandStack().rollback();
    }
    return false;
  }
  return true;
}",0.9967845659163987
67827,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    throw ex;
  }
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
    EngineConfig ec=new EngineConfig();
    ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
    ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
    DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
    DataRequestSession session=engineTask.getDataSession();
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    engineTask.setAppContext(appContext);
    engineTask.run();
    DataService.getInstance().registerSession(dataSetHandle,session);
    session.refreshMetaData(dataSetHandle,holdEvent);
    engineTask.close();
    engine.destroy();
  }
 else {
    DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
    Map appContext=new HashMap();
    appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
    appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
    context.setAppContext(appContext);
    DataRequestSession drSession=DataRequestSession.newSession(context);
    drSession.refreshMetaData(dataSetHandle,holdEvent);
    drSession.shutdown();
  }
}",0.8539719626168224
67828,"public boolean performFinish(){
  if (!canFinish())   return false;
  if (dataSetPage != null && dataSetPage instanceof JointDataSetPage) {
    if (useTransaction) {
      Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
    }
    DataSetHandle joinDataSetHandle=((JointDataSetPage)dataSetPage).createSelectedDataSet();
    try {
      if (joinDataSetHandle != null)       DataSetUIUtil.updateColumnCache(joinDataSetHandle);
    }
 catch (    SemanticException e) {
      ExceptionHandler.handle(e);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
  }
  return true;
}","public boolean performFinish(){
  if (!canFinish())   return false;
  if (dataSetPage != null && dataSetPage instanceof JointDataSetPage) {
    if (useTransaction) {
      Utility.getCommandStack().startTrans(CREATE_DATA_SET_TRANS_NAME);
    }
    DataSetHandle joinDataSetHandle=((JointDataSetPage)dataSetPage).createSelectedDataSet();
    try {
      if (joinDataSetHandle != null)       DataSetUIUtil.updateColumnCache(joinDataSetHandle,false);
    }
 catch (    Exception e) {
      ExceptionHandler.handle(e);
    }
    if (useTransaction) {
      Utility.getCommandStack().commit();
    }
  }
  return true;
}",0.9886363636363636
67829,"/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (!hasMetaData(dataSetHandle)) {
    updateColumnCache(dataSetHandle,true);
  }
  return dataSetHandle.getCachedMetaDataHandle();
}","/** 
 * Add this method according to GUI's requirement.This method is only for temporarily usage.
 * @param dataSetHandle
 * @return
 * @throws SemanticException
 * @deprecated
 */
public static CachedMetaDataHandle getCachedMetaDataHandle(DataSetHandle dataSetHandle) throws SemanticException {
  if (!hasMetaData(dataSetHandle)) {
    try {
      updateColumnCache(dataSetHandle,true);
    }
 catch (    BirtException e) {
      logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{e});
    }
  }
  return dataSetHandle.getCachedMetaDataHandle();
}",0.8159203980099502
67830,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    DataService.getInstance().updateColumnCache(dataSetHandle,holdEvent);
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 * @throws BirtException
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  DataService.getInstance().updateColumnCache(dataSetHandle,holdEvent);
}",0.7407407407407407
67831,"private Vector<OrthogonalSampleData> getConvertedOrthogonalSampleDataRepresentation(EList<OrthogonalSampleData> osdList,List<AxisType> axisTypes){
  Vector<OrthogonalSampleData> vNewOrthogonalSampleData=new Vector<OrthogonalSampleData>();
  for (int i=0; i < osdList.size(); i++) {
    OrthogonalSampleData osd=osdList.get(i);
    osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisTypes.get(i),osd.getDataSetRepresentation(),i));
    vNewOrthogonalSampleData.add(osd);
  }
  return vNewOrthogonalSampleData;
}","private Vector<OrthogonalSampleData> getConvertedOrthogonalSampleDataRepresentation(EList<OrthogonalSampleData> osdList,List<AxisType> axisTypes){
  Vector<OrthogonalSampleData> vNewOrthogonalSampleData=new Vector<OrthogonalSampleData>();
  for (int i=0; i < axisTypes.size(); i++) {
    OrthogonalSampleData osd=osdList.get(i);
    osd.setDataSetRepresentation(ChartUIUtil.getConvertedSampleDataRepresentation(axisTypes.get(i),osd.getDataSetRepresentation(),i));
    vNewOrthogonalSampleData.add(osd);
  }
  return vNewOrthogonalSampleData;
}",0.985239852398524
67832,"public static String getResultSetId(ReportContent report,InstanceID instanceID){
  Report design=report.getDesign();
  ArrayList<QueryTask> plan=createPlan(design,instanceID);
  StringBuilder sb=new StringBuilder();
  ExecutionContext executionContext=report.getExecutionContext();
  try {
    for (int current=plan.size() - 1; current >= 0; current--) {
      QueryTask task=plan.get(current);
      IDataQueryDefinition query=task.getQuery();
      if (task.getParent() == null) {
        String rset=getResultSetID(executionContext,null,""String_Node_Str"",query);
        if (rset == null)         return null;
        sb.append(rset);
      }
 else {
        if (sb.length() == 0) {
          throw new EngineException(MessageConstants.INVALID_INSTANCE_ID_ERROR,instanceID);
        }
        long rowid=task.getRowID();
        if (query instanceof ISubqueryDefinition) {
          String queryName=query.getName();
          sb.insert(0,""String_Node_Str"");
          sb.append(""String_Node_Str"").append(rowid).append(""String_Node_Str"").append(queryName);
        }
 else {
          String rset=getResultSetID(executionContext,sb.toString(),String.valueOf(rowid),query);
          sb.setLength(0);
          if (rset != null) {
            sb.append(rset);
          }
 else {
          }
        }
      }
    }
  }
 catch (  EngineException ex) {
    executionContext.addException(ex);
  }
  return sb.toString();
}","public static String getResultSetId(ReportContent report,InstanceID instanceID){
  Report design=report.getDesign();
  ArrayList<QueryTask> plan=createPlan(design,instanceID);
  StringBuilder sb=new StringBuilder();
  ExecutionContext executionContext=report.getExecutionContext();
  try {
    for (int current=plan.size() - 1; current >= 0; current--) {
      QueryTask task=plan.get(current);
      IDataQueryDefinition query=task.getQuery();
      if (task.getParent() == null) {
        String rset=getResultSetID(executionContext,null,""String_Node_Str"",query);
        if (rset == null)         return null;
        sb.append(rset);
      }
 else {
        if (sb.length() == 0) {
          throw new EngineException(MessageConstants.INVALID_INSTANCE_ID_ERROR,instanceID);
        }
        long rowid=task.getRowID();
        if (query instanceof ISubqueryDefinition) {
          String queryName=query.getName();
          sb.insert(0,""String_Node_Str"");
          sb.append(""String_Node_Str"").append(rowid).append(""String_Node_Str"").append(queryName);
        }
 else {
          String id=task.getCellID();
          if (id == null) {
            id=String.valueOf(rowid);
          }
          String rset=getResultSetID(executionContext,sb.toString(),id,query);
          sb.setLength(0);
          if (rset != null) {
            sb.append(rset);
          }
 else {
          }
        }
      }
    }
  }
 catch (  EngineException ex) {
    executionContext.addException(ex);
  }
  return sb.toString();
}",0.9343760625637538
67833,"protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
    }
 else {
      FontSplitter fontSplitter=getFontSplitter(content);
      while (fontSplitter.hasMore()) {
        Chunk ch=fontSplitter.getNext();
        int offset=ch.getOffset();
        int length=ch.getLength();
        fontFamily=getFontFamily(computedStyle,ch);
        String string=null;
        if (ch == Chunk.HARD_LINE_BREAK) {
          string=ch.getText();
        }
 else {
          string=txt.substring(offset,offset + length);
        }
        wordWriter.writeContent(type,string,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth);
        textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth);
  }
}","protected void writeText(int type,String txt,IContent content,InlineFlag inlineFlag,IStyle computedStyle,IStyle inlineStyle){
  HyperlinkInfo hyper=getHyperlink(content);
  int paragraphWidth=(int)WordUtil.twipToPt(context.getCurrentWidth());
  boolean rtl=content.isDirectionRTL();
  if (content instanceof TextContent) {
    TextFlag textFlag=TextFlag.START;
    String fontFamily=null;
    if (""String_Node_Str"".equals(txt) || txt == null || WordUtil.isField(content)) {
      wordWriter.writeContent(type,txt,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
    }
 else {
      int level=rtl ? 1 : 0;
      BidiSplitter bidiSplitter=new BidiSplitter(new Chunk(txt,0,level,level));
      if (bidiSplitter.hasMore()) {
        do {
          Chunk ch=bidiSplitter.getNext();
          level=ch.getRunLevel();
          FontSplitter fontSplitter=getFontSplitter(content,ch.getText());
          while (fontSplitter.hasMore()) {
            ch=fontSplitter.getNext();
            wordWriter.writeContent(type,ch.getText(),computedStyle,inlineStyle,getFontFamily(computedStyle,ch),hyper,inlineFlag,textFlag,paragraphWidth,(level & 1) != 0 || !rtl && level > 0);
            textFlag=fontSplitter.hasMore() || bidiSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
          }
        }
 while (bidiSplitter.hasMore());
      }
 else {
        FontSplitter fontSplitter=getFontSplitter(content,((TextContent)content).getText());
        while (fontSplitter.hasMore()) {
          Chunk ch=fontSplitter.getNext();
          int offset=ch.getOffset();
          int length=ch.getLength();
          fontFamily=getFontFamily(computedStyle,ch);
          String string=null;
          if (ch == Chunk.HARD_LINE_BREAK) {
            string=ch.getText();
          }
 else {
            string=txt.substring(offset,offset + length);
          }
          wordWriter.writeContent(type,string,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,textFlag,paragraphWidth,rtl);
          textFlag=fontSplitter.hasMore() ? TextFlag.MIDDLE : TextFlag.END;
        }
      }
    }
    if (inlineFlag == InlineFlag.BLOCK) {
      wordWriter.writeContent(type,null,computedStyle,inlineStyle,fontFamily,hyper,inlineFlag,TextFlag.END,paragraphWidth,rtl);
    }
  }
 else {
    wordWriter.writeContent(type,txt,computedStyle,inlineStyle,computedStyle.getFontFamily(),hyper,inlineFlag,TextFlag.WHOLE,paragraphWidth,rtl);
  }
}",0.7371842960740185
67834,"private FontSplitter getFontSplitter(IContent content){
  FontMappingManager fontManager=FontMappingManagerFactory.getInstance().getFontMappingManager(""String_Node_Str"",Locale.getDefault());
  String text=((TextContent)content).getText();
  FontSplitter fontSplitter=new FontSplitter(fontManager,new Chunk(text),(TextContent)content,true);
  return fontSplitter;
}","private FontSplitter getFontSplitter(IContent content,String text){
  FontMappingManager fontManager=FontMappingManagerFactory.getInstance().getFontMappingManager(""String_Node_Str"",Locale.getDefault());
  FontSplitter fontSplitter=new FontSplitter(fontManager,new Chunk(text),(TextContent)content,true);
  return fontSplitter;
}",0.9132947976878611
67835,"void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth);","void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth,boolean runIsRtl);",0.9504373177842566
67836,"public void writeText(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,TextFlag flag,int paragraphWidth){
  if (flag == TextFlag.START) {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth);
  }
 else   if (flag == TextFlag.END) {
    writer.closeTag(""String_Node_Str"");
  }
 else   if (flag == TextFlag.MIDDLE) {
    writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth);
  }
 else {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth);
    writer.closeTag(""String_Node_Str"");
  }
}","public void writeText(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,TextFlag flag,int paragraphWidth,boolean runIsRtl){
  if (flag == TextFlag.START) {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth,runIsRtl);
  }
 else   if (flag == TextFlag.END) {
    writer.closeTag(""String_Node_Str"");
  }
 else   if (flag == TextFlag.MIDDLE) {
    writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth,runIsRtl);
  }
 else {
    writeTextInParagraph(type,txt,style,fontFamily,info,paragraphWidth,runIsRtl);
    writer.closeTag(""String_Node_Str"");
  }
}",0.9620689655172414
67837,"public void writeTextInRun(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,boolean isInline,int paragraphWidth){
}","public void writeTextInRun(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,boolean isInline,int paragraphWidth,boolean runIsRtl){
  if (""String_Node_Str"".equals(txt)) {
    return;
  }
  if (needNewParagraph(txt)) {
    writer.closeTag(""String_Node_Str"");
    startParagraph(style,isInline,paragraphWidth);
    return;
  }
  openHyperlink(info);
  boolean isField=WordUtil.isField(type);
  String direction=style.getDirection();
  if (isField) {
    writeField(true);
  }
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  writeRunProperties(style,fontFamily,info);
  if (isInline) {
    writeAlign(style.getTextAlign(),direction);
    writeBackgroundColor(style.getBackgroundColor());
    writePosition(style.getVerticalAlign(),style.getProperty(StyleConstants.STYLE_FONT_SIZE));
    writeRunBorders(style);
  }
  if (!isField && runIsRtl) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
  writer.closeTag(""String_Node_Str"");
  if (isField) {
    writeAutoText(type);
  }
 else {
    writeString(txt,style);
  }
  writer.closeTag(""String_Node_Str"");
  if (isField) {
    writeField(false);
  }
  closeHyperlink(info);
}",0.2029850746268656
67838,"/** 
 * @param direction
 * @author bidi_hcg
 */
protected void writeBidi(boolean rtl){
  if (rtl) {
    writer.openTag(""String_Node_Str"");
    writer.closeTag(""String_Node_Str"");
  }
 else {
    writeAttrTag(""String_Node_Str"",""String_Node_Str"");
  }
}","/** 
 * @param direction
 * @author bidi_hcg
 */
protected void writeBidi(boolean rtl){
  writeAttrTag(""String_Node_Str"",rtl ? ""String_Node_Str"" : ""String_Node_Str"");
}",0.6761904761904762
67839,"private void writeTextInParagraph(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,int paragraphWidth){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  CSSValue lineHeight=style.getProperty(StyleConstants.STYLE_LINE_HEIGHT);
  if (!""String_Node_Str"".equalsIgnoreCase(lineHeight.getCssText())) {
    writeSpacing(lineHeight);
  }
  writeAlign(style.getTextAlign(),style.getDirection());
  writeBackgroundColor(style.getBackgroundColor());
  writeParagraphBorders(style);
  int indent=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_TEXT_INDENT),paragraphWidth * 1000) / 1000 * 20;
  if (indent != 0) {
    writeIndent(indent);
  }
  writer.closeTag(""String_Node_Str"");
  writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth);
}","private void writeTextInParagraph(int type,String txt,IStyle style,String fontFamily,HyperlinkInfo info,int paragraphWidth,boolean runIsRtl){
  writer.openTag(""String_Node_Str"");
  writer.openTag(""String_Node_Str"");
  CSSValue lineHeight=style.getProperty(StyleConstants.STYLE_LINE_HEIGHT);
  if (!""String_Node_Str"".equalsIgnoreCase(lineHeight.getCssText())) {
    writeSpacing(lineHeight);
  }
  writeAlign(style.getTextAlign(),style.getDirection());
  writeBackgroundColor(style.getBackgroundColor());
  writeParagraphBorders(style);
  int indent=PropertyUtil.getDimensionValue(style.getProperty(StyleConstants.STYLE_TEXT_INDENT),paragraphWidth * 1000) / 1000 * 20;
  if (indent != 0) {
    writeIndent(indent);
  }
  writeBidi(CSSConstants.CSS_RTL_VALUE.equals(style.getDirection()));
  writer.closeTag(""String_Node_Str"");
  writeTextInRun(type,txt,style,fontFamily,info,false,paragraphWidth,runIsRtl);
}",0.9441210710128056
67840,"public void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth){
  if (inlineFlag == InlineFlag.BLOCK) {
    writeText(type,txt,style,fontFamily,info,flag,paragraphWidth);
  }
 else {
    boolean isInline=true;
    if (inlineFlag == InlineFlag.FIRST_INLINE && flag == TextFlag.START) {
      startParagraph(style,isInline,paragraphWidth);
    }
    if (inlineStyle != null)     writeTextInRun(type,txt,inlineStyle,fontFamily,info,isInline,paragraphWidth);
 else     writeTextInRun(type,txt,style,fontFamily,info,isInline,paragraphWidth);
  }
}","public void writeContent(int type,String txt,IStyle style,IStyle inlineStyle,String fontFamily,HyperlinkInfo info,InlineFlag inlineFlag,TextFlag flag,int paragraphWidth,boolean runIsRtl){
  if (inlineFlag == InlineFlag.BLOCK) {
    writeText(type,txt,style,fontFamily,info,flag,paragraphWidth,runIsRtl);
  }
 else {
    boolean isInline=true;
    if (inlineFlag == InlineFlag.FIRST_INLINE && flag == TextFlag.START) {
      startParagraph(style,isInline,paragraphWidth);
    }
    if (inlineStyle != null)     writeTextInRun(type,txt,inlineStyle,fontFamily,info,isInline,paragraphWidth,runIsRtl);
 else     writeTextInRun(type,txt,style,fontFamily,info,isInline,paragraphWidth,runIsRtl);
  }
}",0.9672131147540984
67841,"public BarAxisIdLookup(ChartWithAxes cwa,Axis curAxis){
  Axis[] axs=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
  int count=0, id=0;
  for (  Axis axis : axs) {
    if (axis.isSideBySide()) {
      SeriesDefinition sd=axis.getSeriesDefinitions().get(0);
      if (sd.getDesignTimeSeries() instanceof BarSeries) {
        if (curAxis == axis) {
          id=count;
        }
        count++;
      }
    }
  }
  if (count > 1 && curAxis.isSideBySide()) {
    barAxisId=id;
    barAxisCount=count;
  }
 else {
    barAxisId=0;
    barAxisCount=1;
  }
}","public BarAxisIdLookup(ChartWithAxes cwa,Axis curAxis){
  Axis[] axs=cwa.getOrthogonalAxes(cwa.getBaseAxes()[0],true);
  int count=0, id=0;
  for (  Axis axis : axs) {
    if (axis.isSideBySide() && axis.getSeriesDefinitions().size() > 0) {
      SeriesDefinition sd=axis.getSeriesDefinitions().get(0);
      if (sd.getDesignTimeSeries() instanceof BarSeries) {
        if (curAxis == axis) {
          id=count;
        }
        count++;
      }
    }
  }
  if (count > 1 && curAxis.isSideBySide()) {
    barAxisId=id;
    barAxisCount=count;
  }
 else {
    barAxisId=0;
    barAxisCount=1;
  }
}",0.9636678200692042
67842,"/** 
 * @throws IOException
 */
public void close() throws IOException {
  diskIndex.close();
}","/** 
 * @throws IOException
 */
public void close() throws IOException {
  if (diskIndex != null)   diskIndex.close();
}",0.8837209302325582
67843,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (isDirtyModel()) {
    doSave(null);
  }
  if (prePage.isDirty()) {
    prePage.doSave(null);
  }
  boolean ret=refresh();
  if (ret == false && isMissingParameter()) {
    editor.setActivePage(prePage.getId());
  }
  return ret;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  boolean bool=true;
  if (isDirtyModel()) {
    doSave(null);
    bool=false;
  }
  if (prePage.isDirty() && bool) {
    prePage.doSave(null);
  }
  boolean ret=refresh();
  if (ret == false && isMissingParameter()) {
    editor.setActivePage(prePage.getId());
  }
  return ret;
}",0.7599517490952955
67844,"public GroupSortingDialog(Shell shell,ChartWizardContext wizardContext,SeriesDefinition sd,boolean disableAggregation){
  super(shell);
  this.wizardContext=wizardContext;
  this.sd=sd;
  this.fEnableAggregation=disableAggregation;
}","public GroupSortingDialog(Shell shell,ChartWizardContext wizardContext,SeriesDefinition sd,boolean disableAggregation){
  super(shell);
  setShellStyle(SWT.CLOSE | SWT.TITLE | SWT.RESIZE);
  this.wizardContext=wizardContext;
  this.sd=sd;
  this.fEnableAggregation=disableAggregation;
}",0.8978805394990366
67845,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (prePage == this) {
    return true;
  }
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  ModuleHandle newModel=getModel();
  if (newModel != null && model != null && model != newModel) {
    hookModelEventManager(newModel);
    markPageStale(IPageStaleType.NONE);
    SessionHandleAdapter.getInstance().resetReportDesign(model,newModel);
    unhookModelEventManager(model);
    model=newModel;
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    if (jsEditor instanceof JSEditor) {
      ((JSEditor)jsEditor).connectRoot(newModel);
    }
    IMediatorState state=SessionHandleAdapter.getInstance().getMediator(newModel).getCurrentState();
    ReportRequest request=new ReportRequest(state.getSource());
    List list=new ArrayList();
    list.add(newModel);
    request.setSelectionObject(list);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    previouPage=prePage;
    jsEditor.setFocus();
    return true;
  }
  jsEditor.setFocus();
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=new ArrayList(state.getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (prePage == this) {
  }
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  ModuleHandle newModel=getModel();
  if (newModel != null && model != null && model != newModel) {
    hookModelEventManager(newModel);
    markPageStale(IPageStaleType.NONE);
    SessionHandleAdapter.getInstance().resetReportDesign(model,newModel);
    unhookModelEventManager(model);
    model=newModel;
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    if (jsEditor instanceof JSEditor) {
      ((JSEditor)jsEditor).connectRoot(newModel);
    }
    IMediatorState state=SessionHandleAdapter.getInstance().getMediator(newModel).getCurrentState();
    ReportRequest request=new ReportRequest(state.getSource());
    List list=new ArrayList();
    list.add(newModel);
    request.setSelectionObject(list);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    previouPage=prePage;
    jsEditor.setFocus();
    return true;
  }
  jsEditor.setFocus();
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=new ArrayList(state.getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.99501027296742
67846,"/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingHighlightViewer(){
  contextMap=new HashMap();
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.highlight_AreaChart();
}","/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingHighlightViewer(){
  contextMap=new HashMap();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(PluginSettings.PROP_STANDALONE,""String_Node_Str"");
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.highlight_AreaChart();
}",0.851010101010101
67847,"public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}","@Override public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}",0.9606299212598424
67848,"/** 
 * Contructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingHighlightViewer siv=new SwingHighlightViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}","/** 
 * Contructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingHighlightViewer siv=new SwingHighlightViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}",0.9953703703703703
67849,"public void repaintChart(){
  repaint();
}","public void repaintChart(){
  updateBuffer();
  repaint();
}",0.8235294117647058
67850,"public void windowClosing(WindowEvent e){
  siv.idr.dispose();
}","@Override public void windowClosing(WindowEvent e){
  siv.idr.dispose();
}",0.927536231884058
67851,"public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}","@Override public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}",0.9606299212598424
67852,"/** 
 * Contructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingShowTooltipViewer siv=new SwingShowTooltipViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}","/** 
 * Constructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingShowTooltipViewer siv=new SwingShowTooltipViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}",0.9949285384970032
67853,"public void repaintChart(){
  repaint();
}","public void repaintChart(){
  updateBuffer();
  repaint();
}",0.8235294117647058
67854,"/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingShowTooltipViewer(){
  contextMap=new HashMap();
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.showTooltip_AreaChart();
}","/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingShowTooltipViewer(){
  contextMap=new HashMap();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(PluginSettings.PROP_STANDALONE,""String_Node_Str"");
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.showTooltip_AreaChart();
}",0.8525
67855,"public void windowClosing(WindowEvent e){
  siv.idr.dispose();
}","@Override public void windowClosing(WindowEvent e){
  siv.idr.dispose();
}",0.927536231884058
67856,"public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}","@Override public void paint(Graphics g){
  super.paint(g);
  if (bi == null) {
    updateBuffer();
  }
  g.drawImage(bi,0,0,this);
}",0.9606299212598424
67857,"/** 
 * Contructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingToggleVisibilityViewer siv=new SwingToggleVisibilityViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}","/** 
 * Constructs the layout with a container for displaying chart and a control panel for selecting interactivity.
 * @param args
 */
public static void main(String[] args){
  final SwingToggleVisibilityViewer siv=new SwingToggleVisibilityViewer();
  JFrame jf=new JFrame();
  jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
  jf.addComponentListener(siv);
  Container co=jf.getContentPane();
  co.setLayout(new BorderLayout());
  co.add(siv,BorderLayout.CENTER);
  Dimension dScreen=Toolkit.getDefaultToolkit().getScreenSize();
  Dimension dApp=new Dimension(600,400);
  jf.setSize(dApp);
  jf.setLocation((dScreen.width - dApp.width) / 2,(dScreen.height - dApp.height) / 2);
  jf.setTitle(siv.getClass().getName() + ""String_Node_Str"" + siv.idr.getClass().getName()+ ""String_Node_Str"");
  ControlPanel cp=siv.new ControlPanel(siv);
  co.add(cp,BorderLayout.SOUTH);
  siv.idr.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,siv);
  jf.addWindowListener(new WindowAdapter(){
    public void windowClosing(    WindowEvent e){
      siv.idr.dispose();
    }
  }
);
  jf.setVisible(true);
}",0.9995410738871042
67858,"/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingToggleVisibilityViewer(){
  contextMap=new HashMap();
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.toggleVisibility_AreaChart();
}","/** 
 * Get the connection with SWING device to render the graphics.
 */
SwingToggleVisibilityViewer(){
  contextMap=new HashMap();
  PlatformConfig config=new PlatformConfig();
  config.setProperty(PluginSettings.PROP_STANDALONE,""String_Node_Str"");
  final PluginSettings ps=PluginSettings.instance();
  try {
    idr=ps.getDevice(""String_Node_Str"");
  }
 catch (  ChartException ex) {
    ex.printStackTrace();
  }
  cm=PrimitiveCharts.toggleVisibility_AreaChart();
}",0.8560975609756097
67859,"public void repaintChart(){
  repaint();
}","public void repaintChart(){
  updateBuffer();
  repaint();
}",0.8235294117647058
67860,"protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  Image imageObject=null;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    try {
      imageObject=Image.getInstance(data);
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getLocalizedMessage());
    }
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),context.getDpi(),pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),context.getDpi(),0);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}","protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),context.getDpi(),pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),context.getDpi(),0);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}",0.9600912200684152
67861,"protected void initialize() throws BirtException {
  reader=new ImageReader(content,context.getSupportedImageFormats());
  int result=reader.read();
switch (result) {
case ImageReader.RESOURCE_UNREACHABLE:
    layout=createAltTextLayout(ImageReader.RESOURCE_UNREACHABLE);
  break;
case ImageReader.UNSUPPORTED_OBJECTS:
layout=createAltTextLayout(ImageReader.UNSUPPORTED_OBJECTS);
break;
case ImageReader.OBJECT_LOADED_SUCCESSFULLY:
layout=new ConcreteImageLayout(context,parent,content,reader.getByteArray());
break;
}
}","protected void initialize() throws BirtException {
  reader=new ImageReader(content,context.getSupportedImageFormats());
  int result=reader.read();
switch (result) {
case ImageReader.RESOURCE_UNREACHABLE:
    layout=createAltTextLayout(ImageReader.RESOURCE_UNREACHABLE);
  break;
case ImageReader.UNSUPPORTED_OBJECTS:
layout=createAltTextLayout(ImageReader.UNSUPPORTED_OBJECTS);
break;
case ImageReader.OBJECT_LOADED_SUCCESSFULLY:
if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
try {
imageObject=Image.getInstance(reader.getByteArray());
}
 catch (Exception e) {
logger.log(Level.WARNING,e.getLocalizedMessage());
}
if (imageObject == null) {
layout=createAltTextLayout(ImageReader.UNSUPPORTED_OBJECTS);
break;
}
}
layout=new ConcreteImageLayout(context,parent,content,reader.getByteArray());
break;
}
}",0.7455197132616488
67862,"/** 
 * Must run on UI thread
 * @return
 */
private boolean test(){
  if (!Constants.OS_WIN32.equalsIgnoreCase(Platform.getOS()) && !Constants.OS_LINUX.equalsIgnoreCase(Platform.getOS())) {
    return false;
  }
  if (!tested) {
    tested=true;
    Shell sh=new Shell();
    try {
      new Browser(sh,SWT.NONE);
      available=true;
    }
 catch (    SWTError se) {
      if (se.code == SWT.ERROR_NO_HANDLES) {
        available=false;
      }
    }
catch (    Exception e) {
    }
    if (sh != null && !sh.isDisposed())     sh.dispose();
  }
  return available;
}","/** 
 * Must run on UI thread
 * @return
 */
private boolean test(){
  if (!tested) {
    tested=true;
    Shell sh=new Shell();
    try {
      new Browser(sh,SWT.NONE);
      available=true;
    }
 catch (    SWTError se) {
      if (se.code == SWT.ERROR_NO_HANDLES) {
        available=false;
      }
    }
catch (    Exception e) {
    }
    if (sh != null && !sh.isDisposed())     sh.dispose();
  }
  return available;
}",0.8551307847082495
67863,"protected void initializeBounds(){
  Point size;
  if (!needRememberLastSize()) {
    size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT,true);
  }
 else {
    size=getInitialSize();
  }
  Point location=getInitialLocation(size);
  getShell().setBounds(getConstrainedShellBounds(new Rectangle(location.x,location.y,size.x,size.y)));
}","protected void initializeBounds(){
  Shell shell=getShell();
  if (shell != null) {
    if (shell.getDisplay().getDismissalAlignment() == SWT.RIGHT) {
      Button defaultButton=shell.getDefaultButton();
      if (defaultButton != null && isContained(buttonBar,defaultButton)) {
        defaultButton.moveBelow(null);
        ((Composite)buttonBar).layout();
      }
    }
  }
  Point size;
  if (!needRememberLastSize()) {
    size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT,true);
  }
 else {
    size=getInitialSize();
  }
  Point location=getInitialLocation(size);
  getShell().setBounds(getConstrainedShellBounds(new Rectangle(location.x,location.y,size.x,size.y)));
}",0.6620553359683794
67864,"/** 
 * Get the position id of a CubeCursor. The position id is decided by the combination of edge cursors.
 * @param cursor
 * @return
 * @throws OLAPException
 */
public static String getPositionID(CubeCursor cursor) throws OLAPException {
  StringBuffer result=new StringBuffer();
  List ordinateEdge=getAllEdges(cursor);
  for (int i=0; i < ordinateEdge.size(); i++) {
    EdgeCursor edge=(EdgeCursor)ordinateEdge.get(i);
    result.append(POSITION_DELIMITER);
    result.append(edge.getPosition());
  }
  return result.toString();
}","/** 
 * Get the position id of a CubeCursor. The position id is decided by the combination of edge cursors.
 * @param cursor
 * @return
 * @throws OLAPException
 */
public static String getPositionID(CubeCursor cursor) throws OLAPException {
  StringBuffer result=new StringBuffer();
  List ordinateEdge=getAllEdges(cursor);
  boolean isLeftTop=true;
  for (int i=0; i < ordinateEdge.size(); i++) {
    EdgeCursor edge=(EdgeCursor)ordinateEdge.get(i);
    if (edge.getPosition() != -1) {
      isLeftTop=false;
    }
  }
  if (isLeftTop) {
    result.append(POSITION_DELIMITER);
    result.append(-1);
    result.append(POSITION_DELIMITER);
    result.append(-1);
    return result.toString();
  }
  for (int i=0; i < ordinateEdge.size(); i++) {
    EdgeCursor edge=(EdgeCursor)ordinateEdge.get(i);
    result.append(POSITION_DELIMITER);
    result.append(edge.getPosition());
  }
  return result.toString();
}",0.6841741534208707
67865,"/** 
 * add a cache object into the cache system.
 * @param cache the cache object to be added.
 */
synchronized public void addCache(Cacheable cache){
  cache.getReferenceCount().set(1);
  Object cacheKey=cache.getCacheKey();
  caches.put(cacheKey,cache);
  lockedCacheSize++;
  if (systemCache != null) {
synchronized (systemCache) {
      systemCache.increaseUsedCacheSize(1);
    }
  }
  if (maxCacheSize > 0) {
    adjustFreeCaches();
  }
}","/** 
 * add a cache object into the cache system.
 * @param cache the cache object to be added.
 */
synchronized public void addCache(Cacheable cache){
  cache.getReferenceCount().set(1);
  Object cacheKey=cache.getCacheKey();
  Cacheable oldCache=caches.get(cacheKey);
  if (oldCache != null) {
    int referenceCount=oldCache.getReferenceCount().get();
    if (referenceCount >= 1) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    if (referenceCount == 0) {
      freeCaches.remove(oldCache);
    }
 else {
      assert(systemCache != null);
synchronized (systemCache) {
        systemCache.removeCache(oldCache);
      }
    }
  }
 else {
    if (systemCache != null) {
synchronized (systemCache) {
        systemCache.increaseUsedCacheSize(1);
      }
    }
  }
  caches.put(cacheKey,cache);
  lockedCacheSize++;
  if (maxCacheSize > 0) {
    adjustFreeCaches();
  }
}",0.484304932735426
67866,"protected void adjustFreeCaches(){
  if (freeCaches.size() <= 0) {
    return;
  }
  int releasedCacheSize=(lockedCacheSize + freeCaches.size()) - maxCacheSize;
  releasedCacheSize=releasedCacheSize > freeCaches.size() ? freeCaches.size() : releasedCacheSize;
  if (releasedCacheSize <= 0) {
    return;
  }
  Cacheable[] removedCaches=new Cacheable[releasedCacheSize];
  for (int i=0; i < releasedCacheSize; i++) {
    Cacheable freeCache=freeCaches.remove();
    if (listener != null) {
      listener.onCacheRelease(freeCache);
    }
    removedCaches[i]=freeCache;
  }
  if (systemCache != null) {
synchronized (systemCache) {
      systemCache.increaseUsedCacheSize(-releasedCacheSize);
      for (      Cacheable cache : removedCaches) {
        systemCache.addCache(cache);
      }
    }
  }
}","protected void adjustFreeCaches(){
  if (freeCaches.size() <= 0) {
    return;
  }
  int releasedCacheSize=(lockedCacheSize + freeCaches.size()) - maxCacheSize;
  releasedCacheSize=releasedCacheSize > freeCaches.size() ? freeCaches.size() : releasedCacheSize;
  if (releasedCacheSize <= 0) {
    return;
  }
  Cacheable[] removedCaches=new Cacheable[releasedCacheSize];
  for (int i=0; i < releasedCacheSize; i++) {
    Cacheable freeCache=freeCaches.remove();
    if (listener != null) {
      listener.onCacheRelease(freeCache);
    }
    removedCaches[i]=freeCache;
  }
  if (systemCache != null) {
synchronized (systemCache) {
      for (      Cacheable cache : removedCaches) {
        systemCache.addCache(cache);
      }
    }
  }
}",0.8901884340480831
67867,"public void setCacheSize(long cacheSize){
  long maxCacheBlock=cacheSize / 4096;
  if (maxCacheBlock > Integer.MAX_VALUE) {
    fs.setCacheSize(Integer.MAX_VALUE);
  }
 else {
    fs.setCacheSize((int)cacheSize);
  }
}","public void setCacheSize(long cacheSize){
  long cacheBlock=cacheSize / 4096;
  if (cacheBlock > Integer.MAX_VALUE) {
    fs.setCacheSize(Integer.MAX_VALUE);
  }
 else {
    fs.setCacheSize((int)cacheBlock);
  }
}",0.9559164733178654
67868,"synchronized public void removeFile(String name) throws IOException {
  if (readOnly) {
    throw new IOException(""String_Node_Str"");
  }
  Ext2Entry entry=entryTable.removeEntry(name);
  if (entry != null) {
    nodeTable.releaseNode(entry.inode);
  }
}","synchronized public void removeFile(String name) throws IOException {
  if (readOnly) {
    throw new IOException(""String_Node_Str"");
  }
  if (!openedFiles.isEmpty()) {
    ArrayList<Ext2File> removedFiles=new ArrayList<Ext2File>();
    for (    Ext2File file : openedFiles) {
      if (name.equals(file.getName())) {
        removedFiles.add(file);
      }
    }
    for (    Ext2File file : removedFiles) {
      file.close();
    }
  }
  Ext2Entry entry=entryTable.removeEntry(name);
  if (entry != null) {
    nodeTable.releaseNode(entry.inode);
  }
}",0.6271604938271605
67869,"public void clear() throws IOException {
  for (int i=0; i < 3; i++) {
    FatBlock cachedBlock=cachedFatBlocks[i];
    if (cachedBlock != null) {
      fs.unloadBlock(cachedBlock);
      cachedFatBlocks[i]=null;
    }
  }
}","protected void clear(int level) throws IOException {
  FatBlock cachedBlock=cachedFatBlocks[level];
  if (cachedBlock != null) {
    fs.unloadBlock(cachedBlock);
    cachedFatBlocks[level]=null;
  }
}",0.6933962264150944
67870,"protected int getLastBlock(int level,FatBlock fatBlock) throws IOException {
  for (int index=1023; index >= 0; index--) {
    int blockId=fatBlock.getBlock(index);
    if (blockId > 0) {
      if (level == 0) {
        fatBlock.setBlock(index,0);
        return blockId;
      }
      FatBlock nextFatBlock=getCachedBlock(level,blockId);
      int nextBlockId=getLastBlock(level--,nextFatBlock);
      if (nextBlockId > 0) {
        return nextBlockId;
      }
      fatBlock.setBlock(index,0);
      return blockId;
    }
  }
  return -1;
}","protected int getLastBlock(int level,FatBlock fatBlock) throws IOException {
  for (int index=1023; index >= 0; index--) {
    int blockId=fatBlock.getBlock(index);
    if (blockId > 0) {
      if (level == 0) {
        fatBlock.setBlock(index,-1);
        return blockId;
      }
      FatBlock nextFatBlock=getCachedBlock(level - 1,blockId);
      int nextBlockId=getLastBlock(level - 1,nextFatBlock);
      if (nextBlockId > 0) {
        return nextBlockId;
      }
      fatBlock.setBlock(index,-1);
      clear(level - 1);
      return blockId;
    }
  }
  return -1;
}",0.96415770609319
67871,"public int getFreeBlock() throws IOException {
  if (freeBlockList != null) {
    int blockId=freeBlockList.removeLastBlock();
    if (blockId > 0) {
      dirty=true;
      return blockId;
    }
    freeBlockList.clear();
    freeBlockList=null;
    freeNode=null;
  }
  while (!freeNodes.isEmpty()) {
    freeNode=freeNodes.removeLast();
    freeBlockList=new FreeBlockList(fs,freeNode);
    int blockId=freeBlockList.removeLastBlock();
    if (blockId > 0) {
      dirty=true;
      return blockId;
    }
    freeBlockList.clear();
    freeBlockList=null;
    freeNode=null;
  }
  return -1;
}","public int getFreeBlock() throws IOException {
  if (isLocked) {
    return -1;
  }
  if (freeBlockList != null) {
    int blockId=freeBlockList.removeLastBlock();
    if (blockId > 0) {
      dirty=true;
      return blockId;
    }
    freeBlockList.clear();
    freeBlockList=null;
    freeNode=null;
  }
  while (!freeNodes.isEmpty()) {
    freeNode=freeNodes.removeLast();
    freeBlockList=new FreeBlockList(fs,freeNode);
    int blockId=freeBlockList.removeLastBlock();
    if (blockId > 0) {
      dirty=true;
      return blockId;
    }
    freeBlockList.clear();
    freeBlockList=null;
    freeNode=null;
  }
  return -1;
}",0.969894222945484
67872,"protected void write() throws IOException {
  if (!dirty) {
    return;
  }
  dirty=false;
  Ext2File file=new Ext2File(fs,NodeTable.INODE_FREE_TABLE,false);
  try {
    ByteArrayOutputStream buffer=new ByteArrayOutputStream(Ext2Node.NODE_SIZE);
    DataOutputStream out=new DataOutputStream(buffer);
    while (!freeNodes.isEmpty()) {
      Ext2Node freeNode=freeNodes.removeFirst();
      buffer.reset();
      freeNode.write(out);
      file.write(buffer.toByteArray(),0,Ext2Node.NODE_SIZE);
    }
    if (freeBlockList != null) {
      buffer.reset();
      freeNode.write(out);
      file.write(buffer.toByteArray(),0,Ext2Node.NODE_SIZE);
    }
    file.setLength(file.getPointer());
  }
  finally {
    file.close();
  }
}","protected void write() throws IOException {
  if (!dirty) {
    return;
  }
  dirty=false;
  Ext2File file=new Ext2File(fs,NodeTable.INODE_FREE_TABLE,false);
  try {
    isLocked=true;
    ByteArrayOutputStream buffer=new ByteArrayOutputStream(Ext2Node.NODE_SIZE);
    DataOutputStream out=new DataOutputStream(buffer);
    for (    Ext2Node freeNode : freeNodes) {
      buffer.reset();
      freeNode.write(out);
      file.write(buffer.toByteArray(),0,Ext2Node.NODE_SIZE);
    }
    if (freeBlockList != null) {
      buffer.reset();
      freeNode.write(out);
      file.write(buffer.toByteArray(),0,Ext2Node.NODE_SIZE);
    }
    file.setLength(file.getPointer());
  }
  finally {
    isLocked=false;
    file.close();
  }
}",0.8881262868908717
67873,"private static boolean canAddFilterToDrill(ICubeQueryDefinition query,IEdgeDrillFilter rowDrill,IEdgeDrillFilter columnDrill,int i){
  List<IDimensionDefinition> columnEdgeDimensions=null;
  if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null)   columnEdgeDimensions=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE).getDimensions();
  List<IDimensionDefinition> rowEdgeDimensions=null;
  if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null)   rowEdgeDimensions=query.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions();
  ICubeFilterDefinition filter=(ICubeFilterDefinition)query.getFilters().get(i);
  if (filter.getTargetLevel() == null)   return false;
  int filterIndex=-1;
  int rowDrillIndex=-1;
  int columnDrillIndex=-1;
  int edgeTag=-1;
  boolean canAddFilter=false;
  if (rowEdgeDimensions != null && rowDrill != null) {
    for (int p=0; p < rowEdgeDimensions.size(); p++) {
      IDimensionDefinition rowEdgeDimension=rowEdgeDimensions.get(p);
      String hierarchyName=rowEdgeDimension.getHierarchy().get(0).getName();
      if (hierarchyName.equals(filter.getTargetLevel().getHierarchy().getName())) {
        filterIndex=p;
        edgeTag=ICubeQueryDefinition.ROW_EDGE;
      }
      if (rowDrill.getTargetHierarchy().getName().equals(hierarchyName))       rowDrillIndex=p;
    }
  }
  if (columnEdgeDimensions != null && columnDrill != null) {
    for (int p=0; p < columnEdgeDimensions.size(); p++) {
      IDimensionDefinition columnEdgeDimension=columnEdgeDimensions.get(p);
      String hierarchyName=columnEdgeDimension.getHierarchy().get(0).getName();
      if (hierarchyName.equals(filter.getTargetLevel().getHierarchy().getName())) {
        filterIndex=p;
        edgeTag=ICubeQueryDefinition.COLUMN_EDGE;
      }
      if (columnDrill.getTargetHierarchy().getName().equals(hierarchyName))       columnDrillIndex=p;
    }
  }
  if (edgeTag == ICubeQueryDefinition.ROW_EDGE) {
    if (rowDrillIndex < filterIndex) {
      canAddFilter=false;
    }
 else     if (rowDrillIndex > filterIndex) {
      canAddFilter=true;
    }
 else {
      String filterTargetLevel=filter.getTargetLevel().getName();
      String drillTargetLevel=rowDrill.getTargetLevelName();
      List<ILevelDefinition> levelDefinition=filter.getTargetLevel().getHierarchy().getLevels();
      int drillLevelIndex=0;
      int filterLevelIndex=0;
      for (int j=0; j < levelDefinition.size(); j++) {
        ILevelDefinition level=levelDefinition.get(j);
        if (level.getName().equals(drillTargetLevel)) {
          drillLevelIndex=j;
        }
        if (level.getName().equals(filterTargetLevel)) {
          filterLevelIndex=j;
        }
      }
      if (drillLevelIndex >= filterLevelIndex)       canAddFilter=true;
    }
  }
 else   if (edgeTag == ICubeQueryDefinition.COLUMN_EDGE) {
    if (columnDrillIndex < filterIndex) {
      canAddFilter=false;
    }
 else     if (columnDrillIndex > filterIndex) {
      canAddFilter=true;
    }
 else {
      String filterTargetLevel=filter.getTargetLevel().getName();
      String drillTargetLevel=columnDrill.getTargetLevelName();
      List<ILevelDefinition> levelDefinition=filter.getTargetLevel().getHierarchy().getLevels();
      int drillLevelIndex=0;
      int filterLevelIndex=0;
      for (int j=0; j < levelDefinition.size(); j++) {
        ILevelDefinition level=levelDefinition.get(j);
        if (level.getName().equals(drillTargetLevel)) {
          drillLevelIndex=j;
        }
        if (level.getName().equals(filterTargetLevel)) {
          filterLevelIndex=j;
        }
      }
      if (drillLevelIndex >= filterLevelIndex)       canAddFilter=true;
    }
  }
  return canAddFilter;
}","private static boolean canAddFilterToDrill(ICubeQueryDefinition query,IEdgeDrillFilter rowDrill,IEdgeDrillFilter columnDrill,int i){
  List<IDimensionDefinition> columnEdgeDimensions=null;
  if (query.getEdge(ICubeQueryDefinition.COLUMN_EDGE) != null)   columnEdgeDimensions=query.getEdge(ICubeQueryDefinition.COLUMN_EDGE).getDimensions();
  List<IDimensionDefinition> rowEdgeDimensions=null;
  if (query.getEdge(ICubeQueryDefinition.ROW_EDGE) != null)   rowEdgeDimensions=query.getEdge(ICubeQueryDefinition.ROW_EDGE).getDimensions();
  if (!(query.getFilters().get(i) instanceof ICubeFilterDefinition)) {
    return true;
  }
  ICubeFilterDefinition filter=(ICubeFilterDefinition)query.getFilters().get(i);
  if (filter.getTargetLevel() == null)   return false;
  int filterIndex=-1;
  int rowDrillIndex=-1;
  int columnDrillIndex=-1;
  int edgeTag=-1;
  boolean canAddFilter=false;
  if (rowEdgeDimensions != null && rowDrill != null) {
    for (int p=0; p < rowEdgeDimensions.size(); p++) {
      IDimensionDefinition rowEdgeDimension=rowEdgeDimensions.get(p);
      String hierarchyName=rowEdgeDimension.getHierarchy().get(0).getName();
      if (hierarchyName.equals(filter.getTargetLevel().getHierarchy().getName())) {
        filterIndex=p;
        edgeTag=ICubeQueryDefinition.ROW_EDGE;
      }
      if (rowDrill.getTargetHierarchy().getName().equals(hierarchyName))       rowDrillIndex=p;
    }
  }
  if (columnEdgeDimensions != null && columnDrill != null) {
    for (int p=0; p < columnEdgeDimensions.size(); p++) {
      IDimensionDefinition columnEdgeDimension=columnEdgeDimensions.get(p);
      String hierarchyName=columnEdgeDimension.getHierarchy().get(0).getName();
      if (hierarchyName.equals(filter.getTargetLevel().getHierarchy().getName())) {
        filterIndex=p;
        edgeTag=ICubeQueryDefinition.COLUMN_EDGE;
      }
      if (columnDrill.getTargetHierarchy().getName().equals(hierarchyName))       columnDrillIndex=p;
    }
  }
  if (edgeTag == ICubeQueryDefinition.ROW_EDGE) {
    if (rowDrillIndex < filterIndex) {
      canAddFilter=false;
    }
 else     if (rowDrillIndex > filterIndex) {
      canAddFilter=true;
    }
 else {
      String filterTargetLevel=filter.getTargetLevel().getName();
      String drillTargetLevel=rowDrill.getTargetLevelName();
      List<ILevelDefinition> levelDefinition=filter.getTargetLevel().getHierarchy().getLevels();
      int drillLevelIndex=0;
      int filterLevelIndex=0;
      for (int j=0; j < levelDefinition.size(); j++) {
        ILevelDefinition level=levelDefinition.get(j);
        if (level.getName().equals(drillTargetLevel)) {
          drillLevelIndex=j;
        }
        if (level.getName().equals(filterTargetLevel)) {
          filterLevelIndex=j;
        }
      }
      if (drillLevelIndex >= filterLevelIndex)       canAddFilter=true;
    }
  }
 else   if (edgeTag == ICubeQueryDefinition.COLUMN_EDGE) {
    if (columnDrillIndex < filterIndex) {
      canAddFilter=false;
    }
 else     if (columnDrillIndex > filterIndex) {
      canAddFilter=true;
    }
 else {
      String filterTargetLevel=filter.getTargetLevel().getName();
      String drillTargetLevel=columnDrill.getTargetLevelName();
      List<ILevelDefinition> levelDefinition=filter.getTargetLevel().getHierarchy().getLevels();
      int drillLevelIndex=0;
      int filterLevelIndex=0;
      for (int j=0; j < levelDefinition.size(); j++) {
        ILevelDefinition level=levelDefinition.get(j);
        if (level.getName().equals(drillTargetLevel)) {
          drillLevelIndex=j;
        }
        if (level.getName().equals(filterTargetLevel)) {
          filterLevelIndex=j;
        }
      }
      if (drillLevelIndex >= filterLevelIndex)       canAddFilter=true;
    }
  }
  return canAddFilter;
}",0.9876244283023944
67874,"public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if ((type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) && context.getEngineTaskType() != IEngineTask.TASK_RENDER) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}","public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if ((type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) && (""String_Node_Str"".equalsIgnoreCase(context.getFormat()) || context.getEngineTaskType() != IEngineTask.TASK_RENDER)) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}",0.9746992948983824
67875,"/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    resultSetList=MetaDataUtil.getResultPropertyHandle(dataSetHandle);
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      uniqueColumnNameSet.add(resultSetColumn.getColumnName());
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,resultSetColumn.getColumnName()) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}","/** 
 * populate all output columns in viewer display. The output columns is retrieved from oda dataset handles's RESULT_SET_PROP and COMPUTED_COLUMNS_PROP.
 * @throws BirtException
 */
public static IResultMetaData retrieveResultMetaData(DataSetHandle dataSetHandle) throws BirtException {
  List resultSetList=null;
  boolean removeDuplicated=false;
  if (dataSetHandle instanceof OdaDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(OdaDataSetHandle.RESULT_SET_PROP);
    resultSetList=handle.getListValue();
  }
 else   if (dataSetHandle instanceof ScriptDataSetHandle) {
    PropertyHandle handle=dataSetHandle.getPropertyHandle(DataSetHandle.RESULT_SET_HINTS_PROP);
    resultSetList=handle.getListValue();
  }
 else {
    resultSetList=MetaDataUtil.getResultPropertyHandle(dataSetHandle);
    removeDuplicated=true;
  }
  List computedList=(List)dataSetHandle.getProperty(OdaDataSetHandle.COMPUTED_COLUMNS_PROP);
  List columnMeta=new ArrayList();
  ResultSetColumnDefinition columnDef;
  int count=0;
  if (resultSetList != null && !resultSetList.isEmpty()) {
    ResultSetColumn resultSetColumn;
    HashSet orgColumnNameSet=new HashSet();
    HashSet uniqueColumnNameSet=new HashSet();
    for (int n=0; n < resultSetList.size(); n++) {
      orgColumnNameSet.add(((ResultSetColumn)resultSetList.get(n)).getColumnName());
    }
    for (int i=0; i < resultSetList.size(); i++) {
      resultSetColumn=(ResultSetColumn)resultSetList.get(i);
      uniqueColumnNameSet.add(resultSetColumn.getColumnName());
      columnDef=new ResultSetColumnDefinition(resultSetColumn.getColumnName());
      columnDef.setDataTypeName(resultSetColumn.getDataType());
      columnDef.setDataType(DataAdapterUtil.adaptModelDataType(resultSetColumn.getDataType()));
      if (resultSetColumn.getPosition() != null)       columnDef.setColumnPosition(resultSetColumn.getPosition().intValue());
      if (resultSetColumn.getNativeDataType() != null)       columnDef.setNativeDataType(resultSetColumn.getNativeDataType().intValue());
      if (findColumnHint(dataSetHandle,resultSetColumn.getColumnName()) != null) {
        ColumnHintHandle columnHint=findColumnHint(dataSetHandle,resultSetColumn.getColumnName());
        columnDef.setAlias(columnHint.getAlias());
        columnDef.setLableName(columnHint.getDisplayName());
      }
      columnDef.setComputedColumn(false);
      columnMeta.add(columnDef);
    }
    count+=resultSetList.size();
    if (computedList != null) {
      for (int n=0; n < computedList.size(); n++) {
        orgColumnNameSet.add(((ComputedColumn)computedList.get(n)).getName());
      }
      ComputedColumn computedColumn;
      for (int i=0; i < computedList.size(); i++) {
        computedColumn=(ComputedColumn)computedList.get(i);
        String columnName=computedColumn.getName();
        if (removeDuplicated) {
          if (uniqueColumnNameSet.contains(columnName))           continue;
        }
        String uniqueColumnName=getUniqueName(orgColumnNameSet,uniqueColumnNameSet,columnName,i + count);
        uniqueColumnNameSet.add(uniqueColumnName);
        if (!uniqueColumnName.equals(columnName)) {
          updateComputedColumn(dataSetHandle,uniqueColumnName,columnName);
        }
        columnDef=new ResultSetColumnDefinition(uniqueColumnName);
        columnDef.setDataTypeName(computedColumn.getDataType());
        columnDef.setDataType(org.eclipse.birt.report.data.adapter.api.DataAdapterUtil.adaptModelDataType(computedColumn.getDataType()));
        if (findColumnHint(dataSetHandle,uniqueColumnName) != null) {
          ColumnHintHandle columnHint=findColumnHint(dataSetHandle,uniqueColumnName);
          columnDef.setAlias(columnHint.getAlias());
          columnDef.setLableName(columnHint.getDisplayName());
        }
        columnDef.setComputedColumn(true);
        columnMeta.add(columnDef);
      }
    }
    return new ResultMetaData2(columnMeta);
  }
  return null;
}",0.976822478311537
67876,"public Control createContents(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));
  addDataFetchSettingGroup(composite);
  Object handle=((DataSetEditor)getContainer()).getHandle();
  if (handle instanceof OdaDataSetHandle) {
    String extensionID=((OdaDataSetHandle)handle).getExtensionID();
    if (extensionID != null && extensionID.equalsIgnoreCase(STORED_PROCEDURE_EXTENSION_ID)) {
      addResultSetGroup(composite);
    }
  }
  return composite;
}","public Control createContents(Composite parent){
  Composite composite=new Composite(parent,SWT.NONE);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));
  Object handle=((DataSetEditor)getContainer()).getHandle();
  if (handle instanceof OdaDataSetHandle) {
    addDataFetchSettingGroup(composite);
    String extensionID=((OdaDataSetHandle)handle).getExtensionID();
    if (extensionID != null && extensionID.equalsIgnoreCase(STORED_PROCEDURE_EXTENSION_ID)) {
      addResultSetGroup(composite);
    }
  }
  return composite;
}",0.9405646359583952
67877,"public void testExtractionWithDistinct() throws Exception {
  dataExTask.selectResultSet(""String_Node_Str"");
  dataExTask.setDistinctValuesOnly(true);
  IExtractionResults results=dataExTask.extract();
  IDataIterator itr=results.nextResultIterator();
  HashSet set=new HashSet();
  while (itr.next()) {
    Object value=itr.getValue(0);
    if (set.contains(value)) {
      fail(""String_Node_Str"");
    }
 else {
      set.add(value);
    }
  }
}","public void testExtractionWithDistinct() throws Exception {
  dataExTask.selectResultSet(""String_Node_Str"");
  dataExTask.setDistinctValuesOnly(true);
  dataExTask.selectColumns(new String[]{""String_Node_Str""});
  IExtractionResults results=dataExTask.extract();
  IDataIterator itr=results.nextResultIterator();
  HashSet set=new HashSet();
  while (itr.next()) {
    Object value=itr.getValue(0);
    if (set.contains(value)) {
      fail(""String_Node_Str"");
    }
 else {
      set.add(value);
    }
  }
}",0.9361256544502616
67878,"public void addData(int col,SheetData data){
  int rowIndex=data.getRowIndex();
  columns.get(col).add(data);
  maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
  BookmarkDef bookmark=data.getBookmark();
  if (bookmark == null) {
    return;
  }
  bookmark.setColumnNo(col + 1);
  bookmark.setRowNo(rowIndex);
  bookmarks.add(bookmark);
}","public void addData(int col,SheetData data){
  if (col < getColumnCount()) {
    int rowIndex=data.getRowIndex();
    columns.get(col).add(data);
    maxRowIndex=maxRowIndex > rowIndex ? maxRowIndex : rowIndex;
    BookmarkDef bookmark=data.getBookmark();
    if (bookmark == null) {
      return;
    }
    bookmark.setColumnNo(col + 1);
    bookmark.setRowNo(rowIndex);
    bookmarks.add(bookmark);
  }
}",0.9047619047619048
67879,"/** 
 * @param index
 * @return
 */
public SheetData getColumnLastData(int index){
  ArrayList<SheetData> columnDatas=columns.get(index);
  if (!columnDatas.isEmpty())   return columnDatas.get(columnDatas.size() - 1);
  return null;
}","/** 
 * @param index
 * @return
 */
public SheetData getColumnLastData(int index){
  if (index < getColumnCount()) {
    ArrayList<SheetData> columnDatas=columns.get(index);
    if (!columnDatas.isEmpty())     return columnDatas.get(columnDatas.size() - 1);
  }
  return null;
}",0.9140625
67880,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (isDelete()) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (isDelete()) {
    return;
  }
  EditPart parent=getParent();
  while (parent != null) {
    if (parent instanceof RootEditPart) {
      break;
    }
    parent=parent.getParent();
  }
  if (parent == null) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.8968085106382979
67881,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (isDelete()) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (isDelete()) {
        return;
      }
      EditPart parent=getParent();
      while (parent != null) {
        if (parent instanceof RootEditPart) {
          break;
        }
        parent=parent.getParent();
      }
      if (parent == null) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9316189362945646
67882,"public boolean onBroughtToTop(IReportEditorPage prePage){
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  ModuleHandle newModel=getModel();
  if (newModel != null && model != null && model != newModel) {
    hookModelEventManager(newModel);
    markPageStale(IPageStaleType.NONE);
    SessionHandleAdapter.getInstance().resetReportDesign(model,newModel);
    unhookModelEventManager(model);
    model=newModel;
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    if (jsEditor instanceof JSEditor) {
      ((JSEditor)jsEditor).connectRoot(newModel);
    }
    IMediatorState state=SessionHandleAdapter.getInstance().getMediator(newModel).getCurrentState();
    ReportRequest request=new ReportRequest(state.getSource());
    List list=new ArrayList();
    list.add(newModel);
    request.setSelectionObject(list);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    previouPage=prePage;
    jsEditor.setFocus();
    return true;
  }
  jsEditor.setFocus();
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=new ArrayList(state.getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}","public boolean onBroughtToTop(IReportEditorPage prePage){
  if (prePage == this) {
    return true;
  }
  if (getEditorInput() != prePage.getEditorInput()) {
    setInput(prePage.getEditorInput());
  }
  if (getStaleType() == IPageStaleType.MODEL_RELOAD) {
    reloadEditorInput();
    doSave(null);
  }
  ModuleHandle newModel=getModel();
  if (newModel != null && model != null && model != newModel) {
    hookModelEventManager(newModel);
    markPageStale(IPageStaleType.NONE);
    SessionHandleAdapter.getInstance().resetReportDesign(model,newModel);
    unhookModelEventManager(model);
    model=newModel;
    SessionHandleAdapter.getInstance().setReportDesignHandle(newModel);
    if (jsEditor instanceof JSEditor) {
      ((JSEditor)jsEditor).connectRoot(newModel);
    }
    IMediatorState state=SessionHandleAdapter.getInstance().getMediator(newModel).getCurrentState();
    ReportRequest request=new ReportRequest(state.getSource());
    List list=new ArrayList();
    list.add(newModel);
    request.setSelectionObject(list);
    request.setType(ReportRequest.SELECTION);
    SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
    previouPage=prePage;
    jsEditor.setFocus();
    return true;
  }
  jsEditor.setFocus();
  previouPage=prePage;
  IMediatorState state=SessionHandleAdapter.getInstance().getMediator().getCurrentState();
  ReportRequest request=new ReportRequest(state.getSource());
  List list=new ArrayList(state.getSelectionObject());
  if (list.isEmpty()) {
    list.add(new Object());
  }
  request.setSelectionObject(list);
  request.setType(ReportRequest.SELECTION);
  SessionHandleAdapter.getInstance().getMediator().notifyRequest(request);
  return true;
}",0.9863824748371818
67883,"/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
}","/** 
 * This method is called upon plug-in activation.
 * @param context bundle context
 * @exception Exception
 */
public void start(BundleContext context) throws Exception {
  super.start(context);
  bundleContext=context;
  plugin.getPluginPreferences().setDefault(WebViewer.MASTER_PAGE_CONTENT,true);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXROW,DEFAULT_MAX_ROWS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBEROWLEVEL,DEFAULT_MAX_CUBEROWLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXCUBECOLUMNLEVEL,DEFAULT_MAX_CUBECOLUMNLEVELS);
  plugin.getPluginPreferences().setDefault(WebViewer.PREVIEW_MAXINMEMORYCUBESIZE,DEFAULT_MAX_IN_MEMORY_CUBE_SIZE);
  plugin.getPluginPreferences().setDefault(WebViewer.USER_LOCALE,ULocale.getDefault().getDisplayName());
  plugin.getPluginPreferences().setDefault(WebViewer.USER_TIME_ZONE,TimeZone.getDefault().getID());
  plugin.getPluginPreferences().setDefault(WebViewer.BIDI_ORIENTATION,WebViewer.BIDI_ORIENTATION_AUTO);
  if (plugin.getStateLocation() != null)   System.setProperty(BIRT_VIEWER_WORKING_PATH,plugin.getStateLocation().toOSString());
  String rootPath=getFilePath(""String_Node_Str"");
  if (rootPath != null)   System.setProperty(BIRT_VIEWER_ROOT_PATH,rootPath);
  System.setProperty(BIRT_IS_DESIGNER,""String_Node_Str"");
  IWebAppInfo dummy=WebViewer.getCurrentWebApp();
}",0.9817784256559768
67884,"private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition))   return CubeQueryExecutor.DIMENSION_FILTER;
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null)   return CubeQueryExecutor.DIMENSION_FILTER;
  Set<DimLevel> refDimLevels=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
  if (refDimLevels.size() > 0)   return CubeQueryExecutor.FACTTABLE_FILTER;
  return CubeQueryExecutor.AGGR_MEASURE_FILTER;
}","private int getFilterType(IFilterDefinition filter,Set<DimLevel> dimLevelInCubeQuery) throws DataException {
  if (!(filter instanceof ICubeFilterDefinition)) {
    if (filter.getExpression() instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> exprs=((ICollectionConditionalExpression)(filter.getExpression())).getExpr();
      Set dimensionSet=new HashSet();
      Iterator<IScriptExpression> exprsIterator=exprs.iterator();
      while (exprsIterator.hasNext()) {
        dimensionSet.add(OlapExpressionUtil.getTargetDimLevel(exprsIterator.next().getText()).getDimensionName());
      }
      if (dimensionSet.size() == 1)       return CubeQueryExecutor.DIMENSION_FILTER;
 else       return CubeQueryExecutor.FACTTABLE_FILTER;
    }
    return CubeQueryExecutor.DIMENSION_FILTER;
  }
  ICubeFilterDefinition cubeFilter=(ICubeFilterDefinition)filter;
  if (cubeFilter.getTargetLevel() != null)   return CubeQueryExecutor.DIMENSION_FILTER;
  Set<DimLevel> refDimLevels=OlapExpressionCompiler.getReferencedDimLevel(filter.getExpression(),this.defn.getBindings());
  if (refDimLevels.size() > 0)   return CubeQueryExecutor.FACTTABLE_FILTER;
  return CubeQueryExecutor.AGGR_MEASURE_FILTER;
}",0.6641095890410958
67885,"/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx)));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues));
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2});
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se.getHandle() == null) {
            se.setHandle(evalExpr(se,cx,source,lineNo));
          }
          targetObj.add(se.getHandle());
        }
        if (compare(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (jsExpr.isConstant() && jsExpr.getConstantValue() != null) {
        result=jsExpr.getConstantValue();
      }
 else {
        if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
        if (jsExpr.isConstant()) {
          jsExpr.setConstantValue(result);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * Evaluates a IJSExpression or IConditionalExpression
 * @param expr
 * @param cx
 * @param scope
 * @param source
 * @param lineNo
 * @return 
 * @throws BirtException 
 */
public static Object evalExpr(IBaseExpression expr,ScriptContext cx,String source,int lineNo) throws DataException {
  try {
    if (logger.isLoggable(Level.FINER))     logger.entering(ScriptEvalUtil.class.getName(),""String_Node_Str"",""String_Node_Str"" + LogUtil.toString(expr) + ""String_Node_Str""+ source+ ""String_Node_Str""+ lineNo);
    Object result;
    if (expr == null) {
      result=null;
    }
 else     if (expr instanceof IConditionalExpression) {
      Object handle=expr.getHandle();
      if (handle instanceof NEvaluator) {
        result=Boolean.valueOf(((NEvaluator)handle).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx)));
      }
 else {
        ConditionalExpression conditionalExpr=(ConditionalExpression)expr;
        Object expression=evalExpr(conditionalExpr.getExpression(),cx,source,lineNo);
        if (conditionalExpr.getOperand1() instanceof IExpressionCollection) {
          IExpressionCollection combinedExpr=(IExpressionCollection)((IConditionalExpression)expr).getOperand1();
          Object[] exprs=combinedExpr.getExpressions().toArray();
          Object[] opValues=new Object[exprs.length];
          for (int i=0; i < opValues.length; i++) {
            opValues[i]=evalExpr((IBaseExpression)exprs[i],cx,source,lineNo);
          }
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),MiscUtil.flatternMultipleValues(opValues));
        }
 else {
          Object Op1=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand1()),cx,source,lineNo);
          Object Op2=evalExpr(MiscUtil.constructValidScriptExpression((IScriptExpression)conditionalExpr.getOperand2()),cx,source,lineNo);
          result=evalConditionalExpr(expression,conditionalExpr.getOperator(),new Object[]{Op1,Op2});
        }
      }
    }
 else     if (expr instanceof ICollectionConditionalExpression) {
      Collection<IScriptExpression> testExpr=((ICollectionConditionalExpression)expr).getExpr();
      Collection<Collection<IScriptExpression>> operand=((ICollectionConditionalExpression)expr).getOperand();
      List<Object> testObj=new ArrayList<Object>();
      boolean in=false;
      for (      IScriptExpression se : testExpr) {
        testObj.add(evalExpr(se,cx,source,lineNo));
      }
      for (      Collection<IScriptExpression> op : operand) {
        List<Object> targetObj=new ArrayList<Object>();
        for (        IScriptExpression se : op) {
          if (se == null) {
            targetObj.add(null);
          }
 else {
            if (se.getHandle() == null) {
              se.setHandle(evalExpr(se,cx,source,lineNo));
            }
            targetObj.add(se.getHandle());
          }
        }
        if (compareIgnoreNull(testObj,targetObj) == 0) {
          in=Boolean.TRUE;
          break;
        }
      }
      result=(((ICollectionConditionalExpression)expr).getOperator() == ICollectionConditionalExpression.OP_IN) ? in : (!in);
    }
 else {
      IScriptExpression jsExpr=(IScriptExpression)expr;
      if (jsExpr.isConstant() && jsExpr.getConstantValue() != null) {
        result=jsExpr.getConstantValue();
      }
 else {
        if (jsExpr.getText() != null && jsExpr.getHandle() != null) {
          if (jsExpr.getHandle() instanceof ICompiledScript) {
            result=cx.evaluate((ICompiledScript)jsExpr.getHandle());
          }
 else {
            result=((CompiledExpression)jsExpr.getHandle()).evaluate(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx));
          }
        }
 else {
          result=evaluateJSAsExpr(cx,((IDataScriptEngine)cx.getScriptEngine(IDataScriptEngine.ENGINE_NAME)).getJSScope(cx),jsExpr.getText(),source,lineNo);
        }
        if (jsExpr.isConstant()) {
          jsExpr.setConstantValue(result);
        }
      }
    }
    if (logger.isLoggable(Level.FINER))     logger.exiting(ScriptEvalUtil.class.getName(),""String_Node_Str"",result);
    return result;
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9680712166172106
67886,"/** 
 * Creates the textual query editor
 * @param parent
 */
private Control createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL | SWT.LEFT_TO_RIGHT);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  SourceViewerConfiguration svc=new SQLSourceViewerConfiguration(dataSetDesign.getDataSourceDesign(),timeOutLimit * 1000,enableCodeAssist);
  viewer.configure(svc);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.QUOTE_STRING,SQLPartitionScanner.COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=SQLUtility.getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=500;
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  return composite;
}","/** 
 * Creates the textual query editor
 * @param parent
 */
private Control createTextualQueryComposite(Composite parent){
  Composite composite=new Composite(parent,SWT.FILL | SWT.LEFT_TO_RIGHT);
  GridLayout layout=new GridLayout();
  layout.numColumns=1;
  composite.setLayout(layout);
  composite.setLayoutData(new GridData(GridData.FILL_BOTH));
  Label queryTextLabel=new Label(composite,SWT.NONE);
  queryTextLabel.setText(JdbcPlugin.getResourceString(""String_Node_Str""));
  CompositeRuler ruler=new CompositeRuler();
  LineNumberRulerColumn lineNumbers=new LineNumberRulerColumn();
  ruler.addDecorator(0,lineNumbers);
  viewer=new SourceViewer(composite,ruler,SWT.H_SCROLL | SWT.V_SCROLL);
  SourceViewerConfiguration svc=new SQLSourceViewerConfiguration(dataSetDesign.getDataSourceDesign(),timeOutLimit * 1000,enableCodeAssist);
  viewer.configure(svc);
  doc=new Document(getQueryText());
  FastPartitioner partitioner=new FastPartitioner(new SQLPartitionScanner(),new String[]{SQLPartitionScanner.QUOTE_STRING,SQLPartitionScanner.COMMENT,IDocument.DEFAULT_CONTENT_TYPE});
  partitioner.connect(doc);
  doc.setDocumentPartitioner(partitioner);
  viewer.setDocument(doc);
  viewer.getTextWidget().setFont(JFaceResources.getTextFont());
  viewer.getTextWidget().addBidiSegmentListener(new BidiSegmentListener(){
    public void lineGetSegments(    BidiSegmentEvent event){
      event.segments=SQLUtility.getBidiLineSegments(event.lineText);
    }
  }
);
  attachMenus(viewer);
  GridData data=new GridData(GridData.FILL_BOTH);
  data.widthHint=500;
  viewer.getControl().setLayoutData(data);
  addDropSupportToViewer();
  viewer.getTextWidget().addKeyListener(new KeyListener(){
    public void keyPressed(    KeyEvent e){
      if (isUndoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.UNDO);
      }
 else       if (isRedoKeyPress(e)) {
        viewer.doOperation(ITextOperationTarget.REDO);
      }
    }
    private boolean isUndoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'z') || (e.keyCode == 'Z'));
    }
    private boolean isRedoKeyPress(    KeyEvent e){
      return ((e.stateMask & SWT.CONTROL) > 0) && ((e.keyCode == 'y') || (e.keyCode == 'Y'));
    }
    public void keyReleased(    KeyEvent e){
    }
  }
);
  return composite;
}",0.9713651498335184
67887,"/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}","/** 
 * Check whether filter in query contains aggregation. If aggregation is TOPN,BOTTOMN,TOPPERCENT,BOTTMEPERCENT return true. else return false;
 * @return
 * @throws DataException 
 */
public static boolean isValidExpressionInQueryFilter(IBaseExpression expression,ScriptContext context) throws DataException {
  if (expression instanceof IScriptExpression) {
    String text=((IScriptExpression)expression).getText();
    if (text.trim().length() == 0)     return true;
    AggregateRegistry aggrReg=new AggregateRegistry(){
      public int register(      AggregateExpression aggregationExpr){
        return -1;
      }
    }
;
    ExpressionCompiler expressionCompiler=new ExpressionCompiler();
    CompiledExpression expr=expressionCompiler.compile(text,aggrReg,context);
    return flattenFilterExpression(expr);
  }
 else   if (expression instanceof IConditionalExpression) {
    IScriptExpression expr=((IConditionalExpression)expression).getExpression();
    IBaseExpression oprand1=((IConditionalExpression)expression).getOperand1();
    IBaseExpression oprand2=((IConditionalExpression)expression).getOperand2();
    return isValidExpressionInQueryFilter(expr,context) && isValidExpressionInQueryFilter(oprand1,context) && isValidExpressionInQueryFilter(oprand2,context);
  }
  return true;
}",0.9797033567525372
67888,"/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Map bindingNameType=new HashMap();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.streamManager.getVersion() >= VersionManager.VERSION_2_2_1_3 && this.queryDefn instanceof QueryDefinition && ((QueryDefinition)this.queryDefn).getQueryResultsID() == null && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (streamManager.getVersion() >= VersionManager.VERSION_2_5_1_0) {
      if (binding.getAggrFunction() != null)       continue;
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null || ((IQueryDefinition)this.queryDefn).isSummaryQuery())     bindingNamesToSave.add(binding.getBindingName());
    bindingNameType.put(binding.getBindingName(),new Integer(binding.getDataType()));
  }
  if (this.context.getMode() == DataEngineContext.MODE_UPDATE) {
    bindingNamesToSave.add(ExprMetaUtil.POS_NAME);
    bindingNameType.put(ExprMetaUtil.POS_NAME,DataType.INTEGER_TYPE);
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName,bindingNameType,this.streamManager.getVersion());
}","/** 
 * @throws DataException
 */
private void initSaveRowUtil() throws DataException {
  rowExprsOs=streamManager.getOutStream(DataEngineContext.EXPR_VALUE_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  rowLenOs=streamManager.getOutStream(DataEngineContext.EXPR_ROWLEN_STREAM,StreamManager.ROOT_STREAM,StreamManager.SELF_SCOPE);
  Map bindingNameColumnName=new HashMap();
  Set bindingNamesToSave=new HashSet();
  Map bindingNameType=new HashMap();
  Iterator it=this.queryDefn.getBindings().keySet().iterator();
  while (it.hasNext()) {
    String key=it.next().toString();
    IBinding binding=(IBinding)this.queryDefn.getBindings().get(key);
    if (this.streamManager.getVersion() >= VersionManager.VERSION_2_2_1_3 && this.queryDefn instanceof QueryDefinition && this.context.getMode() == DataEngineContext.MODE_GENERATION && binding.getAggregatOns().size() == 0 && binding.getAggrFunction() == null) {
      IBaseExpression expr=binding.getExpression();
      if (expr instanceof IScriptExpression) {
        String expression=((IScriptExpression)expr).getText();
        String dataSetColumnName=this.getDataSetColumnName(expression);
        if (dataSetColumnName != null) {
          bindingNameColumnName.put(binding.getBindingName(),dataSetColumnName);
        }
      }
    }
    if (streamManager.getVersion() >= VersionManager.VERSION_2_5_1_0) {
      if (binding.getAggrFunction() != null)       continue;
    }
    if (bindingNameColumnName.get(binding.getBindingName()) == null || ((IQueryDefinition)this.queryDefn).isSummaryQuery())     bindingNamesToSave.add(binding.getBindingName());
    bindingNameType.put(binding.getBindingName(),new Integer(binding.getDataType()));
  }
  if (this.context.getMode() == DataEngineContext.MODE_UPDATE) {
    bindingNamesToSave.add(ExprMetaUtil.POS_NAME);
    bindingNameType.put(ExprMetaUtil.POS_NAME,DataType.INTEGER_TYPE);
  }
  this.rowSaveUtil=new RowSaveUtil(rowCount,rowExprsOs,rowLenOs,bindingNamesToSave,bindingNameColumnName,bindingNameType,this.streamManager.getVersion());
}",0.97277588721439
67889,"/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    vm.setVersion(VersionManager.getLatestVersion());
    this.version=VersionManager.getLatestVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}","/** 
 * @param context
 * @throws DataException 
 */
public StreamManager(DataEngineContext context,QueryResultInfo queryResultInfo) throws DataException {
  this.context=context;
  this.rootQueryResultID=queryResultInfo.getRootQueryResultID();
  this.parentQueryResultID=queryResultInfo.getParentQueryResultID();
  this.selfQueryResultID=queryResultInfo.getSelfQueryResultID();
  this.subQueryName=queryResultInfo.getSubQueryName();
  this.subQueryID=subQueryName == null ? null : QueryResultIDUtil.buildSubQueryID(subQueryName,queryResultInfo.getIndex());
  this.cachedStreamManagers=new HashMap();
  this.metaManagers=new HashMap();
  this.dataMetaManagers=new HashMap();
  VersionManager vm=new VersionManager(context);
  if (context.getMode() == DataEngineContext.MODE_GENERATION) {
    vm.setVersion(VersionManager.getLatestVersion());
    this.version=VersionManager.getLatestVersion();
  }
 else   if (context.getMode() == DataEngineContext.MODE_UPDATE && this.rootQueryResultID == null) {
    if (this.context.hasInStream(null,null,DataEngineContext.VERSION_INFO_STREAM) == false) {
      this.version=VersionManager.getLatestVersion();
    }
 else     this.version=vm.getVersion();
  }
 else {
    this.version=vm.getVersion();
  }
}",0.8638025594149908
67890,"/** 
 * @throws IOException
 */
public void close() throws IOException {
}","/** 
 * @throws IOException
 */
public void close() throws IOException {
  diskIndex.close();
}",0.8757396449704142
67891,"/** 
 * @param factTableName
 * @param stopSign
 * @return
 * @throws IOException
 */
public FactTable load(String factTableName,StopSign stopSign) throws IOException {
  int segmentNumber=0;
  IDocumentObject documentObject=documentManager.openDocumentObject(NamingUtil.getFactTableName(factTableName));
  DimensionInfo[] dimensionInfo=new DimensionInfo[documentObject.readInt()];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionInfo[i]=new DimensionInfo();
    dimensionInfo[i].dimensionName=documentObject.readString();
    dimensionInfo[i].dimensionLength=documentObject.readInt();
  }
  MeasureInfo[] measureInfo=new MeasureInfo[documentObject.readInt()];
  for (int i=0; i < measureInfo.length; i++) {
    measureInfo[i]=new MeasureInfo(documentObject.readString(),documentObject.readInt());
  }
  segmentNumber=documentObject.readInt();
  int[] dimensionMemberCount=new int[dimensionInfo.length];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionMemberCount[i]=dimensionInfo[i].dimensionLength;
  }
  DimensionDivision[] subDimensions=calculateDimensionDivision(dimensionMemberCount,segmentNumber);
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentNumber,subDimensions);
}","/** 
 * @param factTableName
 * @param stopSign
 * @return
 * @throws IOException
 */
public FactTable load(String factTableName,StopSign stopSign) throws IOException {
  int segmentNumber=0;
  IDocumentObject documentObject=documentManager.openDocumentObject(NamingUtil.getFactTableName(factTableName));
  DimensionInfo[] dimensionInfo=new DimensionInfo[documentObject.readInt()];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionInfo[i]=new DimensionInfo();
    dimensionInfo[i].dimensionName=documentObject.readString();
    dimensionInfo[i].dimensionLength=documentObject.readInt();
  }
  MeasureInfo[] measureInfo=new MeasureInfo[documentObject.readInt()];
  for (int i=0; i < measureInfo.length; i++) {
    measureInfo[i]=new MeasureInfo(documentObject.readString(),documentObject.readInt());
  }
  segmentNumber=documentObject.readInt();
  int[] dimensionMemberCount=new int[dimensionInfo.length];
  for (int i=0; i < dimensionInfo.length; i++) {
    dimensionMemberCount[i]=dimensionInfo[i].dimensionLength;
  }
  DimensionDivision[] subDimensions=calculateDimensionDivision(dimensionMemberCount,segmentNumber);
  documentObject.close();
  return new FactTable(factTableName,documentManager,dimensionInfo,measureInfo,segmentNumber,subDimensions);
}",0.9896496815286624
67892,"/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  while (true) {
    if (stopSign.isStopped()) {
      return false;
    }
    if (!traversalor.next()) {
      return false;
    }
    currentSubDim=traversalor.getIntArray();
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex());
    if (!factTable.getDocumentManager().exist(FTSUDocName)) {
      continue;
    }
    currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocName);
    for (int i=0; i < dimensionIndex.length; i++) {
      if (dimensionIndex[i] != -1) {
        SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
        selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
        for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
          selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(selectedSubDimension.start + j)).intValue();
        }
      }
    }
    break;
  }
  return true;
}","/** 
 * Moves down one segment from its current segment of the iterator.
 * @return
 * @throws IOException
 */
private boolean nextSegment() throws IOException {
  while (true) {
    if (stopSign.isStopped()) {
      return false;
    }
    if (!traversalor.next()) {
      return false;
    }
    currentSubDim=traversalor.getIntArray();
    String FTSUDocName=FTSUDocumentObjectNamingUtil.getDocumentObjectName(NamingUtil.getFactTableName(factTable.getName()),getSubDimensionIndex());
    if (!factTable.getDocumentManager().exist(FTSUDocName)) {
      continue;
    }
    if (currentSegment != null)     currentSegment.close();
    currentSegment=factTable.getDocumentManager().openDocumentObject(FTSUDocName);
    for (int i=0; i < dimensionIndex.length; i++) {
      if (dimensionIndex[i] != -1) {
        SelectedSubDimension selectedSubDimension=((SelectedSubDimension)selectedSubDim[i].get(currentSubDim[i]));
        selectedPosOfCurSegment[i]=new int[selectedSubDimension.end - selectedSubDimension.start + 1];
        for (int j=0; j < selectedSubDimension.end - selectedSubDimension.start + 1; j++) {
          selectedPosOfCurSegment[i][j]=((Integer)selectedPos[dimensionIndex[i]].get(selectedSubDimension.start + j)).intValue();
        }
      }
    }
    break;
  }
  return true;
}",0.9763406940063092
67893,"/** 
 * @param iIndex
 * @return
 */
private final Fill getPaletteColor(int iIndex){
  final Fill fiClone=FillUtil.getPaletteFill(pa.getEntries(),iIndex);
  pie.updateTranslucency(fiClone,ps);
  return fiClone;
}","/** 
 * @param iIndex
 * @return
 */
private final Fill getPaletteColor(int iIndex,DataPointHints dph){
  Fill fiClone=FillUtil.getPaletteFill(pa.getEntries(),iIndex);
  pie.updateTranslucency(fiClone,ps);
  if (dph != null && dph.getOrthogonalValue() instanceof Double) {
    fiClone=FillUtil.convertFill(fiClone,((Double)dph.getOrthogonalValue()).doubleValue(),null);
  }
  return fiClone;
}",0.6347107438016529
67894,"/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
    }
    if (tooltip != null) {
      tooltip=codeLink(tooltip);
    }
    println(""String_Node_Str"" + hyperlink + ""String_Node_Str""+ tooltip+ ""String_Node_Str""+ hyperlink+ ""String_Node_Str"");
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}","/** 
 * Draws a chunk of text on the PPT.
 * @param text the textArea to be drawn.
 * @param textX the X position of the textArea relative to current page.
 * @param textY the Y position of the textArea relative to current page.
 * @param contentByte the content byte to draw the text.
 * @param contentByteHeight the height of the content byte.
 */
public void drawText(String text,float textX,float textY,float width,float height,FontInfo fontInfo,Color color,boolean rtl,HyperlinkDef link){
  BaseFont baseFont=fontInfo.getBaseFont();
  String fontName=getFontName(baseFont);
  println(""String_Node_Str"" + (++shapeCount) + ""String_Node_Str"");
  println(""String_Node_Str"" + textX + ""String_Node_Str""+ textY+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"");
  println(""String_Node_Str"" + shapeCount + ""String_Node_Str"");
  println(""String_Node_Str"" + 0 + ""String_Node_Str""+ ""String_Node_Str""+ fontName+ ""String_Node_Str""+ fontInfo.getFontSize()+ ""String_Node_Str""+ getColorString(color)+ ""String_Node_Str""+ buildI18nAttributes(text,rtl)+ ""String_Node_Str"");
  boolean isItalic=fontInfo != null && (fontInfo.getFontStyle() & Font.ITALIC) != 0;
  boolean isBold=fontInfo != null && (fontInfo.getFontStyle() & Font.BOLD) != 0;
  if (isItalic) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (link != null) {
    String hyperlink=link.getLink();
    String tooltip=link.getTooltip();
    if (hyperlink != null) {
      hyperlink=codeLink(hyperlink);
      print(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
      if (tooltip != null) {
        tooltip=codeLink(tooltip);
        print(""String_Node_Str"" + tooltip + ""String_Node_Str"");
      }
      println(""String_Node_Str"" + hyperlink + ""String_Node_Str"");
    }
  }
  print(getEscapedStr(text));
  if (link != null) {
    print(""String_Node_Str"");
  }
  if (isBold) {
    print(""String_Node_Str"");
  }
  if (isItalic) {
    print(""String_Node_Str"");
  }
  println(""String_Node_Str"");
  println(""String_Node_Str"");
}",0.9516746411483252
67895,"public Report getReportIR(ReportDesignHandle designHandle){
  try {
    InputStream stream=archive.getStream(DESIGN_IR_STREAM);
    EngineIRReader reader=new EngineIRReader();
    Report reportIR=reader.read(stream);
    reportIR.setVersion(getVersion());
    reader.link(reportIR,designHandle);
    return reportIR;
  }
 catch (  IOException ioex) {
    logger.log(Level.FINE,""String_Node_Str"",ioex);
  }
  return null;
}","public Report getReportIR(ReportDesignHandle designHandle){
  InputStream stream=null;
  try {
    stream=archive.getStream(DESIGN_IR_STREAM);
    EngineIRReader reader=new EngineIRReader();
    Report reportIR=reader.read(stream);
    reportIR.setVersion(getVersion());
    reader.link(reportIR,designHandle);
    return reportIR;
  }
 catch (  IOException ioex) {
    logger.log(Level.FINE,""String_Node_Str"",ioex);
  }
 finally {
    if (stream != null) {
      try {
        stream.close();
      }
 catch (      IOException ignored) {
      }
      stream=null;
    }
  }
  return null;
}",0.7790927021696252
67896,"public void update(){
  FormEditor editor=UIUtil.getActiveReportEditor();
  setEnabled(editor != null);
  if (editor != null) {
    setChecked(editor.getActivePageInstance().getId().equals(pageId));
  }
}","public void update(){
  FormEditor editor=UIUtil.getActiveReportEditor();
  setEnabled(editor != null);
  if (editor != null && editor.getActivePageInstance() != null && editor.getActivePageInstance().getId() != null) {
    setChecked(editor.getActivePageInstance().getId().equals(pageId));
  }
}",0.816
67897,"public boolean isEnabled(){
  if (getSelectedObjects().size() != 1) {
    return false;
  }
  Object obj=super.getSelectedObjects().getFirstElement();
  if (obj instanceof EmbeddedImageHandle) {
    return true;
  }
  if (obj instanceof ReportElementHandle) {
    if (obj instanceof GroupHandle) {
      return !((GroupHandle)obj).getPropertyHandle(IGroupElementModel.GROUP_NAME_PROP).isReadOnly();
    }
    return ((ReportElementHandle)obj).getDefn().getNameOption() != MetaDataConstants.NO_NAME && ((ReportElementHandle)obj).canEdit();
  }
  return false;
}","public boolean isEnabled(){
  if (getSelectedObjects().size() != 1) {
    return false;
  }
  Object obj=super.getSelectedObjects().getFirstElement();
  if (obj instanceof EmbeddedImageHandle) {
    return true;
  }
  if (obj instanceof ReportElementHandle) {
    if (obj instanceof GroupHandle) {
      return !((GroupHandle)obj).getPropertyHandle(IGroupElementModel.GROUP_NAME_PROP).isReadOnly();
    }
    return ((ReportElementHandle)obj).getDefn().getNameOption() != MetaDataConstants.NO_NAME && ((ReportElementHandle)obj).canEdit();
  }
  if (obj instanceof ContentElementHandle) {
    return ((ContentElementHandle)obj).getDefn().getNameOption() != MetaDataConstants.NO_NAME && ((ContentElementHandle)obj).canEdit();
  }
  return false;
}",0.8398467432950192
67898,"/** 
 * This method renders the 'shadow' at an offset from the text 'rotated rectangle' subsequently rendered.
 * @param ipr
 * @param iLabelPosition The position of the label w.r.t. the location specified by 'lo'
 * @param lo The location (specified as a 2d point) where the text is to be rendered
 * @param la The chart model structure containing the encapsulated text (and attributes) to be rendered
 */
public final void renderShadowAtLocation(IPrimitiveRenderer ipr,int iLabelPosition,Location lo,Label la) throws ChartException {
  if (!ChartUtil.isShadowDefined(la)) {
    return;
  }
  final ColorDefinition cdShadow=la.getShadowColor();
  if (cdShadow == null) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    showTopValue(ipr,lo,la,false);
  break;
case BELOW:
showBottomValue(ipr,lo,la,false);
break;
case LEFT:
showLeftValue(ipr,lo,la,false);
break;
case RIGHT:
showRightValue(ipr,lo,la,false);
break;
}
}","/** 
 * This method renders the 'shadow' at an offset from the text 'rotated rectangle' subsequently rendered.
 * @param ipr
 * @param iLabelPosition The position of the label w.r.t. the location specified by 'lo'
 * @param lo The location (specified as a 2d point) where the text is to be rendered
 * @param la The chart model structure containing the encapsulated text (and attributes) to be rendered
 */
@Override public final void renderShadowAtLocation(IPrimitiveRenderer ipr,int iLabelPosition,Location lo,Label la) throws ChartException {
  if (!ChartUtil.isShadowDefined(la)) {
    return;
  }
  final ColorDefinition cdShadow=la.getShadowColor();
  if (cdShadow == null) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    showTopValue(ipr,lo,la,false);
  break;
case BELOW:
showBottomValue(ipr,lo,la,false);
break;
case LEFT:
showLeftValue(ipr,lo,la,false);
break;
case RIGHT:
showRightValue(ipr,lo,la,false);
break;
}
}",0.9953874538745388
67899,"/** 
 * Use this optimized routine for rendering horizontal ONLY text
 * @param gc
 * @param la
 * @param lo
 */
private final void renderHorizontalText(IChartComputation cComp,GC gc,Label la,double dX,double dY){
  final FontDefinition fd=la.getCaption().getFont();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dFH=itm.getFullHeight();
  double dXOffset=0;
  double dW=0;
  final Insets ins=goFactory.scaleInsets(la.getInsets(),_sxs.getDpiResolution() / 72d);
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  final Rectangle r;
  Object tr=null;
  Object rtr=null;
  Region previousClipping=null;
  if (R31Enhance.isR31Available()) {
    r=new Rectangle(0,0,(int)dFW,(int)dFH);
    tr=R31Enhance.newTransform(getDevice());
    rtr=R31Enhance.newTransform(getDevice());
    if (la.getCaption().getFont().getRotation() != 0) {
      float rotate=(float)la.getCaption().getFont().getRotation();
      double dAngleInRadians=((-rotate * Math.PI) / 180.0);
      double dSineTheta=Math.sin(dAngleInRadians);
      float tTx=(float)(dX - dFW / 2);
      float tTy=(float)(dY - dFH / 2);
      if (rotate > 0)       tTy+=dFW * Math.abs(dSineTheta);
 else       tTx+=dFH * Math.abs(dSineTheta);
      R31Enhance.translate(gc,tr,(float)(dFW / 2),(float)(dFH / 2));
      R31Enhance.translate(gc,tr,tTx,tTy);
      R31Enhance.rotate(gc,tr,-rotate);
      R31Enhance.rotate(gc,rtr,rotate);
      R31Enhance.translate(gc,rtr,-tTx,-tTy);
      R31Enhance.translate(gc,rtr,(float)(-dFW / 2),(float)(-dFH / 2));
    }
 else {
      R31Enhance.translate(gc,tr,(float)dX,(float)dY);
      R31Enhance.translate(gc,rtr,(float)-dX,(float)-dY);
    }
    previousClipping=new Region();
    gc.getClipping(previousClipping);
    R31Enhance.setTransform(gc,tr);
  }
 else {
    r=new Rectangle((int)dX,(int)dY,(int)dFW,(int)dFH);
  }
  boolean bFullyTransparent=true;
  if (la.getBackground() != null) {
    bFullyTransparent=(((ColorDefinition)la.getBackground()).getTransparency() == 0);
    R31Enhance.setAlpha(gc,255);
  }
  if (!bFullyTransparent) {
    final Color clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
    final Color clrPreviousBackground=gc.getBackground();
    if (((ColorDefinition)la.getBackground()).isSetTransparency()) {
      R31Enhance.setAlpha(gc,(ColorDefinition)la.getBackground());
    }
    gc.setBackground(clrBackground);
    gc.fillRectangle(r);
    clrBackground.dispose();
    gc.setBackground(clrPreviousBackground);
  }
  gc.setForeground(clrText);
  R31Enhance.setAlpha(gc,la.getCaption().getColor());
  final Font f=(Font)_sxs.createFont(fd);
  gc.setFont(f);
  if (fd.isUnderline() || fd.isStrikethrough()) {
    int lineWidth=(int)(fd.getSize() / 12);
    gc.setLineWidth(lineWidth);
  }
  if (R31Enhance.isR31Available()) {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dXOffset + ins.getLeft()),(int)(dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 1) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 0.5) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
 else {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 1) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 0.5) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
  R31Enhance.setTransform(gc,rtr);
  R31Enhance.setTransform(gc,null);
  if (previousClipping != null) {
    gc.setClipping(previousClipping);
    previousClipping.dispose();
  }
  R31Enhance.disposeTransform(rtr);
  R31Enhance.disposeTransform(tr);
  f.dispose();
  clrText.dispose();
  cComp.recycleTextMetrics(itm);
}","/** 
 * Use this optimized routine for rendering horizontal ONLY text
 * @param gc
 * @param la
 * @param lo
 */
private final void renderHorizontalText(IChartComputation cComp,GC gc,Label la,double dX,double dY){
  final FontDefinition fd=la.getCaption().getFont();
  final Color clrText=(Color)_sxs.getColor(la.getCaption().getColor());
  final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
  final double dFW=itm.getFullWidth();
  final double dH=itm.getHeight();
  final double dFH=itm.getFullHeight();
  double dXOffset=0;
  double dW=0;
  final Insets ins=goFactory.scaleInsets(la.getInsets(),_sxs.getDpiResolution() / 72d);
  final HorizontalAlignment ha=la.getCaption().getFont().getAlignment().getHorizontalAlignment();
  final boolean bRightAligned=ha.getValue() == HorizontalAlignment.RIGHT;
  final boolean bCenterAligned=ha.getValue() == HorizontalAlignment.CENTER;
  final Rectangle r;
  Transform tr=null;
  Transform trOld=new Transform(getDevice());
  gc.getTransform(trOld);
  Region previousClipping=null;
  if (R31Enhance.isR31Available()) {
    r=new Rectangle(0,0,(int)dFW,(int)dFH);
    tr=new Transform(getDevice());
    gc.getTransform(tr);
    if (la.getCaption().getFont().getRotation() != 0) {
      float rotate=(float)la.getCaption().getFont().getRotation();
      double dAngleInRadians=((-rotate * Math.PI) / 180.0);
      double dSineTheta=Math.sin(dAngleInRadians);
      float tTx=(float)(dX - dFW / 2);
      float tTy=(float)(dY - dFH / 2);
      if (rotate > 0)       tTy+=dFW * Math.abs(dSineTheta);
 else       tTx+=dFH * Math.abs(dSineTheta);
      tr.translate((float)(dFW / 2),(float)(dFH / 2));
      tr.translate(tTx,tTy);
      tr.rotate(-rotate);
    }
 else {
      R31Enhance.translate(gc,tr,(float)dX,(float)dY);
    }
    previousClipping=new Region();
    gc.getClipping(previousClipping);
    R31Enhance.setTransform(gc,tr);
  }
 else {
    r=new Rectangle((int)dX,(int)dY,(int)dFW,(int)dFH);
  }
  boolean bFullyTransparent=true;
  if (la.getBackground() != null) {
    bFullyTransparent=(((ColorDefinition)la.getBackground()).getTransparency() == 0);
    R31Enhance.setAlpha(gc,255);
  }
  if (!bFullyTransparent) {
    final Color clrBackground=(Color)_sxs.getColor((ColorDefinition)la.getBackground());
    final Color clrPreviousBackground=gc.getBackground();
    if (((ColorDefinition)la.getBackground()).isSetTransparency()) {
      R31Enhance.setAlpha(gc,(ColorDefinition)la.getBackground());
    }
    gc.setBackground(clrBackground);
    gc.fillRectangle(r);
    clrBackground.dispose();
    gc.setBackground(clrPreviousBackground);
  }
  gc.setForeground(clrText);
  R31Enhance.setAlpha(gc,la.getCaption().getColor());
  final Font f=(Font)_sxs.createFont(fd);
  gc.setFont(f);
  if (fd.isUnderline() || fd.isStrikethrough()) {
    int lineWidth=(int)(fd.getSize() / 12);
    gc.setLineWidth(lineWidth);
  }
  if (R31Enhance.isR31Available()) {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dXOffset + ins.getLeft()),(int)(dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 1) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dXOffset + ins.getLeft()),(int)(dH * (i + 0.5) + ins.getTop()),(int)(dXOffset + ins.getLeft() + dW),(int)(dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
 else {
    for (int i=0; i < itm.getLineCount(); i++) {
      String oText=itm.getLine(i);
      dW=gc.textExtent(oText).x;
      if (bRightAligned) {
        dXOffset=-ins.getLeft() + dFW - dW - ins.getRight();
      }
 else       if (bCenterAligned) {
        dXOffset=-ins.getLeft() + (dFW - dW) / 2;
      }
      gc.drawText(oText,(int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * i + ins.getTop()),true);
      if (fd.isUnderline()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 1) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 1) + ins.getTop()));
      }
      if (fd.isStrikethrough()) {
        gc.drawLine((int)(dX + dXOffset + ins.getLeft()),(int)(dY + dH * (i + 0.5) + ins.getTop()),(int)(dX + dXOffset + ins.getLeft()+ dW),(int)(dY + dH * (i + 0.5) + ins.getTop()));
      }
    }
  }
  R31Enhance.setTransform(gc,trOld);
  if (previousClipping != null) {
    gc.setClipping(previousClipping);
    previousClipping.dispose();
  }
  R31Enhance.disposeTransform(trOld);
  R31Enhance.disposeTransform(tr);
  f.dispose();
  clrText.dispose();
  cComp.recycleTextMetrics(itm);
}",0.7977270461569136
67900,"/** 
 * @param ipr
 * @param iLabelPosition
 * @param lo
 * @param la
 * @throws ChartException
 */
public final void renderTextAtLocation(IPrimitiveRenderer idr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final GC gc=(GC)((IDeviceRenderer)idr).getGraphicsContext();
  IChartComputation cComp=((IDeviceRenderer)idr).getChartComputation();
  BoundingBox bb=cComp.computeBox(_sxs,iLabelPosition,la,0,0);
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    bb.setTop(lo.getY() - bb.getHeight());
  bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case BELOW:
bb.setTop(lo.getY());
bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case LEFT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX() - bb.getWidth());
break;
case RIGHT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX());
break;
case INSIDE:
bb.setTop(lo.getY() - bb.getHeight() / 2);
bb.setLeft(lo.getX() - bb.getWidth() / 2);
break;
}
adjustTextPosition(iLabelPosition,bb);
if (ChartUtil.isShadowDefined(la)) {
ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
try {
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
 finally {
cComp.recycleTextMetrics(itm);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(cComp,gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(cComp,la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(cComp,gc,la,iLabelPosition,lo);
}","/** 
 * @param ipr
 * @param iLabelPosition
 * @param lo
 * @param la
 * @throws ChartException
 */
@Override public final void renderTextAtLocation(IPrimitiveRenderer idr,int iLabelPosition,Location lo,Label la) throws ChartException {
  final GC gc=(GC)((IDeviceRenderer)idr).getGraphicsContext();
  IChartComputation cComp=((IDeviceRenderer)idr).getChartComputation();
  BoundingBox bb=cComp.computeBox(_sxs,iLabelPosition,la,0,0);
switch (iLabelPosition & POSITION_MASK) {
case ABOVE:
    bb.setTop(lo.getY() - bb.getHeight());
  bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case BELOW:
bb.setTop(lo.getY());
bb.setLeft(lo.getX() - bb.getHotPoint());
break;
case LEFT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX() - bb.getWidth());
break;
case RIGHT:
bb.setTop(lo.getY() - bb.getHotPoint());
bb.setLeft(lo.getX());
break;
case INSIDE:
bb.setTop(lo.getY() - bb.getHeight() / 2);
bb.setLeft(lo.getX() - bb.getWidth() / 2);
break;
}
adjustTextPosition(iLabelPosition,bb);
if (ChartUtil.isShadowDefined(la)) {
ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
try {
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
 finally {
cComp.recycleTextMetrics(itm);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(cComp,gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(cComp,la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(cComp,gc,la,iLabelPosition,lo);
}",0.9971313826735514
67901,"/** 
 * @param idr
 * @param boBlock
 * @param taBlock
 * @param la
 */
public final void renderTextInBlock(IDeviceRenderer idr,Bounds boBlock,TextAlignment taBlock,Label la) throws ChartException {
  IChartComputation cComp=((IDeviceRenderer)idr).getChartComputation();
  Text t=la.getCaption();
  String sText=t.getValue();
  ColorDefinition cdText=t.getColor();
  if (cdText == null) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final GC gc=(GC)idr.getGraphicsContext();
  la.getCaption().setValue(sText);
  BoundingBox bb=cComp.computeBox(_sxs,ABOVE,la,0,0);
  if (taBlock == null) {
    taBlock=AttributeFactory.eINSTANCE.createTextAlignment();
    taBlock.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    taBlock.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  }
  HorizontalAlignment haBlock=taBlock.getHorizontalAlignment();
  VerticalAlignment vaBlock=taBlock.getVerticalAlignment();
switch (haBlock.getValue()) {
case HorizontalAlignment.CENTER:
    bb.setLeft(boBlock.getLeft() + (boBlock.getWidth() - bb.getWidth()) / 2);
  break;
case HorizontalAlignment.LEFT:
bb.setLeft(boBlock.getLeft());
break;
case HorizontalAlignment.RIGHT:
bb.setLeft(boBlock.getLeft() + boBlock.getWidth() - bb.getWidth());
break;
}
switch (vaBlock.getValue()) {
case VerticalAlignment.TOP:
bb.setTop(boBlock.getTop());
break;
case VerticalAlignment.CENTER:
bb.setTop(boBlock.getTop() + (boBlock.getHeight() - bb.getHeight()) / 2);
break;
case VerticalAlignment.BOTTOM:
bb.setTop(boBlock.getTop() + boBlock.getHeight() - bb.getHeight());
break;
}
if (ChartUtil.isShadowDefined(la)) {
final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
try {
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
 finally {
cComp.recycleTextMetrics(itm);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(cComp,gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(cComp,la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(cComp,gc,la,IConstants.ABOVE,goFactory.createLocation(bb.getLeft() + bb.getHotPoint(),bb.getTop() + bb.getHeight()));
}","/** 
 * @param idr
 * @param boBlock
 * @param taBlock
 * @param la
 */
@Override public final void renderTextInBlock(IDeviceRenderer idr,Bounds boBlock,TextAlignment taBlock,Label la) throws ChartException {
  IChartComputation cComp=idr.getChartComputation();
  Text t=la.getCaption();
  String sText=t.getValue();
  ColorDefinition cdText=t.getColor();
  if (cdText == null) {
    throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,""String_Node_Str"",Messages.getResourceBundle(_sxs.getULocale()));
  }
  final GC gc=(GC)idr.getGraphicsContext();
  la.getCaption().setValue(sText);
  BoundingBox bb=cComp.computeBox(_sxs,ABOVE,la,0,0);
  if (taBlock == null) {
    taBlock=AttributeFactory.eINSTANCE.createTextAlignment();
    taBlock.setHorizontalAlignment(HorizontalAlignment.CENTER_LITERAL);
    taBlock.setVerticalAlignment(VerticalAlignment.CENTER_LITERAL);
  }
  HorizontalAlignment haBlock=taBlock.getHorizontalAlignment();
  VerticalAlignment vaBlock=taBlock.getVerticalAlignment();
switch (haBlock.getValue()) {
case HorizontalAlignment.CENTER:
    bb.setLeft(boBlock.getLeft() + (boBlock.getWidth() - bb.getWidth()) / 2);
  break;
case HorizontalAlignment.LEFT:
bb.setLeft(boBlock.getLeft());
break;
case HorizontalAlignment.RIGHT:
bb.setLeft(boBlock.getLeft() + boBlock.getWidth() - bb.getWidth());
break;
}
switch (vaBlock.getValue()) {
case VerticalAlignment.TOP:
bb.setTop(boBlock.getTop());
break;
case VerticalAlignment.CENTER:
bb.setTop(boBlock.getTop() + (boBlock.getHeight() - bb.getHeight()) / 2);
break;
case VerticalAlignment.BOTTOM:
bb.setTop(boBlock.getTop() + boBlock.getHeight() - bb.getHeight());
break;
}
if (ChartUtil.isShadowDefined(la)) {
final ITextMetrics itm=cComp.getTextMetrics(_sxs,la,0);
try {
final double dFH=itm.getFullHeight();
Location tmpLoc=Methods.computeRotatedTopPoint(_sxs,bb,la,dFH);
renderShadowAtLocation(idr,IConstants.ABOVE,tmpLoc,la);
}
 catch (IllegalArgumentException uiex) {
throw new ChartException(ChartDeviceSwtActivator.ID,ChartException.RENDERING,uiex);
}
 finally {
cComp.recycleTextMetrics(itm);
}
}
if (la.getCaption().getFont().getRotation() == 0 || R31Enhance.isR31Available()) {
renderHorizontalText(cComp,gc,la,bb.getLeft(),bb.getTop());
}
 else {
final Image imgText=rotatedTextAsImage(cComp,la);
gc.drawImage(imgText,(int)bb.getLeft(),(int)bb.getTop());
imgText.dispose();
}
renderBorder(cComp,gc,la,IConstants.ABOVE,goFactory.createLocation(bb.getLeft() + bb.getHotPoint(),bb.getTop() + bb.getHeight()));
}",0.993032052558232
67902,"private IResultIterator executeQuery(DataRequestSession dteSession,QueryDefinition queryDefn) throws BirtException {
  IPreparedQuery query=dteSession.prepare(queryDefn,getAppContext());
  IQueryResults result=(IQueryResults)dteSession.execute(query,null,executionContext.getScriptContext());
  return result.getResultIterator();
}","private IResultIterator executeQuery(DataRequestSession dteSession,QueryDefinition queryDefn) throws BirtException {
  IPreparedQuery query=dteSession.prepare(queryDefn);
  IQueryResults result=(IQueryResults)dteSession.execute(query,null,executionContext.getScriptContext());
  return result.getResultIterator();
}",0.9752321981424148
67903,"private IResultIterator getResultSetForParameter(AbstractScalarParameterHandle parameter){
  ModuleHandle report=executionContext.getDesign();
  DataSetHandle dataSet=report.findDataSet(parameter.getDataSetName());
  IResultIterator iterator=null;
  if (dataSet != null) {
    try {
      DataRequestSession dteSession=createDataSession(dataSet);
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      ParameterHelper.addParameterBinding(queryDefn,parameter,dteSession.getModelAdaptor());
      ParameterHelper.addParameterSortBy(queryDefn,parameter,dteSession.getModelAdaptor());
      iterator=executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return iterator;
}","private IResultIterator getResultSetForParameter(AbstractScalarParameterHandle parameter){
  ModuleHandle report=executionContext.getDesign();
  DataSetHandle dataSet=report.findDataSet(parameter.getDataSetName());
  IResultIterator iterator=null;
  if (dataSet != null) {
    try {
      DataRequestSession dteSession=createDataSession(dataSet);
      dteSession.getDataSessionContext().setAppContext(getAppContext());
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      ParameterHelper.addParameterBinding(queryDefn,parameter,dteSession.getModelAdaptor());
      ParameterHelper.addParameterSortBy(queryDefn,parameter,dteSession.getModelAdaptor());
      iterator=executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return iterator;
}",0.9570335491465568
67904,"private IResultIterator getResultSetOfCascadingGroup(CascadingParameterGroupHandle parameterGroup){
  if (parameterGroup == null)   return null;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      DataRequestSession dteSession=createDataSession(dataSet);
      Iterator iter=parameterGroup.getParameters().iterator();
      while (iter.hasNext()) {
        Object parameter=iter.next();
        if (parameter instanceof ScalarParameterHandle) {
          ParameterHelper.addParameterBinding(queryDefn,(ScalarParameterHandle)parameter,dteSession.getModelAdaptor());
          ParameterHelper.addParameterSortBy(queryDefn,(ScalarParameterHandle)parameter,dteSession.getModelAdaptor());
        }
      }
      return executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return null;
}","private IResultIterator getResultSetOfCascadingGroup(CascadingParameterGroupHandle parameterGroup){
  if (parameterGroup == null)   return null;
  DataSetHandle dataSet=parameterGroup.getDataSet();
  if (dataSet != null) {
    try {
      QueryDefinition queryDefn=createQueryDefinition(dataSet);
      DataRequestSession dteSession=createDataSession(dataSet);
      dteSession.getDataSessionContext().setAppContext(getAppContext());
      Iterator iter=parameterGroup.getParameters().iterator();
      while (iter.hasNext()) {
        Object parameter=iter.next();
        if (parameter instanceof ScalarParameterHandle) {
          ParameterHelper.addParameterBinding(queryDefn,(ScalarParameterHandle)parameter,dteSession.getModelAdaptor());
          ParameterHelper.addParameterSortBy(queryDefn,(ScalarParameterHandle)parameter,dteSession.getModelAdaptor());
        }
      }
      return executeQuery(dteSession,queryDefn);
    }
 catch (    BirtException ex) {
      log.log(Level.WARNING,ex.getMessage(),ex);
      executionContext.addException(dataSet,ex);
    }
  }
  return null;
}",0.965419232591189
67905,"/** 
 * This method executes IQueryDefinition, ICubeQueryDefinition and ISubCubeQueryDefinition; ISubqueryDefinition is not included here.
 */
static public IBaseQueryResults executeQuery(IBaseQueryResults parent,IDataQueryDefinition query,String rset,ExecutionContext executionContext) throws EngineException {
  try {
    DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
    if (dataSession == null)     return null;
    Map appContext=executionContext.getAppContext();
    ScriptContext scriptContext=executionContext.getScriptContext();
    processQueryExtensions(query,executionContext);
    if (query instanceof QueryDefinition) {
      QueryDefinition tmpQuery=(QueryDefinition)query;
      tmpQuery.setQueryResultsID(rset);
      IPreparedQuery pQuery=dataSession.prepare(tmpQuery,appContext);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
 else     if (query instanceof ICubeQueryDefinition) {
      ICubeQueryDefinition cubeQuery=(ICubeQueryDefinition)query;
      cubeQuery.setQueryResultsID(rset);
      IPreparedCubeQuery pQuery=dataSession.prepare(cubeQuery,appContext);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
 else     if (query instanceof ISubCubeQueryDefinition) {
      ISubCubeQueryDefinition cubeQuery=(ISubCubeQueryDefinition)query;
      IPreparedCubeQuery pQuery=dataSession.prepare(cubeQuery,appContext);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
  }
 catch (  BirtException ex) {
    throw new EngineException(ex);
  }
  return null;
}","/** 
 * This method executes IQueryDefinition, ICubeQueryDefinition and ISubCubeQueryDefinition; ISubqueryDefinition is not included here.
 */
static public IBaseQueryResults executeQuery(IBaseQueryResults parent,IDataQueryDefinition query,String rset,ExecutionContext executionContext) throws EngineException {
  try {
    DataRequestSession dataSession=executionContext.getDataEngine().getDTESession();
    if (dataSession == null)     return null;
    Map appContext=executionContext.getAppContext();
    dataSession.getDataSessionContext().setAppContext(appContext);
    ScriptContext scriptContext=executionContext.getScriptContext();
    processQueryExtensions(query,executionContext);
    if (query instanceof QueryDefinition) {
      QueryDefinition tmpQuery=(QueryDefinition)query;
      tmpQuery.setQueryResultsID(rset);
      IPreparedQuery pQuery=dataSession.prepare(tmpQuery);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
 else     if (query instanceof ICubeQueryDefinition) {
      ICubeQueryDefinition cubeQuery=(ICubeQueryDefinition)query;
      cubeQuery.setQueryResultsID(rset);
      IPreparedCubeQuery pQuery=dataSession.prepare(cubeQuery);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
 else     if (query instanceof ISubCubeQueryDefinition) {
      ISubCubeQueryDefinition cubeQuery=(ISubCubeQueryDefinition)query;
      IPreparedCubeQuery pQuery=dataSession.prepare(cubeQuery);
      if (pQuery == null)       return null;
      return dataSession.execute(pQuery,parent,scriptContext);
    }
  }
 catch (  BirtException ex) {
    throw new EngineException(ex);
  }
  return null;
}",0.945475638051044
67906,"protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  IBaseQueryResults parentQueryResults=null;
  if (parentResult != null) {
    parentQueryResults=parentResult.getQueryResults();
  }
  String resultSetID=loadResultSetID(parentResult,queryID);
  ((QueryDefinition)query).setQueryResultsID(resultSetID);
  processQueryExtensions(query);
  String pRsetId=null;
  String rawId=""String_Node_Str"";
  String rowId=""String_Node_Str"";
  IBaseQueryResults dteResults=null;
  QueryResultSet resultSet=null;
  boolean needExecute=queryCache.needExecute(query,queryOwner,useCache);
  if (parentQueryResults == null) {
    if (!needExecute) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query,null);
      dteResults=dteSession.execute(pQuery,null,context.getScriptContext());
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
      rowId=String.valueOf(((QueryResultSet)parentResult).getRowIndex());
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
      rowId=((CubeResultSet)parentResult).getCellIndex();
    }
    rawId=parentResult.getRawID();
    if (!needExecute) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query,null);
      dteResults=dteSession.execute(pQuery,parentQueryResults,context.getScriptContext());
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,parentResult,(IQueryDefinition)query,(IQueryResults)dteResults);
  }
  resultSet.setBaseRSetID(resultSetID);
  storeDteMetaInfo(pRsetId,rawId,queryID,dteResults.getID(),rowId);
  return resultSet;
}","protected IBaseResultSet doExecuteQuery(IBaseResultSet parentResult,IQueryDefinition query,Object queryOwner,boolean useCache) throws BirtException {
  String queryID=(String)queryIDMap.get(query);
  IBaseQueryResults parentQueryResults=null;
  if (parentResult != null) {
    parentQueryResults=parentResult.getQueryResults();
  }
  String resultSetID=loadResultSetID(parentResult,queryID);
  ((QueryDefinition)query).setQueryResultsID(resultSetID);
  processQueryExtensions(query);
  String pRsetId=null;
  String rawId=""String_Node_Str"";
  String rowId=""String_Node_Str"";
  IBaseQueryResults dteResults=null;
  QueryResultSet resultSet=null;
  boolean needExecute=queryCache.needExecute(query,queryOwner,useCache);
  if (parentQueryResults == null) {
    if (!needExecute) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query);
      dteResults=dteSession.execute(pQuery,null,context.getScriptContext());
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,query,(IQueryResults)dteResults);
  }
 else {
    if (parentResult instanceof QueryResultSet) {
      pRsetId=((QueryResultSet)parentResult).getQueryResultsID();
      rowId=String.valueOf(((QueryResultSet)parentResult).getRowIndex());
    }
 else {
      pRsetId=((CubeResultSet)parentResult).getQueryResultsID();
      rowId=((CubeResultSet)parentResult).getCellIndex();
    }
    rawId=parentResult.getRawID();
    if (!needExecute) {
      dteResults=getCachedQueryResult(query,parentResult);
    }
    if (dteResults == null) {
      IBasePreparedQuery pQuery=dteSession.prepare(query);
      dteResults=dteSession.execute(pQuery,parentQueryResults,context.getScriptContext());
      putCachedQueryResult(query,dteResults.getID());
    }
    resultSet=new QueryResultSet(this,context,parentResult,(IQueryDefinition)query,(IQueryResults)dteResults);
  }
  resultSet.setBaseRSetID(resultSetID);
  storeDteMetaInfo(pRsetId,rawId,queryID,dteResults.getID(),rowId);
  return resultSet;
}",0.997626957759848
67907,"private void applyPatternAttributes(){
  if (digitSubstitution) {
    DecimalFormatSymbols symbols=getICUDecimalSymbols(locale.toLocale());
    if (decimalFormat instanceof DecimalFormat) {
      ((DecimalFormat)decimalFormat).setDecimalFormatSymbols(symbols);
    }
    if (numberFormat instanceof DecimalFormat) {
      ((DecimalFormat)numberFormat).setDecimalFormatSymbols(symbols);
    }
  }
  if (decimalFormat instanceof DecimalFormat) {
    ((DecimalFormat)decimalFormat).setRoundingMode(roundingMode);
  }
  if (numberFormat instanceof DecimalFormat) {
    ((DecimalFormat)numberFormat).setRoundingMode(roundingMode);
  }
}","private void applyPatternAttributes(){
  if (digitSubstitution) {
    DecimalFormatSymbols symbols=getICUDecimalSymbols(locale.toLocale());
    if (decimalFormat instanceof DecimalFormat) {
      ((DecimalFormat)decimalFormat).setDecimalFormatSymbols(symbols);
    }
    if (numberFormat instanceof DecimalFormat) {
      ((DecimalFormat)numberFormat).setDecimalFormatSymbols(symbols);
    }
  }
}",0.7723735408560312
67908,"private void setStateOfLabel(){
  Axis ax=getAxisForProcessing();
  boolean isLabelEnabled=ax.getLabel().isVisible();
  fdcFont.setEnabled(isLabelEnabled);
  cbStaggered.setEnabled(!isChart3D(ax) && isLabelEnabled);
  setToggleButtonEnabled(BUTTON_LABEL,isLabelEnabled);
}","private void setStateOfLabel(){
  Axis ax=getAxisForProcessing();
  boolean isLabelEnabled=ax.getLabel().isVisible();
  fdcFont.setEnabled(isLabelEnabled);
  cbStaggered.setEnabled(!isChart3D() && isLabelEnabled);
  setToggleButtonEnabled(BUTTON_LABEL,isLabelEnabled);
}",0.996309963099631
67909,"public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    getAxisForProcessing().setType(axisType);
    if (btnCategoryAxis != null) {
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(axisType));
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()).equals(IntersectionType.VALUE_LITERAL.getName())) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
    }
 else {
      lblValue.setEnabled(false);
      txtValue.setEnabled(false);
    }
    getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
    if (getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    getAxisForProcessing().setCategoryAxis(btnCategoryAxis.getSelection());
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),btnCategoryAxis.getSelection());
    refreshPopupSheet();
    btnReverse.setEnabled(btnCategoryAxis.getSelection());
    ((ChartWithAxes)getChart()).setReverseCategory(false);
    btnReverse.setSelection(false);
  }
 else   if (e.widget.equals(btnReverse)) {
    ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelection());
  }
 else   if (e.widget.equals(btnTitleVisible)) {
    getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelection());
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!btnTitleVisible.getSelection() && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnLabelVisible)) {
    getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelection());
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!btnLabelVisible.getSelection() && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    String sAxisTitle=Messages.getString(""String_Node_Str"");
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),sAxisTitle);
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().eUnset(ComponentPackage.eINSTANCE.getAxis_FormatSpecifier());
        return;
      }
      getAxisForProcessing().setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(cbStaggered)) {
    getAxisForProcessing().setStaggered(cbStaggered.getSelection());
  }
}","public void widgetSelected(SelectionEvent e){
  if (detachPopup(e.widget)) {
    return;
  }
  if (isRegistered(e.widget)) {
    attachPopup(((Button)e.widget).getData().toString());
  }
  if (e.widget == btnFixLabelSpan) {
    boolean bLabelThickFixed=btnFixLabelSpan.getSelection();
    lneLabelSpan.setEnabled(bLabelThickFixed);
    if (!bLabelThickFixed) {
      getAxisForProcessing().unsetLabelSpan();
    }
 else {
      if (lneLabelSpan.getValue() == 0) {
        double value=suggestLabelSpan(getAxisForProcessing());
        lneLabelSpan.setValue(value);
      }
      getAxisForProcessing().setLabelSpan(lneLabelSpan.getValue());
    }
  }
  if (e.widget.equals(cmbTypes)) {
    final AxisType axisType=AxisType.getByName(LiteralHelper.axisTypeSet.getNameByDisplayName(cmbTypes.getText()));
    if (getAxisForProcessing().getType() == axisType) {
      return;
    }
    ChartAdapter.beginIgnoreNotifications();
{
      convertSampleData(axisType);
      getAxisForProcessing().setFormatSpecifier(null);
      EList<MarkerLine> markerLines=getAxisForProcessing().getMarkerLines();
      for (int i=0; i < markerLines.size(); i++) {
        markerLines.get(i).setFormatSpecifier(null);
      }
      EList<MarkerRange> markerRanges=getAxisForProcessing().getMarkerRanges();
      for (int i=0; i < markerRanges.size(); i++) {
        markerRanges.get(i).setFormatSpecifier(null);
      }
    }
    ChartAdapter.endIgnoreNotifications();
    getAxisForProcessing().setType(axisType);
    if (btnCategoryAxis != null) {
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(axisType));
    }
    refreshPopupSheet();
  }
 else   if (e.widget.equals(cmbOrigin)) {
    if (LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText()).equals(IntersectionType.VALUE_LITERAL.getName())) {
      lblValue.setEnabled(true);
      txtValue.setEnabled(true);
    }
 else {
      lblValue.setEnabled(false);
      txtValue.setEnabled(false);
    }
    getAxisForProcessing().getOrigin().setType(IntersectionType.getByName(LiteralHelper.intersectionTypeSet.getNameByDisplayName(cmbOrigin.getText())));
    if (getAxisForProcessing().getOrigin().getType().getValue() == IntersectionType.VALUE) {
      getAxisForProcessing().getOrigin().setValue(txtValue.getDataElement());
    }
  }
 else   if (e.widget.equals(btnCategoryAxis)) {
    getAxisForProcessing().setCategoryAxis(btnCategoryAxis.getSelection());
    ChartCacheManager.getInstance().cacheCategory(((ChartWithAxes)getChart()).getType(),btnCategoryAxis.getSelection());
    refreshPopupSheet();
    btnReverse.setEnabled(btnCategoryAxis.getSelection());
    ((ChartWithAxes)getChart()).setReverseCategory(false);
    btnReverse.setSelection(false);
  }
 else   if (e.widget.equals(btnReverse)) {
    ((ChartWithAxes)getChart()).setReverseCategory(btnReverse.getSelection());
  }
 else   if (e.widget.equals(btnTitleVisible)) {
    getAxisForProcessing().getTitle().setVisible(btnTitleVisible.getSelection());
    setStateOfTitle();
    Button btnAxisTitle=getToggleButton(BUTTON_TITLE);
    if (!btnTitleVisible.getSelection() && btnAxisTitle.getSelection()) {
      btnAxisTitle.setSelection(false);
      detachPopup(btnAxisTitle);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnLabelVisible)) {
    getAxisForProcessing().getLabel().setVisible(btnLabelVisible.getSelection());
    setStateOfLabel();
    Button btnAxisLabel=getToggleButton(BUTTON_LABEL);
    if (!btnLabelVisible.getSelection() && btnAxisLabel.getSelection()) {
      btnAxisLabel.setSelection(false);
      detachPopup(btnAxisLabel);
    }
 else {
      refreshPopupSheet();
    }
  }
 else   if (e.widget.equals(btnFormatSpecifier)) {
    String sAxisTitle=Messages.getString(""String_Node_Str"");
    try {
      String sTitleString=getAxisForProcessing().getTitle().getCaption().getValue();
      int iSeparatorIndex=sTitleString.indexOf(ExternalizedTextEditorComposite.SEPARATOR);
      if (iSeparatorIndex > 0) {
        sTitleString=sTitleString.substring(iSeparatorIndex);
      }
 else       if (iSeparatorIndex == 0) {
        sTitleString=sTitleString.substring(ExternalizedTextEditorComposite.SEPARATOR.length());
      }
      sAxisTitle+=""String_Node_Str"" + sTitleString + ""String_Node_Str"";
    }
 catch (    NullPointerException e1) {
    }
    FormatSpecifier formatspecifier=null;
    if (getAxisForProcessing().getFormatSpecifier() != null) {
      formatspecifier=getAxisForProcessing().getFormatSpecifier();
    }
    FormatSpecifierDialog editor=new FormatSpecifierDialog(cmpContent.getShell(),formatspecifier,getAxisForProcessing().getType(),sAxisTitle);
    if (editor.open() == Window.OK) {
      if (editor.getFormatSpecifier() == null) {
        getAxisForProcessing().eUnset(ComponentPackage.eINSTANCE.getAxis_FormatSpecifier());
        return;
      }
      getAxisForProcessing().setFormatSpecifier(editor.getFormatSpecifier());
    }
  }
 else   if (e.getSource().equals(cbStaggered)) {
    getAxisForProcessing().setStaggered(cbStaggered.getSelection());
  }
}",0.9848984898489848
67910,"protected boolean isChart3D(Axis ax){
  if (getChart() instanceof ChartWithAxes) {
    return (getChart().getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL);
  }
 else {
    return false;
  }
}","protected boolean isChart3D(){
  if (getChart() instanceof ChartWithAxes) {
    return (getChart().getDimension() == ChartDimension.THREE_DIMENSIONAL_LITERAL);
  }
  return false;
}",0.9451697127937336
67911,"public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D(ax);
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}","@Override public void createControl(Composite parent){
  cmpContent=new Composite(parent,SWT.NONE);
{
    GridLayout glContent=new GridLayout(2,false);
    cmpContent.setLayout(glContent);
    GridData gd=new GridData(GridData.FILL_BOTH);
    cmpContent.setLayoutData(gd);
  }
  Composite cmpBasic=new Composite(cmpContent,SWT.NONE);
{
    cmpBasic.setLayout(new GridLayout(3,false));
    cmpBasic.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
  }
  if (getAxisAngleType() == AngleType.X) {
    btnCategoryAxis=new Button(cmpBasic,SWT.CHECK);
{
      btnCategoryAxis.setText(Messages.getString(""String_Node_Str""));
      btnCategoryAxis.addSelectionListener(this);
      btnCategoryAxis.setSelection(getAxisForProcessing().isCategoryAxis());
      btnCategoryAxis.setEnabled(!AxisType.TEXT_LITERAL.equals(getAxisForProcessing().getType()));
    }
    btnReverse=new Button(cmpBasic,SWT.CHECK);
{
      GridData gd=new GridData();
      gd.horizontalSpan=2;
      btnCategoryAxis.setLayoutData(gd);
      btnReverse.setText(Messages.getString(""String_Node_Str""));
      btnReverse.addSelectionListener(this);
      btnReverse.setSelection(((ChartWithAxes)getChart()).isReverseCategory());
      btnReverse.setEnabled(btnCategoryAxis.getSelection());
    }
  }
  Label lblTitle=new Label(cmpBasic,SWT.NONE);
  lblTitle.setText(Messages.getString(""String_Node_Str""));
  List<String> keys=null;
  IUIServiceProvider serviceprovider=getContext().getUIServiceProvider();
  if (serviceprovider != null) {
    keys=serviceprovider.getRegisteredKeys();
  }
  txtTitle=new ExternalizedTextEditorComposite(cmpBasic,SWT.BORDER | SWT.SINGLE,-1,-1,keys,serviceprovider,getAxisForProcessing().getTitle().getCaption().getValue());
{
    GridData gd=new GridData();
    gd.widthHint=250;
    gd.horizontalIndent=5;
    txtTitle.setLayoutData(gd);
    txtTitle.addListener(this);
  }
  btnTitleVisible=new Button(cmpBasic,SWT.CHECK);
{
    btnTitleVisible.setText(Messages.getString(""String_Node_Str""));
    btnTitleVisible.setSelection(getChart().getTitle().isVisible());
    btnTitleVisible.addSelectionListener(this);
    btnTitleVisible.setSelection(getAxisForProcessing().getTitle().isVisible());
  }
  if (getAxisAngleType() != AngleType.Z) {
    Label lblType=new Label(cmpBasic,SWT.NONE);
    lblType.setText(Messages.getString(""String_Node_Str""));
    cmbTypes=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
      GridData gd=new GridData();
      gd.widthHint=220;
      gd.horizontalIndent=5;
      cmbTypes.setLayoutData(gd);
      cmbTypes.addSelectionListener(this);
    }
    btnFormatSpecifier=new Button(cmpBasic,SWT.PUSH);
{
      GridData gdBTNFormatSpecifier=new GridData();
      gdBTNFormatSpecifier.horizontalIndent=-3;
      btnFormatSpecifier.setLayoutData(gdBTNFormatSpecifier);
      btnFormatSpecifier.setToolTipText(Messages.getString(""String_Node_Str""));
      btnFormatSpecifier.addSelectionListener(this);
      btnFormatSpecifier.setText(Messages.getString(""String_Node_Str""));
    }
    if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
      Label lblOrigin=new Label(cmpBasic,SWT.NONE);
      lblOrigin.setText(Messages.getString(""String_Node_Str""));
      cmbOrigin=new Combo(cmpBasic,SWT.DROP_DOWN | SWT.READ_ONLY);
{
        GridData gd=new GridData();
        gd.widthHint=220;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        cmbOrigin.setLayoutData(gd);
        cmbOrigin.addSelectionListener(this);
      }
      boolean bValueOrigin=false;
      if (getAxisForProcessing().getOrigin() != null) {
        if (getAxisForProcessing().getOrigin().getType().equals(IntersectionType.VALUE_LITERAL)) {
          bValueOrigin=true;
        }
      }
      lblValue=new Label(cmpBasic,SWT.NONE);
{
        lblValue.setText(Messages.getString(""String_Node_Str""));
        lblValue.setEnabled(bValueOrigin);
      }
      txtValue=createDataElementComposite(cmpBasic);
{
        GridData gd=new GridData();
        gd.widthHint=245;
        gd.horizontalSpan=2;
        gd.horizontalIndent=5;
        txtValue.setLayoutData(gd);
        txtValue.addListener(this);
        txtValue.setEnabled(bValueOrigin);
      }
    }
    populateLists();
  }
  new Label(cmpBasic,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
  fdcFont=new FontDefinitionComposite(cmpBasic,SWT.NONE,getContext(),getAxisForProcessing().getLabel().getCaption().getFont(),getAxisForProcessing().getLabel().getCaption().getColor(),false);
{
    GridData gdFDCFont=new GridData();
    gdFDCFont.widthHint=250;
    gdFDCFont.horizontalIndent=5;
    fdcFont.setLayoutData(gdFDCFont);
    fdcFont.addListener(this);
  }
  Composite cmpLabel=new Composite(cmpBasic,SWT.NONE);
{
    GridLayout layout=new GridLayout(2,false);
    layout.marginHeight=0;
    layout.marginWidth=0;
    cmpLabel.setLayout(layout);
  }
  btnLabelVisible=new Button(cmpLabel,SWT.CHECK);
{
    btnLabelVisible.setText(Messages.getString(""String_Node_Str""));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    btnLabelVisible.setLayoutData(gd);
    btnLabelVisible.addSelectionListener(this);
    btnLabelVisible.setSelection(getAxisForProcessing().getLabel().isVisible());
  }
  cbStaggered=new Button(cmpLabel,SWT.CHECK);
{
    Axis ax=getAxisForProcessing();
    boolean bStaggered=ax.isSetStaggered() && ax.isStaggered();
    boolean bNot3D=!isChart3D();
    cbStaggered.setSelection(bNot3D && bStaggered);
    cbStaggered.setText(Messages.getString(""String_Node_Str""));
    cbStaggered.addSelectionListener(this);
    cbStaggered.setEnabled(bNot3D);
  }
  if (getChart().getDimension().getValue() != ChartDimension.THREE_DIMENSIONAL) {
    Label l=new Label(cmpBasic,SWT.NONE);
    l.setText(Messages.getString(""String_Node_Str""));
    FieldAssistHelper.getInstance().addRequiredFieldIndicator(l);
    Composite cmpEditorWithUnit=new Composite(cmpBasic,SWT.NONE);
{
      GridData gd=new GridData();
      gd.widthHint=250;
      cmpEditorWithUnit.setLayoutData(gd);
      GridLayout layout=new GridLayout(2,false);
      layout.marginWidth=0;
      layout.marginHeight=0;
      cmpEditorWithUnit.setLayout(layout);
    }
    lneLabelSpan=new LocalizedNumberEditorComposite(cmpEditorWithUnit,SWT.BORDER);
    new TextNumberEditorAssistField(lneLabelSpan.getTextControl(),null);
{
      lneLabelSpan.setValue(getAxisForProcessing().getLabelSpan());
      lneLabelSpan.addModifyListener(this);
      GridData gd=new GridData(GridData.FILL_HORIZONTAL);
      gd.horizontalIndent=5;
      lneLabelSpan.setLayoutData(gd);
      lneLabelSpan.setEnabled(getAxisForProcessing().isSetLabelSpan());
    }
    new Label(cmpEditorWithUnit,SWT.NONE).setText(Messages.getString(""String_Node_Str""));
    btnFixLabelSpan=new Button(cmpBasic,SWT.CHECK);
{
      btnFixLabelSpan.setText(Messages.getString(""String_Node_Str""));
      btnFixLabelSpan.addSelectionListener(this);
      btnFixLabelSpan.setSelection(getAxisForProcessing().isSetLabelSpan());
    }
  }
  createButtonGroup(cmpContent);
  setStateOfTitle();
  setStateOfLabel();
}",0.9991501416430596
67912,"/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
 else     if (orthQuery != null && orthQuery.getGrouping() != null) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}","/** 
 * Returns value of aggregate function parameters.
 * @param orthSD
 * @param baseSD
 * @param orthQuery
 * @since 2.5
 */
public static String[] getAggFunParameters(SeriesDefinition orthSD,SeriesDefinition baseSD,Query orthQuery){
  if (baseSD.getGrouping() != null && baseSD.getGrouping().isEnabled()) {
    SeriesGrouping grouping=orthSD.getGrouping();
    if (grouping != null && grouping.isEnabled()) {
      return grouping.getAggregateParameters().toArray(new String[0]);
    }
 else     if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return baseSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
 else {
    if (orthQuery != null && orthQuery.getGrouping() != null && orthQuery.getGrouping().isEnabled()) {
      return orthQuery.getGrouping().getAggregateParameters().toArray(new String[0]);
    }
    return orthSD.getGrouping().getAggregateParameters().toArray(new String[0]);
  }
}",0.981348637015782
67913,"double roundValue(double value){
  if (roundPrecision >= 0) {
    BigDecimal bd=BigDecimal.valueOf(value);
    int scale=bd.scale();
    if (scale > roundPrecision) {
      bd=bd.setScale(roundPrecision,BigDecimal.ROUND_HALF_DOWN);
      return bd.doubleValue();
    }
  }
  return value;
}","double roundValue(double value){
  if (roundPrecision >= 0) {
    BigDecimal bd=BigDecimal.valueOf(value);
    int scale=bd.scale();
    if (scale > roundPrecision) {
      bd=bd.setScale(roundPrecision,roundingMode);
      return bd.doubleValue();
    }
  }
  return value;
}",0.9363957597173144
67914,"private void applyPatternAttributes(){
  if (digitSubstitution) {
    DecimalFormatSymbols symbols=getICUDecimalSymbols(locale.toLocale());
    if (decimalFormat instanceof DecimalFormat) {
      ((DecimalFormat)decimalFormat).setDecimalFormatSymbols(symbols);
    }
    if (numberFormat instanceof DecimalFormat) {
      ((DecimalFormat)numberFormat).setDecimalFormatSymbols(symbols);
    }
  }
}","private void applyPatternAttributes(){
  if (digitSubstitution) {
    DecimalFormatSymbols symbols=getICUDecimalSymbols(locale.toLocale());
    if (decimalFormat instanceof DecimalFormat) {
      ((DecimalFormat)decimalFormat).setDecimalFormatSymbols(symbols);
    }
    if (numberFormat instanceof DecimalFormat) {
      ((DecimalFormat)numberFormat).setDecimalFormatSymbols(symbols);
    }
  }
  if (decimalFormat instanceof DecimalFormat) {
    ((DecimalFormat)decimalFormat).setRoundingMode(roundingMode);
  }
  if (numberFormat instanceof DecimalFormat) {
    ((DecimalFormat)numberFormat).setRoundingMode(roundingMode);
  }
}",0.7723735408560312
67915,"private String processPatternAttributes(String pattern){
  if (pattern == null || pattern.length() <= 3)   return pattern;
  int length=pattern.length();
  if (pattern.charAt(length - 1) == '}') {
    int begin=pattern.lastIndexOf('{');
    if (begin >= 0) {
      ArrayList<String> names=new ArrayList<String>();
      ArrayList<String> values=new ArrayList<String>();
      String properties=pattern.substring(begin + 1,length - 1);
      String[] attributes=properties.split(""String_Node_Str"");
      boolean wellForm=true;
      for (      String attribute : attributes) {
        int delimit=attribute.indexOf('=');
        if (delimit == -1) {
          wellForm=false;
          break;
        }
        names.add(attribute.substring(0,delimit));
        values.add(attribute.substring(delimit + 1));
      }
      if (wellForm) {
        int size=names.size();
        for (int index=0; index < size; index++) {
          if (DIGIT_SUBSTITUTION.equalsIgnoreCase(names.get(index).trim())) {
            String value=values.get(index).trim();
            digitSubstitution=Boolean.valueOf(value);
          }
        }
        if (begin == 0)         return null;
        return pattern.substring(0,begin);
      }
    }
  }
  return pattern;
}","private String processPatternAttributes(String pattern){
  if (pattern == null || pattern.length() <= 3)   return pattern;
  int length=pattern.length();
  if (pattern.charAt(length - 1) == '}') {
    int begin=pattern.lastIndexOf('{');
    if (begin >= 0) {
      ArrayList<String> names=new ArrayList<String>();
      ArrayList<String> values=new ArrayList<String>();
      String properties=pattern.substring(begin + 1,length - 1);
      String[] attributes=properties.split(""String_Node_Str"");
      boolean wellForm=true;
      for (      String attribute : attributes) {
        int delimit=attribute.indexOf('=');
        if (delimit == -1) {
          wellForm=false;
          break;
        }
        names.add(attribute.substring(0,delimit));
        values.add(attribute.substring(delimit + 1));
      }
      if (wellForm) {
        int size=names.size();
        for (int index=0; index < size; index++) {
          if (DIGIT_SUBSTITUTION.equalsIgnoreCase(names.get(index).trim())) {
            String value=values.get(index).trim();
            digitSubstitution=Boolean.valueOf(value);
          }
          if (ROUNDING_MODE.equalsIgnoreCase(names.get(index).trim())) {
            String value=values.get(index).trim();
            if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.HALF_EVEN;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.HALF_UP;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.HALF_DOWN;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.UP;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.DOWN;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.FLOOR;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.CEILING;
 else             if (value.equalsIgnoreCase(""String_Node_Str""))             roundingMode=RoundingMode.UNNECESSARY;
          }
        }
        if (begin == 0)         return null;
        return pattern.substring(0,begin);
      }
    }
  }
  return pattern;
}",0.7094211123723042
67916,"public static FittingCurveHelper instance(double[] xArray,double[] yArray,boolean isTransposed){
  double[][] sa=sort(xArray,yArray,isTransposed);
  int iSize=mergeBase(sa,isTransposed);
  return new FittingCurveHelper(sa,iSize);
}","public static FittingCurveHelper instance(double[] xArray,double[] yArray,boolean isTransposed){
  double[][] sa=sort(xArray,yArray,isTransposed);
  int iSize=mergeBase(sa);
  return new FittingCurveHelper(sa,iSize);
}",0.9710467706013364
67917,"/** 
 * Returns the decorator renderer associated with current series, default is none.
 */
public IAxesDecorator getAxesDecorator(OneAxis ax){
  return null;
}","/** 
 * Returns the decorator renderer associated with current series, default is none.
 */
@Override public IAxesDecorator getAxesDecorator(OneAxis ax){
  return null;
}",0.9696969696969696
67918,"/** 
 * Returns if current chart is transposed.
 */
public boolean isTransposed(){
  return ((ChartWithAxes)getModel()).isTransposed();
}","/** 
 * Returns if current chart is transposed.
 */
@Override public boolean isTransposed(){
  return ((ChartWithAxes)getModel()).isTransposed();
}",0.9647887323943662
67919,"protected boolean isFirstVisibleSeries(){
  if (ChartUtil.hasMultipleYAxes(getModel()) && ((ChartWithAxes)getModel()).isStudyLayout()) {
    List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>(ax.getSeriesDefinitions());
    Collections.sort(sdList,zOrderComparatorImpl);
    List<Series> seList=new ArrayList<Series>();
    for (    SeriesDefinition sd : sdList) {
      seList.addAll(sd.getRunTimeSeries());
    }
    BaseRenderer renderer=getRenderer(iSeriesIndex);
    Series s=renderer.getSeries();
    for (    Series series : seList) {
      if (!series.isVisible()) {
        continue;
      }
      return (s == series);
    }
  }
 else {
    if (iSeriesIndex == 0) {
      return false;
    }
    for (int i=1; i < iSeriesCount; i++) {
      BaseRenderer renderer=getRenderer(i);
      if (renderer.getSeries().isVisible()) {
        return (i == iSeriesIndex);
      }
    }
  }
  return false;
}","@Override protected boolean isFirstVisibleSeries(){
  if (ChartUtil.hasMultipleYAxes(getModel()) && ((ChartWithAxes)getModel()).isStudyLayout()) {
    List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>(ax.getSeriesDefinitions());
    Collections.sort(sdList,zOrderComparatorImpl);
    List<Series> seList=new ArrayList<Series>();
    for (    SeriesDefinition sd : sdList) {
      seList.addAll(sd.getRunTimeSeries());
    }
    BaseRenderer renderer=getRenderer(iSeriesIndex);
    Series s=renderer.getSeries();
    for (    Series series : seList) {
      if (!series.isVisible()) {
        continue;
      }
      return (s == series);
    }
  }
 else {
    if (iSeriesIndex == 0) {
      return false;
    }
    for (int i=1; i < iSeriesCount; i++) {
      BaseRenderer renderer=getRenderer(i);
      if (renderer.getSeries().isVisible()) {
        return (i == iSeriesIndex);
      }
    }
  }
  return false;
}",0.9945770065075922
67920,"/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines(OneAxis[] oaxa,Bounds boPlotClientArea) throws ChartException {
  Axis ax;
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      if (deValue == null) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ml},Messages.getResourceBundle(getRunTimeContext().getULocale()));
      }
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,ml.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}","/** 
 * Renders all marker lines (and labels at requested positions) associated with every axis in the plot Note that marker lines are drawn immediately (not rendered as deferred) at the appropriate Z-order
 * @param oaxa
 * @param boPlotClientArea
 * @throws ChartException
 */
private final void renderMarkerLines() throws ChartException {
  PlotWithAxes pwa=(PlotWithAxes)getComputations();
  Bounds boPlotClientArea=pwa.getPlotBounds();
  Axis ax;
  OneAxis[] oaxa=getAllOneAxes();
  int iLineCount, iAxisCount=oaxa.length;
  MarkerLine ml;
  LineRenderEvent lre;
  DataElement deValue;
  AutoScale asc;
  double dCoordinate=0;
  int iOrientation;
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  final Location loStart=goFactory.createLocation(0,0);
  final Location loEnd=goFactory.createLocation(0,0);
  Anchor anc;
  TextRenderEvent tre=null;
  Label la=null;
  double dOriginalAngle=0;
  final boolean bTransposed=((ChartWithAxes)getModel()).isTransposed();
  final Bounds boText=goFactory.createBounds(0,0,0,0);
  for (int i=0; i < iAxisCount; i++) {
    ax=oaxa[i].getModelAxis();
    iOrientation=ax.getOrientation().getValue();
    if (bTransposed) {
      iOrientation=(iOrientation == Orientation.HORIZONTAL) ? Orientation.VERTICAL : Orientation.HORIZONTAL;
    }
    asc=oaxa[i].getScale();
    EList<MarkerLine> el=ax.getMarkerLines();
    iLineCount=el.size();
    for (int j=0; j < iLineCount; j++) {
      ml=el.get(j);
      ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
      getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_MARKER_LINE,ml);
      deValue=ml.getValue();
      if (deValue == null) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{ml},Messages.getResourceBundle(getRunTimeContext().getULocale()));
      }
      la=goFactory.copyOf(ml.getLabel());
      if (la.getCaption().getValue() != null && !IConstants.UNDEFINED_STRING.equals(la.getCaption().getValue()) && la.getCaption().getValue().length() > 0) {
        la.getCaption().setValue(oaxa[i].getRunTimeContext().externalizedMessage(la.getCaption().getValue()));
      }
 else {
        try {
          la.getCaption().setValue(ValueFormatter.format(deValue,ml.getFormatSpecifier(),oaxa[i].getRunTimeContext().getULocale(),null));
        }
 catch (        ChartException dfex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,dfex);
        }
      }
      if (isDimension3D()) {
        return;
      }
      try {
        dCoordinate=Methods.getLocation(asc,deValue);
      }
 catch (      Exception ex) {
        logger.log(ILogger.WARNING,Messages.getString(""String_Node_Str"",new Object[]{deValue,ml},getRunTimeContext().getULocale()));
        continue;
      }
      lre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),LineRenderEvent.class);
      if (iOrientation == Orientation.HORIZONTAL) {
        if (dCoordinate > boPlotClientArea.getLeft() + boPlotClientArea.getWidth()) {
          dCoordinate=boPlotClientArea.getLeft() + boPlotClientArea.getWidth();
        }
        if (dCoordinate < boPlotClientArea.getLeft()) {
          dCoordinate=boPlotClientArea.getLeft();
        }
        loStart.set(dCoordinate,boPlotClientArea.getTop());
        loEnd.set(dCoordinate,boPlotClientArea.getTop() + boPlotClientArea.getHeight());
      }
 else {
        if (dCoordinate < boPlotClientArea.getTop()) {
          dCoordinate=boPlotClientArea.getTop();
        }
        if (dCoordinate > boPlotClientArea.getTop() + boPlotClientArea.getHeight()) {
          dCoordinate=boPlotClientArea.getTop() + boPlotClientArea.getHeight();
        }
        loStart.set(boPlotClientArea.getLeft(),dCoordinate);
        loEnd.set(boPlotClientArea.getLeft() + boPlotClientArea.getWidth(),dCoordinate);
      }
      if (pwa.getDimension() == IConstants.TWO_5_D) {
        if (iOrientation == Orientation.HORIZONTAL) {
          loStart.translate(0,pwa.getSeriesThickness());
          loEnd.translate(0,pwa.getSeriesThickness());
        }
 else {
          loStart.translate(-pwa.getSeriesThickness(),0);
          loEnd.translate(-pwa.getSeriesThickness(),0);
        }
      }
      lre.setStart(loStart);
      lre.setEnd(loEnd);
      lre.setLineAttributes(ml.getLineAttributes());
      idr.drawLine(lre);
      if (la.isVisible()) {
        anc=switchAnchor(ml.getLabelAnchor());
        if (bTransposed) {
          dOriginalAngle=la.getCaption().getFont().getRotation();
          try {
            la.getCaption().getFont().setRotation(pwa.getTransposedAngle(dOriginalAngle));
            anc=ChartUtil.transposeAnchor(anc);
          }
 catch (          IllegalArgumentException uiex) {
            throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
          }
        }
        BoundingBox bb=null;
        try {
          bb=cComp.computeBox(idr.getDisplayServer(),IConstants.LEFT,la,0,0);
        }
 catch (        IllegalArgumentException uiex) {
          throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,uiex);
        }
        boText.set(0,0,bb.getWidth(),bb.getHeight());
        if (iOrientation == Orientation.VERTICAL) {
          if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
              boText.setTop(loStart.getY() - boText.getHeight());
            break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
          boText.setTop(loStart.getY());
        break;
default :
      boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
    break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
  boText.setLeft(loEnd.getX() - boText.getWidth());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loStart.getX());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
 else {
if (anc != null) {
switch (anc.getValue()) {
case Anchor.NORTH:
case Anchor.NORTH_EAST:
case Anchor.NORTH_WEST:
boText.setTop(loStart.getY());
break;
case Anchor.SOUTH:
case Anchor.SOUTH_EAST:
case Anchor.SOUTH_WEST:
boText.setTop(loEnd.getY() - boText.getHeight());
break;
default :
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
break;
}
switch (anc.getValue()) {
case Anchor.NORTH_EAST:
case Anchor.SOUTH_EAST:
case Anchor.EAST:
boText.setLeft(loStart.getX());
break;
case Anchor.NORTH_WEST:
case Anchor.SOUTH_WEST:
case Anchor.WEST:
boText.setLeft(loEnd.getX() - boText.getWidth());
break;
default :
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
break;
}
}
 else {
boText.setLeft(loStart.getX() + (loEnd.getX() - loStart.getX() - boText.getWidth()) / 2);
boText.setTop(loStart.getY() + (loEnd.getY() - loStart.getY() - boText.getHeight()) / 2);
}
}
tre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),TextRenderEvent.class);
tre.setBlockBounds(boText);
tre.setBlockAlignment(null);
tre.setLabel(la);
tre.setAction(TextRenderEvent.RENDER_TEXT_IN_BLOCK);
getDeferredCache().addLabel(tre);
}
if (isInteractivityEnabled()) {
Trigger tg;
EList<Trigger> elTriggers=ml.getTriggers();
if (!elTriggers.isEmpty()) {
final InteractionEvent iev=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),InteractionEvent.class);
iev.setCursor(ml.getCursor());
for (int t=0; t < elTriggers.size(); t++) {
tg=goFactory.copyOf(elTriggers.get(t));
processTrigger(tg,StructureSource.createMarkerLine(ml));
iev.addTrigger(tg);
}
Location[] loaHotspot=new Location[4];
if (iOrientation == Orientation.HORIZONTAL) {
loaHotspot[0]=goFactory.createLocation(loStart.getX() - IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[1]=goFactory.createLocation(loStart.getX() + IConstants.LINE_EXPAND_SIZE,loStart.getY());
loaHotspot[2]=goFactory.createLocation(loEnd.getX() + IConstants.LINE_EXPAND_SIZE,loEnd.getY());
loaHotspot[3]=goFactory.createLocation(loEnd.getX() - IConstants.LINE_EXPAND_SIZE,loEnd.getY());
}
 else {
loaHotspot[0]=goFactory.createLocation(loStart.getX(),loStart.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[1]=goFactory.createLocation(loEnd.getX(),loEnd.getY() - IConstants.LINE_EXPAND_SIZE);
loaHotspot[2]=goFactory.createLocation(loEnd.getX(),loEnd.getY() + IConstants.LINE_EXPAND_SIZE);
loaHotspot[3]=goFactory.createLocation(loStart.getX(),loStart.getY() + IConstants.LINE_EXPAND_SIZE);
}
final PolygonRenderEvent pre=((EventObjectCache)idr).getEventObject(StructureSource.createMarkerLine(ml),PolygonRenderEvent.class);
pre.setPoints(loaHotspot);
iev.setHotSpot(pre);
idr.enableInteraction(iev);
}
}
ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_MARKER_LINE,ax,ml,getRunTimeContext().getScriptContext());
getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_MARKER_LINE,ml);
}
}
}",0.9856065065011504
67921,"/** 
 * Ths background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    if (loa == null) {
      loa=new Location3D[4];
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
  oaxa[0]=aax.getPrimaryBase();
  oaxa[1]=aax.getPrimaryOrthogonal();
  for (int i=0; i < aax.getOverlayCount(); i++) {
    oaxa[2 + i]=aax.getOverlay(i);
  }
  if (aax.getAncillaryBase() != null) {
    oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
  }
  renderMarkerRanges(oaxa,bo);
  renderMarkerLines(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
rre.setOutline(ca.getOutline());
ipr.drawRectangle(rre);
}
}","/** 
 * This background is the first component rendered within the plot block. This is rendered with Z-order=0
 */
@Override protected void renderBackground(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  super.renderBackground(ipr,p);
  final ChartWithAxes cwa=(ChartWithAxes)getModel();
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  final ClientArea ca=p.getClientArea();
  if (!ca.isVisible()) {
    return;
  }
  Bounds bo=pwa.getPlotBounds();
  final RectangleRenderEvent rre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),RectangleRenderEvent.class);
  if (!isDimension3D()) {
    if (ca.getShadowColor() != null) {
      rre.setBounds(goFactory.translateBounds(bo,3,3));
      rre.setBackground(ca.getShadowColor());
      ipr.fillRectangle(rre);
    }
    rre.setBounds(bo);
    rre.setOutline(ca.getOutline());
    rre.setBackground(ca.getBackground());
    ipr.fillRectangle(rre);
  }
  double dSeriesThickness=pwa.getSeriesThickness();
  double[] daX={bo.getLeft() - dSeriesThickness,bo.getLeft() + bo.getWidth() - dSeriesThickness};
  double[] daY={bo.getTop() + bo.getHeight() + dSeriesThickness,bo.getTop() + dSeriesThickness};
  final AllAxes aax=pwa.getAxes();
  AutoScale scPrimaryBase=null;
  AutoScale scPrimaryOrthogonal=null;
  AutoScale scAncillaryBase=null;
  double dXStart=0;
  double dYStart=0;
  double dZStart=0;
  double dXEnd=0;
  double dYEnd=0;
  double dZEnd=0;
  int baseTickCount=0;
  int ancillaryTickCount=0;
  int orthogonalTickCount=0;
  double xStep=0;
  double yStep=0;
  double zStep=0;
  if (isDimension3D()) {
    scPrimaryBase=aax.getPrimaryBase().getScale();
    scPrimaryOrthogonal=aax.getPrimaryOrthogonal().getScale();
    scAncillaryBase=aax.getAncillaryBase().getScale();
    dXStart=scPrimaryBase.getStart();
    dYStart=scPrimaryOrthogonal.getStart();
    dZStart=scAncillaryBase.getStart();
    dXEnd=scPrimaryBase.getEnd();
    dYEnd=scPrimaryOrthogonal.getEnd();
    dZEnd=scAncillaryBase.getEnd();
    baseTickCount=scPrimaryBase.getTickCordinates().size();
    ancillaryTickCount=scAncillaryBase.getTickCordinates().size();
    orthogonalTickCount=scPrimaryOrthogonal.getTickCordinates().size();
    xStep=scPrimaryBase.getUnitSize();
    yStep=scPrimaryOrthogonal.getUnitSize();
    zStep=scAncillaryBase.getUnitSize();
  }
  if (pwa.getDimension() == IConstants.TWO_5_D) {
    Location[] loa=null;
    if (cwa.getWallFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[0],daY[1])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      loa=new Location[4];
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[0],daY[1]);
      loa[2]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[1] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getWallFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
    if (cwa.getFloorFill() == null) {
      renderPlane(ipr,StructureSource.createPlot(p),new Location[]{goFactory.createLocation(daX[0],daY[0]),goFactory.createLocation(daX[1],daY[0])},ca.getBackground(),ca.getOutline(),cwa.getDimension(),dSeriesThickness,false);
    }
 else {
      if (loa == null) {
        loa=new Location[4];
      }
      loa[0]=goFactory.createLocation(daX[0],daY[0]);
      loa[1]=goFactory.createLocation(daX[1],daY[0]);
      loa[2]=goFactory.createLocation(daX[1] + dSeriesThickness,daY[0] - dSeriesThickness);
      loa[3]=goFactory.createLocation(daX[0] + dSeriesThickness,daY[0] - dSeriesThickness);
      final PolygonRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),PolygonRenderEvent.class);
      pre.setPoints(loa);
      pre.setBackground(cwa.getFloorFill());
      pre.setOutline(ca.getOutline());
      ipr.fillPolygon(pre);
      ipr.drawPolygon(pre);
    }
  }
 else   if (pwa.getDimension() == IConstants.THREE_D) {
    Location3D[] loa=null;
    final Polygon3DRenderEvent pre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Polygon3DRenderEvent.class);
    pre.setDoubleSided(true);
    loa=new Location3D[4];
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    loa[2]=goFactory.createLocation3D(dXStart,dYEnd,dZEnd);
    loa[3]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    Object event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dLeftWall=Engine3D.getObjectFromEvent(event_new);
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    loa[2]=goFactory.createLocation3D(dXEnd,dYEnd,dZStart);
    loa[3]=goFactory.createLocation3D(dXStart,dYEnd,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getWallFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dRightWall=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getWallFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getWallFill()).getTransparency() > 0) || (!(cwa.getWallFill() instanceof ColorDefinition) && cwa.getWallFill() != null)) {
      leftWallFill=true;
      rightWallFill=true;
    }
    loa[0]=goFactory.createLocation3D(dXStart,dYStart,dZStart);
    loa[1]=goFactory.createLocation3D(dXStart,dYStart,dZEnd);
    loa[2]=goFactory.createLocation3D(dXEnd,dYStart,dZEnd);
    loa[3]=goFactory.createLocation3D(dXEnd,dYStart,dZStart);
    pre.setPoints3D(loa);
    pre.setBackground(cwa.getFloorFill());
    pre.setDoubleSided(true);
    pre.setOutline(ca.getOutline());
    event_new=getDeferredCache().addPlane(pre,PrimitiveRenderEvent.DRAW | PrimitiveRenderEvent.FILL);
    o3dFloor=Engine3D.getObjectFromEvent(event_new);
    if ((cwa.getFloorFill() instanceof ColorDefinition && ((ColorDefinition)cwa.getFloorFill()).getTransparency() > 0) || (!(cwa.getFloorFill() instanceof ColorDefinition) && cwa.getFloorFill() != null)) {
      floorFill=true;
    }
  }
  final OneAxis[] oaxa=getAllOneAxes();
  renderMarkerRanges(oaxa,bo);
  double x=0, y=0, vnext=0;
  LineAttributes lia;
  LineRenderEvent lre;
  final Insets insCA=aax.getInsets();
  int iCount;
  Grid g;
  double[] doaMinor=null;
  for (int i=0; i < oaxa.length; i++) {
    g=oaxa[i].getGrid();
    iCount=g.getMinorCountPerMajor();
    lia=oaxa[i].getGrid().getLineAttributes(IConstants.MINOR);
    if (lia == null || !lia.isVisible()) {
      continue;
    }
    if (iCount <= 0) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,""String_Node_Str"",new Object[]{Integer.valueOf(iCount)},Messages.getResourceBundle(getRunTimeContext().getULocale()));
    }
    AutoScale sc=oaxa[i].getScale();
    doaMinor=sc.getMinorCoordinates(iCount);
    if (isDimension3D()) {
      Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
      lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
        AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
      if (floorFill) {
        for (int k=0; k < xa.size() - 1; k++) {
          for (int j=0; j < doaMinor.length - 1; j++) {
            if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
              continue;
            }
            lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
            lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
            lre3d.setObject3DParent(o3dFloor);
            getDeferredCache().addLine(lre3d);
          }
        }
      }
    if (rightWallFill) {
      for (int k=0; k < xa.size() - 1; k++) {
        for (int j=0; j < doaMinor.length - 1; j++) {
          if (ChartUtil.mathGE(xa.getCoordinate(k) + doaMinor[j],xa.getCoordinate(k + 1))) {
            continue;
          }
          lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart,dZStart));
          lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k) + doaMinor[j],dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
          lre3d.setObject3DParent(o3dRightWall);
          getDeferredCache().addLine(lre3d);
        }
      }
    }
  break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
  for (int j=0; j < doaMinor.length - 1; j++) {
    if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
      continue;
    }
    lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
    lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart + (ancillaryTickCount - 1) * zStep));
    lre3d.setObject3DParent(o3dLeftWall);
    getDeferredCache().addLine(lre3d);
  }
}
}
if (rightWallFill) {
for (int k=0; k < ya.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
  if (ChartUtil.mathGE(ya.getCoordinate(k) + doaMinor[j],ya.getCoordinate(k + 1))) {
    continue;
  }
  lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k) + doaMinor[j],dZStart));
  lre3d.setObject3DParent(o3dRightWall);
  getDeferredCache().addLine(lre3d);
}
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
}
if (floorFill) {
for (int k=0; k < za.size() - 1; k++) {
for (int j=0; j < doaMinor.length - 1; j++) {
if (ChartUtil.mathGE(za.getCoordinate(k) + doaMinor[j],za.getCoordinate(k + 1))) {
continue;
}
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k) + doaMinor[j]));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
int iDirection=sc.getDirection() == IConstants.BACKWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],da.getCoordinate(j + 1))) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],da.getCoordinate(j + 1)))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k] + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
x=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
vnext+=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(x + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(x - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x + iDirection * doaMinor[k],dY1));
lre.setEnd(goFactory.createLocation(x + iDirection * doaMinor[k],dY2));
ipr.drawLine(lre);
}
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
int iDirection=sc.getDirection() != IConstants.FORWARD ? -1 : 1;
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j) - pwa.getSeriesThickness();
vnext=da.getCoordinate(j + 1) - pwa.getSeriesThickness();
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + iDirection * doaMinor[k] + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
}
for (int j=0; j < da.size() - 1; j++) {
if ((j == 0 || j == da.size() - 2) && sc.isCategoryScale() && !sc.isTickBetweenCategories()) {
continue;
}
y=da.getCoordinate(j);
vnext=da.getCoordinate(j + 1);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
vnext-=pwa.getSeriesThickness();
}
for (int k=0; k < doaMinor.length; k++) {
if ((iDirection == 1 && ChartUtil.mathGE(y + doaMinor[k],vnext)) || (iDirection == -1 && ChartUtil.mathLE(y - doaMinor[k],vnext))) {
continue;
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y + iDirection * doaMinor[k]));
lre.setEnd(goFactory.createLocation(dX2,y + iDirection * doaMinor[k]));
ipr.drawLine(lre);
}
}
}
}
for (int i=0; i < oaxa.length; i++) {
final int STEP_NUMBER=oaxa[i].getModelAxis().getScale().getMajorGridsStepNumber();
lia=oaxa[i].getGrid().getLineAttributes(IConstants.MAJOR);
if (lia == null || !lia.isVisible()) {
continue;
}
AutoScale sc=oaxa[i].getScale();
if (isDimension3D()) {
Line3DRenderEvent lre3d=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),Line3DRenderEvent.class);
lre3d.setLineAttributes(lia);
switch (oaxa[i].getAxisType()) {
case IConstants.BASE_AXIS:
AxisTickCoordinates xa=scPrimaryBase.getTickCordinates();
if (floorFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < xa.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart,dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(xa.getCoordinate(k),dYStart + (orthogonalTickCount - 1) * yStep,dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ORTHOGONAL_AXIS:
AxisTickCoordinates ya=scPrimaryOrthogonal.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart + (ancillaryTickCount - 1) * zStep));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (rightWallFill) {
for (int k=0; k < ya.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,ya.getCoordinate(k),dZStart));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,ya.getCoordinate(k),dZStart));
lre3d.setObject3DParent(o3dRightWall);
getDeferredCache().addLine(lre3d);
}
}
break;
case IConstants.ANCILLARY_AXIS:
AxisTickCoordinates za=scAncillaryBase.getTickCordinates();
if (leftWallFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart,dYStart + (orthogonalTickCount - 1) * yStep,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dLeftWall);
getDeferredCache().addLine(lre3d);
}
}
if (floorFill) {
for (int k=0; k < za.size(); k+=STEP_NUMBER) {
lre3d.setStart3D(goFactory.createLocation3D(dXStart,dYStart,za.getCoordinate(k)));
lre3d.setEnd3D(goFactory.createLocation3D(dXStart + (baseTickCount - 1) * xStep,dYStart,za.getCoordinate(k)));
lre3d.setObject3DParent(o3dFloor);
getDeferredCache().addLine(lre3d);
}
}
break;
default :
break;
}
}
 else if (oaxa[i].getOrientation() == IConstants.HORIZONTAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dY2=bo.getTop() + 1, dY1=bo.getTop() + bo.getHeight() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1 + pwa.getSeriesThickness()));
lre.setEnd(goFactory.createLocation(x + pwa.getSeriesThickness(),dY1));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getLeft() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
x=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
x+=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(x,dY1));
lre.setEnd(goFactory.createLocation(x,dY2));
ipr.drawLine(lre);
}
}
 else if (oaxa[i].getOrientation() == IConstants.VERTICAL) {
AxisTickCoordinates da=sc.getTickCordinates();
double dX1=bo.getLeft() + 1, dX2=bo.getLeft() + bo.getWidth() - 2;
if (pwa.getDimension() == IConstants.TWO_5_D) {
for (int j=0; j < da.size(); j++) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=(da.getCoordinate(j) - pwa.getSeriesThickness());
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX1 - pwa.getSeriesThickness(),y + pwa.getSeriesThickness()));
ipr.drawLine(lre);
}
}
for (int j=0; j < da.size(); j+=STEP_NUMBER) {
if (j == 0 && insCA.getBottom() < lia.getThickness()) continue;
if (j == da.size() - 1 && sc.isCategoryScale() && !sc.isTickBetweenCategories()) continue;
y=da.getCoordinate(j);
if (pwa.getDimension() == IConstants.TWO_5_D) {
y-=pwa.getSeriesThickness();
}
lre=((EventObjectCache)ipr).getEventObject(StructureSource.createPlot(p),LineRenderEvent.class);
lre.setLineAttributes(lia);
lre.setStart(goFactory.createLocation(dX1,y));
lre.setEnd(goFactory.createLocation(dX2,y));
ipr.drawLine(lre);
}
}
}
if (!isDimension3D() && p.getClientArea().getOutline().isVisible()) {
rre.setBounds(bo);
rre.setOutline(ca.getOutline());
ipr.drawRectangle(rre);
}
}",0.9891513982642236
67922,"/** 
 * This method renders the bar graphic elements superimposed over the plot background and any previously rendered series' graphic elements.
 */
public void renderPlot(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  if (!p.isVisible()) {
    return;
  }
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  if (bFirstInSequence) {
    renderBackground(ipr,p);
    renderAxesStructure(ipr,p);
  }
  if (getSeries() != null || ChartUtil.isDataEmpty(rtc)) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES,getSeries());
    if (p.getClientArea().isVisible()) {
      renderSeries(ipr,p,srh);
    }
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_SERIES,getSeries());
    renderAxesDecoration(ipr,srh);
  }
  if (bLastInSequence) {
    final Location panningOffset=getPanningOffset();
    try {
      if (isDimension3D()) {
        fDeferredCacheManager.process3DEvent(null,get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    final AllAxes aax=pwa.getAxes();
    final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < aax.getOverlayCount(); i++) {
      oaxa[2 + i]=aax.getOverlay(i);
    }
    if (aax.getAncillaryBase() != null) {
      oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
    }
    renderAxesLabels(ipr,p,oaxa);
    try {
      if (isDimension3D()) {
        getDeferredCache().process3DEvent(get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      getDeferredCache().flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}","/** 
 * This method renders the bar graphic elements superimposed over the plot background and any previously rendered series' graphic elements.
 */
@Override public void renderPlot(IPrimitiveRenderer ipr,Plot p) throws ChartException {
  if (!p.isVisible()) {
    return;
  }
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final PlotWithAxes pwa=(PlotWithAxes)getComputations();
  if (bFirstInSequence) {
    renderBackground(ipr,p);
    renderAxesStructure(ipr,p);
  }
  if (getSeries() != null || ChartUtil.isDataEmpty(rtc)) {
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.BEFORE_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_SERIES,getSeries());
    if (p.getClientArea().isVisible()) {
      renderSeries(ipr,p,srh);
    }
    ScriptHandler.callFunction(getRunTimeContext().getScriptHandler(),ScriptHandler.AFTER_DRAW_SERIES,getSeries(),this,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_SERIES,getSeries());
    renderAxesDecoration(ipr,srh);
  }
  if (bLastInSequence) {
    renderMarkerLines();
    final Location panningOffset=getPanningOffset();
    try {
      if (isDimension3D()) {
        fDeferredCacheManager.process3DEvent(null,get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      fDeferredCacheManager.flushAll();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
    final AllAxes aax=pwa.getAxes();
    final OneAxis[] oaxa=new OneAxis[2 + aax.getOverlayCount() + (aax.getAncillaryBase() != null ? 1 : 0)];
    oaxa[0]=aax.getPrimaryBase();
    oaxa[1]=aax.getPrimaryOrthogonal();
    for (int i=0; i < aax.getOverlayCount(); i++) {
      oaxa[2 + i]=aax.getOverlay(i);
    }
    if (aax.getAncillaryBase() != null) {
      oaxa[2 + aax.getOverlayCount()]=aax.getAncillaryBase();
    }
    renderAxesLabels(ipr,p,oaxa);
    try {
      if (isDimension3D()) {
        getDeferredCache().process3DEvent(get3DEngine(),panningOffset.getX(),panningOffset.getY());
      }
      getDeferredCache().flush();
    }
 catch (    ChartException ex) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.RENDERING,ex);
    }
  }
}",0.9928234570432644
67923,"protected boolean isLastSeries(){
  if (ChartUtil.hasMultipleYAxes(getModel()) && ((ChartWithAxes)getModel()).isStudyLayout()) {
    List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>(ax.getSeriesDefinitions());
    Collections.sort(sdList,zOrderComparatorImpl);
    List<Series> seList=new ArrayList<Series>();
    for (    SeriesDefinition sd : sdList) {
      seList.addAll(sd.getRunTimeSeries());
    }
    BaseRenderer renderer=getRenderer(iSeriesIndex);
    Series s=renderer.getSeries();
    return (s == seList.get(seList.size() - 1));
  }
 else {
    if (iSeriesIndex == 0) {
      return false;
    }
    return iSeriesIndex == (iSeriesCount - 1);
  }
}","@Override protected boolean isLastSeries(){
  if (ChartUtil.hasMultipleYAxes(getModel()) && ((ChartWithAxes)getModel()).isStudyLayout()) {
    List<SeriesDefinition> sdList=new ArrayList<SeriesDefinition>(ax.getSeriesDefinitions());
    Collections.sort(sdList,zOrderComparatorImpl);
    List<Series> seList=new ArrayList<Series>();
    for (    SeriesDefinition sd : sdList) {
      seList.addAll(sd.getRunTimeSeries());
    }
    BaseRenderer renderer=getRenderer(iSeriesIndex);
    Series s=renderer.getSeries();
    return (s == seList.get(seList.size() - 1));
  }
  if (iSeriesIndex == 0) {
    return false;
  }
  return iSeriesIndex == (iSeriesCount - 1);
}",0.8729446935724963
67924,"private static int mergeBase(double[][] sa,boolean isTransposed){
  int iLen=sa.length;
  int iDst=0;
  for (int iSrc=0; iSrc < iLen; ) {
    int iEq=1;
    double dOrthTotal=sa[iSrc][1];
    double dBase=sa[iSrc][0];
    while (iSrc + iEq < iLen && sa[iSrc + iEq][0] == dBase) {
      dOrthTotal+=sa[iSrc + iEq][1];
      iEq++;
    }
    sa[iDst][1]=dOrthTotal / iEq;
    sa[iDst][0]=dBase;
    iDst++;
    iSrc+=iEq;
  }
  return iDst;
}","private static int mergeBase(double[][] sa){
  int iLen=sa.length;
  int iDst=0;
  for (int iSrc=0; iSrc < iLen; ) {
    int iEq=1;
    double dOrthTotal=sa[iSrc][1];
    double dBase=sa[iSrc][0];
    while (iSrc + iEq < iLen && sa[iSrc + iEq][0] == dBase) {
      dOrthTotal+=sa[iSrc + iEq][1];
      iEq++;
    }
    sa[iDst][1]=dOrthTotal / iEq;
    sa[iDst][0]=dBase;
    iDst++;
    iSrc+=iEq;
  }
  return iDst;
}",0.9755529685681024
67925,"/** 
 * Overridden behavior for graphic element series that are plotted along axes
 * @param bo
 * @override
 */
public final void render(Map<Series,LegendItemRenderingHints> htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final Chart cm=getModel();
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    Block bl=cm.getBlock();
    final Enumeration<Block> e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(bl);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    while (e.hasMoreElements()) {
      bl=e.nextElement();
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
        if (!bLastInSequence) {
          break;
        }
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else   if (bLastInSequence) {
    Block bl=cm.getBlock();
    final Enumeration<Block> e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    boolean bStarted=false;
    while (e.hasMoreElements()) {
      bl=e.nextElement();
      if (!bStarted && !bl.isPlot()) {
        continue;
      }
      bStarted=true;
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else {
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    Plot p=cm.getPlot();
    bge.updateBlock(p);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,p);
    renderPlot(idr,p);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,p);
  }
  if (bLastInSequence) {
    Object obj=getComputations();
    if (obj instanceof PlotWith2DAxes) {
      final PlotWith2DAxes pw2da=(PlotWith2DAxes)getComputations();
      pw2da.getStackedSeriesLookup().resetSubUnits();
    }
  }
}","/** 
 * Overridden behavior for graphic element series that are plotted along axes
 * @param bo
 */
@Override public final void render(Map<Series,LegendItemRenderingHints> htRenderers,Bounds bo) throws ChartException {
  final boolean bFirstInSequence=(iSeriesIndex == 0);
  final boolean bLastInSequence=(iSeriesIndex == iSeriesCount - 1);
  final Chart cm=getModel();
  final IDeviceRenderer idr=getDevice();
  final AbstractScriptHandler<?> sh=getRunTimeContext().getScriptHandler();
  if (bFirstInSequence) {
    Block bl=cm.getBlock();
    final Enumeration<Block> e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(bl);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
    bge.updateBlock(bl);
    renderChartBlock(idr,bl,StructureSource.createChartBlock(bl));
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
    while (e.hasMoreElements()) {
      bl=e.nextElement();
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
        if (!bLastInSequence) {
          break;
        }
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else   if (bLastInSequence) {
    Block bl=cm.getBlock();
    final Enumeration<Block> e=bl.children(true);
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    boolean bStarted=false;
    while (e.hasMoreElements()) {
      bl=e.nextElement();
      if (!bStarted && !bl.isPlot()) {
        continue;
      }
      bStarted=true;
      bge.updateBlock(bl);
      if (bl instanceof Plot) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderPlot(idr,(Plot)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof TitleBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderTitle(idr,(TitleBlock)bl);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof LabelBlock) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLabel(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else       if (bl instanceof Legend) {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderLegend(idr,(Legend)bl,htRenderers);
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
 else {
        ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,bl);
        renderBlock(idr,bl,StructureSource.createUnknown(bl));
        ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,bl,getRunTimeContext().getScriptContext());
        getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,bl);
      }
    }
  }
 else {
    final BlockGenerationEvent bge=new BlockGenerationEvent(this);
    Plot p=cm.getPlot();
    bge.updateBlock(p);
    ScriptHandler.callFunction(sh,ScriptHandler.BEFORE_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.BEFORE_DRAW_BLOCK,p);
    renderPlot(idr,p);
    ScriptHandler.callFunction(sh,ScriptHandler.AFTER_DRAW_BLOCK,p,getRunTimeContext().getScriptContext());
    getRunTimeContext().notifyStructureChange(IStructureDefinitionListener.AFTER_DRAW_BLOCK,p);
  }
  if (bLastInSequence) {
    Object obj=getComputations();
    if (obj instanceof PlotWith2DAxes) {
      final PlotWith2DAxes pw2da=(PlotWith2DAxes)getComputations();
      pw2da.getStackedSeriesLookup().resetSubUnits();
    }
  }
}",0.9992874263134028
67926,"protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_MARKER_ICON);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
  c.pack();
  preview();
  Point size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  getShell().setSize(size.x,size.y);
  UIHelper.centerOnScreen(getShell());
  return c;
}","protected Control createContents(Composite parent){
  ChartUIUtil.bindHelp(parent,ChartHelpContextIds.DIALOG_MARKER_ICON);
  getShell().setText(Messages.getString(""String_Node_Str""));
  Control c=super.createContents(parent);
  if (icon instanceof EmbeddedImage) {
    btnEmbeddedImage.setSelection(true);
    switchTo(EMBEDDED_TYPE);
  }
 else   if (icon instanceof Image) {
    try {
      if (""String_Node_Str"".equals(new URL(((Image)icon).getURL()).getProtocol())) {
        btnLocal.setSelection(true);
        switchTo(LOCAL_TYPE);
      }
    }
 catch (    MalformedURLException e) {
    }
  }
  c.pack();
  preview();
  Point size=getShell().computeSize(SWT.DEFAULT,SWT.DEFAULT);
  getShell().setSize(size.x,size.y);
  UIHelper.centerOnScreen(getShell());
  return c;
}",0.7972136222910217
67927,"public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    if (cm instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(cm);
  }
}","public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    previewPainter.renderModel(cm);
  }
}",0.65625
67928,"public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(getChartModel(),getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              if (cm instanceof ChartWithAxes) {
                checkDataTypeForChartWithAxes();
              }
 else {
                ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
              }
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  if (getChartModel() instanceof ChartWithAxes) {
    checkDataTypeForChartWithAxes();
  }
 else {
    ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
  }
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(getChartModel(),getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}",0.6330720418066442
67929,"public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    if (cm instanceof ChartWithAxes) {
      ChartAdapter.beginIgnoreNotifications();
      checkDataTypeForChartWithAxes();
      ChartAdapter.endIgnoreNotifications();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(cm);
  }
}","public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    previewPainter.renderModel(cm);
  }
}",0.5562913907284768
67930,"public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              if (cm instanceof ChartWithAxes) {
                ChartAdapter.beginIgnoreNotifications();
                checkDataTypeForChartWithAxes();
                ChartAdapter.endIgnoreNotifications();
              }
 else {
                ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
              }
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  if (chartModel instanceof ChartWithAxes) {
    ChartAdapter.beginIgnoreNotifications();
    checkDataTypeForChartWithAxes();
    ChartAdapter.endIgnoreNotifications();
  }
 else {
    ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
  }
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(chartModel,getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}",0.5921787709497207
67931,"private String getQueryId(IBaseQueryDefinition query){
  String id=(String)tmpQuery2QueryIdMapping.get(query);
  if (id == null) {
    return (String)query2QueryIdMapping.get(query);
  }
  return id;
}","private String getQueryId(IDataQueryDefinition query){
  String id=(String)tmpQuery2QueryIdMapping.get(query);
  if (id == null) {
    return (String)query2QueryIdMapping.get(query);
  }
  return id;
}",0.9800995024875622
67932,"/** 
 * get the query defintion from the query id
 * @param queryId
 * @return
 */
private IQueryDefinition getQuery(String queryId){
  return (IQueryDefinition)queryId2QueryMapping.get(queryId);
}","/** 
 * get the query defintion from the query id
 * @param queryId
 * @return
 */
private IDataQueryDefinition getQuery(String queryId){
  return (IDataQueryDefinition)queryId2QueryMapping.get(queryId);
}",0.9800995024875622
67933,"private String getResultsetID(String prset,long rowId,String queryId){
  String parentRSet=(prset == null) ? ""String_Node_Str"" : prset;
  String rsmeta=parentRSet + ""String_Node_Str"" + rowId+ ""String_Node_Str""+ queryId;
  return (String)rssetIdMapping.get(rsmeta);
}","private String getResultsetID(String prset,String rowId,String queryId){
  String parentRSet=(prset == null) ? ""String_Node_Str"" : prset;
  String rsmeta=parentRSet + ""String_Node_Str"" + rowId+ ""String_Node_Str""+ queryId;
  return (String)rssetIdMapping.get(rsmeta);
}",0.9887640449438202
67934,"/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData(){
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        rssetIdMapping.put(this.getDteMetaInfoString(rsetRelation),rsetRelation[3]);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IQueryDefinition query=getQuery(queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            ReportItemDesign design=(ReportItemDesign)report.getReportItemToQueryMap().get(query);
            ReportItemHandle handle=(ReportItemHandle)design.getHandle();
            if (!handle.allowExport()) {
              continue;
            }
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData,handle,executionContext.getLocale());
            resultMetaList.add(resultItem);
            rsetName2IdMapping.put(rsetName,rsetId);
            rsetId2queryIdMapping.put(rsetId,queryId);
          }
        }
      }
    }
    if (isCubeExportEnabled && !cubeNameList.isEmpty()) {
      for (Iterator itr=cubeNameList.iterator(); itr.hasNext(); ) {
        String name=(String)itr.next();
        resultMetaList.add(new ResultSetItem(name,null));
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}","/** 
 * load map from query id to result set id from report document.
 */
private void loadResultSetMetaData(){
  try {
    HashMap query2ResultMetaData=report.getResultMetaData();
    IDocArchiveReader reader=reportDocReader.getArchive();
    HashMap queryCounts=new HashMap();
    ArrayList result=DteMetaInfoIOUtil.loadDteMetaInfo(reader);
    if (result != null) {
      Set dteMetaInfoSet=new HashSet();
      for (int i=0; i < result.size(); i++) {
        String[] rsetRelation=(String[])result.get(i);
        rssetIdMapping.put(this.getDteMetaInfoString(rsetRelation),rsetRelation[3]);
        String dteMetaInfoString=getDteMetaInfoString(rsetRelation);
        if (dteMetaInfoSet.contains(dteMetaInfoString)) {
          continue;
        }
        dteMetaInfoSet.add(dteMetaInfoString);
        String queryId=rsetRelation[2];
        String rsetId=rsetRelation[3];
        IDataQueryDefinition query=getQuery(queryId);
        int count=-1;
        Integer countObj=(Integer)queryCounts.get(queryId);
        if (countObj != null) {
          count=countObj.intValue();
        }
        count++;
        String rsetName=getQueryName(queryId);
        if (count > 0) {
          rsetName=rsetName + ""String_Node_Str"" + count;
        }
        queryCounts.put(queryId,new Integer(count));
        if (null != query2ResultMetaData) {
          ResultMetaData metaData=(ResultMetaData)query2ResultMetaData.get(query);
          if (metaData != null && metaData.getColumnCount() > 0) {
            ReportItemDesign design=(ReportItemDesign)report.getReportItemToQueryMap().get(query);
            ReportItemHandle handle=(ReportItemHandle)design.getHandle();
            if (!handle.allowExport()) {
              continue;
            }
            IResultSetItem resultItem=new ResultSetItem(rsetName,metaData,handle,executionContext.getLocale());
            resultMetaList.add(resultItem);
            rsetName2IdMapping.put(rsetName,rsetId);
            rsetId2queryIdMapping.put(rsetId,queryId);
          }
        }
      }
    }
    if (isCubeExportEnabled && !cubeNameList.isEmpty()) {
      for (Iterator itr=cubeNameList.iterator(); itr.hasNext(); ) {
        String name=(String)itr.next();
        resultMetaList.add(new ResultSetItem(name,null));
      }
    }
  }
 catch (  IOException ioe) {
    logger.log(Level.SEVERE,ioe.getMessage(),ioe);
  }
}",0.999157184997893
67935,"private void prepareMetaData() throws EngineException {
  if (isMetaDataPrepared == true)   return;
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      query2QueryIdMapping.put(query,queryId);
    }
 else     if (baseQuery instanceof IBaseCubeQueryDefinition) {
      IBaseCubeQueryDefinition query=(IBaseCubeQueryDefinition)baseQuery;
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      DesignElementHandle cube=item.getHandle();
      String name=cube.getStringProperty(ReportItemHandle.CUBE_PROP);
      cubeNameList.add(name);
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}","private void prepareMetaData() throws EngineException {
  if (isMetaDataPrepared == true)   return;
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    String queryId=(String)entry.getValue();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
    }
 else     if (baseQuery instanceof IBaseCubeQueryDefinition) {
      IBaseCubeQueryDefinition query=(IBaseCubeQueryDefinition)baseQuery;
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      DesignElementHandle cube=item.getHandle();
      String name=cube.getStringProperty(ReportItemHandle.CUBE_PROP);
      cubeNameList.add(name);
      queryId2NameMapping.put(queryId,name);
    }
    queryId2QueryMapping.put(queryId,baseQuery);
    query2QueryIdMapping.put(baseQuery,queryId);
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}",0.8970266040688576
67936,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (isDelete()) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.9781818181818182
67937,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (isDelete()) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.9847133757961783
67938,"/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    gd.widthHint=200;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,null);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}","/** 
 * Create composite of sort area.
 * @param cmpBasic
 */
public void createSortArea(Composite parent){
  cmpSortArea=new Group(parent,SWT.NONE);
{
    cmpSortArea.setText(Messages.getString(""String_Node_Str""));
    cmpSortArea.setLayout(new GridLayout(3,false));
    GridData gd=new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan=2;
    gd.widthHint=300;
    cmpSortArea.setLayoutData(gd);
  }
  lblSorting=new Label(cmpSortArea,SWT.NONE);
  lblSorting.setText(Messages.getString(""String_Node_Str""));
  cmbSorting=new Combo(cmpSortArea,SWT.DROP_DOWN | SWT.READ_ONLY);
  GridData gdCMBSorting=new GridData(GridData.FILL_HORIZONTAL);
  cmbSorting.setLayoutData(gdCMBSorting);
  cmbSorting.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortExpr=new Label(cmpSortArea,SWT.NONE);
  lblSortExpr.setText(Messages.getString(""String_Node_Str""));
  cmbSortExpr=new Combo(cmpSortArea,SWT.DROP_DOWN);
  GridData gdCMBSortExpr=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortExpr.setLayoutData(gdCMBSortExpr);
  cmbSortExpr.addListener(SWT.Selection,this);
  cmbSortExpr.addFocusListener(new FocusAdapter(){
    public void focusLost(    FocusEvent e){
      updateSortKey();
    }
  }
);
  try {
    btnSortExprBuilder=(IExpressionButton)wizardContext.getUIServiceProvider().invoke(IUIServiceProvider.Command.EXPRESS_BUTTON_CREATE,cmpSortArea,cmbSortExpr,wizardContext.getExtendedItem(),IUIServiceProvider.COMMAND_EXPRESSION_DATA_BINDINGS,null);
    Query query=getSeriesDefinitionForProcessing().getSortKey();
    if (query != null) {
      btnSortExprBuilder.setExpression(query.getDefinition());
    }
  }
 catch (  ChartException e) {
    WizardBase.displayException(e);
  }
  lblSortLocale=new Label(cmpSortArea,SWT.NONE);
  lblSortLocale.setText(Messages.getString(""String_Node_Str""));
  cmbSortLocale=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  GridData gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortLocale.setLayoutData(gd);
  cmbSortLocale.setVisibleItemCount(30);
  cmbSortLocale.addListener(SWT.Selection,this);
  new Label(cmpSortArea,SWT.NONE);
  lblSortStrength=new Label(cmpSortArea,SWT.NONE);
  lblSortStrength.setText(Messages.getString(""String_Node_Str""));
  cmbSortStrength=new Combo(cmpSortArea,SWT.READ_ONLY | SWT.BORDER);
  gd=new GridData(GridData.FILL_HORIZONTAL);
  cmbSortStrength.setLayoutData(gd);
  cmbSortStrength.setVisibleItemCount(30);
  cmbSortStrength.addListener(SWT.Selection,this);
  if (isInheritColumnsGroups()) {
    disableSorting();
  }
}",0.9996044303797468
67939,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawText(text,textX,textY,width,height,textStyle.getFontInfo(),textStyle.getColor(),textStyle.isRtl(),link);
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  FontInfo fontInfo=textStyle.getFontInfo();
  float descend=fontInfo.getBaseFont().getFontDescriptor(BaseFont.DESCENT,fontInfo.getFontSize());
  writer.drawText(text,textX,textY,width,height + descend * 0.6f,fontInfo,textStyle.getColor(),textStyle.isRtl(),link);
}",0.6560509554140127
67940,"private void parsePageSize(IReportContent report){
  reportDpi=PropertyUtil.getRenderDpi(report,0);
  SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  this.pageWidth=ExcelUtil.convertDimensionType(masterPage.getPageWidth(),0,reportDpi);
  int leftmargin=ExcelUtil.convertDimensionType(masterPage.getLeftMargin(),pageWidth,reportDpi);
  int rightmargin=ExcelUtil.convertDimensionType(masterPage.getRightMargin(),pageWidth,reportDpi);
  this.contentwidth=pageWidth - leftmargin - rightmargin;
  this.pageHeight=ExcelUtil.convertDimensionType(masterPage.getPageHeight(),0,reportDpi);
}","private void parsePageSize(IReportContent report){
  Object dpi=report.getReportContext().getRenderOption().getOption(IRenderOption.RENDER_DPI);
  int renderDpi=0;
  if (dpi != null && dpi instanceof Integer) {
    renderDpi=((Integer)dpi).intValue();
  }
  reportDpi=PropertyUtil.getRenderDpi(report,renderDpi);
  SimpleMasterPageDesign masterPage=(SimpleMasterPageDesign)report.getDesign().getPageSetup().getMasterPage(0);
  this.pageWidth=ExcelUtil.convertDimensionType(masterPage.getPageWidth(),0,reportDpi);
  int leftmargin=ExcelUtil.convertDimensionType(masterPage.getLeftMargin(),pageWidth,reportDpi);
  int rightmargin=ExcelUtil.convertDimensionType(masterPage.getRightMargin(),pageWidth,reportDpi);
  this.contentwidth=pageWidth - leftmargin - rightmargin;
  this.pageHeight=ExcelUtil.convertDimensionType(masterPage.getPageHeight(),0,reportDpi);
}",0.8569527611443779
67941,"public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}","public void addImageData(IImageContent image,IStyle style,HyperlinkDef link,BookmarkDef bookmark){
  int imageWidthDpi;
  int imageHeightDpi;
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),image.getURI(),image.getMIMEType(),image.getExtension());
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getWidth() == null) {
      imageWidthDpi=PropertyUtil.getImageDpi(image,imageFileWidthDpi,0);
    }
 else {
      imageWidthDpi=reportDpi;
    }
    if (image.getHeight() == null) {
      imageHeightDpi=PropertyUtil.getImageDpi(image,imageFileHeightDpi,0);
    }
 else {
      imageHeightDpi=reportDpi;
    }
  }
 catch (  IOException ex) {
    imageWidthDpi=reportDpi;
    imageHeightDpi=reportDpi;
  }
  XlsContainer container=getCurrentContainer();
  ContainerSizeInfo parentSizeInfo=container.getSizeInfo();
  ColumnsInfo imageColumnsInfo=LayoutUtil.createImage(image,parentSizeInfo.getWidth(),imageWidthDpi);
  splitColumns(imageColumnsInfo,parentSizeInfo);
  ContainerSizeInfo imageSize=new ContainerSizeInfo(parentSizeInfo.getStartCoordinate(),imageColumnsInfo.getTotalWidth());
  StyleEntry entry=engine.getStyle(style,imageSize,parentSizeInfo,getParentStyle(container));
  setlinkStyle(entry,link);
  SheetData data=createImageData(image,entry,container,imageHeightDpi,imageWidthDpi);
  data.setHyperlinkDef(link);
  data.setBookmark(bookmark);
  data.setStartX(imageSize.getStartCoordinate());
  data.setEndX(imageSize.getEndCoordinate());
  addData(data);
}",0.9374209860935524
67942,"public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  double height=WordUtil.convertImageSize(image.getHeight(),0,reportDpi);
  double width=WordUtil.convertImageSize(image.getWidth(),0,reportDpi);
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight(),PropertyUtil.getImageDpi(image,imageFileHeightDpi,0));
    width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth(),PropertyUtil.getImageDpi(image,imageFileWidthDpi,0));
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
  }
}","public void startImage(IImageContent image){
  IStyle style=image.getComputedStyle();
  InlineFlag inlineFlag=getInlineFlag(style);
  String uri=image.getURI();
  String mimeType=image.getMIMEType();
  String extension=image.getExtension();
  String altText=image.getAltText();
  double height=WordUtil.convertImageSize(image.getHeight(),0,reportDpi);
  double width=WordUtil.convertImageSize(image.getWidth(),0,reportDpi);
  context.addContainer(false);
  if (FlashFile.isFlash(mimeType,uri,extension)) {
    if (altText == null) {
      altText=messageFlashObjectNotSupported;
    }
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
    return;
  }
  try {
    Image imageInfo=EmitterUtil.parseImage(image,image.getImageSource(),uri,mimeType,extension);
    byte[] data=imageInfo.getData();
    if (data == null || data.length == 0) {
      wordWriter.drawImage(null,0.0,0.0,null,style,inlineFlag,altText,uri);
      return;
    }
    int imageFileWidthDpi=imageInfo.getPhysicalWidthDpi() == -1 ? 0 : imageInfo.getPhysicalWidthDpi();
    int imageFileHeightDpi=imageInfo.getPhysicalHeightDpi() == -1 ? 0 : imageInfo.getPhysicalHeightDpi();
    if (image.getHeight() == null) {
      height=WordUtil.convertImageSize(image.getHeight(),imageInfo.getHeight(),PropertyUtil.getImageDpi(image,imageFileHeightDpi,0));
    }
    if (image.getWidth() == null) {
      width=WordUtil.convertImageSize(image.getWidth(),imageInfo.getWidth(),PropertyUtil.getImageDpi(image,imageFileWidthDpi,0));
    }
    writeBookmark(image);
    writeToc(image);
    HyperlinkInfo hyper=getHyperlink(image);
    wordWriter.drawImage(data,height,width,hyper,style,inlineFlag,altText,uri);
  }
 catch (  IOException e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    wordWriter.drawImage(null,height,width,null,style,inlineFlag,altText,uri);
  }
}",0.975515818431912
67943,"public void start(IReportContent report){
  reportDpi=PropertyUtil.getRenderDpi(report,0);
  this.reportContent=report;
  if (null == layoutPreference) {
    ReportDesignHandle designHandle=report.getDesign().getReportDesign();
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
    fixedLayout=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
}","public void start(IReportContent report){
  Object dpi=report.getReportContext().getRenderOption().getOption(IRenderOption.RENDER_DPI);
  int renderDpi=0;
  if (dpi != null && dpi instanceof Integer) {
    renderDpi=((Integer)dpi).intValue();
  }
  reportDpi=PropertyUtil.getRenderDpi(report,renderDpi);
  this.reportContent=report;
  if (null == layoutPreference) {
    ReportDesignHandle designHandle=report.getDesign().getReportDesign();
    if (designHandle != null) {
      String reportLayoutPreference=designHandle.getLayoutPreference();
      if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_FIXED_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED;
      }
 else       if (DesignChoiceConstants.REPORT_LAYOUT_PREFERENCE_AUTO_LAYOUT.equals(reportLayoutPreference)) {
        layoutPreference=HTMLRenderOption.LAYOUT_PREFERENCE_AUTO;
      }
    }
    fixedLayout=HTMLRenderOption.LAYOUT_PREFERENCE_FIXED.equals(layoutPreference);
  }
}",0.8798211291224147
67944,"protected static int _getDimensionValue(IContent content,DimensionType d,int dpi,int referenceLength){
  if (d.getValueType() == DimensionType.TYPE_DIMENSION) {
    String units=d.getUnits();
    if (units.equals(EngineIRConstants.UNITS_PT) || units.equals(EngineIRConstants.UNITS_CM) || units.equals(EngineIRConstants.UNITS_MM)|| units.equals(EngineIRConstants.UNITS_PC)|| units.equals(EngineIRConstants.UNITS_IN)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT) * 1000;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PX)) {
      if (dpi == 0) {
        dpi=96;
      }
      double point=d.getMeasure() / dpi * 72000d;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PERCENTAGE)) {
      double point=referenceLength * d.getMeasure() / 100.0;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_EM) || units.equals(EngineIRConstants.UNITS_EX)) {
      int size=9000;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        CSSValue fontSize=style.getProperty(IStyle.STYLE_FONT_SIZE);
        size=getDimensionValue(fontSize);
      }
      double point=size * d.getMeasure();
      return (int)point;
    }
  }
 else   if (d.getValueType() == DimensionType.TYPE_CHOICE) {
    String choice=d.getChoice();
    if (IStyle.CSS_MEDIUM_VALUE.equals(choice)) {
      return 3000;
    }
 else     if (IStyle.CSS_THIN_VALUE.equals(choice)) {
      return 1000;
    }
 else     if (IStyle.CSS_THICK_VALUE.equals(choice)) {
      return 5000;
    }
  }
  return 0;
}","protected static int _getDimensionValue(IContent content,DimensionType d,int renderOptionDpi,int referenceLength){
  if (d.getValueType() == DimensionType.TYPE_DIMENSION) {
    String units=d.getUnits();
    if (units.equals(EngineIRConstants.UNITS_PT) || units.equals(EngineIRConstants.UNITS_CM) || units.equals(EngineIRConstants.UNITS_MM)|| units.equals(EngineIRConstants.UNITS_PC)|| units.equals(EngineIRConstants.UNITS_IN)) {
      double point=d.convertTo(EngineIRConstants.UNITS_PT) * 1000;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PX)) {
      double point=d.getMeasure() / getRenderDpi(content,renderOptionDpi) * 72000d;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_PERCENTAGE)) {
      double point=referenceLength * d.getMeasure() / 100.0;
      return (int)point;
    }
 else     if (units.equals(EngineIRConstants.UNITS_EM) || units.equals(EngineIRConstants.UNITS_EX)) {
      int size=9000;
      if (content != null) {
        IStyle style=content.getComputedStyle();
        CSSValue fontSize=style.getProperty(IStyle.STYLE_FONT_SIZE);
        size=getDimensionValue(fontSize);
      }
      double point=size * d.getMeasure();
      return (int)point;
    }
  }
 else   if (d.getValueType() == DimensionType.TYPE_CHOICE) {
    String choice=d.getChoice();
    if (IStyle.CSS_MEDIUM_VALUE.equals(choice)) {
      return 3000;
    }
 else     if (IStyle.CSS_THIN_VALUE.equals(choice)) {
      return 1000;
    }
 else     if (IStyle.CSS_THICK_VALUE.equals(choice)) {
      return 5000;
    }
  }
  return 0;
}",0.9612742036227356
67945,"public static int getImageDimensionValue(IContent content,DimensionType d,int dpi,int referenceLength){
  if (d == null) {
    return -1;
  }
  try {
    return _getDimensionValue(content,d,dpi,referenceLength);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return -1;
  }
}","public static int getImageDimensionValue(IContent content,DimensionType d,int renderOptionDpi,int referenceLength){
  if (d == null) {
    return -1;
  }
  try {
    return _getDimensionValue(content,d,renderOptionDpi,referenceLength);
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getLocalizedMessage());
    return -1;
  }
}",0.9573170731707316
67946,"protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  Image imageObject=null;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    try {
      imageObject=Image.getInstance(data);
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getLocalizedMessage());
    }
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),resolutionX,pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),resolutionY,0);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}","protected Dimension getSpecifiedDimension(IImageContent content,int pWidth,boolean scale){
  int imageFileDpiX=0;
  int imageFileDpiY=0;
  Image imageObject=null;
  if (reader.getType() == ImageReader.TYPE_IMAGE_OBJECT || reader.getType() == ImageReader.TYPE_CONVERTED_SVG_OBJECT) {
    try {
      imageObject=Image.getInstance(data);
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,e.getLocalizedMessage());
    }
    if (imageObject != null) {
      imageFileDpiX=imageObject.getDpiX();
      imageFileDpiY=imageObject.getDpiY();
    }
  }
  resolutionX=PropertyUtil.getImageDpi(content,imageFileDpiX,context.getDpi());
  resolutionY=PropertyUtil.getImageDpi(content,imageFileDpiY,context.getDpi());
  try {
    intrinsic=getIntrinsicDimension(content,imageObject);
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getLocalizedMessage());
  }
  int specifiedWidth=PropertyUtil.getImageDimensionValue(content,content.getWidth(),context.getDpi(),pWidth);
  int specifiedHeight=PropertyUtil.getImageDimensionValue(content,content.getHeight(),context.getDpi(),0);
  Dimension dim=new Dimension(DEFAULT_WIDHT,DEFAULT_HEIGHT);
  if (intrinsic == null) {
    dim.setDimension(specifiedWidth == -1 ? DEFAULT_WIDHT : specifiedWidth,specifiedHeight == -1 ? DEFAULT_HEIGHT : specifiedHeight);
    return dim;
  }
  if (scale) {
    double ratio=intrinsic.getRatio();
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,(int)(specifiedWidth / ratio));
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension((int)(specifiedHeight * ratio),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
 else {
    if (specifiedWidth >= 0) {
      if (specifiedHeight >= 0) {
        dim.setDimension(specifiedWidth,specifiedHeight);
      }
 else {
        dim.setDimension(specifiedWidth,intrinsic.getHeight());
      }
    }
 else {
      if (specifiedHeight >= 0) {
        dim.setDimension(intrinsic.getWidth(),specifiedHeight);
      }
 else {
        dim.setDimension(intrinsic.getWidth(),intrinsic.getHeight());
      }
    }
  }
  return dim;
}",0.9881318681318682
67947,"private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,executionContext.getAppContext());
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      ;
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  EngineException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    executionContext.addException(e);
  }
  isMetaDataPrepared=true;
}","private void prepareMetaData() throws EngineException {
  if (isMetaDataPrepared == true)   return;
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,executionContext.getAppContext());
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IBaseQueryDefinition baseQuery=(IBaseQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      ;
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  EngineException e) {
    logger.log(Level.WARNING,e.getMessage(),e);
    executionContext.addException(e);
  }
  isMetaDataPrepared=true;
}",0.9897435897435898
67948,"private void prepareMetaData(){
  if (isMetaDataPrepared == true)   return;
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      query2QueryIdMapping.put(query,queryId);
    }
 else     if (baseQuery instanceof IBaseCubeQueryDefinition) {
      IBaseCubeQueryDefinition query=(IBaseCubeQueryDefinition)baseQuery;
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      DesignElementHandle cube=item.getHandle();
      String name=cube.getStringProperty(ReportItemHandle.CUBE_PROP);
      cubeNameList.add(name);
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}","private void prepareMetaData() throws EngineException {
  if (isMetaDataPrepared == true)   return;
  Map appContext=executionContext.getAppContext();
  IDataEngine dataEngine=executionContext.getDataEngine();
  dataEngine.prepare(report,appContext);
  HashMap queryIds=report.getQueryIDs();
  HashMap query2itemMapping=report.getReportItemToQueryMap();
  Iterator iter=queryIds.entrySet().iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    IDataQueryDefinition baseQuery=(IDataQueryDefinition)entry.getKey();
    if (baseQuery instanceof IQueryDefinition) {
      IQueryDefinition query=(IQueryDefinition)baseQuery;
      String queryId=(String)entry.getValue();
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      String queryName=item.getName();
      if (queryName == null) {
        queryName=""String_Node_Str"" + item.getID();
      }
      queryId2NameMapping.put(queryId,queryName);
      queryId2QueryMapping.put(queryId,query);
      query2QueryIdMapping.put(query,queryId);
    }
 else     if (baseQuery instanceof IBaseCubeQueryDefinition) {
      IBaseCubeQueryDefinition query=(IBaseCubeQueryDefinition)baseQuery;
      ReportItemDesign item=(ReportItemDesign)query2itemMapping.get(query);
      DesignElementHandle cube=item.getHandle();
      String name=cube.getStringProperty(ReportItemHandle.CUBE_PROP);
      cubeNameList.add(name);
    }
  }
  try {
    loadResultSetMetaData();
  }
 catch (  Exception e) {
    logger.log(Level.WARNING,e.getMessage(),e);
  }
  isMetaDataPrepared=true;
}",0.9923175416133164
67949,"public DataRequestSession getDataSession(){
  return executionContext.getDataEngine().getDTESession();
}","public DataRequestSession getDataSession() throws EngineException {
  return executionContext.getDataEngine().getDTESession();
}",0.896551724137931
67950,"private DataRequestSession createDataSession(DataSetHandle dataSet){
  IDataEngine dataEngine=executionContext.getDataEngine();
  DataRequestSession dteSession=getDataSession();
  dataEngine.defineDataSet(dataSet);
  return dteSession;
}","private DataRequestSession createDataSession(DataSetHandle dataSet) throws EngineException {
  IDataEngine dataEngine=executionContext.getDataEngine();
  DataRequestSession dteSession=getDataSession();
  dataEngine.defineDataSet(dataSet);
  return dteSession;
}",0.9518072289156626
67951,"private static String getResultSetID(ExecutionContext context,String parent,String rowId,IDataQueryDefinition query){
  IDataEngine engine=context.getDataEngine();
  if (engine instanceof AbstractDataEngine) {
    AbstractDataEngine dataEngine=(AbstractDataEngine)engine;
    String queryId=dataEngine.getQueryID(query);
    String result=dataEngine.getResultID(parent,rowId,queryId);
    if (result == null) {
      result=dataEngine.getResultIDByRowID(parent,rowId,queryId);
    }
    return result;
  }
  return null;
}","private static String getResultSetID(ExecutionContext context,String parent,String rowId,IDataQueryDefinition query){
  IDataEngine engine=null;
  try {
    engine=context.getDataEngine();
  }
 catch (  EngineException e) {
    context.addException(e);
  }
  if (engine != null && engine instanceof AbstractDataEngine) {
    AbstractDataEngine dataEngine=(AbstractDataEngine)engine;
    String queryId=dataEngine.getQueryID(query);
    String result=dataEngine.getResultID(parent,rowId,queryId);
    if (result == null) {
      result=dataEngine.getResultIDByRowID(parent,rowId,queryId);
    }
    return result;
  }
  return null;
}",0.903896103896104
67952,"/** 
 * @return Returns the dataEngine.
 */
public IDataEngine getDataEngine(){
  if (dataEngine == null) {
    openDataEngine();
  }
  return dataEngine;
}","/** 
 * @return Returns the dataEngine.
 */
public IDataEngine getDataEngine() throws EngineException {
  if (dataEngine == null) {
    openDataEngine();
  }
  return dataEngine;
}",0.9285714285714286
67953,"public void openDataEngine(){
  if (dataEngine == null) {
    try {
      dataEngine=engine.getDataEngineFactory().createDataEngine(this,needOutputResultSet);
    }
 catch (    BirtException bex) {
      addException(bex);
    }
catch (    Exception ex) {
      addException(new EngineException(ex.getLocalizedMessage(),ex));
    }
  }
}","public void openDataEngine() throws EngineException {
  if (dataEngine == null) {
    try {
      dataEngine=engine.getDataEngineFactory().createDataEngine(this,needOutputResultSet);
    }
 catch (    Exception e) {
      throw new EngineException(""String_Node_Str"",e);
    }
  }
}",0.6375404530744336
67954,"public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  IDataEngine dataEngine=context.getDataEngine();
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    try {
      IBaseResultSet rset=dataEngine.execute(parent,query,handle,useCache);
      context.setResultSet(rset);
      return rset;
    }
 catch (    BirtException ex) {
      getLogger().log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(this.getDesignHandle(),new EngineException(ex));
      return null;
    }
  }
  return null;
}","public IBaseResultSet executeQuery(IBaseResultSet parent,IDataQueryDefinition query,Object handle){
  if (query != null) {
    boolean useCache=false;
    if (handle instanceof ReportItemHandle) {
      ReportItemHandle referenceHandle=((ReportItemHandle)handle).getDataBindingReference();
      if (referenceHandle != null) {
        useCache=true;
      }
    }
    try {
      IDataEngine dataEngine=context.getDataEngine();
      IBaseResultSet rset=dataEngine.execute(parent,query,handle,useCache);
      context.setResultSet(rset);
      return rset;
    }
 catch (    BirtException ex) {
      getLogger().log(Level.SEVERE,ex.getMessage(),ex);
      context.addException(this.getDesignHandle(),new EngineException(ex));
      return null;
    }
  }
  return null;
}",0.6415584415584416
67955,"public IReportContent execute(){
  reportContent=new ReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  try {
    TOCBuilder tocBuilder=new TOCBuilder(context);
    reportContent.setTOCTree(tocBuilder.getTOCTree());
    context.setTOCBuilder(tocBuilder);
  }
 catch (  IOException ex) {
    context.addException(new EngineException(""String_Node_Str"",ex));
  }
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    long reportletId=dataSource.getElementID();
    if (reportletId != -1) {
      reportletExecutor=new ReportletItemExecutor(manager);
    }
  }
  Map appContext=context.getAppContext();
  context.getDataEngine().prepare(report,appContext);
  Collection<PageVariableDesign> varDesigns=report.getPageVariables();
  for (  PageVariableDesign varDesign : varDesigns) {
    String name=varDesign.getName();
    String scope=varDesign.getScope();
    PageVariable var=new PageVariable(name,scope);
    context.addPageVariable(var);
    Expression expr=varDesign.getDefaultValue();
    if (expr != null) {
      try {
        Object value=context.evaluate(expr);
        var.setDefaultValue(value);
        var.setValue(value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
  }
  if (reportletExecutor == null) {
    context.optimizeExecution();
  }
  currentItem=0;
  if (reportletExecutor != null) {
    reportletExecutor.execute();
  }
  return reportContent;
}","public IReportContent execute() throws BirtException {
  reportContent=new ReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  try {
    TOCBuilder tocBuilder=new TOCBuilder(context);
    reportContent.setTOCTree(tocBuilder.getTOCTree());
    context.setTOCBuilder(tocBuilder);
  }
 catch (  IOException ex) {
    context.addException(new EngineException(""String_Node_Str"",ex));
  }
  DocumentDataSource dataSource=context.getDataSource();
  if (dataSource != null) {
    long reportletId=dataSource.getElementID();
    if (reportletId != -1) {
      reportletExecutor=new ReportletItemExecutor(manager);
    }
  }
  Map appContext=context.getAppContext();
  context.getDataEngine().prepare(report,appContext);
  Collection<PageVariableDesign> varDesigns=report.getPageVariables();
  for (  PageVariableDesign varDesign : varDesigns) {
    String name=varDesign.getName();
    String scope=varDesign.getScope();
    PageVariable var=new PageVariable(name,scope);
    context.addPageVariable(var);
    Expression expr=varDesign.getDefaultValue();
    if (expr != null) {
      try {
        Object value=context.evaluate(expr);
        var.setDefaultValue(value);
        var.setValue(value);
      }
 catch (      BirtException ex) {
        context.addException(ex);
      }
    }
  }
  if (reportletExecutor == null) {
    context.optimizeExecution();
  }
  currentItem=0;
  if (reportletExecutor != null) {
    reportletExecutor.execute();
  }
  return reportContent;
}",0.9927774130006566
67956,"public DataRequestSession getDataRequestSession(){
  if (context != null) {
    IDataEngine dataEngine=context.getDataEngine();
    return dataEngine.getDTESession();
  }
  return null;
}","public DataRequestSession getDataRequestSession(){
  if (context != null) {
    try {
      IDataEngine dataEngine=context.getDataEngine();
      return dataEngine.getDTESession();
    }
 catch (    EngineException e) {
      context.addException(e);
    }
  }
  return null;
}",0.728448275862069
67957,"public ReportContentLoaderV1(ExecutionContext context){
  this.context=context;
  dataEngine=context.getDataEngine();
  report=context.getReport();
  reportContent=(ReportContent)ContentFactory.createReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  reportDoc=(ReportDocumentReader)context.getReportDocument();
  dataEngine.prepare(report,context.getAppContext());
}","public ReportContentLoaderV1(ExecutionContext context) throws EngineException {
  this.context=context;
  dataEngine=context.getDataEngine();
  report=context.getReport();
  reportContent=(ReportContent)ContentFactory.createReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  reportDoc=(ReportDocumentReader)context.getReportDocument();
  dataEngine.prepare(report,context.getAppContext());
}",0.9728506787330315
67958,"public ReportContentLoaderV2(ExecutionContext context){
  this.context=context;
  dataEngine=context.getDataEngine();
  report=context.getReport();
  reportContent=(ReportContent)ContentFactory.createReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  dummyReportContent=reportContent.createLabelContent();
  dummyReportContent.setStyleClass(report.getRootStyleName());
  reportDoc=context.getReportDocument();
  dataEngine.prepare(report,context.getAppContext());
  IEngineTask engineTask=context.getEngineTask();
  if (engineTask instanceof RenderTask) {
    RenderTask renderTask=(RenderTask)engineTask;
    ITreeNode tocTree=renderTask.getRawTOCTree();
    reportContent.setTOCTree(tocTree);
  }
}","public ReportContentLoaderV2(ExecutionContext context) throws EngineException {
  this.context=context;
  dataEngine=context.getDataEngine();
  report=context.getReport();
  reportContent=(ReportContent)ContentFactory.createReportContent(report);
  reportContent.setExecutionContext(context);
  context.setReportContent(reportContent);
  dummyReportContent=reportContent.createLabelContent();
  dummyReportContent.setStyleClass(report.getRootStyleName());
  reportDoc=context.getReportDocument();
  dataEngine.prepare(report,context.getAppContext());
  IEngineTask engineTask=context.getEngineTask();
  if (engineTask instanceof RenderTask) {
    RenderTask renderTask=(RenderTask)engineTask;
    ITreeNode tocTree=renderTask.getRawTOCTree();
    reportContent.setTOCTree(tocTree);
  }
}",0.984516129032258
67959,"public ReportExecutorV3(ExecutionContext context) throws IOException {
  super(context);
}","public ReportExecutorV3(ExecutionContext context) throws IOException, BirtException {
  super(context);
}",0.9230769230769232
67960,"public ReportPageExecutorV3(ExecutionContext context,List pages,boolean paged) throws IOException {
  super(context,pages,paged);
}","public ReportPageExecutorV3(ExecutionContext context,List pages,boolean paged) throws IOException, BirtException {
  super(context,pages,paged);
}",0.9458483754512635
67961,"public ReportletExecutorV3(ExecutionContext context,long offset) throws IOException {
  super(context,offset);
}","public ReportletExecutorV3(ExecutionContext context,long offset) throws IOException, BirtException {
  super(context,offset);
}",0.9372384937238494
67962,"protected AbstractReportExecutor(ExecutionContext context) throws IOException {
}","protected AbstractReportExecutor(ExecutionContext context) throws IOException, BirtException {
}",0.9152542372881356
67963,"public ReportExecutorV4(ExecutionContext context) throws IOException {
  super(context);
  bodyExecutor=new ReportBodyExecutor(manager,null);
}","public ReportExecutorV4(ExecutionContext context) throws IOException, BirtException {
  super(context);
  bodyExecutor=new ReportBodyExecutor(manager,null);
}",0.9501661129568106
67964,"public ReportPageExecutorV4(ExecutionContext context,List pages,boolean paged) throws IOException {
  super(context);
  this.outputPages.addAll(pages);
  this.paged=paged;
  pageIter=new PageRangeIterator(outputPages);
  if (!paged) {
    Fragment fragment=loadPageHints(outputPages);
    bodyExecutor=new ReportBodyExecutor(manager,fragment);
  }
}","public ReportPageExecutorV4(ExecutionContext context,List pages,boolean paged) throws IOException, BirtException {
  super(context);
  this.outputPages.addAll(pages);
  this.paged=paged;
  pageIter=new PageRangeIterator(outputPages);
  if (!paged) {
    Fragment fragment=loadPageHints(outputPages);
    bodyExecutor=new ReportBodyExecutor(manager,fragment);
  }
}",0.9789621318373072
67965,"public AbstractReportReader(ExecutionContext context) throws IOException {
}","public AbstractReportReader(ExecutionContext context) throws IOException, BirtException {
}",0.9101796407185628
67966,"/** 
 * does the output should keep the pagination. For some emitter, it will has its own pagination, so the report page reader only read out the page content and merge the contente together. The emitter will re-paginate the content again. Such as output PDF using HTML paginhints. Some emitter in the otherside, will use the same pagination with the page hint. For those emitter, the output will include the master pages. such as output HTML with the HTML emitter.
 * @param context context used to read the report.
 * @param pages page list
 * @param keepPaginate should the output keep pagianted.
 */
public ReportPageReader(ExecutionContext context,List pages,boolean paged) throws IOException {
  super(context);
  outputPages.addAll(pages);
  this.paged=paged;
  pageIter=new PageRangeIterator(outputPages);
  if (!paged) {
    Fragment fragment=loadPageFragment(outputPages);
    bodyExecutor=new BodyReader(this,fragment);
  }
}","/** 
 * does the output should keep the pagination. For some emitter, it will has its own pagination, so the report page reader only read out the page content and merge the contente together. The emitter will re-paginate the content again. Such as output PDF using HTML paginhints. Some emitter in the otherside, will use the same pagination with the page hint. For those emitter, the output will include the master pages. such as output HTML with the HTML emitter.
 * @param context context used to read the report.
 * @param pages page list
 * @param keepPaginate should the output keep pagianted.
 */
public ReportPageReader(ExecutionContext context,List pages,boolean paged) throws IOException, BirtException {
  super(context);
  outputPages.addAll(pages);
  this.paged=paged;
  pageIter=new PageRangeIterator(outputPages);
  if (!paged) {
    Fragment fragment=loadPageFragment(outputPages);
    bodyExecutor=new BodyReader(this,fragment);
  }
}",0.9920508744038156
67967,"public ReportReader(ExecutionContext context) throws IOException {
  super(context);
  bodyReader=new BodyReader(this,null);
}","public ReportReader(ExecutionContext context) throws IOException, BirtException {
  super(context);
  bodyReader=new BodyReader(this,null);
}",0.9438202247191012
67968,"public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}","public void run(){
  if (!(getModel() instanceof DesignElementHandle)) {
    return;
  }
  if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
    return;
  }
  DesignElementHandle handle=(DesignElementHandle)getModel();
  EditPart part=ReportElementEditPart.this;
  while (part != null && !(part instanceof RootEditPart)) {
    part=part.getParent();
  }
  if (getModelAdapter() == null || part == null) {
    return;
  }
  Object[] backGroundPosition=getBackgroundPosition(handle);
  Object xPosition=backGroundPosition[0];
  Object yPosition=backGroundPosition[1];
  boolean needRefresh=false;
  if (xPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (yPosition instanceof DimensionValue) {
    needRefresh=true;
  }
  if (needRefresh) {
    refreshVisuals();
  }
}",0.9409448818897638
67969,"public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}","public void activate(){
  if (isActive())   return;
  super.activate();
  refreshPageClip();
  getFigure().addMouseMotionListener(new MouseMotionListener.Stub(){
    public void mouseEntered(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseExited(    MouseEvent me){
      delayRemoveGuideFeedBack();
    }
    public void mouseHover(    MouseEvent me){
      addGuideFeedBack();
    }
    public void mouseMoved(    MouseEvent me){
      addGuideFeedBack();
    }
  }
);
  getFigure().setFocusTraversable(true);
  updateLayoutPreference();
  Display.getCurrent().asyncExec(new Runnable(){
    public void run(){
      if (!(getModel() instanceof DesignElementHandle)) {
        return;
      }
      if (((DeferredGraphicalViewer)getViewer()).getFigureCanvas() == null) {
        return;
      }
      DesignElementHandle handle=(DesignElementHandle)getModel();
      EditPart part=ReportElementEditPart.this;
      while (part != null && !(part instanceof RootEditPart)) {
        part=part.getParent();
      }
      if (getModelAdapter() == null || part == null) {
        return;
      }
      Object[] backGroundPosition=getBackgroundPosition(handle);
      Object xPosition=backGroundPosition[0];
      Object yPosition=backGroundPosition[1];
      boolean needRefresh=false;
      if (xPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (yPosition instanceof DimensionValue) {
        needRefresh=true;
      }
      if (needRefresh) {
        refreshVisuals();
      }
    }
  }
);
}",0.965886287625418
67970,"/** 
 * Return the QueryResults. But the execution of query would be deferred
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 * @param executor
 * @parem dataSourceQuery
 */
QueryResults doPrepare(IBaseQueryResults outerResults,Scriptable scope,QueryExecutor executor,PreparedDataSourceQuery dataSourceQuery) throws DataException {
  if (this.baseQueryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  executor.setAppContext(this.appContext);
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  QueryResults result=new QueryResults(new ServiceForQueryResults(this.session,executor.getQueryScope(),executor.getNestedLevel() + 1,dataSourceQuery,queryService,executor,this.baseQueryDefn,this.exprManager));
  if (this.baseQueryDefn.cacheQueryResults() && this.baseQueryDefn instanceof IQueryDefinition) {
    result.setID(this.session.getQueryResultIDUtil().nextID());
    ((QueryDefinition)this.baseQueryDefn).setQueryResultsID(result.getID());
  }
  return result;
}","/** 
 * Return the QueryResults. But the execution of query would be deferred
 * @param outerResults If query is nested within another query, this is the outer query's query result handle.
 * @param scope The ElementState object for the report item using the query; this acts as the JS scope for evaluating script expressions.
 * @param executor
 * @parem dataSourceQuery
 */
public QueryResults doPrepare(IBaseQueryResults outerResults,Scriptable scope,QueryExecutor executor,PreparedDataSourceQuery dataSourceQuery) throws DataException {
  if (this.baseQueryDefn == null) {
    DataException e=new DataException(ResourceConstants.PREPARED_QUERY_CLOSED);
    logger.logp(Level.WARNING,PreparedQuery.class.getName(),""String_Node_Str"",""String_Node_Str"",e);
    throw e;
  }
  executor.setAppContext(this.appContext);
  logger.finer(""String_Node_Str"");
  executor.prepareExecution(outerResults,scope);
  logger.finer(""String_Node_Str"");
  QueryResults result=new QueryResults(new ServiceForQueryResults(this.session,executor.getQueryScope(),executor.getNestedLevel() + 1,dataSourceQuery,queryService,executor,this.baseQueryDefn,this.exprManager));
  if (this.baseQueryDefn.cacheQueryResults() && this.baseQueryDefn instanceof IQueryDefinition) {
    result.setID(this.session.getQueryResultIDUtil().nextID());
    ((QueryDefinition)this.baseQueryDefn).setQueryResultsID(result.getID());
  }
  return result;
}",0.99750800996796
67971,"/** 
 * Set current queryresult ID for sub query. Sub query result ID can not be generated independently, and it is needs to be attached with its parent query.
 * @param selfQueryResultID
 */
void setID(String selfQueryResultID){
  this.setID(null,selfQueryResultID);
}","/** 
 * Set current queryresult ID for sub query. Sub query result ID can not be generated independently, and it is needs to be attached with its parent query.
 * @param selfQueryResultID
 */
public void setID(String selfQueryResultID){
  this.setID(null,selfQueryResultID);
}",0.9871559633027523
67972,"protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle fontStyle){
  writer.drawString(text,textX,textY + baseline,fontStyle.getFontInfo(),convertToPoint(fontStyle.getLetterSpacing()),convertToPoint(fontStyle.getWordSpacing()),fontStyle.getColor(),fontStyle.isLinethrough(),fontStyle.isOverline(),fontStyle.isUnderline(),fontStyle.getAlign());
}","protected void drawText(String text,float textX,float textY,float baseline,float width,float height,TextStyle textStyle){
  writer.drawString(text,textX,textY + baseline,textStyle.getFontInfo(),convertToPoint(textStyle.getLetterSpacing()),convertToPoint(textStyle.getWordSpacing()),textStyle.getColor(),textStyle.isLinethrough(),textStyle.isOverline(),textStyle.isUnderline(),textStyle.getAlign());
  if (textStyle.isHasHyperlink()) {
    FontInfo fontInfo=textStyle.getFontInfo();
    float lineWidth=fontInfo.getLineWidth();
    Color color=textStyle.getColor();
    drawDecorationLine(textX,textY,width,lineWidth,convertToPoint(fontInfo.getUnderlinePosition()),color);
  }
}",0.6926648096564532
67973,"private void drawDecorationLine(float textX,float textY,float width,float lineWidth,float verticalOffset,Color color){
  textY=textY + verticalOffset;
  drawLine(textX,textY,textX + width,textY,lineWidth,color,BorderInfo.BORDER_STYLE_SOLID);
}","protected void drawDecorationLine(float textX,float textY,float width,float lineWidth,float verticalOffset,Color color){
  textY=textY + verticalOffset;
  drawLine(textX,textY,textX + width,textY,lineWidth,color,BorderInfo.BORDER_STYLE_SOLID);
}",0.9754098360655736
67974,"public static TextStyle buildTextStyle(IContent content,FontInfo fontInfo){
  IStyle style=content.getComputedStyle();
  TextStyle textStyle=new TextStyle(fontInfo);
  CSSValue direction=style.getProperty(IStyle.STYLE_DIRECTION);
  if (IStyle.RTL_VALUE.equals(direction)) {
    textStyle.setDirection(TextStyle.DIRECTION_RTL);
  }
  textStyle.setFontSize(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  textStyle.setLetterSpacing(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_LETTER_SPACING)));
  textStyle.setWordSpacing(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_WORD_SPACING)));
  textStyle.setLineThrough(style.getProperty(IStyle.STYLE_TEXT_LINETHROUGH) == IStyle.LINE_THROUGH_VALUE);
  textStyle.setOverLine(style.getProperty(IStyle.STYLE_TEXT_OVERLINE) == IStyle.OVERLINE_VALUE);
  CSSValue underLine=style.getProperty(IStyle.STYLE_TEXT_UNDERLINE);
  if (underLine == IStyle.UNDERLINE_VALUE) {
    textStyle.setUnderLine(true);
  }
 else {
    if (content.getHyperlinkAction() != null) {
      textStyle.setUnderLine(true);
    }
  }
  textStyle.setAlign(style.getProperty(IStyle.STYLE_TEXT_ALIGN));
  IStyle s=content.getStyle();
  Color color=PropertyUtil.getColor(s.getProperty(IStyle.STYLE_COLOR));
  if (color != null) {
    textStyle.setColor(color);
  }
 else {
    if (content.getHyperlinkAction() != null) {
      textStyle.setColor(Color.BLUE);
    }
 else {
      textStyle.setColor(PropertyUtil.getColor(style.getProperty(IStyle.STYLE_COLOR)));
    }
  }
  return textStyle;
}","public static TextStyle buildTextStyle(IContent content,FontInfo fontInfo){
  IStyle style=content.getComputedStyle();
  TextStyle textStyle=new TextStyle(fontInfo);
  CSSValue direction=style.getProperty(IStyle.STYLE_DIRECTION);
  if (IStyle.RTL_VALUE.equals(direction)) {
    textStyle.setDirection(TextStyle.DIRECTION_RTL);
  }
  textStyle.setFontSize(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_FONT_SIZE)));
  textStyle.setLetterSpacing(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_LETTER_SPACING)));
  textStyle.setWordSpacing(PropertyUtil.getDimensionValue(style.getProperty(IStyle.STYLE_WORD_SPACING)));
  textStyle.setLineThrough(style.getProperty(IStyle.STYLE_TEXT_LINETHROUGH) == IStyle.LINE_THROUGH_VALUE);
  textStyle.setOverLine(style.getProperty(IStyle.STYLE_TEXT_OVERLINE) == IStyle.OVERLINE_VALUE);
  CSSValue underLine=style.getProperty(IStyle.STYLE_TEXT_UNDERLINE);
  if (underLine == IStyle.UNDERLINE_VALUE) {
    textStyle.setUnderLine(true);
  }
  textStyle.setAlign(style.getProperty(IStyle.STYLE_TEXT_ALIGN));
  IStyle s=content.getStyle();
  Color color=PropertyUtil.getColor(s.getProperty(IStyle.STYLE_COLOR));
  if (color != null) {
    textStyle.setColor(color);
  }
 else {
    if (content.getHyperlinkAction() != null) {
      textStyle.setColor(Color.BLUE);
    }
 else {
      textStyle.setColor(PropertyUtil.getColor(style.getProperty(IStyle.STYLE_COLOR)));
    }
  }
  if (content.getHyperlinkAction() != null) {
    textStyle.setHasHyperlink(true);
  }
  return textStyle;
}",0.7682887528198518
67975,"public static Image getImage(IImageContent content){
  Image image=null;
  try {
    String uri=content.getURI();
    String mimeType=content.getMIMEType();
    String extension=content.getExtension();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
      ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
    URL url=design.findResource(uri,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
  InputStream in=url.openStream();
try {
  byte[] buffer;
  if (SvgFile.isSvg(content.getURI())) {
    buffer=SvgFile.transSvgToArray(in);
  }
 else {
    ArrayList<Byte> bytes=new ArrayList<Byte>();
    int data=in.read();
    while (data != -1) {
      bytes.add((byte)data);
      data=in.read();
    }
    buffer=new byte[bytes.size()];
    for (int i=0; i < buffer.length; i++) {
      buffer[i]=bytes.get(i);
    }
  }
  image=Image.getInstance(buffer);
}
 catch (Exception ex) {
  logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
  in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,e.getLocalizedMessage());
}
return image;
}","public static Image getImage(IImageContent content){
  Image image=null;
  try {
    String uri=content.getURI();
    String mimeType=content.getMIMEType();
    String extension=content.getExtension();
switch (content.getImageSource()) {
case IImageContent.IMAGE_FILE:
      ReportDesignHandle design=content.getReportContent().getDesign().getReportDesign();
    URL url=design.findResource(uri,IResourceLocator.IMAGE,content.getReportContent().getReportContext() == null ? null : content.getReportContent().getReportContext().getAppContext());
  InputStream in=url.openStream();
try {
  byte[] buffer;
  if (SvgFile.isSvg(content.getURI())) {
    buffer=SvgFile.transSvgToArray(in);
  }
 else {
    ArrayList<Byte> bytes=new ArrayList<Byte>();
    int data=in.read();
    while (data != -1) {
      bytes.add((byte)data);
      data=in.read();
    }
    buffer=new byte[bytes.size()];
    for (int i=0; i < buffer.length; i++) {
      buffer[i]=bytes.get(i);
    }
  }
  image=Image.getInstance(buffer);
}
 catch (Exception ex) {
  logger.log(Level.WARNING,ex.getMessage(),ex);
}
 finally {
  in.close();
}
break;
case IImageContent.IMAGE_NAME:
case IImageContent.IMAGE_EXPRESSION:
byte[] data=content.getData();
in=new ByteArrayInputStream(data);
if (SvgFile.isSvg(mimeType,uri,extension)) data=SvgFile.transSvgToArray(in);
in.close();
image=Image.getInstance(data);
break;
case IImageContent.IMAGE_URL:
if (SvgFile.isSvg(uri)) {
image=Image.getInstance(SvgFile.transSvgToArray(uri));
}
 else {
image=Image.getInstance(new URL(content.getURI()));
}
break;
default :
assert(false);
}
}
 catch (Exception e) {
logger.log(Level.SEVERE,e.getLocalizedMessage());
}
return image;
}",0.9964093357271095
67976,"/** 
 * Draws image at the contentByte
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  int imageX=currentX + getX(image);
  int imageY=currentY + getY(image);
  int height=getHeight(image);
  int width=getWidth(image);
  String helpText=image.getHelpText();
  try {
    byte[] data=image.getImageData();
    String extension=image.getExtension();
    String uri=image.getImageUrl();
    if (data != null) {
      pageGraphic.drawImage(uri,data,extension,imageX,imageY,height,width,helpText,image.getParameters());
    }
 else     if (uri != null) {
      pageGraphic.drawImage(uri,extension,imageX,imageY,height,width,helpText,image.getParameters());
    }
  }
 catch (  Throwable t) {
    log(t,Level.WARNING);
  }
}","/** 
 * Draws image at the contentByte
 * @param image the ImageArea specified from the layout
 */
protected void drawImage(IImageArea image){
  int imageX=currentX + getX(image);
  int imageY=currentY + getY(image);
  int height=getHeight(image);
  int width=getWidth(image);
  String helpText=image.getHelpText();
  try {
    byte[] data=image.getImageData();
    String extension=image.getExtension();
    String uri=image.getImageUrl();
    pageGraphic.drawImage(uri,data,extension,imageX,imageY,height,width,helpText,image.getParameters());
  }
 catch (  Throwable t) {
    log(t,Level.WARNING);
  }
}",0.7371469949312093
67977,"protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getStartX());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getEndX()) - col;
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (data.getDataType() == SheetData.IMAGE) {
    addEmptyData(data,container);
  }
  if (container instanceof XlsCell) {
    XlsCell cell=(XlsCell)container;
    data.setRowSpanInDesign(cell.getRowSpan() - 1);
  }
}","protected void addData(SheetData data){
  XlsContainer container=getCurrentContainer();
  container.setEmpty(false);
  int col=axis.getColumnIndexByCoordinate(data.getStartX());
  if (col == -1 || col >= cache.getColumnCount())   return;
  int span=axis.getColumnIndexByCoordinate(data.getEndX()) - col;
  outputDataIfBufferIsFull();
  updataRowIndex(data,container);
  addDatatoCache(col,data);
  for (int i=col + 1; i < col + span; i++) {
    BlankData blankData=new BlankData(data);
    blankData.setType(Type.HORIZONTAL);
    addDatatoCache(i,blankData);
  }
  if (data.getDataType() == SheetData.IMAGE) {
    addEmptyData(data,container);
  }
  while (container != null) {
    if (container instanceof XlsCell) {
      XlsCell cell=(XlsCell)container;
      data.setRowSpanInDesign(cell.getRowSpan() - 1);
      break;
    }
 else {
      container=container.getParent();
    }
  }
}",0.935251798561151
67978,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    ExceptionHandler.handle(ex);
  }
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    throw ex;
  }
}",0.9844236760124612
67979,"public void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  ExternalUIUtil.updateColumnCache(dataSetHandle,holdEvent);
}","public void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  ExternalUIUtil.updateColumnCache(dataSetHandle,holdEvent);
}",0.9271523178807948
67980,"/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  DataService.getInstance().updateColumnCache(dataSetHandle,holdEvent);
}","/** 
 * Save the column meta data to data set handle.
 * @param dataSetHandle
 * @param holdEvent
 */
public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    DataService.getInstance().updateColumnCache(dataSetHandle,holdEvent);
  }
 catch (  BirtException ex) {
    logger.entering(DataSetUIUtil.class.getName(),""String_Node_Str"",new Object[]{ex});
  }
}",0.7938931297709924
67981,"public void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  provider.updateColumnCache(dataSetHandle,holdEvent);
}","public void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException {
  provider.updateColumnCache(dataSetHandle,holdEvent);
}",0.9241379310344828
67982,"void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent);","void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent) throws BirtException ;",0.8641975308641975
67983,"public void selectArea(boolean selected,Object data){
  if (data instanceof Object[]) {
    Object[] array=(Object[])data;
    seriesdefinition=(SeriesDefinition)array[0];
    query=(Query)array[1];
    updateText(query.getDefinition());
    DataDefinitionTextManager.getInstance().addDataDefinitionText(getInputControl(),this);
    if (fAggEditorComposite != null) {
      fAggEditorComposite.setAggregation(query,seriesdefinition);
    }
  }
}","public void selectArea(boolean selected,Object data){
  if (data instanceof Object[]) {
    Object[] array=(Object[])data;
    seriesdefinition=(SeriesDefinition)array[0];
    query=(Query)array[1];
    updateText(query.getDefinition());
    DataDefinitionTextManager.getInstance().addDataDefinitionText(getInputControl(),this);
    setTooltipForInputControl();
    if (fAggEditorComposite != null) {
      fAggEditorComposite.setAggregation(query,seriesdefinition);
    }
  }
}",0.9642470205850489
67984,"/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  if (sc != null) {
    sc.setData(dsi);
  }
  return sc;
}","/** 
 * @param xs
 * @param ax
 * @param dsi
 * @param iType
 * @param dStart
 * @param dEnd
 * @param axisOrigin
 * @param rtc
 * @param direction
 * @param zoomFactor 1 is default factor
 * @param iMarginPercent the percentage of margin area for display some charts, such as bubble. 0 means no margin
 * @return AutoScale instance
 * @throws ChartException
 */
static final AutoScale computeScale(IDisplayServer xs,OneAxis ax,DataSetIterator dsi,int iType,double dStart,double dEnd,AxisOrigin axisOrigin,RunTimeContext rtc,int direction,double zoomFactor,int iMarginPercent,PlotComputation plotComp) throws ChartException {
  final Scale scModel=ax.getModelAxis().getScale();
  final FormatSpecifier fs=ax.getFormatSpecifier();
  final Label la=ax.getLabel();
  final int iLabelLocation=ax.getLabelPosition();
  final int iOrientation=ax.getOrientation();
  DataElement oMinimum=scModel.getMin();
  DataElement oMaximum=scModel.getMax();
  final Double oStep=scModel.isSetStep() ? new Double(scModel.getStep()) : null;
  final Integer oStepNumber=scModel.isSetStepNumber() ? Integer.valueOf(scModel.getStepNumber()) : null;
  AutoScale sc=null;
  AutoScale scCloned=null;
  final Object oMinValue, oMaxValue;
  final boolean bIsPercent=ax.getModelAxis().isPercent();
  if (scModel.isSetFactor() && (iType & LINEAR) == LINEAR && !ax.isCategoryScale()) {
    double factor=scModel.getFactor() * 72 / xs.getDpiResolution();
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (oMinimum != null && oMinimum instanceof NumberDataElement) {
      dMinValue=((NumberDataElement)oMinimum).getValue();
    }
    double length=Math.abs(dEnd - dStart);
    double valueLength=length * factor;
    dMaxValue=dMinValue + valueLength;
    double dStep=1;
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision).bStepFixed(true).dsiData(dsi).dFactor(factor);
    sc=new AutoScale(info);
    sc.setMinimum(Double.valueOf(0));
    sc.setMaximum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    setStepToScale(sc,oStep,null,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.setMinimum(oMinValue);
    sc.setMaximum(oMaxValue);
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    sc.setData(dsi);
    return sc;
  }
  if ((iType & TEXT) == TEXT || ax.isCategoryScale()) {
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setData(dsi);
    sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
    oMinValue=null;
    oMaxValue=null;
  }
 else   if ((iType & LINEAR) == LINEAR) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    dsi.reset();
    double dPrecision=Double.NaN;
    ;
    while (dsi.hasNext()) {
      oValue=dsi.next();
      if (oValue == null) {
        continue;
      }
      dValue=((Double)oValue).doubleValue();
      if (dValue < dMinValue)       dMinValue=dValue;
      if (dValue > dMaxValue)       dMaxValue=dValue;
      dPrecision=getPrecision(dPrecision,dValue,fs,rtc.getULocale(),bIsPercent);
    }
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
      double origin=asDouble(axisOrigin.getValue()).doubleValue();
      if (oMinimum == null && origin < dMinValue) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin > dMaxValue) {
        oMaximum=axisOrigin.getValue();
      }
    }
    final double dAbsMax=Math.abs(dMaxValue);
    final double dAbsMin=Math.abs(dMinValue);
    double dStep=Math.max(dAbsMax,dAbsMin);
    double dDelta=dMaxValue - dMinValue;
    if (dDelta == 0) {
      dStep=dPrecision;
    }
 else {
      dStep=Math.floor(Math.log(dDelta) / LOG_10);
      dStep=Math.pow(10,dStep);
      if (dStep < dPrecision) {
        dStep=dPrecision;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).dPrecision(dPrecision);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(dStep));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else   if ((iType & LOGARITHMIC) == LOGARITHMIC) {
    Object oValue;
    double dValue, dMinValue=Double.MAX_VALUE, dMaxValue=-Double.MAX_VALUE;
    if ((iType & PERCENT) == PERCENT) {
      dMinValue=0;
      dMaxValue=100;
    }
 else {
      dsi.reset();
      while (dsi.hasNext()) {
        oValue=dsi.next();
        if (oValue == null) {
          continue;
        }
        dValue=((Double)oValue).doubleValue();
        if (dValue < dMinValue)         dMinValue=dValue;
        if (dValue > dMaxValue)         dMaxValue=dValue;
      }
      if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof NumberDataElement) {
        double origin=asDouble(axisOrigin.getValue()).doubleValue();
        if (oMinimum == null && origin < dMinValue) {
          oMinimum=axisOrigin.getValue();
        }
        if (oMaximum == null && origin > dMaxValue) {
          oMaximum=axisOrigin.getValue();
        }
      }
      if (dMinValue == 0) {
        dMinValue=dMaxValue > 0 ? 1 : -1;
      }
    }
    ScaleInfo info=new ScaleInfo(plotComp,iType,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent);
    sc=new AutoScale(info);
    sc.setMaximum(Double.valueOf(0));
    sc.setMinimum(Double.valueOf(0));
    sc.setStep(new Double(10));
    sc.setStepNumber(oStepNumber);
    sc.setData(dsi);
    setNumberMinMaxToScale(sc,oMinimum,oMaximum,rtc,ax);
    setStepToScale(sc,oStep,oStepNumber,rtc);
    oMinValue=new Double(dMinValue);
    oMaxValue=new Double(dMaxValue);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
    if ((iType & PERCENT) == PERCENT) {
      sc.info.bStepFixed(true);
      sc.info.bMaximumFixed(true);
      sc.info.bMinimumFixed(true);
      sc.computeTicks(xs,ax.getLabel(),iLabelLocation,iOrientation,dStart,dEnd,false,null);
      return sc;
    }
  }
 else   if ((iType & DATE_TIME) == DATE_TIME) {
    Calendar cValue;
    Calendar caMin=null, caMax=null;
    dsi.reset();
    while (dsi.hasNext()) {
      cValue=(Calendar)dsi.next();
      if (cValue == null) {
        continue;
      }
      if (caMin == null) {
        caMin=cValue;
      }
      if (caMax == null) {
        caMax=cValue;
      }
      if (cValue.before(caMin))       caMin=cValue;
 else       if (cValue.after(caMax))       caMax=cValue;
    }
    oMinValue=new CDateTime(caMin);
    oMaxValue=new CDateTime(caMax);
    if (axisOrigin != null && axisOrigin.getType().equals(IntersectionType.VALUE_LITERAL) && axisOrigin.getValue() instanceof DateTimeDataElement) {
      CDateTime origin=asDateTime(axisOrigin.getValue());
      if (oMinimum == null && origin.before(oMinValue)) {
        oMinimum=axisOrigin.getValue();
      }
      if (oMaximum == null && origin.after(oMaxValue)) {
        oMaximum=axisOrigin.getValue();
      }
    }
    int iUnit;
    if (oStep != null || oStepNumber != null) {
      iUnit=ChartUtil.convertUnitTypeToCalendarConstant(scModel.getUnit());
    }
 else {
      iUnit=CDateTime.getPreferredUnit((CDateTime)oMinValue,(CDateTime)oMaxValue);
    }
    if (iUnit == 0)     iUnit=Calendar.SECOND;
    CDateTime cdtMinAxis=((CDateTime)oMinValue).backward(iUnit,1);
    CDateTime cdtMaxAxis=((CDateTime)oMaxValue).forward(iUnit,1);
    cdtMinAxis.clearBelow(iUnit);
    cdtMaxAxis.clearBelow(iUnit);
    ScaleInfo info=new ScaleInfo(plotComp,DATE_TIME,rtc,fs,ax,direction,scModel.isAutoExpand()).dZoomFactor(zoomFactor).iMarginPercent(iMarginPercent).iMinUnit(oMinValue.equals(oMaxValue) ? getUnitId(iUnit) : getMinUnitId(fs,rtc));
    sc=new AutoScale(info);
    sc.setMaximum(cdtMaxAxis);
    sc.setMinimum(cdtMinAxis);
    sc.setStep(Integer.valueOf(1));
    sc.setStepNumber(oStepNumber);
    sc.context.setUnit(Integer.valueOf(iUnit));
    if (oMinimum != null) {
      if (oMinimum instanceof DateTimeDataElement) {
        sc.setMinimum(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
        sc.info.oMinimumFixed(((DateTimeDataElement)oMinimum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMinimumFixed(true);
    }
    if (oMaximum != null) {
      if (oMaximum instanceof DateTimeDataElement) {
        sc.setMaximum(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
        sc.info.oMaximumFixed(((DateTimeDataElement)oMaximum).getValueAsCDateTime());
      }
 else {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
      }
      sc.info.bMaximumFixed(true);
    }
    if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
      if (((CDateTime)sc.getMinimum()).after(sc.getMaximum())) {
        throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
      }
    }
    setStepToScale(sc,oStep,oStepNumber,rtc);
    sc.updateAxisMinMax(oMinValue,oMaxValue);
  }
 else {
    oMinValue=null;
    oMaxValue=null;
  }
  if ((iType & TEXT) != TEXT && !ax.isCategoryScale()) {
    sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
    dStart=sc.dStart;
    dEnd=sc.dEnd;
    boolean bFirstFit=sc.checkFit(xs,la,iLabelLocation);
    boolean bFits=bFirstFit;
    boolean bZoomSuccess=false;
    for (int i=0; bFits == bFirstFit && i < 50; i++) {
      bZoomSuccess=true;
      scCloned=(AutoScale)sc.clone();
      if (sc.info.bStepFixed || rtc.getSharedScale() != null && rtc.getSharedScale().isShared()) {
        break;
      }
      if (bFirstFit) {
        if (!bFits) {
          break;
        }
        bZoomSuccess=sc.zoomIn();
      }
 else {
        if (!bFits && sc.getTickCordinates().size() == 2) {
          break;
        }
        bZoomSuccess=sc.zoomOut();
      }
      if (!bZoomSuccess)       break;
      sc.updateAxisMinMax(oMinValue,oMaxValue);
      sc.computeTicks(xs,la,iLabelLocation,iOrientation,dStart,dEnd,false,null);
      bFits=sc.checkFit(xs,la,iLabelLocation);
      if (!bFits && sc.getTickCordinates().size() == 2) {
        sc=scCloned;
        break;
      }
    }
    if (scCloned != null && bFirstFit && bZoomSuccess) {
      sc=scCloned;
    }
    updateSharedScaleContext(rtc,iType,sc.tmpSC);
  }
  if (sc != null) {
    sc.setData(dsi);
  }
  return sc;
}",0.9990471850532332
67985,"/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      sc.setMinimum(new Double(((NumberDataElement)oMinimum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMinimumFixed(true);
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      sc.setMaximum(Double.valueOf(((NumberDataElement)oMaximum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMaximum(),ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMaximumFixed(true);
  }
  if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
    if (((Double)sc.getMinimum()).doubleValue() > ((Double)sc.getMaximum()).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}","/** 
 * Updates AutoScale by checking min or max
 * @param sc
 * @param oMinimum
 * @param oMaximum
 * @param rtc
 * @param ax
 * @throws ChartException
 */
public static void setNumberMinMaxToScale(AutoScale sc,Object oMinimum,Object oMaximum,final RunTimeContext rtc,final OneAxis ax) throws ChartException {
  if (oMinimum != null) {
    if (oMinimum instanceof NumberDataElement) {
      sc.setMinimum(new Double(((NumberDataElement)oMinimum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMinimum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMinimumFixed(true);
  }
  if (oMaximum != null) {
    if (oMaximum instanceof NumberDataElement) {
      sc.setMaximum(Double.valueOf(((NumberDataElement)oMaximum).getValue()));
    }
 else {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{oMaximum,ax.getModelAxis().getType().getName()},Messages.getResourceBundle(rtc.getULocale()));
    }
    sc.info.bMaximumFixed(true);
  }
  if (sc.info.bMaximumFixed && sc.info.bMinimumFixed) {
    if (((Double)sc.getMinimum()).doubleValue() > ((Double)sc.getMaximum()).doubleValue()) {
      throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,""String_Node_Str"",new Object[]{sc.getMinimum(),sc.getMaximum()},Messages.getResourceBundle(rtc.getULocale()));
    }
  }
}",0.984594775619558
67986,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  if (valueESet)   result.append(value);
 else   result.append(""String_Node_Str"");
  result.append(')');
  return result.toString();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(this.getClass().getInterfaces()[0].getSimpleName());
  result.append(""String_Node_Str"");
  if (valueESet)   result.append(value);
 else   result.append(""String_Node_Str"");
  result.append(')');
  return result.toString();
}",0.9028132992327366
67987,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(super.toString());
  result.append(""String_Node_Str"");
  if (valueESet)   result.append(value);
 else   result.append(""String_Node_Str"");
  result.append(')');
  return result.toString();
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 */
@Override public String toString(){
  if (eIsProxy())   return super.toString();
  StringBuffer result=new StringBuffer(this.getClass().getInterfaces()[0].getSimpleName());
  result.append(""String_Node_Str"");
  if (valueESet)   result.append(value);
 else   result.append(""String_Node_Str"");
  result.append(')');
  return result.toString();
}",0.9028132992327366
67988,"public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setPageHandler(new LayoutPageHandler(((HTMLReportLayoutEngine)layoutEngine).getContext()));
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new LayoutEngine(executor,((HTMLReportLayoutEngine)layoutEngine).getContext(),emitter,renderOptions,executionContext.getLocale(),getDocumentTotalPage());
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}","public void render() throws Exception {
  setupRenderOption();
  IContentEmitter emitter=createContentEmitter();
  String format=executionContext.getOutputFormat();
  IReportExecutor executor=new ReportletExecutor(executionContext,offset);
  executor=createRenderExtensionExecutor(executor);
  executor=new SuppressDuplciateReportExecutor(executor);
  executor=new LocalizedReportExecutor(executionContext,executor);
  executionContext.setExecutor(executor);
  initializeContentEmitter(emitter,executor);
  IReportLayoutEngine layoutEngine=createReportLayoutEngine(pagination,renderOptions);
  layoutEngine.setPageHandler(new LayoutPageHandler(((HTMLReportLayoutEngine)layoutEngine).getContext()));
  layoutEngine.setLocale(executionContext.getLocale());
  if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
    emitter=new LayoutEngine(executor,((HTMLReportLayoutEngine)layoutEngine).getContext(),emitter,renderOptions,executionContext,getDocumentTotalPage());
  }
  startRender();
  IReportContent report=executor.execute();
  emitter.start(report);
  layoutEngine.layout(executor,report,emitter,false);
  layoutEngine.close();
  emitter.end(report);
  closeRender();
  executor.close();
  outputPageCount=layoutEngine.getPageCount();
}",0.9952305246422892
67989,"void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext.getLocale(),0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}","void doRun() throws EngineException {
  doValidateParameters();
  setupRenderOption();
  loadDesign();
  prepareDesign();
  startFactory();
  updateRtLFlag();
  startRender();
  try {
    IContentEmitter emitter=createContentEmitter();
    IReportExecutor executor=new ReportExecutor(executionContext);
    executor=new SuppressDuplciateReportExecutor(executor);
    executor=new LocalizedReportExecutor(executionContext,executor);
    executionContext.setExecutor(executor);
    LayoutPageHandler layoutHandler=new LayoutPageHandler();
    if (ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
      LayoutEngine pdfLayoutEmitter=new LayoutEngine(executor,emitter,renderOptions,executionContext,0l);
      pdfLayoutEmitter.setPageHandler(layoutHandler);
      emitter=pdfLayoutEmitter;
    }
    initializeContentEmitter(emitter,executor);
    String format=executionContext.getOutputFormat();
    boolean paginate=true;
    if (FORMAT_HTML.equalsIgnoreCase(format) || FORMAT_XHTML.equalsIgnoreCase(format)) {
      HTMLRenderOption htmlOption=new HTMLRenderOption(renderOptions);
      paginate=htmlOption.getHtmlPagination();
    }
    if (ExtensionManager.NO_PAGINATION.equals(pagination)) {
      paginate=false;
    }
synchronized (this) {
      if (!executionContext.isCanceled()) {
        layoutEngine=createReportLayoutEngine(pagination,renderOptions);
      }
    }
    if (layoutEngine != null) {
      layoutEngine.setLocale(executionContext.getLocale());
      CompositeLayoutPageHandler layoutPageHandler=new CompositeLayoutPageHandler();
      OnPageBreakLayoutPageHandle handle=new OnPageBreakLayoutPageHandle(executionContext);
      layoutPageHandler.addPageHandler(handle);
      layoutPageHandler.addPageHandler(new ContextPageBreakHandler(executionContext));
      if (!ExtensionManager.PAPER_SIZE_PAGINATION.equals(pagination)) {
        layoutPageHandler.addPageHandler(layoutHandler);
      }
      layoutEngine.setPageHandler(layoutPageHandler);
      CompositeContentEmitter outputEmitters=new CompositeContentEmitter(format);
      outputEmitters.addEmitter(emitter);
      outputEmitters.addEmitter(handle.getEmitter());
      IReportContent report=executor.execute();
      outputEmitters.start(report);
      layoutEngine.layout(executor,report,outputEmitters,paginate);
      layoutEngine.close();
      outputEmitters.end(report);
    }
    closeRender();
    executionContext.closeDataEngine();
    closeFactory();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Exception ex) {
    log.log(Level.SEVERE,""String_Node_Str"",ex);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,ex);
  }
catch (  OutOfMemoryError err) {
    log.log(Level.SEVERE,""String_Node_Str"");
    throw err;
  }
catch (  Throwable t) {
    log.log(Level.SEVERE,""String_Node_Str"",t);
    throw new EngineException(MessageConstants.REPORT_RUN_ERROR,t);
  }
}",0.997934595524957
67990,"public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if (type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}","public ILayout createLayout(ContainerArea parent,LayoutContext context,IContent content){
switch (content.getContentType()) {
case IContent.DATA_CONTENT:
case IContent.LABEL_CONTENT:
case IContent.TEXT_CONTENT:
    if (PropertyUtil.isInlineElement(content)) {
      DimensionType width=content.getWidth();
      if (width != null) {
        return new BlockTextArea(parent,context,content);
      }
 else {
        return new InlineTextArea(parent,context,content);
      }
    }
 else {
      return new BlockTextArea(parent,context,content);
    }
case IContent.IMAGE_CONTENT:
  return new ImageAreaLayout(parent,context,(IImageContent)content);
case IContent.AUTOTEXT_CONTENT:
int type=((IAutoTextContent)content).getType();
if ((type == IAutoTextContent.TOTAL_PAGE || type == IAutoTextContent.UNFILTERED_TOTAL_PAGE) && context.getEngineTaskType() != IEngineTask.TASK_RENDER) {
context.addUnresolvedContent(content);
return new TemplateAreaLayout(parent,context,content);
}
 else {
if (PropertyUtil.isInlineElement(content)) {
  return new InlineTextArea(parent,context,content);
}
 else {
  return new BlockTextArea(parent,context,content);
}
}
default :
return null;
}
}",0.9737991266375546
67991,"public void build() throws BirtException {
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setOption(EngineTask.TASK_TYPE,new Integer(IEngineTask.TASK_RUN));
  IReportContent report=executor.execute();
  if (executionContext.isFixedLayout() && engine instanceof HTMLReportLayoutEngine) {
    HTMLLayoutContext htmlContext=((HTMLReportLayoutEngine)engine).getContext();
    htmlContext.setFixedLayout(true);
    LayoutEngine pdfEmitter=new LayoutEngine(executor,htmlContext,outputEmitters,null,executionContext.getLocale(),0);
    pdfEmitter.setPageHandler(layoutPageHandler);
    initializeContentEmitter(pdfEmitter,executor);
    pdfEmitter.createPageHintGenerator();
    pdfEmitter.start(report);
    engine.layout(executor,report,pdfEmitter,true);
    engine.close();
    pdfEmitter.end(report);
  }
 else {
    engine.setPageHandler(layoutPageHandler);
    outputEmitters.start(report);
    engine.layout(executor,report,outputEmitters,true);
    engine.close();
    outputEmitters.end(report);
  }
  engine=null;
}","public void build() throws BirtException {
  IReportExecutor executor=executionContext.getExecutor();
  engine=LayoutEngineFactory.createLayoutEngine(ExtensionManager.PAGE_BREAK_PAGINATION);
  engine.setOption(EngineTask.TASK_TYPE,new Integer(IEngineTask.TASK_RUN));
  IReportContent report=executor.execute();
  if (executionContext.isFixedLayout() && engine instanceof HTMLReportLayoutEngine) {
    HTMLLayoutContext htmlContext=((HTMLReportLayoutEngine)engine).getContext();
    htmlContext.setFixedLayout(true);
    LayoutEngine pdfEmitter=new LayoutEngine(executor,htmlContext,outputEmitters,null,executionContext,0);
    pdfEmitter.setPageHandler(layoutPageHandler);
    initializeContentEmitter(pdfEmitter,executor);
    pdfEmitter.createPageHintGenerator();
    pdfEmitter.start(report);
    engine.layout(executor,report,pdfEmitter,true);
    engine.close();
    pdfEmitter.end(report);
  }
 else {
    engine.setPageHandler(layoutPageHandler);
    outputEmitters.start(report);
    engine.layout(executor,report,outputEmitters,true);
    engine.close();
    outputEmitters.end(report);
  }
  engine=null;
}",0.9946524064171124
67992,"private void exportEmbeddedImage(ImageHandle image,LibraryHandle libraryHandle) throws SemanticException {
  if (!(DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(image.getSource()))) {
    return;
  }
  EmbeddedImageHandle embeded=image.getEmbeddedImage();
  if (embeded == null) {
    return;
  }
  boolean notExist=ElementExportUtil.canExport(embeded,libraryHandle,false);
  if (!notExist) {
    int confirm=confirmOverride(null,Messages.getString(""String_Node_Str""));
switch (confirm) {
case 0:
      break;
case 1:
{
      ElementExportUtil.exportElement((DesignElementHandle)image,libraryHandle,true);
      return;
    }
case 2:
default :
  cancelPressed();
return;
}
}
ElementExportUtil.exportElement((DesignElementHandle)image,libraryHandle,true);
ElementExportUtil.exportStructure(embeded,libraryHandle,true);
}","private boolean exportEmbeddedImage(ImageHandle image,LibraryHandle libraryHandle) throws SemanticException {
  if (!(DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(image.getSource()))) {
    return false;
  }
  EmbeddedImageHandle embeded=image.getEmbeddedImage();
  if (embeded == null) {
    return false;
  }
  boolean notExist=ElementExportUtil.canExport(embeded,libraryHandle,false);
  if (!notExist) {
    int confirm=confirmOverride(null,Messages.getString(""String_Node_Str""));
switch (confirm) {
case 0:
      break;
case 1:
{
      ElementExportUtil.exportElement((DesignElementHandle)image,libraryHandle,true);
      return true;
    }
case 2:
default :
  cancelPressed();
return false;
}
}
ElementExportUtil.exportElement((DesignElementHandle)image,libraryHandle,true);
ElementExportUtil.exportStructure(embeded,libraryHandle,true);
return true;
}",0.972106824925816
67993,"protected void okPressed(){
  Object firstElement=designElement;
  if (firstElement instanceof StructuredSelection) {
    firstElement=((StructuredSelection)firstElement).getFirstElement();
  }
  String path=getPath();
  LibraryHandle libraryHandle=null;
  try {
    ModuleHandle handle=openOrCreateLibrary(SessionHandleAdapter.getInstance().getSessionHandle(),path);
    libraryHandle=(LibraryHandle)handle;
    if (firstElement instanceof StyleHandle && libraryHandle.getVisibleThemes(IAccessControl.DIRECTLY_INCLUDED_LEVEL).size() > 0) {
      Object[] result=getExportTheme((StyleHandle)firstElement,libraryHandle);
      if (result == null)       return;
 else       if (result[0] == null) {
        cancelPressed();
        return;
      }
 else {
        boolean notExist=((Boolean)result[1]).booleanValue();
        if (!notExist) {
          int confirm=confirmOverride();
switch (confirm) {
case 0:
            break;
case 1:
          return;
case 2:
default :
        cancelPressed();
      return;
  }
}
ElementExportUtil.exportStyle((StyleHandle)firstElement,(ThemeHandle)result[0],true);
}
}
 else if (firstElement instanceof DesignElementHandle) {
boolean notExist=ElementExportUtil.canExport((DesignElementHandle)firstElement,libraryHandle,false);
if (!notExist) {
int confirm=confirmOverride();
switch (confirm) {
case 0:
  break;
case 1:
return;
case 2:
default :
cancelPressed();
return;
}
}
if (firstElement instanceof ImageHandle && DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(((ImageHandle)firstElement).getSource())) {
exportEmbeddedImage((ImageHandle)firstElement,libraryHandle);
}
 else {
ElementExportUtil.exportElement((DesignElementHandle)firstElement,libraryHandle,true);
}
}
 else if (firstElement instanceof StructureHandle) {
boolean notExist=ElementExportUtil.canExport((StructureHandle)firstElement,libraryHandle,false);
if (!notExist) {
int confirm=confirmOverride();
switch (confirm) {
case 0:
break;
case 1:
return;
case 2:
default :
cancelPressed();
return;
}
}
ElementExportUtil.exportStructure((StructureHandle)firstElement,libraryHandle,true);
}
}
 catch (DesignFileException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
}
catch (SemanticException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
}
 finally {
if (libraryHandle != null) {
try {
libraryHandle.save();
}
 catch (IOException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
}
libraryHandle.close();
}
}
IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
if (synchronizer != null) {
synchronizer.notifyResourceChanged(new LibrarySaveChangeEvent(this,Path.fromOSString(path),IReportResourceChangeEvent.LibraySaveChange,Path.fromOSString(path).toOSString()));
}
super.okPressed();
}","protected void okPressed(){
  Object firstElement=designElement;
  if (firstElement instanceof StructuredSelection) {
    firstElement=((StructuredSelection)firstElement).getFirstElement();
  }
  String path=getPath();
  LibraryHandle libraryHandle=null;
  boolean isDone=true;
  try {
    ModuleHandle handle=openOrCreateLibrary(SessionHandleAdapter.getInstance().getSessionHandle(),path);
    libraryHandle=(LibraryHandle)handle;
    if (firstElement instanceof StyleHandle && libraryHandle.getVisibleThemes(IAccessControl.DIRECTLY_INCLUDED_LEVEL).size() > 0) {
      Object[] result=getExportTheme((StyleHandle)firstElement,libraryHandle);
      if (result == null)       return;
 else       if (result[0] == null) {
        cancelPressed();
        return;
      }
 else {
        boolean notExist=((Boolean)result[1]).booleanValue();
        if (!notExist) {
          int confirm=confirmOverride();
switch (confirm) {
case 0:
            break;
case 1:
          return;
case 2:
default :
        cancelPressed();
      return;
  }
}
ElementExportUtil.exportStyle((StyleHandle)firstElement,(ThemeHandle)result[0],true);
}
}
 else if (firstElement instanceof DesignElementHandle) {
boolean notExist=ElementExportUtil.canExport((DesignElementHandle)firstElement,libraryHandle,false);
if (!notExist) {
int confirm=confirmOverride();
switch (confirm) {
case 0:
  break;
case 1:
return;
case 2:
default :
cancelPressed();
return;
}
}
if (firstElement instanceof ImageHandle && DesignChoiceConstants.IMAGE_REF_TYPE_EMBED.equals(((ImageHandle)firstElement).getSource())) {
isDone=exportEmbeddedImage((ImageHandle)firstElement,libraryHandle);
}
 else {
ElementExportUtil.exportElement((DesignElementHandle)firstElement,libraryHandle,true);
}
}
 else if (firstElement instanceof StructureHandle) {
boolean notExist=ElementExportUtil.canExport((StructureHandle)firstElement,libraryHandle,false);
if (!notExist) {
int confirm=confirmOverride();
switch (confirm) {
case 0:
break;
case 1:
return;
case 2:
default :
cancelPressed();
return;
}
}
ElementExportUtil.exportStructure((StructureHandle)firstElement,libraryHandle,true);
}
}
 catch (DesignFileException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
isDone=false;
}
catch (SemanticException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
isDone=false;
}
 finally {
if (libraryHandle != null) {
try {
libraryHandle.save();
}
 catch (IOException e) {
ExceptionHandler.handle(e);
e.printStackTrace();
}
libraryHandle.close();
}
}
IReportResourceSynchronizer synchronizer=ReportPlugin.getDefault().getResourceSynchronizerService();
if (synchronizer != null && isDone) {
synchronizer.notifyResourceChanged(new LibrarySaveChangeEvent(this,Path.fromOSString(path),IReportResourceChangeEvent.LibraySaveChange,Path.fromOSString(path).toOSString()));
}
super.okPressed();
}",0.987831066571224
67994,"/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() != null)       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}","/** 
 * @param cx
 * @param expr1
 * @throws DataException 
 */
private static void prepareScriptExpression(ScriptContext cx,IBaseExpression expr1) throws DataException {
  try {
    if (expr1 == null)     return;
    if (expr1 instanceof IScriptExpression) {
      String exprText=((IScriptExpression)expr1).getText();
      if (expr1.getHandle() == null)       expr1.setHandle(new OLAPExpressionHandler(cx.compile(expr1.getScriptId(),null,0,exprText)));
    }
 else     if (expr1 instanceof IExpressionCollection) {
      Object[] exprs=((IExpressionCollection)expr1).getExpressions().toArray();
      for (int i=0; i < exprs.length; i++) {
        prepareScriptExpression(cx,(IBaseExpression)exprs[i]);
      }
    }
  }
 catch (  BirtException e) {
    throw DataException.wrap(e);
  }
}",0.9987357774968394
67995,"public MirroredAggregationResultSet(IAggregationResultSet rs,int mirrorLevel,boolean breakHierarchy,List sortList) throws IOException {
  this.mirrorLevel=mirrorLevel;
  this.breakHierarchy=breakHierarchy;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,mirrorLevel);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}","public MirroredAggregationResultSet(IAggregationResultSet rs,int mirrorLevel,boolean breakHierarchy,List sortList) throws IOException {
  this.mirrorLevel=mirrorLevel;
  this.breakHierarchy=breakHierarchy;
  Member member=new Member();
  member.setKeyValues(new Object[]{""String_Node_Str""});
  this.rootNode=new MemberTreeNode(member);
  this.resultObject=new Object[rs.getLevelCount()];
  this.rs=rs;
  this.sortList=sortList;
  this.isTimeMirror=TimeMemberUtil.containsTimeMirror(rs,mirrorLevel);
  if (!isTimeMirror && breakHierarchy) {
    this.breakHierarchyList=new ArrayList[rs.getLevelCount() - mirrorLevel];
    for (int j=0; j < breakHierarchyList.length; j++) {
      breakHierarchyList[j]=new ArrayList();
    }
    populateMirror();
  }
 else {
    if (!isTimeMirror && !breakHierarchy) {
      this.mirrorLevel=this.mirrorLevel - 1;
    }
    populateTimeMirror();
    nodeLength=getLength(this.rootNode);
    valueMapLength=0;
    Iterator iter=this.noBreakHierarchyKeyMap.entrySet().iterator();
    while (iter.hasNext()) {
      valueMapLength+=getLength((MemberTreeNode)((Entry)iter.next()).getValue());
    }
    this.length=nodeLength * valueMapLength;
  }
}",0.9927319367250962
67996,"public static MemberTreeNode[] getDateTimeNodes(String[][] types,Object dateTimeValue,int index){
  String[] dateTypes=new String[types.length - index];
  for (int i=index; i < types.length; i++) {
    dateTypes[i - index]=getTimeType(types[i][0]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,((Integer)nodes[j].key).intValue());
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}","public static MemberTreeNode[] getDateTimeNodes(String[][] types,Object dateTimeValue,int index){
  String[] dateTypes=new String[types.length - index];
  for (int i=index; i < types.length; i++) {
    dateTypes[i - index]=getTimeType(types[i][0]);
  }
  MemberTreeNode[] secondsNode=null;
  MemberTreeNode[] minutesNode=null;
  MemberTreeNode[] hoursNode=null;
  MemberTreeNode[] dayOfYearNode=null;
  MemberTreeNode[] dayOfMonthNode=null;
  MemberTreeNode[] dayOfWeekNode=null;
  MemberTreeNode[] monthNode=null;
  MemberTreeNode[] parent=null;
  List temp=new ArrayList();
  List parentList=new ArrayList();
  for (int i=0; i < dateTypes.length; i++) {
    temp.clear();
    if (DATE_TIME_LEVEL_TYPE_SECOND.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            secondsNode=createSecond();
            nodes[j].addAllNodes(secondsNode);
            temp.add(secondsNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        secondsNode=createSecond();
        parent=secondsNode;
        parentList.clear();
        parentList.add(secondsNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MINUTE.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            minutesNode=createMinute();
            nodes[j].addAllNodes(minutesNode);
            temp.add(minutesNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        minutesNode=createMinute();
        parent=minutesNode;
        parentList.clear();
        parentList.add(minutesNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_HOUR.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            hoursNode=createHour();
            nodes[j].addAllNodes(hoursNode);
            temp.add(hoursNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        hoursNode=createHour();
        parent=hoursNode;
        parentList.clear();
        parentList.add(hoursNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_YEAR.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfYearNode=createDayOfYearNode(year);
            nodes[j].addAllNodes(dayOfYearNode);
            temp.add(dayOfYearNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfYearNode=createDayOfYearNode(year);
        parent=dayOfYearNode;
        parentList.clear();
        parentList.add(dayOfYearNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_MONTH.equals(dateTypes[i])) {
      int year=getCalendar((Date)dateTimeValue).get(Calendar.YEAR);
      int month=getCalendar((Date)dateTimeValue).get(Calendar.MONTH);
      boolean isUnderMonthHierarchy=false;
      if (i > 0)       isUnderMonthHierarchy=isDayMonth(dateTypes[i - 1]);
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            if (isUnderMonthHierarchy)             dayOfMonthNode=createDayOfMonth(year,(Integer)(((Member)nodes[j].key).getKeyValues()[0]));
 else             dayOfMonthNode=createDayOfMonth(year,month + 1);
            nodes[j].addAllNodes(dayOfMonthNode);
            temp.add(dayOfMonthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfMonthNode=createDayOfMonth(year,month + 1);
        parent=dayOfMonthNode;
        parentList.clear();
        parentList.add(dayOfMonthNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_DAY_OF_WEEK.equals(dateTypes[i])) {
      if (parentList.size() > 0) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int j=0; j < nodes.length; j++) {
            dayOfWeekNode=createDayOfWeek();
            nodes[j].addAllNodes(dayOfWeekNode);
            temp.add(dayOfWeekNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        dayOfWeekNode=createDayOfWeek();
        parent=dayOfWeekNode;
        parentList.clear();
        parentList.add(dayOfWeekNode);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_MONTH.equals(dateTypes[i])) {
      if (isQuarterMonth(dateTypes)) {
        for (int t=0; t < parentList.size(); t++) {
          MemberTreeNode[] nodes=(MemberTreeNode[])parentList.get(t);
          for (int k=0; k < nodes.length; k++) {
            monthNode=createQuarterMonthNode(k);
            nodes[k].addAllNodes(monthNode);
            temp.add(monthNode);
          }
        }
        parentList.clear();
        parentList.addAll(temp);
      }
 else {
        monthNode=createMonthNode();
        parent=monthNode;
        parentList.add(parent);
      }
    }
 else     if (DATE_TIME_LEVEL_TYPE_QUARTER.equals(dateTypes[i])) {
      parent=createQuarterNode();
      parentList.add(parent);
    }
  }
  for (int i=0; i < parent.length; i++) {
    ((Member)parent[i].key).setAttributes(new Object[]{dateTimeValue});
  }
  return parent;
}",0.997726698661278
67997,"public static MemberTreeNode[] createDayOfMonth(int year,int month){
  boolean isLeapYear=false;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    isLeapYear=true;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[0];
  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
    nodes=new MemberTreeNode[31];
    for (int i=0; i < nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      nodes[i]=new MemberTreeNode(member);
    }
  }
 else   if (month == 2) {
    if (isLeapYear) {
      nodes=new MemberTreeNode[29];
      for (int i=0; i < nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{new Integer(i)});
        nodes[i]=new MemberTreeNode(member);
      }
    }
 else {
      nodes=new MemberTreeNode[28];
      for (int i=0; i < nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{new Integer(i)});
        nodes[i]=new MemberTreeNode(member);
      }
    }
  }
 else {
    nodes=new MemberTreeNode[30];
    for (int i=0; i < nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      nodes[i]=new MemberTreeNode(member);
    }
  }
  return nodes;
}","public static MemberTreeNode[] createDayOfMonth(int year,int month){
  boolean isLeapYear=false;
  if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
    isLeapYear=true;
  }
  MemberTreeNode[] nodes=new MemberTreeNode[0];
  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
    nodes=new MemberTreeNode[31];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
 else   if (month == 2) {
    if (isLeapYear) {
      nodes=new MemberTreeNode[29];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{new Integer(i)});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
 else {
      nodes=new MemberTreeNode[28];
      for (int i=1; i <= nodes.length; i++) {
        Member member=new Member();
        member.setKeyValues(new Object[]{new Integer(i)});
        nodes[i - 1]=new MemberTreeNode(member);
      }
    }
  }
 else {
    nodes=new MemberTreeNode[30];
    for (int i=1; i <= nodes.length; i++) {
      Member member=new Member();
      member.setKeyValues(new Object[]{new Integer(i)});
      nodes[i - 1]=new MemberTreeNode(member);
    }
  }
  return nodes;
}",0.9895988112927192
67998,"public void run(){
  if (previewPainter != null) {
    previewPainter.renderModel((IChartObject)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL));
  }
}","public void run(){
  if (previewPainter != null) {
    Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
    if (cm instanceof ChartWithAxes) {
      checkDataTypeForChartWithAxes();
    }
 else {
      ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
    }
    previewPainter.renderModel(cm);
  }
}",0.4701195219123506
67999,"public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(getChartModel(),getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              previewPainter.renderModel((IChartObject)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL));
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}","public void doPreview(){
  LivePreviewTask lpt=new LivePreviewTask(Messages.getString(""String_Node_Str""),null);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewPainter != null) {
        setParameter(ChartLivePreviewThread.PARAM_CHART_MODEL,ChartUIUtil.prepareLivePreview(getChartModel(),getDataServiceProvider(),((ChartWizardContext)context).getActionEvaluator()));
      }
    }
  }
);
  lpt.addTask(new LivePreviewTask(){
    public void run(){
      if (previewCanvas != null && previewCanvas.getDisplay() != null && !previewCanvas.getDisplay().isDisposed()) {
        previewCanvas.getDisplay().syncExec(new Runnable(){
          public void run(){
            if (previewPainter != null) {
              Chart cm=(Chart)getParameter(ChartLivePreviewThread.PARAM_CHART_MODEL);
              if (cm instanceof ChartWithAxes) {
                checkDataTypeForChartWithAxes();
              }
 else {
                ChartWizard.removeAllExceptions(ChartWizard.CheckSeriesBindingType_ID);
              }
              previewPainter.renderModel(cm);
            }
          }
        }
);
      }
    }
  }
);
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).setParentShell(getPreviewCanvas().getShell());
  ((ChartLivePreviewThread)((ChartWizardContext)context).getLivePreviewThread()).add(lpt);
}",0.8685483870967742
68000,"public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
}","public static void updateColumnCache(DataSetHandle dataSetHandle,boolean holdEvent){
  try {
    if (dataSetHandle.getModuleHandle() instanceof ReportDesignHandle) {
      EngineConfig ec=new EngineConfig();
      ReportEngine engine=(ReportEngine)new ReportEngineFactory().createReportEngine(ec);
      ReportDesignHandle copy=(ReportDesignHandle)(dataSetHandle.getModuleHandle().copy().getHandle(null));
      DummyEngineTask engineTask=new DummyEngineTask(engine,new ReportEngineHelper(engine).openReportDesign(copy),copy);
      DataRequestSession session=engineTask.getDataSession();
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      engineTask.setAppContext(appContext);
      engineTask.run();
      DataService.getInstance().registerSession(dataSetHandle,session);
      session.refreshMetaData(dataSetHandle,holdEvent);
      engineTask.close();
      engine.destroy();
    }
 else {
      DataSessionContext context=new DataSessionContext(DataEngineContext.DIRECT_PRESENTATION,dataSetHandle.getRoot(),null);
      Map appContext=new HashMap();
      appContext.put(DataEngine.MEMORY_DATA_SET_CACHE,Integer.valueOf(dataSetHandle.getRowFetchLimit()));
      appContext.put(ResourceIdentifiers.ODA_APP_CONTEXT_KEY_CONSUMER_RESOURCE_IDS,createResourceIdentifiers());
      context.setAppContext(appContext);
      DataRequestSession drSession=DataRequestSession.newSession(context);
      drSession.refreshMetaData(dataSetHandle,holdEvent);
      drSession.shutdown();
    }
  }
 catch (  BirtException ex) {
    ExceptionHandler.handle(ex);
  }
}",0.0929729729729729
